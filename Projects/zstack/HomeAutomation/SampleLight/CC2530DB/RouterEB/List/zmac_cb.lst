###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               05/May/2021  18:21:40
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.40
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Components\zmac\f8w\zmac_cb.c
#    Command line       =  
#        -f C:\users\slavko\Temp\EW5357.tmp ("C:\Texas Instruments\2. main
#        recover\Z-Stack 3.0.2\Z-Stack 3.0.2\Components\zmac\f8w\zmac_cb.c" -D
#        BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE
#        -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -D HAL_LED=TRUE -D
#        HAL_KEY=TRUE -D BLINK_LEDS -lC "C:\Texas Instruments\2. main
#        recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List"
#        -lA "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\2. main
#        recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Texas Instruments\2. main recover\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List\zmac_cb.lst
#    Object file        =  
#        C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\Obj\zmac_cb.r51
#
###############################################################################

C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack 3.0.2\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2014-12-03 16:04:46 -0800 (Wed, 03 Dec 2014) $
      4            Revision:       $Revision: 41329 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          #include "cGP_stub.h"
     50             
     51          #if !defined NONWK
     52          #include "nwk.h"
     53          #include "nwk_bufs.h"
     54          #include "ZGlobals.h"
     55          #endif
     56          
     57          #if defined( MACSIM )
     58            #include "mac_sim.h"
     59          #endif
     60          
     61          #include "mac_security.h"
     62          
     63          #include "mac_main.h"
     64          #ifdef FEATURE_DUAL_MAC
     65          #include "dmmgr.h"
     66          #endif /* FEATURE_DUAL_MAC */
     67          extern void *ZMac_ScanBuf;
     68          
     69          /********************************************************************************************************
     70           *                                               CONSTANTS
     71           ********************************************************************************************************/
     72          
     73          #if !defined NONWK
     74          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     75          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   33           DB 51
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   0E           DB 14
   \   000011   0F           DB 15
     76            0,
     77            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     78            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     79            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     80            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     81            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     82            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     83            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     84            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     85            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     86            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     87            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     88            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     89            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     90            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     91            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     92            sizeof(ZMacPollInd_t),            // MAC_MLME_POLL_IND           16  Poll indication
     93            sizeof(ZMacDataCnf_t)            // MAC_MCPS_GREEN_PWR_DATA_CNF 17  Data confirm for Green Power
     94          };
     95          #endif /* !defined NONWK */
     96          
     97          /********************************************************************************************************
     98           *                                               LOCALS
     99           ********************************************************************************************************/
    100          
    101          /* LQI Adjustment Mode */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
   \                     lqiAdjMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    103          
    104          #if !defined NONWK
    105          /* LQI Adjustment Function */
    106          static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
    107          #endif
    108          
    109          /*********************************************************************
    110           * ZMAC Function Pointers
    111           */
    112          
    113          /*
    114           * ZMac Application callback function. This function will be called
    115           * for every MAC message that is received over-the-air or generated
    116           * locally by MAC for the application.
    117           *
    118           * The callback function should return TRUE if it has handled the
    119           * MAC message and no further action should be taken with it. It
    120           * should return FALSE if it has not handled the MAC message and
    121           * normal processing should take place.
    122           *
    123           * NOTE: The processing in this function should be kept to the
    124           *       minimum.
    125           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    127          
    128          
    129          /*********************************************************************
    130           * ZMAC Functions
    131           */
    132          
    133          /**************************************************************************************************
    134           * @fn       MAC_CbackEvent()
    135           *
    136           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    137           *
    138           * @param    pData - pointer to macCbackEvent_t
    139           *
    140           * @return   none
    141           *************************************************************************************************/
    142          #ifdef FEATURE_DUAL_MAC
    143          void ZMacCbackEventHdlr(macCbackEvent_t *pData)
    144          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    146          #endif /* FEATURE_DUAL_MAC */
    147          #ifndef MT_MAC_CB_FUNC
    148          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   12....       LCALL     ?Subroutine1 & 0xFFFF
    149          #if !defined NONWK
    150            uint8 event = pData->hdr.event;
   \                     ??CrossCallReturnLabel_0:
   \   000017   12....       LCALL     ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V2,A
    151            uint16 tmp = zmacCBSizeTable[event];
   \   00001D   F8           MOV       R0,A
   \   00001E   74..         MOV       A,#zmacCBSizeTable & 0xff
   \   000020   28           ADD       A,R0
   \   000021   F582         MOV       DPL,A
   \   000023   E4           CLR       A
   \   000024   34..         ADDC      A,#(zmacCBSizeTable >> 8) & 0xff
   \   000026   F583         MOV       DPH,A
   \   000028   E4           CLR       A
   \   000029   93           MOVC      A,@A+DPTR
   \   00002A   F5..         MOV       ?V0,A
   \   00002C   7402         MOV       A,#0x2
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E5..         MOV       A,?V0
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   E4           CLR       A
   \   000036   F0           MOVX      @DPTR,A
    152            macCbackEvent_t *msgPtr;
    153          
    154            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    155             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    156             */
    157            if (tmp == 0)
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   7003         JNZ       $+5
   \   00003F   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    158            {
    159              return;
    160            }
    161          
    162            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    163            if ( event == MAC_MCPS_DATA_IND )
   \   000042   740D         MOV       A,#0xd
   \   000044   68           XRL       A,R0
   \   000045   7046         JNZ       ??MAC_CbackEvent_1
    164            {
    165          #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
    166              // This feature limits the number of unprocessed MAC Data Indications that can be queued
    167              // into the Network Task's OSAL message queue. To enable ZMAC_MAX_DATA_IND filtering, the
    168              // command-line option specifies the threshold setting where MAC_MCPS_DATD_IND callback
    169              // messages will be dropped. For example, adding ZMAC_MAX_DATA_IND=5 to the commnad-line
    170              // options allows up to five messages to be passed up and queued in the NWK layer buffer.
    171              uint8 diCount = osal_msg_count( NWK_TaskID, MAC_MCPS_DATA_IND );
    172          #endif // ZMAC_MAX_DATA_IND
    173              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   000047                ; Setup parameters for call to function MAC_MlmeGetReq
   \   000047   7402         MOV       A,#0x2
   \   000049   12....       LCALL     ?XSTACK_DISP101_8
   \   00004C   7953         MOV       R1,#0x53
   \   00004E   12....       LCALL     `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
    174              if ( (tmp == INVALID_NODE_ADDR) ||
    175                   (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    176          #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
    177                   (diCount > ZMAC_MAX_DATA_IND) ||
    178          #endif // ZMAC_MAX_DATA_IND
    179                   (pData->dataInd.msdu.len == 0) )
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   E0           MOVX      A,@DPTR
   \   000057   64FE         XRL       A,#0xfe
   \   000059   7003         JNZ       ??MAC_CbackEvent_2
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F4           CPL       A
   \                     ??MAC_CbackEvent_2:
   \   00005E   7003         JNZ       $+5
   \   000060   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
   \   000063   7402         MOV       A,#0x2
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F4           CPL       A
   \   00006A   7003         JNZ       ??MAC_CbackEvent_4
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F4           CPL       A
   \                     ??MAC_CbackEvent_4:
   \   00006F   7003         JNZ       $+5
   \   000071   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
   \   000074   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   7003         JNZ       $+5
   \   00007C   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
    180              {
    181                mac_msg_deallocate( (uint8 **)&pData );
    182                return;
    183              }
    184              msgPtr = pData;
   \   00007F   85..82       MOV       DPL,?XSP + 0
   \   000082   85..83       MOV       DPH,?XSP + 1
   \   000085   E0           MOVX      A,@DPTR
   \   000086   FE           MOV       R6,A
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   FF           MOV       R7,A
   \   00008A   02....       LJMP      ??MAC_CbackEvent_5 & 0xFFFF
    185            }
    186            else
    187            {
    188              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   00008D   7405         MOV       A,#0x5
   \   00008F   68           XRL       A,R0
   \   000090   7015         JNZ       ??MAC_CbackEvent_6
    189              {
    190                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   000092   85..82       MOV       DPL,?XSP + 0
   \   000095   85..83       MOV       DPH,?XSP + 1
   \   000098   E0           MOVX      A,@DPTR
   \   000099   F8           MOV       R0,A
   \   00009A   12....       LCALL     ?Subroutine6 & 0xFFFF
    191              }
   \                     ??CrossCallReturnLabel_11:
   \   00009D   7900         MOV       R1,#0x0
   \   00009F   2421         ADD       A,#0x21
   \   0000A1   F8           MOV       R0,A
   \   0000A2   502D         JNC       ??MAC_CbackEvent_7
   \   0000A4   09           INC       R1
   \   0000A5   802A         SJMP      ??MAC_CbackEvent_7
    192              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_6:
   \   0000A7   7407         MOV       A,#0x7
   \   0000A9   68           XRL       A,R0
   \   0000AA   7031         JNZ       ??MAC_CbackEvent_8
    193              {
    194                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000AC   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   700F         JNZ       ??MAC_CbackEvent_9
    195                {
    196                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   0000B2   7402         MOV       A,#0x2
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   241B         ADD       A,#0x1b
   \   0000BA   F0           MOVX      @DPTR,A
   \   0000BB   A3           INC       DPTR
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   3400         ADDC      A,#0x0
   \   0000BF   801B         SJMP      ??MAC_CbackEvent_10
    197                }
    198                else
    199                {
    200                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_9:
   \   0000C1   85..82       MOV       DPL,?XSP + 0
   \   0000C4   85..83       MOV       DPH,?XSP + 1
   \   0000C7   12....       LCALL     ?Subroutine6 & 0xFFFF
    201                }
    202              }
   \                     ??CrossCallReturnLabel_12:
   \   0000CA   75F021       MOV       B,#0x21
   \   0000CD   A4           MUL       AB
   \   0000CE   F8           MOV       R0,A
   \   0000CF   A9F0         MOV       R1,B
   \                     ??MAC_CbackEvent_7:
   \   0000D1   7402         MOV       A,#0x2
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   28           ADD       A,R0
   \   0000D8   F0           MOVX      @DPTR,A
   \   0000D9   A3           INC       DPTR
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   39           ADDC      A,R1
   \                     ??MAC_CbackEvent_10:
   \   0000DC   F0           MOVX      @DPTR,A
    203          
    204              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_8:
   \   0000DD                ; Setup parameters for call to function osal_msg_allocate
   \   0000DD   7402         MOV       A,#0x2
   \   0000DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E2   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000E5   7035         JNZ       ??MAC_CbackEvent_11
    205              {
    206                // Not enough memory. If data confirm - try again
    207                if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \   0000E7   740C         MOV       A,#0xc
   \   0000E9   65..         XRL       A,?V2
   \   0000EB   6003         JZ        $+5
   \   0000ED   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
   \   0000F0   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000F3   7003         JNZ       $+5
   \   0000F5   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    208                {
    209                  halIntState_t intState;
    210          
    211                  // This is not normally deallocated here because the pZMac_AppCallback()
    212                  // application may need it.
    213                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   0000F8   A2AF         MOV       C,0xa8.7
   \   0000FA   E4           CLR       A
   \   0000FB   33           RLC       A
   \   0000FC   F5..         MOV       ?V3,A
   \   0000FE   C2AF         CLR       0xa8.7
    214          
    215                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   000100                ; Setup parameters for call to function mac_msg_deallocate
   \   000100   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    216                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   000103                ; Setup parameters for call to function osal_msg_allocate
   \   000103   7402         MOV       A,#0x2
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00010B   7009         JNZ       ??MAC_CbackEvent_12
    217                  {
    218                    // Still no allocation, something is wrong
    219                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   00010D   E5..         MOV       A,?V3
   \   00010F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000111   92AF         MOV       0xa8.7,C
    220                    return;
   \   000113   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    221                  }
    222                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_12:
   \   000116   E5..         MOV       A,?V3
   \   000118   A2E0         MOV       C,0xE0 /* A   */.0
   \   00011A   92AF         MOV       0xa8.7,C
    223                }
    224                else
    225                {
    226                  // This message is dropped
    227                  return;
    228                }
    229              }
    230              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_11:
   \   00011C                ; Setup parameters for call to function osal_memcpy
   \   00011C   85..82       MOV       DPL,?XSP + 0
   \   00011F   85..83       MOV       DPH,?XSP + 1
   \   000122   E0           MOVX      A,@DPTR
   \   000123   F5..         MOV       ?V4,A
   \   000125   A3           INC       DPTR
   \   000126   E0           MOVX      A,@DPTR
   \   000127   F5..         MOV       ?V5,A
   \   000129   75..00       MOV       ?V6,#0x0
   \   00012C   78..         MOV       R0,#?V4
   \   00012E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000131   AC..         MOV       R4,?V0
   \   000133   7D00         MOV       R5,#0x0
   \   000135   EE           MOV       A,R6
   \   000136   FA           MOV       R2,A
   \   000137   EF           MOV       A,R7
   \   000138   FB           MOV       R3,A
   \   000139   12....       LCALL     ??Subroutine15_0 & 0xFFFF
    231            }
   \                     ??CrossCallReturnLabel_23:
   \   00013C   12....       LCALL     ?DEALLOC_XSTACK8
    232          
    233            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \   00013F   EE           MOV       A,R6
   \   000140   2409         ADD       A,#0x9
   \   000142   F5..         MOV       ?V8,A
   \   000144   E4           CLR       A
   \   000145   3F           ADDC      A,R7
   \   000146   F5..         MOV       ?V9,A
   \   000148   EE           MOV       A,R6
   \   000149   2408         ADD       A,#0x8
   \   00014B   F5..         MOV       ?V12,A
   \   00014D   E4           CLR       A
   \   00014E   3F           ADDC      A,R7
   \   00014F   F5..         MOV       ?V13,A
   \   000151   7405         MOV       A,#0x5
   \   000153   65..         XRL       A,?V2
   \   000155   706F         JNZ       ??MAC_CbackEvent_13
    234            {
    235              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
    236          
    237              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   000157   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00015A   EE           MOV       A,R6
   \   00015B   2403         ADD       A,#0x3
   \   00015D   F5..         MOV       ?V10,A
   \   00015F   E4           CLR       A
   \   000160   3F           ADDC      A,R7
   \   000161   F5..         MOV       ?V11,A
   \   000163                ; Setup parameters for call to function osal_memcpy
   \   000163   85..82       MOV       DPL,?V10
   \   000166   F583         MOV       DPH,A
   \   000168   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00016B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016E   7C21         MOV       R4,#0x21
   \   000170   7D00         MOV       R5,#0x0
   \   000172   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000175   12....       LCALL     ?DEALLOC_XSTACK8
    238              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   000178   85..82       MOV       DPL,?V10
   \   00017B   85..83       MOV       DPH,?V11
   \   00017E   E5..         MOV       A,?V0
   \   000180   F0           MOVX      @DPTR,A
   \   000181   A3           INC       DPTR
   \   000182   E5..         MOV       A,?V1
   \   000184   F0           MOVX      @DPTR,A
    239              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000185                ; Setup parameters for call to function osal_memcpy
   \   000185   85..82       MOV       DPL,?V8
   \   000188   85..83       MOV       DPH,?V9
   \   00018B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00018E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000191   85..82       MOV       DPL,?V12
   \   000194   85..83       MOV       DPH,?V13
   \   000197   E0           MOVX      A,@DPTR
   \   000198   FC           MOV       R4,A
   \   000199   7D00         MOV       R5,#0x0
   \   00019B   E5..         MOV       A,?V0
   \   00019D   2421         ADD       A,#0x21
   \   00019F   FA           MOV       R2,A
   \   0001A0   E4           CLR       A
   \   0001A1   35..         ADDC      A,?V1
   \   0001A3   FB           MOV       R3,A
   \   0001A4   12....       LCALL     ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0001A7   12....       LCALL     ?DEALLOC_XSTACK8
    240              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0001AA   85..82       MOV       DPL,?V10
   \   0001AD   85..83       MOV       DPH,?V11
   \   0001B0   E0           MOVX      A,@DPTR
   \   0001B1   2421         ADD       A,#0x21
   \   0001B3   F8           MOV       R0,A
   \   0001B4   A3           INC       DPTR
   \   0001B5   E0           MOVX      A,@DPTR
   \   0001B6   3400         ADDC      A,#0x0
   \   0001B8   F9           MOV       R1,A
   \   0001B9   85..82       MOV       DPL,?V8
   \   0001BC   85..83       MOV       DPH,?V9
   \   0001BF   E8           MOV       A,R0
   \   0001C0   F0           MOVX      @DPTR,A
   \   0001C1   A3           INC       DPTR
   \   0001C2   E9           MOV       A,R1
   \   0001C3   F0           MOVX      @DPTR,A
   \   0001C4   806E         SJMP      ??MAC_CbackEvent_5
    241            }
    242            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_13:
   \   0001C6   7407         MOV       A,#0x7
   \   0001C8   65..         XRL       A,?V2
   \   0001CA   7068         JNZ       ??MAC_CbackEvent_5
    243            {
    244              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
    245          
    246              if (ZMac_ScanBuf != NULL)
   \   0001CC   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001CF   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001D2   6060         JZ        ??MAC_CbackEvent_5
    247              {
    248                void *pTmp = ZMac_ScanBuf;
   \   0001D4   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   F5..         MOV       ?V10,A
   \   0001DA   A3           INC       DPTR
   \   0001DB   E0           MOVX      A,@DPTR
   \   0001DC   F5..         MOV       ?V11,A
    249                ZMac_ScanBuf = NULL;
   \   0001DE   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001E1   E4           CLR       A
   \   0001E2   F0           MOVX      @DPTR,A
   \   0001E3   A3           INC       DPTR
   \   0001E4   F0           MOVX      @DPTR,A
    250          
    251                if (pScan->scanType == ZMAC_ED_SCAN)
   \   0001E5   88..         MOV       ?V4,R0
   \   0001E7   89..         MOV       ?V5,R1
   \   0001E9   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0001EC   8E82         MOV       DPL,R6
   \   0001EE   8F83         MOV       DPH,R7
   \   0001F0   A3           INC       DPTR
   \   0001F1   A3           INC       DPTR
   \   0001F2   E0           MOVX      A,@DPTR
   \   0001F3   85..82       MOV       DPL,?V8
   \   0001F6   85..83       MOV       DPH,?V9
   \   0001F9   7012         JNZ       ??MAC_CbackEvent_14
    252                {
    253                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   0001FB   E5..         MOV       A,?V0
   \   0001FD   F0           MOVX      @DPTR,A
   \   0001FE   A3           INC       DPTR
   \   0001FF   E5..         MOV       A,?V1
   \   000201   F0           MOVX      @DPTR,A
    254                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \   000202                ; Setup parameters for call to function osal_memcpy
   \   000202   78..         MOV       R0,#?V4
   \   000204   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000207   7C1B         MOV       R4,#0x1b
   \   000209   7D00         MOV       R5,#0x0
   \   00020B   801A         SJMP      ??MAC_CbackEvent_15
    255                }
    256                else
    257                {
    258                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_14:
   \   00020D   E5..         MOV       A,?V0
   \   00020F   F0           MOVX      @DPTR,A
   \   000210   A3           INC       DPTR
   \   000211   E5..         MOV       A,?V1
   \   000213   F0           MOVX      @DPTR,A
    259                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   000214                ; Setup parameters for call to function osal_memcpy
   \   000214   78..         MOV       R0,#?V4
   \   000216   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000219   85..82       MOV       DPL,?V12
   \   00021C   85..83       MOV       DPH,?V13
   \   00021F   E0           MOVX      A,@DPTR
   \   000220   75F021       MOV       B,#0x21
   \   000223   A4           MUL       AB
   \   000224   FC           MOV       R4,A
   \   000225   ADF0         MOV       R5,B
    260                }
   \                     ??MAC_CbackEvent_15:
   \   000227   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00022A   12....       LCALL     ?DEALLOC_XSTACK8
    261          
    262                osal_mem_free(pTmp);
   \   00022D                ; Setup parameters for call to function osal_mem_free
   \   00022D   AA..         MOV       R2,?V10
   \   00022F   AB..         MOV       R3,?V11
   \   000231   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    263              }
    264            }
    265          
    266            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_5:
   \   000234   90....       MOV       DPTR,#pZMac_AppCallback
   \   000237   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00023A   6010         JZ        ??MAC_CbackEvent_16
   \   00023C                ; Setup parameters for indirect call
   \   00023C   EE           MOV       A,R6
   \   00023D   FA           MOV       R2,A
   \   00023E   EF           MOV       A,R7
   \   00023F   FB           MOV       R3,A
   \   000240   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000243   12....       LCALL     ?CALL_IND
   \   000246   E9           MOV       A,R1
   \   000247   6003         JZ        $+5
   \   000249   02....       LJMP      ??CrossCallReturnLabel_27 & 0xFFFF
    267            {
    268              // Filter out non-zigbee packets
    269              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_16:
   \   00024C   740D         MOV       A,#0xd
   \   00024E   65..         XRL       A,?V2
   \   000250   6003         JZ        $+5
   \   000252   02....       LJMP      ??MAC_CbackEvent_17 & 0xFFFF
    270              {
    271                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
    272                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
   \   000255   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000258   8882         MOV       DPL,R0
   \   00025A   F583         MOV       DPH,A
   \   00025C   E0           MOVX      A,@DPTR
   \   00025D   FA           MOV       R2,A
   \   00025E   13           RRC       A
   \   00025F   13           RRC       A
   \   000260   543F         ANL       A,#0x3f
   \   000262   540F         ANL       A,#0xf
   \   000264   F9           MOV       R1,A
    273                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xC0);
   \   000265   A3           INC       DPTR
   \   000266   E0           MOVX      A,@DPTR
   \   000267   F8           MOV       R0,A
    274                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
    275                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   000268   7403         MOV       A,#0x3
   \   00026A   5A           ANL       A,R2
   \   00026B   C3           CLR       C
   \   00026C   9402         SUBB      A,#0x2
   \   00026E   501D         JNC       ??MAC_CbackEvent_18
   \   000270   90....       MOV       DPTR,#_NIB + 17
   \   000273   E0           MOVX      A,@DPTR
   \   000274   69           XRL       A,R1
   \   000275   7016         JNZ       ??MAC_CbackEvent_18
   \   000277   74C0         MOV       A,#-0x40
   \   000279   58           ANL       A,R0
   \   00027A   7011         JNZ       ??MAC_CbackEvent_18
   \   00027C   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00027F   C8           XCH       A,R0
   \   000280   241B         ADD       A,#0x1b
   \   000282   F582         MOV       DPL,A
   \   000284   E4           CLR       A
   \   000285   38           ADDC      A,R0
   \   000286   F583         MOV       DPH,A
   \   000288   E0           MOVX      A,@DPTR
   \   000289   6402         XRL       A,#0x2
   \   00028B   601D         JZ        ??MAC_CbackEvent_19
    276                {
    277          #if (ZG_BUILD_RTR_TYPE)       
    278                  //Is this for GP
    279                  if(fcProtoVer == GP_ZIGBEE_PROTOCOL_VER)
   \                     ??MAC_CbackEvent_18:
   \   00028D   7403         MOV       A,#0x3
   \   00028F   69           XRL       A,R1
   \   000290   7011         JNZ       ??MAC_CbackEvent_3
    280                  {
    281                    pData->hdr.event = GP_MAC_MCPS_DATA_IND;
   \   000292   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000295   7401         MOV       A,#0x1
   \   000297   12....       LCALL     ?Subroutine1 & 0xFFFF
    282             
    283                    // Application hasn't already processed this message. Send it to NWK task.
    284                    osal_msg_send( gp_TaskID, (uint8 *)pData );
   \                     ??CrossCallReturnLabel_1:
   \   00029A   FA           MOV       R2,A
   \   00029B   A3           INC       DPTR
   \   00029C   E0           MOVX      A,@DPTR
   \   00029D   12....       LCALL     ?Subroutine10 & 0xFFFF
    285          
    286                    return;
   \                     ??CrossCallReturnLabel_25:
   \   0002A0   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    287                  }
    288          #endif
    289                
    290                  // Drop the message
    291                  mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_3:
   \   0002A3                ; Setup parameters for call to function mac_msg_deallocate
   \   0002A3   AA..         MOV       R2,?XSP + 0
   \   0002A5   AB..         MOV       R3,?XSP + 1
   \   0002A7   02....       LJMP      ??MAC_CbackEvent_20 & 0xFFFF
    292                  return;
    293                }
    294                else
    295                {
    296                  macDataInd_t *pInd = &msgPtr->dataInd.mac;
   \                     ??MAC_CbackEvent_19:
   \   0002AA   EE           MOV       A,R6
   \   0002AB   2413         ADD       A,#0x13
   \   0002AD   F8           MOV       R0,A
   \   0002AE   E4           CLR       A
   \   0002AF   3F           ADDC      A,R7
   \   0002B0   F9           MOV       R1,A
    297                  // See if LQI needs adjustment due to frame correlation
    298                  ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
   \   0002B1                ; Setup parameters for call to function ZMacLqiAdjust
   \   0002B1   E8           MOV       A,R0
   \   0002B2   241C         ADD       A,#0x1c
   \   0002B4   FA           MOV       R2,A
   \   0002B5   E4           CLR       A
   \   0002B6   39           ADDC      A,R1
   \   0002B7   FB           MOV       R3,A
   \   0002B8   E8           MOV       A,R0
   \   0002B9   241D         ADD       A,#0x1d
   \   0002BB   F582         MOV       DPL,A
   \   0002BD   E4           CLR       A
   \   0002BE   39           ADDC      A,R1
   \   0002BF   F583         MOV       DPH,A
   \   0002C1   E0           MOVX      A,@DPTR
   \   0002C2   F9           MOV       R1,A
   \   0002C3   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    299          
    300                  // Look for broadcast message that has a radius of greater 1
    301                  if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
    302                         && (pData->dataInd.msdu.p[6] > 1) )
   \   0002C6   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0002C9   C8           XCH       A,R0
   \   0002CA   241C         ADD       A,#0x1c
   \   0002CC   F582         MOV       DPL,A
   \   0002CE   E4           CLR       A
   \   0002CF   38           ADDC      A,R0
   \   0002D0   F583         MOV       DPH,A
   \   0002D2   E0           MOVX      A,@DPTR
   \   0002D3   F4           CPL       A
   \   0002D4   7003         JNZ       ??MAC_CbackEvent_21
   \   0002D6   A3           INC       DPTR
   \   0002D7   E0           MOVX      A,@DPTR
   \   0002D8   F4           CPL       A
   \                     ??MAC_CbackEvent_21:
   \   0002D9   7063         JNZ       ??MAC_CbackEvent_22
   \   0002DB   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0002DE   C8           XCH       A,R0
   \   0002DF   2406         ADD       A,#0x6
   \   0002E1   F582         MOV       DPL,A
   \   0002E3   E4           CLR       A
   \   0002E4   38           ADDC      A,R0
   \   0002E5   F583         MOV       DPH,A
   \   0002E7   E0           MOVX      A,@DPTR
   \   0002E8   C3           CLR       C
   \   0002E9   9402         SUBB      A,#0x2
   \   0002EB   4051         JC        ??MAC_CbackEvent_22
    303                  {
    304                    // Send the messsage to a special broadcast queue
    305                    if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
   \   0002ED                ; Setup parameters for call to function nwk_broadcastSend
   \   0002ED   EE           MOV       A,R6
   \   0002EE   FA           MOV       R2,A
   \   0002EF   EF           MOV       A,R7
   \   0002F0   FB           MOV       R3,A
   \   0002F1   12....       LCALL     `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
   \   0002F4   E9           MOV       A,R1
   \   0002F5   6065         JZ        ??MAC_CbackEvent_0
    306                    {
    307                      // Drop the message, too many broadcast messages to process
    308                      mac_msg_deallocate( (uint8 **)&pData );
   \   0002F7                ; Setup parameters for call to function mac_msg_deallocate
   \   0002F7   AA..         MOV       R2,?XSP + 0
   \   0002F9   AB..         MOV       R3,?XSP + 1
   \   0002FB   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    309                    }
    310                    return;
   \                     ??MAC_CbackEvent_23:
   \   0002FE   805C         SJMP      ??MAC_CbackEvent_0
    311                  }
    312                }
    313              }
    314              else if ((event == MAC_MCPS_DATA_CNF) && (pData->hdr.status != MAC_NO_RESOURCES))
   \                     ??MAC_CbackEvent_17:
   \   000300   740C         MOV       A,#0xc
   \   000302   65..         XRL       A,?V2
   \   000304   7060         JNZ       ??MAC_CbackEvent_24
   \   000306   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000309   A3           INC       DPTR
   \   00030A   E0           MOVX      A,@DPTR
   \   00030B   641A         XRL       A,#0x1a
   \   00030D   602F         JZ        ??MAC_CbackEvent_22
    315              {
    316                macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
    317          
    318                if ( pCnf->pDataReq && (pCnf->pDataReq->internal.txOptions & MAC_TXOPTION_ACK) )
   \   00030F   8E82         MOV       DPL,R6
   \   000311   8F83         MOV       DPH,R7
   \   000313   A3           INC       DPTR
   \   000314   A3           INC       DPTR
   \   000315   A3           INC       DPTR
   \   000316   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000319   6023         JZ        ??MAC_CbackEvent_22
   \   00031B   E8           MOV       A,R0
   \   00031C   240E         ADD       A,#0xe
   \   00031E   F582         MOV       DPL,A
   \   000320   E4           CLR       A
   \   000321   39           ADDC      A,R1
   \   000322   F583         MOV       DPH,A
   \   000324   E0           MOVX      A,@DPTR
   \   000325   A2E0         MOV       C,0xE0 /* A   */.0
   \   000327   5015         JNC       ??MAC_CbackEvent_22
    319                {
    320                  // See if LQI needs adjustment due to frame correlation
    321                  ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
   \   000329                ; Setup parameters for call to function ZMacLqiAdjust
   \   000329   EE           MOV       A,R6
   \   00032A   240C         ADD       A,#0xc
   \   00032C   FA           MOV       R2,A
   \   00032D   E4           CLR       A
   \   00032E   3F           ADDC      A,R7
   \   00032F   FB           MOV       R3,A
   \   000330   EE           MOV       A,R6
   \   000331   240D         ADD       A,#0xd
   \   000333   F582         MOV       DPL,A
   \   000335   E4           CLR       A
   \   000336   3F           ADDC      A,R7
   \   000337   F583         MOV       DPH,A
   \   000339   E0           MOVX      A,@DPTR
   \   00033A   F9           MOV       R1,A
   \   00033B   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    322                }
    323              }
    324              if(event == MAC_MCPS_GREEN_PWR_DATA_CNF)
    325              {
    326                msgPtr->dataCnf.hdr.event = GP_MAC_MCPS_DATA_CNF;
    327          #if (ZG_BUILD_RTR_TYPE)       
    328                osal_msg_send( gp_TaskID, (uint8 *)msgPtr);
    329          #endif
    330              }
    331              else
    332              {
    333                osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_22:
   \   00033E                ; Setup parameters for call to function osal_msg_send
   \   00033E   EE           MOV       A,R6
   \   00033F   FA           MOV       R2,A
   \   000340   EF           MOV       A,R7
   \   000341   FB           MOV       R3,A
   \   000342   90....       MOV       DPTR,#NWK_TaskID
   \   000345   12....       LCALL     ??Subroutine16_0 & 0xFFFF
    334              }
    335            }
    336            
    337          #if (ZG_BUILD_RTR_TYPE)
    338            if ((event == MAC_MCPS_DATA_CNF || event == MAC_MCPS_GREEN_PWR_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \                     ??CrossCallReturnLabel_27:
   \   000348   740C         MOV       A,#0xc
   \   00034A   65..         XRL       A,?V2
   \   00034C   6006         JZ        ??MAC_CbackEvent_25
   \   00034E   7411         MOV       A,#0x11
   \   000350   65..         XRL       A,?V2
   \   000352   7008         JNZ       ??MAC_CbackEvent_0
   \                     ??MAC_CbackEvent_25:
   \   000354   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000357   6003         JZ        ??MAC_CbackEvent_0
    339          #else
    340            if ((event == MAC_MCPS_DATA_CNF ) && (pData->dataCnf.pDataReq != NULL))
    341          #endif
    342            {
    343              // If the application needs 'pDataReq' then we cannot free it here.
    344              // The application must free it after using it. Note that 'pDataReq'
    345              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    346          
    347              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   000359                ; Setup parameters for call to function mac_msg_deallocate
   \                     ??MAC_CbackEvent_20:
   \   000359   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    348            }
    349          #endif
    350          }
   \                     ??MAC_CbackEvent_0:
   \   00035C   7404         MOV       A,#0x4
   \   00035E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000361   7F0E         MOV       R7,#0xe
   \   000363   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??MAC_CbackEvent_24:
   \   000366   7411         MOV       A,#0x11
   \   000368   65..         XRL       A,?V2
   \   00036A   70D2         JNZ       ??MAC_CbackEvent_22
   \   00036C   8E82         MOV       DPL,R6
   \   00036E   8F83         MOV       DPH,R7
   \   000370   E4           CLR       A
   \   000371   F0           MOVX      @DPTR,A
   \   000372                ; Setup parameters for call to function osal_msg_send
   \   000372   EE           MOV       A,R6
   \   000373   FA           MOV       R2,A
   \   000374   EF           MOV       A,R7
   \   000375   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000378   80DA         SJMP      ??MAC_CbackEvent_25
   \   00037A                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F5..         MOV       ?V1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004                REQUIRE ??Subroutine15_0
   \   000004                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   FB           MOV       R3,A
   \   000001   90....       MOV       DPTR,#gp_TaskID
   \   000004                REQUIRE ??Subroutine16_0
   \   000004                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   78..         MOV       R0,#?V4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007                REQUIRE ??Subroutine17_0
   \   000007                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine18_0
   \   000002                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   C8           XCH       A,R0
   \   000003   2408         ADD       A,#0x8
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   12....       LCALL     ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000008   8A..         MOV       ?V4,R2
   \   00000A   8B..         MOV       ?V5,R3
   \   00000C   AE..         MOV       R6,?V4
   \   00000E   AF..         MOV       R7,?V5
   \   000010   EA           MOV       A,R2
   \   000011   4F           ORL       A,R7
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2403         ADD       A,#0x3
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3400         ADDC      A,#0x0
   \   00000E   FB           MOV       R3,A
   \   00000F   8A82         MOV       DPL,R2
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000016   F9           MOV       R1,A
   \   000017   E8           MOV       A,R0
   \   000018   49           ORL       A,R1
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine19_0
   \   000006                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET
    351          #else  // ifdef MT_MAC_CB_FUNC
    352          {
    353            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    354            switch (pData->hdr.event)
    355            {
    356              case MAC_MLME_ASSOCIATE_IND:
    357                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    358                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    359                break;
    360          
    361              case MAC_MLME_ASSOCIATE_CNF:
    362                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    363                {
    364                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    365          #ifdef FEATURE_DUAL_MAC
    366                  DMMGR_ResetActivityFlag( ASSOC_ACTIVITY );
    367          #endif /* FEATURE_DUAL_MAC */
    368                }
    369                break;
    370          
    371              case MAC_MLME_DISASSOCIATE_IND:
    372                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    373                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    374                break;
    375          
    376              case MAC_MLME_DISASSOCIATE_CNF:
    377                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    378                {
    379                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    380          #ifdef FEATURE_DUAL_MAC
    381                  DMMGR_ResetActivityFlag( DISASSOC_ACTIVITY );
    382          #endif /* FEATURE_DUAL_MAC */
    383                }
    384                break;
    385          
    386              case MAC_MLME_BEACON_NOTIFY_IND:
    387                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    388                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    389                break;
    390          
    391              case MAC_MLME_ORPHAN_IND:
    392                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    393                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    394                break;
    395          
    396              case MAC_MLME_SCAN_CNF:
    397                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    398                {
    399                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    400                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    401          #ifdef FEATURE_DUAL_MAC
    402                  DMMGR_ResetActivityFlag( SCAN_ACTIVITY );
    403          #endif /* FEATURE_DUAL_MAC */
    404                }
    405          
    406                if (ZMac_ScanBuf != NULL)
    407                {
    408                  void *pTmp = ZMac_ScanBuf;
    409                  ZMac_ScanBuf = NULL;
    410                  osal_mem_free(pTmp);
    411                }
    412                break;
    413          
    414              case MAC_MLME_START_CNF:
    415                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    416                {
    417                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    418          #ifdef FEATURE_DUAL_MAC
    419                  DMMGR_ResetActivityFlag( START_ACTIVITY );
    420          #endif /* FEATURE_DUAL_MAC */
    421                }
    422                break;
    423          
    424              case MAC_MLME_SYNC_LOSS_IND:
    425                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    426                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    427                break;
    428          
    429              case MAC_MLME_POLL_CNF:
    430                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    431                {
    432                  nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    433          #ifdef FEATURE_DUAL_MAC
    434                  DMMGR_ResetActivityFlag( DATA_POLL_ACTIVITY );
    435          #endif /* FEATURE_DUAL_MAC */
    436                }
    437                break;
    438          
    439              case MAC_MLME_COMM_STATUS_IND:
    440                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    441                {
    442                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    443          #ifdef FEATURE_DUAL_MAC
    444                  /**
    445                   * Reset the activity flags if we receive the comm status 
    446                   * indication. The association response and orphan response msg 
    447                   * receives the comm-status indication message as a response. 
    448                   */
    449                  switch ( ((ZMacCommStatusInd_t *) pData)->hdr.Status )
    450                  {
    451                    case ZMAC_SUCCESS:
    452                    case ZMAC_TRANSACTION_OVERFLOW:
    453                    case ZMAC_TRANSACTION_EXPIRED:
    454                    case ZMAC_CHANNEL_ACCESS_FAILURE:
    455                    case ZMAC_NO_RESOURCES:          
    456                    case ZMAC_NO_ACK:
    457                    case ZMAC_COUNTER_ERROR:    
    458                    case ZMAC_INVALID_PARAMETER:
    459                      DMMGR_ResetActivityFlag( ALL_ACTIVITY );
    460                      break;
    461                    default:
    462                      /**
    463                       * If the activity flag is not reset, we need to re-evaluate the
    464                       * and add more case statement above. Note, MAC security is not
    465                       * used by zstack and not supported by dual mac.
    466                       */
    467                      break;
    468                  }
    469          #endif /* FEATURE_DUAL_MAC */
    470                }
    471                break;
    472          
    473              case MAC_MCPS_DATA_CNF:
    474              {
    475          #ifdef FEATURE_DUAL_MAC
    476                if ( pData->dataCnf.pDataReq != NULL )
    477                {
    478                  if ( DMMGR_IsDefaultMac() )
    479                  {
    480                    DMMGR_ProcessMacDataCnf((macMcpsDataCnf_t *)pData);
    481                  }
    482                  
    483                  mac_msg_deallocate((uint8 **)&pData->dataCnf.pDataReq); 
    484                }
    485                
    486                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    487                {
    488                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    489                }
    490          
    491                DMMGR_ResetActivityFlag( DATA_ACTIVITY );
    492          #else
    493                if (pData->dataCnf.pDataReq != NULL)
    494                {
    495                  mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    496                }
    497          
    498                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    499                {
    500                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    501                }
    502          
    503          #endif /* FEATURE_DUAL_MAC */
    504              }
    505              break;
    506          
    507              case MAC_MCPS_DATA_IND:
    508                {
    509                  /*
    510                     Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    511                     buffer and re-organize the contents into ZMAC format.
    512                  */
    513                  ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    514                  uint8 event, status, len, *msdu;
    515          
    516                  /* Store parameters */
    517                  event = pData->hdr.event;
    518                  status = pData->hdr.status;
    519                  len = pData->dataInd.msdu.len;
    520                  msdu = pData->dataInd.msdu.p;
    521          
    522                  /* Copy security fields */
    523                  osal_memcpy(&pDataInd->Sec, &pData->dataInd.sec, sizeof(ZMacSec_t));
    524          
    525                  /* Copy mac fields one by one since the two buffers overlap. */
    526                  osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac.srcAddr, sizeof(zAddrType_t));
    527                  osal_memcpy(&pDataInd->DstAddr, &pData->dataInd.mac.dstAddr, sizeof(zAddrType_t));
    528                  pDataInd->Timestamp = pData->dataInd.mac.timestamp;
    529                  pDataInd->Timestamp2 = pData->dataInd.mac.timestamp2;
    530                  pDataInd->SrcPANId = pData->dataInd.mac.srcPanId;
    531                  pDataInd->DstPANId = pData->dataInd.mac.dstPanId;
    532                  pDataInd->mpduLinkQuality = pData->dataInd.mac.mpduLinkQuality;
    533                  pDataInd->Correlation = pData->dataInd.mac.correlation;
    534                  pDataInd->Rssi = pData->dataInd.mac.rssi;
    535                  pDataInd->Dsn = pData->dataInd.mac.dsn;
    536          
    537                  /* Restore parameters */
    538                  pDataInd->hdr.Status = status;
    539                  pDataInd->hdr.Event = event;
    540                  pDataInd->msduLength = len;
    541          
    542                  if (len)
    543                    pDataInd->msdu = msdu;
    544                  else
    545                    pDataInd->msdu = NULL;
    546          
    547                  if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    548                    nwk_MTCallbackSubNwkDataInd ( pDataInd );
    549                }
    550          
    551                /* free buffer */
    552                mac_msg_deallocate( (uint8 **)&pData );
    553                break;
    554          
    555              case MAC_MCPS_PURGE_CNF:
    556                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    557                {
    558                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    559          #ifdef FEATURE_DUAL_MAC
    560                  DMMGR_ResetActivityFlag( DATA_PURGE_ACTIVITY );
    561          #endif /* FEATURE_DUAL_MAC */
    562          
    563                }
    564                break;
    565          
    566              case MAC_MLME_POLL_IND:
    567                  if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    568                  {
    569                    nwk_MTCallbackSubNwkPollInd( (ZMacPollInd_t *)pData );
    570                  }
    571                break;
    572          
    573              default:
    574                break;
    575            }
    576          }
    577          #endif
    578          
    579          /********************************************************************************************************
    580           * @fn      MAC_CbackCheckPending
    581           *
    582           * @brief   Return number of pending indirect msg
    583           *
    584           * @param   None
    585           *
    586           * @return  Number of indirect msg holding
    587           ********************************************************************************************************/
    588          #ifdef FEATURE_DUAL_MAC
    589          uint8 ZMacCbackCheckPending(void)
    590          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    591          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    592          #endif 
    593          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    594          #if !defined (NONWK)
    595            if ( ZSTACK_ROUTER_BUILD )
    596            {
    597              return (nwkDB_ReturnIndirectHoldingCnt());
   \   000004                ; Setup parameters for call to function nwkDB_ReturnIndirectHoldingCnt
   \   000004   12....       LCALL     `??nwkDB_ReturnIndirectHoldingCnt::?relay`; Banked call to: nwkDB_ReturnIndirectHoldingCnt
   \   000007                REQUIRE ?Subroutine0
   \   000007                ; // Fall through to label ?Subroutine0
    598            }
    599            else
    600            {
    601              return (0);
    602            }
    603          #else
    604            return (0);
    605          #endif
    606          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    607          
    608          /**************************************************************************************************
    609           * @fn          MAC_CbackQueryRetransmit
    610           *
    611           * @brief       This function callback function returns whether or not to continue MAC
    612           *              retransmission.
    613           *              A return value '0x00' will indicate no continuation of retry and a return value
    614           *              '0x01' will indicate to continue retransmission. This callback function shall be
    615           *              used to stop continuing retransmission for RF4CE.
    616           *              MAC shall call this callback function whenever it finishes transmitting a packet
    617           *              for macMaxFrameRetries times.
    618           *
    619           * input parameters
    620           *
    621           * None.
    622           *
    623           * output parameters
    624           *
    625           * None.
    626           *
    627           * @return      0x00 to stop retransmission, 0x01 to continue retransmission.
    628           **************************************************************************************************
    629          */
    630          #ifdef FEATURE_DUAL_MAC
    631          uint8 ZMacCbackQueryRetransmit(void)
    632          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          uint8 MAC_CbackQueryRetransmit(void)
   \                     MAC_CbackQueryRetransmit:
    634          #endif /* FEATURE_DUAL_MAC */
    635          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    636            return(0);
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
    637          }
    638          
    639          /********************************************************************************************************
    640           * @fn      ZMacLqiAdjustMode
    641           *
    642           * @brief   Sets/return LQI adjust mode
    643           *
    644           * @param   mode - LQI_ADJ_GET = return current mode only
    645           *                 LQI_ADJ_OFF = disable LQI adjusts
    646           *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
    647           *
    648           * @return  current LQI adjust mode
    649           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
   \                     ZMacLqiAdjustMode:
    651          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
    652            if ( mode != LQI_ADJ_GET )
   \   000006   74FF         MOV       A,#-0x1
   \   000008   68           XRL       A,R0
   \   000009   6005         JZ        ??ZMacLqiAdjustMode_0
    653            {
    654              lqiAdjMode = mode;
   \   00000B   E9           MOV       A,R1
   \   00000C   90....       MOV       DPTR,#lqiAdjMode
   \   00000F   F0           MOVX      @DPTR,A
    655            }
    656            return ( lqiAdjMode );
   \                     ??ZMacLqiAdjustMode_0:
   \   000010   90....       MOV       DPTR,#lqiAdjMode
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   80..         SJMP      ?Subroutine0
    657          }
    658          
    659          #if !defined NONWK
    660          /********************************************************************************************************
    661           * @fn      ZMacLqiAdjust
    662           *
    663           * @brief   Adjust LQI according to correlation value
    664           *
    665           * @notes - the IEEE 802.15.4 specification provides some general statements on
    666           *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
    667           *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
    668           *          802.15.4 signals detectable by the receiver, and LQ values should be
    669           *          uniformly distributed between these two limits." Section E.2.3: "The
    670           *          LQI (see 6.7.8) measures the received energy and/or SNR for each
    671           *          received packet. When energy level and SNR information are combined,
    672           *          they can indicate whether a corrupt packet resulted from low signal
    673           *          strength or from high signal strength plus interference."
    674           *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
    675           *          packet correlation value (related to SNR) to scale incoming LQI value
    676           *          (related to signal strength) to 'derate' noisy packets.
    677           *        - LQI Adjustment Mode2 provided below is a location for a developer to
    678           *          implement their own proprietary LQI adjustment algorithm.
    679           *
    680           * @param   corr - packet correlation value
    681           * @param   lqi  - ptr to link quality (scaled rssi)
    682           *
    683           * @return  *lqi - adjusted link quality
    684           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    685          static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
   \                     ZMacLqiAdjust:
    686          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
    687            if ( lqiAdjMode != LQI_ADJ_OFF )
   \   00000B   90....       MOV       DPTR,#lqiAdjMode
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6051         JZ        ??ZMacLqiAdjust_0
    688            {
    689              uint16 adjLqi = *lqi;
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F8           MOV       R0,A
   \   000017   7900         MOV       R1,#0x0
    690          
    691              // Keep correlation within theoretical limits
    692              if ( corr < LQI_CORR_MIN )
   \   000019   EE           MOV       A,R6
   \   00001A   C3           CLR       C
   \   00001B   9432         SUBB      A,#0x32
   \   00001D   5004         JNC       ??ZMacLqiAdjust_1
    693              {
    694                 corr = LQI_CORR_MIN;
   \   00001F   7E32         MOV       R6,#0x32
   \   000021   8008         SJMP      ??ZMacLqiAdjust_2
    695              }
    696              else if ( corr > LQI_CORR_MAX )
   \                     ??ZMacLqiAdjust_1:
   \   000023   EE           MOV       A,R6
   \   000024   C3           CLR       C
   \   000025   946F         SUBB      A,#0x6f
   \   000027   4002         JC        ??ZMacLqiAdjust_2
    697              {
    698                 corr = LQI_CORR_MAX;
   \   000029   7E6E         MOV       R6,#0x6e
    699              }
    700          
    701              if ( lqiAdjMode == LQI_ADJ_MODE1 )
   \                     ??ZMacLqiAdjust_2:
   \   00002B   90....       MOV       DPTR,#lqiAdjMode
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6401         XRL       A,#0x1
   \   000031   701F         JNZ       ??ZMacLqiAdjust_3
    702              {
    703                /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
    704                           which is computed from the incoming correlation value between
    705                           theorectical minimum/maximum values. This is a very simple way
    706                           of 'derating' the incoming LQI as correlation value drops. */
    707                adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
   \   000033   EE           MOV       A,R6
   \   000034   24CE         ADD       A,#-0x32
   \   000036   F5..         MOV       ?V0,A
   \   000038   E4           CLR       A
   \   000039   34FF         ADDC      A,#-0x1
   \   00003B   F5..         MOV       ?V1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   85..F0       MOV       B,?V0
   \   000041   A4           MUL       AB
   \   000042   C8           XCH       A,R0
   \   000043   AAF0         MOV       R2,B
   \   000045   85..F0       MOV       B,?V1
   \   000048   A4           MUL       AB
   \   000049   2A           ADD       A,R2
   \   00004A   F9           MOV       R1,A
   \   00004B   7A3C         MOV       R2,#0x3c
   \   00004D   7B00         MOV       R3,#0x0
   \   00004F   12....       LCALL     ?US_DIV_MOD
    708              }
    709              else if ( lqiAdjMode == LQI_ADJ_MODE2 )
    710              {
    711                /* MODE2 - location for developer to implement a proprietary algorithm */
    712              }
    713          
    714              // Replace incoming LQI with scaled value
    715              *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
   \                     ??ZMacLqiAdjust_3:
   \   000052   C3           CLR       C
   \   000053   E9           MOV       A,R1
   \   000054   9401         SUBB      A,#0x1
   \   000056   4004         JC        ??ZMacLqiAdjust_4
   \   000058   74FF         MOV       A,#-0x1
   \   00005A   8001         SJMP      ??ZMacLqiAdjust_5
   \                     ??ZMacLqiAdjust_4:
   \   00005C   E8           MOV       A,R0
   \                     ??ZMacLqiAdjust_5:
   \   00005D   8C82         MOV       DPL,R4
   \   00005F   8D83         MOV       DPH,R5
   \   000061   F0           MOVX      @DPTR,A
    716            }
    717          }
   \                     ??ZMacLqiAdjust_0:
   \   000062   7F02         MOV       R7,#0x2
   \   000064   02....       LJMP      ?BANKED_LEAVE_XDATA
    718          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MAC_CbackCheckPending
        2      0   -> nwkDB_ReturnIndirectHoldingCnt
      0     29   MAC_CbackEvent
        0     26   -> MAC_MlmeGetReq
        0     26   -> ZMacLqiAdjust
        0     26   -> mac_msg_deallocate
        0     26   -> nwk_broadcastSend
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
        0     26   -> osal_msg_allocate
        0     26   -> osal_msg_send
      0      0   MAC_CbackQueryRetransmit
      1     36   ZMacLqiAdjust
      2      0   ZMacLqiAdjustMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine15_0
       6  ??Subroutine16_0
       2  ??Subroutine17_0
       6  ??Subroutine18_0
       5  ??Subroutine19_0
       7  ?Subroutine0
       9  ?Subroutine1
       4  ?Subroutine10
       4  ?Subroutine11
      10  ?Subroutine12
      10  ?Subroutine13
       6  ?Subroutine14
      26  ?Subroutine2
      19  ?Subroutine3
       7  ?Subroutine4
       7  ?Subroutine5
      13  ?Subroutine6
       4  ?Subroutine7
       7  ?Subroutine8
      10  ?Subroutine9
       7  MAC_CbackCheckPending
     890  MAC_CbackEvent
       5  MAC_CbackQueryRetransmit
     103  ZMacLqiAdjust
      23  ZMacLqiAdjustMode
       1  _A_IEN0
       1  lqiAdjMode
       2  pZMac_AppCallback
      18  zmacCBSizeTable
      30  -- Other

 
 1 196 bytes in segment BANKED_CODE
    30 bytes in segment BANK_RELAYS
    18 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_Z
 
    48 bytes of CODE     memory
     0 bytes of DATA     memory (+ 1 byte shared)
 1 196 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
