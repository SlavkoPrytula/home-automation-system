///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              05/May/2021  18:21:30
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.40
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Components\mt\MT_GP.c
//    Command line       =  
//        -f C:\users\slavko\Temp\EW304b.tmp ("C:\Texas Instruments\2. main
//        recover\Z-Stack 3.0.2\Z-Stack 3.0.2\Components\mt\MT_GP.c" -D
//        BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE
//        -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D
//        xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
//        -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -D HAL_LED=TRUE -D
//        HAL_KEY=TRUE -D BLINK_LEDS -lC "C:\Texas Instruments\2. main
//        recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List"
//        -lA "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\2. main
//        recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f "C:\Texas Instruments\2. main recover\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\2. main
//        recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List\MT_GP.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_GP

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE

        PUBLIC `??MT_GPAddressConflict::?relay`
        FUNCTION `??MT_GPAddressConflict::?relay`,0203H
        PUBLIC `??MT_GPDataCnf::?relay`
        FUNCTION `??MT_GPDataCnf::?relay`,0203H
        PUBLIC `??MT_GPDataInd::?relay`
        FUNCTION `??MT_GPDataInd::?relay`,0203H
        PUBLIC `??MT_GPSecReq::?relay`
        FUNCTION `??MT_GPSecReq::?relay`,0203H
        PUBLIC MT_GPAddressConflict
        FUNCTION MT_GPAddressConflict,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_GPDataCnf
        FUNCTION MT_GPDataCnf,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MT_GPDataInd
        FUNCTION MT_GPDataInd,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MT_GPSecReq
        FUNCTION MT_GPSecReq,0203H
        ARGFRAME XSTACK, 0, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
NLME_SendNetworkStatus SYMBOL "NLME_SendNetworkStatus"
`??NLME_SendNetworkStatus::?relay` SYMBOL "?relay", NLME_SendNetworkStatus
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
MT_GPAddressConflict SYMBOL "MT_GPAddressConflict"
`??MT_GPAddressConflict::?relay` SYMBOL "?relay", MT_GPAddressConflict
MT_GPDataCnf        SYMBOL "MT_GPDataCnf"
`??MT_GPDataCnf::?relay` SYMBOL "?relay", MT_GPDataCnf
MT_GPDataInd        SYMBOL "MT_GPDataInd"
`??MT_GPDataInd::?relay` SYMBOL "?relay", MT_GPDataInd
MT_GPSecReq         SYMBOL "MT_GPSecReq"
`??MT_GPSecReq::?relay` SYMBOL "?relay", MT_GPSecReq

        EXTERN `??NLME_SendNetworkStatus::?relay`
        FUNCTION `??NLME_SendNetworkStatus::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN NLME_SendNetworkStatus
        FUNCTION NLME_SendNetworkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\2. main recover\Z-Stack 3.0.2\Z-Stack 3.0.2\Components\mt\MT_GP.c
//    1 /***************************************************************************************************
//    2   Filename:       MT_GP.c
//    3   Revised:        $Date: 2016-06-21 01:06:52 -0700 (Thu, 21 July 2016) $
//    4   Revision:       $Revision:  $
//    5 
//    6   Description:    MonitorTest functions GP interface.
//    7 
//    8   Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43  
//   44  
//   45 #include "ZComDef.h"
//   46 #include "MT.h"
//   47 #include "MT_GP.h"
//   48 #include "MT_UART.h"
//   49 #include "nwk_util.h"   
//   50 
//   51 
//   52 /***************************************************************************************************
//   53 * CONST
//   54 ***************************************************************************************************/
//   55 #define GP_DATA_REQ_PAYLOAD_LEN_POS   17   
//   56 #define GP_DATA_REQ_APP_ID_POS         2
//   57 
//   58 #define SEC_KEY_LEN                   16
//   59  
//   60 /***************************************************************************************************
//   61 * LOCAL FUNCTIONs
//   62 ***************************************************************************************************/
//   63 
//   64 #ifdef MT_GP_CB_FUNC
//   65 static void MT_GpDataReq(uint8* pBuf);
//   66 static void MT_GpSecRsp(uint8* pBuf);
//   67 #endif
//   68 
//   69 void MT_GPDataCnf(gp_DataCnf_t* gp_DataCnf);
//   70 void MT_GPSecReq(gp_SecReq_t* gp_SecReq);
//   71 void MT_GPDataInd(gp_DataInd_t* gp_DataInd);
//   72 
//   73 
//   74 /***************************************************************************************************
//   75 * External variables
//   76 ***************************************************************************************************/
//   77 
//   78 #ifdef MT_GP_CB_FUNC  
//   79 uint8 MT_GpCommandProcessing(uint8 *pBuf)
//   80 {
//   81   uint8 status = MT_RPC_SUCCESS;
//   82 
//   83   switch (pBuf[MT_RPC_POS_CMD1])
//   84   {
//   85     case MT_GP_DATA_REQ:
//   86       MT_GpDataReq(pBuf);
//   87     break;
//   88     case MT_GP_SEC_RSP:
//   89       MT_GpSecRsp(pBuf);
//   90     break;
//   91     case MT_GP_ADDRESS_CONFLICT:
//   92       MT_GPAddressConflict(pBuf);
//   93     break;
//   94   }
//   95   return status;
//   96 }
//   97 
//   98 
//   99  /***************************************************************************************************
//  100  * @fn      MT_GpDataReq
//  101  *
//  102  * @brief   GP data request interface
//  103  *
//  104  * @param   pBuf - gp data request
//  105  *
//  106  * @return  void
//  107  ***************************************************************************************************/
//  108  static void MT_GpDataReq(uint8* pBuf)
//  109 {
//  110   uint8 retValue = ZSuccess;
//  111   uint8 cmdId;
//  112   gp_DataReq_t *gp_DataReq;
//  113   uint8  payloadLen;
//  114 
//  115   /* parse header */
//  116   cmdId = pBuf[MT_RPC_POS_CMD1];
//  117   pBuf += MT_RPC_FRAME_HDR_SZ;
//  118 
//  119   //Get the payload length
//  120   payloadLen = pBuf[GP_DATA_REQ_PAYLOAD_LEN_POS];
//  121   
//  122   gp_DataReq = (gp_DataReq_t*)osal_msg_allocate(sizeof(gp_DataReq_t) + payloadLen);  
//  123 
//  124   //No memory
//  125   if(gp_DataReq == NULL)
//  126   {
//  127     retValue = FAILURE;
//  128   }
//  129   //Invalid application ID
//  130   if( (pBuf[GP_DATA_REQ_APP_ID_POS] != GP_APP_ID_DEFAULT) && (pBuf[GP_DATA_REQ_APP_ID_POS] != GP_APP_ID_GP ) )
//  131   {
//  132     retValue = INVALIDPARAMETER;
//  133   }
//  134   //Return fail/InvalidParameter
//  135   if(retValue)
//  136   {
//  137     /* Build and send back the response */
//  138     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_GP), cmdId, 1, &retValue);
//  139     return;
//  140   }
//  141 
//  142   gp_DataReq->Action = *pBuf++;
//  143   gp_DataReq->TxOptions = *pBuf++;
//  144   gp_DataReq->gpd_ID.AppID = *pBuf++;
//  145   if(gp_DataReq->gpd_ID.AppID == GP_APP_ID_DEFAULT)
//  146   {
//  147     gp_DataReq->gpd_ID.GPDId.SrcID = osal_build_uint32(pBuf,4);
//  148     pBuf += sizeof(uint32) + Z_EXTADDR_LEN;
//  149   }
//  150   else
//  151   {
//  152     pBuf += sizeof(uint32);
//  153     osal_memcpy(gp_DataReq->gpd_ID.GPDId.GPDExtAddr,pBuf,Z_EXTADDR_LEN);
//  154     pBuf += Z_EXTADDR_LEN;
//  155   }
//  156 
//  157   gp_DataReq->EndPoint = *pBuf++;
//  158   gp_DataReq->GPDCmmdId = *pBuf++;
//  159   gp_DataReq->GPDasduLength = *pBuf++;
//  160   osal_memcpy(gp_DataReq->GPDasdu,pBuf,payloadLen);
//  161   pBuf += payloadLen;
//  162   gp_DataReq->GPEPhandle = *pBuf++;
//  163   gp_DataReq->gpTxQueueEntryLifeTime[2] = *pBuf++;
//  164   gp_DataReq->gpTxQueueEntryLifeTime[1] = *pBuf++;
//  165   gp_DataReq->gpTxQueueEntryLifeTime[0] = *pBuf++;
//  166   
//  167   gp_DataReq->hdr.event = GP_DATA_REQ;
//  168   gp_DataReq->hdr.status = 0;
//  169 
//  170   osal_msg_send(gp_TaskID,(uint8*)gp_DataReq);
//  171 
//  172   /* Build and send back the response */
//  173   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_GP), cmdId, 1, &retValue);
//  174 }
//  175 
//  176 
//  177 
//  178 /***************************************************************************************************
//  179 * @fn      MT_GpSecRsp
//  180 *
//  181 * @brief   GP Sec Response interface
//  182 *
//  183 * @param   pBuf - gp sec rsp
//  184 *
//  185 * @return  void
//  186 ***************************************************************************************************/
//  187 
//  188 void MT_GpSecRsp(uint8 *pBuf)
//  189 {
//  190   uint8 retValue = ZSuccess;
//  191   uint8 cmdId;
//  192   gp_SecRsp_t *gp_SecRsp;
//  193   
//  194   /* parse header */
//  195   cmdId = pBuf[MT_RPC_POS_CMD1];
//  196   pBuf += MT_RPC_FRAME_HDR_SZ;
//  197   
//  198   gp_SecRsp = (gp_SecRsp_t*)osal_msg_allocate(sizeof(gp_SecRsp_t));
//  199   
//  200     //No memory
//  201   if(gp_SecRsp == NULL)
//  202   {
//  203     retValue = FAILURE;
//  204   }
//  205   //Invalid application ID
//  206   if( (pBuf[GP_DATA_REQ_APP_ID_POS] != GP_APP_ID_DEFAULT) && (pBuf[GP_DATA_REQ_APP_ID_POS] != GP_APP_ID_GP ) )
//  207   {
//  208     retValue = INVALIDPARAMETER;
//  209   }
//  210   //Return fail/InvalidParameter
//  211   if(retValue)
//  212   {
//  213     /* Build and send back the response */
//  214     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_GP), cmdId, 1, &retValue);
//  215     return;
//  216   }
//  217   
//  218   gp_SecRsp->Status = *pBuf++;
//  219   gp_SecRsp->dGPStubHandle = *pBuf++;
//  220   gp_SecRsp->gpd_ID.AppID = *pBuf++;
//  221   if(gp_SecRsp->gpd_ID.AppID == GP_APP_ID_DEFAULT)
//  222   {
//  223     gp_SecRsp->gpd_ID.GPDId.SrcID = osal_build_uint32(pBuf,4);
//  224     pBuf += sizeof(uint32) + Z_EXTADDR_LEN;
//  225   }
//  226   else
//  227   {
//  228     pBuf += sizeof(uint32);
//  229     osal_memcpy(gp_SecRsp->gpd_ID.GPDId.GPDExtAddr,pBuf,Z_EXTADDR_LEN);
//  230     pBuf += Z_EXTADDR_LEN;
//  231   }
//  232   gp_SecRsp->EndPoint = *pBuf++;
//  233   gp_SecRsp->gp_SecData.GPDFSecLvl = *pBuf++;
//  234   gp_SecRsp->gp_SecData.GPDFKeyType = *pBuf++; 
//  235   osal_memcpy(gp_SecRsp->GPDKey,pBuf,SEC_KEY_LEN);
//  236   pBuf += SEC_KEY_LEN;
//  237   gp_SecRsp->gp_SecData.GPDSecFrameCounter = osal_build_uint32(pBuf,4);
//  238   
//  239   gp_SecRsp->hdr.event = GP_SEC_RSP;
//  240   gp_SecRsp->hdr.status = 0;
//  241   
//  242   osal_msg_send(gp_TaskID,(uint8*)gp_SecRsp);
//  243 
//  244   /* Build and send back the response */
//  245   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_GP), cmdId, 1, &retValue);
//  246 }
//  247 
//  248 #endif
//  249 
//  250 /***************************************************************************************************
//  251 * @fn      MT_GPDataInd
//  252 *
//  253 * @brief   Send GP Data Ind to Host Processor
//  254 *
//  255 * @param   gp_DataInd
//  256 *
//  257 * @return  void
//  258 ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  259 void MT_GPDataInd(gp_DataInd_t* gp_DataInd)
MT_GPDataInd:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_GPDataInd
        CODE
//  260 {
        ; Saved register size: 0
        ; Auto size: 0
//  261 #ifdef MT_GP_CB_FUNC  
//  262   uint8 *pBuf = NULL;
//  263   uint8 *tempBuf = NULL;
//  264   uint8 bufLen = sizeof(gp_DataInd_t) + gp_DataInd->GPDasduLength - 1;
//  265   
//  266   pBuf = osal_mem_alloc(bufLen);
//  267 
//  268   if(pBuf == NULL)
//  269   {
//  270     return;
//  271   }
//  272 
//  273   tempBuf = pBuf;
//  274   
//  275   *pBuf++ = gp_DataInd->status;
//  276   *pBuf++ = gp_DataInd->Rssi;
//  277   *pBuf++ = gp_DataInd->LinkQuality;  
//  278   *pBuf++ = gp_DataInd->SeqNumber;  
//  279   *pBuf++ = gp_DataInd->srcAddr.addrMode;
//  280   *pBuf++ = LO_UINT16(gp_DataInd->srcPanID);
//  281   *pBuf++ = HI_UINT16(gp_DataInd->srcPanID);
//  282   
//  283    pBuf   = osal_cpyExtAddr( pBuf,gp_DataInd->srcAddr.addr.extAddr);
//  284   *pBuf++ = gp_DataInd->appID;
//  285   *pBuf++ = gp_DataInd->GPDFSecLvl;
//  286   *pBuf++ = gp_DataInd->GPDFKeyType;
//  287   *pBuf++ = gp_DataInd->AutoCommissioning;
//  288   *pBuf++ = gp_DataInd->RxAfterTx;
//  289 
//  290   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,gp_DataInd->SrcId);
//  291   *pBuf++ = gp_DataInd->EndPoint;
//  292   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,gp_DataInd->GPDSecFrameCounter);
//  293   *pBuf++ = gp_DataInd->GPDCmmdID;
//  294   *pBuf++ = gp_DataInd->GPDasduLength;
//  295   osal_memcpy(pBuf,gp_DataInd->GPDasdu,gp_DataInd->GPDasduLength);
//  296   pBuf += gp_DataInd->GPDasduLength;
//  297   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,gp_DataInd->MIC);  
//  298   
//  299   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_GP), MT_GP_DATA_IND, 36 + gp_DataInd->GPDasduLength - 1, tempBuf);
//  300 
//  301   osal_mem_free(tempBuf);
//  302 #else
//  303   (void)gp_DataInd;
//  304 #endif
//  305 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock0
//  306 
//  307 
//  308 
//  309 
//  310 /***************************************************************************************************
//  311 * @fn      MT_GPDataCnf
//  312 *
//  313 * @brief   Send GP Data Cnf to Host Processor
//  314 *
//  315 * @param   gp_DataCnf
//  316 *
//  317 * @return  void
//  318 ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  319 void MT_GPDataCnf(gp_DataCnf_t* gp_DataCnf)
MT_GPDataCnf:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function MT_GPDataCnf
        CODE
//  320 {
        ; Saved register size: 0
        ; Auto size: 0
//  321 #ifdef MT_GP_CB_FUNC
//  322   uint8 buf[2];
//  323   uint8 *pBuf = buf;
//  324 
//  325   *pBuf++ = gp_DataCnf->status;
//  326   *pBuf++ = gp_DataCnf->GPEPhandle;
//  327 
//  328   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_GP), MT_GP_DATA_CNF, 2, buf);
//  329 #else
//  330   (void)gp_DataCnf;
//  331 #endif
//  332 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock1
//  333 
//  334 /***************************************************************************************************
//  335 * @fn      MT_GPSecReq
//  336 *
//  337 * @brief   Send GP Sec Req to Host Processor
//  338 *
//  339 * @param   gp_SecReq
//  340 *
//  341 * @return  void
//  342 ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  343 void MT_GPSecReq(gp_SecReq_t* gp_SecReq)
MT_GPSecReq:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function MT_GPSecReq
        CODE
//  344 {
        ; Saved register size: 0
        ; Auto size: 0
//  345 #ifdef MT_GP_CB_FUNC
//  346   uint8 buf[21];
//  347   uint8 *pBuf = buf;
//  348 
//  349   *pBuf++ = gp_SecReq->gpd_ID.AppID;
//  350 
//  351   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,gp_SecReq->gpd_ID.GPDId.SrcID);
//  352   pBuf   = osal_cpyExtAddr( pBuf,gp_SecReq->gpd_ID.GPDId.GPDExtAddr);
//  353   *pBuf++ = gp_SecReq->EndPoint;  
//  354   *pBuf++ = gp_SecReq->gp_SecData.GPDFSecLvl;
//  355   *pBuf++ = gp_SecReq->gp_SecData.GPDFKeyType;
//  356 
//  357   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,gp_SecReq->gp_SecData.GPDSecFrameCounter);
//  358 
//  359   *pBuf++ = gp_SecReq->dGPStubHandle;
//  360 
//  361   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_GP), MT_GP_SEC_REQ, 21, buf);
//  362 #else
//  363   (void)gp_SecReq;
//  364 #endif
//  365 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock2
//  366 
//  367 /***************************************************************************************************
//  368 * @fn      MT_GPAddressConflict
//  369 *
//  370 * @brief   Send Network Status with address conflict
//  371 *
//  372 * @param   pBuf
//  373 *
//  374 * @return  void
//  375 ****************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  376 void MT_GPAddressConflict(uint8* pBuf)
MT_GPAddressConflict:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function MT_GPAddressConflict
        CODE
//  377 {
        FUNCALL MT_GPAddressConflict, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_GPAddressConflict, NLME_SendNetworkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  378   uint16 addr;
//  379   
//  380   pBuf += MT_RPC_FRAME_HDR_SZ;
//  381   addr = osal_build_uint16(pBuf);
//  382   
//  383   // Do address conflict resolution
//  384   NLME_SendNetworkStatus( NWK_BROADCAST_SHORTADDR_DEVRXON,
//  385                       addr, NWKSTAT_ADDRESS_CONFLICT, TRUE );
        ; Setup parameters for call to function NLME_SendNetworkStatus
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        JNC       ??MT_GPAddressConflict_0
        INC       R3
??MT_GPAddressConflict_0:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
        MOV       R1,#0xd
        MOV       R2,#-0x3
        MOV       R3,#-0x1
        LCALL     `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//  386 }
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_GPDataInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_GPDataInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_GPDataCnf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_GPDataCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_GPSecReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_GPSecReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_GPAddressConflict::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_GPAddressConflict

        END
//  387 
// 
// 55 bytes in segment BANKED_CODE
// 24 bytes in segment BANK_RELAYS
// 
// 24 bytes of CODE     memory
// 55 bytes of HUGECODE memory
//
//Errors: none
//Warnings: none
