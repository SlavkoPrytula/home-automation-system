###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               19/Apr/2021  18:00:04
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
#    Command line       =  
#        -f C:\users\slavko\Temp\EW911f.tmp ("C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c"
#        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -lC "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\zcl_samplelight.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj\zcl_samplelight.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampleLight.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample light application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application implements a ZigBee Light, based on Z-Stack 3.0. It can be configured as an
     43            On/Off light or as a dimmable light, by undefining or defining ZCL_LEVEL_CTRL, respectively.
     44          
     45            This application is based on the common sample-application user interface. Please see the main
     46            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     47            this sample applicetion.
     48            
     49            Application-specific UI peripherals being used:
     50          
     51            - LEDs:
     52              LED1 reflect the current light state (On / Off accordingly).
     53          
     54            Application-specific menu system:
     55          
     56              <TOGGLE LIGHT> Toggle the local light and display its status and level
     57                Press OK to toggle the local light on and off.
     58                This screen shows the following information
     59                  Line1: (only populated if ZCL_LEVEL_CTRL is defined)
     60                    LEVEL XXX - xxx is the current level of the light if the light state is ON, or the target level
     61                      of the light when the light state is off. The target level is the level that the light will be
     62                      set to when it is switched from off to on using the on or the toggle commands.
     63                  Line2:
     64                    LIGHT OFF / ON: shows the current state of the light.
     65                Note when ZCL_LEVEL_CTRL is enabled:
     66                  - If the light state is ON and the light level is X, and then the light receives the OFF or TOGGLE 
     67                    commands: The level will decrease gradually until it reaches 1, and only then the light state will
     68                    be changed to OFF. The level then will be restored to X, with the state staying OFF. At this stage
     69                    the light is not lighting, and the level represent the target level for the next ON or TOGGLE 
     70                    commands.
     71                  - If the light state is OFF and the light level is X, and then the light receives the ON or TOGGLE
     72                    commands; The level will be set to 1, the light state will be set to ON, and then the level will
     73                    increase gradually until it reaches level X.
     74                  - Any level-setting command will affect the level directly, and may also affect the on/off state,
     75                    depending on the command's arguments.       
     76          
     77          *********************************************************************/
     78          
     79          /*********************************************************************
     80           * INCLUDES
     81           */
     82          #include "ZComDef.h"
     83          #include "OSAL.h"
     84          #include "AF.h"
     85          #include "ZDApp.h"
     86          #include "ZDObject.h"
     87          #include "MT_SYS.h"
     88          
     89          #include "nwk_util.h"
     90          
     91          #include "zcl.h"
     92          #include "zcl_general.h"
     93          #include "zcl_ha.h"
     94          #include "zcl_diagnostic.h"
     95          
     96          #include "zcl_samplelight.h"
     97             
     98          #include "bdb.h"
     99          #include "bdb_interface.h"
    100          
    101           //GP_UPDATE
    102          #include "gp_interface.h"
    103             
    104          #include "onboard.h"
    105          
    106          /* HAL */
    107          #include "hal_lcd.h"
    108          #include "hal_led.h"
    109          #include "hal_key.h"
    110          
    111          #include "NLMEDE.h"
    112          
    113          // Added to include TouchLink initiator functionality 
    114          #if defined ( BDB_TL_INITIATOR )
    115            #include "bdb_touchlink_initiator.h"
    116          #endif // BDB_TL_INITIATOR
    117          
    118          #if defined ( BDB_TL_TARGET )
    119            #include "bdb_touchlink_target.h"
    120          #endif // BDB_TL_TARGET
    121          
    122          #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
    123            #include "bdb_touchlink.h"
    124          #endif
    125          
    126          #include "zcl_sampleapps_ui.h"
    127          
    128          /*********************************************************************
    129           * MACROS
    130           */
    131          #define UI_STATE_TOGGLE_LIGHT 1 //UI_STATE_BACK_FROM_APP_MENU is item #0, so app item numbers should start from 1
    132          
    133          #define APP_TITLE "TI Sample Light"
    134          
    135          /*********************************************************************
    136           * TYPEDEFS
    137           */
    138          
    139          /*********************************************************************
    140           * GLOBAL VARIABLES
    141           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          byte zclSampleLight_TaskID;
   \                     zclSampleLight_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 zclSampleLightSeqNum;
   \                     zclSampleLightSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          
    145          /*********************************************************************
    146           * GLOBAL FUNCTIONS
    147           */
    148          
    149          /*********************************************************************
    150           * LOCAL VARIABLES
    151           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          afAddrType_t zclSampleLight_DstAddr;
   \                     zclSampleLight_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    153          
    154          #define ZCLSAMPLELIGHT_BINDINGLIST       2

   \                                 In  segment XDATA_I, align 1, keep-with-next
    155          static cId_t bindingInClusters[ZCLSAMPLELIGHT_BINDINGLIST] =
   \                     bindingInClusters:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for bindingInClusters>`
   \   000004                REQUIRE __INIT_XDATA_I
    156          {
    157            ZCL_CLUSTER_ID_GEN_ON_OFF,
    158            ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
    159          };
    160          
    161          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    162          static endPointDesc_t sampleLight_TestEp =
   \                     sampleLight_TestEp:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleLight_TestEp>`
   \   000007                REQUIRE __INIT_XDATA_I
    163          {
    164            SAMPLELIGHT_ENDPOINT,                                 // Test endpoint
    165            0,
    166            &zclSampleLight_TaskID,
    167            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    168            (afNetworkLatencyReq_t)0            // No Network Latency req
    169          };
    170          
    171          #ifdef ZCL_LEVEL_CTRL

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
   \                     zclSampleLight_WithOnOff:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          uint8 zclSampleLight_NewLevel;        // new level when done moving
   \                     zclSampleLight_NewLevel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zclSampleLight_LevelChangeCmd; // current level change was triggered by an on/off command
   \                     zclSampleLight_LevelChangeCmd:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
   \                     zclSampleLight_NewLevelUp:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
   \                     zclSampleLight_CurrentLevel32:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
   \                     zclSampleLight_Rate32:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
   \                     zclSampleLight_LevelLastLevel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          #endif
    180          
    181          /*********************************************************************
    182           * LOCAL FUNCTIONS
    183           */
    184          static void zclSampleLight_HandleKeys( byte shift, byte keys );
    185          static void zclSampleLight_BasicResetCB( void );
    186          static void zclSampleLight_OnOffCB( uint8 cmd );
    187          
    188          static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
    189          static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    190          static void zclSampleLight_ProcessIdentifyTimeChange( void );
    191          
    192          //GP_UPDATE
    193          #if (ZG_BUILD_RTR_TYPE)
    194          static void gp_CommissioningMode(bool isEntering);
    195          static uint8 gp_ChangeChannelReq(void);
    196          #endif
    197          
    198          
    199          static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    200          
    201          
    202          #ifdef ZCL_LEVEL_CTRL
    203          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
    204          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
    205          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
    206          static void zclSampleLight_LevelControlStopCB( void );
    207          static void zclSampleLight_DefaultMove( uint8 OnOff );
    208          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
    209          static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
    210          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
    211          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
    212          static void zclSampleLight_AdjustLightLevel( void );
    213          #endif
    214          
    215          // Functions to process ZCL Foundation incoming Command/Response messages
    216          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    217          #ifdef ZCL_READ
    218          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    219          #endif
    220          #ifdef ZCL_WRITE
    221          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    222          #endif
    223          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    224          #ifdef ZCL_DISCOVER
    225          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    226          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    227          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    228          #endif
    229          
    230          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    231          
    232          void zclSampleLight_UiActionToggleLight(uint16 keys);
    233          void zclSampleLight_UiUpdateLcd(uint8 uiCurrentState, char * line[3]);
    234          void zclSampleLight_UpdateLedState(void);
    235          
    236          /*********************************************************************
    237           * CONSTANTS
    238           */

   \                                 In  segment XDATA_ROM_C, align 1
    239          const uiState_t zclSampleLight_UiStatesMain[] = 
   \                     zclSampleLight_UiStatesMain:
   \   000000   FE           DB 254
   \   000001   01           DB 1
   \   000002   0400         DW 4
   \   000004   ....         DW `??UI_ActionBackFromAppMenu::?relay`
   \   000006   00           DB 0
   \   000007   FE           DB 254
   \   000008   0400         DW 4
   \   00000A   ....         DW `??zclSampleLight_UiActionToggleLight::?relay`
    240          {
    241            /*  UI_STATE_BACK_FROM_APP_MENU  */   {UI_STATE_DEFAULT_MOVE,       UI_STATE_TOGGLE_LIGHT,  UI_KEY_SW_5_PRESSED, &UI_ActionBackFromAppMenu}, //do not change this line, except for the second item, which should point to the last entry in this menu
    242            /*  UI_STATE_TOGGLE_LIGHT        */   {UI_STATE_BACK_FROM_APP_MENU, UI_STATE_DEFAULT_MOVE,  UI_KEY_SW_5_PRESSED, &zclSampleLight_UiActionToggleLight},
    243          };
    244          
    245          #define LEVEL_CHANGED_BY_LEVEL_CMD  0
    246          #define LEVEL_CHANGED_BY_ON_CMD     1
    247          #define LEVEL_CHANGED_BY_OFF_CMD    2
    248          
    249          /*********************************************************************
    250           * STATUS STRINGS
    251           */
    252          #ifdef LCD_SUPPORTED

   \                                 In  segment XDATA_ROM_C, align 1
    253            const char sLightOn[]      = "   LIGHT ON     ";
   \                     sLightOn:
   \   000000   2020204C     DB "   LIGHT ON     "
   \            49474854
   \            204F4E20
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    254            const char sLightOff[]     = "   LIGHT OFF    ";
   \                     sLightOff:
   \   000000   2020204C     DB "   LIGHT OFF    "
   \            49474854
   \            204F4646
   \            20202020
   \            00      
    255            #ifdef ZCL_LEVEL_CTRL

   \                                 In  segment XDATA_I, align 1, keep-with-next
    256              char sLightLevel[]        = "   LEVEL ###    "; // displays level 1-254
   \                     sLightLevel:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for sLightLevel>`
   \   000011                REQUIRE __INIT_XDATA_I
    257            #endif
    258          #endif
    259          
    260          /*********************************************************************
    261           * REFERENCED EXTERNALS
    262           */
    263          extern int16 zdpExternalStateTaskID;
    264          
    265          /*********************************************************************
    266           * ZCL General Profile Callback table
    267           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    268          static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
   \                     zclSampleLight_CmdCallbacks:
   \   000000                DS 32
   \   000020                REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
   \   000020                REQUIRE __INIT_XDATA_I
    269          {
    270            zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
    271            NULL,                                   // Identify Trigger Effect command
    272            zclSampleLight_OnOffCB,                 // On/Off cluster commands
    273            NULL,                                   // On/Off cluster enhanced command Off with Effect
    274            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    275            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    276          #ifdef ZCL_LEVEL_CTRL
    277            zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
    278            zclSampleLight_LevelControlMoveCB,        // Level Control Move command
    279            zclSampleLight_LevelControlStepCB,        // Level Control Step command
    280            zclSampleLight_LevelControlStopCB,        // Level Control Stop command
    281          #endif
    282          #ifdef ZCL_GROUPS
    283            NULL,                                   // Group Response commands
    284          #endif
    285          #ifdef ZCL_SCENES
    286            NULL,                                  // Scene Store Request command
    287            NULL,                                  // Scene Recall Request command
    288            NULL,                                  // Scene Response command
    289          #endif
    290          #ifdef ZCL_ALARMS
    291            NULL,                                  // Alarm (Response) commands
    292          #endif
    293          #ifdef SE_UK_EXT
    294            NULL,                                  // Get Event Log command
    295            NULL,                                  // Publish Event Log command
    296          #endif
    297            NULL,                                  // RSSI Location command
    298            NULL                                   // RSSI Location Response command
    299          };
    300          
    301          /*********************************************************************
    302           * @fn          zclSampleLight_Init
    303           *
    304           * @brief       Initialization function for the zclGeneral layer.
    305           *
    306           * @param       none
    307           *
    308           * @return      none
    309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    310          void zclSampleLight_Init( byte task_id )
   \                     zclSampleLight_Init:
    311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    312            zclSampleLight_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   000009   F0           MOVX      @DPTR,A
    313          
    314            // Set destination address to indirect
    315            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV       DPTR,#zclSampleLight_DstAddr + 8
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
    316            zclSampleLight_DstAddr.endPoint = 0;
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
    317            zclSampleLight_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV       DPTR,#zclSampleLight_DstAddr
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    318          
    319            // Register the Simple Descriptor for this application
    320            bdb_RegisterSimpleDescriptor( &zclSampleLight_SimpleDesc );
   \   000017                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000017   7A..         MOV       R2,#zclSampleLight_SimpleDesc & 0xff
   \   000019   7B..         MOV       R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
   \   00001B   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    321          
    322            // Register the ZCL General Cluster Library callback functions
    323            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
   \   00001E                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001E   7A..         MOV       R2,#zclSampleLight_CmdCallbacks & 0xff
   \   000020   7B..         MOV       R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
   \   000022   7914         MOV       R1,#0x14
   \   000024   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    324          
    325            // Register the application's attribute list
    326            zclSampleLight_ResetAttributesToDefaultValues();
   \   000027                ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
   \   000027   12....       LCALL     ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
    327            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
   \   00002A                ; Setup parameters for call to function zcl_registerAttrList
   \   00002A   7C..         MOV       R4,#zclSampleLight_Attrs & 0xff
   \   00002C   7D..         MOV       R5,#(zclSampleLight_Attrs >> 8) & 0xff
   \   00002E   90....       MOV       DPTR,#zclSampleLight_NumAttributes
   \   000031   E4           CLR       A
   \   000032   93           MOVC      A,@A+DPTR
   \   000033   FA           MOV       R2,A
   \   000034   7914         MOV       R1,#0x14
   \   000036   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    328          
    329          #ifdef ZCL_LEVEL_CTRL
    330            zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
   \   000039   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   90....       MOV       DPTR,#zclSampleLight_LevelLastLevel
   \   000040   F0           MOVX      @DPTR,A
    331          #endif
    332          
    333            // Register the Application to receive the unprocessed Foundation command/response messages
    334            zcl_registerForMsg( zclSampleLight_TaskID );
   \   000041                ; Setup parameters for call to function zcl_registerForMsg
   \   000041   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F9           MOV       R1,A
   \   000046   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    335          
    336          #ifdef ZCL_DISCOVER
    337            // Register the application's command list
    338            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
   \   000049                ; Setup parameters for call to function zcl_registerCmdList
   \   000049   7C..         MOV       R4,#zclSampleLight_Cmds & 0xff
   \   00004B   7D..         MOV       R5,#(zclSampleLight_Cmds >> 8) & 0xff
   \   00004D   90....       MOV       DPTR,#zclCmdsArraySize
   \   000050   E4           CLR       A
   \   000051   93           MOVC      A,@A+DPTR
   \   000052   FA           MOV       R2,A
   \   000053   7914         MOV       R1,#0x14
   \   000055   12....       LCALL     `??zcl_registerCmdList::?relay`; Banked call to: zcl_registerCmdList
    339          #endif
    340          
    341            // Register low voltage NV memory protection application callback
    342            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   000058                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   000058   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   00005A   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   00005C   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    343          
    344            // Register for all key events - This app will handle all key events
    345            RegisterForKeys( zclSampleLight_TaskID );
   \   00005F                ; Setup parameters for call to function RegisterForKeys
   \   00005F   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    346            
    347            bdb_RegisterCommissioningStatusCB( zclSampleLight_ProcessCommissioningStatus );
   \   000067                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   000067   7A..         MOV       R2,#`??zclSampleLight_ProcessCommissioningStatus::?r` & 0xff
   \   000069   7B..         MOV       R3,#(`??zclSampleLight_ProcessCommissioningStatus::?r` >> 8) & 0xff
   \   00006B   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    348            
    349            // Register for a test endpoint
    350            afRegister( &sampleLight_TestEp );
   \   00006E                ; Setup parameters for call to function afRegister
   \   00006E   7A..         MOV       R2,#sampleLight_TestEp & 0xff
   \   000070   7B..         MOV       R3,#(sampleLight_TestEp >> 8) & 0xff
   \   000072   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    351          
    352          #ifdef ZCL_DIAGNOSTIC
    353            // Register the application's callback function to read/write attribute data.
    354            // This is only required when the attribute data format is unknown to ZCL.
    355            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    356          
    357            if ( zclDiagnostic_InitStats() == ZSuccess )
    358            {
    359              // Here the user could start the timer to save Diagnostics to NV
    360            }
    361          #endif
    362            
    363          //GP_UPDATE  
    364          #if (ZG_BUILD_RTR_TYPE)  
    365            gp_RegisterCommissioningModeCB(gp_CommissioningMode);
   \   000075                ; Setup parameters for call to function gp_RegisterCommissioningModeCB
   \   000075   7A..         MOV       R2,#`??gp_CommissioningMode::?relay` & 0xff
   \   000077   7B..         MOV       R3,#(`??gp_CommissioningMode::?relay` >> 8) & 0xff
   \   000079   12....       LCALL     `??gp_RegisterCommissioningModeCB::?relay`; Banked call to: gp_RegisterCommissioningModeCB
    366            gp_RegisterGPChangeChannelReqCB(gp_ChangeChannelReq);
   \   00007C                ; Setup parameters for call to function gp_RegisterGPChangeChannelReqCB
   \   00007C   7A..         MOV       R2,#`??gp_ChangeChannelReq::?relay` & 0xff
   \   00007E   7B..         MOV       R3,#(`??gp_ChangeChannelReq::?relay` >> 8) & 0xff
   \   000080   12....       LCALL     `??gp_RegisterGPChangeChannelReqCB::?relay`; Banked call to: gp_RegisterGPChangeChannelReqCB
    367          #endif
    368            
    369            zdpExternalStateTaskID = zclSampleLight_TaskID;
   \   000083   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   000086   E0           MOVX      A,@DPTR
   \   000087   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A3           INC       DPTR
   \   00008C   E4           CLR       A
   \   00008D   F0           MOVX      @DPTR,A
    370          
    371            UI_Init(zclSampleLight_TaskID, SAMPLEAPP_LCD_AUTO_UPDATE_EVT, SAMPLEAPP_KEY_AUTO_REPEAT_EVT, &zclSampleLight_IdentifyTime, APP_TITLE, &zclSampleLight_UiUpdateLcd, zclSampleLight_UiStatesMain);
   \   00008E                ; Setup parameters for call to function UI_Init
   \   00008E   75....       MOV       ?V0,#zclSampleLight_UiStatesMain & 0xff
   \   000091   75....       MOV       ?V1,#(zclSampleLight_UiStatesMain >> 8) & 0xff
   \   000094   78..         MOV       R0,#?V0
   \   000096   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000099   75....       MOV       ?V0,#`??zclSampleLight_UiUpdateLcd::?relay` & 0xff
   \   00009C   75....       MOV       ?V1,#(`??zclSampleLight_UiUpdateLcd::?relay` >> 8) & 0xff
   \   00009F   78..         MOV       R0,#?V0
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   75....       MOV       ?V0,#`?<Constant "TI Sample Light">` & 0xff
   \   0000A7   75....       MOV       ?V1,#(`?<Constant "TI Sample Light">` >> 8) & 0xff
   \   0000AA   78..         MOV       R0,#?V0
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AF   75....       MOV       ?V0,#zclSampleLight_IdentifyTime & 0xff
   \   0000B2   75....       MOV       ?V1,#(zclSampleLight_IdentifyTime >> 8) & 0xff
   \   0000B5   78..         MOV       R0,#?V0
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BA   7C20         MOV       R4,#0x20
   \   0000BC   7D00         MOV       R5,#0x0
   \   0000BE   7A10         MOV       R2,#0x10
   \   0000C0   7B00         MOV       R3,#0x0
   \   0000C2   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   F9           MOV       R1,A
   \   0000C7   12....       LCALL     `??UI_Init::?relay`; Banked call to: UI_Init
   \   0000CA   7408         MOV       A,#0x8
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
    372          
    373            UI_UpdateLcd();
   \   0000CF                ; Setup parameters for call to function UI_UpdateLcd
   \   0000CF   12....       LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
    374          }
   \   0000D2   7F02         MOV       R7,#0x2
   \   0000D4   02....       LJMP      ?BANKED_LEAVE_XDATA
    375          
    376          /*********************************************************************
    377           * @fn          zclSample_event_loop
    378           *
    379           * @brief       Event Loop Processor for zclGeneral.
    380           *
    381           * @param       none
    382           *
    383           * @return      none
    384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    385          uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleLight_event_loop:
    386          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    387            afIncomingMSGPacket_t *MSGpkt;
    388          
    389            (void)task_id;  // Intentionally unreferenced parameter
    390          
    391            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   701E         JNZ       ??zclSampleLight_event_loop_0
    392            {
    393              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
    394              {
    395                switch ( MSGpkt->hdr.event )
    396                {
    397                  case ZCL_INCOMING_MSG:
    398                    // Incoming ZCL Foundation command/response messages
    399                    zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    400                    break;
    401          
    402                  case KEY_CHANGE:
    403                    zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    404                    break;
    405          
    406                  case ZDO_STATE_CHANGE:
    407                    UI_DeviceStateUpdated((devStates_t)(MSGpkt->hdr.status));
    408                    break;
    409          
    410                  default:
    411                    break;
    412                }
    413          
    414                // Release the memory
    415                osal_msg_deallocate( (uint8 *)MSGpkt );
    416              }
    417          
    418              // return unprocessed events
    419              return (events ^ SYS_EVENT_MSG);
    420              
    421              if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
                     ^
Warning[Pe111]: statement is unreachable

  static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
              ^
"C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c",188  Warning[Pe177]: 
          function "zclSampleLight_IdentifyCB" was declared but never
          referenced

  static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
              ^
"C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c",189  Warning[Pe177]: 
          function "zclSampleLight_IdentifyQueryRspCB" was declared but never
          referenced
    422            {
    423              if ( zclSampleLight_IdentifyTime > 0 )
    424                zclSampleLight_IdentifyTime--;
    425              zclSampleLight_ProcessIdentifyTimeChange();
    426          
    427              return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
    428            }
    429            
    430              // Discard unknown events
    431            return 0;
    432            }
    433          
    434          #ifdef ZCL_LEVEL_CTRL
    435            if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
   \   000012   EA           MOV       A,R2
   \   000013   5402         ANL       A,#0x2
   \   000015   7003         JNZ       $+5
   \   000017   02....       LJMP      ??zclSampleLight_event_loop_1 & 0xFFFF
    436            {
    437              zclSampleLight_AdjustLightLevel();
   \   00001A                ; Setup parameters for call to function zclSampleLight_AdjustLightLevel
   \   00001A   12....       LCALL     `??zclSampleLight_AdjustLightLevel::?relay`; Banked call to: zclSampleLight_AdjustLightLevel
    438              return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
   \   00001D   EE           MOV       A,R6
   \   00001E   6402         XRL       A,#0x2
   \   000020   02....       LJMP      ??zclSampleLight_event_loop_2 & 0xFFFF
    439            }
   \                     ??zclSampleLight_event_loop_3:
   \   000023                ; Setup parameters for call to function UI_DeviceStateUpdated
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??UI_DeviceStateUpdated::?relay`; Banked call to: UI_DeviceStateUpdated
   \                     ??zclSampleLight_event_loop_4:
   \   000029                ; Setup parameters for call to function osal_msg_deallocate
   \   000029   AA..         MOV       R2,?V0
   \   00002B   AB..         MOV       R3,?V1
   \   00002D   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleLight_event_loop_0:
   \   000030                ; Setup parameters for call to function osal_msg_receive
   \   000030   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000038   8A..         MOV       ?V0,R2
   \   00003A   8B..         MOV       ?V1,R3
   \   00003C   EA           MOV       A,R2
   \   00003D   4B           ORL       A,R3
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??zclSampleLight_event_loop_5 & 0xFFFF
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   E0           MOVX      A,@DPTR
   \   000048   24CC         ADD       A,#-0x34
   \   00004A   600A         JZ        ??zclSampleLight_event_loop_6
   \   00004C   2474         ADD       A,#0x74
   \   00004E   600B         JZ        ??zclSampleLight_event_loop_7
   \   000050   24EF         ADD       A,#-0x11
   \   000052   60CF         JZ        ??zclSampleLight_event_loop_3
   \   000054   80D3         SJMP      ??zclSampleLight_event_loop_4
   \                     ??zclSampleLight_event_loop_6:
   \   000056                ; Setup parameters for call to function zclSampleLight_ProcessIncomingMsg
   \   000056   12....       LCALL     `??zclSampleLight_ProcessIncomingMsg::?relay`; Banked call to: zclSampleLight_ProcessIncomingMsg
   \   000059   80CE         SJMP      ??zclSampleLight_event_loop_4
   \                     ??zclSampleLight_event_loop_7:
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   A2E1         MOV       C,0xE0 /* A   */.1
   \   000061   50C6         JNC       ??zclSampleLight_event_loop_4
   \   000063   7408         MOV       A,#0x8
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   7402         MOV       A,#0x2
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   85..82       MOV       DPL,?XSP + 0
   \   00006E   85..83       MOV       DPH,?XSP + 1
   \   000071   E4           CLR       A
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   F0           MOVX      @DPTR,A
   \   000075                ; Setup parameters for call to function NLME_GetShortAddr
   \   000075   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000078   8A..         MOV       ?V2,R2
   \   00007A   8B..         MOV       ?V3,R3
   \   00007C   AC..         MOV       R4,?V2
   \   00007E   AD..         MOV       R5,?V3
   \   000080                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000080   75..01       MOV       ?V2,#0x1
   \   000083   78..         MOV       R0,#?V2
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000088   E4           CLR       A
   \   000089   F5..         MOV       ?V2,A
   \   00008B   F5..         MOV       ?V3,A
   \   00008D   78..         MOV       R0,#?V2
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   78..         MOV       R0,#?V2
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000097   75....       MOV       ?V2,#bindingInClusters & 0xff
   \   00009A   75....       MOV       ?V3,#(bindingInClusters >> 8) & 0xff
   \   00009D   78..         MOV       R0,#?V2
   \   00009F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A2   75..02       MOV       ?V2,#0x2
   \   0000A5   78..         MOV       R0,#?V2
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AA   75..04       MOV       ?V2,#0x4
   \   0000AD   75..01       MOV       ?V3,#0x1
   \   0000B0   78..         MOV       R0,#?V2
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B5   7914         MOV       R1,#0x14
   \   0000B7   7409         MOV       A,#0x9
   \   0000B9   12....       LCALL     ?XSTACK_DISP101_8
   \   0000BC   12....       LCALL     `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   0000BF   7409         MOV       A,#0x9
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C4   02....       LJMP      ??zclSampleLight_event_loop_4 & 0xFFFF
   \                     ??zclSampleLight_event_loop_5:
   \   0000C7   EE           MOV       A,R6
   \   0000C8   FA           MOV       R2,A
   \   0000C9   EF           MOV       A,R7
   \   0000CA   6480         XRL       A,#0x80
   \   0000CC   801E         SJMP      ??zclSampleLight_event_loop_8
    440          #endif
    441          
    442          #if ZG_BUILD_ENDDEVICE_TYPE    
    443            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
    444            {
    445              bdb_ZedAttemptRecoverNwk();
    446              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
    447            }
    448          #endif
    449          
    450            if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
   \                     ??zclSampleLight_event_loop_1:
   \   0000CE   EA           MOV       A,R2
   \   0000CF   5410         ANL       A,#0x10
   \   0000D1   6008         JZ        ??zclSampleLight_event_loop_9
    451            {
    452              UI_UpdateLcd();
   \   0000D3                ; Setup parameters for call to function UI_UpdateLcd
   \   0000D3   12....       LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
    453              return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
   \   0000D6   EE           MOV       A,R6
   \   0000D7   6410         XRL       A,#0x10
   \   0000D9   800F         SJMP      ??zclSampleLight_event_loop_2
    454            }
    455          
    456            if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
   \                     ??zclSampleLight_event_loop_9:
   \   0000DB   EA           MOV       A,R2
   \   0000DC   5420         ANL       A,#0x20
   \   0000DE   600F         JZ        ??zclSampleLight_event_loop_10
    457            {
    458              UI_MainStateMachine(UI_KEY_AUTO_PRESSED);
   \   0000E0                ; Setup parameters for call to function UI_MainStateMachine
   \   0000E0   7AFF         MOV       R2,#-0x1
   \   0000E2   7BFF         MOV       R3,#-0x1
   \   0000E4   12....       LCALL     `??UI_MainStateMachine::?relay`; Banked call to: UI_MainStateMachine
    459              return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
   \   0000E7   EE           MOV       A,R6
   \   0000E8   6420         XRL       A,#0x20
   \                     ??zclSampleLight_event_loop_2:
   \   0000EA   FA           MOV       R2,A
   \   0000EB   EF           MOV       A,R7
   \                     ??zclSampleLight_event_loop_8:
   \   0000EC   FB           MOV       R3,A
   \   0000ED   8004         SJMP      ??zclSampleLight_event_loop_11
    460            }
    461          
    462            // Discard unknown events
    463            return 0;
   \                     ??zclSampleLight_event_loop_10:
   \   0000EF   7A00         MOV       R2,#0x0
   \   0000F1   7B00         MOV       R3,#0x0
   \                     ??zclSampleLight_event_loop_11:
   \   0000F3   7409         MOV       A,#0x9
   \   0000F5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F8   7F04         MOV       R7,#0x4
   \   0000FA   02....       LJMP      ?BANKED_LEAVE_XDATA
    464          }
    465          
    466          
    467          /*********************************************************************
    468           * @fn      zclSampleLight_HandleKeys
    469           *
    470           * @brief   Handles all key events for this device.
    471           *
    472           * @param   shift - true if in shift/alt.
    473           * @param   keys - bit field for key events. Valid entries:
    474           *                 HAL_KEY_SW_5
    475           *                 HAL_KEY_SW_4
    476           *                 HAL_KEY_SW_2
    477           *                 HAL_KEY_SW_1
    478           *
    479           * @return  none
    480           */
    481          static void zclSampleLight_HandleKeys( byte shift, byte keys )
    482          {
    483          //  UI_MainStateMachine(keys);
    484          	
    485            zAddrType_t dstAddr;
    486            
    487            (void)shift;  // Intentionally unreferenced parameter
    488          
    489            if ( keys & HAL_KEY_SW_2 )
    490            {
    491              // Initiate an End Device Bind Request, this bind request will
    492              // only use a cluster list that is important to binding.
    493              dstAddr.addrMode = afAddr16Bit;
    494              dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    495              ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    496                                     SAMPLELIGHT_ENDPOINT,
    497                                     ZCL_HA_PROFILE_ID,
    498                                     ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
    499                                     0, NULL,   // No Outgoing clusters to bind
    500                                     TRUE );
    501            }
    502          
    503            if ( keys & HAL_KEY_SW_3 )
    504            {
    505            }
    506          
    507            if ( keys & HAL_KEY_SW_4 )
    508            {
    509            }
    510          }
    511          
    512          
    513          /*********************************************************************
    514           * @fn      zclSampleLight_ProcessIdentifyTimeChange
    515           *
    516           * @brief   Called to process any change to the IdentifyTime attribute.
    517           *
    518           * @param   none
    519           *
    520           * @return  none
    521           */
    522          static void zclSampleLight_ProcessIdentifyTimeChange( void )
    523          {
    524            if ( zclSampleLight_IdentifyTime > 0 )
    525            {
    526              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
    527              HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
    528            }
    529            else
    530            {
    531              if ( zclSampleLight_OnOff )
    532                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
    533              else
    534                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    535              osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
    536            }
    537          }
    538          
    539          
    540          
    541          
    542          //GP_UPDATE
    543          #if (ZG_BUILD_RTR_TYPE)
    544          /*********************************************************************
    545           * @fn      gp_CommissioningMode
    546           *
    547           * @brief   Callback that notifies the application that gp Proxy is entering 
    548           *          into commissioning mode
    549           *
    550           * @param   isEntering - 
    551           *
    552           * @return  
    553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          static void gp_CommissioningMode(bool isEntering)
   \                     gp_CommissioningMode:
    555          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    556            if(isEntering)
    557            {
    558              //Led on indicating enter commissioning mode
    559            }
    560            else
    561            {
    562              //Led off indicating enter commissioning mode
    563            }
    564          }
   \   000000   02....       LJMP      ?BRET
    565          
    566          
    567          
    568          //GP_UPDATE
    569          /*********************************************************************
    570           * @fn      gp_ChangeChannelReq
    571           *
    572           * @brief   Callback function to notify the application about a GP commissioning 
    573           * request that will change the current channel for at most 
    574           * gpBirectionalCommissioningChangeChannelTimeout ms
    575           *
    576           * @param   channel - Channel in which the commissioning will take place
    577           *
    578           * @return  TRUE to allow change channel, FALSE to do not allow
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          static uint8 gp_ChangeChannelReq(void)
   \                     gp_ChangeChannelReq:
    581          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    582            bool allowChangeChannel = TRUE;
    583            
    584            //Check application state to decide if allow change channel or not
    585            
    586            return allowChangeChannel;
   \   000000   7901         MOV       R1,#0x1
   \   000002   02....       LJMP      ?BRET
    587          }
    588          
    589          #endif
    590          
    591          
    592          /*********************************************************************
    593           * @fn      zclSampleLight_ProcessCommissioningStatus
    594           *
    595           * @brief   Callback in which the status of the commissioning process are reported
    596           *
    597           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    598           *
    599           * @return  none
    600           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclSampleLight_ProcessCommissioningStatus:
    602          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    603            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6402         XRL       A,#0x2
   \   000011   7010         JNZ       ??zclSampleLight_ProcessCommissioningStatus_0
    604            {
    605              case BDB_COMMISSIONING_FORMATION:
    606                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   000013   8A82         MOV       DPL,R2
   \   000015   8B83         MOV       DPH,R3
   \   000017   E0           MOVX      A,@DPTR
   \   000018   7009         JNZ       ??zclSampleLight_ProcessCommissioningStatus_0
    607                {
    608                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
    609                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   00001A                ; Setup parameters for call to function bdb_StartCommissioning
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   4402         ORL       A,#0x2
   \   00001F   F9           MOV       R1,A
   \   000020   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    610                }
    611                else
    612                {
    613                  //Want to try other channels?
    614                  //try with bdb_setChannelAttribute
    615                }
    616              break;
    617              case BDB_COMMISSIONING_NWK_STEERING:
    618                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    619                {
    620                  //YOUR JOB:
    621                  //We are on the nwk, what now?
    622                }
    623                else
    624                {
    625                  //See the possible errors for nwk steering procedure
    626                  //No suitable networks found
    627                  //Want to try other channels?
    628                  //try with bdb_setChannelAttribute
    629                }
    630              break;
    631              case BDB_COMMISSIONING_FINDING_BINDING:
    632                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    633                {
    634                  //YOUR JOB:
    635                }
    636                else
    637                {
    638                  //YOUR JOB:
    639                  //retry?, wait for user interaction?
    640                }
    641              break;
    642              case BDB_COMMISSIONING_INITIALIZATION:
    643                //Initialization notification can only be successful. Failure on initialization 
    644                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    645                
    646                //YOUR JOB:
    647                //We are on a network, what now?
    648                
    649              break;
    650          #if ZG_BUILD_ENDDEVICE_TYPE    
    651              case BDB_COMMISSIONING_PARENT_LOST:
    652                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
    653                {
    654                  //We did recover from losing parent
    655                }
    656                else
    657                {
    658                  //Parent not found, attempt to rejoin again after a fixed delay
    659                  osal_start_timerEx(zclSampleLight_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
    660                }
    661              break;
    662          #endif 
    663            }
    664            
    665            UI_UpdateComissioningStatus(bdbCommissioningModeMsg);
   \                     ??zclSampleLight_ProcessCommissioningStatus_0:
   \   000023                ; Setup parameters for call to function UI_UpdateComissioningStatus
   \   000023   EE           MOV       A,R6
   \   000024   FA           MOV       R2,A
   \   000025   EF           MOV       A,R7
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??UI_UpdateComissioningStatus::?relay`; Banked call to: UI_UpdateComissioningStatus
    666          }
   \   00002A   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    667          
    668          /*********************************************************************
    669           * @fn      zclSampleLight_BasicResetCB
    670           *
    671           * @brief   Callback from the ZCL General Cluster Library
    672           *          to set all the Basic Cluster attributes to default values.
    673           *
    674           * @param   none
    675           *
    676           * @return  none
    677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    678          static void zclSampleLight_BasicResetCB( void )
   \                     zclSampleLight_BasicResetCB:
    679          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    680            //Reset every attribute in all supported cluster to their default value.
    681          
    682            zclSampleLight_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
    683          
    684            zclSampleLight_UpdateLedState();
   \   000007                ; Setup parameters for call to function zclSampleLight_UpdateLedState
   \   000007   12....       LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
    685          
    686            // update the display
    687            UI_UpdateLcd( ); 
   \   00000A                ; Setup parameters for call to function UI_UpdateLcd
   \   00000A   12....       LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
    688          }
   \   00000D   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    689          
    690          /*********************************************************************
    691           * @fn      zclSampleLight_OnOffCB
    692           *
    693           * @brief   Callback from the ZCL General Cluster Library when
    694           *          it received an On/Off Command for this application.
    695           *
    696           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
    697           *
    698           * @return  none
    699           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    700          static void zclSampleLight_OnOffCB( uint8 cmd )
   \                     zclSampleLight_OnOffCB:
    701          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    702            // Turn on the light
    703            if ( cmd == COMMAND_ON )
   \   000007   7401         MOV       A,#0x1
   \   000009   6E           XRL       A,R6
   \   00000A   6009         JZ        ??zclSampleLight_OnOffCB_0
    704              zclSampleLight_OnOff = LIGHT_ON;
    705          
    706            // Turn off the light
    707            else if ( cmd == COMMAND_OFF )
   \   00000C   E9           MOV       A,R1
   \   00000D   600D         JZ        ??zclSampleLight_OnOffCB_1
    708              zclSampleLight_OnOff = LIGHT_OFF;
    709          
    710            // Toggle the light
    711            else
    712            {
    713              if ( zclSampleLight_OnOff == LIGHT_OFF )
   \   00000F   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7007         JNZ       ??zclSampleLight_OnOffCB_1
    714                zclSampleLight_OnOff = LIGHT_ON;
   \                     ??zclSampleLight_OnOffCB_0:
   \   000015   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   000018   7401         MOV       A,#0x1
   \   00001A   8004         SJMP      ??zclSampleLight_OnOffCB_2
    715              else
    716                zclSampleLight_OnOff = LIGHT_OFF;
   \                     ??zclSampleLight_OnOffCB_1:
   \   00001C   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   00001F   E4           CLR       A
   \                     ??zclSampleLight_OnOffCB_2:
   \   000020   F0           MOVX      @DPTR,A
    717            }
    718          
    719            // In this sample app, we use LED4 to simulate the Light
    720            if ( zclSampleLight_OnOff == LIGHT_ON )
    721              HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    722            else
    723              HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
   \   000021                ; Setup parameters for call to function HalLedSet
   \   000021   FA           MOV       R2,A
   \   000022   7908         MOV       R1,#0x8
   \   000024   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    724          }
   \   000027   02....       LJMP      ?Subroutine1 & 0xFFFF
    725          
    726          #ifdef ZCL_LEVEL_CTRL
    727          /*********************************************************************
    728           * @fn      zclSampleLight_TimeRateHelper
    729           *
    730           * @brief   Calculate time based on rate, and startup level state machine
    731           *
    732           * @param   newLevel - new level for current level
    733           *
    734           * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
    735           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    736          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
   \                     zclSampleLight_TimeRateHelper:
    737          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    738            uint32 diff;
    739            uint32 newLevel32;
    740          
    741            // remember current and new level
    742            zclSampleLight_NewLevel = newLevel;
   \   000007   90....       MOV       DPTR,#zclSampleLight_NewLevel
   \   00000A   F0           MOVX      @DPTR,A
    743            zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
   \   00000B   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V0,A
   \   000011   E4           CLR       A
   \   000012   F5..         MOV       ?V1,A
   \   000014   F5..         MOV       ?V2,A
   \   000016   F5..         MOV       ?V3,A
   \   000018   90....       MOV       DPTR,#__Constant_3e8
   \   00001B   78..         MOV       R0,#?V4
   \   00001D   12....       LCALL     ?L_MOV_X
   \   000020   78..         MOV       R0,#?V0
   \   000022   79..         MOV       R1,#?V4
   \   000024   12....       LCALL     ?L_MUL
   \   000027   90....       MOV       DPTR,#zclSampleLight_CurrentLevel32
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?L_MOV_TO_X
    744          
    745            // calculate diff
    746            newLevel32 = (uint32)1000 * newLevel;
   \   00002F   8E..         MOV       ?V4,R6
   \   000031   E4           CLR       A
   \   000032   F5..         MOV       ?V5,A
   \   000034   F5..         MOV       ?V6,A
   \   000036   F5..         MOV       ?V7,A
   \   000038   90....       MOV       DPTR,#__Constant_3e8
   \   00003B   78..         MOV       R0,#?V0
   \   00003D   12....       LCALL     ?L_MOV_X
   \   000040   78..         MOV       R0,#?V4
   \   000042   79..         MOV       R1,#?V0
   \   000044   12....       LCALL     ?L_MUL
    747            if ( zclSampleLight_LevelCurrentLevel > newLevel )
   \   000047   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F8           MOV       R0,A
   \   00004C   EE           MOV       A,R6
   \   00004D   C3           CLR       C
   \   00004E   98           SUBB      A,R0
   \   00004F   90....       MOV       DPTR,#zclSampleLight_CurrentLevel32
   \   000052   501E         JNC       ??zclSampleLight_TimeRateHelper_0
    748            {
    749              diff = zclSampleLight_CurrentLevel32 - newLevel32;
   \   000054   78..         MOV       R0,#?V0
   \   000056   12....       LCALL     ?L_MOV_X
   \   000059   78..         MOV       R0,#?V0
   \   00005B   79..         MOV       R1,#?V4
   \   00005D   12....       LCALL     ?L_SUB
   \   000060   85....       MOV       ?V4,?V0
   \   000063   85....       MOV       ?V5,?V1
   \   000066   85....       MOV       ?V6,?V2
   \   000069   85....       MOV       ?V7,?V3
    750              zclSampleLight_NewLevelUp = FALSE;  // moving down
   \   00006C   90....       MOV       DPTR,#zclSampleLight_NewLevelUp
   \   00006F   E4           CLR       A
   \   000070   800A         SJMP      ??zclSampleLight_TimeRateHelper_1
    751            }
    752            else
    753            {
    754              diff = newLevel32 - zclSampleLight_CurrentLevel32;
   \                     ??zclSampleLight_TimeRateHelper_0:
   \   000072   78..         MOV       R0,#?V4
   \   000074   12....       LCALL     ?L_SUB_X
    755              zclSampleLight_NewLevelUp = TRUE;   // moving up
   \   000077   90....       MOV       DPTR,#zclSampleLight_NewLevelUp
   \   00007A   7401         MOV       A,#0x1
   \                     ??zclSampleLight_TimeRateHelper_1:
   \   00007C   F0           MOVX      @DPTR,A
    756            }
    757          
    758            return ( diff );
   \   00007D   AA..         MOV       R2,?V4
   \   00007F   AB..         MOV       R3,?V5
   \   000081   AC..         MOV       R4,?V6
   \   000083   AD..         MOV       R5,?V7
   \   000085   80..         SJMP      ??Subroutine9_0
    759          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    760          
    761          /*********************************************************************
    762           * @fn      zclSampleLight_MoveBasedOnRate
    763           *
    764           * @brief   Calculate time based on rate, and startup level state machine
    765           *
    766           * @param   newLevel - new level for current level
    767           * @param   rate16   - fixed point rate (e.g. 16.123)
    768           *
    769           * @return  none
    770           */
    771          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
    772          {
    773            uint32 diff;
    774          
    775            // determine how much time (in 10ths of seconds) based on the difference and rate
    776            zclSampleLight_Rate32 = rate;
    777            diff = zclSampleLight_TimeRateHelper( newLevel );
    778            zclSampleLight_LevelRemainingTime = diff / rate;
    779            if ( !zclSampleLight_LevelRemainingTime )
    780            {
    781              zclSampleLight_LevelRemainingTime = 1;
    782            }
    783          
    784            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
    785          }
    786          
    787          /*********************************************************************
    788           * @fn      zclSampleLight_MoveBasedOnTime
    789           *
    790           * @brief   Calculate rate based on time, and startup level state machine
    791           *
    792           * @param   newLevel  - new level for current level
    793           * @param   time      - in 10ths of seconds
    794           *
    795           * @return  none
    796           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV       DPTR,#__Constant_64
   \   000003   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000006   7A02         MOV       R2,#0x2
   \   000008   7B00         MOV       R3,#0x0
   \   00000A   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000012   7404         MOV       A,#0x4
   \   000014   12....       LCALL     ?DEALLOC_XSTACK8
   \   000017                REQUIRE ??Subroutine9_0
   \   000017                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    797          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
   \                     zclSampleLight_MoveBasedOnTime:
    798          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    799            uint16 diff;
    800          
    801            // determine rate (in units) based on difference and time
    802            diff = zclSampleLight_TimeRateHelper( newLevel );
   \   00000B                ; Setup parameters for call to function zclSampleLight_TimeRateHelper
   \   00000B   12....       LCALL     `??zclSampleLight_TimeRateHelper::?relay`; Banked call to: zclSampleLight_TimeRateHelper
   \   00000E   8A..         MOV       ?V4,R2
   \   000010   8B..         MOV       ?V5,R3
   \   000012   A8..         MOV       R0,?V4
   \   000014   A9..         MOV       R1,?V5
    803            zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
   \   000016   EE           MOV       A,R6
   \   000017   FA           MOV       R2,A
   \   000018   EF           MOV       A,R7
   \   000019   FB           MOV       R3,A
   \   00001A   74FF         MOV       A,#-0x1
   \   00001C   6A           XRL       A,R2
   \   00001D   7003         JNZ       ??zclSampleLight_MoveBasedOnTime_0
   \   00001F   74FF         MOV       A,#-0x1
   \   000021   6B           XRL       A,R3
   \                     ??zclSampleLight_MoveBasedOnTime_0:
   \   000022   7030         JNZ       ??zclSampleLight_MoveBasedOnTime_1
   \   000024   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000027   E0           MOVX      A,@DPTR
   \   000028   FA           MOV       R2,A
   \   000029   E5..         MOV       A,?V0
   \   00002B   C3           CLR       C
   \   00002C   9A           SUBB      A,R2
   \   00002D   5005         JNC       ??zclSampleLight_MoveBasedOnTime_2
   \   00002F   90....       MOV       DPTR,#zclSampleLight_LevelOffTransitionTime
   \   000032   8003         SJMP      ??zclSampleLight_MoveBasedOnTime_3
   \                     ??zclSampleLight_MoveBasedOnTime_2:
   \   000034   90....       MOV       DPTR,#zclSampleLight_LevelOnTransitionTime
   \                     ??zclSampleLight_MoveBasedOnTime_3:
   \   000037   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00003A   74FF         MOV       A,#-0x1
   \   00003C   6A           XRL       A,R2
   \   00003D   7003         JNZ       ??zclSampleLight_MoveBasedOnTime_4
   \   00003F   74FF         MOV       A,#-0x1
   \   000041   6B           XRL       A,R3
   \                     ??zclSampleLight_MoveBasedOnTime_4:
   \   000042   7006         JNZ       ??CrossCallReturnLabel_6
   \   000044   90....       MOV       DPTR,#zclSampleLight_LevelOnOffTransitionTime
   \   000047   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00004A   74FF         MOV       A,#-0x1
   \   00004C   6A           XRL       A,R2
   \   00004D   7003         JNZ       ??zclSampleLight_MoveBasedOnTime_5
   \   00004F   74FF         MOV       A,#-0x1
   \   000051   6B           XRL       A,R3
   \                     ??zclSampleLight_MoveBasedOnTime_5:
   \   000052   6004         JZ        ??zclSampleLight_MoveBasedOnTime_6
   \                     ??zclSampleLight_MoveBasedOnTime_1:
   \   000054   EA           MOV       A,R2
   \   000055   4B           ORL       A,R3
   \   000056   7004         JNZ       ??zclSampleLight_MoveBasedOnTime_7
   \                     ??zclSampleLight_MoveBasedOnTime_6:
   \   000058   7A01         MOV       R2,#0x1
   \   00005A   7B00         MOV       R3,#0x0
   \                     ??zclSampleLight_MoveBasedOnTime_7:
   \   00005C   90....       MOV       DPTR,#zclSampleLight_LevelRemainingTime
   \   00005F   EA           MOV       A,R2
   \   000060   F0           MOVX      @DPTR,A
   \   000061   A3           INC       DPTR
   \   000062   EB           MOV       A,R3
   \   000063   F0           MOVX      @DPTR,A
    804            zclSampleLight_Rate32 = diff / time;
   \   000064   EE           MOV       A,R6
   \   000065   FA           MOV       R2,A
   \   000066   EF           MOV       A,R7
   \   000067   FB           MOV       R3,A
   \   000068   12....       LCALL     ?US_DIV_MOD
   \   00006B   90....       MOV       DPTR,#zclSampleLight_Rate32
   \   00006E   E8           MOV       A,R0
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   A3           INC       DPTR
   \   000071   E9           MOV       A,R1
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   E4           CLR       A
   \   000075   F0           MOVX      @DPTR,A
   \   000076   A3           INC       DPTR
   \   000077   F0           MOVX      @DPTR,A
    805          
    806            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   \   000078                ; Setup parameters for call to function osal_start_timerEx
   \   000078   02....       LJMP      ?Subroutine2 & 0xFFFF
    807          }
    808          
    809          /*********************************************************************
    810           * @fn      zclSampleLight_GetTime
    811           *
    812           * @brief   Determine amount of time that MoveXXX will take to complete.
    813           *
    814           * @param   level = new level to move to
    815           *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
    816           *
    817           * @return  none
    818           */
    819          static uint16 zclSampleLight_GetTime( uint8 newLevel, uint16 time )
    820          {
    821            // there is a hiearchy of the amount of time to use for transistioning
    822            // check each one in turn. If none of defaults are set, then use fastest
    823            // time possible.
    824            if ( time == 0xFFFF )
    825            {
    826              // use On or Off Transition Time if set (not 0xffff)
    827              if ( zclSampleLight_LevelCurrentLevel > newLevel )
    828              {
    829                time = zclSampleLight_LevelOffTransitionTime;
    830              }
    831              else
    832              {
    833                time = zclSampleLight_LevelOnTransitionTime;
    834              }
    835          
    836              // else use OnOffTransitionTime if set (not 0xffff)
    837              if ( time == 0xFFFF )
    838              {
    839                time = zclSampleLight_LevelOnOffTransitionTime;
    840              }
    841          
    842              // else as fast as possible
    843              if ( time == 0xFFFF )
    844              {
    845                time = 1;
    846              }
    847            }
    848          
    849            if ( time == 0 )
    850            {
    851              time = 1; // as fast as possible
    852            }
    853          
    854            return ( time );
    855          }
    856          
    857          /*********************************************************************
    858           * @fn      zclSampleLight_DefaultMove
    859           *
    860           * @brief   We were turned on/off. Use default time to move to on or off.
    861           *
    862           * @param   zclSampleLight_OnOff - must be set prior to calling this function.
    863           *
    864           * @return  none
    865           */
    866          static void zclSampleLight_DefaultMove( uint8 OnOff )
                             ^
Warning[Pe177]: function "zclSampleLight_DefaultMove" was declared but never
          referenced
    867          {
    868            uint8  newLevel;
    869            uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
    870            uint16 time;
    871          
    872            // if moving to on position, move to on level
    873            if ( OnOff )
    874            {
    875              if (zclSampleLight_OnOff == LIGHT_OFF)
    876              {
    877                zclSampleLight_LevelCurrentLevel = ATTR_LEVEL_MIN_LEVEL;
    878              }
    879              
    880              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
    881              {
    882                // The last Level (before going OFF) should be used)
    883                newLevel = zclSampleLight_LevelLastLevel;
    884              }
    885              else
    886              {
    887                newLevel = zclSampleLight_LevelOnLevel;
    888              }
    889          
    890              time = zclSampleLight_LevelOnTransitionTime;
    891          
    892            }
    893            else
    894            {
    895              newLevel = ATTR_LEVEL_MIN_LEVEL;
    896          
    897              time = zclSampleLight_LevelOffTransitionTime;
    898            }
    899          
    900            // else use OnOffTransitionTime if set (not 0xffff)
    901            if ( time == 0xFFFF )
    902            {
    903              time = zclSampleLight_LevelOnOffTransitionTime;
    904            }
    905          
    906            // else as fast as possible
    907            if ( time == 0xFFFF )
    908            {
    909              time = 1;
    910            }
    911          
    912            // calculate rate based on time (int 10ths) for full transition (1-254)
    913            rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
    914          
    915            // start up state machine.
    916            zclSampleLight_WithOnOff = TRUE;
    917            zclSampleLight_MoveBasedOnRate( newLevel, rate );
    918          }
    919          
    920          /*********************************************************************
    921           * @fn      zclSampleLight_AdjustLightLevel
    922           *
    923           * @brief   Called each 10th of a second while state machine running
    924           *
    925           * @param   none
    926           *
    927           * @return  none
    928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    929          static void zclSampleLight_AdjustLightLevel( void )
   \                     zclSampleLight_AdjustLightLevel:
    930          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    931            // one tick (10th of a second) less
    932            if ( zclSampleLight_LevelRemainingTime )
   \   000005   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000008   6012         JZ        ??zclSampleLight_AdjustLightLevel_0
    933            {
    934              --zclSampleLight_LevelRemainingTime;
    935            }
    936          
    937            // no time left, done
    938            if ( zclSampleLight_LevelRemainingTime == 0)
   \   00000A   90....       MOV       DPTR,#zclSampleLight_LevelRemainingTime
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   24FF         ADD       A,#-0x1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   18           DEC       R0
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   34FF         ADDC      A,#-0x1
   \   000016   F0           MOVX      @DPTR,A
   \   000017   F9           MOV       R1,A
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   7006         JNZ       ??zclSampleLight_AdjustLightLevel_1
    939            {
    940              zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
   \                     ??zclSampleLight_AdjustLightLevel_0:
   \   00001C   90....       MOV       DPTR,#zclSampleLight_NewLevel
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   803C         SJMP      ??zclSampleLight_AdjustLightLevel_2
    941            }
    942          
    943            // still time left, keep increment/decrementing
    944            else
    945            {
    946              if ( zclSampleLight_NewLevelUp )
   \                     ??zclSampleLight_AdjustLightLevel_1:
   \   000022   90....       MOV       DPTR,#zclSampleLight_NewLevelUp
   \   000025   E0           MOVX      A,@DPTR
   \   000026   90....       MOV       DPTR,#zclSampleLight_Rate32
   \   000029   78..         MOV       R0,#?V0
   \   00002B   600D         JZ        ??zclSampleLight_AdjustLightLevel_3
    947              {
    948                zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
   \   00002D   12....       LCALL     ?L_MOV_X
   \   000030   90....       MOV       DPTR,#zclSampleLight_CurrentLevel32
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?L_ADD_TO_X
   \   000038   800B         SJMP      ??zclSampleLight_AdjustLightLevel_4
    949              }
    950              else
    951              {
    952                zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
   \                     ??zclSampleLight_AdjustLightLevel_3:
   \   00003A   12....       LCALL     ?L_MOV_X
   \   00003D   90....       MOV       DPTR,#zclSampleLight_CurrentLevel32
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?L_SUB_FROM_X
    953              }
    954              zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
   \                     ??zclSampleLight_AdjustLightLevel_4:
   \   000045   90....       MOV       DPTR,#zclSampleLight_CurrentLevel32
   \   000048   78..         MOV       R0,#?V0
   \   00004A   12....       LCALL     ?L_MOV_X
   \   00004D   90....       MOV       DPTR,#__Constant_3e8
   \   000050   78..         MOV       R0,#?V4
   \   000052   12....       LCALL     ?L_MOV_X
   \   000055   78..         MOV       R0,#?V0
   \   000057   79..         MOV       R1,#?V4
   \   000059   12....       LCALL     ?L_DIV_MOD
   \   00005C   E5..         MOV       A,?V0
   \                     ??zclSampleLight_AdjustLightLevel_2:
   \   00005E   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000061   F0           MOVX      @DPTR,A
    955            }
    956          
    957            if (( zclSampleLight_LevelChangeCmd == LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
   \   000062   90....       MOV       DPTR,#zclSampleLight_LevelChangeCmd
   \   000065   E0           MOVX      A,@DPTR
   \   000066   700F         JNZ       ??zclSampleLight_AdjustLightLevel_5
   \   000068   90....       MOV       DPTR,#zclSampleLight_LevelOnLevel
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F4           CPL       A
   \   00006D   7008         JNZ       ??zclSampleLight_AdjustLightLevel_5
    958            {
    959              zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
   \   00006F   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000072   E0           MOVX      A,@DPTR
   \   000073   90....       MOV       DPTR,#zclSampleLight_LevelLastLevel
   \   000076   F0           MOVX      @DPTR,A
    960            }
    961          
    962            // also affect on/off
    963            if ( zclSampleLight_WithOnOff )
   \                     ??zclSampleLight_AdjustLightLevel_5:
   \   000077   90....       MOV       DPTR,#zclSampleLight_WithOnOff
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   6037         JZ        ??zclSampleLight_AdjustLightLevel_6
    964            {
    965              if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
   \   00007D   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000080   E0           MOVX      A,@DPTR
   \   000081   C3           CLR       C
   \   000082   9402         SUBB      A,#0x2
   \   000084   4007         JC        ??zclSampleLight_AdjustLightLevel_7
    966              {
    967                zclSampleLight_OnOff = LIGHT_ON;
   \   000086   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   000089   7401         MOV       A,#0x1
   \   00008B   8026         SJMP      ??zclSampleLight_AdjustLightLevel_8
    968              }
    969              else
    970              {
    971                if (zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_ON_CMD)
   \                     ??zclSampleLight_AdjustLightLevel_7:
   \   00008D   90....       MOV       DPTR,#zclSampleLight_LevelChangeCmd
   \   000090   E0           MOVX      A,@DPTR
   \   000091   6401         XRL       A,#0x1
   \   000093   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   000096   600A         JZ        ??zclSampleLight_AdjustLightLevel_9
    972                {
    973                  zclSampleLight_OnOff = LIGHT_OFF;
   \   000098   E4           CLR       A
   \   000099   F0           MOVX      @DPTR,A
    974                }
    975                else
    976                {
    977                  zclSampleLight_OnOff = LIGHT_ON;
    978                }
    979                
    980                if (( zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
   \   00009A   90....       MOV       DPTR,#zclSampleLight_LevelChangeCmd
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   7005         JNZ       ??zclSampleLight_AdjustLightLevel_10
   \   0000A0   8012         SJMP      ??zclSampleLight_AdjustLightLevel_6
   \                     ??zclSampleLight_AdjustLightLevel_9:
   \   0000A2   7401         MOV       A,#0x1
   \   0000A4   F0           MOVX      @DPTR,A
   \                     ??zclSampleLight_AdjustLightLevel_10:
   \   0000A5   90....       MOV       DPTR,#zclSampleLight_LevelOnLevel
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   F4           CPL       A
   \   0000AA   7008         JNZ       ??zclSampleLight_AdjustLightLevel_6
    981                {
    982                  zclSampleLight_LevelCurrentLevel = zclSampleLight_LevelLastLevel;
   \   0000AC   90....       MOV       DPTR,#zclSampleLight_LevelLastLevel
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \                     ??zclSampleLight_AdjustLightLevel_8:
   \   0000B3   F0           MOVX      @DPTR,A
    983                }
    984              }
    985            }
    986          
    987            zclSampleLight_UpdateLedState();
   \                     ??zclSampleLight_AdjustLightLevel_6:
   \   0000B4                ; Setup parameters for call to function zclSampleLight_UpdateLedState
   \   0000B4   12....       LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
    988            
    989            // display light level as we go
    990            UI_UpdateLcd( );
   \   0000B7                ; Setup parameters for call to function UI_UpdateLcd
   \   0000B7   12....       LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
    991          
    992            // keep ticking away
    993            if ( zclSampleLight_LevelRemainingTime )
   \   0000BA   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000BD   6017         JZ        ??zclSampleLight_AdjustLightLevel_11
    994            {
    995              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
   \   0000BF                ; Setup parameters for call to function osal_start_timerEx
   \   0000BF   90....       MOV       DPTR,#__Constant_64
   \   0000C2   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000C5   7A02         MOV       R2,#0x2
   \   0000C7   7B00         MOV       R3,#0x0
   \   0000C9   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F9           MOV       R1,A
   \   0000CE   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000D1   7404         MOV       A,#0x4
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
    996            }
    997          }
   \                     ??zclSampleLight_AdjustLightLevel_11:
   \   0000D6   02....       LJMP      ??Subroutine9_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV       DPTR,#zclSampleLight_LevelRemainingTime
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F9           MOV       R1,A
   \   000008   E8           MOV       A,R0
   \   000009   49           ORL       A,R1
   \   00000A   22           RET
    998          
    999          /*********************************************************************
   1000           * @fn      zclSampleLight_LevelControlMoveToLevelCB
   1001           *
   1002           * @brief   Callback from the ZCL General Cluster Library when
   1003           *          it received a LevelControlMoveToLevel Command for this application.
   1004           *
   1005           * @param   pCmd - ZigBee command parameters
   1006           *
   1007           * @return  none
   1008           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1009          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
   \                     zclSampleLight_LevelControlMoveToLevelCB:
   1010          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   F8           MOV       R0,A
   \   000006   EB           MOV       A,R3
   \   000007   F9           MOV       R1,A
   1011            zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
   \   000008   12....       LCALL     ?Subroutine3 & 0xFFFF
   1012          
   1013            zclSampleLight_WithOnOff = pCmd->withOnOff;
   \                     ??CrossCallReturnLabel_0:
   \   00000B   12....       LCALL     ?Subroutine4 & 0xFFFF
   1014            zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
   \                     ??CrossCallReturnLabel_12:
   \   00000E   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000011   8882         MOV       DPL,R0
   \   000013   8983         MOV       DPH,R1
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   12....       LCALL     `??zclSampleLight_MoveBasedOnTime::?relay`; Banked call to: zclSampleLight_MoveBasedOnTime
   1015          }
   \   00001A   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   90....       MOV       DPTR,#zclSampleLight_WithOnOff
   \   000004                REQUIRE ??Subroutine10_0
   \   000004                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zclSampleLight_MoveBasedOnTime
   \   000001                ; Setup parameters for call to function zclSampleLight_MoveBasedOnTime
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV       DPTR,#zclSampleLight_LevelChangeCmd
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET
   1016          
   1017          /*********************************************************************
   1018           * @fn      zclSampleLight_LevelControlMoveCB
   1019           *
   1020           * @brief   Callback from the ZCL General Cluster Library when
   1021           *          it received a LevelControlMove Command for this application.
   1022           *
   1023           * @param   pCmd - ZigBee command parameters
   1024           *
   1025           * @return  none
   1026           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1027          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
   \                     zclSampleLight_LevelControlMoveCB:
   1028          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   1029            uint8 newLevel;
   1030            uint32 rate;
   1031          
   1032            // convert rate from units per second to units per tick (10ths of seconds)
   1033            // and move at that right up or down
   1034            zclSampleLight_WithOnOff = pCmd->withOnOff;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   90....       MOV       DPTR,#zclSampleLight_WithOnOff
   \   00000F   F0           MOVX      @DPTR,A
   1035          
   1036            if ( pCmd->moveMode == LEVEL_MOVE_UP )
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   E0           MOVX      A,@DPTR
   \   000015   7004         JNZ       ??zclSampleLight_LevelControlMoveCB_0
   1037            {
   1038              newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
   \   000017   7CFE         MOV       R4,#-0x2
   \   000019   8002         SJMP      ??zclSampleLight_LevelControlMoveCB_1
   1039            }
   1040            else
   1041            {
   1042              newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
   \                     ??zclSampleLight_LevelControlMoveCB_0:
   \   00001B   7C01         MOV       R4,#0x1
   1043            }
   1044          
   1045            zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
   \                     ??zclSampleLight_LevelControlMoveCB_1:
   \   00001D   90....       MOV       DPTR,#zclSampleLight_LevelChangeCmd
   \   000020   E4           CLR       A
   \   000021   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   1046          
   1047            rate = (uint32)100 * pCmd->rate;
   1048            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   \                     ??CrossCallReturnLabel_14:
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V4,A
   \   000027   E4           CLR       A
   \   000028   F5..         MOV       ?V5,A
   \   00002A   F5..         MOV       ?V6,A
   \   00002C   F5..         MOV       ?V7,A
   \   00002E   90....       MOV       DPTR,#__Constant_64
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?L_MOV_X
   \   000036   78..         MOV       R0,#?V4
   \   000038   79..         MOV       R1,#?V0
   \   00003A   12....       LCALL     ?L_MUL
   \   00003D   90....       MOV       DPTR,#zclSampleLight_Rate32
   \   000040   78..         MOV       R0,#?V4
   \   000042   12....       LCALL     ?L_MOV_TO_X
   \   000045                ; Setup parameters for call to function zclSampleLight_TimeRateHelper
   \   000045   EC           MOV       A,R4
   \   000046   F9           MOV       R1,A
   \   000047   12....       LCALL     `??zclSampleLight_TimeRateHelper::?relay`; Banked call to: zclSampleLight_TimeRateHelper
   \   00004A   8A..         MOV       ?V0,R2
   \   00004C   8B..         MOV       ?V1,R3
   \   00004E   8C..         MOV       ?V2,R4
   \   000050   8D..         MOV       ?V3,R5
   \   000052   78..         MOV       R0,#?V0
   \   000054   79..         MOV       R1,#?V4
   \   000056   12....       LCALL     ?UL_DIV_MOD
   \   000059   90....       MOV       DPTR,#zclSampleLight_LevelRemainingTime
   \   00005C   E5..         MOV       A,?V0
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E5..         MOV       A,?V1
   \   000062   F0           MOVX      @DPTR,A
   \   000063   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000066   7009         JNZ       ??zclSampleLight_LevelControlMoveCB_2
   \   000068   90....       MOV       DPTR,#zclSampleLight_LevelRemainingTime
   \   00006B   7401         MOV       A,#0x1
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   A3           INC       DPTR
   \   00006F   E4           CLR       A
   \   000070   F0           MOVX      @DPTR,A
   \                     ??zclSampleLight_LevelControlMoveCB_2:
   \   000071                ; Setup parameters for call to function osal_start_timerEx
   \   000071   02....       LJMP      ?Subroutine2 & 0xFFFF
   1049          }
   1050          
   1051          /*********************************************************************
   1052           * @fn      zclSampleLight_LevelControlStepCB
   1053           *
   1054           * @brief   Callback from the ZCL General Cluster Library when
   1055           *          it received an On/Off Command for this application.
   1056           *
   1057           * @param   pCmd - ZigBee command parameters
   1058           *
   1059           * @return  none
   1060           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1061          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
   \                     zclSampleLight_LevelControlStepCB:
   1062          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1063            uint8 newLevel;
   1064          
   1065            // determine new level, but don't exceed boundaries
   1066            if ( pCmd->stepMode == LEVEL_MOVE_UP )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FC           MOV       R4,A
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   E0           MOVX      A,@DPTR
   \   000011   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000014   7017         JNZ       ??zclSampleLight_LevelControlStepCB_0
   1067            {
   1068              if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
   \   000016   E0           MOVX      A,@DPTR
   \   000017   2C           ADD       A,R4
   \   000018   F8           MOV       R0,A
   \   000019   E4           CLR       A
   \   00001A   3400         ADDC      A,#0x0
   \   00001C   F9           MOV       R1,A
   \   00001D   E8           MOV       A,R0
   \   00001E   94FF         SUBB      A,#-0x1
   \   000020   E9           MOV       A,R1
   \   000021   9400         SUBB      A,#0x0
   \   000023   4004         JC        ??zclSampleLight_LevelControlStepCB_1
   1069              {
   1070                newLevel = ATTR_LEVEL_MAX_LEVEL;
   \   000025   79FE         MOV       R1,#-0x2
   \   000027   8013         SJMP      ??zclSampleLight_LevelControlStepCB_2
   1071              }
   1072              else
   1073              {
   1074                newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
   \                     ??zclSampleLight_LevelControlStepCB_1:
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   2C           ADD       A,R4
   \   00002B   800E         SJMP      ??zclSampleLight_LevelControlStepCB_3
   1075              }
   1076            }
   1077            else
   1078            {
   1079              if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
   \                     ??zclSampleLight_LevelControlStepCB_0:
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F8           MOV       R0,A
   \   00002F   EC           MOV       A,R4
   \   000030   C3           CLR       C
   \   000031   98           SUBB      A,R0
   \   000032   4004         JC        ??zclSampleLight_LevelControlStepCB_4
   1080              {
   1081                newLevel = ATTR_LEVEL_MIN_LEVEL;
   \   000034   7901         MOV       R1,#0x1
   \   000036   8004         SJMP      ??zclSampleLight_LevelControlStepCB_2
   1082              }
   1083              else
   1084              {
   1085                newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
   \                     ??zclSampleLight_LevelControlStepCB_4:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   C3           CLR       C
   \   00003A   9C           SUBB      A,R4
   \                     ??zclSampleLight_LevelControlStepCB_3:
   \   00003B   F9           MOV       R1,A
   1086              }
   1087            }
   1088            
   1089            zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
   \                     ??zclSampleLight_LevelControlStepCB_2:
   \   00003C   12....       LCALL     ?Subroutine3 & 0xFFFF
   1090          
   1091            // move to the new level
   1092            zclSampleLight_WithOnOff = pCmd->withOnOff;
   \                     ??CrossCallReturnLabel_1:
   \   00003F   A3           INC       DPTR
   \   000040   12....       LCALL     ?Subroutine4 & 0xFFFF
   1093            zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
   \                     ??CrossCallReturnLabel_13:
   \   000043   A3           INC       DPTR
   \   000044   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000047   12....       LCALL     `??zclSampleLight_MoveBasedOnTime::?relay`; Banked call to: zclSampleLight_MoveBasedOnTime
   1094          }
   \   00004A                REQUIRE ?Subroutine1
   \   00004A                ; // Fall through to label ?Subroutine1
   1095          
   1096          /*********************************************************************
   1097           * @fn      zclSampleLight_LevelControlStopCB
   1098           *
   1099           * @brief   Callback from the ZCL General Cluster Library when
   1100           *          it received an Level Control Stop Command for this application.
   1101           *
   1102           * @param   pCmd - ZigBee command parameters
   1103           *
   1104           * @return  none
   1105           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1106          static void zclSampleLight_LevelControlStopCB( void )
   \                     zclSampleLight_LevelControlStopCB:
   1107          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1108            // stop immediately
   1109            osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A02         MOV       R2,#0x2
   \   000006   7B00         MOV       R3,#0x0
   \   000008   90....       MOV       DPTR,#zclSampleLight_TaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1110            zclSampleLight_LevelRemainingTime = 0;
   \   000010   90....       MOV       DPTR,#zclSampleLight_LevelRemainingTime
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
   1111          }
   \   000017   02....       LJMP      ?Subroutine0 & 0xFFFF
   1112          #endif
   1113          
   1114          /*********************************************************************
   1115           * @fn      zclSampleApp_BatteryWarningCB
   1116           *
   1117           * @brief   Called to handle battery-low situation.
   1118           *
   1119           * @param   voltLevel - level of severity
   1120           *
   1121           * @return  none
   1122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1123          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
   1124          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1125            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
   1126            {
   1127              // Send warning message to the gateway and blink LED
   1128            }
   1129            else if ( voltLevel == VOLT_LEVEL_BAD )
   1130            {
   1131              // Shut down the system
   1132            }
   1133          }
   \   000000   02....       LJMP      ?BRET
   1134          
   1135          /******************************************************************************
   1136           *
   1137           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1138           *
   1139           *****************************************************************************/
   1140          
   1141          /*********************************************************************
   1142           * @fn      zclSampleLight_ProcessIncomingMsg
   1143           *
   1144           * @brief   Process ZCL Foundation incoming message
   1145           *
   1146           * @param   pInMsg - pointer to the received message
   1147           *
   1148           * @return  none
   1149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1150          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   \                     zclSampleLight_ProcessIncomingMsg:
   1151          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1152            switch ( pInMsg->zclHdr.commandID )
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   FE           MOV       R6,A
   \   00000E   E9           MOV       A,R1
   \   00000F   FF           MOV       R7,A
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   14           DEC       A
   \   00001D   6016         JZ        ??zclSampleLight_ProcessIncomingMsg_0
   \   00001F   24FD         ADD       A,#-0x3
   \   000021   601F         JZ        ??zclSampleLight_ProcessIncomingMsg_1
   \   000023   24F7         ADD       A,#-0x9
   \   000025   602D         JZ        ??zclSampleLight_ProcessIncomingMsg_2
   \   000027   24FB         ADD       A,#-0x5
   \   000029   6024         JZ        ??zclSampleLight_ProcessIncomingMsg_3
   \   00002B   24FE         ADD       A,#-0x2
   \   00002D   6020         JZ        ??zclSampleLight_ProcessIncomingMsg_3
   \   00002F   24FE         ADD       A,#-0x2
   \   000031   6033         JZ        ??zclSampleLight_ProcessIncomingMsg_4
   \   000033   8043         SJMP      ??zclSampleLight_ProcessIncomingMsg_5
   1153            {
   1154          #ifdef ZCL_READ
   1155              case ZCL_CMD_READ_RSP:
   1156                zclSampleLight_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleLight_ProcessIncomingMsg_0:
   \   000035   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   E8           MOV       A,R0
   \   00003B   C3           CLR       C
   \   00003C   99           SUBB      A,R1
   \   00003D   5039         JNC       ??zclSampleLight_ProcessIncomingMsg_5
   \   00003F   08           INC       R0
   \   000040   80F6         SJMP      ??CrossCallReturnLabel_10
   1157                break;
   1158          #endif
   1159          #ifdef ZCL_WRITE
   1160              case ZCL_CMD_WRITE_RSP:
   1161                zclSampleLight_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleLight_ProcessIncomingMsg_1:
   \   000042   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   E8           MOV       A,R0
   \   000048   C3           CLR       C
   \   000049   99           SUBB      A,R1
   \   00004A   502C         JNC       ??zclSampleLight_ProcessIncomingMsg_5
   \   00004C   08           INC       R0
   \   00004D   80F6         SJMP      ??CrossCallReturnLabel_11
   1162                break;
   1163          #endif
   1164              case ZCL_CMD_CONFIG_REPORT:
   1165              case ZCL_CMD_CONFIG_REPORT_RSP:
   1166              case ZCL_CMD_READ_REPORT_CFG:
   1167              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1168              case ZCL_CMD_REPORT:
   1169                //bdb_ProcessIncomingReportingMsg( pInMsg );
   1170                break;
   1171          
   1172              case ZCL_CMD_DEFAULT_RSP:
   1173                zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
   1174                break;
   1175          #ifdef ZCL_DISCOVER
   1176              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1177                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleLight_ProcessIncomingMsg_3:
   \   00004F                ; Setup parameters for call to function zclSampleLight_ProcessInDiscCmdsRspCmd
   1178                break;
   1179          
   1180              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1181                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   \   00004F                ; Setup parameters for call to function zclSampleLight_ProcessInDiscCmdsRspCmd
   \   00004F   12....       LCALL     `??zclSampleLight_ProcessInDiscCmdsRspCmd::?rela`; Banked call to: zclSampleLight_ProcessInDiscCmdsRspCmd
   1182                break;
   \   000052   8024         SJMP      ??zclSampleLight_ProcessIncomingMsg_5
   1183          
   1184              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1185                zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??zclSampleLight_ProcessIncomingMsg_2:
   \   000054   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000057   8882         MOV       DPL,R0
   \   000059   8983         MOV       DPH,R1
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FB           MOV       R3,A
   \   00005E   EA           MOV       A,R2
   \   00005F   C3           CLR       C
   \   000060   9B           SUBB      A,R3
   \   000061   5015         JNC       ??zclSampleLight_ProcessIncomingMsg_5
   \   000063   0A           INC       R2
   \   000064   80F1         SJMP      ??CrossCallReturnLabel_16
   1186                break;
   1187          
   1188              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1189                zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??zclSampleLight_ProcessIncomingMsg_4:
   \   000066   12....       LCALL     ?Subroutine6 & 0xFFFF
   1190                break;
   1191          #endif
   1192              default:
   1193                break;
   1194            }
   \                     ??CrossCallReturnLabel_17:
   \   000069   8001         SJMP      ??zclSampleLight_ProcessIncomingMsg_6
   \                     ??zclSampleLight_ProcessIncomingMsg_7:
   \   00006B   0A           INC       R2
   \                     ??zclSampleLight_ProcessIncomingMsg_6:
   \   00006C   8882         MOV       DPL,R0
   \   00006E   8983         MOV       DPH,R1
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FB           MOV       R3,A
   \   000073   EA           MOV       A,R2
   \   000074   C3           CLR       C
   \   000075   9B           SUBB      A,R3
   \   000076   40F3         JC        ??zclSampleLight_ProcessIncomingMsg_7
   1195          
   1196            if ( pInMsg->attrCmd )
   \                     ??zclSampleLight_ProcessIncomingMsg_5:
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00007F   EA           MOV       A,R2
   \   000080   4B           ORL       A,R3
   \   000081   6003         JZ        ??zclSampleLight_ProcessIncomingMsg_8
   1197              osal_mem_free( pInMsg->attrCmd );
   \   000083                ; Setup parameters for call to function osal_mem_free
   \   000083   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1198          }
   \                     ??zclSampleLight_ProcessIncomingMsg_8:
   \   000086   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   7800         MOV       R0,#0x0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine11_0
   \   000004                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   7A00         MOV       R2,#0x0
   \   000007   22           RET
   1199          
   1200          #ifdef ZCL_READ
   1201          /*********************************************************************
   1202           * @fn      zclSampleLight_ProcessInReadRspCmd
   1203           *
   1204           * @brief   Process the "Profile" Read Response Command
   1205           *
   1206           * @param   pInMsg - incoming message to process
   1207           *
   1208           * @return  none
   1209           */
   1210          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1211          {
   1212            zclReadRspCmd_t *readRspCmd;
   1213            uint8 i;
   1214          
   1215            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1216            for (i = 0; i < readRspCmd->numAttr; i++)
   1217            {
   1218              // Notify the originator of the results of the original read attributes
   1219              // attempt and, for each successfull request, the value of the requested
   1220              // attribute
   1221            }
   1222          
   1223            return ( TRUE );
   1224          }
   1225          #endif // ZCL_READ
   1226          
   1227          #ifdef ZCL_WRITE
   1228          /*********************************************************************
   1229           * @fn      zclSampleLight_ProcessInWriteRspCmd
   1230           *
   1231           * @brief   Process the "Profile" Write Response Command
   1232           *
   1233           * @param   pInMsg - incoming message to process
   1234           *
   1235           * @return  none
   1236           */
   1237          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1238          {
   1239            zclWriteRspCmd_t *writeRspCmd;
   1240            uint8 i;
   1241          
   1242            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1243            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1244            {
   1245              // Notify the device of the results of the its original write attributes
   1246              // command.
   1247            }
   1248          
   1249            return ( TRUE );
   1250          }
   1251          #endif // ZCL_WRITE
   1252          
   1253          /*********************************************************************
   1254           * @fn      zclSampleLight_ProcessInDefaultRspCmd
   1255           *
   1256           * @brief   Process the "Profile" Default Response Command
   1257           *
   1258           * @param   pInMsg - incoming message to process
   1259           *
   1260           * @return  none
   1261           */
   1262          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1263          {
   1264            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1265          
   1266            // Device is notified of the Default Response command.
   1267            (void)pInMsg;
   1268          
   1269            return ( TRUE );
   1270          }
   1271          
   1272          #ifdef ZCL_DISCOVER
   1273          /*********************************************************************
   1274           * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
   1275           *
   1276           * @brief   Process the Discover Commands Response Command
   1277           *
   1278           * @param   pInMsg - incoming message to process
   1279           *
   1280           * @return  none
   1281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1282          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleLight_ProcessInDiscCmdsRspCmd:
   1283          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1284            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1285            uint8 i;
   1286          
   1287            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000004   EA           MOV       A,R2
   \   000005   2417         ADD       A,#0x17
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   1288            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_15:
   \   000010   8001         SJMP      ??zclSampleLight_ProcessInDiscCmdsRspCmd_0
   \                     ??zclSampleLight_ProcessInDiscCmdsRspCmd_1:
   \   000012   0A           INC       R2
   \                     ??zclSampleLight_ProcessInDiscCmdsRspCmd_0:
   \   000013   8882         MOV       DPL,R0
   \   000015   8983         MOV       DPH,R1
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   C3           CLR       C
   \   00001D   9B           SUBB      A,R3
   \   00001E   40F2         JC        ??zclSampleLight_ProcessInDiscCmdsRspCmd_1
   1289            {
   1290              // Device is notified of the result of its attribute discovery command.
   1291            }
   1292          
   1293            return ( TRUE );
   \   000020   7901         MOV       R1,#0x1
   \   000022                REQUIRE ?Subroutine0
   \   000022                ; // Fall through to label ?Subroutine0
   1294          }
   1295          
   1296          /*********************************************************************
   1297           * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
   1298           *
   1299           * @brief   Process the "Profile" Discover Attributes Response Command
   1300           *
   1301           * @param   pInMsg - incoming message to process
   1302           *
   1303           * @return  none
   1304           */
   1305          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1306          {
   1307            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1308            uint8 i;
   1309          
   1310            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1311            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1312            {
   1313              // Device is notified of the result of its attribute discovery command.
   1314            }
   1315          
   1316            return ( TRUE );
   1317          }
   1318          
   1319          /*********************************************************************
   1320           * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
   1321           *
   1322           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1323           *
   1324           * @param   pInMsg - incoming message to process
   1325           *
   1326           * @return  none
   1327           */
   1328          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1329          {
   1330            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1331            uint8 i;
   1332          
   1333            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1334            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1335            {
   1336              // Device is notified of the result of its attribute discovery command.
   1337            }
   1338          
   1339            return ( TRUE );
   1340          }
   1341          #endif // ZCL_DISCOVER
   1342          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1343          void zclSampleLight_UiActionToggleLight(uint16 keys)
   \                     zclSampleLight_UiActionToggleLight:
   1344          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1345            zclSampleLight_OnOffCB(COMMAND_TOGGLE);
   \   000004                ; Setup parameters for call to function zclSampleLight_OnOffCB
   \   000004   7902         MOV       R1,#0x2
   \   000006   12....       LCALL     `??zclSampleLight_OnOffCB::?relay`; Banked call to: zclSampleLight_OnOffCB
   1346          }
   \   000009   80..         SJMP      ?Subroutine0
   1347          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1348          void zclSampleLight_UpdateLedState(void)
   \                     zclSampleLight_UpdateLedState:
   1349          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1350            // set the LED1 based on light (on or off)
   1351            if ( zclSampleLight_OnOff == LIGHT_ON )
   \   000004   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   7004         JNZ       ??zclSampleLight_UpdateLedState_0
   1352            {
   1353              HalLedSet ( UI_LED_APP, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV       R2,#0x1
   \   00000E   8002         SJMP      ??zclSampleLight_UpdateLedState_1
   1354            }
   1355            else
   1356            {
   1357              HalLedSet ( UI_LED_APP, HAL_LED_MODE_OFF );
   \                     ??zclSampleLight_UpdateLedState_0:
   \   000010                ; Setup parameters for call to function HalLedSet
   \   000010   7A00         MOV       R2,#0x0
   \                     ??zclSampleLight_UpdateLedState_1:
   \   000012   7901         MOV       R1,#0x1
   \   000014   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1358            }
   1359          }
   \   000017   80..         SJMP      ?Subroutine0
   1360          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1361          void zclSampleLight_UiUpdateLcd(uint8 UiState, char * line[3])
   \                     zclSampleLight_UiUpdateLcd:
   1362          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1363          #ifdef LCD_SUPPORTED
   1364          #ifdef ZCL_LEVEL_CTRL
   1365            zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[9] );
   \   000009                ; Setup parameters for call to function zclHA_uint8toa
   \   000009   7A..         MOV       R2,#(sLightLevel + 9) & 0xff
   \   00000B   7B..         MOV       R3,#((sLightLevel + 9) >> 8) & 0xff
   \   00000D   90....       MOV       DPTR,#zclSampleLight_LevelCurrentLevel
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   12....       LCALL     `??zclHA_uint8toa::?relay`; Banked call to: zclHA_uint8toa
   1366            line[0] = (char *)sLightLevel;
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   74..         MOV       A,#sLightLevel & 0xff
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   74..         MOV       A,#(sLightLevel >> 8) & 0xff
   \   00001F   F0           MOVX      @DPTR,A
   1367          #endif // ZCL_LEVEL_CTRL
   1368            line[1] = (char *)(zclSampleLight_OnOff ? sLightOn : sLightOff);
   \   000020   90....       MOV       DPTR,#zclSampleLight_OnOff
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6006         JZ        ??zclSampleLight_UiUpdateLcd_0
   \   000026   78..         MOV       R0,#sLightOn & 0xff
   \   000028   79..         MOV       R1,#(sLightOn >> 8) & 0xff
   \   00002A   8004         SJMP      ??zclSampleLight_UiUpdateLcd_1
   \                     ??zclSampleLight_UiUpdateLcd_0:
   \   00002C   78..         MOV       R0,#sLightOff & 0xff
   \   00002E   79..         MOV       R1,#(sLightOff >> 8) & 0xff
   \                     ??zclSampleLight_UiUpdateLcd_1:
   \   000030   8E82         MOV       DPL,R6
   \   000032   8F83         MOV       DPH,R7
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E8           MOV       A,R0
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   E9           MOV       A,R1
   \   00003A   F0           MOVX      @DPTR,A
   1369            line[2] = "< TOGGLE LIGHT >";
   \   00003B   8E82         MOV       DPL,R6
   \   00003D   8F83         MOV       DPH,R7
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   74..         MOV       A,#`?<Constant "< TOGGLE LIGHT >">` & 0xff
   \   000045   F0           MOVX      @DPTR,A
   \   000046   A3           INC       DPTR
   \   000047   74..         MOV       A,#(`?<Constant "< TOGGLE LIGHT >">` >> 8) & 0xff
   \   000049   F0           MOVX      @DPTR,A
   1370          #endif
   1371          }
   \   00004A   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bindingInClusters>`:
   \   000000   0600         DW 6
   \   000002   0800         DW 8

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleLight_TestEp>`:
   \   000000   14           DB 20
   \   000001   00           DB 0
   \   000002   ....         DW zclSampleLight_TaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sLightLevel>`:
   \   000000   2020204C     DB "   LEVEL ###    "
   \            4556454C
   \            20232323
   \            20202020
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleLight_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   ....         DW `??zclSampleLight_OnOffCB::?relay`
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   ....         DW `??zclSampleLight_LevelControlMoveToLevelCB::?re`
   \   00000E   ....         DW `??zclSampleLight_LevelControlMoveCB::?relay`
   \   000010   ....         DW `??zclSampleLight_LevelControlStepCB::?relay`
   \   000012   ....         DW `??zclSampleLight_LevelControlStopCB::?relay`
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TI Sample Light">`:
   \   000000   54492053     DB "TI Sample Light"
   \            616D706C
   \            65204C69
   \            67687400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "< TOGGLE LIGHT >">`:
   \   000000   3C20544F     DB "< TOGGLE LIGHT >"
   \            47474C45
   \            204C4947
   \            4854203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100
   1372          
   1373          /****************************************************************************
   1374          ****************************************************************************/
   1375          
   1376          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   gp_ChangeChannelReq
      0      0   gp_CommissioningMode
      0      0   zclSampleApp_BatteryWarningCB
      0     41   zclSampleLight_AdjustLightLevel
        0     16   -> UI_UpdateLcd
        0     20   -> osal_start_timerEx
        0     16   -> zclSampleLight_UpdateLedState
      2      0   zclSampleLight_BasicResetCB
        2      0   -> UI_UpdateLcd
        2      0   -> zclSampleLight_ResetAttributesToDefaultValues
        2      0   -> zclSampleLight_UpdateLedState
      0     18   zclSampleLight_Init
        0     10   -> RegisterForKeys
        0     10   -> RegisterVoltageWarningCB
        0     18   -> UI_Init
        0     10   -> UI_UpdateLcd
        0     10   -> afRegister
        0     10   -> bdb_RegisterCommissioningStatusCB
        0     10   -> bdb_RegisterSimpleDescriptor
        0     10   -> gp_RegisterCommissioningModeCB
        0     10   -> gp_RegisterGPChangeChannelReqCB
        0     10   -> zclGeneral_RegisterCmdCallbacks
        0     10   -> zclSampleLight_ResetAttributesToDefaultValues
        0     10   -> zcl_registerAttrList
        0     10   -> zcl_registerCmdList
        0     10   -> zcl_registerForMsg
      0     20   zclSampleLight_LevelControlMoveCB
        0     20   -> osal_start_timerEx
        0     16   -> zclSampleLight_TimeRateHelper
      2      0   zclSampleLight_LevelControlMoveToLevelCB
        2      0   -> zclSampleLight_MoveBasedOnTime
      0      9   zclSampleLight_LevelControlStepCB
        0      9   -> zclSampleLight_MoveBasedOnTime
      2      0   zclSampleLight_LevelControlStopCB
        2      0   -> osal_stop_timerEx
      0     29   zclSampleLight_MoveBasedOnTime
        0     20   -> osal_start_timerEx
        0     16   -> zclSampleLight_TimeRateHelper
      0      9   zclSampleLight_OnOffCB
        0      9   -> HalLedSet
      0      9   zclSampleLight_ProcessCommissioningStatus
        0      9   -> UI_UpdateComissioningStatus
        0      9   -> bdb_StartCommissioning
      2      9   zclSampleLight_ProcessInDiscCmdsRspCmd
      0     30   zclSampleLight_ProcessIncomingMsg
        0      9   -> osal_mem_free
        0      9   -> zclSampleLight_ProcessInDiscCmdsRspCmd
      0     32   zclSampleLight_TimeRateHelper
      2      0   zclSampleLight_UiActionToggleLight
        2      0   -> zclSampleLight_OnOffCB
      0      9   zclSampleLight_UiUpdateLcd
        0      9   -> zclHA_uint8toa
      2     16   zclSampleLight_UpdateLedState
        2      0   -> HalLedSet
      0     30   zclSampleLight_event_loop
        0     21   -> NLME_GetShortAddr
        0     21   -> UI_DeviceStateUpdated
        0     21   -> UI_MainStateMachine
        0     21   -> UI_UpdateLcd
        0     30   -> ZDP_EndDeviceBindReq
        0     21   -> osal_msg_deallocate
        0     21   -> osal_msg_receive
        0     21   -> zclSampleLight_AdjustLightLevel
        0     21   -> zclSampleLight_ProcessIncomingMsg


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "< TOGGLE LIGHT >">
      16  ?<Constant "TI Sample Light">
       4  ?<Initializer for bindingInClusters>
      17  ?<Initializer for sLightLevel>
       7  ?<Initializer for sampleLight_TestEp>
      32  ?<Initializer for zclSampleLight_CmdCallbacks>
       7  ??Subroutine10_0
       8  ??Subroutine11_0
       5  ??Subroutine9_0
       7  ?Subroutine0
       5  ?Subroutine1
      23  ?Subroutine2
      13  ?Subroutine3
       4  ?Subroutine4
      11  ?Subroutine5
       4  ?Subroutine6
       6  ?Subroutine7
      15  ?Subroutine8
       4  __Constant_3e8
       4  __Constant_64
       4  bindingInClusters
       5  gp_ChangeChannelReq
       3  gp_CommissioningMode
      17  sLightLevel
      17  sLightOff
      17  sLightOn
       7  sampleLight_TestEp
       3  zclSampleApp_BatteryWarningCB
       1  zclSampleLightSeqNum
     217  zclSampleLight_AdjustLightLevel
      16  zclSampleLight_BasicResetCB
      32  zclSampleLight_CmdCallbacks
       4  zclSampleLight_CurrentLevel32
      12  zclSampleLight_DstAddr
     215  zclSampleLight_Init
       1  zclSampleLight_LevelChangeCmd
     116  zclSampleLight_LevelControlMoveCB
      29  zclSampleLight_LevelControlMoveToLevelCB
      74  zclSampleLight_LevelControlStepCB
      26  zclSampleLight_LevelControlStopCB
       1  zclSampleLight_LevelLastLevel
     123  zclSampleLight_MoveBasedOnTime
       1  zclSampleLight_NewLevel
       1  zclSampleLight_NewLevelUp
      42  zclSampleLight_OnOffCB
      45  zclSampleLight_ProcessCommissioningStatus
      34  zclSampleLight_ProcessInDiscCmdsRspCmd
     137  zclSampleLight_ProcessIncomingMsg
       4  zclSampleLight_Rate32
       1  zclSampleLight_TaskID
     135  zclSampleLight_TimeRateHelper
      11  zclSampleLight_UiActionToggleLight
      12  zclSampleLight_UiStatesMain
      77  zclSampleLight_UiUpdateLcd
      25  zclSampleLight_UpdateLedState
       1  zclSampleLight_WithOnOff
     253  zclSampleLight_event_loop
     120  -- Other

 
 1 694 bytes in segment BANKED_CODE
   120 bytes in segment BANK_RELAYS
    60 bytes in segment XDATA_I
    60 bytes in segment XDATA_ID
    87 bytes in segment XDATA_ROM_C
    27 bytes in segment XDATA_Z
 
   180 bytes of CODE     memory
    79 bytes of CONST    memory (+ 8 bytes shared)
 1 694 bytes of HUGECODE memory
    87 bytes of XDATA    memory

Errors: none
Warnings: 4
