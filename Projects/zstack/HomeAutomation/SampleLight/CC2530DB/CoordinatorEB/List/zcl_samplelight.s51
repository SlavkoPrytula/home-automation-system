///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              19/Apr/2021  18:00:04
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    Command line       =  
//        -f C:\users\slavko\Temp\EW911f.tmp ("C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c"
//        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
//        NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
//        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
//        -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -lC "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\zcl_samplelight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplelight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_DIV_MOD
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_SUB
        EXTERN ?L_SUB_FROM_X
        EXTERN ?L_SUB_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?US_DIV_MOD
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??gp_ChangeChannelReq::?relay`,0203H
        FUNCTION `??gp_CommissioningMode::?relay`,0203H
        FUNCTION `??zclSampleApp_BatteryWarningCB::?relay`,0203H
        FUNCTION `??zclSampleLight_AdjustLightLevel::?relay`,0203H
        FUNCTION `??zclSampleLight_BasicResetCB::?relay`,0203H
        PUBLIC `??zclSampleLight_Init::?relay`
        FUNCTION `??zclSampleLight_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_LevelControlMoveCB::?relay`,0203H
        FUNCTION `??zclSampleLight_LevelControlMoveToLevelCB::?re`,0203H
        FUNCTION `??zclSampleLight_LevelControlStepCB::?relay`,0203H
        FUNCTION `??zclSampleLight_LevelControlStopCB::?relay`,0203H
        FUNCTION `??zclSampleLight_MoveBasedOnTime::?relay`,0203H
        FUNCTION `??zclSampleLight_OnOffCB::?relay`,0203H
        FUNCTION `??zclSampleLight_ProcessCommissioningStatus::?r`,0203H
        FUNCTION `??zclSampleLight_ProcessInDiscCmdsRspCmd::?rela`,0203H
        FUNCTION `??zclSampleLight_ProcessIncomingMsg::?relay`,0203H
        FUNCTION `??zclSampleLight_TimeRateHelper::?relay`,0203H
        PUBLIC `??zclSampleLight_UiActionToggleLight::?relay`
        FUNCTION `??zclSampleLight_UiActionToggleLight::?relay`,0203H
        PUBLIC `??zclSampleLight_UiUpdateLcd::?relay`
        FUNCTION `??zclSampleLight_UiUpdateLcd::?relay`,0203H
        PUBLIC `??zclSampleLight_UpdateLedState::?relay`
        FUNCTION `??zclSampleLight_UpdateLedState::?relay`,0203H
        PUBLIC `??zclSampleLight_event_loop::?relay`
        FUNCTION `??zclSampleLight_event_loop::?relay`,0203H
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_64
        FUNCTION gp_ChangeChannelReq,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION gp_CommissioningMode,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC sLightLevel
        PUBLIC sLightOff
        PUBLIC sLightOn
        FUNCTION zclSampleApp_BatteryWarningCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclSampleLightSeqNum
        FUNCTION zclSampleLight_AdjustLightLevel,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zclSampleLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_CurrentLevel32
        PUBLIC zclSampleLight_DstAddr
        PUBLIC zclSampleLight_Init
        FUNCTION zclSampleLight_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC zclSampleLight_LevelChangeCmd
        FUNCTION zclSampleLight_LevelControlMoveCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zclSampleLight_LevelControlMoveToLevelCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_LevelControlStepCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleLight_LevelControlStopCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_LevelLastLevel
        FUNCTION zclSampleLight_MoveBasedOnTime,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC zclSampleLight_NewLevel
        PUBLIC zclSampleLight_NewLevelUp
        FUNCTION zclSampleLight_OnOffCB,021603H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleLight_ProcessCommissioningStatus,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleLight_ProcessInDiscCmdsRspCmd,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_ProcessIncomingMsg,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclSampleLight_Rate32
        PUBLIC zclSampleLight_TaskID
        FUNCTION zclSampleLight_TimeRateHelper,080203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC zclSampleLight_UiActionToggleLight
        FUNCTION zclSampleLight_UiActionToggleLight,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_UiStatesMain
        PUBLIC zclSampleLight_UiUpdateLcd
        FUNCTION zclSampleLight_UiUpdateLcd,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclSampleLight_UpdateLedState
        FUNCTION zclSampleLight_UpdateLedState,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_WithOnOff
        PUBLIC zclSampleLight_event_loop
        FUNCTION zclSampleLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
RegisterVoltageWarningCB SYMBOL "RegisterVoltageWarningCB"
`??RegisterVoltageWarningCB::?relay` SYMBOL "?relay", RegisterVoltageWarningCB
`?<Name UI_ActionBackFromApp 8>` SYMBOL "UI_ActionBackFromAppMenu"
`??UI_ActionBackFromAppMenu::?relay` SYMBOL "?relay", `?<Name UI_ActionBackFromApp 8>`
UI_DeviceStateUpdated SYMBOL "UI_DeviceStateUpdated"
`??UI_DeviceStateUpdated::?relay` SYMBOL "?relay", UI_DeviceStateUpdated
UI_Init             SYMBOL "UI_Init"
`??UI_Init::?relay` SYMBOL "?relay", UI_Init
UI_MainStateMachine SYMBOL "UI_MainStateMachine"
`??UI_MainStateMachine::?relay` SYMBOL "?relay", UI_MainStateMachine
UI_UpdateComissioningStatus SYMBOL "UI_UpdateComissioningStatus"
`??UI_UpdateComissioningStatus::?relay` SYMBOL "?relay", UI_UpdateComissioningStatus
UI_UpdateLcd        SYMBOL "UI_UpdateLcd"
`??UI_UpdateLcd::?relay` SYMBOL "?relay", UI_UpdateLcd
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
`??ZDP_EndDeviceBindReq::?relay` SYMBOL "?relay", ZDP_EndDeviceBindReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
gp_RegisterCommissioningModeCB SYMBOL "gp_RegisterCommissioningModeCB"
`??gp_RegisterCommissioningModeCB::?relay` SYMBOL "?relay", gp_RegisterCommissioningModeCB
gp_RegisterGPChangeChannelReqCB SYMBOL "gp_RegisterGPChangeChannelReqCB"
`??gp_RegisterGPChangeChannelReqCB::?relay` SYMBOL "?relay", gp_RegisterGPChangeChannelReqCB
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_uint8toa      SYMBOL "zclHA_uint8toa"
`??zclHA_uint8toa::?relay` SYMBOL "?relay", zclHA_uint8toa
zclSampleLight_ResetAttributesToDefaultValues SYMBOL "zclSampleLight_ResetAttributesToDefaultValues"
??zclSampleLight_ResetAttributesToDefaultValues SYMBOL "?relay", zclSampleLight_ResetAttributesToDefaultValues
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerCmdList SYMBOL "zcl_registerCmdList"
`??zcl_registerCmdList::?relay` SYMBOL "?relay", zcl_registerCmdList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zclSampleLight_Init SYMBOL "zclSampleLight_Init"
`??zclSampleLight_Init::?relay` SYMBOL "?relay", zclSampleLight_Init
zclSampleLight_UiActionToggleLight SYMBOL "zclSampleLight_UiActionToggleLight"
`??zclSampleLight_UiActionToggleLight::?relay` SYMBOL "?relay", zclSampleLight_UiActionToggleLight
zclSampleLight_UiUpdateLcd SYMBOL "zclSampleLight_UiUpdateLcd"
`??zclSampleLight_UiUpdateLcd::?relay` SYMBOL "?relay", zclSampleLight_UiUpdateLcd
zclSampleLight_UpdateLedState SYMBOL "zclSampleLight_UpdateLedState"
`??zclSampleLight_UpdateLedState::?relay` SYMBOL "?relay", zclSampleLight_UpdateLedState
zclSampleLight_event_loop SYMBOL "zclSampleLight_event_loop"
`??zclSampleLight_event_loop::?relay` SYMBOL "?relay", zclSampleLight_event_loop

        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??RegisterVoltageWarningCB::?relay`
        FUNCTION `??RegisterVoltageWarningCB::?relay`,00H
        EXTERN `??UI_ActionBackFromAppMenu::?relay`
        FUNCTION `??UI_ActionBackFromAppMenu::?relay`,00H
        EXTERN `??UI_DeviceStateUpdated::?relay`
        FUNCTION `??UI_DeviceStateUpdated::?relay`,00H
        EXTERN `??UI_Init::?relay`
        FUNCTION `??UI_Init::?relay`,00H
        EXTERN `??UI_MainStateMachine::?relay`
        FUNCTION `??UI_MainStateMachine::?relay`,00H
        EXTERN `??UI_UpdateComissioningStatus::?relay`
        FUNCTION `??UI_UpdateComissioningStatus::?relay`,00H
        EXTERN `??UI_UpdateLcd::?relay`
        FUNCTION `??UI_UpdateLcd::?relay`,00H
        EXTERN `??ZDP_EndDeviceBindReq::?relay`
        FUNCTION `??ZDP_EndDeviceBindReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??gp_RegisterCommissioningModeCB::?relay`
        FUNCTION `??gp_RegisterCommissioningModeCB::?relay`,00H
        EXTERN `??gp_RegisterGPChangeChannelReqCB::?relay`
        FUNCTION `??gp_RegisterGPChangeChannelReqCB::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_uint8toa::?relay`
        FUNCTION `??zclHA_uint8toa::?relay`,00H
        EXTERN ??zclSampleLight_ResetAttributesToDefaultValues
        FUNCTION ??zclSampleLight_ResetAttributesToDefaultValues,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerCmdList::?relay`
        FUNCTION `??zcl_registerCmdList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterVoltageWarningCB
        FUNCTION RegisterVoltageWarningCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UI_DeviceStateUpdated
        FUNCTION UI_DeviceStateUpdated,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UI_Init
        FUNCTION UI_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UI_MainStateMachine
        FUNCTION UI_MainStateMachine,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UI_UpdateComissioningStatus
        FUNCTION UI_UpdateComissioningStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UI_UpdateLcd
        FUNCTION UI_UpdateLcd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_RegisterCommissioningModeCB
        FUNCTION gp_RegisterCommissioningModeCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_RegisterGPChangeChannelReqCB
        FUNCTION gp_RegisterGPChangeChannelReqCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclCmdsArraySize
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_uint8toa
        FUNCTION zclHA_uint8toa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_Attrs
        EXTERN zclSampleLight_Cmds
        EXTERN zclSampleLight_IdentifyTime
        EXTERN zclSampleLight_LevelCurrentLevel
        EXTERN zclSampleLight_LevelOffTransitionTime
        EXTERN zclSampleLight_LevelOnLevel
        EXTERN zclSampleLight_LevelOnOffTransitionTime
        EXTERN zclSampleLight_LevelOnTransitionTime
        EXTERN zclSampleLight_LevelRemainingTime
        EXTERN zclSampleLight_NumAttributes
        EXTERN zclSampleLight_OnOff
        EXTERN zclSampleLight_ResetAttributesToDefaultValues
        FUNCTION zclSampleLight_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_SimpleDesc
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerCmdList
        FUNCTION zcl_registerCmdList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zdpExternalStateTaskID

// C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample light application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee Light, based on Z-Stack 3.0. It can be configured as an
//   43   On/Off light or as a dimmable light, by undefining or defining ZCL_LEVEL_CTRL, respectively.
//   44 
//   45   This application is based on the common sample-application user interface. Please see the main
//   46   comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
//   47   this sample applicetion.
//   48   
//   49   Application-specific UI peripherals being used:
//   50 
//   51   - LEDs:
//   52     LED1 reflect the current light state (On / Off accordingly).
//   53 
//   54   Application-specific menu system:
//   55 
//   56     <TOGGLE LIGHT> Toggle the local light and display its status and level
//   57       Press OK to toggle the local light on and off.
//   58       This screen shows the following information
//   59         Line1: (only populated if ZCL_LEVEL_CTRL is defined)
//   60           LEVEL XXX - xxx is the current level of the light if the light state is ON, or the target level
//   61             of the light when the light state is off. The target level is the level that the light will be
//   62             set to when it is switched from off to on using the on or the toggle commands.
//   63         Line2:
//   64           LIGHT OFF / ON: shows the current state of the light.
//   65       Note when ZCL_LEVEL_CTRL is enabled:
//   66         - If the light state is ON and the light level is X, and then the light receives the OFF or TOGGLE 
//   67           commands: The level will decrease gradually until it reaches 1, and only then the light state will
//   68           be changed to OFF. The level then will be restored to X, with the state staying OFF. At this stage
//   69           the light is not lighting, and the level represent the target level for the next ON or TOGGLE 
//   70           commands.
//   71         - If the light state is OFF and the light level is X, and then the light receives the ON or TOGGLE
//   72           commands; The level will be set to 1, the light state will be set to ON, and then the level will
//   73           increase gradually until it reaches level X.
//   74         - Any level-setting command will affect the level directly, and may also affect the on/off state,
//   75           depending on the command's arguments.       
//   76 
//   77 *********************************************************************/
//   78 
//   79 /*********************************************************************
//   80  * INCLUDES
//   81  */
//   82 #include "ZComDef.h"
//   83 #include "OSAL.h"
//   84 #include "AF.h"
//   85 #include "ZDApp.h"
//   86 #include "ZDObject.h"
//   87 #include "MT_SYS.h"
//   88 
//   89 #include "nwk_util.h"
//   90 
//   91 #include "zcl.h"
//   92 #include "zcl_general.h"
//   93 #include "zcl_ha.h"
//   94 #include "zcl_diagnostic.h"
//   95 
//   96 #include "zcl_samplelight.h"
//   97    
//   98 #include "bdb.h"
//   99 #include "bdb_interface.h"
//  100 
//  101  //GP_UPDATE
//  102 #include "gp_interface.h"
//  103    
//  104 #include "onboard.h"
//  105 
//  106 /* HAL */
//  107 #include "hal_lcd.h"
//  108 #include "hal_led.h"
//  109 #include "hal_key.h"
//  110 
//  111 #include "NLMEDE.h"
//  112 
//  113 // Added to include TouchLink initiator functionality 
//  114 #if defined ( BDB_TL_INITIATOR )
//  115   #include "bdb_touchlink_initiator.h"
//  116 #endif // BDB_TL_INITIATOR
//  117 
//  118 #if defined ( BDB_TL_TARGET )
//  119   #include "bdb_touchlink_target.h"
//  120 #endif // BDB_TL_TARGET
//  121 
//  122 #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
//  123   #include "bdb_touchlink.h"
//  124 #endif
//  125 
//  126 #include "zcl_sampleapps_ui.h"
//  127 
//  128 /*********************************************************************
//  129  * MACROS
//  130  */
//  131 #define UI_STATE_TOGGLE_LIGHT 1 //UI_STATE_BACK_FROM_APP_MENU is item #0, so app item numbers should start from 1
//  132 
//  133 #define APP_TITLE "TI Sample Light"
//  134 
//  135 /*********************************************************************
//  136  * TYPEDEFS
//  137  */
//  138 
//  139 /*********************************************************************
//  140  * GLOBAL VARIABLES
//  141  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  142 byte zclSampleLight_TaskID;
zclSampleLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 uint8 zclSampleLightSeqNum;
zclSampleLightSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 /*********************************************************************
//  146  * GLOBAL FUNCTIONS
//  147  */
//  148 
//  149 /*********************************************************************
//  150  * LOCAL VARIABLES
//  151  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  152 afAddrType_t zclSampleLight_DstAddr;
zclSampleLight_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  153 
//  154 #define ZCLSAMPLELIGHT_BINDINGLIST       2

        RSEG XDATA_I:XDATA:NOROOT(0)
//  155 static cId_t bindingInClusters[ZCLSAMPLELIGHT_BINDINGLIST] =
bindingInClusters:
        DATA32
        DS 4
        REQUIRE `?<Initializer for bindingInClusters>`
        REQUIRE __INIT_XDATA_I
//  156 {
//  157   ZCL_CLUSTER_ID_GEN_ON_OFF,
//  158   ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  159 };
//  160 
//  161 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  162 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 7
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  163 {
//  164   SAMPLELIGHT_ENDPOINT,                                 // Test endpoint
//  165   0,
//  166   &zclSampleLight_TaskID,
//  167   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  168   (afNetworkLatencyReq_t)0            // No Network Latency req
//  169 };
//  170 
//  171 #ifdef ZCL_LEVEL_CTRL

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  172 uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
zclSampleLight_WithOnOff:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  173 uint8 zclSampleLight_NewLevel;        // new level when done moving
zclSampleLight_NewLevel:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  174 uint8 zclSampleLight_LevelChangeCmd; // current level change was triggered by an on/off command
zclSampleLight_LevelChangeCmd:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  175 bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
zclSampleLight_NewLevelUp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  176 int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
zclSampleLight_CurrentLevel32:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  177 int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
zclSampleLight_Rate32:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
zclSampleLight_LevelLastLevel:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  179 #endif
//  180 
//  181 /*********************************************************************
//  182  * LOCAL FUNCTIONS
//  183  */
//  184 static void zclSampleLight_HandleKeys( byte shift, byte keys );
//  185 static void zclSampleLight_BasicResetCB( void );
//  186 static void zclSampleLight_OnOffCB( uint8 cmd );
//  187 
//  188 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
//  189 static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  190 static void zclSampleLight_ProcessIdentifyTimeChange( void );
//  191 
//  192 //GP_UPDATE
//  193 #if (ZG_BUILD_RTR_TYPE)
//  194 static void gp_CommissioningMode(bool isEntering);
//  195 static uint8 gp_ChangeChannelReq(void);
//  196 #endif
//  197 
//  198 
//  199 static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
//  200 
//  201 
//  202 #ifdef ZCL_LEVEL_CTRL
//  203 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  204 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
//  205 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
//  206 static void zclSampleLight_LevelControlStopCB( void );
//  207 static void zclSampleLight_DefaultMove( uint8 OnOff );
//  208 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
//  209 static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
//  210 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  211 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  212 static void zclSampleLight_AdjustLightLevel( void );
//  213 #endif
//  214 
//  215 // Functions to process ZCL Foundation incoming Command/Response messages
//  216 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  217 #ifdef ZCL_READ
//  218 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  219 #endif
//  220 #ifdef ZCL_WRITE
//  221 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  222 #endif
//  223 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  224 #ifdef ZCL_DISCOVER
//  225 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  226 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  227 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  228 #endif
//  229 
//  230 static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
//  231 
//  232 void zclSampleLight_UiActionToggleLight(uint16 keys);
//  233 void zclSampleLight_UiUpdateLcd(uint8 uiCurrentState, char * line[3]);
//  234 void zclSampleLight_UpdateLedState(void);
//  235 
//  236 /*********************************************************************
//  237  * CONSTANTS
//  238  */

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  239 const uiState_t zclSampleLight_UiStatesMain[] = 
zclSampleLight_UiStatesMain:
        DB 254
        DB 1
        DATA16
        DW 4
        DW `??UI_ActionBackFromAppMenu::?relay`
        DATA8
        DB 0
        DB 254
        DATA16
        DW 4
        DW `??zclSampleLight_UiActionToggleLight::?relay`
//  240 {
//  241   /*  UI_STATE_BACK_FROM_APP_MENU  */   {UI_STATE_DEFAULT_MOVE,       UI_STATE_TOGGLE_LIGHT,  UI_KEY_SW_5_PRESSED, &UI_ActionBackFromAppMenu}, //do not change this line, except for the second item, which should point to the last entry in this menu
//  242   /*  UI_STATE_TOGGLE_LIGHT        */   {UI_STATE_BACK_FROM_APP_MENU, UI_STATE_DEFAULT_MOVE,  UI_KEY_SW_5_PRESSED, &zclSampleLight_UiActionToggleLight},
//  243 };
//  244 
//  245 #define LEVEL_CHANGED_BY_LEVEL_CMD  0
//  246 #define LEVEL_CHANGED_BY_ON_CMD     1
//  247 #define LEVEL_CHANGED_BY_OFF_CMD    2
//  248 
//  249 /*********************************************************************
//  250  * STATUS STRINGS
//  251  */
//  252 #ifdef LCD_SUPPORTED

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  253   const char sLightOn[]      = "   LIGHT ON     ";
sLightOn:
        DB "   LIGHT ON     "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  254   const char sLightOff[]     = "   LIGHT OFF    ";
sLightOff:
        DB "   LIGHT OFF    "
//  255   #ifdef ZCL_LEVEL_CTRL

        RSEG XDATA_I:XDATA:NOROOT(0)
//  256     char sLightLevel[]        = "   LEVEL ###    "; // displays level 1-254
sLightLevel:
        DATA8
        DS 17
        REQUIRE `?<Initializer for sLightLevel>`
        REQUIRE __INIT_XDATA_I
//  257   #endif
//  258 #endif
//  259 
//  260 /*********************************************************************
//  261  * REFERENCED EXTERNALS
//  262  */
//  263 extern int16 zdpExternalStateTaskID;
//  264 
//  265 /*********************************************************************
//  266  * ZCL General Profile Callback table
//  267  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  268 static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
zclSampleLight_CmdCallbacks:
        DATA8
        DS 32
        REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  269 {
//  270   zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
//  271   NULL,                                   // Identify Trigger Effect command
//  272   zclSampleLight_OnOffCB,                 // On/Off cluster commands
//  273   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  274   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  275   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  276 #ifdef ZCL_LEVEL_CTRL
//  277   zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  278   zclSampleLight_LevelControlMoveCB,        // Level Control Move command
//  279   zclSampleLight_LevelControlStepCB,        // Level Control Step command
//  280   zclSampleLight_LevelControlStopCB,        // Level Control Stop command
//  281 #endif
//  282 #ifdef ZCL_GROUPS
//  283   NULL,                                   // Group Response commands
//  284 #endif
//  285 #ifdef ZCL_SCENES
//  286   NULL,                                  // Scene Store Request command
//  287   NULL,                                  // Scene Recall Request command
//  288   NULL,                                  // Scene Response command
//  289 #endif
//  290 #ifdef ZCL_ALARMS
//  291   NULL,                                  // Alarm (Response) commands
//  292 #endif
//  293 #ifdef SE_UK_EXT
//  294   NULL,                                  // Get Event Log command
//  295   NULL,                                  // Publish Event Log command
//  296 #endif
//  297   NULL,                                  // RSSI Location command
//  298   NULL                                   // RSSI Location Response command
//  299 };
//  300 
//  301 /*********************************************************************
//  302  * @fn          zclSampleLight_Init
//  303  *
//  304  * @brief       Initialization function for the zclGeneral layer.
//  305  *
//  306  * @param       none
//  307  *
//  308  * @return      none
//  309  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  310 void zclSampleLight_Init( byte task_id )
zclSampleLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleLight_Init
        CODE
//  311 {
        FUNCALL zclSampleLight_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclSampleLight_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerCmdList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterVoltageWarningCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, bdb_RegisterCommissioningStatusCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, gp_RegisterCommissioningModeCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, gp_RegisterGPChangeChannelReqCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, UI_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, UI_UpdateLcd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
//  312   zclSampleLight_TaskID = task_id;
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      @DPTR,A
//  313 
//  314   // Set destination address to indirect
//  315   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV       DPTR,#zclSampleLight_DstAddr + 8
        CLR       A
        MOVX      @DPTR,A
//  316   zclSampleLight_DstAddr.endPoint = 0;
        INC       DPTR
        MOVX      @DPTR,A
//  317   zclSampleLight_DstAddr.addr.shortAddr = 0;
        MOV       DPTR,#zclSampleLight_DstAddr
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  318 
//  319   // Register the Simple Descriptor for this application
//  320   bdb_RegisterSimpleDescriptor( &zclSampleLight_SimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclSampleLight_SimpleDesc & 0xff
        MOV       R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  321 
//  322   // Register the ZCL General Cluster Library callback functions
//  323   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV       R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0x14
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  324 
//  325   // Register the application's attribute list
//  326   zclSampleLight_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
        LCALL     ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
//  327   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclSampleLight_Attrs & 0xff
        MOV       R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV       DPTR,#zclSampleLight_NumAttributes
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x14
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  328 
//  329 #ifdef ZCL_LEVEL_CTRL
//  330   zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_LevelLastLevel
        MOVX      @DPTR,A
//  331 #endif
//  332 
//  333   // Register the Application to receive the unprocessed Foundation command/response messages
//  334   zcl_registerForMsg( zclSampleLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  335 
//  336 #ifdef ZCL_DISCOVER
//  337   // Register the application's command list
//  338   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
        ; Setup parameters for call to function zcl_registerCmdList
        MOV       R4,#zclSampleLight_Cmds & 0xff
        MOV       R5,#(zclSampleLight_Cmds >> 8) & 0xff
        MOV       DPTR,#zclCmdsArraySize
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x14
        LCALL     `??zcl_registerCmdList::?relay`; Banked call to: zcl_registerCmdList
//  339 #endif
//  340 
//  341   // Register low voltage NV memory protection application callback
//  342   RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
        ; Setup parameters for call to function RegisterVoltageWarningCB
        MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
        MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
        LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
//  343 
//  344   // Register for all key events - This app will handle all key events
//  345   RegisterForKeys( zclSampleLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  346   
//  347   bdb_RegisterCommissioningStatusCB( zclSampleLight_ProcessCommissioningStatus );
        ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
        MOV       R2,#`??zclSampleLight_ProcessCommissioningStatus::?r` & 0xff
        MOV       R3,#(`??zclSampleLight_ProcessCommissioningStatus::?r` >> 8) & 0xff
        LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
//  348   
//  349   // Register for a test endpoint
//  350   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV       R2,#sampleLight_TestEp & 0xff
        MOV       R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  351 
//  352 #ifdef ZCL_DIAGNOSTIC
//  353   // Register the application's callback function to read/write attribute data.
//  354   // This is only required when the attribute data format is unknown to ZCL.
//  355   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  356 
//  357   if ( zclDiagnostic_InitStats() == ZSuccess )
//  358   {
//  359     // Here the user could start the timer to save Diagnostics to NV
//  360   }
//  361 #endif
//  362   
//  363 //GP_UPDATE  
//  364 #if (ZG_BUILD_RTR_TYPE)  
//  365   gp_RegisterCommissioningModeCB(gp_CommissioningMode);
        ; Setup parameters for call to function gp_RegisterCommissioningModeCB
        MOV       R2,#`??gp_CommissioningMode::?relay` & 0xff
        MOV       R3,#(`??gp_CommissioningMode::?relay` >> 8) & 0xff
        LCALL     `??gp_RegisterCommissioningModeCB::?relay`; Banked call to: gp_RegisterCommissioningModeCB
//  366   gp_RegisterGPChangeChannelReqCB(gp_ChangeChannelReq);
        ; Setup parameters for call to function gp_RegisterGPChangeChannelReqCB
        MOV       R2,#`??gp_ChangeChannelReq::?relay` & 0xff
        MOV       R3,#(`??gp_ChangeChannelReq::?relay` >> 8) & 0xff
        LCALL     `??gp_RegisterGPChangeChannelReqCB::?relay`; Banked call to: gp_RegisterGPChangeChannelReqCB
//  367 #endif
//  368   
//  369   zdpExternalStateTaskID = zclSampleLight_TaskID;
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       DPTR,#zdpExternalStateTaskID
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  370 
//  371   UI_Init(zclSampleLight_TaskID, SAMPLEAPP_LCD_AUTO_UPDATE_EVT, SAMPLEAPP_KEY_AUTO_REPEAT_EVT, &zclSampleLight_IdentifyTime, APP_TITLE, &zclSampleLight_UiUpdateLcd, zclSampleLight_UiStatesMain);
        ; Setup parameters for call to function UI_Init
        MOV       ?V0,#zclSampleLight_UiStatesMain & 0xff
        MOV       ?V1,#(zclSampleLight_UiStatesMain >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#`??zclSampleLight_UiUpdateLcd::?relay` & 0xff
        MOV       ?V1,#(`??zclSampleLight_UiUpdateLcd::?relay` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#`?<Constant "TI Sample Light">` & 0xff
        MOV       ?V1,#(`?<Constant "TI Sample Light">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#zclSampleLight_IdentifyTime & 0xff
        MOV       ?V1,#(zclSampleLight_IdentifyTime >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x20
        MOV       R5,#0x0
        MOV       R2,#0x10
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??UI_Init::?relay`; Banked call to: UI_Init
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  372 
//  373   UI_UpdateLcd();
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
//  374 }
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  375 
//  376 /*********************************************************************
//  377  * @fn          zclSample_event_loop
//  378  *
//  379  * @brief       Event Loop Processor for zclGeneral.
//  380  *
//  381  * @param       none
//  382  *
//  383  * @return      none
//  384  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  385 uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
zclSampleLight_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
        CODE
//  386 {
        FUNCALL zclSampleLight_event_loop, zclSampleLight_AdjustLightLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, UI_DeviceStateUpdated
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessIncomingMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, UI_UpdateLcd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, UI_MainStateMachine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  387   afIncomingMSGPacket_t *MSGpkt;
//  388 
//  389   (void)task_id;  // Intentionally unreferenced parameter
//  390 
//  391   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??zclSampleLight_event_loop_0
//  392   {
//  393     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
//  394     {
//  395       switch ( MSGpkt->hdr.event )
//  396       {
//  397         case ZCL_INCOMING_MSG:
//  398           // Incoming ZCL Foundation command/response messages
//  399           zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  400           break;
//  401 
//  402         case KEY_CHANGE:
//  403           zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  404           break;
//  405 
//  406         case ZDO_STATE_CHANGE:
//  407           UI_DeviceStateUpdated((devStates_t)(MSGpkt->hdr.status));
//  408           break;
//  409 
//  410         default:
//  411           break;
//  412       }
//  413 
//  414       // Release the memory
//  415       osal_msg_deallocate( (uint8 *)MSGpkt );
//  416     }
//  417 
//  418     // return unprocessed events
//  419     return (events ^ SYS_EVENT_MSG);
//  420     
//  421     if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
//  422   {
//  423     if ( zclSampleLight_IdentifyTime > 0 )
//  424       zclSampleLight_IdentifyTime--;
//  425     zclSampleLight_ProcessIdentifyTimeChange();
//  426 
//  427     return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
//  428   }
//  429   
//  430     // Discard unknown events
//  431   return 0;
//  432   }
//  433 
//  434 #ifdef ZCL_LEVEL_CTRL
//  435   if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
        MOV       A,R2
        ANL       A,#0x2
        JNZ       $+5
        LJMP      ??zclSampleLight_event_loop_1 & 0xFFFF
//  436   {
//  437     zclSampleLight_AdjustLightLevel();
        ; Setup parameters for call to function zclSampleLight_AdjustLightLevel
        LCALL     `??zclSampleLight_AdjustLightLevel::?relay`; Banked call to: zclSampleLight_AdjustLightLevel
//  438     return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
        MOV       A,R6
        XRL       A,#0x2
        LJMP      ??zclSampleLight_event_loop_2 & 0xFFFF
//  439   }
??zclSampleLight_event_loop_3:
        ; Setup parameters for call to function UI_DeviceStateUpdated
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??UI_DeviceStateUpdated::?relay`; Banked call to: UI_DeviceStateUpdated
??zclSampleLight_event_loop_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??zclSampleLight_event_loop_5 & 0xFFFF
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x34
        JZ        ??zclSampleLight_event_loop_6
        ADD       A,#0x74
        JZ        ??zclSampleLight_event_loop_7
        ADD       A,#-0x11
        JZ        ??zclSampleLight_event_loop_3
        SJMP      ??zclSampleLight_event_loop_4
??zclSampleLight_event_loop_6:
        ; Setup parameters for call to function zclSampleLight_ProcessIncomingMsg
        LCALL     `??zclSampleLight_ProcessIncomingMsg::?relay`; Banked call to: zclSampleLight_ProcessIncomingMsg
        SJMP      ??zclSampleLight_event_loop_4
??zclSampleLight_event_loop_7:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??zclSampleLight_event_loop_4
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V2,#bindingInClusters & 0xff
        MOV       ?V3,#(bindingInClusters >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       ?V2,#0x2
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V2,#0x4
        MOV       ?V3,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R1,#0x14
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        LJMP      ??zclSampleLight_event_loop_4 & 0xFFFF
??zclSampleLight_event_loop_5:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        SJMP      ??zclSampleLight_event_loop_8
//  440 #endif
//  441 
//  442 #if ZG_BUILD_ENDDEVICE_TYPE    
//  443   if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
//  444   {
//  445     bdb_ZedAttemptRecoverNwk();
//  446     return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
//  447   }
//  448 #endif
//  449 
//  450   if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
??zclSampleLight_event_loop_1:
        MOV       A,R2
        ANL       A,#0x10
        JZ        ??zclSampleLight_event_loop_9
//  451   {
//  452     UI_UpdateLcd();
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
//  453     return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
        MOV       A,R6
        XRL       A,#0x10
        SJMP      ??zclSampleLight_event_loop_2
//  454   }
//  455 
//  456   if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
??zclSampleLight_event_loop_9:
        MOV       A,R2
        ANL       A,#0x20
        JZ        ??zclSampleLight_event_loop_10
//  457   {
//  458     UI_MainStateMachine(UI_KEY_AUTO_PRESSED);
        ; Setup parameters for call to function UI_MainStateMachine
        MOV       R2,#-0x1
        MOV       R3,#-0x1
        LCALL     `??UI_MainStateMachine::?relay`; Banked call to: UI_MainStateMachine
//  459     return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
        MOV       A,R6
        XRL       A,#0x20
??zclSampleLight_event_loop_2:
        MOV       R2,A
        MOV       A,R7
??zclSampleLight_event_loop_8:
        MOV       R3,A
        SJMP      ??zclSampleLight_event_loop_11
//  460   }
//  461 
//  462   // Discard unknown events
//  463   return 0;
??zclSampleLight_event_loop_10:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclSampleLight_event_loop_11:
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  464 }
          CFI EndBlock cfiBlock1
//  465 
//  466 
//  467 /*********************************************************************
//  468  * @fn      zclSampleLight_HandleKeys
//  469  *
//  470  * @brief   Handles all key events for this device.
//  471  *
//  472  * @param   shift - true if in shift/alt.
//  473  * @param   keys - bit field for key events. Valid entries:
//  474  *                 HAL_KEY_SW_5
//  475  *                 HAL_KEY_SW_4
//  476  *                 HAL_KEY_SW_2
//  477  *                 HAL_KEY_SW_1
//  478  *
//  479  * @return  none
//  480  */
//  481 static void zclSampleLight_HandleKeys( byte shift, byte keys )
//  482 {
//  483 //  UI_MainStateMachine(keys);
//  484 	
//  485   zAddrType_t dstAddr;
//  486   
//  487   (void)shift;  // Intentionally unreferenced parameter
//  488 
//  489   if ( keys & HAL_KEY_SW_2 )
//  490   {
//  491     // Initiate an End Device Bind Request, this bind request will
//  492     // only use a cluster list that is important to binding.
//  493     dstAddr.addrMode = afAddr16Bit;
//  494     dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
//  495     ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  496                            SAMPLELIGHT_ENDPOINT,
//  497                            ZCL_HA_PROFILE_ID,
//  498                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  499                            0, NULL,   // No Outgoing clusters to bind
//  500                            TRUE );
//  501   }
//  502 
//  503   if ( keys & HAL_KEY_SW_3 )
//  504   {
//  505   }
//  506 
//  507   if ( keys & HAL_KEY_SW_4 )
//  508   {
//  509   }
//  510 }
//  511 
//  512 
//  513 /*********************************************************************
//  514  * @fn      zclSampleLight_ProcessIdentifyTimeChange
//  515  *
//  516  * @brief   Called to process any change to the IdentifyTime attribute.
//  517  *
//  518  * @param   none
//  519  *
//  520  * @return  none
//  521  */
//  522 static void zclSampleLight_ProcessIdentifyTimeChange( void )
//  523 {
//  524   if ( zclSampleLight_IdentifyTime > 0 )
//  525   {
//  526     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
//  527     HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
//  528   }
//  529   else
//  530   {
//  531     if ( zclSampleLight_OnOff )
//  532       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
//  533     else
//  534       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  535     osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
//  536   }
//  537 }
//  538 
//  539 
//  540 
//  541 
//  542 //GP_UPDATE
//  543 #if (ZG_BUILD_RTR_TYPE)
//  544 /*********************************************************************
//  545  * @fn      gp_CommissioningMode
//  546  *
//  547  * @brief   Callback that notifies the application that gp Proxy is entering 
//  548  *          into commissioning mode
//  549  *
//  550  * @param   isEntering - 
//  551  *
//  552  * @return  
//  553  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  554 static void gp_CommissioningMode(bool isEntering)
gp_CommissioningMode:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function gp_CommissioningMode
        CODE
//  555 {
        ; Saved register size: 0
        ; Auto size: 0
//  556   if(isEntering)
//  557   {
//  558     //Led on indicating enter commissioning mode
//  559   }
//  560   else
//  561   {
//  562     //Led off indicating enter commissioning mode
//  563   }
//  564 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock2
//  565 
//  566 
//  567 
//  568 //GP_UPDATE
//  569 /*********************************************************************
//  570  * @fn      gp_ChangeChannelReq
//  571  *
//  572  * @brief   Callback function to notify the application about a GP commissioning 
//  573  * request that will change the current channel for at most 
//  574  * gpBirectionalCommissioningChangeChannelTimeout ms
//  575  *
//  576  * @param   channel - Channel in which the commissioning will take place
//  577  *
//  578  * @return  TRUE to allow change channel, FALSE to do not allow
//  579  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  580 static uint8 gp_ChangeChannelReq(void)
gp_ChangeChannelReq:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function gp_ChangeChannelReq
        CODE
//  581 {
        ; Saved register size: 0
        ; Auto size: 0
//  582   bool allowChangeChannel = TRUE;
//  583   
//  584   //Check application state to decide if allow change channel or not
//  585   
//  586   return allowChangeChannel;
        MOV       R1,#0x1
        LJMP      ?BRET
//  587 }
          CFI EndBlock cfiBlock3
//  588 
//  589 #endif
//  590 
//  591 
//  592 /*********************************************************************
//  593  * @fn      zclSampleLight_ProcessCommissioningStatus
//  594  *
//  595  * @brief   Callback in which the status of the commissioning process are reported
//  596  *
//  597  * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
//  598  *
//  599  * @return  none
//  600  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  601 static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
zclSampleLight_ProcessCommissioningStatus:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zclSampleLight_ProcessCommissioningStatus
        CODE
//  602 {
        FUNCALL zclSampleLight_ProcessCommissioningStatus, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessCommissioningStatus, UI_UpdateComissioningStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  603   switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclSampleLight_ProcessCommissioningStatus_0
//  604   {
//  605     case BDB_COMMISSIONING_FORMATION:
//  606       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_ProcessCommissioningStatus_0
//  607       {
//  608         //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
//  609         bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
        ; Setup parameters for call to function bdb_StartCommissioning
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x2
        MOV       R1,A
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  610       }
//  611       else
//  612       {
//  613         //Want to try other channels?
//  614         //try with bdb_setChannelAttribute
//  615       }
//  616     break;
//  617     case BDB_COMMISSIONING_NWK_STEERING:
//  618       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  619       {
//  620         //YOUR JOB:
//  621         //We are on the nwk, what now?
//  622       }
//  623       else
//  624       {
//  625         //See the possible errors for nwk steering procedure
//  626         //No suitable networks found
//  627         //Want to try other channels?
//  628         //try with bdb_setChannelAttribute
//  629       }
//  630     break;
//  631     case BDB_COMMISSIONING_FINDING_BINDING:
//  632       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  633       {
//  634         //YOUR JOB:
//  635       }
//  636       else
//  637       {
//  638         //YOUR JOB:
//  639         //retry?, wait for user interaction?
//  640       }
//  641     break;
//  642     case BDB_COMMISSIONING_INITIALIZATION:
//  643       //Initialization notification can only be successful. Failure on initialization 
//  644       //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
//  645       
//  646       //YOUR JOB:
//  647       //We are on a network, what now?
//  648       
//  649     break;
//  650 #if ZG_BUILD_ENDDEVICE_TYPE    
//  651     case BDB_COMMISSIONING_PARENT_LOST:
//  652       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
//  653       {
//  654         //We did recover from losing parent
//  655       }
//  656       else
//  657       {
//  658         //Parent not found, attempt to rejoin again after a fixed delay
//  659         osal_start_timerEx(zclSampleLight_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
//  660       }
//  661     break;
//  662 #endif 
//  663   }
//  664   
//  665   UI_UpdateComissioningStatus(bdbCommissioningModeMsg);
??zclSampleLight_ProcessCommissioningStatus_0:
        ; Setup parameters for call to function UI_UpdateComissioningStatus
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??UI_UpdateComissioningStatus::?relay`; Banked call to: UI_UpdateComissioningStatus
//  666 }
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock4
//  667 
//  668 /*********************************************************************
//  669  * @fn      zclSampleLight_BasicResetCB
//  670  *
//  671  * @brief   Callback from the ZCL General Cluster Library
//  672  *          to set all the Basic Cluster attributes to default values.
//  673  *
//  674  * @param   none
//  675  *
//  676  * @return  none
//  677  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  678 static void zclSampleLight_BasicResetCB( void )
zclSampleLight_BasicResetCB:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zclSampleLight_BasicResetCB
        CODE
//  679 {
        FUNCALL zclSampleLight_BasicResetCB, zclSampleLight_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, zclSampleLight_UpdateLedState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, UI_UpdateLcd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  680   //Reset every attribute in all supported cluster to their default value.
//  681 
//  682   zclSampleLight_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
        LCALL     ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
//  683 
//  684   zclSampleLight_UpdateLedState();
        ; Setup parameters for call to function zclSampleLight_UpdateLedState
        LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
//  685 
//  686   // update the display
//  687   UI_UpdateLcd( ); 
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
//  688 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock5
//  689 
//  690 /*********************************************************************
//  691  * @fn      zclSampleLight_OnOffCB
//  692  *
//  693  * @brief   Callback from the ZCL General Cluster Library when
//  694  *          it received an On/Off Command for this application.
//  695  *
//  696  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  697  *
//  698  * @return  none
//  699  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  700 static void zclSampleLight_OnOffCB( uint8 cmd )
zclSampleLight_OnOffCB:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
        CODE
//  701 {
        FUNCALL zclSampleLight_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  702   // Turn on the light
//  703   if ( cmd == COMMAND_ON )
        MOV       A,#0x1
        XRL       A,R6
        JZ        ??zclSampleLight_OnOffCB_0
//  704     zclSampleLight_OnOff = LIGHT_ON;
//  705 
//  706   // Turn off the light
//  707   else if ( cmd == COMMAND_OFF )
        MOV       A,R1
        JZ        ??zclSampleLight_OnOffCB_1
//  708     zclSampleLight_OnOff = LIGHT_OFF;
//  709 
//  710   // Toggle the light
//  711   else
//  712   {
//  713     if ( zclSampleLight_OnOff == LIGHT_OFF )
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_OnOffCB_1
//  714       zclSampleLight_OnOff = LIGHT_ON;
??zclSampleLight_OnOffCB_0:
        MOV       DPTR,#zclSampleLight_OnOff
        MOV       A,#0x1
        SJMP      ??zclSampleLight_OnOffCB_2
//  715     else
//  716       zclSampleLight_OnOff = LIGHT_OFF;
??zclSampleLight_OnOffCB_1:
        MOV       DPTR,#zclSampleLight_OnOff
        CLR       A
??zclSampleLight_OnOffCB_2:
        MOVX      @DPTR,A
//  717   }
//  718 
//  719   // In this sample app, we use LED4 to simulate the Light
//  720   if ( zclSampleLight_OnOff == LIGHT_ON )
//  721     HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  722   else
//  723     HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,A
        MOV       R1,#0x8
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  724 }
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock6
//  725 
//  726 #ifdef ZCL_LEVEL_CTRL
//  727 /*********************************************************************
//  728  * @fn      zclSampleLight_TimeRateHelper
//  729  *
//  730  * @brief   Calculate time based on rate, and startup level state machine
//  731  *
//  732  * @param   newLevel - new level for current level
//  733  *
//  734  * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
//  735  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  736 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
zclSampleLight_TimeRateHelper:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zclSampleLight_TimeRateHelper
        CODE
//  737 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  738   uint32 diff;
//  739   uint32 newLevel32;
//  740 
//  741   // remember current and new level
//  742   zclSampleLight_NewLevel = newLevel;
        MOV       DPTR,#zclSampleLight_NewLevel
        MOVX      @DPTR,A
//  743   zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      A,@DPTR
        MOV       ?V0,A
        CLR       A
        MOV       ?V1,A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_MUL
        MOV       DPTR,#zclSampleLight_CurrentLevel32
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
//  744 
//  745   // calculate diff
//  746   newLevel32 = (uint32)1000 * newLevel;
        MOV       ?V4,R6
        CLR       A
        MOV       ?V5,A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?L_MUL
//  747   if ( zclSampleLight_LevelCurrentLevel > newLevel )
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        MOV       DPTR,#zclSampleLight_CurrentLevel32
        JNC       ??zclSampleLight_TimeRateHelper_0
//  748   {
//  749     diff = zclSampleLight_CurrentLevel32 - newLevel32;
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_SUB
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        MOV       ?V6,?V2
        MOV       ?V7,?V3
//  750     zclSampleLight_NewLevelUp = FALSE;  // moving down
        MOV       DPTR,#zclSampleLight_NewLevelUp
        CLR       A
        SJMP      ??zclSampleLight_TimeRateHelper_1
//  751   }
//  752   else
//  753   {
//  754     diff = newLevel32 - zclSampleLight_CurrentLevel32;
??zclSampleLight_TimeRateHelper_0:
        MOV       R0,#?V4
        LCALL     ?L_SUB_X
//  755     zclSampleLight_NewLevelUp = TRUE;   // moving up
        MOV       DPTR,#zclSampleLight_NewLevelUp
        MOV       A,#0x1
??zclSampleLight_TimeRateHelper_1:
        MOVX      @DPTR,A
//  756   }
//  757 
//  758   return ( diff );
        MOV       R2,?V4
        MOV       R3,?V5
        MOV       R4,?V6
        MOV       R5,?V7
        SJMP      ??Subroutine9_0
//  759 }
          CFI EndBlock cfiBlock7
//  760 
//  761 /*********************************************************************
//  762  * @fn      zclSampleLight_MoveBasedOnRate
//  763  *
//  764  * @brief   Calculate time based on rate, and startup level state machine
//  765  *
//  766  * @param   newLevel - new level for current level
//  767  * @param   rate16   - fixed point rate (e.g. 16.123)
//  768  *
//  769  * @return  none
//  770  */
//  771 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
//  772 {
//  773   uint32 diff;
//  774 
//  775   // determine how much time (in 10ths of seconds) based on the difference and rate
//  776   zclSampleLight_Rate32 = rate;
//  777   diff = zclSampleLight_TimeRateHelper( newLevel );
//  778   zclSampleLight_LevelRemainingTime = diff / rate;
//  779   if ( !zclSampleLight_LevelRemainingTime )
//  780   {
//  781     zclSampleLight_LevelRemainingTime = 1;
//  782   }
//  783 
//  784   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
//  785 }
//  786 
//  787 /*********************************************************************
//  788  * @fn      zclSampleLight_MoveBasedOnTime
//  789  *
//  790  * @brief   Calculate rate based on time, and startup level state machine
//  791  *
//  792  * @param   newLevel  - new level for current level
//  793  * @param   time      - in 10ths of seconds
//  794  *
//  795  * @return  none
//  796  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       DPTR,#__Constant_64
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x2
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock8
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine9_0:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  797 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
zclSampleLight_MoveBasedOnTime:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function zclSampleLight_MoveBasedOnTime
        CODE
//  798 {
        FUNCALL zclSampleLight_MoveBasedOnTime, zclSampleLight_TimeRateHelper
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_MoveBasedOnTime, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  799   uint16 diff;
//  800 
//  801   // determine rate (in units) based on difference and time
//  802   diff = zclSampleLight_TimeRateHelper( newLevel );
        ; Setup parameters for call to function zclSampleLight_TimeRateHelper
        LCALL     `??zclSampleLight_TimeRateHelper::?relay`; Banked call to: zclSampleLight_TimeRateHelper
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,?V4
        MOV       R1,?V5
//  803   zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??zclSampleLight_MoveBasedOnTime_0
        MOV       A,#-0x1
        XRL       A,R3
??zclSampleLight_MoveBasedOnTime_0:
        JNZ       ??zclSampleLight_MoveBasedOnTime_1
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,?V0
        CLR       C
        SUBB      A,R2
        JNC       ??zclSampleLight_MoveBasedOnTime_2
        MOV       DPTR,#zclSampleLight_LevelOffTransitionTime
        SJMP      ??zclSampleLight_MoveBasedOnTime_3
??zclSampleLight_MoveBasedOnTime_2:
        MOV       DPTR,#zclSampleLight_LevelOnTransitionTime
??zclSampleLight_MoveBasedOnTime_3:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??zclSampleLight_MoveBasedOnTime_4
        MOV       A,#-0x1
        XRL       A,R3
??zclSampleLight_MoveBasedOnTime_4:
        JNZ       ??CrossCallReturnLabel_6
        MOV       DPTR,#zclSampleLight_LevelOnOffTransitionTime
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??zclSampleLight_MoveBasedOnTime_5
        MOV       A,#-0x1
        XRL       A,R3
??zclSampleLight_MoveBasedOnTime_5:
        JZ        ??zclSampleLight_MoveBasedOnTime_6
??zclSampleLight_MoveBasedOnTime_1:
        MOV       A,R2
        ORL       A,R3
        JNZ       ??zclSampleLight_MoveBasedOnTime_7
??zclSampleLight_MoveBasedOnTime_6:
        MOV       R2,#0x1
        MOV       R3,#0x0
??zclSampleLight_MoveBasedOnTime_7:
        MOV       DPTR,#zclSampleLight_LevelRemainingTime
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  804   zclSampleLight_Rate32 = diff / time;
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ?US_DIV_MOD
        MOV       DPTR,#zclSampleLight_Rate32
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  805 
//  806   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        LJMP      ?Subroutine2 & 0xFFFF
//  807 }
          CFI EndBlock cfiBlock10
//  808 
//  809 /*********************************************************************
//  810  * @fn      zclSampleLight_GetTime
//  811  *
//  812  * @brief   Determine amount of time that MoveXXX will take to complete.
//  813  *
//  814  * @param   level = new level to move to
//  815  *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
//  816  *
//  817  * @return  none
//  818  */
//  819 static uint16 zclSampleLight_GetTime( uint8 newLevel, uint16 time )
//  820 {
//  821   // there is a hiearchy of the amount of time to use for transistioning
//  822   // check each one in turn. If none of defaults are set, then use fastest
//  823   // time possible.
//  824   if ( time == 0xFFFF )
//  825   {
//  826     // use On or Off Transition Time if set (not 0xffff)
//  827     if ( zclSampleLight_LevelCurrentLevel > newLevel )
//  828     {
//  829       time = zclSampleLight_LevelOffTransitionTime;
//  830     }
//  831     else
//  832     {
//  833       time = zclSampleLight_LevelOnTransitionTime;
//  834     }
//  835 
//  836     // else use OnOffTransitionTime if set (not 0xffff)
//  837     if ( time == 0xFFFF )
//  838     {
//  839       time = zclSampleLight_LevelOnOffTransitionTime;
//  840     }
//  841 
//  842     // else as fast as possible
//  843     if ( time == 0xFFFF )
//  844     {
//  845       time = 1;
//  846     }
//  847   }
//  848 
//  849   if ( time == 0 )
//  850   {
//  851     time = 1; // as fast as possible
//  852   }
//  853 
//  854   return ( time );
//  855 }
//  856 
//  857 /*********************************************************************
//  858  * @fn      zclSampleLight_DefaultMove
//  859  *
//  860  * @brief   We were turned on/off. Use default time to move to on or off.
//  861  *
//  862  * @param   zclSampleLight_OnOff - must be set prior to calling this function.
//  863  *
//  864  * @return  none
//  865  */
//  866 static void zclSampleLight_DefaultMove( uint8 OnOff )
//  867 {
//  868   uint8  newLevel;
//  869   uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
//  870   uint16 time;
//  871 
//  872   // if moving to on position, move to on level
//  873   if ( OnOff )
//  874   {
//  875     if (zclSampleLight_OnOff == LIGHT_OFF)
//  876     {
//  877       zclSampleLight_LevelCurrentLevel = ATTR_LEVEL_MIN_LEVEL;
//  878     }
//  879     
//  880     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
//  881     {
//  882       // The last Level (before going OFF) should be used)
//  883       newLevel = zclSampleLight_LevelLastLevel;
//  884     }
//  885     else
//  886     {
//  887       newLevel = zclSampleLight_LevelOnLevel;
//  888     }
//  889 
//  890     time = zclSampleLight_LevelOnTransitionTime;
//  891 
//  892   }
//  893   else
//  894   {
//  895     newLevel = ATTR_LEVEL_MIN_LEVEL;
//  896 
//  897     time = zclSampleLight_LevelOffTransitionTime;
//  898   }
//  899 
//  900   // else use OnOffTransitionTime if set (not 0xffff)
//  901   if ( time == 0xFFFF )
//  902   {
//  903     time = zclSampleLight_LevelOnOffTransitionTime;
//  904   }
//  905 
//  906   // else as fast as possible
//  907   if ( time == 0xFFFF )
//  908   {
//  909     time = 1;
//  910   }
//  911 
//  912   // calculate rate based on time (int 10ths) for full transition (1-254)
//  913   rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
//  914 
//  915   // start up state machine.
//  916   zclSampleLight_WithOnOff = TRUE;
//  917   zclSampleLight_MoveBasedOnRate( newLevel, rate );
//  918 }
//  919 
//  920 /*********************************************************************
//  921  * @fn      zclSampleLight_AdjustLightLevel
//  922  *
//  923  * @brief   Called each 10th of a second while state machine running
//  924  *
//  925  * @param   none
//  926  *
//  927  * @return  none
//  928  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  929 static void zclSampleLight_AdjustLightLevel( void )
zclSampleLight_AdjustLightLevel:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zclSampleLight_AdjustLightLevel
        CODE
//  930 {
        FUNCALL zclSampleLight_AdjustLightLevel, zclSampleLight_UpdateLedState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_AdjustLightLevel, UI_UpdateLcd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_AdjustLightLevel, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  931   // one tick (10th of a second) less
//  932   if ( zclSampleLight_LevelRemainingTime )
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ        ??zclSampleLight_AdjustLightLevel_0
//  933   {
//  934     --zclSampleLight_LevelRemainingTime;
//  935   }
//  936 
//  937   // no time left, done
//  938   if ( zclSampleLight_LevelRemainingTime == 0)
        MOV       DPTR,#zclSampleLight_LevelRemainingTime
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOVX      @DPTR,A
        DEC       R0
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOVX      @DPTR,A
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zclSampleLight_AdjustLightLevel_1
//  939   {
//  940     zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
??zclSampleLight_AdjustLightLevel_0:
        MOV       DPTR,#zclSampleLight_NewLevel
        MOVX      A,@DPTR
        SJMP      ??zclSampleLight_AdjustLightLevel_2
//  941   }
//  942 
//  943   // still time left, keep increment/decrementing
//  944   else
//  945   {
//  946     if ( zclSampleLight_NewLevelUp )
??zclSampleLight_AdjustLightLevel_1:
        MOV       DPTR,#zclSampleLight_NewLevelUp
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_Rate32
        MOV       R0,#?V0
        JZ        ??zclSampleLight_AdjustLightLevel_3
//  947     {
//  948       zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
        LCALL     ?L_MOV_X
        MOV       DPTR,#zclSampleLight_CurrentLevel32
        MOV       R0,#?V0
        LCALL     ?L_ADD_TO_X
        SJMP      ??zclSampleLight_AdjustLightLevel_4
//  949     }
//  950     else
//  951     {
//  952       zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
??zclSampleLight_AdjustLightLevel_3:
        LCALL     ?L_MOV_X
        MOV       DPTR,#zclSampleLight_CurrentLevel32
        MOV       R0,#?V0
        LCALL     ?L_SUB_FROM_X
//  953     }
//  954     zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
??zclSampleLight_AdjustLightLevel_4:
        MOV       DPTR,#zclSampleLight_CurrentLevel32
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_DIV_MOD
        MOV       A,?V0
??zclSampleLight_AdjustLightLevel_2:
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      @DPTR,A
//  955   }
//  956 
//  957   if (( zclSampleLight_LevelChangeCmd == LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
        MOV       DPTR,#zclSampleLight_LevelChangeCmd
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_AdjustLightLevel_5
        MOV       DPTR,#zclSampleLight_LevelOnLevel
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??zclSampleLight_AdjustLightLevel_5
//  958   {
//  959     zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_LevelLastLevel
        MOVX      @DPTR,A
//  960   }
//  961 
//  962   // also affect on/off
//  963   if ( zclSampleLight_WithOnOff )
??zclSampleLight_AdjustLightLevel_5:
        MOV       DPTR,#zclSampleLight_WithOnOff
        MOVX      A,@DPTR
        JZ        ??zclSampleLight_AdjustLightLevel_6
//  964   {
//  965     if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x2
        JC        ??zclSampleLight_AdjustLightLevel_7
//  966     {
//  967       zclSampleLight_OnOff = LIGHT_ON;
        MOV       DPTR,#zclSampleLight_OnOff
        MOV       A,#0x1
        SJMP      ??zclSampleLight_AdjustLightLevel_8
//  968     }
//  969     else
//  970     {
//  971       if (zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_ON_CMD)
??zclSampleLight_AdjustLightLevel_7:
        MOV       DPTR,#zclSampleLight_LevelChangeCmd
        MOVX      A,@DPTR
        XRL       A,#0x1
        MOV       DPTR,#zclSampleLight_OnOff
        JZ        ??zclSampleLight_AdjustLightLevel_9
//  972       {
//  973         zclSampleLight_OnOff = LIGHT_OFF;
        CLR       A
        MOVX      @DPTR,A
//  974       }
//  975       else
//  976       {
//  977         zclSampleLight_OnOff = LIGHT_ON;
//  978       }
//  979       
//  980       if (( zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
        MOV       DPTR,#zclSampleLight_LevelChangeCmd
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_AdjustLightLevel_10
        SJMP      ??zclSampleLight_AdjustLightLevel_6
??zclSampleLight_AdjustLightLevel_9:
        MOV       A,#0x1
        MOVX      @DPTR,A
??zclSampleLight_AdjustLightLevel_10:
        MOV       DPTR,#zclSampleLight_LevelOnLevel
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??zclSampleLight_AdjustLightLevel_6
//  981       {
//  982         zclSampleLight_LevelCurrentLevel = zclSampleLight_LevelLastLevel;
        MOV       DPTR,#zclSampleLight_LevelLastLevel
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
??zclSampleLight_AdjustLightLevel_8:
        MOVX      @DPTR,A
//  983       }
//  984     }
//  985   }
//  986 
//  987   zclSampleLight_UpdateLedState();
??zclSampleLight_AdjustLightLevel_6:
        ; Setup parameters for call to function zclSampleLight_UpdateLedState
        LCALL     `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
//  988   
//  989   // display light level as we go
//  990   UI_UpdateLcd( );
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
//  991 
//  992   // keep ticking away
//  993   if ( zclSampleLight_LevelRemainingTime )
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        JZ        ??zclSampleLight_AdjustLightLevel_11
//  994   {
//  995     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_64
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x2
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  996   }
//  997 }
??zclSampleLight_AdjustLightLevel_11:
        LJMP      ??Subroutine9_0 & 0xFFFF
          CFI EndBlock cfiBlock11
//  998 
//  999 /*********************************************************************
// 1000  * @fn      zclSampleLight_LevelControlMoveToLevelCB
// 1001  *
// 1002  * @brief   Callback from the ZCL General Cluster Library when
// 1003  *          it received a LevelControlMoveToLevel Command for this application.
// 1004  *
// 1005  * @param   pCmd - ZigBee command parameters
// 1006  *
// 1007  * @return  none
// 1008  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1009 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
zclSampleLight_LevelControlMoveToLevelCB:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlMoveToLevelCB
        CODE
// 1010 {
        FUNCALL zclSampleLight_LevelControlMoveToLevelCB, zclSampleLight_MoveBasedOnTime
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
// 1011   zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
        LCALL     ?Subroutine3 & 0xFFFF
// 1012 
// 1013   zclSampleLight_WithOnOff = pCmd->withOnOff;
??CrossCallReturnLabel_0:
        LCALL     ?Subroutine4 & 0xFFFF
// 1014   zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
??CrossCallReturnLabel_12:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclSampleLight_MoveBasedOnTime::?relay`; Banked call to: zclSampleLight_MoveBasedOnTime
// 1015 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlMoveToLevelCB
          CFI Conditional ??CrossCallReturnLabel_12
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zclSampleLight_LevelControlStepCB
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_WithOnOff
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine10_0:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlMoveCB
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zclSampleLight_LevelControlMoveToLevelCB
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond17) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond17) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond17) CFA_SP SP+-7
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zclSampleLight_LevelControlStepCB
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function zclSampleLight_MoveBasedOnTime
        ; Setup parameters for call to function zclSampleLight_MoveBasedOnTime
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19
// 1016 
// 1017 /*********************************************************************
// 1018  * @fn      zclSampleLight_LevelControlMoveCB
// 1019  *
// 1020  * @brief   Callback from the ZCL General Cluster Library when
// 1021  *          it received a LevelControlMove Command for this application.
// 1022  *
// 1023  * @param   pCmd - ZigBee command parameters
// 1024  *
// 1025  * @return  none
// 1026  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1027 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
zclSampleLight_LevelControlMoveCB:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlMoveCB
        CODE
// 1028 {
        FUNCALL zclSampleLight_LevelControlMoveCB, zclSampleLight_TimeRateHelper
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LevelControlMoveCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
// 1029   uint8 newLevel;
// 1030   uint32 rate;
// 1031 
// 1032   // convert rate from units per second to units per tick (10ths of seconds)
// 1033   // and move at that right up or down
// 1034   zclSampleLight_WithOnOff = pCmd->withOnOff;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_WithOnOff
        MOVX      @DPTR,A
// 1035 
// 1036   if ( pCmd->moveMode == LEVEL_MOVE_UP )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_LevelControlMoveCB_0
// 1037   {
// 1038     newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
        MOV       R4,#-0x2
        SJMP      ??zclSampleLight_LevelControlMoveCB_1
// 1039   }
// 1040   else
// 1041   {
// 1042     newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
??zclSampleLight_LevelControlMoveCB_0:
        MOV       R4,#0x1
// 1043   }
// 1044 
// 1045   zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
??zclSampleLight_LevelControlMoveCB_1:
        MOV       DPTR,#zclSampleLight_LevelChangeCmd
        CLR       A
        LCALL     ??Subroutine10_0 & 0xFFFF
// 1046 
// 1047   rate = (uint32)100 * pCmd->rate;
// 1048   zclSampleLight_MoveBasedOnRate( newLevel, rate );
??CrossCallReturnLabel_14:
        MOVX      A,@DPTR
        MOV       ?V4,A
        CLR       A
        MOV       ?V5,A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       DPTR,#__Constant_64
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?L_MUL
        MOV       DPTR,#zclSampleLight_Rate32
        MOV       R0,#?V4
        LCALL     ?L_MOV_TO_X
        ; Setup parameters for call to function zclSampleLight_TimeRateHelper
        MOV       A,R4
        MOV       R1,A
        LCALL     `??zclSampleLight_TimeRateHelper::?relay`; Banked call to: zclSampleLight_TimeRateHelper
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?UL_DIV_MOD
        MOV       DPTR,#zclSampleLight_LevelRemainingTime
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        JNZ       ??zclSampleLight_LevelControlMoveCB_2
        MOV       DPTR,#zclSampleLight_LevelRemainingTime
        MOV       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
??zclSampleLight_LevelControlMoveCB_2:
        ; Setup parameters for call to function osal_start_timerEx
        LJMP      ?Subroutine2 & 0xFFFF
// 1049 }
          CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function zclSampleLight_AdjustLightLevel
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zclSampleLight_AdjustLightLevel
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function zclSampleLight_LevelControlMoveCB
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOV       DPTR,#zclSampleLight_LevelRemainingTime
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24
// 1050 
// 1051 /*********************************************************************
// 1052  * @fn      zclSampleLight_LevelControlStepCB
// 1053  *
// 1054  * @brief   Callback from the ZCL General Cluster Library when
// 1055  *          it received an On/Off Command for this application.
// 1056  *
// 1057  * @param   pCmd - ZigBee command parameters
// 1058  *
// 1059  * @return  none
// 1060  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1061 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
zclSampleLight_LevelControlStepCB:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlStepCB
        CODE
// 1062 {
        FUNCALL zclSampleLight_LevelControlStepCB, zclSampleLight_MoveBasedOnTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1063   uint8 newLevel;
// 1064 
// 1065   // determine new level, but don't exceed boundaries
// 1066   if ( pCmd->stepMode == LEVEL_MOVE_UP )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        JNZ       ??zclSampleLight_LevelControlStepCB_0
// 1067   {
// 1068     if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
        MOVX      A,@DPTR
        ADD       A,R4
        MOV       R0,A
        CLR       A
        ADDC      A,#0x0
        MOV       R1,A
        MOV       A,R0
        SUBB      A,#-0x1
        MOV       A,R1
        SUBB      A,#0x0
        JC        ??zclSampleLight_LevelControlStepCB_1
// 1069     {
// 1070       newLevel = ATTR_LEVEL_MAX_LEVEL;
        MOV       R1,#-0x2
        SJMP      ??zclSampleLight_LevelControlStepCB_2
// 1071     }
// 1072     else
// 1073     {
// 1074       newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
??zclSampleLight_LevelControlStepCB_1:
        MOVX      A,@DPTR
        ADD       A,R4
        SJMP      ??zclSampleLight_LevelControlStepCB_3
// 1075     }
// 1076   }
// 1077   else
// 1078   {
// 1079     if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
??zclSampleLight_LevelControlStepCB_0:
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R4
        CLR       C
        SUBB      A,R0
        JC        ??zclSampleLight_LevelControlStepCB_4
// 1080     {
// 1081       newLevel = ATTR_LEVEL_MIN_LEVEL;
        MOV       R1,#0x1
        SJMP      ??zclSampleLight_LevelControlStepCB_2
// 1082     }
// 1083     else
// 1084     {
// 1085       newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
??zclSampleLight_LevelControlStepCB_4:
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R4
??zclSampleLight_LevelControlStepCB_3:
        MOV       R1,A
// 1086     }
// 1087   }
// 1088   
// 1089   zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
??zclSampleLight_LevelControlStepCB_2:
        LCALL     ?Subroutine3 & 0xFFFF
// 1090 
// 1091   // move to the new level
// 1092   zclSampleLight_WithOnOff = pCmd->withOnOff;
??CrossCallReturnLabel_1:
        INC       DPTR
        LCALL     ?Subroutine4 & 0xFFFF
// 1093   zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
??CrossCallReturnLabel_13:
        INC       DPTR
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL     `??zclSampleLight_MoveBasedOnTime::?relay`; Banked call to: zclSampleLight_MoveBasedOnTime
// 1094 }
          CFI EndBlock cfiBlock25
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock26

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function zclSampleLight_MoveBasedOnTime
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function zclSampleLight_MoveBasedOnTime
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zclSampleLight_LevelControlMoveToLevelCB
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond29) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond29) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond29) CFA_SP SP+-7
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zclSampleLight_LevelControlStepCB
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlMoveToLevelCB
          CFI Conditional ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zclSampleLight_LevelControlStepCB
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        MOV       DPTR,#zclSampleLight_LevelChangeCmd
        CLR       A
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35
// 1095 
// 1096 /*********************************************************************
// 1097  * @fn      zclSampleLight_LevelControlStopCB
// 1098  *
// 1099  * @brief   Callback from the ZCL General Cluster Library when
// 1100  *          it received an Level Control Stop Command for this application.
// 1101  *
// 1102  * @param   pCmd - ZigBee command parameters
// 1103  *
// 1104  * @return  none
// 1105  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1106 static void zclSampleLight_LevelControlStopCB( void )
zclSampleLight_LevelControlStopCB:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function zclSampleLight_LevelControlStopCB
        CODE
// 1107 {
        FUNCALL zclSampleLight_LevelControlStopCB, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1108   // stop immediately
// 1109   osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x2
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1110   zclSampleLight_LevelRemainingTime = 0;
        MOV       DPTR,#zclSampleLight_LevelRemainingTime
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1111 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock36
// 1112 #endif
// 1113 
// 1114 /*********************************************************************
// 1115  * @fn      zclSampleApp_BatteryWarningCB
// 1116  *
// 1117  * @brief   Called to handle battery-low situation.
// 1118  *
// 1119  * @param   voltLevel - level of severity
// 1120  *
// 1121  * @return  none
// 1122  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1123 void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
zclSampleApp_BatteryWarningCB:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function zclSampleApp_BatteryWarningCB
        CODE
// 1124 {
        ; Saved register size: 0
        ; Auto size: 0
// 1125   if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
// 1126   {
// 1127     // Send warning message to the gateway and blink LED
// 1128   }
// 1129   else if ( voltLevel == VOLT_LEVEL_BAD )
// 1130   {
// 1131     // Shut down the system
// 1132   }
// 1133 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock37
// 1134 
// 1135 /******************************************************************************
// 1136  *
// 1137  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1138  *
// 1139  *****************************************************************************/
// 1140 
// 1141 /*********************************************************************
// 1142  * @fn      zclSampleLight_ProcessIncomingMsg
// 1143  *
// 1144  * @brief   Process ZCL Foundation incoming message
// 1145  *
// 1146  * @param   pInMsg - pointer to the received message
// 1147  *
// 1148  * @return  none
// 1149  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1150 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
zclSampleLight_ProcessIncomingMsg:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIncomingMsg
        CODE
// 1151 {
        FUNCALL zclSampleLight_ProcessIncomingMsg, zclSampleLight_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIncomingMsg, zclSampleLight_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIncomingMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1152   switch ( pInMsg->zclHdr.commandID )
        MOV       A,R2
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclSampleLight_ProcessIncomingMsg_0
        ADD       A,#-0x3
        JZ        ??zclSampleLight_ProcessIncomingMsg_1
        ADD       A,#-0x9
        JZ        ??zclSampleLight_ProcessIncomingMsg_2
        ADD       A,#-0x5
        JZ        ??zclSampleLight_ProcessIncomingMsg_3
        ADD       A,#-0x2
        JZ        ??zclSampleLight_ProcessIncomingMsg_3
        ADD       A,#-0x2
        JZ        ??zclSampleLight_ProcessIncomingMsg_4
        SJMP      ??zclSampleLight_ProcessIncomingMsg_5
// 1153   {
// 1154 #ifdef ZCL_READ
// 1155     case ZCL_CMD_READ_RSP:
// 1156       zclSampleLight_ProcessInReadRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_0:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclSampleLight_ProcessIncomingMsg_5
        INC       R0
        SJMP      ??CrossCallReturnLabel_10
// 1157       break;
// 1158 #endif
// 1159 #ifdef ZCL_WRITE
// 1160     case ZCL_CMD_WRITE_RSP:
// 1161       zclSampleLight_ProcessInWriteRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_1:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_11:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclSampleLight_ProcessIncomingMsg_5
        INC       R0
        SJMP      ??CrossCallReturnLabel_11
// 1162       break;
// 1163 #endif
// 1164     case ZCL_CMD_CONFIG_REPORT:
// 1165     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1166     case ZCL_CMD_READ_REPORT_CFG:
// 1167     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1168     case ZCL_CMD_REPORT:
// 1169       //bdb_ProcessIncomingReportingMsg( pInMsg );
// 1170       break;
// 1171 
// 1172     case ZCL_CMD_DEFAULT_RSP:
// 1173       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1174       break;
// 1175 #ifdef ZCL_DISCOVER
// 1176     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1177       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_3:
        ; Setup parameters for call to function zclSampleLight_ProcessInDiscCmdsRspCmd
// 1178       break;
// 1179 
// 1180     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1181       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
        ; Setup parameters for call to function zclSampleLight_ProcessInDiscCmdsRspCmd
        LCALL     `??zclSampleLight_ProcessInDiscCmdsRspCmd::?rela`; Banked call to: zclSampleLight_ProcessInDiscCmdsRspCmd
// 1182       break;
        SJMP      ??zclSampleLight_ProcessIncomingMsg_5
// 1183 
// 1184     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1185       zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_2:
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JNC       ??zclSampleLight_ProcessIncomingMsg_5
        INC       R2
        SJMP      ??CrossCallReturnLabel_16
// 1186       break;
// 1187 
// 1188     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1189       zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
??zclSampleLight_ProcessIncomingMsg_4:
        LCALL     ?Subroutine6 & 0xFFFF
// 1190       break;
// 1191 #endif
// 1192     default:
// 1193       break;
// 1194   }
??CrossCallReturnLabel_17:
        SJMP      ??zclSampleLight_ProcessIncomingMsg_6
??zclSampleLight_ProcessIncomingMsg_7:
        INC       R2
??zclSampleLight_ProcessIncomingMsg_6:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleLight_ProcessIncomingMsg_7
// 1195 
// 1196   if ( pInMsg->attrCmd )
??zclSampleLight_ProcessIncomingMsg_5:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleLight_ProcessIncomingMsg_8
// 1197     osal_mem_free( pInMsg->attrCmd );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1198 }
??zclSampleLight_ProcessIncomingMsg_8:
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock38

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOV       R0,#0x0
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        MOV       DPL,R0
        MOV       DPH,R1
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function zclSampleLight_ProcessInDiscCmdsRspCmd
          CFI Conditional ??CrossCallReturnLabel_15
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function zclSampleLight_ProcessIncomingMsg
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker48 Using cfiCommon1
          CFI (cfiPicker48) NoFunction
          CFI (cfiPicker48) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#0x0
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiPicker48
// 1199 
// 1200 #ifdef ZCL_READ
// 1201 /*********************************************************************
// 1202  * @fn      zclSampleLight_ProcessInReadRspCmd
// 1203  *
// 1204  * @brief   Process the "Profile" Read Response Command
// 1205  *
// 1206  * @param   pInMsg - incoming message to process
// 1207  *
// 1208  * @return  none
// 1209  */
// 1210 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1211 {
// 1212   zclReadRspCmd_t *readRspCmd;
// 1213   uint8 i;
// 1214 
// 1215   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1216   for (i = 0; i < readRspCmd->numAttr; i++)
// 1217   {
// 1218     // Notify the originator of the results of the original read attributes
// 1219     // attempt and, for each successfull request, the value of the requested
// 1220     // attribute
// 1221   }
// 1222 
// 1223   return ( TRUE );
// 1224 }
// 1225 #endif // ZCL_READ
// 1226 
// 1227 #ifdef ZCL_WRITE
// 1228 /*********************************************************************
// 1229  * @fn      zclSampleLight_ProcessInWriteRspCmd
// 1230  *
// 1231  * @brief   Process the "Profile" Write Response Command
// 1232  *
// 1233  * @param   pInMsg - incoming message to process
// 1234  *
// 1235  * @return  none
// 1236  */
// 1237 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1238 {
// 1239   zclWriteRspCmd_t *writeRspCmd;
// 1240   uint8 i;
// 1241 
// 1242   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1243   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1244   {
// 1245     // Notify the device of the results of the its original write attributes
// 1246     // command.
// 1247   }
// 1248 
// 1249   return ( TRUE );
// 1250 }
// 1251 #endif // ZCL_WRITE
// 1252 
// 1253 /*********************************************************************
// 1254  * @fn      zclSampleLight_ProcessInDefaultRspCmd
// 1255  *
// 1256  * @brief   Process the "Profile" Default Response Command
// 1257  *
// 1258  * @param   pInMsg - incoming message to process
// 1259  *
// 1260  * @return  none
// 1261  */
// 1262 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1263 {
// 1264   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1265 
// 1266   // Device is notified of the Default Response command.
// 1267   (void)pInMsg;
// 1268 
// 1269   return ( TRUE );
// 1270 }
// 1271 
// 1272 #ifdef ZCL_DISCOVER
// 1273 /*********************************************************************
// 1274  * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
// 1275  *
// 1276  * @brief   Process the Discover Commands Response Command
// 1277  *
// 1278  * @param   pInMsg - incoming message to process
// 1279  *
// 1280  * @return  none
// 1281  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1282 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleLight_ProcessInDiscCmdsRspCmd:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function zclSampleLight_ProcessInDiscCmdsRspCmd
        CODE
// 1283 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1284   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1285   uint8 i;
// 1286 
// 1287   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        LCALL     ??Subroutine11_0 & 0xFFFF
// 1288   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
??CrossCallReturnLabel_15:
        SJMP      ??zclSampleLight_ProcessInDiscCmdsRspCmd_0
??zclSampleLight_ProcessInDiscCmdsRspCmd_1:
        INC       R2
??zclSampleLight_ProcessInDiscCmdsRspCmd_0:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleLight_ProcessInDiscCmdsRspCmd_1
// 1289   {
// 1290     // Device is notified of the result of its attribute discovery command.
// 1291   }
// 1292 
// 1293   return ( TRUE );
        MOV       R1,#0x1
          CFI EndBlock cfiBlock49
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
// 1294 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock50
// 1295 
// 1296 /*********************************************************************
// 1297  * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
// 1298  *
// 1299  * @brief   Process the "Profile" Discover Attributes Response Command
// 1300  *
// 1301  * @param   pInMsg - incoming message to process
// 1302  *
// 1303  * @return  none
// 1304  */
// 1305 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1306 {
// 1307   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1308   uint8 i;
// 1309 
// 1310   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1311   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1312   {
// 1313     // Device is notified of the result of its attribute discovery command.
// 1314   }
// 1315 
// 1316   return ( TRUE );
// 1317 }
// 1318 
// 1319 /*********************************************************************
// 1320  * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
// 1321  *
// 1322  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1323  *
// 1324  * @param   pInMsg - incoming message to process
// 1325  *
// 1326  * @return  none
// 1327  */
// 1328 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1329 {
// 1330   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1331   uint8 i;
// 1332 
// 1333   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1334   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1335   {
// 1336     // Device is notified of the result of its attribute discovery command.
// 1337   }
// 1338 
// 1339   return ( TRUE );
// 1340 }
// 1341 #endif // ZCL_DISCOVER
// 1342 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1343 void zclSampleLight_UiActionToggleLight(uint16 keys)
zclSampleLight_UiActionToggleLight:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function zclSampleLight_UiActionToggleLight
        CODE
// 1344 {
        FUNCALL zclSampleLight_UiActionToggleLight, zclSampleLight_OnOffCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1345   zclSampleLight_OnOffCB(COMMAND_TOGGLE);
        ; Setup parameters for call to function zclSampleLight_OnOffCB
        MOV       R1,#0x2
        LCALL     `??zclSampleLight_OnOffCB::?relay`; Banked call to: zclSampleLight_OnOffCB
// 1346 }
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock51
// 1347 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1348 void zclSampleLight_UpdateLedState(void)
zclSampleLight_UpdateLedState:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function zclSampleLight_UpdateLedState
        CODE
// 1349 {
        FUNCALL zclSampleLight_UpdateLedState, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_UpdateLedState, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1350   // set the LED1 based on light (on or off)
// 1351   if ( zclSampleLight_OnOff == LIGHT_ON )
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclSampleLight_UpdateLedState_0
// 1352   {
// 1353     HalLedSet ( UI_LED_APP, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        SJMP      ??zclSampleLight_UpdateLedState_1
// 1354   }
// 1355   else
// 1356   {
// 1357     HalLedSet ( UI_LED_APP, HAL_LED_MODE_OFF );
??zclSampleLight_UpdateLedState_0:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
??zclSampleLight_UpdateLedState_1:
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1358   }
// 1359 }
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock52
// 1360 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1361 void zclSampleLight_UiUpdateLcd(uint8 UiState, char * line[3])
zclSampleLight_UiUpdateLcd:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function zclSampleLight_UiUpdateLcd
        CODE
// 1362 {
        FUNCALL zclSampleLight_UiUpdateLcd, zclHA_uint8toa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1363 #ifdef LCD_SUPPORTED
// 1364 #ifdef ZCL_LEVEL_CTRL
// 1365   zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[9] );
        ; Setup parameters for call to function zclHA_uint8toa
        MOV       R2,#(sLightLevel + 9) & 0xff
        MOV       R3,#((sLightLevel + 9) >> 8) & 0xff
        MOV       DPTR,#zclSampleLight_LevelCurrentLevel
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclHA_uint8toa::?relay`; Banked call to: zclHA_uint8toa
// 1366   line[0] = (char *)sLightLevel;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#sLightLevel & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(sLightLevel >> 8) & 0xff
        MOVX      @DPTR,A
// 1367 #endif // ZCL_LEVEL_CTRL
// 1368   line[1] = (char *)(zclSampleLight_OnOff ? sLightOn : sLightOff);
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        JZ        ??zclSampleLight_UiUpdateLcd_0
        MOV       R0,#sLightOn & 0xff
        MOV       R1,#(sLightOn >> 8) & 0xff
        SJMP      ??zclSampleLight_UiUpdateLcd_1
??zclSampleLight_UiUpdateLcd_0:
        MOV       R0,#sLightOff & 0xff
        MOV       R1,#(sLightOff >> 8) & 0xff
??zclSampleLight_UiUpdateLcd_1:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1369   line[2] = "< TOGGLE LIGHT >";
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#`?<Constant "< TOGGLE LIGHT >">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "< TOGGLE LIGHT >">` >> 8) & 0xff
        MOVX      @DPTR,A
// 1370 #endif
// 1371 }
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock53

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bindingInClusters>`:
        DATA16
        DW 6
        DW 8

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 20
        DB 0
        DATA16
        DW zclSampleLight_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sLightLevel>`:
        DB "   LEVEL ###    "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_CmdCallbacks>`:
        DATA16
        DW `??zclSampleLight_BasicResetCB::?relay`
        DW 0H
        DW `??zclSampleLight_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW `??zclSampleLight_LevelControlMoveToLevelCB::?re`
        DW `??zclSampleLight_LevelControlMoveCB::?relay`
        DW `??zclSampleLight_LevelControlStepCB::?relay`
        DW `??zclSampleLight_LevelControlStopCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_CommissioningMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_CommissioningMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_ChangeChannelReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_ChangeChannelReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessCommissioningStatus::?r`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessCommissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_TimeRateHelper::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_TimeRateHelper

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_MoveBasedOnTime::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_MoveBasedOnTime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_AdjustLightLevel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_AdjustLightLevel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LevelControlMoveToLevelCB::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LevelControlMoveToLevelCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LevelControlMoveCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LevelControlMoveCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LevelControlStepCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LevelControlStepCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LevelControlStopCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LevelControlStopCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleApp_BatteryWarningCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleApp_BatteryWarningCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessIncomingMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessIncomingMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessInDiscCmdsRspCmd::?rela`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessInDiscCmdsRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_UiActionToggleLight::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_UiActionToggleLight

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_UpdateLedState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_UpdateLedState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_UiUpdateLcd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_UiUpdateLcd

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TI Sample Light">`:
        DB "TI Sample Light"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "< TOGGLE LIGHT >">`:
        DB "< TOGGLE LIGHT >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        END
// 1372 
// 1373 /****************************************************************************
// 1374 ****************************************************************************/
// 1375 
// 1376 
// 
// 1 694 bytes in segment BANKED_CODE
//   120 bytes in segment BANK_RELAYS
//    60 bytes in segment XDATA_I
//    60 bytes in segment XDATA_ID
//    87 bytes in segment XDATA_ROM_C
//    27 bytes in segment XDATA_Z
// 
//   180 bytes of CODE     memory
//    79 bytes of CONST    memory (+ 8 bytes shared)
// 1 694 bytes of HUGECODE memory
//    87 bytes of XDATA    memory
//
//Errors: none
//Warnings: 4
