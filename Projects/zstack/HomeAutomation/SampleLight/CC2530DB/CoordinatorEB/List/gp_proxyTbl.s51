///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              19/Apr/2021  17:59:54
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack 3.0.2\Components\stack\GP\gp_proxyTbl.c
//    Command line       =  
//        -f C:\users\slavko\Temp\EW6976.tmp ("C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Components\stack\GP\gp_proxyTbl.c" -D BDB_REPORTING -D SECURE=1
//        -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK
//        -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
//        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -lC
//        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\gp_proxyTbl.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME gp_proxyTbl

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?V7
        EXTERN ?V11
        EXTERN ?ADD_XSTACK_DISP0_16
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_AND_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_DIV_MOD
        EXTERN ?US_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??gp_CheckAnnouncedDevice::?relay`
        FUNCTION `??gp_CheckAnnouncedDevice::?relay`,0203H
        PUBLIC `??gp_PairingUpdateProxyTlb::?relay`
        FUNCTION `??gp_PairingUpdateProxyTlb::?relay`,0203H
        FUNCTION `??gp_PopulateProxyTblEntry::?relay`,0203H
        PUBLIC `??gp_UpdateProxyTlb::?relay`
        FUNCTION `??gp_UpdateProxyTlb::?relay`,0203H
        FUNCTION `??gp_pairingSetProxyTblOptions::?relay`,0203H
        PUBLIC `??pt_ZclReadGetProxyEntry::?relay`
        FUNCTION `??pt_ZclReadGetProxyEntry::?relay`,0203H
        FUNCTION `??pt_addSinkGroup::?relay`,0203H
        FUNCTION `??pt_updateLightweightUnicastSink::?relay`,0203H
        PUBLIC `??zclGpp_ReadWriteAttrCB::?relay`
        FUNCTION `??zclGpp_ReadWriteAttrCB::?relay`,0203H
        PUBWEAK __Constant_10000
        PUBLIC aliasConflictAnnce
        PUBLIC gp_CheckAnnouncedDevice
        FUNCTION gp_CheckAnnouncedDevice,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        PUBLIC gp_PairingUpdateProxyTlb
        FUNCTION gp_PairingUpdateProxyTlb,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 95, STACK
        FUNCTION gp_PopulateProxyTblEntry,0a1203H
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC gp_UpdateProxyTlb
        FUNCTION gp_UpdateProxyTlb,0a1203H
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 279, STACK
        FUNCTION gp_pairingSetProxyTblOptions,080203H
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC pt_ZclReadGetProxyEntry
        FUNCTION pt_ZclReadGetProxyEntry,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 173, STACK
        FUNCTION pt_addSinkGroup,0a1203H
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 148, STACK
        FUNCTION pt_updateLightweightUnicastSink,0a1203H
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 168, STACK
        PUBLIC zclGpp_ReadWriteAttrCB
        FUNCTION zclGpp_ReadWriteAttrCB,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 14, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
NLME_ReportAddressConflict SYMBOL "NLME_ReportAddressConflict"
`??NLME_ReportAddressConflict::?relay` SYMBOL "?relay", NLME_ReportAddressConflict
NLME_SendNetworkStatus SYMBOL "NLME_SendNetworkStatus"
`??NLME_SendNetworkStatus::?relay` SYMBOL "?relay", NLME_SendNetworkStatus
gp_ResetProxyBasicTblEntry SYMBOL "gp_ResetProxyBasicTblEntry"
`??gp_ResetProxyBasicTblEntry::?relay` SYMBOL "?relay", gp_ResetProxyBasicTblEntry
gp_getProxyTableByIndex SYMBOL "gp_getProxyTableByIndex"
`??gp_getProxyTableByIndex::?relay` SYMBOL "?relay", gp_getProxyTableByIndex
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
gp_CheckAnnouncedDevice SYMBOL "gp_CheckAnnouncedDevice"
`??gp_CheckAnnouncedDevice::?relay` SYMBOL "?relay", gp_CheckAnnouncedDevice
gp_PairingUpdateProxyTlb SYMBOL "gp_PairingUpdateProxyTlb"
`??gp_PairingUpdateProxyTlb::?relay` SYMBOL "?relay", gp_PairingUpdateProxyTlb
gp_UpdateProxyTlb   SYMBOL "gp_UpdateProxyTlb"
`??gp_UpdateProxyTlb::?relay` SYMBOL "?relay", gp_UpdateProxyTlb
pt_ZclReadGetProxyEntry SYMBOL "pt_ZclReadGetProxyEntry"
`??pt_ZclReadGetProxyEntry::?relay` SYMBOL "?relay", pt_ZclReadGetProxyEntry
zclGpp_ReadWriteAttrCB SYMBOL "zclGpp_ReadWriteAttrCB"
`??zclGpp_ReadWriteAttrCB::?relay` SYMBOL "?relay", zclGpp_ReadWriteAttrCB

        EXTERN `??NLME_ReportAddressConflict::?relay`
        FUNCTION `??NLME_ReportAddressConflict::?relay`,00H
        EXTERN `??NLME_SendNetworkStatus::?relay`
        FUNCTION `??NLME_SendNetworkStatus::?relay`,00H
        EXTERN `??gp_ResetProxyBasicTblEntry::?relay`
        FUNCTION `??gp_ResetProxyBasicTblEntry::?relay`,00H
        EXTERN `??gp_getProxyTableByIndex::?relay`
        FUNCTION `??gp_getProxyTableByIndex::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN NLME_ReportAddressConflict
        FUNCTION NLME_ReportAddressConflict,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SendNetworkStatus
        FUNCTION NLME_SendNetworkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN gp_ResetProxyBasicTblEntry
        FUNCTION gp_ResetProxyBasicTblEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_TaskID
        EXTERN gp_getProxyTableByIndex
        FUNCTION gp_getProxyTableByIndex,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 279, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 279, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack 3.0.2\Components\stack\GP\gp_proxyTbl.c
//    1 /**************************************************************************************************
//    2   Filename:       gp_proxyTbl.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the implementation of the cGP stub.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 
//   41 
//   42 /*********************************************************************
//   43  * INCLUDES
//   44  */
//   45    
//   46 #include "ZGlobals.h"
//   47 #include "ZDObject.h"
//   48 #include "nwk_util.h"   
//   49 #include "ZComDef.h"
//   50 #include "cGP_stub.h"
//   51 #include "gp_common.h"
//   52 #include "gp_interface.h"
//   53 #include "zcl_green_power.h"
//   54 #include "OSAL.h"
//   55 
//   56 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//   57    
//   58  /*********************************************************************
//   59  * MACROS
//   60  */ 
//   61 
//   62  /*********************************************************************
//   63  * CONSTANTS
//   64  */
//   65 
//   66 /*********************************************************************
//   67  * TYPEDEFS
//   68  */
//   69    
//   70  /*********************************************************************
//   71  * GLOBAL VARIABLES
//   72  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   73 ZDO_DeviceAnnce_t aliasConflictAnnce;
aliasConflictAnnce:
        DS 11
        REQUIRE __INIT_XDATA_Z
//   74 
//   75  /*********************************************************************
//   76  * EXTERNAL VARIABLES
//   77  */
//   78 
//   79 /*********************************************************************
//   80  * EXTERNAL FUNCTIONS
//   81  */
//   82 
//   83 /*********************************************************************
//   84  * LOCAL VARIABLES
//   85  */
//   86 
//   87  /*********************************************************************
//   88  * LOCAL FUNCTIONS
//   89  */
//   90 static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen );
//   91 static uint8 pt_getAlias( uint8* pNew );
//   92 static uint8 pt_getSecurity( uint8* pNew );
//   93 static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew );
//   94 static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink );
//   95 static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr );
//   96 static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew );
//   97 
//   98 /*********************************************************************
//   99  * PUBLIC FUNCTIONS
//  100  *********************************************************************/
//  101 
//  102 /*********************************************************************
//  103  * @fn          pt_ZclReadGetProxyEntry
//  104  *
//  105  * @brief       Populate the given item data
//  106  *
//  107  * @param       nvId - NV entry to read
//  108  *              pData - Pointer to OTA message payload
//  109  *              len - Lenght of the payload
//  110  *
//  111  * @return
//  112  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  113 uint8 pt_ZclReadGetProxyEntry( uint16 nvId, uint8* pData, uint8* len )
pt_ZclReadGetProxyEntry:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
        CODE
//  114 {
        FUNCALL pt_ZclReadGetProxyEntry, gp_getProxyTableByIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 173, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 173, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 173, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 173, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 173, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 173, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 173, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 173, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 173, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 173, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 173, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 173, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 173, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 173, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 173, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 173, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 172, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 172, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 173, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 173, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 173, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 173, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 146
        MOV       A,#0x6e
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
        MOV       ?V12,R4
        MOV       ?V13,R5
//  115   uint8  freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
        MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
        MOV       A,#-0x78
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0xa
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  116   uint8  currEntry[PROXY_TBL_ENTRY_LEN];
//  117   uint8  gpdEntry[PROXY_TBL_ENTRY_LEN];
//  118   uint8  gpdEntryLen = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  119   uint8  status;
//  120   uint16 options;
//  121 
//  122   status = gp_getProxyTableByIndex( nvId, currEntry );
        ; Setup parameters for call to function gp_getProxyTableByIndex
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP102_8
        LCALL     ?Subroutine3 & 0xFFFF
//  123 
//  124   // if FAIL or Empty
//  125   if ( ( status == NV_OPER_FAILED ) || ( status == NV_INVALID_DATA ) )
??CrossCallReturnLabel_5:
        JZ        ??pt_ZclReadGetProxyEntry_0
        MOV       A,#0xd
        XRL       A,R6
        JNZ       ??pt_ZclReadGetProxyEntry_1
//  126   {
//  127     // FAIL
//  128     return status;
??pt_ZclReadGetProxyEntry_0:
        LJMP      ??pt_ZclReadGetProxyEntry_2 & 0xFFFF
//  129   }
//  130 
//  131   osal_memcpy( &gpdEntry[gpdEntryLen], &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
??pt_ZclReadGetProxyEntry_1:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       ?V2,#0x0
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 173)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x4a
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  132   osal_memcpy( &options, &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 173)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  133   gpdEntryLen += sizeof ( uint16 );
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,#0x2
        MOVX      @DPTR,A
//  134   
//  135   // Options bitfield
//  136   // If Application Id bitfield is 0b000
//  137   if( GP_IS_APPLICATION_ID_GPD( options ) )
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R0,A
        JNZ       ??pt_ZclReadGetProxyEntry_3
//  138   {        
//  139     // Populate GPD ID
//  140     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x4
        MOV       A,#0xe
        SJMP      ??pt_ZclReadGetProxyEntry_4
          CFI CFA_XSP16 add(XSP16, 170)
//  141   }
//  142   // If Application Id bitfield is 0b010
//  143   else if( GP_IS_APPLICATION_ID_IEEE( options ) )
??pt_ZclReadGetProxyEntry_3:
        MOV       A,#0x2
        XRL       A,R0
        JNZ       ??pt_ZclReadGetProxyEntry_5
//  144   {   
//  145     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN, gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x8
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  146     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_EP], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x1
        MOV       A,#0x12
??pt_ZclReadGetProxyEntry_4:
        LCALL     ?XSTACK_DISP0_8
//  147   }
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  148   
//  149   if ( PROXY_TBL_GET_ASSIGNED_ALIAS( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
??pt_ZclReadGetProxyEntry_5:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JNC       ??pt_ZclReadGetProxyEntry_6
//  150   {
//  151     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x2
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  152   }
??CrossCallReturnLabel_16:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  153   
//  154   if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
??pt_ZclReadGetProxyEntry_6:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.6
        JNC       ??pt_ZclReadGetProxyEntry_7
//  155   {
//  156     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x1
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  157   }
??CrossCallReturnLabel_17:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  158   
//  159   if ( ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) || ( PROXY_TBL_GET_SEC_CAP( currEntry[PROXY_TBL_ENTRY_OPT] ) ) ) )
??pt_ZclReadGetProxyEntry_7:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.6
        JC        ??pt_ZclReadGetProxyEntry_8
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JNC       ??pt_ZclReadGetProxyEntry_9
//  160   {
//  161     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
??pt_ZclReadGetProxyEntry_8:
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x4
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  162   }
??CrossCallReturnLabel_18:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  163   
//  164   if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
??pt_ZclReadGetProxyEntry_9:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.6
        JNC       ??pt_ZclReadGetProxyEntry_10
//  165   {
//  166     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN, gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x10
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  167   }
??CrossCallReturnLabel_19:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  168   
//  169   if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
??pt_ZclReadGetProxyEntry_10:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.6
        JC        $+5
        LJMP      ??pt_ZclReadGetProxyEntry_11 & 0xFFFF
//  170   {
//  171     uint8 sinkCount = 0;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine2 & 0xFFFF
//  172     uint8 sinkCountByte = gpdEntryLen;
//  173     
//  174     gpdEntryLen += sizeof ( sinkCountByte );
//  175     
//  176     if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
??CrossCallReturnLabel_3:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,DPL
        ADD       A,R0
        MOV       ?V14,A
        CLR       A
        ADDC      A,DPH
        MOV       ?V15,A
        MOV       A,#-0x78
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       ?V6,#0x0
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x28
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 173)
        MOV       R4,#0xa
        LCALL     ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
        MOV       A,R1
        JNZ       ??pt_ZclReadGetProxyEntry_12
//  177     {
//  178       sinkCount += 1;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  179       osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 173)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,?V14
        MOV       R3,?V15
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  180       gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0xa
        MOV       A,#0x2a
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  181     }
??CrossCallReturnLabel_20:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  182     if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
??pt_ZclReadGetProxyEntry_12:
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x32
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 173)
        MOV       R4,#0xa
        LCALL     ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_82:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
        MOV       A,R1
        JNZ       ??pt_ZclReadGetProxyEntry_11
//  183     {
//  184       sinkCount += 1;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  185       osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 173)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,?V14
        MOV       R3,?V15
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  186       gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0xa
        MOV       A,#0x34
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  187     }
//  188   }
??CrossCallReturnLabel_21:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  189      
//  190   if ( PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
??pt_ZclReadGetProxyEntry_11:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??pt_ZclReadGetProxyEntry_13 & 0xFFFF
//  191   {
//  192     uint8 groupCount = 0;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine2 & 0xFFFF
//  193     uint8 groupCountByte = gpdEntryLen;
//  194     
//  195     gpdEntryLen++;
//  196     
//  197     if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
??CrossCallReturnLabel_4:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,DPL
        ADD       A,R0
        MOV       ?V0,A
        CLR       A
        ADDC      A,DPH
        MOV       ?V1,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       ?V6,#0x0
        MOV       A,#0x3c
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??pt_ZclReadGetProxyEntry_14
//  198     {
//  199       groupCount += 1;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  200       osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof ( uint8 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 173)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  201       gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x4
        MOV       A,#0x3f
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  202     }
??CrossCallReturnLabel_22:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  203     if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
??pt_ZclReadGetProxyEntry_14:
        MOV       A,#0x3c
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??pt_ZclReadGetProxyEntry_13
//  204     {
//  205       groupCount += 1;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  206       osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof( uint8 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 173)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  207       gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x4
        MOV       A,#0x43
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  208     }
//  209   }
??CrossCallReturnLabel_23:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  210   
//  211   gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GRP_RAD], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
??pt_ZclReadGetProxyEntry_13:
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x1
        MOV       A,#0x47
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  212   
//  213   if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) || ( PROXY_TBL_GET_ENTRY_VALID( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) )
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x18
        XRL       A,#0x18
        JZ        ??pt_ZclReadGetProxyEntry_15
//  214   {
//  215     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 172)
        MOV       A,#0x49
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x1
        MOV       A,#0x48
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  216   }
??CrossCallReturnLabel_25:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
??pt_ZclReadGetProxyEntry_15:
        MOV       A,#-0x56
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//  217   
//  218   if ( pData != NULL )
        MOV       DPL,?V0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V12
        ORL       A,?V13
        JNZ       $+5
        LJMP      ??pt_ZclReadGetProxyEntry_16 & 0xFFFF
//  219   {
//  220     uint8 sinkEntryLen;
//  221     uint16 totalLen;
//  222     
//  223     sinkEntryLen = gpdEntryLen;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R7,A
//  224     if ( *len != 0 )
        MOV       A,R0
        JZ        ??pt_ZclReadGetProxyEntry_17
//  225     {
//  226     gpdEntryLen -= sizeof ( uint16 );
        MOVX      A,@DPTR
        ADD       A,#-0x2
        MOVX      @DPTR,A
//  227     }
//  228     totalLen = gpdEntryLen;
??pt_ZclReadGetProxyEntry_17:
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  229     totalLen += *len;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOVX      @DPTR,A
//  230     osal_memcpy( pData, &totalLen, sizeof ( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 173)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,?V12
        MOV       R3,?V13
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  231     if ( *len == 0 )
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        JNZ       ??pt_ZclReadGetProxyEntry_18
//  232     {
//  233       pData += sizeof ( uint16 );
        MOV       A,?V12
        ADD       A,#0x2
        MOV       ?V12,A
        JNC       ??pt_ZclReadGetProxyEntry_18
        INC       ?V13
//  234     }
//  235     gpdEntryLen += sizeof ( uint16 );
??pt_ZclReadGetProxyEntry_18:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,#0x2
        MOVX      @DPTR,A
//  236     
//  237     pData += *len;
//  238     osal_memcpy( pData, gpdEntry, sinkEntryLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x47
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 173)
        MOV       A,R7
        MOV       R4,A
        MOV       R5,#0x0
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V12
        ADD       A,R0
        MOV       R2,A
        CLR       A
        ADDC      A,?V13
        MOV       R3,A
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 170)
//  239     if ( *len != 0 )
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        JZ        ??pt_ZclReadGetProxyEntry_19
//  240     {
//  241       *len = totalLen;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPL,?V0
        MOV       DPH,?V1
        SJMP      ??pt_ZclReadGetProxyEntry_20
//  242       return status;
//  243     }
//  244     *len += gpdEntryLen;
//  245     return status;
//  246   }
//  247   else
//  248   {
//  249     if ( *len == 0 )
??pt_ZclReadGetProxyEntry_16:
        MOV       A,R0
        JNZ       ??pt_ZclReadGetProxyEntry_19
//  250     {
//  251       gpdEntryLen += sizeof ( uint16 );
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,#0x2
        MOVX      @DPTR,A
//  252     }
//  253     *len += gpdEntryLen;
??pt_ZclReadGetProxyEntry_19:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ADD       A,R0
??pt_ZclReadGetProxyEntry_20:
        MOVX      @DPTR,A
//  254     return status;
        MOV       A,R6
        MOV       R1,A
??pt_ZclReadGetProxyEntry_2:
        MOV       A,#-0x6e
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
//  255   }
//  256 }
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond2) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond2) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond2) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond4) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond4) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond4) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond6) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOV       R2,DPL
        MOV       R3,DPH
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine10_0:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function gp_PairingUpdateProxyTlb
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 172)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 170)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 170)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        CLR       A
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV       R0,A
        INC       A
        MOVX      @DPTR,A
        MOV       A,#0x47
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44
//  257 
//  258 /*********************************************************************
//  259  * @fn      zclGpp_ReadWriteAttrCB
//  260  *
//  261  * @brief   Handle Diagnostics attributes.
//  262  *
//  263  * @param   clusterId - cluster that attribute belongs to
//  264  * @param   attrId - attribute to be read or written
//  265  * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
//  266  * @param   pValue - pointer to attribute value, OTA endian
//  267  * @param   pLen - length of attribute value read, native endian
//  268  *
//  269  * @return  status
//  270  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  271 ZStatus_t zclGpp_ReadWriteAttrCB( uint16 clusterId, uint16 attrId, uint8 oper,
zclGpp_ReadWriteAttrCB:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function zclGpp_ReadWriteAttrCB
        CODE
//  272                                          uint8 *pValue, uint16 *pLen )
//  273 {
        FUNCALL zclGpp_ReadWriteAttrCB, pt_ZclReadGetProxyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V1,R1
//  274   ZStatus_t status = ZSuccess;
        MOV       R1,#0x0
//  275   uint16 proxyTableIndex;
//  276   uint8 i;
//  277 
//  278   switch ( oper )
        MOV       A,?V1
        JZ        ??zclGpp_ReadWriteAttrCB_0
        DEC       A
        JZ        ??zclGpp_ReadWriteAttrCB_0
        DEC       A
        JZ        ??zclGpp_ReadWriteAttrCB_1
        SJMP      ??zclGpp_ReadWriteAttrCB_2
//  279   {
//  280     case ZCL_OPER_LEN:
//  281     case ZCL_OPER_READ:
//  282       if ( attrId == ATTRID_GP_PROXY_TABLE )
??zclGpp_ReadWriteAttrCB_0:
        MOV       A,#0x11
        XRL       A,R4
        ORL       A,R5
        JNZ       ??zclGpp_ReadWriteAttrCB_2
//  283       { 
//  284         for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
        MOV       ?V0,#0x0
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
//  285         {
//  286           proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
//  287           
//  288           status = pt_ZclReadGetProxyEntry ( proxyTableIndex, pValue, (uint8*)pLen );
??zclGpp_ReadWriteAttrCB_3:
        ; Setup parameters for call to function pt_ZclReadGetProxyEntry
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,?V0
        ADD       A,#0x10
        MOV       R2,A
        CLR       A
        ADDC      A,#0x3
        MOV       R3,A
        LCALL     `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R1,A
//  289           if ( status != ZSuccess )
        JNZ       ??zclGpp_ReadWriteAttrCB_1
//  290           {
//  291             status = ZFailure;
//  292             break;
//  293           }
//  294         }
        INC       ?V0
        MOV       A,?V0
        CLR       C
        SUBB      A,#0x6
        JNC       ??zclGpp_ReadWriteAttrCB_2
        SJMP      ??zclGpp_ReadWriteAttrCB_3
//  295         
//  296       }
//  297       break;
//  298 
//  299     case ZCL_OPER_WRITE:
//  300       status = ZFailure;
??zclGpp_ReadWriteAttrCB_1:
        MOV       R1,#0x1
//  301       break;
//  302   }
//  303 
//  304   return ( status );
??zclGpp_ReadWriteAttrCB_2:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  305 }
          CFI EndBlock cfiBlock45
//  306 
//  307  /*********************************************************************
//  308  * @fn          gp_pairingSetProxyTblOptions
//  309  *
//  310  * @brief       Function to fill the options pramenter in a Proxy Table entry
//  311  *              from a GP Pairing Command
//  312  *
//  313  * @param       pBitField - pointer to the bit field.
//  314  *              bit       - position of the bit to set in the given bitfield.
//  315  *
//  316  * @return      
//  317  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  318 static uint16 gp_pairingSetProxyTblOptions ( uint32 pairingOpt )
gp_pairingSetProxyTblOptions:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function gp_pairingSetProxyTblOptions
        CODE
//  319 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
//  320   uint8  proxyOpt[2] = {0x00, 0x00};
        MOV       DPTR,#`?<Constant {0, 0}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x2
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  321   uint16 opt = 0; 
//  322   
//  323   PAIRING_PROXY_TBL_SET_APPLICATION_ID(( uint8* )&proxyOpt[0], pairingOpt);
//  324   PROXY_TBL_SET_ENTRY_ACTIVE( &proxyOpt[0] );
//  325   PROXY_TBL_SET_ENTRY_VALID( &proxyOpt[0] );
        MOV       ?V0,R2
        MOV       A,R2
        ANL       A,#0x7
        MOV       R0,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ANL       A,#0xf8
        ORL       A,R0
        ORL       A,#0x18
        MOVX      @DPTR,A
//  326   PAIRING_PROXY_TBL_SET_MAC_SEQ_CAP(( uint16* )&proxyOpt, pairingOpt);
        ANL       A,#0xdf
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       ?V1,?V5
        MOV       A,#0x3
        MOV       R0,#?V0
        LCALL     ?US_SHR
        MOV       A,?V0
        ANL       A,#0x20
        MOV       R0,A
        MOV       A,R2
        ORL       A,R0
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  327   
//  328   if ( GP_IS_COMMUNICATION_MODE_LIGHT_UNICAST( pairingOpt ) )
        MOV       ?V0,?V4
        MOV       A,?V0
        SWAP      A
        RRC       A
        ANL       A,#0x7
        ANL       A,#0x3
        MOV       R1,A
        MOV       A,#0x3
        XRL       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        JNZ       ??gp_pairingSetProxyTblOptions_0
//  329   {
//  330     PROXY_TBL_SET_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.6
        MOVX      @DPTR,A
//  331   }
//  332   else
//  333   {
//  334     PROXY_TBL_CLR_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
//  335   }
//  336   if ( GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( pairingOpt ) )
//  337   {
//  338     PROXY_TBL_SET_DGROUP( &proxyOpt[0] );
//  339   }
//  340   else
//  341   {
//  342     PROXY_TBL_CLR_DGROUP( &proxyOpt[0] );
??gp_pairingSetProxyTblOptions_1:
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.7
        MOVX      @DPTR,A
//  343   }
//  344   if ( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt ) )
        MOV       A,#0x2
        XRL       A,R1
        JNZ       ??gp_pairingSetProxyTblOptions_2
//  345   {
//  346     PROXY_TBL_SET_CGROUP( &proxyOpt[1] );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.0
        SJMP      ??gp_pairingSetProxyTblOptions_3
//  347   }
??gp_pairingSetProxyTblOptions_0:
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.6
        MOVX      @DPTR,A
        MOV       A,#0x1
        XRL       A,R1
        JNZ       ??gp_pairingSetProxyTblOptions_1
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.7
        MOVX      @DPTR,A
//  348   else
//  349   {
//  350     PROXY_TBL_CLR_CGROUP( &proxyOpt[1] );
??gp_pairingSetProxyTblOptions_2:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.0
??gp_pairingSetProxyTblOptions_3:
        MOVX      @DPTR,A
//  351   }
//  352   
//  353   // FALSE by default
//  354   PROXY_TBL_CLR_FIRST_TO_FORWARD( &proxyOpt[1] );
//  355   
//  356   // The InRange sub-field, if set to 0b1, indicates that this GPD is in range 
//  357   // of this proxy. The default value is FALSE
//  358   PROXY_TBL_CLR_IN_RANGE( &proxyOpt[1] );
        MOVX      A,@DPTR
        ANL       A,#0xf9
        MOVX      @DPTR,A
//  359   // The GPDfixed sub-field, if set to 0b1, indicates portability capabilities 
//  360   if ( GP_GET_GPD_FIXED_BIT( pairingOpt ) )
        MOV       A,?V0
        ANL       A,#0x80
        JZ        ??gp_pairingSetProxyTblOptions_4
//  361   {
//  362     PROXY_TBL_SET_GPD_FIXED( &proxyOpt[1] );
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.3
        SJMP      ??gp_pairingSetProxyTblOptions_5
//  363   }
//  364   else
//  365   {
//  366     PROXY_TBL_CLR_GPD_FIXED( &proxyOpt[1] );
??gp_pairingSetProxyTblOptions_4:
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.3
??gp_pairingSetProxyTblOptions_5:
        MOVX      @DPTR,A
//  367   }
//  368   
//  369   if ( GP_IS_COMMUNICATION_MODE_FULL_UNICAST( pairingOpt ) )
        MOV       A,R1
        JNZ       ??gp_pairingSetProxyTblOptions_6
//  370   {
//  371     PROXY_TBL_SET_HAS_ALL_ROUTES( &proxyOpt[1] );
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.4
        SJMP      ??gp_pairingSetProxyTblOptions_7
//  372   }
//  373   else
//  374   {
//  375     PROXY_TBL_CLR_HAS_ALL_ROUTES( &proxyOpt[1] );
??gp_pairingSetProxyTblOptions_6:
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.4
??gp_pairingSetProxyTblOptions_7:
        MOVX      @DPTR,A
//  376   }
//  377   if ( (GP_ALIAS ( pairingOpt )) && (!GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt )) )
        MOV       ?V1,?V5
        MOV       ?V2,?V6
        MOV       ?V3,?V7
        MOV       DPTR,#__Constant_10000
        MOV       R0,#?V0
        LCALL     ?L_AND_X
        MOV       A,?V0
        ORL       A,?V1
        ORL       A,?V2
        ORL       A,?V3
        JZ        ??gp_pairingSetProxyTblOptions_8
        MOV       A,#0x2
        XRL       A,R1
        JZ        ??gp_pairingSetProxyTblOptions_8
//  378   {
//  379     PROXY_TBL_SET_ASSIGNED_ALIAS( &proxyOpt[1] );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.5
        SJMP      ??gp_pairingSetProxyTblOptions_9
//  380   }
//  381   else
//  382   {
//  383     PROXY_TBL_CLR_ASSIGNED_ALIAS( &proxyOpt[1]);
??gp_pairingSetProxyTblOptions_8:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.5
??gp_pairingSetProxyTblOptions_9:
        MOVX      @DPTR,A
//  384   }
//  385   if ( GP_GET_SEC_LEVEL( pairingOpt ) > 1 )
        MOV       A,#0x9
        MOV       R0,#?V4
        LCALL     ?US_SHR
        MOV       A,?V4
        ANL       A,#0x3
        CLR       C
        SUBB      A,#0x2
        MOVX      A,@DPTR
        JC        ??gp_pairingSetProxyTblOptions_10
//  386   {
//  387     PROXY_TBL_SET_SEC_USE( &proxyOpt[1] );
        SETB      0xE0 /* A   */.6
        SJMP      ??gp_pairingSetProxyTblOptions_11
//  388   }
//  389   else
//  390   {
//  391     PROXY_TBL_CLR_SEC_USE( &proxyOpt[1] );
??gp_pairingSetProxyTblOptions_10:
        CLR       0xE0 /* A   */.6
??gp_pairingSetProxyTblOptions_11:
        MOVX      @DPTR,A
//  392   }
//  393   PROXY_TBL_SET_OPT_EXT( &proxyOpt[1] );
//  394   PROXY_TBL_CLR_OPT_EXT( &proxyOpt[1] );
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.7
        LCALL     ?Subroutine9 & 0xFFFF
//  395   
//  396   opt |= ( ( proxyOpt[0] ) & 0x00FF );
//  397   opt |= ( ( ( proxyOpt[1] ) <<  8 ) & 0xFF00 );
//  398     
//  399   return opt;
??CrossCallReturnLabel_13:
        MOV       R2,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
//  400 }
          CFI EndBlock cfiBlock46

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
          CFI Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 170)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_4
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-4
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 170)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function gp_pairingSetProxyTblOptions
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker50 Using cfiCommon1
          CFI (cfiPicker50) NoFunction
          CFI (cfiPicker50) Picker
        MOVX      @DPTR,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiPicker50
//  401 
//  402 /*********************************************************************
//  403  * @fn          gp_PairingUpdateProxyTlb
//  404  *
//  405  * @brief       General function fill the proxy table vector
//  406  *
//  407  * @param       
//  408  *
//  409  * @return      
//  410  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  411 void gp_PairingUpdateProxyTlb( gpPairingCmd_t* payload )
gp_PairingUpdateProxyTlb:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function gp_PairingUpdateProxyTlb
        CODE
//  412 {
        FUNCALL gp_PairingUpdateProxyTlb, gp_ResetProxyBasicTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_pairingSetProxyTblOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 95, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 95, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 95, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 95, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 95, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 95, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_UpdateProxyTlb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 72
        MOV       A,#-0x48
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  413   uint8  entryVector[PROXY_TBL_ENTRY_LEN];
//  414   uint8  entryLen = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
//  415   uint8  addSink;
//  416   uint8  newSinkGroup = 0;
//  417   uint16 entryOptions = 0;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  418   uint8  securityOpt = 0;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  419   uint8  searchCounter = 0x0A;
        INC       A
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xa
        MOVX      @DPTR,A
//  420   uint16 invalidAlias = 0xFFFF;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  421   
//  422   gp_ResetProxyBasicTblEntry(entryVector);
        ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
//  423   
//  424   addSink = GP_ADD_SINK( payload->options );
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
        MOV       ?V0,?V8
        MOV       A,?V0
        RRC       A
        RRC       A
        RRC       A
        ANL       A,#0x1f
        ANL       A,#0x1
        MOV       ?V4,A
//  425   
//  426   entryOptions = gp_pairingSetProxyTblOptions( payload->options );
        ; Setup parameters for call to function gp_pairingSetProxyTblOptions
        MOV       R2,?V8
        MOV       R3,?V9
        MOV       R4,?V10
        MOV       R5,?V11
        LCALL     `??gp_pairingSetProxyTblOptions::?relay`; Banked call to: gp_pairingSetProxyTblOptions
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ?Subroutine1 & 0xFFFF
//  427   gp_PopulateProxyTblEntry( ( uint8* )&entryOptions, sizeof( entryOptions ), entryVector, &entryLen );
??CrossCallReturnLabel_0:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x2
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        ANL       A,#0x7
        MOV       R0,A
        JNZ       ??gp_PairingUpdateProxyTlb_0
//  428     
//  429   // Options bitfield
//  430   // If Application Id bitfield is 0b000
//  431   if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
//  432   {        
//  433     // Populate GPD ID
//  434     entryLen += sizeof( uint32 );
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,#0x4
        LCALL     ?Subroutine1 & 0xFFFF
//  435     gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdId, sizeof( payload->gpdId ), entryVector, &entryLen );
//  436   }
??CrossCallReturnLabel_1:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x4
        SJMP      ??gp_PairingUpdateProxyTlb_1
          CFI CFA_XSP16 add(XSP16, 92)
//  437   // If Application Id bitfield is 0b010
//  438   else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
??gp_PairingUpdateProxyTlb_0:
        MOV       A,#0x2
        XRL       A,R0
        JNZ       ??gp_PairingUpdateProxyTlb_2
//  439   {   
//  440     gp_PopulateProxyTblEntry( payload->gpdIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x8
??gp_PairingUpdateProxyTlb_1:
        MOV       A,R6
        ADD       A,R1
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
//  441   }
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  442   
//  443    gp_PopulateProxyTblEntry( ( uint8* )&payload->ep, sizeof( payload->ep ), entryVector, &entryLen );
??gp_PairingUpdateProxyTlb_2:
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x1
        MOV       A,R6
        ADD       A,#0x10
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  444 
//  445   if( !GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) )
        MOV       A,R6
        ADD       A,#0x32
        MOV       ?V6,A
        CLR       A
        ADDC      A,R7
        MOV       ?V7,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        SWAP      A
        RRC       A
        ANL       A,#0x7
        ANL       A,#0x3
        XRL       A,#0x2
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        JZ        ??gp_PairingUpdateProxyTlb_3
//  446   {
//  447     gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x2
        MOV       R2,?V6
        MOV       R3,?V7
        SJMP      ??gp_PairingUpdateProxyTlb_4
          CFI CFA_XSP16 add(XSP16, 92)
//  448   }
//  449   else
//  450   {
//  451     gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof( uint16 ), entryVector, &entryLen );
??gp_PairingUpdateProxyTlb_3:
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x2
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP101_8
//  452   }
??gp_PairingUpdateProxyTlb_4:
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  453 
//  454 
//  455   //Security options
//  456   securityOpt |= GP_GET_SEC_LEVEL( payload->options );
//  457   securityOpt |= GP_GET_SEC_KEY_TYPE (payload->options ) << GP_OPT_SEC_LEVEL_LEN;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       ?V8,?V0
        MOV       ?V9,?V1
        MOV       A,#0xb
        MOV       R0,#?V8
        LCALL     ?US_SHR
        MOV       A,?V8
        RLC       A
        RLC       A
        ANL       A,#0xfc
        ANL       A,#0x1c
        MOV       R1,A
        MOV       A,#0x9
        MOV       R0,#?V0
        LCALL     ?US_SHR
        MOV       A,?V0
        ANL       A,#0x3
        ORL       A,R1
        MOV       R0,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  458   osal_memcpy( &entryVector[entryLen], &securityOpt, sizeof ( uint8 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 95)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  459   entryLen += sizeof ( uint8 );
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        INC       A
        LCALL     ?Subroutine1 & 0xFFFF
//  460 
//  461   gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdSecCounter, sizeof( payload->gpdSecCounter ), entryVector, &entryLen );
??CrossCallReturnLabel_2:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x4
        MOV       A,R6
        ADD       A,#0x1e
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  462   gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdKey, SEC_KEY_LEN, entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x10
        MOV       A,R6
        ADD       A,#0x22
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  463   
//  464   gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
        MOV       A,R6
        ADD       A,#0x11
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x8
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  465   gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
        MOV       A,R6
        ADD       A,#0x19
        MOV       ?V2,A
        CLR       A
        ADDC      A,R7
        MOV       ?V3,A
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x2
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  466   // to add the invalid entries
//  467   osal_memset ( &payload->sinkIEEE, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#-0x1
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  468   payload->sinkNwkAddr = 0xFFFF;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  469   gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x8
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  470   gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x2
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  471   
//  472   newSinkGroup = PROXY_TBL_GET_DGROUP( entryOptions & 0x00FF );
//  473   newSinkGroup |= PROXY_TBL_GET_CGROUP( ( entryOptions & 0xFF00 ) >> 8 );
//  474   osal_memset( &entryVector[entryLen], newSinkGroup, sizeof ( uint8 ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x1
        MOV       R2,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        RLC       A
        RLC       A
        ANL       A,#0x1
        ORL       A,R2
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,DPL
        ADD       A,R2
        MOV       R2,A
        CLR       A
        ADDC      A,DPH
        MOV       R3,A
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  475   entryLen++;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  476   
//  477   gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
        MOV       A,R6
        ADD       A,#0x1b
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x2
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
        MOV       A,?V8
        SWAP      A
        RRC       A
        ANL       A,#0x7
        ANL       A,#0x3
        MOV       R0,A
        MOV       A,#0x2
        XRL       A,R0
        JZ        ??gp_PairingUpdateProxyTlb_5
        MOV       A,#0x1
        XRL       A,R0
        JNZ       ??gp_PairingUpdateProxyTlb_6
//  478   if( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) || GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( payload->options ) )
//  479   {
//  480     gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
??gp_PairingUpdateProxyTlb_5:
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x2
        MOV       R2,?V6
        MOV       R3,?V7
        SJMP      ??gp_PairingUpdateProxyTlb_7
          CFI CFA_XSP16 add(XSP16, 92)
//  481   }
//  482   else
//  483   {
//  484     gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
??gp_PairingUpdateProxyTlb_6:
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x2
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP101_8
//  485   }
??gp_PairingUpdateProxyTlb_7:
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  486   // to add the invalid entries
//  487   payload->sinkGroupID = 0xFFFF;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  488   gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x2
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  489   gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x2
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  490 
//  491   
//  492   gp_PopulateProxyTblEntry( &payload->forwardingRadius, sizeof( payload->forwardingRadius ), entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R1,#0x1
        MOV       A,R6
        ADD       A,#0x34
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  493  
//  494   if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( entryVector[0] ) == 0 ) && ( PROXY_TBL_GET_ENTRY_VALID( entryVector[0] ) == 0) )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       ?V2,#0x0
        MOVX      A,@DPTR
        ANL       A,#0x18
        JZ        ??gp_PairingUpdateProxyTlb_8
//  495   {
//  496     osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
        ; Setup parameters for call to function osal_memcpy
//  497   }
//  498   else
//  499   {
//  500     searchCounter = 0xFF;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  501     osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
        ; Setup parameters for call to function osal_memcpy
??gp_PairingUpdateProxyTlb_8:
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 95)
        MOV       R4,#0x1
        MOV       R5,#0x0
//  502   }
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
//  503   // Update the proxy table
//  504   gp_UpdateProxyTlb( entryVector, addSink );
        ; Setup parameters for call to function gp_UpdateProxyTlb
        MOV       R1,?V4
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??gp_UpdateProxyTlb::?relay`; Banked call to: gp_UpdateProxyTlb
//  505 }
        MOV       A,#0x48
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock51

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function gp_PairingUpdateProxyTlb
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 95)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        MOV       A,DPL
        ADD       A,R0
        MOV       R2,A
        CLR       A
        ADDC      A,DPH
        MOV       R3,A
        RET
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond59 Using cfiCommon0
          CFI Function gp_PairingUpdateProxyTlb
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62
//  506 
//  507 /*********************************************************************
//  508  * @fn          gp_UpdateProxyTlb
//  509  *
//  510  * @brief       To update the proxy table NV vectors
//  511  *
//  512  * @param       pNpEntryew - New entry array to be added
//  513  *
//  514  * @return
//  515  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  516 uint8 gp_UpdateProxyTlb( uint8* pEntry, uint8 addSink )
gp_UpdateProxyTlb:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI Function gp_UpdateProxyTlb
        CODE
//  517 {
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, gp_getProxyTableByIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 279, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 279, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 279, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 279, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, gp_ResetProxyBasicTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 279, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 279, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, pt_updateLightweightUnicastSink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 279, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 279, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 278, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 278, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, NLME_ReportAddressConflict
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, pt_addSinkGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 260
        MOV       DPL,#-0x4
        MOV       DPH,#-0x2
        LCALL     ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 275)
        MOV       ?V3,R1
//  518   uint8 i;
//  519   uint8 newEntry[PROXY_TBL_ENTRY_LEN];
//  520   uint8 currEntry[PROXY_TBL_ENTRY_LEN];
//  521   uint16 proxyTableIndex;
//  522   uint8 status;
//  523   
//  524   // Copy the new entry pointer to array
//  525   osal_memcpy( &newEntry, pEntry, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        MOV       R4,#0x41
        MOV       R5,#0x0
        MOV       A,#0x44
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
//  526 
//  527   for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
        MOV       R7,#0x0
//  528   {
//  529     proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
??gp_UpdateProxyTlb_0:
        MOV       A,R7
        ADD       A,#0x10
        MOV       ?V0,A
        CLR       A
        ADDC      A,#0x3
        MOV       ?V1,A
//  530     status = gp_getProxyTableByIndex( proxyTableIndex, currEntry );
        ; Setup parameters for call to function gp_getProxyTableByIndex
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R2,?V0
        MOV       R3,A
        LCALL     ?Subroutine3 & 0xFFFF
//  531 
//  532     if ( status == NV_OPER_FAILED )
??CrossCallReturnLabel_6:
        JNZ       $+5
        LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
//  533     {
//  534       // FAIL
//  535       return status;
//  536     }
//  537     
//  538     // if the entry is empty
//  539     if ( ( status == NV_INVALID_DATA ) && ( addSink == TRUE ) )
        MOV       A,#0xd
        XRL       A,R6
        JZ        $+5
        LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
        MOV       A,#0x1
        XRL       A,?V3
        JZ        $+5
        LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
//  540     {
//  541       // Save new entry
//  542       status = osal_nv_write( proxyTableIndex, 0,
//  543                            PROXY_TBL_ENTRY_LEN, newEntry );
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x41
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 277)
        MOV       ?V4,#0x41
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 279)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
        MOV       A,R1
        MOV       R6,A
//  544       
//  545       if ( osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
//  546            osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
//  547            osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
        MOV       ?V0,#(_NIB + 20) & 0xff
        MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x4c
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        LCALL     ?Subroutine7 & 0xFFFF
//  548       {
//  549         NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
//  550       }
//  551       return status;
//  552     }
??CrossCallReturnLabel_70:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
        MOV       A,R1
        JZ        $+5
        LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x78
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
        MOV       A,R1
        JZ        $+5
        LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x7c
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_72:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
        MOV       A,R1
        JZ        $+5
        LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
        LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
//  553     
//  554     if ( pt_lookForGpd( proxyTableIndex, newEntry ) )
??gp_UpdateProxyTlb_2:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x41
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        MOV       R4,#0x41
        MOV       R5,#0x0
        MOV       A,#-0x3a
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
        ; Setup parameters for call to function osal_nv_read
        MOV       A,#-0x7e
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 277)
        MOV       ?V4,#0x41
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 279)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
        MOV       A,R1
        JNZ       ??gp_UpdateProxyTlb_4
        MOV       A,#-0x3d
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R0,A
        MOV       A,#-0x7e
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x7
        XRL       A,R0
        JNZ       ??gp_UpdateProxyTlb_4
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#-0x7c
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#-0x38
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       R3,#0x0
        LCALL     ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_91:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
        MOV       A,R1
        JNZ       ??gp_UpdateProxyTlb_5
//  555     {
//  556       // Entry found
//  557       break;
//  558     }
//  559     
//  560     if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
??gp_UpdateProxyTlb_4:
        MOV       A,R7
        CLR       C
        SUBB      A,#0x5
        JC        ??gp_UpdateProxyTlb_6
//  561     {
//  562       // No space for new entries
//  563       return FAILURE;
        MOV       R1,#0x1
        LJMP      ??gp_UpdateProxyTlb_7 & 0xFFFF
//  564     }
//  565   }
??gp_UpdateProxyTlb_6:
        INC       R7
        MOV       A,R7
        CLR       C
        SUBB      A,#0x6
        JNC       $+5
        LJMP      ??gp_UpdateProxyTlb_0 & 0xFFFF
//  566   
//  567   // Remove the entry
//  568   if ( addSink == FALSE )
??gp_UpdateProxyTlb_5:
        MOV       A,?V3
        JNZ       ??gp_UpdateProxyTlb_8
//  569   {
//  570     gp_ResetProxyBasicTblEntry( currEntry );
        ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
//  571     
//  572     status = osal_nv_write( proxyTableIndex, 0,
//  573                      PROXY_TBL_ENTRY_LEN, currEntry );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 277)
        MOV       ?V4,#0x41
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 279)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
        MOV       A,R1
        MOV       R6,A
        LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
//  574     return status;
//  575   }
//  576 
//  577   if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( newEntry[PROXY_TBL_ENTRY_OPT] ) )
??gp_UpdateProxyTlb_8:
        MOV       A,#0x41
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.6
        JC        $+5
        LJMP      ??gp_UpdateProxyTlb_9 & 0xFFFF
//  578   {
//  579     if ( ( !pt_updateLightweightUnicastSink( newEntry, currEntry, addSink ) ) )
        ; Setup parameters for call to function pt_updateLightweightUnicastSink
        MOV       R1,?V3
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x41
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??pt_updateLightweightUnicastSink::?relay`; Banked call to: pt_updateLightweightUnicastSink
        MOV       A,R1
        JNZ       $+5
        LJMP      ??gp_UpdateProxyTlb_10 & 0xFFFF
//  580     {
//  581       // The entry is full
//  582       return NV_BAD_ITEM_LEN;
//  583     }
//  584   }
//  585   else if ( PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
//  586   {
//  587     if ( ( !pt_addSinkGroup( newEntry, currEntry ) ) )
//  588     {
//  589       // The entry is full
//  590       return NV_BAD_ITEM_LEN;
//  591     }
//  592   }
//  593 
//  594   if ( pt_getAlias( newEntry ) )
??gp_UpdateProxyTlb_11:
        MOV       A,#0x42
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JNC       ??gp_UpdateProxyTlb_12
//  595   {
//  596     osal_memcpy( &currEntry[PROXY_TBL_ENTRY_ALIAS], &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x4c
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
//  597   }
??CrossCallReturnLabel_41:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
//  598     
//  599   if ( pt_getSecurity( newEntry ) )
??gp_UpdateProxyTlb_12:
        MOV       A,#0x42
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.6
        JNC       ??gp_UpdateProxyTlb_13
//  600   {
//  601     PROXY_TBL_SET_SEC_USE( &currEntry[PROXY_TBL_ENTRY_OPT + 1] );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.6
        MOVX      @DPTR,A
//  602     osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_OPT], &newEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x4e
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
//  603     osal_memcpy( &currEntry[PROXY_TBL_ENTRY_GPD_KEY], &newEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x53
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
//  604   }
??CrossCallReturnLabel_43:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
//  605          
//  606   if ( pt_getSecFrameCounterCapabilities( newEntry ) )
??gp_UpdateProxyTlb_13:
        MOV       A,#0x41
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JNC       ??gp_UpdateProxyTlb_14
//  607   {
//  608     PROXY_TBL_SET_SEC_CAP( &currEntry[PROXY_TBL_ENTRY_OPT] );
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.5
        MOVX      @DPTR,A
//  609   }
//  610   
//  611   osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_FRAME], &newEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ) );
??gp_UpdateProxyTlb_14:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x4f
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
//  612 
//  613   currEntry[PROXY_TBL_ENTRY_GRP_RAD] = newEntry[PROXY_TBL_ENTRY_GRP_RAD];
        MOV       A,#-0x80
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x3f
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  614     
//  615   currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER] = newEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER];
        MOV       A,#-0x7f
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x40
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  616    
//  617   status = osal_nv_write( proxyTableIndex, 0,
//  618                      PROXY_TBL_ENTRY_LEN, currEntry );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 277)
        MOV       ?V4,#0x41
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 279)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
        MOV       A,R1
        MOV       R6,A
//  619   
//  620   if ( osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
//  621        osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
//  622        osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
        MOV       ?V0,#(_NIB + 20) & 0xff
        MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
        MOV       A,R1
        JNZ       ??gp_UpdateProxyTlb_3
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
        MOV       A,R1
        JNZ       ??gp_UpdateProxyTlb_3
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x3b
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 278)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 275)
        MOV       A,R1
        JZ        ??gp_UpdateProxyTlb_1
//  623   {
//  624     NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
??gp_UpdateProxyTlb_3:
        ; Setup parameters for call to function NLME_ReportAddressConflict
        MOV       R1,#0x1
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??NLME_ReportAddressConflict::?relay`; Banked call to: NLME_ReportAddressConflict
//  625   }
//  626   
//  627   return status;
??gp_UpdateProxyTlb_1:
        MOV       A,R6
        MOV       R1,A
??gp_UpdateProxyTlb_7:
        MOV       DPL,#0x4
        MOV       DPH,#0x1
        LCALL     ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 15)
        LJMP      ?Subroutine0 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 275)
??gp_UpdateProxyTlb_9:
        MOV       A,#0x42
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
        ; Setup parameters for call to function pt_addSinkGroup
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x41
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??pt_addSinkGroup::?relay`; Banked call to: pt_addSinkGroup
        MOV       A,R1
        JZ        $+5
        LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
??gp_UpdateProxyTlb_10:
        MOV       R1,#0xc
        SJMP      ??gp_UpdateProxyTlb_7
//  628 }
          CFI EndBlock cfiBlock63

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond64 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 170)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function gp_UpdateProxyTlb
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 275)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
        MOV       A,R1
        MOV       R6,A
        MOV       A,#0xa
        XRL       A,R6
        RET
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66
//  629 
//  630 /*********************************************************************
//  631  * @fn          gp_CheckAnnouncedDevice
//  632  *
//  633  * @brief       General function to check if it has the announced device 
//  634  *              listed in the SinkAddressList and look for address conflict
//  635  *              resolution.
//  636  *
//  637  * @param       
//  638  *
//  639  * @return      
//  640  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  641 uint8 gp_CheckAnnouncedDevice ( uint8 *sinkIEEE, uint16 sinkNwkAddr )
gp_CheckAnnouncedDevice:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function gp_CheckAnnouncedDevice
        CODE
//  642 {
        FUNCALL gp_CheckAnnouncedDevice, gp_getProxyTableByIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, NLME_SendNetworkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 67
        MOV       A,#-0x43
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       ?V12,R2
        MOV       ?V13,R3
//  643   uint8 i;
//  644   uint8 status;
//  645   uint8 annceDelay;
//  646   uint8 ProxyTableEntry[PROXY_TBL_ENTRY_LEN];
//  647 
//  648   for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
        MOV       R6,#0x0
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,R6
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       ?V2,R6
//  649   {
//  650     status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), ProxyTableEntry );
??gp_CheckAnnouncedDevice_0:
        ; Setup parameters for call to function gp_getProxyTableByIndex
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        ADD       A,#0x10
        MOV       R2,A
        CLR       A
        ADDC      A,#0x3
        MOV       R3,A
        LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
        MOV       A,R1
        MOV       R0,A
//  651 
//  652     if ( status == NV_OPER_FAILED )
        MOV       A,#0xa
        XRL       A,R0
        JNZ       ??gp_CheckAnnouncedDevice_1
//  653     {
//  654       // FAIL
//  655 
//  656       return ZFailure;
        MOV       R1,#0x1
        LJMP      ??gp_CheckAnnouncedDevice_2 & 0xFFFF
//  657     }
//  658     
//  659     // if the entry is empty
//  660     if ( status == NV_INVALID_DATA )
??gp_CheckAnnouncedDevice_1:
        MOV       A,#0xd
        XRL       A,R0
        JNZ       $+5
        LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
//  661     {
//  662       continue;
//  663     }
//  664     
//  665     // Compare for nwk alias address conflict
//  666     if ( osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
//  667          osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
//  668          osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 92)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
        MOV       A,R1
        JNZ       ??gp_CheckAnnouncedDevice_4
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x39
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 92)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
        MOV       A,R1
        JNZ       ??gp_CheckAnnouncedDevice_4
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x3d
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 92)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
        MOV       A,R1
        JZ        ??gp_CheckAnnouncedDevice_5
//  669     {
//  670       // Do address conflict resolution
//  671       NLME_SendNetworkStatus( NWK_BROADCAST_SHORTADDR_DEVRXON,
//  672                          sinkNwkAddr, NWKSTAT_ADDRESS_CONFLICT, TRUE );
??gp_CheckAnnouncedDevice_4:
        ; Setup parameters for call to function NLME_SendNetworkStatus
        MOV       ?V3,#0x1
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 90)
        MOV       R1,#0xd
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R2,#-0x3
        MOV       R3,#-0x1
        LCALL     `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
//  673       
//  674       aliasConflictAnnce.nwkAddr = sinkNwkAddr;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#aliasConflictAnnce
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  675       osal_memset( aliasConflictAnnce.extAddr, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#-0x1
        MOV       R2,#(aliasConflictAnnce + 2) & 0xff
        MOV       R3,#((aliasConflictAnnce + 2) >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  676       aliasConflictAnnce.capabilities = 0;
        MOV       DPTR,#aliasConflictAnnce + 10
        CLR       A
        MOVX      @DPTR,A
//  677       
//  678       annceDelay = ( osal_rand()/650 ) + 5; // ( 65535/650 = 100 ) + 5 
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R0,?V8
        MOV       R1,?V9
//  679       // where:
//  680       // 100 is Dmax
//  681       // 5   is Dmin
//  682       osal_start_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT, annceDelay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       R2,#-0x76
        MOV       R3,#0x2
        LCALL     ?US_DIV_MOD
        MOV       A,R0
        ADD       A,#0x5
        MOV       ?V8,A
        CLR       A
        MOV       ?V9,A
        MOV       ?V11,A
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 93)
        MOV       R2,#0x10
        MOV       R3,#0x0
        MOV       DPTR,#gp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
//  683     }
//  684 
//  685     if( sinkIEEE )
??gp_CheckAnnouncedDevice_5:
        MOV       A,?V12
        ORL       A,?V13
        JNZ       $+5
        LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
//  686     {
//  687       //Check if one of the Sink IEEE is the same
//  688       if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], Z_EXTADDR_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x24
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,?V4
        MOV       R2,?V5
        MOV       R3,?V6
        LCALL     ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_83:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
        MOV       A,R1
        JZ        ??gp_CheckAnnouncedDevice_6
//  689       {
//  690         // If Nwk address is different, then update the new address
//  691         if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x2c
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 92)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_79:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
        MOV       A,R1
        JNZ       ??gp_CheckAnnouncedDevice_3
//  692         {
//  693           osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,#0x2f
        SJMP      ??gp_CheckAnnouncedDevice_7
          CFI CFA_XSP16 add(XSP16, 89)
//  694         }
//  695       }
//  696       else if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], Z_EXTADDR_LEN ) )
??gp_CheckAnnouncedDevice_6:
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x2e
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,?V4
        MOV       R2,?V5
        MOV       R3,?V6
        LCALL     ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_84:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
        MOV       A,R1
        JZ        ??gp_CheckAnnouncedDevice_3
//  697       {
//  698         // If Nwk address is different, then update the new address
//  699         if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x36
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 92)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_80:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
        MOV       A,R1
        JNZ       ??gp_CheckAnnouncedDevice_3
//  700         {
//  701           osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,#0x39
??gp_CheckAnnouncedDevice_7:
        LCALL     ?XSTACK_DISP0_8
//  702         }
//  703       }
//  704     }
//  705   }
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
??gp_CheckAnnouncedDevice_3:
        INC       R6
        MOV       A,R6
        CLR       C
        SUBB      A,#0x6
        JNC       $+5
        LJMP      ??gp_CheckAnnouncedDevice_0 & 0xFFFF
//  706     
//  707   return ZSuccess;
        MOV       R1,#0x0
??gp_CheckAnnouncedDevice_2:
        MOV       A,#0x43
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
//  708 }
          CFI EndBlock cfiBlock67
//  709 
//  710  /*********************************************************************
//  711  * PRIVATE FUNCTIONS
//  712  *********************************************************************/
//  713 
//  714 /*********************************************************************
//  715  * @fn          gp_PopulateProxyTblEntry
//  716  *
//  717  * @brief       Populate the given item data
//  718  *
//  719  * @param       pData - Pointer to the new data
//  720  *              size - size of the new data
//  721  *              pTblEntryVector - Pointer to the new vector
//  722  *              vectorLen - Position in the vector to write the data
//  723  *
//  724  * @return
//  725  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  726 static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen )
gp_PopulateProxyTblEntry:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function gp_PopulateProxyTblEntry
        CODE
//  727 {
        FUNCALL gp_PopulateProxyTblEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  728   pTblEntryVector += *(uint8*)vectorLen;
//  729   
//  730   osal_memcpy( pTblEntryVector, pData, size );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,?V2
        MOV       R5,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V0
        ADD       A,R0
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  731   *(uint8*)vectorLen += size;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ADD       A,?V2
        MOVX      @DPTR,A
//  732 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock68

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function gp_UpdateProxyTlb
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function gp_UpdateProxyTlb
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function gp_UpdateProxyTlb
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function gp_UpdateProxyTlb
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function gp_CheckAnnouncedDevice
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function pt_updateLightweightUnicastSink
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function pt_updateLightweightUnicastSink
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function pt_updateLightweightUnicastSink
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function pt_addSinkGroup
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 148)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function pt_addSinkGroup
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 148)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOV       R2,DPL
        MOV       R3,DPH
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 95)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 95)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function gp_UpdateProxyTlb
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function gp_UpdateProxyTlb
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function gp_PopulateProxyTblEntry
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function pt_updateLightweightUnicastSink
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function pt_updateLightweightUnicastSink
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function pt_updateLightweightUnicastSink
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function pt_addSinkGroup
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 148)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function pt_addSinkGroup
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 148)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function pt_addSinkGroup
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 148)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function gp_UpdateProxyTlb
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function gp_UpdateProxyTlb
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function gp_UpdateProxyTlb
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function gp_UpdateProxyTlb
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function gp_CheckAnnouncedDevice
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function pt_updateLightweightUnicastSink
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function pt_updateLightweightUnicastSink
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function pt_updateLightweightUnicastSink
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function pt_addSinkGroup
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 148)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function pt_addSinkGroup
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 148)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109
//  733 
//  734 /*********************************************************************
//  735  * @fn          pt_getAlias
//  736  *
//  737  * @brief       Get Bit to update assigned alias field or not
//  738  *
//  739  * @param       pNew - New entry array to be added
//  740  *
//  741  * @return      newAlias - TRUE if assigned alias bit is set
//  742  */
//  743 static uint8 pt_getAlias( uint8* pNew )
//  744 {
//  745   bool newAlias;
//  746   
//  747   newAlias = PROXY_TBL_GET_ASSIGNED_ALIAS( pNew[PROXY_TBL_ENTRY_OPT + 1] );
//  748   
//  749   return newAlias;
//  750 }
//  751 
//  752 /*********************************************************************
//  753  * @fn          pt_getSecurity
//  754  *
//  755  * @brief       Get Bit to update security options field or not
//  756  *
//  757  * @param       pNew - New entry array to be added
//  758  *
//  759  * @return      secUse - TRUE if security use bit is set
//  760  */
//  761 static uint8 pt_getSecurity( uint8* pNew )
//  762 {
//  763   bool secUse;
//  764   
//  765   secUse = PROXY_TBL_GET_SEC_USE( pNew[PROXY_TBL_ENTRY_OPT + 1] );
//  766 
//  767   return secUse;
//  768 }
//  769 
//  770 /*********************************************************************
//  771  * @fn          pt_getSecFrameCounterCapabilities
//  772  *
//  773  * @brief       Get Bit to update security frame counter capabilities
//  774  *
//  775  * @param       pNew - New entry array to be added
//  776  *
//  777  * @return      secCap - TRUE if security frame counter capabilities bit is set
//  778  */
//  779 static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew )
//  780 {
//  781   bool secCap;
//  782   
//  783   secCap = PROXY_TBL_GET_SEC_CAP( pNew[PROXY_TBL_ENTRY_OPT] );
//  784   
//  785   return secCap;
//  786 }
//  787 
//  788 /*********************************************************************
//  789  * @fn          pt_updateLightweightUnicastSink
//  790  *
//  791  * @brief       To add new sink entry
//  792  *
//  793  * @param       pNew - New entry array to be added
//  794  *              pCurr - The current entry array in the proxy table
//  795  *
//  796  * @return      TRUE new entry added, FALSE if not
//  797  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  798 static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink )
pt_updateLightweightUnicastSink:
          CFI Block cfiBlock110 Using cfiCommon0
          CFI Function pt_updateLightweightUnicastSink
        CODE
//  799 {
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, gp_ResetProxyBasicTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 165, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 165, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        MOV       A,#-0x17
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 23)
        ; Saved register size: 23
        ; Auto size: 142
        MOV       A,#0x72
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       A,R1
        MOV       R6,A
//  800   uint8 newEntry[PROXY_TBL_ENTRY_LEN];
//  801   uint8 currEntry[PROXY_TBL_ENTRY_LEN];
//  802   uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
        MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0xa
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  803   
//  804   osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
        MOV       R4,#0x41
        MOV       R5,#0x0
        MOV       A,#0x50
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
//  805   osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
        MOV       R4,#0x41
        MOV       R5,#0x0
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
//  806   
//  807   
//  808   // if addSink is TRUE then add the sink to current entry
//  809   if ( addSink ) 
        MOV       A,#0x38
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       ?V10,#0x0
        MOV       A,#0x2e
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       A,#0x6f
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V12,R0
        MOV       ?V13,R1
        MOV       ?V14,#0x0
        MOV       A,R6
        MOV       R0,#?V0
        JZ        ??pt_updateLightweightUnicastSink_0
//  810   {
//  811     // if the incomming Sink entry is different to the current entry
//  812     if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R1,?V4
        MOV       R2,?V5
        MOV       R3,?V6
        LCALL     ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_85:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
        MOV       A,R1
        JZ        $+5
        LJMP      ??pt_updateLightweightUnicastSink_1 & 0xFFFF
//  813     {
//  814       // add the sink entry in the next slot if empty
//  815       if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R1,?V12
        MOV       R2,?V13
        MOV       R3,?V14
        LCALL     ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_86:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
        MOV       A,R1
        MOV       R0,#?V0
        JZ        ??pt_updateLightweightUnicastSink_2
//  816       {
//  817         osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN );
        ; Setup parameters for call to function osal_memcpy
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
        LJMP      ??pt_updateLightweightUnicastSink_3 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 165)
//  818         osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
//  819         return TRUE;
//  820       }
//  821     }
//  822     else 
//  823     {
//  824       osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
//  825      return TRUE;
//  826     }
//  827     // if the incomming Sink entry is different to the current entry
//  828     if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
??pt_updateLightweightUnicastSink_2:
        ; Setup parameters for call to function osal_memcmp
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R1,?V8
        MOV       R2,?V9
        MOV       R3,?V10
        LCALL     ??Subroutine13_0 & 0xFFFF
//  829     {
//  830       return FALSE;
//  831     }
//  832   }
??CrossCallReturnLabel_87:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
//  833   else
//  834   {
//  835     // if the incomming Sink entry is the same to the current entry
//  836     if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
//  837     {
//  838       // Move the next sink entry to current
//  839       osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN );
//  840       // Invalidate the sink entry
//  841       osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
//  842       
//  843       // if the sink entry is empty then remove the proxy table entry
//  844       if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
//  845       {
//  846         gp_ResetProxyBasicTblEntry( currEntry );
//  847       }
//  848       osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
//  849       return TRUE;
//  850     }
//  851     // if the incomming Sink entry is the same to the current entry
//  852     else if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
//  853     {
//  854       // Invalidate the sink entry
//  855       osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
//  856       osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
//  857       return TRUE;
//  858     }
//  859   }
//  860   return FALSE;
??pt_updateLightweightUnicastSink_4:
        MOV       R1,#0x0
??pt_updateLightweightUnicastSink_5:
        MOV       A,#-0x72
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R7,#0xf
        LJMP      ?BANKED_LEAVE_XDATA
          CFI CFA_XSP16 add(XSP16, 165)
??pt_updateLightweightUnicastSink_0:
        ; Setup parameters for call to function osal_memcmp
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R1,?V4
        MOV       R2,?V5
        MOV       R3,?V6
        LCALL     ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
        MOV       A,R1
        JZ        ??pt_updateLightweightUnicastSink_6
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       A,#0x31
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V12
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       A,#0x3b
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R1,?V12
        MOV       R2,?V13
        MOV       R3,?V14
        LCALL     ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
        MOV       A,R1
        JZ        ??pt_updateLightweightUnicastSink_1
        ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
??pt_updateLightweightUnicastSink_1:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
        MOV       R4,#0x41
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
        MOV       R1,#0x1
        LJMP      ??pt_updateLightweightUnicastSink_5 & 0xFFFF
??pt_updateLightweightUnicastSink_6:
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R1,?V8
        MOV       R2,?V9
        MOV       R3,?V10
        LCALL     ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_90:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
        MOV       A,R1
        JNZ       $+5
        LJMP      ??pt_updateLightweightUnicastSink_4 & 0xFFFF
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V12
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 168)
??pt_updateLightweightUnicastSink_3:
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       A,#0x3b
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 165)
        SJMP      ??pt_updateLightweightUnicastSink_1
//  861 }
          CFI EndBlock cfiBlock110

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond111 Using cfiCommon0
          CFI Function gp_UpdateProxyTlb
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function gp_UpdateProxyTlb
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function gp_UpdateProxyTlb
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function gp_UpdateProxyTlb
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function gp_UpdateProxyTlb
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function gp_UpdateProxyTlb
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function gp_CheckAnnouncedDevice
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function gp_CheckAnnouncedDevice
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function gp_CheckAnnouncedDevice
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function gp_CheckAnnouncedDevice
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function gp_CheckAnnouncedDevice
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiPicker122 Using cfiCommon1
          CFI (cfiPicker122) NoFunction
          CFI (cfiPicker122) Picker
        MOV       R4,#0x2
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiPicker122
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine12_0:
          CFI Block cfiCond123 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
          CFI Conditional ??CrossCallReturnLabel_81
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function gp_UpdateProxyTlb
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function gp_UpdateProxyTlb
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function gp_UpdateProxyTlb
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function gp_UpdateProxyTlb
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-2
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function gp_UpdateProxyTlb
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function gp_UpdateProxyTlb
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function gp_CheckAnnouncedDevice
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function gp_CheckAnnouncedDevice
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function gp_CheckAnnouncedDevice
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function gp_CheckAnnouncedDevice
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function gp_CheckAnnouncedDevice
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiPicker136 Using cfiCommon1
          CFI (cfiPicker136) NoFunction
          CFI (cfiPicker136) Picker
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiPicker136
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine13_0:
          CFI Block cfiCond137 Using cfiCommon0
          CFI Function gp_UpdateProxyTlb
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function gp_CheckAnnouncedDevice
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function gp_CheckAnnouncedDevice
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function pt_updateLightweightUnicastSink
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function pt_updateLightweightUnicastSink
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function pt_updateLightweightUnicastSink
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function pt_updateLightweightUnicastSink
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function pt_updateLightweightUnicastSink
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function pt_updateLightweightUnicastSink
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 173)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function gp_UpdateProxyTlb
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function gp_UpdateProxyTlb
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function gp_UpdateProxyTlb
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function gp_UpdateProxyTlb
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function gp_UpdateProxyTlb
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function gp_UpdateProxyTlb
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 278)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function gp_CheckAnnouncedDevice
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function gp_CheckAnnouncedDevice
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function gp_CheckAnnouncedDevice
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function gp_CheckAnnouncedDevice
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function gp_CheckAnnouncedDevice
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiPicker159 Using cfiCommon1
          CFI (cfiPicker159) NoFunction
          CFI (cfiPicker159) Picker
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiPicker159
//  862 
//  863 /*********************************************************************
//  864  * @fn          pt_addSinkGroup
//  865  *
//  866  * @brief       To add new sink group entry
//  867  *
//  868  * @param       pNew - New entry array to be added
//  869  *              pCurr - The current entry array in the proxy table
//  870  *
//  871  * @return      TRUE new entry added, FALSE if not
//  872  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  873 static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr )
pt_addSinkGroup:
          CFI Block cfiBlock160 Using cfiCommon0
          CFI Function pt_addSinkGroup
        CODE
//  874 {
        FUNCALL pt_addSinkGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 148, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 148, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_addSinkGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 148, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 148, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_addSinkGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 148, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 148, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_addSinkGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 148, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 148, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_addSinkGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 148, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 148, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_addSinkGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 148, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 148, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 130
        MOV       A,#0x7e
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 145)
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  875   bool newSinkGroup;
//  876   uint8 newEntry[PROXY_TBL_ENTRY_LEN];
//  877   uint8 currEntry[PROXY_TBL_ENTRY_LEN];
//  878   
//  879   osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 148)
        MOV       R4,#0x41
        MOV       R5,#0x0
        MOV       A,#0x44
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 145)
//  880   osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,R6
        MOV       ?V1,R7
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 148)
        MOV       R4,#0x41
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 145)
//  881   
//  882   newSinkGroup = PROXY_TBL_GET_DGROUP( newEntry[PROXY_TBL_ENTRY_OPT] );
//  883   newSinkGroup = PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
//  884   
//  885   if ( newSinkGroup )
//  886   {
//  887     if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
        MOV       A,#0x42
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??pt_addSinkGroup_0
        MOV       A,#0x36
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        ??pt_addSinkGroup_0
//  888     {
//  889       if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
        MOV       A,#0x78
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       A,#0x36
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        MOV       R0,#?V4
        JC        ??pt_addSinkGroup_1
//  890       {
//  891         osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
        ; Setup parameters for call to function osal_memcpy
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 148)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,#0x3a
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 145)
//  892         SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT );
        MOV       A,#0x36
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.0
        SJMP      ??pt_addSinkGroup_2
//  893         osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
//  894         return TRUE;
//  895       }
//  896       else
//  897       {
//  898         osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
??pt_addSinkGroup_1:
        ; Setup parameters for call to function osal_memcpy
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 148)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,#0x3e
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 145)
//  899         SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT );
        MOV       A,#0x36
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.1
??pt_addSinkGroup_2:
        MOVX      @DPTR,A
//  900         osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 148)
        MOV       R4,#0x41
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 145)
//  901         return TRUE;
        MOV       R1,#0x1
        SJMP      ??pt_addSinkGroup_3
//  902       }
//  903     }
//  904   }
//  905   return FALSE;
??pt_addSinkGroup_0:
        MOV       R1,#0x0
??pt_addSinkGroup_3:
        MOV       A,#-0x7e
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock160
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  906 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock161 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock161

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??pt_ZclReadGetProxyEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    pt_ZclReadGetProxyEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGpp_ReadWriteAttrCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGpp_ReadWriteAttrCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_pairingSetProxyTblOptions::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_pairingSetProxyTblOptions

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_PairingUpdateProxyTlb::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_PairingUpdateProxyTlb

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_UpdateProxyTlb::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_UpdateProxyTlb

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_CheckAnnouncedDevice::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_CheckAnnouncedDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_PopulateProxyTblEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_PopulateProxyTblEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??pt_updateLightweightUnicastSink::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    pt_updateLightweightUnicastSink

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??pt_addSinkGroup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    pt_addSinkGroup

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {0, 0}>`:
        DATA8
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_10000:
        DD 65536

        END
//  907 
//  908 /*********************************************************************
//  909  * @fn          pt_lookForGpd
//  910  *
//  911  * @brief       To see if the GPD id is in this NV entry
//  912  *
//  913  * @param       currProxyEntryId - NV ID of the proxy table
//  914  *              pNew - New tabble entry array to be added
//  915  *
//  916  * @return      TRUE if the GPD has an entry in current NV vector
//  917  */
//  918 static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew )
//  919 {
//  920   uint8 rtrn;
//  921 
//  922   uint8 newEntry[PROXY_TBL_ENTRY_LEN];
//  923   uint8 currEntry[PROXY_TBL_ENTRY_LEN];
//  924 
//  925   osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
//  926   
//  927   rtrn = osal_nv_read( currProxyEntryId, 0,
//  928                              PROXY_TBL_ENTRY_LEN, currEntry );
//  929   
//  930   if ( rtrn != SUCCESS )
//  931   {
//  932     return FALSE;
//  933   }
//  934 
//  935   if ( PROXY_TBL_COMP_APPLICTION_ID( newEntry[PROXY_TBL_ENTRY_OPT], currEntry[PROXY_TBL_ENTRY_OPT] ) )
//  936   {
//  937     if ( osal_memcmp( &newEntry[PROXY_TBL_ENTRY_GPD_ID], &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
//  938     {
//  939     return TRUE;
//  940     }
//  941   }
//  942   return FALSE;
//  943 }
//  944 
//  945 #endif
//  946 /*********************************************************************
//  947 *********************************************************************/
//  948 
// 
// 4 589 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//    26 bytes in segment XDATA_ROM_C
//    11 bytes in segment XDATA_Z
// 
//    54 bytes of CODE     memory
//    22 bytes of CONST    memory (+ 4 bytes shared)
// 4 589 bytes of HUGECODE memory
//    11 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
