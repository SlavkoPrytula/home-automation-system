###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               19/Apr/2021  17:59:51
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
#    Command line       =  
#        -f C:\users\slavko\Temp\EW5de2.tmp ("C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Components\stack\bdb\bdb.c" -D BDB_REPORTING -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -lC "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\bdb.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj\bdb.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
      1          /**************************************************************************************************
      2            Filename:       bdb.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the Base Device Behavior functions and attributes.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bdb.h"
     45          #include "ZDApp.h"
     46          #include "OSAL.h"
     47          #include "ZDConfig.h"
     48          #include "hal_led.h"
     49          #include "ZDObject.h"
     50          #include "OSAL_Nv.h"
     51          #include "AddrMgr.h"
     52          #include "ZDSecMgr.h"
     53          #include "nwk.h"
     54          #include "nwk_util.h"
     55          #include "ssp_hash.h"
     56          #ifdef BDB_REPORTING
     57          #include "bdb_Reporting.h"
     58          #endif 
     59          
     60          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     61          #include "gp_interface.h"
     62          #include "gp_common.h"
     63          #include "dgp_stub.h"
     64          #endif
     65          
     66          #include "bdb_interface.h"
     67          
     68          #if defined ( INTER_PAN ) 
     69          #if defined ( BDB_TL_INITIATOR )  
     70          #include "bdb_touchlink_initiator.h"
     71          #endif
     72          #if defined ( BDB_TL_TARGET )  
     73          #include "bdb_touchlink_target.h"
     74          #endif
     75          #endif
     76             
     77          #if defined ( INTER_PAN ) && ( defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET ) )
     78            #include "bdb_touchlink.h"
     79          #endif
     80           
     81          #ifdef MT_APP_CNF_FUNC
     82          #include "MT_APP_CONFIG.h"
     83          #endif
     84             
     85           /*********************************************************************
     86           * MACROS
     87           */
     88          //This is actually the channels used
     89          #define vScanChannels  zgDefaultChannelList
     90             
     91           /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          #define NUMBER_OF_CHANNELS     16
     96          
     97          #define CHANNEL_11_MASK_POS    11
     98          #define CHANNEL_26_MASK_POS    26
     99             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          uint8 bdb_FB_InitiatorCurrentCyclesNumber = 0; //last cycle is #1 (i.e. cycles-left = (bdb_FB_InitiatorCurrentCyclesNumber - 1))
   \                     bdb_FB_InitiatorCurrentCyclesNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    101          
    102          /*********************************************************************
    103           * TYPEDEFS
    104           */
    105           
    106           
    107           /*********************************************************************
    108           * GLOBAL VARIABLES
    109           */
    110          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          byte bdb_TaskID;
   \                     bdb_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    112          bdbAttributes_t bdbAttributes = BDB_ATTRIBUTES_DEFAULT_CONFIG;
   \                     bdbAttributes:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for bdbAttributes>`
   \   000012                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          epList_t *bdb_HeadEpDescriptorList = NULL;
   \                     bdb_HeadEpDescriptorList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          epList_t *bdb_CurrEpDescriptorList = NULL;
   \                     bdb_CurrEpDescriptorList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    115          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          bdbFindingBindingRespondent_t *pRespondentHead = NULL;
   \                     pRespondentHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          bdbFindingBindingRespondent_t *pRespondentCurr = NULL;
   \                     pRespondentCurr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          bdbFindingBindingRespondent_t *pRespondentNext = NULL;
   \                     pRespondentNext:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    119          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          bdbCommissioningProcedureState_t bdbCommissioningProcedureState; 
   \                     bdbCommissioningProcedureState:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          bool bdb_initialization = FALSE;  //Variable to tell if the initialization process has been started
   \                     bdb_initialization:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    122          
    123          //Nwk formation and nwk steering for nodes not in nwk

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124          bool vDoPrimaryScan = TRUE;
   \                     vDoPrimaryScan:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for vDoPrimaryScan>`
   \   000001                REQUIRE __INIT_XDATA_I
    125          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          uint8 zgBdbInstallCodeCRC[INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN] = {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5};
   \                     zgBdbInstallCodeCRC:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zgBdbInstallCodeCRC>`
   \   000012                REQUIRE __INIT_XDATA_I
    127          
    128          //Pointer of the nwk being tried in association process
    129          #if (ZG_BUILD_JOINING_TYPE)
    130          static networkDesc_t *pBDBListNwk = NULL;
    131          #endif
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 bdb_ZclTransactionSequenceNumber=0x00;
   \                     bdb_ZclTransactionSequenceNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          bool touchLinkTargetEnabled = FALSE;
   \                     touchLinkTargetEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136          
    137           /*********************************************************************
    138           * EXTERNAL VARIABLES
    139           */
    140          
    141          extern devStartModes_t devStartMode;
    142          extern bool  requestNewTrustCenterLinkKey;
    143          extern uint32 requestLinkKeyTimeout;
    144          extern uint32 ZDApp_SavedPollRate;
    145          
    146          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
    147          extern bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChangeCB;
    148          extern uint8 bdbIndentifyActiveEndpoint;
    149          #endif
    150          
    151          extern bdbFindingBindingRespondent_t *pRespondentNext;
    152          
    153          #ifndef DISABLE_GREENPOWER_BASIC_PROXY
    154          extern ZDO_DeviceAnnce_t aliasConflictAnnce;
    155          #endif
    156          
    157          /*********************************************************************
    158           * EXTERNAL FUNCTIONS
    159           */
    160          
    161          extern void ZDApp_ResetTimerStart( uint16 delay );
    162          extern void ZDApp_NodeProfileSync( uint8 stackProfile );
    163          extern uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    164          extern uint8 ZDApp_ReadNetworkRestoreState( void );
    165          
    166          extern bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
    167          extern void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
    168          extern void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
    169          
    170          /*********************************************************************
    171           * LOCAL VARIABLES
    172           */
    173          #if (ZG_BUILD_JOINING_TYPE)
    174            static uint8 bdb_nwkAssocRetriesCount = 0;
    175          #endif
    176          #if (ZG_BUILD_COORDINATOR_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177            static bdb_joiningDeviceList_t *bdb_joiningDeviceList = NULL;
   \                     bdb_joiningDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    178          #endif
    179            
    180          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    181          //Latch to save the status success of any attempt in the periodic F&B process  

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          static uint8 bdb_FBStateSuccessLatch = FALSE;
   \                     bdb_FBStateSuccessLatch:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    183          #endif
    184           /*********************************************************************
    185           * LOCAL FUNCTIONS
    186           */
    187          static void bdb_ProcessOSALMsg(bdbInMsg_t *msgPtr);
    188          void bdb_NotifyCommissioningModeStart(uint8 commissioningMode);
    189          static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg);
    190          
    191          #if (ZG_BUILD_JOINING_TYPE)
    192          static void bdb_requestTCStackVersion(void);
    193          static void bdb_requestTCLinkKey(void);
    194          static void bdb_requestVerifyTCLinkKey(void);
    195          static void bdb_tryNwkAssoc(void);
    196          #endif
    197          
    198          
    199          static void bdb_processTimeout(void);
    200          static void bdb_startResumeCommissioningProcess(void);
    201          static void bdb_nwkSteeringDeviceOnNwk(void);
    202          static void bdb_nwkJoiningFormation(bool isJoining);
    203          
    204          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    205          static uint8 gp_ChangeChannelReq(void);
    206          static void gp_CBInit(void);
    207          #endif
    208          
    209          
    210          #if (ZG_BUILD_COORDINATOR_TYPE)
    211          static void bdb_TCProcessJoiningList(void);
    212          static ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove);
    213          #endif
    214          #if (ZG_BUILD_COORDINATOR_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          static bdbGCB_TCLinkKeyExchangeProcess_t  pfnTCLinkKeyExchangeProcessCB = NULL;
   \                     pfnTCLinkKeyExchangeProcessCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    216          #endif

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          static bdbGCB_CommissioningStatus_t       pfnCommissioningStatusCB = NULL; 
   \                     pfnCommissioningStatusCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    218          #if (ZG_BUILD_JOINING_TYPE)
    219          static bdbGCB_CBKETCLinkKeyExchange_t     pfnCBKETCLinkKeyExchange = NULL;
    220          static bdbGCB_FilterNwkDesc_t             pfnFilterNwkDesc = NULL;   
    221          #endif
    222          
    223          
    224          
    225          void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc);
    226          void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect);
    227          uint16 bdb_crcReflect (uint16 crc, uint16 bitnum);
    228          uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect);
    229          void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg);
    230          
    231          /*********************************************************************
    232           * PUBLIC FUNCTIONS
    233           *********************************************************************/
    234          void bdb_filterNwkDisc(void);
    235          ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk);
    236          
    237          ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr);
    238          void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr);
    239          
    240           /*********************************************************************
    241           * @fn          bdb_Init
    242           *
    243           * @brief       Initialization function for the Base Device Behavior.
    244           *
    245           * @param       task_id - bdb_TaskID Task ID
    246           *
    247           * @return      none
    248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          void bdb_Init( byte task_id )
   \                     bdb_Init:
    250          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    251            bdb_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#bdb_TaskID
   \   00000A   F0           MOVX      @DPTR,A
    252              
    253          #if (ZG_BUILD_COORDINATOR_TYPE)
    254            if(ZG_DEVICE_COORDINATOR_TYPE)
    255            {
    256              if(bdbAttributes.bdbJoinUsesInstallCodeKey)
   \   00000B   90....       MOV       DPTR,#bdbAttributes + 15
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6006         JZ        ??bdb_Init_0
    257              {
    258                zgAllowInstallCodes = ZG_IC_MUST_USED;
   \   000011   90....       MOV       DPTR,#zgAllowInstallCodes
   \   000014   7402         MOV       A,#0x2
   \   000016   F0           MOVX      @DPTR,A
    259              }
    260            }
    261          #endif
    262            
    263          #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )  
    264            touchLinkInitiator_InitDevice( );
    265          #endif
    266          
    267          #if (BDB_REPORTING)
    268            bdb_RepInit();
   \                     ??bdb_Init_0:
   \   000017                ; Setup parameters for call to function bdb_RepInit
   \   000017   12....       LCALL     `??bdb_RepInit::?relay`; Banked call to: bdb_RepInit
    269          #endif  
    270            
    271            //Register ZDO callbacks
    272            ZDO_RegisterForZDOMsg ( task_id, Node_Desc_rsp );
   \   00001A                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001A   7A02         MOV       R2,#0x2
   \   00001C   7B80         MOV       R3,#-0x80
   \   00001E   EE           MOV       A,R6
   \   00001F   F9           MOV       R1,A
   \   000020   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    273          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
    274            ZDO_RegisterForZDOMsg ( task_id, IEEE_addr_rsp );
   \   000023                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000023   7A01         MOV       R2,#0x1
   \   000025   7B80         MOV       R3,#-0x80
   \   000027   EE           MOV       A,R6
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    275            ZDO_RegisterForZDOMsg ( task_id, Simple_Desc_rsp );
   \   00002C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00002C   7A04         MOV       R2,#0x4
   \   00002E   7B80         MOV       R3,#-0x80
   \   000030   EE           MOV       A,R6
   \   000031   F9           MOV       R1,A
   \   000032   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    276          #endif
    277            
    278          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    279            gp_RegisterGPChangeChannelReqForBDBCB(gp_ChangeChannelReq);
   \   000035                ; Setup parameters for call to function gp_RegisterGPChangeChannelReqForBDBCB
   \   000035   7A..         MOV       R2,#`??gp_ChangeChannelReq::?relay` & 0xff
   \   000037   7B..         MOV       R3,#(`??gp_ChangeChannelReq::?relay` >> 8) & 0xff
   \   000039   12....       LCALL     `??gp_RegisterGPChangeChannelReqForBDBCB::?relay`; Banked call to: gp_RegisterGPChangeChannelReqForBDBCB
    280            gp_CBInit();
   \   00003C   90....       MOV       DPTR,#GP_DataCnfGCB
   \   00003F   74..         MOV       A,#`??GP_DataCnf::?relay` & 0xff
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   74..         MOV       A,#(`??GP_DataCnf::?relay` >> 8) & 0xff
   \   000045   F0           MOVX      @DPTR,A
   \   000046   90....       MOV       DPTR,#GP_endpointInitGCB
   \   000049   74..         MOV       A,#`??gp_endpointInit::?relay` & 0xff
   \   00004B   F0           MOVX      @DPTR,A
   \   00004C   A3           INC       DPTR
   \   00004D   74..         MOV       A,#(`??gp_endpointInit::?relay` >> 8) & 0xff
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   90....       MOV       DPTR,#GP_expireDuplicateFilteringGCB
   \   000053   74..         MOV       A,#`??gp_expireDuplicateFiltering::?relay` & 0xff
   \   000055   F0           MOVX      @DPTR,A
   \   000056   A3           INC       DPTR
   \   000057   74..         MOV       A,#(`??gp_expireDuplicateFiltering::?relay` >> 8) & 0xff
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   90....       MOV       DPTR,#GP_stopCommissioningModeGCB
   \   00005D   74..         MOV       A,#`??gp_stopCommissioningMode::?relay` & 0xff
   \   00005F   F0           MOVX      @DPTR,A
   \   000060   A3           INC       DPTR
   \   000061   74..         MOV       A,#(`??gp_stopCommissioningMode::?relay` >> 8) & 0xff
   \   000063   F0           MOVX      @DPTR,A
   \   000064   90....       MOV       DPTR,#GP_returnOperationalChannelGCB
   \   000067   74..         MOV       A,#`??gp_returnOperationalChannel::?relay` & 0xff
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   A3           INC       DPTR
   \   00006B   74..         MOV       A,#(`??gp_returnOperationalChannel::?relay` >> 8) & 0xff
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   90....       MOV       DPTR,#GP_DataIndGCB
   \   000071   74..         MOV       A,#`??GP_DataInd::?relay` & 0xff
   \   000073   F0           MOVX      @DPTR,A
   \   000074   A3           INC       DPTR
   \   000075   74..         MOV       A,#(`??GP_DataInd::?relay` >> 8) & 0xff
   \   000077   F0           MOVX      @DPTR,A
   \   000078   90....       MOV       DPTR,#GP_SecReqGCB
   \   00007B   74..         MOV       A,#`??GP_SecReq::?relay` & 0xff
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   A3           INC       DPTR
   \   00007F   74..         MOV       A,#(`??GP_SecReq::?relay` >> 8) & 0xff
   \   000081   F0           MOVX      @DPTR,A
   \   000082   90....       MOV       DPTR,#GP_CheckAnnouncedDeviceGCB
   \   000085   74..         MOV       A,#`??gp_CheckAnnouncedDevice::?relay` & 0xff
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A3           INC       DPTR
   \   000089   74..         MOV       A,#(`??gp_CheckAnnouncedDevice::?relay` >> 8) & 0xff
   \   00008B   F0           MOVX      @DPTR,A
   \   00008C   90....       MOV       DPTR,#GP_aliasConflictAnnce
   \   00008F   74..         MOV       A,#aliasConflictAnnce & 0xff
   \   000091   F0           MOVX      @DPTR,A
   \   000092   A3           INC       DPTR
   \   000093   74..         MOV       A,#(aliasConflictAnnce >> 8) & 0xff
   \   000095   F0           MOVX      @DPTR,A
   \   000096                ; Setup parameters for call to function gp_endpointInit
   \   000096   12....       LCALL     `??gp_endpointInit::?relay`; Banked call to: gp_endpointInit
    281          #endif
    282          }
   \   000099                REQUIRE ?Subroutine0
   \   000099                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    283          
    284          /*********************************************************************
    285           * @fn      bdb_RegisterSimpleDescriptor
    286           *
    287           * @brief   Register the Simple descriptor. This function also registers 
    288           *          the profile's cluster conversion table.
    289           *
    290           * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
    291           *
    292           * @return  none
    293           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    294          void bdb_RegisterSimpleDescriptor( SimpleDescriptionFormat_t *simpleDesc )
   \                     bdb_RegisterSimpleDescriptor:
    295          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    296            endPointDesc_t *epDesc;
    297          
    298            // Register the application's endpoint descriptor
    299            //  - This memory is allocated and never freed.
    300            epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A07         MOV       R2,#0x7
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    301            if ( epDesc )
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   6023         JZ        ??bdb_RegisterSimpleDescriptor_0
    302            {
    303              // Fill out the endpoint description.
    304              epDesc->endPoint = simpleDesc->EndPoint;
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   E0           MOVX      A,@DPTR
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   F0           MOVX      @DPTR,A
    305              epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   74..         MOV       A,#zcl_TaskID & 0xff
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   74..         MOV       A,#(zcl_TaskID >> 8) & 0xff
   \   000026   12....       LCALL     ?Subroutine11 & 0xFFFF
    306              epDesc->simpleDesc = simpleDesc;
   \                     ??CrossCallReturnLabel_0:
   \   000029   EE           MOV       A,R6
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   EF           MOV       A,R7
   \   00002D   12....       LCALL     ?Subroutine11 & 0xFFFF
    307              epDesc->latencyReq = noLatencyReqs;
   \                     ??CrossCallReturnLabel_1:
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
    308          
    309              // Register the endpoint description with the AF
    310              afRegister( epDesc );
   \   000034                ; Setup parameters for call to function afRegister
   \   000034   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    311            }
    312          }
   \                     ??bdb_RegisterSimpleDescriptor_0:
   \   000037   02....       LJMP      ??Subroutine55_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    313          
    314          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
    315          /*********************************************************************
    316           * @fn      bdb_ZclIdentifyCmdInd
    317           *
    318           * @brief   Callback from the ZCL General Cluster Library when
    319           *          it received an Identity Command for this application.
    320           *
    321           * @param   identifyTime - the number of seconds to identify yourself
    322           * @param   endpoint - destination endpoint
    323           *
    324           * @return  none
    325           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    326          void bdb_ZclIdentifyCmdInd( uint16 identifyTime, uint8 endpoint )
   \                     bdb_ZclIdentifyCmdInd:
    327          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V0,R1
    328            zclAttrRec_t identifyAttrRec;
    329            
    330            if ( zclFindAttrRec( endpoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    331                                ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
   \   000010                ; Setup parameters for call to function zclFindAttrRec
   \   000010   A8..         MOV       R0,?XSP + 0
   \   000012   A9..         MOV       R1,?XSP + 1
   \   000014   88..         MOV       ?V2,R0
   \   000016   89..         MOV       ?V3,R1
   \   000018   78..         MOV       R0,#?V2
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   7C00         MOV       R4,#0x0
   \   00001F   7D00         MOV       R5,#0x0
   \   000021   7A03         MOV       R2,#0x3
   \   000023   7B00         MOV       R3,#0x0
   \   000025   A9..         MOV       R1,?V0
   \   000027   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002F   E9           MOV       A,R1
   \   000030   604A         JZ        ??bdb_ZclIdentifyCmdInd_0
    332            {
    333              //If we are processing an actual change
    334              if(*(uint16*)identifyAttrRec.attr.dataPtr != identifyTime)
   \   000032   7406         MOV       A,#0x6
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   6E           XRL       A,R6
   \   00003C   7003         JNZ       ??bdb_ZclIdentifyCmdInd_1
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   6F           XRL       A,R7
   \                     ??bdb_ZclIdentifyCmdInd_1:
   \   000041   6039         JZ        ??bdb_ZclIdentifyCmdInd_0
    335              {
    336                if ( identifyTime > 0 )
   \   000043   EE           MOV       A,R6
   \   000044   4F           ORL       A,R7
   \   000045   8882         MOV       DPL,R0
   \   000047   8983         MOV       DPH,R1
   \   000049   6017         JZ        ??bdb_ZclIdentifyCmdInd_2
    337                {
    338                  *((uint16*)identifyAttrRec.attr.dataPtr) = identifyTime;
   \   00004B   EE           MOV       A,R6
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   EF           MOV       A,R7
   \   00004F   F0           MOVX      @DPTR,A
    339                  osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   000050                ; Setup parameters for call to function osal_start_timerEx
   \   000050   90....       MOV       DPTR,#__Constant_3e8
   \   000053   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000056   7A00         MOV       R2,#0x0
   \   000058   7B20         MOV       R3,#0x20
   \   00005A   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    340                }
   \                     ??CrossCallReturnLabel_100:
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000060   800A         SJMP      ??CrossCallReturnLabel_111
    341                else if ( identifyTime <= 0 )
    342                {
    343                  *((uint16*)identifyAttrRec.attr.dataPtr) = 0;
   \                     ??bdb_ZclIdentifyCmdInd_2:
   \   000062   E4           CLR       A
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   F0           MOVX      @DPTR,A
    344                  osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
   \   000066                ; Setup parameters for call to function osal_stop_timerEx
   \   000066   FA           MOV       R2,A
   \   000067   7B20         MOV       R3,#0x20
   \   000069   12....       LCALL     ??Subroutine58_0 & 0xFFFF
    345                }
    346                
    347                if(pfnIdentifyTimeChangeCB != NULL)
   \                     ??CrossCallReturnLabel_111:
   \   00006C   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   00006F   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000072   6008         JZ        ??bdb_ZclIdentifyCmdInd_0
    348                {
    349                  pfnIdentifyTimeChangeCB(endpoint);
   \   000074                ; Setup parameters for indirect call
   \   000074   A9..         MOV       R1,?V0
   \   000076   12....       LCALL     ??Subroutine51_0 & 0xFFFF
    350                }
    351              }
    352            }
   \                     ??CrossCallReturnLabel_68:
   \   000079   12....       LCALL     ?CALL_IND
    353          }
   \                     ??bdb_ZclIdentifyCmdInd_0:
   \   00007C   7408         MOV       A,#0x8
   \   00007E   02....       LJMP      ??Subroutine49_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000008   7404         MOV       A,#0x4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000008   22           RET
    354          #endif
    355          
    356          
    357          #if (ZG_BUILD_JOINING_TYPE) 
    358           /*********************************************************************
    359           * @fn          bdb_setActiveCentralizedLinkKey
    360           *
    361           * @brief       Set the active centralized key to be used, Global or IC derived. See zstack_CentralizedLinkKeyModes_t
    362           *
    363           * @param       zstack_CentralizedLinkKeyModes - Key to be used for joining centralized network
    364           * @param       pKey - Key to be used (if any)
    365           *
    366           * @return      ZStatus_t - ZFailure when no valid BDB_INSTALL_CODE_USE is used
    367           *                          ZInvalidParameter when IC buffer is null
    368           */
    369          ZStatus_t bdb_setActiveCentralizedLinkKey(uint8 zstack_CentralizedLinkKeyModes, uint8* pKey)
    370          {
    371            ZStatus_t Status;
    372          
    373            uint8 extAddr[Z_EXTADDR_LEN];
    374          
    375            osal_memset(extAddr,0x00,Z_EXTADDR_LEN);
    376          
    377            if(pKey == NULL)
    378            {
    379              return ZInvalidParameter;
    380            }
    381          
    382            //Clear it, if the request requires it, it will be set
    383            gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = FALSE;
    384          
    385            switch(zstack_CentralizedLinkKeyModes)
    386            {
    387              case zstack_UseDefaultGlobalTrustCenterLinkKey:
    388                //Set the default key to be used in centralized networks as defaultTCLinkKey
    389                Status = APSME_SetDefaultKey();
    390              break;
    391          
    392              case zstack_UseInstallCodeWithFallback:
    393                //same as zstack_UseInstallCode but attempt default TRUE
    394                gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
    395              case zstack_UseInstallCode:
    396                 //Set the install code as default key
    397                Status = bdb_addInstallCode(pKey,extAddr);
    398              break;
    399          
    400              case zstack_UseAPSKeyWithFallback:
    401                //same as zstack_UseAPSKey but attempt default TRUE
    402                gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
    403              case zstack_UseAPSKey:
    404                //Set the key as global default
    405                Status = APSME_AddTCLinkKey(pKey,extAddr);
    406              break;
    407              
    408              default:
    409                Status = ZInvalidParameter;
    410              break;
    411            }
    412          
    413            return Status;
    414          }
    415          #endif
    416          
    417          
    418              
    419            
    420          /******************************************************************************
    421           * @fn          bdb_addInstallCode
    422           *
    423           * @brief       Interface to add an install codes and adds a APS TC Link key.
    424           *
    425           * @param       pInstallCode - [in] Install Code with CRC (buffer size of 18 bytes).
    426           *              pExt - [in] Extended address of the node.
    427           *
    428           * @return      ZStatus_t
    429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          ZStatus_t bdb_addInstallCode(uint8* pInstallCode, uint8* pExt)
   \                     bdb_addInstallCode:
    431          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    432            uint8  hashOutput[16];
    433            uint16 CRC;
    434            
    435          #if (ZG_BUILD_COORDINATOR_TYPE)
    436            if(ZG_DEVICE_COORDINATOR_TYPE)
    437            {
    438              if(zgAllowInstallCodes == ZG_IC_NOT_SUPPORTED)
   \   000012   90....       MOV       DPTR,#zgAllowInstallCodes
   \   000015   E0           MOVX      A,@DPTR
   \   000016   7004         JNZ       ??bdb_addInstallCode_0
    439              {
    440                return ZFailure;
   \   000018   7901         MOV       R1,#0x1
   \   00001A   805C         SJMP      ??bdb_addInstallCode_1
    441              }
    442            }
    443          #endif
    444                 
    445            if((pInstallCode == NULL) || (pExt == NULL))
   \                     ??bdb_addInstallCode_0:
   \   00001C   EA           MOV       A,R2
   \   00001D   4F           ORL       A,R7
   \   00001E   601F         JZ        ??bdb_addInstallCode_2
   \   000020   EC           MOV       A,R4
   \   000021   4D           ORL       A,R5
   \   000022   601B         JZ        ??bdb_addInstallCode_2
    446            {
    447              return ZInvalidParameter;
    448            }
    449            
    450            CRC = bdb_GenerateInstallCodeCRC(pInstallCode);
   \   000024                ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
   \   000024   12....       LCALL     `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
   \   000027   8A..         MOV       ?V2,R2
   \   000029   8B..         MOV       ?V3,R3
    451          
    452            //Validate CRC
    453            if(CRC != osal_build_uint16(&pInstallCode[INSTALL_CODE_LEN]))
   \   00002B                ; Setup parameters for call to function osal_build_uint16
   \   00002B   EE           MOV       A,R6
   \   00002C   2410         ADD       A,#0x10
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   3F           ADDC      A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000035   EA           MOV       A,R2
   \   000036   65..         XRL       A,?V2
   \   000038   7003         JNZ       ??bdb_addInstallCode_3
   \   00003A   EB           MOV       A,R3
   \   00003B   65..         XRL       A,?V3
   \                     ??bdb_addInstallCode_3:
   \   00003D   6004         JZ        ??bdb_addInstallCode_4
    454            {
    455              return ZInvalidParameter;
   \                     ??bdb_addInstallCode_2:
   \   00003F   7902         MOV       R1,#0x2
   \   000041   8035         SJMP      ??bdb_addInstallCode_1
    456            }
    457          
    458            sspMMOHash (NULL, 0, pInstallCode,(INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN) * BITS_PER_BYTE, hashOutput);
   \                     ??bdb_addInstallCode_4:
   \   000043                ; Setup parameters for call to function sspMMOHash
   \   000043   A8..         MOV       R0,?XSP + 0
   \   000045   A9..         MOV       R1,?XSP + 1
   \   000047   88..         MOV       ?V2,R0
   \   000049   89..         MOV       ?V3,R1
   \   00004B   78..         MOV       R0,#?V2
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   75..90       MOV       ?V2,#-0x70
   \   000053   75..00       MOV       ?V3,#0x0
   \   000056   78..         MOV       R0,#?V2
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   EE           MOV       A,R6
   \   00005C   FC           MOV       R4,A
   \   00005D   EF           MOV       A,R7
   \   00005E   FD           MOV       R5,A
   \   00005F   7900         MOV       R1,#0x0
   \   000061   7A00         MOV       R2,#0x0
   \   000063   7B00         MOV       R3,#0x0
   \   000065   12....       LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
   \   000068   7404         MOV       A,#0x4
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
    459          
    460            return APSME_AddTCLinkKey(hashOutput,pExt);
   \   00006D                ; Setup parameters for call to function APSME_AddTCLinkKey
   \   00006D   AC..         MOV       R4,?V0
   \   00006F   AD..         MOV       R5,?V1
   \   000071   AA..         MOV       R2,?XSP + 0
   \   000073   AB..         MOV       R3,?XSP + 1
   \   000075   12....       LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
   \                     ??bdb_addInstallCode_1:
   \   000078   7410         MOV       A,#0x10
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007D   7F06         MOV       R7,#0x6
   \   00007F   02....       LJMP      ?BANKED_LEAVE_XDATA
    461          }    
    462              
    463          
    464          #if (ZG_BUILD_COORDINATOR_TYPE)
    465           /*********************************************************************
    466           * @fn      bdb_RegisterTCLinkKeyExchangeProcessCB
    467           *
    468           * @brief   Register a callback to receive notifications on the joining devices 
    469           *          and its status on TC link key exchange
    470           *
    471           * @param   bdbGCB_TCLinkKeyExchangeProcess - application callback 
    472           *          (extended address of device, status: 0 = Joining, 1 = TC link key exchange success, 2 = TC link key exchange failed)
    473           *
    474           * @return  none
    475           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    476          void bdb_RegisterTCLinkKeyExchangeProcessCB(bdbGCB_TCLinkKeyExchangeProcess_t bdbGCB_TCLinkKeyExchangeProcess)
   \                     bdb_RegisterTCLinkKeyExchangeProcessCB:
    477          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    478            if(bdbGCB_TCLinkKeyExchangeProcess != NULL)
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   6008         JZ        ??bdb_RegisterTCLinkKeyExchangeProcessCB_0
    479            {
    480              pfnTCLinkKeyExchangeProcessCB = bdbGCB_TCLinkKeyExchangeProcess;
   \   000008   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   00000B   EA           MOV       A,R2
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   EB           MOV       A,R3
   \   00000F   F0           MOVX      @DPTR,A
    481            }
    482          }
   \                     ??bdb_RegisterTCLinkKeyExchangeProcessCB_0:
   \   000010   02....       LJMP      ??Subroutine46_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    483          
    484          
    485          
    486           /*********************************************************************
    487           * @fn          bdb_setTCRequireKeyExchange
    488           *
    489           * @brief       Set the bdb_setTCRequireKeyExchange attribute
    490           *
    491           * @param       isKeyExchangeRequired - True if TC will remove devices that do 
    492           *              not perform key exchange after bdbTrustCenterNodeJoinTimeout, 
    493           *              False to not remove devices.
    494           *
    495           * @return      none
    496           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          void bdb_setTCRequireKeyExchange(bool isKeyExchangeRequired)
   \                     bdb_setTCRequireKeyExchange:
    498          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    499            bdbAttributes.bdbTrustCenterRequireKeyExchange = isKeyExchangeRequired;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#bdbAttributes + 17
   \   000008   02....       LJMP      ??Subroutine45_0 & 0xFFFF
    500          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine46_0
   \   000001                ; // Fall through to label ??Subroutine46_0
    501          
    502          
    503          
    504           /*********************************************************************
    505           * @fn          bdb_TCAddJoiningDevice
    506           *
    507           * @brief       Add a joining device to the list of devices that must request a 
    508           *              key before bdbTrustCenterNodeJoinTimeout.
    509           *
    510           * @param       parentAddr - Address of the parent device
    511           * @param       JoiningExtAddr - IEEE address of the joining device
    512           *
    513           * @return      ZStatus_t - ZFailure No memory to allocate the device in the list
    514           *                          ZInvalidParameter
    515           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    516          ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr)
   \                     bdb_TCAddJoiningDevice:
    517          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
    518            bdb_joiningDeviceList_t* tempJoiningDescNode;
    519            
    520            if((parentAddr == INVALID_NODE_ADDR) || (JoiningExtAddr == NULL))
   \   00000E   74FE         MOV       A,#-0x2
   \   000010   6A           XRL       A,R2
   \   000011   7003         JNZ       ??bdb_TCAddJoiningDevice_0
   \   000013   74FF         MOV       A,#-0x1
   \   000015   6B           XRL       A,R3
   \                     ??bdb_TCAddJoiningDevice_0:
   \   000016   6004         JZ        ??bdb_TCAddJoiningDevice_1
   \   000018   EC           MOV       A,R4
   \   000019   4D           ORL       A,R5
   \   00001A   7005         JNZ       ??bdb_TCAddJoiningDevice_2
    521            {
    522              return ZInvalidParameter;
   \                     ??bdb_TCAddJoiningDevice_1:
   \   00001C   7902         MOV       R1,#0x2
   \   00001E   02....       LJMP      ??bdb_TCAddJoiningDevice_3 & 0xFFFF
    523            }
    524            
    525            //If the list was empty and element was allocated, then start the timer
    526            if(bdb_joiningDeviceList == NULL)
   \                     ??bdb_TCAddJoiningDevice_2:
   \   000021   8C..         MOV       ?V0,R4
   \   000023   8D..         MOV       ?V1,R5
   \   000025   75..00       MOV       ?V2,#0x0
   \   000028   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   00002B   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00002E   7037         JNZ       ??bdb_TCAddJoiningDevice_4
    527            {
    528              bdb_joiningDeviceList = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
   \   000030                ; Setup parameters for call to function osal_mem_alloc
   \   000030   7A0D         MOV       R2,#0xd
   \   000032   7B00         MOV       R3,#0x0
   \   000034   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000037   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   00003A   EA           MOV       A,R2
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   A3           INC       DPTR
   \   00003D   EB           MOV       A,R3
   \   00003E   F0           MOVX      @DPTR,A
    529              if(bdb_joiningDeviceList == NULL)
   \   00003F   F9           MOV       R1,A
   \   000040   EA           MOV       A,R2
   \   000041   49           ORL       A,R1
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??bdb_TCAddJoiningDevice_5 & 0xFFFF
    530              {
    531                return ZFailure;
    532              }
    533             
    534              osal_start_reload_timer(bdb_TaskID,BDB_TC_JOIN_TIMEOUT,1000);
   \   000047                ; Setup parameters for call to function osal_start_reload_timer
   \   000047   90....       MOV       DPTR,#__Constant_3e8
   \   00004A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00004D   7A00         MOV       R2,#0x0
   \   00004F   7B08         MOV       R3,#0x8
   \   000051   90....       MOV       DPTR,#bdb_TaskID
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   12....       LCALL     `??osal_start_reload_timer::?relay`; Banked call to: osal_start_reload_timer
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
    535              tempJoiningDescNode = bdb_joiningDeviceList;
   \   00005E   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FE           MOV       R6,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   806F         SJMP      ??bdb_TCAddJoiningDevice_6
    536            }
    537            //if the list was not empty then add the entry at the end of the list
    538            else
    539            {
    540              tempJoiningDescNode = bdb_joiningDeviceList;
   \                     ??bdb_TCAddJoiningDevice_4:
   \   000067   12....       LCALL     ?Subroutine36 & 0xFFFF
    541              
    542              //Validate that this is not already in the list... somehow
    543              if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
   \                     ??CrossCallReturnLabel_120:
   \   00006A                ; Setup parameters for call to function osal_memcmp
   \   00006A   8882         MOV       DPL,R0
   \   00006C   F583         MOV       DPH,A
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A982         MOV       R1,DPL
   \   000072   AA83         MOV       R2,DPH
   \   000074   89..         MOV       ?V8,R1
   \   000076   8A..         MOV       ?V9,R2
   \   000078   75..00       MOV       ?V10,#0x0
   \   00007B   78..         MOV       R0,#?V8
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000080   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
   \   000086   E9           MOV       A,R1
   \   000087   7030         JNZ       ??bdb_TCAddJoiningDevice_7
    544              {
    545                //The device added is already in the list, refresh its time and do nothing else
    546                tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
    547                return ZSuccess;
    548              }
    549              
    550              while(tempJoiningDescNode->nextDev != NULL)
   \                     ??bdb_TCAddJoiningDevice_8:
   \   000089   EE           MOV       A,R6
   \   00008A   240B         ADD       A,#0xb
   \   00008C   FE           MOV       R6,A
   \   00008D   5001         JNC       ??bdb_TCAddJoiningDevice_9
   \   00008F   0F           INC       R7
   \                     ??bdb_TCAddJoiningDevice_9:
   \   000090   F582         MOV       DPL,A
   \   000092   8F83         MOV       DPH,R7
   \   000094   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000097   6026         JZ        ??bdb_TCAddJoiningDevice_10
    551              {
    552                tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \   000099   E8           MOV       A,R0
   \   00009A   FE           MOV       R6,A
   \   00009B   E9           MOV       A,R1
   \   00009C   FF           MOV       R7,A
    553                
    554                //Validate that this is not already in the list... somehow
    555                if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
   \   00009D                ; Setup parameters for call to function osal_memcmp
   \   00009D   8882         MOV       DPL,R0
   \   00009F   F583         MOV       DPH,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A982         MOV       R1,DPL
   \   0000A5   AA83         MOV       R2,DPH
   \   0000A7   89..         MOV       ?V8,R1
   \   0000A9   8A..         MOV       ?V9,R2
   \   0000AB   78..         MOV       R0,#?V8
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B0   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B6   E9           MOV       A,R1
   \   0000B7   60D0         JZ        ??bdb_TCAddJoiningDevice_8
    556                {
    557                  //The device added is already in the list, refresh its time and do nothing else
    558                  tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
   \                     ??bdb_TCAddJoiningDevice_7:
   \   0000B9   12....       LCALL     ?Subroutine18 & 0xFFFF
    559                  return ZSuccess;
   \                     ??CrossCallReturnLabel_6:
   \   0000BC   02....       LJMP      ??bdb_TCAddJoiningDevice_11 & 0xFFFF
    560                }
    561              }
    562              
    563              tempJoiningDescNode->nextDev = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
   \                     ??bdb_TCAddJoiningDevice_10:
   \   0000BF                ; Setup parameters for call to function osal_mem_alloc
   \   0000BF   7A0D         MOV       R2,#0xd
   \   0000C1   7B00         MOV       R3,#0x0
   \   0000C3   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C6   8B..         MOV       ?V5,R3
   \   0000C8   A9..         MOV       R1,?V5
   \   0000CA   12....       LCALL     ??Subroutine59_0 & 0xFFFF
    564              if(tempJoiningDescNode->nextDev == NULL)
   \                     ??CrossCallReturnLabel_117:
   \   0000CD   7004         JNZ       ??bdb_TCAddJoiningDevice_12
    565              {
    566                return ZFailure;
   \                     ??bdb_TCAddJoiningDevice_5:
   \   0000CF   7901         MOV       R1,#0x1
   \   0000D1   807D         SJMP      ??bdb_TCAddJoiningDevice_3
    567              }
    568              
    569              tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \                     ??bdb_TCAddJoiningDevice_12:
   \   0000D3   EA           MOV       A,R2
   \   0000D4   FE           MOV       R6,A
   \   0000D5   EB           MOV       A,R3
   \                     ??bdb_TCAddJoiningDevice_6:
   \   0000D6   FF           MOV       R7,A
    570            }
    571            
    572            if(pfnTCLinkKeyExchangeProcessCB)
   \   0000D7   EE           MOV       A,R6
   \   0000D8   2402         ADD       A,#0x2
   \   0000DA   F5..         MOV       ?V4,A
   \   0000DC   E4           CLR       A
   \   0000DD   3F           ADDC      A,R7
   \   0000DE   F5..         MOV       ?V5,A
   \   0000E0   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   0000E3   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000E6   603E         JZ        ??bdb_TCAddJoiningDevice_13
    573            {
    574              bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    575              osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   0000E8                ; Setup parameters for call to function osal_memcpy
   \   0000E8   85....       MOV       ?V8,?V4
   \   0000EB   85....       MOV       ?V9,?V5
   \   0000EE   75..00       MOV       ?V10,#0x0
   \   0000F1   78..         MOV       R0,#?V8
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F6   7C08         MOV       R4,#0x8
   \   0000F8   7D00         MOV       R5,#0x0
   \   0000FA   7404         MOV       A,#0x4
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000102   12....       LCALL     ?DEALLOC_XSTACK8
    576              bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_JOINING;
   \   000105   85..82       MOV       DPL,?XSP + 0
   \   000108   85..83       MOV       DPH,?XSP + 1
   \   00010B   E4           CLR       A
   \   00010C   F0           MOVX      @DPTR,A
    577              
    578              bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
   \   00010D                ; Setup parameters for call to function bdb_SendMsg
   \   00010D   A8..         MOV       R0,?XSP + 0
   \   00010F   A9..         MOV       R1,?XSP + 1
   \   000111   88..         MOV       ?V8,R0
   \   000113   89..         MOV       ?V9,R1
   \   000115   78..         MOV       R0,#?V8
   \   000117   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011A   7C09         MOV       R4,#0x9
   \   00011C   7B00         MOV       R3,#0x0
   \   00011E   7A09         MOV       R2,#0x9
   \   000120   12....       LCALL     ??Subroutine44_0 & 0xFFFF
    579            }
   \                     ??CrossCallReturnLabel_62:
   \   000123   12....       LCALL     ?DEALLOC_XSTACK8
    580            
    581            tempJoiningDescNode->nextDev = NULL;
   \                     ??bdb_TCAddJoiningDevice_13:
   \   000126   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000129   E4           CLR       A
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   A3           INC       DPTR
   \   00012C   F0           MOVX      @DPTR,A
    582            tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
   \   00012D   12....       LCALL     ?Subroutine18 & 0xFFFF
    583            tempJoiningDescNode->parentAddr = parentAddr;
   \                     ??CrossCallReturnLabel_7:
   \   000130   8E82         MOV       DPL,R6
   \   000132   8F83         MOV       DPH,R7
   \   000134   E5..         MOV       A,?V6
   \   000136   F0           MOVX      @DPTR,A
   \   000137   A3           INC       DPTR
   \   000138   E5..         MOV       A,?V7
   \   00013A   F0           MOVX      @DPTR,A
    584            osal_memcpy(tempJoiningDescNode->bdbJoiningNodeEui64, JoiningExtAddr, Z_EXTADDR_LEN);
   \   00013B                ; Setup parameters for call to function osal_memcpy
   \   00013B   78..         MOV       R0,#?V0
   \   00013D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000140   7C08         MOV       R4,#0x8
   \   000142   7D00         MOV       R5,#0x0
   \   000144   AA..         MOV       R2,?V4
   \   000146   AB..         MOV       R3,?V5
   \   000148   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00014B   12....       LCALL     ?DEALLOC_XSTACK8
    585            
    586            return ZSuccess;
   \                     ??bdb_TCAddJoiningDevice_11:
   \   00014E   7900         MOV       R1,#0x0
   \                     ??bdb_TCAddJoiningDevice_3:
   \   000150                REQUIRE ?Subroutine4
   \   000150                ; // Fall through to label ?Subroutine4
    587          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7409         MOV       A,#0x9
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005   7F0B         MOV       R7,#0xb
   \   000007   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV       DPTR,#bdbAttributes + 16
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8E82         MOV       DPL,R6
   \   000006   8F83         MOV       DPH,R7
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine40_0
   \   000004                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EE           MOV       A,R6
   \   000001   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000004   3F           ADDC      A,R7
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   240B         ADD       A,#0xb
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   7C08         MOV       R4,#0x8
   \   000002   7D00         MOV       R5,#0x0
   \   000004   A9..         MOV       R1,?V0
   \   000006   AA..         MOV       R2,?V1
   \   000008   AB..         MOV       R3,?V2
   \   00000A                REQUIRE ??Subroutine42_0
   \   00000A                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000008   7402         MOV       A,#0x2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   EA           MOV       A,R2
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   EB           MOV       A,R3
   \   000008   F0           MOVX      @DPTR,A
   \   000009   EA           MOV       A,R2
   \   00000A   49           ORL       A,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000003                REQUIRE ??Subroutine60_0
   \   000003                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
    588          
    589          /****************************************************************************
    590           * @fn          bdb_TCProcessJoiningList
    591           *
    592           * @brief       Process the timer to handle the joining devices if the TC link 
    593           *              key is mandatory for all devices
    594           *
    595           * @param       none
    596           *
    597           * @return      none
    598           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    599          void bdb_TCProcessJoiningList(void)
   \                     bdb_TCProcessJoiningList:
    600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV       A,#-0x2a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    601            bdb_joiningDeviceList_t* tempJoiningDescNode;
    602            
    603            if(bdb_joiningDeviceList)
   \   00000A   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   00000D   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??bdb_TCProcessJoiningList_0 & 0xFFFF
    604            {
    605              tempJoiningDescNode = bdb_joiningDeviceList;
   \   000015   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000018   12....       LCALL     ?Subroutine24 & 0xFFFF
    606            
    607              while(tempJoiningDescNode)
    608              {
    609                if(tempJoiningDescNode->NodeJoinTimeout)
   \                     ??CrossCallReturnLabel_12:
   \   00001B   E5..         MOV       A,?V0
   \   00001D   240A         ADD       A,#0xa
   \   00001F   F582         MOV       DPL,A
   \   000021   E4           CLR       A
   \   000022   35..         ADDC      A,?V1
   \   000024   F583         MOV       DPH,A
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6007         JZ        ??bdb_TCProcessJoiningList_1
    610                {
    611                  tempJoiningDescNode->NodeJoinTimeout--;
   \   000029   14           DEC       A
   \   00002A   F0           MOVX      @DPTR,A
    612                }
    613                
    614                if(tempJoiningDescNode->NodeJoinTimeout == 0)
   \   00002B   6003         JZ        $+5
   \   00002D   02....       LJMP      ??bdb_TCProcessJoiningList_2 & 0xFFFF
    615                {
    616                  //Check if the key exchange is required 
    617                  if(bdb_doTrustCenterRequireKeyExchange())
   \                     ??bdb_TCProcessJoiningList_1:
   \   000030   E5..         MOV       A,?V0
   \   000032   2402         ADD       A,#0x2
   \   000034   FE           MOV       R6,A
   \   000035   E4           CLR       A
   \   000036   35..         ADDC      A,?V1
   \   000038   FF           MOV       R7,A
   \   000039   8E..         MOV       ?V4,R6
   \   00003B   F5..         MOV       ?V5,A
   \   00003D   75..00       MOV       ?V6,#0x0
   \   000040   90....       MOV       DPTR,#bdbAttributes + 17
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6048         JZ        ??bdb_TCProcessJoiningList_3
    618                  {
    619                      AddrMgrEntry_t entry;
    620                      
    621                      entry.user = ADDRMGR_USER_DEFAULT;
   \   000046   740A         MOV       A,#0xa
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   E4           CLR       A
   \   00004C   F0           MOVX      @DPTR,A
    622                      osal_memcpy(entry.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   00004D                ; Setup parameters for call to function osal_memcpy
   \   00004D   78..         MOV       R0,#?V4
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000052   7C08         MOV       R4,#0x8
   \   000054   7D00         MOV       R5,#0x0
   \   000056   7410         MOV       A,#0x10
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00005E   12....       LCALL     ?DEALLOC_XSTACK8
    623                      
    624                      if(AddrMgrEntryLookupExt(&entry))
   \   000061                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000061   740A         MOV       A,#0xa
   \   000063   12....       LCALL     ?XSTACK_DISP101_8
   \   000066   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000069   E9           MOV       A,R1
   \   00006A   6022         JZ        ??bdb_TCProcessJoiningList_3
    625                      {
    626                        ZDSecMgrAPSRemove(entry.nwkAddr,entry.extAddr,tempJoiningDescNode->parentAddr);
   \   00006C                ; Setup parameters for call to function ZDSecMgrAPSRemove
   \   00006C   85..82       MOV       DPL,?V0
   \   00006F   85..83       MOV       DPH,?V1
   \   000072   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000075   740F         MOV       A,#0xf
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   AC82         MOV       R4,DPL
   \   00007C   AD83         MOV       R5,DPH
   \   00007E   740D         MOV       A,#0xd
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   12....       LCALL     ?Subroutine26 & 0xFFFF
    627                      }
    628                  }
   \                     ??CrossCallReturnLabel_17:
   \   000086   12....       LCALL     `??ZDSecMgrAPSRemove::?relay`; Banked call to: ZDSecMgrAPSRemove
   \   000089   7402         MOV       A,#0x2
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
    629                  
    630                  //Expired device either is legacy device not using the TCLK entry or got 
    631                  //removed from the network because of timeout, eitherway it is not using
    632                  //TCLK entry neither the Security user in the address manager, so free the entry
    633                  //in both tables.
    634                  
    635                  uint16 keyNvIndex;
    636                  uint16 index;        
    637                  APSME_TCLKDevEntry_t TCLKDevEntry;
    638                  uint8 found;
    639                  
    640                  //Remove the entry in address manager
    641                  ZDSecMgrAddrClear(tempJoiningDescNode->bdbJoiningNodeEui64);
   \                     ??bdb_TCProcessJoiningList_3:
   \   00008E                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00008E   EE           MOV       A,R6
   \   00008F   FA           MOV       R2,A
   \   000090   EF           MOV       A,R7
   \   000091   FB           MOV       R3,A
   \   000092   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
    642                  
    643                  //search for the entry in the TCLK table
    644                  keyNvIndex = APSME_SearchTCLinkKeyEntry(tempJoiningDescNode->bdbJoiningNodeEui64,&found, NULL);
   \   000095                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000095   E4           CLR       A
   \   000096   F5..         MOV       ?V2,A
   \   000098   F5..         MOV       ?V3,A
   \   00009A   78..         MOV       R0,#?V2
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A4   EE           MOV       A,R6
   \   0000A5   FA           MOV       R2,A
   \   0000A6   EF           MOV       A,R7
   \   0000A7   FB           MOV       R3,A
   \   0000A8   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   0000AB   7402         MOV       A,#0x2
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B0   8A..         MOV       ?V2,R2
   \   0000B2   8B..         MOV       ?V3,R3
   \   0000B4   AE..         MOV       R6,?V2
   \   0000B6   AF..         MOV       R7,?V3
    645                  
    646                  //If found, erase it.
    647                  if(found == TRUE)
   \   0000B8   85..82       MOV       DPL,?XSP + 0
   \   0000BB   85..83       MOV       DPH,?XSP + 1
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   6401         XRL       A,#0x1
   \   0000C1   706E         JNZ       ??bdb_TCProcessJoiningList_4
    648                  {
    649                    osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   \   0000C3                ; Setup parameters for call to function osal_memset
   \   0000C3   7C13         MOV       R4,#0x13
   \   0000C5   7D00         MOV       R5,#0x0
   \   0000C7   7900         MOV       R1,#0x0
   \   0000C9   7417         MOV       A,#0x17
   \   0000CB   12....       LCALL     ?XSTACK_DISP101_8
   \   0000CE   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    650                    TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   0000D1   7427         MOV       A,#0x27
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   74FF         MOV       A,#-0x1
   \   0000D8   F0           MOVX      @DPTR,A
    651                    
    652                    //Increase the shift by one. Validate the maximum shift of the seed which is 15
    653                    index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
   \   0000D9   EE           MOV       A,R6
   \   0000DA   24EF         ADD       A,#-0x11
   \   0000DC   F8           MOV       R0,A
   \   0000DD   EF           MOV       A,R7
   \   0000DE   34FE         ADDC      A,#-0x2
   \   0000E0   F9           MOV       R1,A
    654                    
    655                    TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
   \   0000E1   E8           MOV       A,R0
   \   0000E2   75F009       MOV       B,#0x9
   \   0000E5   A4           MUL       AB
   \   0000E6   F8           MOV       R0,A
   \   0000E7   AAF0         MOV       R2,B
   \   0000E9   75F009       MOV       B,#0x9
   \   0000EC   E9           MOV       A,R1
   \   0000ED   A4           MUL       AB
   \   0000EE   2A           ADD       A,R2
   \   0000EF   F9           MOV       R1,A
   \   0000F0   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   0000F2   28           ADD       A,R0
   \   0000F3   F8           MOV       R0,A
   \   0000F4   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0000F6   39           ADDC      A,R1
   \   0000F7   F9           MOV       R1,A
   \   0000F8   8882         MOV       DPL,R0
   \   0000FA   F583         MOV       DPH,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   A3           INC       DPTR
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   12....       LCALL     ?Subroutine9 & 0xFFFF
    656                    TCLinkKeyFrmCntr[index].txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_56:
   \   000103   8882         MOV       DPL,R0
   \   000105   8983         MOV       DPH,R1
   \   000107   12....       LCALL     ??Subroutine43_0 & 0xFFFF
    657                    
    658                    //Update the entry
    659                    osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   \                     ??CrossCallReturnLabel_54:
   \   00010A                ; Setup parameters for call to function osal_nv_write
   \   00010A   7417         MOV       A,#0x17
   \   00010C   12....       LCALL     ?XSTACK_DISP100_8
   \   00010F   88..         MOV       ?V2,R0
   \   000111   89..         MOV       ?V3,R1
   \   000113   78..         MOV       R0,#?V2
   \   000115   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000118   75..13       MOV       ?V2,#0x13
   \   00011B   75..00       MOV       ?V3,#0x0
   \   00011E   78..         MOV       R0,#?V2
   \   000120   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000123   7C00         MOV       R4,#0x0
   \   000125   7D00         MOV       R5,#0x0
   \   000127   EE           MOV       A,R6
   \   000128   FA           MOV       R2,A
   \   000129   EF           MOV       A,R7
   \   00012A   FB           MOV       R3,A
   \   00012B   12....       LCALL     ??Subroutine57_0 & 0xFFFF
    660                  }
   \                     ??CrossCallReturnLabel_106:
   \   00012E   12....       LCALL     ?DEALLOC_XSTACK8
    661                  
    662                  if(pfnTCLinkKeyExchangeProcessCB)
   \                     ??bdb_TCProcessJoiningList_4:
   \   000131   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   000134   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000137   6035         JZ        ??bdb_TCProcessJoiningList_5
    663                  {
    664                    bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    665                    osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   000139                ; Setup parameters for call to function osal_memcpy
   \   000139   78..         MOV       R0,#?V4
   \   00013B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013E   7C08         MOV       R4,#0x8
   \   000140   7D00         MOV       R5,#0x0
   \   000142   7405         MOV       A,#0x5
   \   000144   12....       LCALL     ?XSTACK_DISP0_8
   \   000147   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
    666                    bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_FAIL;
   \   00014D   7401         MOV       A,#0x1
   \   00014F   12....       LCALL     ?XSTACK_DISP0_8
   \   000152   7402         MOV       A,#0x2
   \   000154   F0           MOVX      @DPTR,A
    667                    
    668                    bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
   \   000155                ; Setup parameters for call to function bdb_SendMsg
   \   000155   14           DEC       A
   \   000156   12....       LCALL     ?XSTACK_DISP100_8
   \   000159   88..         MOV       ?V2,R0
   \   00015B   89..         MOV       ?V3,R1
   \   00015D   78..         MOV       R0,#?V2
   \   00015F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000162   7C09         MOV       R4,#0x9
   \   000164   7B00         MOV       R3,#0x0
   \   000166   7A09         MOV       R2,#0x9
   \   000168   12....       LCALL     ??Subroutine44_0 & 0xFFFF
    669                  }
   \                     ??CrossCallReturnLabel_63:
   \   00016B   12....       LCALL     ?DEALLOC_XSTACK8
    670                 
    671                  //Free the device from the list
    672                  bdb_TCJoiningDeviceFree(tempJoiningDescNode);
   \                     ??bdb_TCProcessJoiningList_5:
   \   00016E                ; Setup parameters for call to function bdb_TCJoiningDeviceFree
   \   00016E   AA..         MOV       R2,?V0
   \   000170   AB..         MOV       R3,?V1
   \   000172   12....       LCALL     `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
    673                }
    674                tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \                     ??bdb_TCProcessJoiningList_2:
   \   000175   E5..         MOV       A,?V0
   \   000177   12....       LCALL     ?Subroutine39 & 0xFFFF
    675              }
    676            }
   \                     ??CrossCallReturnLabel_35:
   \   00017A   35..         ADDC      A,?V1
   \   00017C   F583         MOV       DPH,A
   \   00017E   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000181   6003         JZ        $+5
   \   000183   02....       LJMP      ??CrossCallReturnLabel_12 & 0xFFFF
    677          
    678            //we are done with the list
    679            if(bdb_joiningDeviceList == NULL)
   \   000186   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000189   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00018C   7003         JNZ       ??CrossCallReturnLabel_109
    680            {
    681              osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
   \                     ??bdb_TCProcessJoiningList_0:
   \   00018E                ; Setup parameters for call to function osal_stop_timerEx
   \   00018E   12....       LCALL     ?Subroutine20 & 0xFFFF
    682            }
    683          }
   \                     ??CrossCallReturnLabel_109:
   \   000191   742A         MOV       A,#0x2a
   \   000193   12....       LCALL     ?DEALLOC_XSTACK8
   \   000196                REQUIRE ?Subroutine5
   \   000196                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E4           CLR       A
   \   000001                REQUIRE ??Subroutine43_0
   \   000001                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B08         MOV       R3,#0x8
   \   000004                REQUIRE ??Subroutine58_0
   \   000004                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   E5..         MOV       A,?V0
   \   000009   45..         ORL       A,?V1
   \   00000B   22           RET
    684          
    685          
    686          
    687          /****************************************************************************
    688           * @fn          bdb_TCjoiningDeviceComplete
    689           *
    690           * @brief       This function frees a joining device from the list that has 
    691           *              finished TC link key exchange process
    692           *
    693           * @param       JoiningExtAddr - Extended address of the device
    694           *
    695           * @return      none
    696           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    697          void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr)
   \                     bdb_TCjoiningDeviceComplete:
    698          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    699            bdb_joiningDeviceList_t* tempJoiningDescNode;
    700            
    701            if((bdb_joiningDeviceList != NULL) && (JoiningExtAddr != NULL))
   \   00000E   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000011   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000014   7003         JNZ       $+5
   \   000016   02....       LJMP      ??CrossCallReturnLabel_110 & 0xFFFF
   \   000019   EA           MOV       A,R2
   \   00001A   4B           ORL       A,R3
   \   00001B   607D         JZ        ??CrossCallReturnLabel_110
    702            {
    703              tempJoiningDescNode = bdb_joiningDeviceList;
   \   00001D   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A982         MOV       R1,DPL
   \   000028   AA83         MOV       R2,DPH
   \   00002A   89..         MOV       ?V4,R1
   \   00002C   8A..         MOV       ?V5,R2
   \   00002E   75..00       MOV       ?V6,#0x0
   \   000031                ; Setup parameters for call to function osal_memcmp
   \   000031   85....       MOV       ?V8,?V0
   \   000034   85....       MOV       ?V9,?V1
   \   000037   75..00       MOV       ?V10,#0x0
   \   00003A   78..         MOV       R0,#?V8
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003F   7C08         MOV       R4,#0x8
   \   000041   7D00         MOV       R5,#0x0
   \   000043   AB..         MOV       R3,?V6
   \   000045   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   E9           MOV       A,R1
   \   00004C   6037         JZ        ??bdb_TCjoiningDeviceComplete_0
    704              
    705              while(tempJoiningDescNode != NULL)
    706              {
    707                if(osal_memcmp(tempJoiningDescNode->bdbJoiningNodeEui64,JoiningExtAddr,Z_EXTADDR_LEN))
    708                {
    709                  if(pfnTCLinkKeyExchangeProcessCB)
   \   00004E   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   000051   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000054   6026         JZ        ??bdb_TCjoiningDeviceComplete_1
    710                  {
    711                    bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    712                    osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   000056                ; Setup parameters for call to function osal_memcpy
   \   000056   78..         MOV       R0,#?V4
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005B   7C08         MOV       R4,#0x8
   \   00005D   7D00         MOV       R5,#0x0
   \   00005F   7404         MOV       A,#0x4
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
    713                    bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_SUCCESS;
   \   00006A   12....       LCALL     ?Subroutine8 & 0xFFFF
    714                    
    715                    bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
    716                  }        
   \                     ??CrossCallReturnLabel_45:
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7C09         MOV       R4,#0x9
   \   000072   7B00         MOV       R3,#0x0
   \   000074   7A09         MOV       R2,#0x9
   \   000076   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
    717                  
    718                  bdb_TCJoiningDeviceFree(tempJoiningDescNode);
   \                     ??bdb_TCjoiningDeviceComplete_1:
   \   00007C                ; Setup parameters for call to function bdb_TCJoiningDeviceFree
   \   00007C   EE           MOV       A,R6
   \   00007D   FA           MOV       R2,A
   \   00007E   EF           MOV       A,R7
   \   00007F   FB           MOV       R3,A
   \   000080   12....       LCALL     `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
    719                  break;
   \   000083   800A         SJMP      ??bdb_TCjoiningDeviceComplete_2
    720                }
    721                tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \                     ??bdb_TCjoiningDeviceComplete_0:
   \   000085   12....       LCALL     ?Subroutine33 & 0xFFFF
    722              }
   \                     ??CrossCallReturnLabel_30:
   \   000088   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00008B   EE           MOV       A,R6
   \   00008C   4F           ORL       A,R7
   \   00008D   7091         JNZ       ??CrossCallReturnLabel_121
    723             
    724              if(bdb_joiningDeviceList == NULL)
   \                     ??bdb_TCjoiningDeviceComplete_2:
   \   00008F   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000092   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000095   7003         JNZ       ??CrossCallReturnLabel_110
    725              {
    726                osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
   \   000097                ; Setup parameters for call to function osal_stop_timerEx
   \   000097   12....       LCALL     ?Subroutine20 & 0xFFFF
    727              }
    728            }
    729          }
   \                     ??CrossCallReturnLabel_110:
   \   00009A   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   7401         MOV       A,#0x1
   \   000008                REQUIRE ??Subroutine41_0
   \   000008                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
    730          
    731          
    732          
    733          /****************************************************************************
    734           * @fn          bdb_TCJoiningDeviceFree
    735           *
    736           * @brief       This function frees a joining device from the list.
    737           *
    738           * @param       ZSuccess - If the device was found and erased
    739           * @param       ZInvalidParameter - Not found
    740           *
    741           * @return      none
    742           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    743          ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove)
   \                     bdb_TCJoiningDeviceFree:
    744          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A982         MOV       R1,DPL
   \   000011   AA83         MOV       R2,DPH
   \   000013   89..         MOV       ?V4,R1
   \   000015   8A..         MOV       ?V5,R2
   \   000017   75..00       MOV       ?V6,#0x0
   \   00001A                ; Setup parameters for call to function osal_memcmp
   \   00001A   78..         MOV       R0,#?V4
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001F   7C08         MOV       R4,#0x8
   \   000021   7D00         MOV       R5,#0x0
   \   000023   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000026   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002C   E9           MOV       A,R1
   \   00002D   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000030   6018         JZ        ??bdb_TCJoiningDeviceFree_0
    745            bdb_joiningDeviceList_t* descCurrent;
    746            bdb_joiningDeviceList_t* descPrev;
    747            
    748            //validate empty list?
    749            
    750            //Is it the first?
    751            if(osal_memcmp(bdb_joiningDeviceList->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
    752            {
    753              descCurrent = bdb_joiningDeviceList;
   \   000032   12....       LCALL     ?Subroutine26 & 0xFFFF
    754              bdb_joiningDeviceList = bdb_joiningDeviceList->nextDev;
   \                     ??CrossCallReturnLabel_18:
   \   000035   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000038   E0           MOVX      A,@DPTR
   \   000039   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00003C   3B           ADDC      A,R3
   \   00003D   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000040   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000043   E8           MOV       A,R0
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   E9           MOV       A,R1
   \   000047   F0           MOVX      @DPTR,A
    755              osal_mem_free( descCurrent );
   \   000048                ; Setup parameters for call to function osal_mem_free
   \   000048   803E         SJMP      ??bdb_TCJoiningDeviceFree_1
    756              return ZSuccess;
    757            }
    758            
    759            descPrev = NULL;
    760            descCurrent = bdb_joiningDeviceList;
    761            
    762            while(descCurrent != NULL)
    763            {
    764              if(osal_memcmp(descCurrent->nextDev->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
    765              {
    766                descPrev = descCurrent;
    767                break;
    768              }
    769              descCurrent = descCurrent->nextDev;
   \                     ??bdb_TCJoiningDeviceFree_0:
   \   00004A   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00004D   6040         JZ        ??bdb_TCJoiningDeviceFree_2
   \   00004F   EA           MOV       A,R2
   \   000050   240B         ADD       A,#0xb
   \   000052   FE           MOV       R6,A
   \   000053   E4           CLR       A
   \   000054   3B           ADDC      A,R3
   \   000055   FF           MOV       R7,A
   \   000056                ; Setup parameters for call to function osal_memcmp
   \   000056   78..         MOV       R0,#?V4
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005B   7C08         MOV       R4,#0x8
   \   00005D   7D00         MOV       R5,#0x0
   \   00005F   8E82         MOV       DPL,R6
   \   000061   8F83         MOV       DPH,R7
   \   000063   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
   \   000069   E9           MOV       A,R1
   \   00006A   8E82         MOV       DPL,R6
   \   00006C   8F83         MOV       DPH,R7
   \   00006E   60DA         JZ        ??bdb_TCJoiningDeviceFree_0
    770            }
    771            if(descPrev == NULL)
    772            {
    773              //Not found
    774              return ZInvalidParameter;
    775            }
    776            
    777            descPrev->nextDev = descPrev->nextDev->nextDev;
   \   000070   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000073   C8           XCH       A,R0
   \   000074   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000077   38           ADDC      A,R0
   \   000078   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00007B   8E82         MOV       DPL,R6
   \   00007D   8F83         MOV       DPH,R7
   \   00007F   E8           MOV       A,R0
   \   000080   F0           MOVX      @DPTR,A
   \   000081   A3           INC       DPTR
   \   000082   E9           MOV       A,R1
   \   000083   F0           MOVX      @DPTR,A
    778              
    779            osal_mem_free( JoiningDeviceToRemove );
   \   000084                ; Setup parameters for call to function osal_mem_free
   \   000084   AA..         MOV       R2,?V0
   \   000086   AB..         MOV       R3,?V1
   \                     ??bdb_TCJoiningDeviceFree_1:
   \   000088   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    780            return ZSuccess;
   \   00008B   7900         MOV       R1,#0x0
   \   00008D   8002         SJMP      ??bdb_TCJoiningDeviceFree_3
   \                     ??bdb_TCJoiningDeviceFree_2:
   \   00008F   7902         MOV       R1,#0x2
   \                     ??bdb_TCJoiningDeviceFree_3:
   \   000091   02....       LJMP      ?Subroutine5 & 0xFFFF
    781          
    782          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A982         MOV       R1,DPL
   \   00000B   AA83         MOV       R2,DPH
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine62_0
   \   000002                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET
    783          
    784           /*********************************************************************
    785           * @fn          bdb_setJoinUsesInstallCodeKey
    786           *
    787           * @brief       Set BDB attribute bdbJoinUsesInstallCodeKey.
    788           *
    789           * @param       set - If TRUE only devices with IC register in TC can join the 
    790           *              nwk, otherwise devices may or not have a IC register
    791           *
    792           * @return      none
    793           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    794          void bdb_setJoinUsesInstallCodeKey(bool set)
   \                     bdb_setJoinUsesInstallCodeKey:
    795          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    796            bdbAttributes.bdbJoinUsesInstallCodeKey = set;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#bdbAttributes + 15
   \   000008   F0           MOVX      @DPTR,A
    797            if(set)
   \   000009   90....       MOV       DPTR,#zgAllowInstallCodes
   \   00000C   6004         JZ        ??bdb_setJoinUsesInstallCodeKey_0
    798            {
    799              zgAllowInstallCodes = ZG_IC_MUST_USED;
   \   00000E   7402         MOV       A,#0x2
   \   000010   8002         SJMP      ??bdb_setJoinUsesInstallCodeKey_1
    800            }
    801            else
    802            {
    803              zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
   \                     ??bdb_setJoinUsesInstallCodeKey_0:
   \   000012   7401         MOV       A,#0x1
    804            }
   \                     ??bdb_setJoinUsesInstallCodeKey_1:
   \   000014   02....       LJMP      ??Subroutine45_0 & 0xFFFF
    805          }
    806          #endif
    807          
    808           /*********************************************************************
    809           * @fn          bdb_StartCommissioning
    810           *
    811           * @brief       Start the commissioning process setting the commissioning mode given.
    812           *
    813           * @param       mode - refer to bdbCommissioningMode
    814           *
    815           * @return      none
    816           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    817          void bdb_StartCommissioning(uint8 mode)
   \                     bdb_StartCommissioning:
    818          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
    819            //Application cannot request to set the device in initialization mode or parent lost
    820            mode &= ~(BDB_COMMISSIONING_MODE_INITIALIZATION | BDB_COMMISSIONING_MODE_PARENT_LOST);
    821              
    822          #ifdef BDB_TL_INITIATOR
    823            if ( touchlinkFNReset == TRUE )
    824            {
    825              return;
    826            }
    827          #else
    828            //Commissioning mode used only for initiator
    829            mode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
   \   00000C   53..CE       ANL       ?V0,#0xce
    830          #endif
    831            
    832          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==0)    
    833            //Commissioning mode used only for devices with F&B
    834            mode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
    835          #endif
    836           
    837            //If we have running process or the machine state is triggered, then just append and it will be excecuted
    838            if((bdbAttributes.bdbCommissioningMode) || (osal_get_timeoutEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE)))
   \   00000F   90....       MOV       DPTR,#bdbAttributes + 11
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7009         JNZ       ??bdb_StartCommissioning_0
   \   000015                ; Setup parameters for call to function osal_get_timeoutEx
   \   000015   7A04         MOV       R2,#0x4
   \   000017   7B00         MOV       R3,#0x0
   \   000019   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00001C   6020         JZ        ??bdb_StartCommissioning_1
    839            {
    840          #if ZG_BUILD_ENDDEVICE_TYPE
    841              if(ZG_DEVICE_ENDDEVICE_TYPE)
    842              {
    843                //Devices with parent lost are not allowed to perform actions
    844                if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
    845                {
    846                  return;
    847                }
    848              }
    849          #endif
    850              
    851              //If we are on the network and got requested to do nwk steering, we do not need to wait other process, 
    852              // just send permit joining and report the application
    853              if((bdbAttributes.bdbNodeIsOnANetwork) && (mode & BDB_COMMISSIONING_MODE_NWK_STEERING))
   \                     ??bdb_StartCommissioning_0:
   \   00001E   90....       MOV       DPTR,#bdbAttributes + 14
   \   000021   E0           MOVX      A,@DPTR
   \   000022   600C         JZ        ??bdb_StartCommissioning_2
   \   000024   E5..         MOV       A,?V0
   \   000026   A2E1         MOV       C,0xE0 /* A   */.1
   \   000028   5006         JNC       ??bdb_StartCommissioning_2
    854              {
    855                bdb_nwkSteeringDeviceOnNwk();
   \   00002A                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   00002A   12....       LCALL     ?Subroutine30 & 0xFFFF
    856                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
    857                
    858                //Clean nwk steering
    859                mode ^= BDB_COMMISSIONING_MODE_NWK_STEERING; 
   \                     ??CrossCallReturnLabel_26:
   \   00002D   63..02       XRL       ?V0,#0x2
    860              }
    861              
    862              //add the remaining valid commissioning modes requested, those will be process when bdb finish its current process
    863              bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \                     ??bdb_StartCommissioning_2:
   \   000030   743F         MOV       A,#0x3f
   \   000032   55..         ANL       A,?V0
   \   000034   F8           MOV       R0,A
   \   000035   90....       MOV       DPTR,#bdbAttributes + 11
   \   000038   E0           MOVX      A,@DPTR
   \   000039   48           ORL       A,R0
   \   00003A   F0           MOVX      @DPTR,A
    864              return;      
   \   00003B   02....       LJMP      ??bdb_StartCommissioning_3 & 0xFFFF
    865            }
    866          
    867            //Save the commissioning modes valid requested
    868            bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \                     ??bdb_StartCommissioning_1:
   \   00003E   743F         MOV       A,#0x3f
   \   000040   55..         ANL       A,?V0
   \   000042   FE           MOV       R6,A
   \   000043   90....       MOV       DPTR,#bdbAttributes + 11
   \   000046   E0           MOVX      A,@DPTR
   \   000047   4E           ORL       A,R6
   \   000048   F0           MOVX      @DPTR,A
    869            
    870            
    871            //Start processing the initialization, once per power cycle.
    872            if(!bdb_initialization)
   \   000049   90....       MOV       DPTR,#bdb_initialization
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   6003         JZ        $+5
   \   00004F   02....       LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
    873            {
    874              bdb_initialization = TRUE;
   \   000052   7401         MOV       A,#0x1
   \   000054   F0           MOVX      @DPTR,A
    875              
    876          #ifdef BDB_REPORTING
    877              //Delete NV data if startup was with factory reset
    878              if(ZDO_INITDEV_NEW_NETWORK_STATE == ZDApp_ReadNetworkRestoreState())
   \   000055                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   000055   12....       LCALL     `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   000058   E9           MOV       A,R1
   \   000059   6401         XRL       A,#0x1
   \   00005B   701A         JNZ       ??bdb_StartCommissioning_5
    879              {
    880                //Factory reset bdb reporting NV data
    881                uint16 attrRepNvLen = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
   \   00005D                ; Setup parameters for call to function osal_nv_item_len
   \   00005D   7A56         MOV       R2,#0x56
   \   00005F   7B00         MOV       R3,#0x0
   \   000061   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000064   8A..         MOV       ?V2,R2
   \   000066   8B..         MOV       ?V3,R3
   \   000068   AC..         MOV       R4,?V2
   \   00006A   AD..         MOV       R5,?V3
    882                if ( attrRepNvLen > 0 )
   \   00006C   EA           MOV       A,R2
   \   00006D   4D           ORL       A,R5
   \   00006E   6007         JZ        ??bdb_StartCommissioning_5
    883                {
    884                  osal_nv_delete( ZCD_NV_BDBREPORTINGCONFIG, attrRepNvLen );
   \   000070                ; Setup parameters for call to function osal_nv_delete
   \   000070   7A56         MOV       R2,#0x56
   \   000072   7B00         MOV       R3,#0x0
   \   000074   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
    885                }
    886              }
    887          
    888              //Construct the Endpoint-cluster array
    889              bdb_RepConstructReportingData();
   \                     ??bdb_StartCommissioning_5:
   \   000077                ; Setup parameters for call to function bdb_RepConstructReportingData
   \   000077   12....       LCALL     `??bdb_RepConstructReportingData::?relay`; Banked call to: bdb_RepConstructReportingData
    890          #endif //BDB_REPORTING
    891              
    892              osal_nv_read(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   00007A                ; Setup parameters for call to function osal_nv_read
   \   00007A   75....       MOV       ?V2,#(bdbAttributes + 14) & 0xff
   \   00007D   75....       MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
   \   000080   78..         MOV       R0,#?V2
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000085   75..01       MOV       ?V2,#0x1
   \   000088   75..00       MOV       ?V3,#0x0
   \   00008B   78..         MOV       R0,#?V2
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   7C00         MOV       R4,#0x0
   \   000092   7D00         MOV       R5,#0x0
   \   000094   7A55         MOV       R2,#0x55
   \   000096   7B00         MOV       R3,#0x0
   \   000098   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00009B   7404         MOV       A,#0x4
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
    893              
    894              //Are we on a network
    895              if(bdbAttributes.bdbNodeIsOnANetwork == TRUE)
   \   0000A0   90....       MOV       DPTR,#bdbAttributes + 14
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   6401         XRL       A,#0x1
   \   0000A6   6003         JZ        $+5
   \   0000A8   02....       LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
    896              {
    897          #ifdef ZG_BUILD_JOINING_TYPE
    898                //Only for joining devices validate the joining procedure
    899                if(ZG_DEVICE_JOINING_TYPE)
   \   0000AB   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   6401         XRL       A,#0x1
   \   0000B1   6008         JZ        ??bdb_StartCommissioning_6
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   6402         XRL       A,#0x2
   \   0000B6   6003         JZ        $+5
   \   0000B8   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
    900                {
    901                  //If we got into a network
    902                  if(!osal_isbufset( AIB_apsTrustCenterAddress, 0x00, Z_EXTADDR_LEN ))
   \                     ??bdb_StartCommissioning_6:
   \   0000BB                ; Setup parameters for call to function osal_isbufset
   \   0000BB   7C08         MOV       R4,#0x8
   \   0000BD   7900         MOV       R1,#0x0
   \   0000BF   90....       MOV       DPTR,#AIB_apsTrustCenterAddress
   \   0000C2   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000C5   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   0000C8   E9           MOV       A,R1
   \   0000C9   6003         JZ        $+5
   \   0000CB   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
    903                  {
    904                    //Which is not distributed
    905                    if(!APSME_IsDistributedSecurity())
   \   0000CE                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   0000CE   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   0000D1   E9           MOV       A,R1
   \   0000D2   6003         JZ        $+5
   \   0000D4   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
    906                    {
    907                      uint8 keyAttributes;
    908                      osal_nv_read(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes), sizeof(uint8), &keyAttributes);
   \   0000D7                ; Setup parameters for call to function osal_nv_read
   \   0000D7   A8..         MOV       R0,?XSP + 0
   \   0000D9   A9..         MOV       R1,?XSP + 1
   \   0000DB   88..         MOV       ?V2,R0
   \   0000DD   89..         MOV       ?V3,R1
   \   0000DF   78..         MOV       R0,#?V2
   \   0000E1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E4   75..01       MOV       ?V2,#0x1
   \   0000E7   75..00       MOV       ?V3,#0x0
   \   0000EA   78..         MOV       R0,#?V2
   \   0000EC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EF   7C10         MOV       R4,#0x10
   \   0000F1   7D00         MOV       R5,#0x0
   \   0000F3   7A11         MOV       R2,#0x11
   \   0000F5   7B01         MOV       R3,#0x1
   \   0000F7   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000FA   7404         MOV       A,#0x4
   \   0000FC   12....       LCALL     ?DEALLOC_XSTACK8
    909                      //If we must perform the TCLK exchange and we didn't complete it, then reset to FN
    910                      if(requestNewTrustCenterLinkKey && (keyAttributes != ZG_NON_R21_NWK_JOINED) && (keyAttributes != ZG_VERIFIED_KEY))
   \   0000FF   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   000102   E0           MOVX      A,@DPTR
   \   000103   7003         JNZ       $+5
   \   000105   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
   \   000108   85..82       MOV       DPL,?XSP + 0
   \   00010B   85..83       MOV       DPH,?XSP + 1
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   64FD         XRL       A,#0xfd
   \   000111   6075         JZ        ??bdb_StartCommissioning_7
   \   000113   E0           MOVX      A,@DPTR
   \   000114   6402         XRL       A,#0x2
   \   000116   6070         JZ        ??bdb_StartCommissioning_7
    911                      {
    912                        //Force to initialize the entry
    913                        APSME_TCLKDevEntry_t APSME_TCLKDevEntry;
    914                        
    915                        osal_memset(&APSME_TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   \   000118                ; Setup parameters for call to function osal_memset
   \   000118   7C13         MOV       R4,#0x13
   \   00011A   7D00         MOV       R5,#0x0
   \   00011C   7900         MOV       R1,#0x0
   \   00011E   7401         MOV       A,#0x1
   \   000120   12....       LCALL     ?XSTACK_DISP101_8
   \   000123   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    916                        APSME_TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000126   7411         MOV       A,#0x11
   \   000128   12....       LCALL     ?XSTACK_DISP0_8
   \   00012B   74FF         MOV       A,#-0x1
   \   00012D   F0           MOVX      @DPTR,A
    917                        osal_nv_write(ZCD_NV_TCLK_TABLE_START, 0, sizeof(APSME_TCLKDevEntry_t), &APSME_TCLKDevEntry);
   \   00012E                ; Setup parameters for call to function osal_nv_write
   \   00012E   7401         MOV       A,#0x1
   \   000130   12....       LCALL     ?XSTACK_DISP100_8
   \   000133   88..         MOV       ?V2,R0
   \   000135   89..         MOV       ?V3,R1
   \   000137   78..         MOV       R0,#?V2
   \   000139   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013C   75..13       MOV       ?V2,#0x13
   \   00013F   75..00       MOV       ?V3,#0x0
   \   000142   78..         MOV       R0,#?V2
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000147   7C00         MOV       R4,#0x0
   \   000149   7D00         MOV       R5,#0x0
   \   00014B   7A11         MOV       R2,#0x11
   \   00014D   7B01         MOV       R3,#0x1
   \   00014F   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000152   12....       LCALL     ?DEALLOC_XSTACK8
    918                        TCLinkKeyFrmCntr[0].txFrmCntr = 0;
   \   000155   90....       MOV       DPTR,#TCLinkKeyFrmCntr
   \   000158   12....       LCALL     ?Subroutine9 & 0xFFFF
    919                        TCLinkKeyFrmCntr[0].rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_57:
   \   00015B   A3           INC       DPTR
   \   00015C   12....       LCALL     ??Subroutine43_0 & 0xFFFF
    920                        
    921                        
    922                        //reset the device parameters to FN
    923                        bdbAttributes.bdbNodeIsOnANetwork = FALSE;
   \                     ??CrossCallReturnLabel_55:
   \   00015F   90....       MOV       DPTR,#bdbAttributes + 14
   \   000162   F0           MOVX      @DPTR,A
    924                        osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   000163                ; Setup parameters for call to function osal_nv_write
   \   000163   75....       MOV       ?V2,#(bdbAttributes + 14) & 0xff
   \   000166   75....       MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
   \   000169   78..         MOV       R0,#?V2
   \   00016B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016E   75..01       MOV       ?V2,#0x1
   \   000171   75..00       MOV       ?V3,#0x0
   \   000174   78..         MOV       R0,#?V2
   \   000176   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000179   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00017C   12....       LCALL     ?DEALLOC_XSTACK8
    925                        zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   00017F                ; Setup parameters for call to function zgWriteStartupOptions
   \   00017F   7A03         MOV       R2,#0x3
   \   000181   79FF         MOV       R1,#-0x1
   \   000183   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    926                        
    927                        //Then start the commissioning process requested
    928                        bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000186   8040         SJMP      ??bdb_StartCommissioning_8
    929                        osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
    930                        return;
    931                      }
    932                    }
    933                  }
    934                }
    935          #endif //ZG_BUILD_JOINING_TYPE
    936                
    937                //Set the initialization
    938                bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_INITIALIZATION;
    939                bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
   \                     ??bdb_StartCommissioning_7:
   \   000188   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00018B   7407         MOV       A,#0x7
   \   00018D   F0           MOVX      @DPTR,A
    940                bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \   00018E   7410         MOV       A,#0x10
   \   000190   4E           ORL       A,R6
   \   000191   F8           MOV       R0,A
   \   000192   90....       MOV       DPTR,#bdbAttributes + 11
   \   000195   E0           MOVX      A,@DPTR
   \   000196   48           ORL       A,R0
   \   000197   F0           MOVX      @DPTR,A
    941                
    942                if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \   000198                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000198   7900         MOV       R1,#0x0
   \   00019A   7A00         MOV       R2,#0x0
   \   00019C   7B00         MOV       R3,#0x0
   \   00019E   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   0001A1   E9           MOV       A,R1
   \   0001A2   7005         JNZ       ??bdb_StartCommissioning_9
    943                {
    944          #ifdef BDB_REPORTING
    945                  //Mark the clusterEndpoint entries that have binding, starts reporting if at least one entry was marked
    946                  bdb_RepUpdateMarkBindings();
   \   0001A4                ; Setup parameters for call to function bdb_RepUpdateMarkBindings
   \   0001A4   12....       LCALL     `??bdb_RepUpdateMarkBindings::?relay`; Banked call to: bdb_RepUpdateMarkBindings
    947          #endif
    948                  return;
   \   0001A7   802F         SJMP      ??bdb_StartCommissioning_3
    949                }
    950                bdb_setNodeIsOnANetwork(FALSE);  
   \                     ??bdb_StartCommissioning_9:
   \   0001A9                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   0001A9   7900         MOV       R1,#0x0
   \   0001AB   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    951                //Not in the network
    952                bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
   \   0001AE                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0001AE   7A00         MOV       R2,#0x0
   \   0001B0   7907         MOV       R1,#0x7
   \   0001B2   800F         SJMP      ??bdb_StartCommissioning_10
    953                return;
    954              }
    955            }
    956          
    957            //Got requested only to initialize, if so, report that it failed
    958            if(bdbAttributes.bdbCommissioningMode == 0)
   \                     ??bdb_StartCommissioning_4:
   \   0001B4   90....       MOV       DPTR,#bdbAttributes + 11
   \   0001B7   E0           MOVX      A,@DPTR
   \   0001B8   700E         JNZ       ??bdb_StartCommissioning_8
    959            {
    960              //Set the initialization state and report it to fail
    961              bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
   \   0001BA   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001BD   7407         MOV       A,#0x7
   \   0001BF   F0           MOVX      @DPTR,A
    962              bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
   \   0001C0                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0001C0   7A00         MOV       R2,#0x0
   \   0001C2   F9           MOV       R1,A
   \                     ??bdb_StartCommissioning_10:
   \   0001C3   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    963              return;
   \   0001C6   8010         SJMP      ??bdb_StartCommissioning_3
    964            }
    965          
    966            
    967            //Start the commissioning process
    968            bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_StartCommissioning_8:
   \   0001C8   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001CB   E4           CLR       A
   \   0001CC   F0           MOVX      @DPTR,A
    969            osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
   \   0001CD                ; Setup parameters for call to function osal_set_event
   \   0001CD   7A04         MOV       R2,#0x4
   \   0001CF   FB           MOV       R3,A
   \   0001D0   90....       MOV       DPTR,#bdb_TaskID
   \   0001D3   E0           MOVX      A,@DPTR
   \   0001D4   F9           MOV       R1,A
   \   0001D5   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    970          }
   \                     ??bdb_StartCommissioning_3:
   \   0001D8   7414         MOV       A,#0x14
   \   0001DA   02....       LJMP      ??Subroutine49_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000008   EA           MOV       A,R2
   \   000009   4B           ORL       A,R3
   \   00000A   4C           ORL       A,R4
   \   00000B   4D           ORL       A,R5
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
   \   000003                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000003                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000003                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000003   7A01         MOV       R2,#0x1
   \   000005   7904         MOV       R1,#0x4
   \   000007   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A55         MOV       R2,#0x55
   \   000006                REQUIRE ??Subroutine56_0
   \   000006                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine57_0
   \   000002                ; // Fall through to label ??Subroutine57_0
    971          
    972          
    973           /*********************************************************************
    974           * @fn          bdb_NotifyCommissioningModeStart
    975           *
    976           * @brief       Notify the user about a commissioning method just started
    977           *
    978           * @param       commissioningMode
    979           *
    980           * @return      none
    981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    982          void bdb_NotifyCommissioningModeStart(uint8 commissioningMode)
   \                     bdb_NotifyCommissioningModeStart:
    983          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    984            bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
    985          
    986            bdbCommissioningModeMsg.bdbCommissioningMode = commissioningMode;
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
    987            bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_IN_PROGRESS;
   \   000011   12....       LCALL     ?Subroutine8 & 0xFFFF
    988            //Remaining commissioning modes are set just before the call to the application to avoid race conditions
    989          
    990            bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   \                     ??CrossCallReturnLabel_46:
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000017   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00001A   12....       LCALL     ?DEALLOC_XSTACK8
    991          }
   \   00001D   7403         MOV       A,#0x3
   \   00001F   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   7C03         MOV       R4,#0x3
   \   000002   7B00         MOV       R3,#0x0
   \   000004   7A0A         MOV       R2,#0xa
   \   000006                REQUIRE ??Subroutine44_0
   \   000006                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine55_0
   \   000003                ; // Fall through to label ??Subroutine55_0
    992          
    993          
    994          
    995          #if (ZG_BUILD_JOINING_TYPE)
    996           /*********************************************************************
    997           * @fn          bdb_setNodeJoinLinkKeyType
    998           *
    999           * @brief       Set the key type in use in the network joined. Global centralized key is used by default
   1000           *
   1001           * @param       none
   1002           *
   1003           * @return      none
   1004           */
   1005          void bdb_setNodeJoinLinkKeyType(uint8 KeyType)
   1006          {
   1007            bdbAttributes.bdbNodeJoinLinkKeyType = KeyType;
   1008          }
   1009          #endif
   1010          
   1011           /*********************************************************************
   1012           * @fn          bdb_setFN
   1013           *
   1014           * @brief       Set configuration for FN. This FN configuration will be perfome 
   1015           *              upon call to ZDOInitDevice
   1016           *
   1017           * @param       none
   1018           *
   1019           * @return      none
   1020           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1021          void bdb_setFN(void)
   \                     bdb_setFN:
   1022          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1023            bdb_setNodeIsOnANetwork(FALSE);
   \   000004                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000004   7900         MOV       R1,#0x0
   \   000006   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1024          
   1025          #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
   1026              touchLink_InitFreeRanges( TRUE );
   1027              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1028          #endif
   1029          #if defined ( INTER_PAN ) && defined ( BDB_TL_TARGET ) 
   1030              touchLink_InitFreeRanges( FALSE );
   1031              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1032          #endif
   1033          
   1034            //Set the device as factory new
   1035            zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A03         MOV       R2,#0x3
   \   00000B   79FF         MOV       R1,#-0x1
   \   00000D   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1036          }
   \   000010   80..         SJMP      ??Subroutine46_0
   1037          
   1038           /*********************************************************************
   1039           * @fn          bdb_resetLocalAction
   1040           *
   1041           * @brief       Application interface to perform BDB Reset to FN.
   1042           *
   1043           * @param       none
   1044           *
   1045           * @return      none
   1046           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1047          void bdb_resetLocalAction(void)
   \                     bdb_resetLocalAction:
   1048          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1049            //Process reset as nwk leave if the device is on the network and is able to process it
   1050            if((ZG_BUILD_JOINING_TYPE) && (bdbAttributes.bdbNodeIsOnANetwork) && (!(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)))
   1051            {
   1052              NLME_LeaveReq_t leaveReq;
   1053              // Set every field to 0
   1054              osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   1055              
   1056              bdb_setFN();
   1057                
   1058              NLME_LeaveReq( &leaveReq );
   1059              
   1060              return;
   1061            }
   1062            else
   1063            {
   1064              bdb_setFN();
   \   000004                ; Setup parameters for call to function bdb_setFN
   \   000004   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1065              
   1066              ZDApp_ResetTimerStart( 500 );
   \   000007                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000007   7AF4         MOV       R2,#-0xc
   \   000009   7B01         MOV       R3,#0x1
   \   00000B   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1067            }
   1068          }
   \   00000E   80..         SJMP      ??Subroutine46_0
   1069          
   1070          
   1071           /*********************************************************************
   1072           * @fn          bdb_parentLost
   1073           *
   1074           * @brief       Notify bdb that connection with parent is lost
   1075           *
   1076           * @return      none
   1077           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1078          void bdb_parentLost(void)
   \                     bdb_parentLost:
   1079          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1080          #if ZG_BUILD_ENDDEVICE_TYPE
   1081            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1082            {
   1083              while(pBDBListNwk)
   1084              {
   1085                bdb_nwkDescFree(pBDBListNwk);
   1086              }
   1087              
   1088              nwk_desc_list_free();  
   1089              if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
   1090              {
   1091                //If parent lost during TCLK exchange, then report TCLK exchange fail
   1092                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE)
   1093                {
   1094                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
   1095                  return;
   1096                }
   1097                bdbCommissioningProcedureState.bdb_ParentLostSavedState = bdbCommissioningProcedureState.bdbCommissioningState;
   1098                
   1099              }
   1100              bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
   1101              NLME_OrphanStateSet();
   1102              ZDApp_ChangeState( DEV_NWK_ORPHAN );
   1103              
   1104              // turn receiver off while in orphan state
   1105              byte temp = FALSE;
   1106              ZMacSetReq(ZMacRxOnIdle, &temp);
   1107              
   1108              bdb_reportCommissioningState(BDB_PARENT_LOST,FALSE);
   1109            }
   1110          #endif
   1111          }
   \   000000   02....       LJMP      ?BRET
   1112          
   1113          
   1114          
   1115          
   1116          
   1117           /*********************************************************************
   1118           * @fn          bdb_NetworkRestoredResumeState
   1119           *
   1120           * @brief       Restore the state of child device after parent lost
   1121           *
   1122           * @return      none
   1123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1124          void bdb_NetworkRestoredResumeState(void)
   \                     bdb_NetworkRestoredResumeState:
   1125          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1126          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
   1127          #if ZG_BUILD_ENDDEVICE_TYPE
   1128            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1129            {
   1130              uint8 restoreSimpleDesc = FALSE;
   1131              //If restored when F&B still enabled, then restore the simple descriptors attempts
   1132              if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   1133              {
   1134                bdbFindingBindingRespondent_t  *pRespondentTemp = NULL;
   1135                
   1136                pRespondentTemp = pRespondentHead;
   1137                
   1138                while(pRespondentTemp != NULL)
   1139                {
   1140                  if(pRespondentTemp->attempts & FINDING_AND_BINDING_PARENT_LOST)
   1141                  {
   1142                    pRespondentTemp->attempts &= ~FINDING_AND_BINDING_PARENT_LOST;
   1143                    restoreSimpleDesc = TRUE;
   1144                  }
   1145                  pRespondentTemp = pRespondentTemp->pNext;
   1146                }
   1147              }
   1148              if(restoreSimpleDesc)
   1149              {
   1150                //Restore the simple Descriptor sending after 1 second of restoring the network
   1151                osal_start_timerEx(bdb_TaskID,BDB_RESPONDENT_PROCESS_TIMEOUT, 1000);
   1152              }
   1153            }
   1154          #endif
   1155          #endif
   1156          }
   \   000000   02....       LJMP      ?BRET
   1157          
   1158          #if ZG_BUILD_ENDDEVICE_TYPE
   1159           /*********************************************************************
   1160           * @fn          bdb_ZedAttemptRecoverNwk
   1161           *
   1162           * @brief       Instruct the ZED to try to rejoin its previews network
   1163           *
   1164           * @return      success if the attempt is being excecuted
   1165           *              False if device do not have nwk parameters to perform this action
   1166           */
   1167          uint8 bdb_ZedAttemptRecoverNwk(void)
   1168          {
   1169            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1170            {
   1171              if(bdbAttributes.bdbNodeIsOnANetwork)
   1172              {
   1173                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST)
   1174                {
   1175                  if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   1176                  {
   1177                    return ZSuccess;
   1178                  }
   1179                }
   1180              }
   1181            }
   1182            return ZFailure;
   1183          }
   1184          
   1185          #endif
   1186          
   1187           /*********************************************************************
   1188           * @fn          bdb_reportCommissioningState
   1189           *
   1190           * @brief       Process the result of a BDB main state attempt.
   1191           *
   1192           * @param       bdbCommissioningState - MainState that is issuing fail
   1193           * @param       didSuccess - TRUE if the main state were success, FALSE otherwise
   1194           *
   1195           * @return      none
   1196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1197          void bdb_reportCommissioningState(uint8 bdbCommissioningState,bool didSuccess)
   \                     bdb_reportCommissioningState:
   1198          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EA           MOV       A,R2
   \   00000D   FF           MOV       R7,A
   1199            bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   1200            //Process only if we are in that state, or if we are on parent lost and processing F&B
   1201            if((bdbCommissioningProcedureState.bdbCommissioningState == bdbCommissioningState)
   1202               || ((bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST) && (bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)))
   \   00000E   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6E           XRL       A,R6
   \   000013   6013         JZ        ??bdb_reportCommissioningState_0
   \   000015   E0           MOVX      A,@DPTR
   \   000016   6408         XRL       A,#0x8
   \   000018   6003         JZ        $+5
   \   00001A   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   00001D   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   000020   E0           MOVX      A,@DPTR
   \   000021   6406         XRL       A,#0x6
   \   000023   6003         JZ        $+5
   \   000025   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1203            {
   1204              switch(bdbCommissioningState)
   \                     ??bdb_reportCommissioningState_0:
   \   000028   E9           MOV       A,R1
   \   000029   24FE         ADD       A,#-0x2
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??bdb_reportCommissioningState_2 & 0xFFFF
   \   000030   24FE         ADD       A,#-0x2
   \   000032   6012         JZ        ??bdb_reportCommissioningState_3
   \   000034   14           DEC       A
   \   000035   604B         JZ        ??bdb_reportCommissioningState_4
   \   000037   14           DEC       A
   \   000038   7003         JNZ       $+5
   \   00003A   02....       LJMP      ??bdb_reportCommissioningState_5 & 0xFFFF
   \   00003D   14           DEC       A
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??bdb_reportCommissioningState_6 & 0xFFFF
   \   000043   02....       LJMP      ??bdb_reportCommissioningState_7 & 0xFFFF
   1205              {
   1206          #if (ZG_BUILD_JOINING_TYPE)
   1207                case BDB_COMMISSIONING_STATE_JOINING:
   1208                  if(ZG_DEVICE_JOINING_TYPE)
   1209                  {
   1210                    //Prepare for the next state or commissioning mode to be excecuted
   1211                    osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   1212          
   1213                    if(didSuccess)
   1214                    {
   1215                      //Next state is TC link key exchange
   1216                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE;
   1217                      //Free the list of nwk discovered
   1218                      while(pBDBListNwk)
   1219                      {
   1220                        bdb_nwkDescFree(pBDBListNwk);
   1221                      }
   1222                      
   1223                      //Set the poll rate of the ZED joining device to 1 second to allow TCLK 
   1224                      //exchange be perfomed successfully in cases in which application has a 
   1225                      //slow pollrate
   1226                      NLME_SetPollRate(TCLK_POLL_RATE);
   1227                      
   1228                      //No notification in this step
   1229                      return;
   1230                    } 
   1231                    else
   1232                    {
   1233                      uint8 temp = FALSE;
   1234                      //If fail, then restore poll rate
   1235                      NLME_SetPollRate(POLL_RATE);
   1236                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   1237                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   1238                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   1239                      bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
   1240                      
   1241                      //Turn off the radio
   1242                      ZMacSetReq(ZMacRxOnIdle, &temp);
   1243                      //Set the device to FN, to start as new for subsequent attempts
   1244                      bdb_setFN();
   1245                      NLME_ResetRequest();
   1246                      ZDApp_ChangeState( DEV_HOLD );
   1247                      
   1248                      //Free the list of nwk discovered
   1249                      while(pBDBListNwk)
   1250                      {
   1251                        bdb_nwkDescFree(pBDBListNwk);
   1252                      }
   1253                    }
   1254                  }
   1255                break;
   1256          
   1257                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   1258                  if(ZG_DEVICE_JOINING_TYPE)
   1259                  {
   1260                    if(didSuccess)
   1261                    {
   1262                      //Clear any setting that would set the device as FN
   1263                      zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);            
   1264                      
   1265                      //Next state is nwk steering on the nwk (permit joining)
   1266                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
   1267                      osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE, 50);
   1268                      
   1269                      //Set the poll rate to the application default after TCLK success
   1270                      NLME_SetPollRate(POLL_RATE);
   1271          
   1272                      osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT );
   1273                      //No notification to the user is needed
   1274                      return;
   1275                    }
   1276                    else
   1277                    {
   1278                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   1279                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TCLK_EX_FAILURE;
   1280                      
   1281                      osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
   1282                     
   1283                      //No process shall be attempted after this fail
   1284                      bdbAttributes.bdbCommissioningMode = 0;
   1285                      
   1286                      //Fill the context for the user notification
   1287                      osal_start_timerEx(bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL,BDB_TC_LINK_KEY_EXCHANGE_FAIL_LEAVE_TIMEOUT);
   1288                    }
   1289                  }
   1290                break;
   1291          #endif
   1292                
   1293                case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
   1294                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   \                     ??bdb_reportCommissioningState_3:
   \   000046   7401         MOV       A,#0x1
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   7401         MOV       A,#0x1
   \   00004D   F0           MOVX      @DPTR,A
   1295                  if(didSuccess)
   \   00004E   EA           MOV       A,R2
   \   00004F   90....       MOV       DPTR,#bdbAttributes + 10
   \   000052   6011         JZ        ??bdb_reportCommissioningState_8
   1296                  {
   1297                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000054   E4           CLR       A
   \   000055   F0           MOVX      @DPTR,A
   1298                    
   1299          #if (ZG_BUILD_RTR_TYPE)          
   1300                    //Update ZDApp state
   1301                    if(ZG_DEVICE_RTRONLY_TYPE)
   \   000056   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6401         XRL       A,#0x1
   \   00005C   700A         JNZ       ??bdb_reportCommissioningState_9
   1302                    {          
   1303                      ZDApp_ChangeState( DEV_ROUTER );
   \   00005E                ; Setup parameters for call to function ZDApp_ChangeState
   \   00005E   7907         MOV       R1,#0x7
   \   000060   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   000063   8003         SJMP      ??bdb_reportCommissioningState_9
   1304                    }
   1305          #endif
   1306          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1307                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1308                    {
   1309                      ZDApp_ChangeState( DEV_END_DEVICE );
   1310                    }
   1311          #endif
   1312                  }
   1313          #if (ZG_BUILD_COORDINATOR_TYPE)
   1314                  else
   1315                  {
   1316                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1317                    {
   1318                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \                     ??bdb_reportCommissioningState_8:
   \   000065   7402         MOV       A,#0x2
   \   000067   F0           MOVX      @DPTR,A
   1319                    }
   1320                  }
   1321          #endif
   1322                  
   1323                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_9:
   \   000068   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00006B   E4           CLR       A
   \   00006C   F0           MOVX      @DPTR,A
   1324                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   00006D                ; Setup parameters for call to function osal_start_timerEx
   \   00006D   90....       MOV       DPTR,#__Constant_32
   \   000070   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000073   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   1325                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
   \   000079   90....       MOV       DPTR,#bdbAttributes + 11
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   C2E1         CLR       0xE0 /* A   */.1
   \   00007F   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1326                break;
   1327                
   1328                case BDB_COMMISSIONING_STATE_FORMATION:
   1329                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FORMATION;
   \                     ??bdb_reportCommissioningState_4:
   \   000082   7401         MOV       A,#0x1
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   7402         MOV       A,#0x2
   \   000089   F0           MOVX      @DPTR,A
   1330          
   1331                  if(didSuccess)
   \   00008A   EA           MOV       A,R2
   \   00008B   90....       MOV       DPTR,#bdbAttributes + 10
   \   00008E   6019         JZ        ??bdb_reportCommissioningState_11
   1332                  {
   1333                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000090   E4           CLR       A
   \   000091   F0           MOVX      @DPTR,A
   1334          
   1335                    //Clear any setting that would set the device as FN
   1336                    zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);          
   \   000092                ; Setup parameters for call to function zgWriteStartupOptions
   \   000092   7A03         MOV       R2,#0x3
   \   000094   F9           MOV       R1,A
   \   000095   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1337                    
   1338                     //Update ZDApp State
   1339          #if (ZG_BUILD_RTR_TYPE)
   1340                    if(ZG_DEVICE_RTRONLY_TYPE)
   \   000098   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   6401         XRL       A,#0x1
   \   00009E   7005         JNZ       ??bdb_reportCommissioningState_12
   1341                    {          
   1342                      ZDApp_ChangeState( DEV_ROUTER );
   \   0000A0                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000A0   7907         MOV       R1,#0x7
   \   0000A2   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1343                    }
   1344          #endif    
   1345          #if (ZG_BUILD_COORDINATOR_TYPE)
   1346                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1347                    {          
   1348                      ZDApp_ChangeState( DEV_ZB_COORD );
   \                     ??bdb_reportCommissioningState_12:
   \   0000A5                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000A5   7909         MOV       R1,#0x9
   \   0000A7   802C         SJMP      ??bdb_reportCommissioningState_13
   1349                    }     
   1350          #endif
   1351                  }
   1352                  else
   1353                  {
   1354                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_FORMATION_FAILURE;
   \                     ??bdb_reportCommissioningState_11:
   \   0000A9   7408         MOV       A,#0x8
   \   0000AB   F0           MOVX      @DPTR,A
   1355                    //If not on the nwk, then restart the nwk parameters
   1356          #if (ZG_BUILD_RTR_TYPE)
   1357                    if(ZG_DEVICE_RTR_TYPE)
   \   0000AC   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   6004         JZ        ??bdb_reportCommissioningState_14
   \   0000B2   6401         XRL       A,#0x1
   \   0000B4   7022         JNZ       ??bdb_reportCommissioningState_15
   1358                    {           
   1359                      if(!bdbAttributes.bdbNodeIsOnANetwork)
   \                     ??bdb_reportCommissioningState_14:
   \   0000B6   90....       MOV       DPTR,#bdbAttributes + 14
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   701C         JNZ       ??bdb_reportCommissioningState_15
   1360                      {
   1361                        uint8 temp = FALSE;
   \   0000BC   7403         MOV       A,#0x3
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   E4           CLR       A
   \   0000C2   F0           MOVX      @DPTR,A
   1362                        //Turn off the radio
   1363                        ZMacSetReq(ZMacRxOnIdle, &temp);
   \   0000C3                ; Setup parameters for call to function ZMacSetReq
   \   0000C3   7403         MOV       A,#0x3
   \   0000C5   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C8   7952         MOV       R1,#0x52
   \   0000CA   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1364                        //Set the device to FN, to start as new for subsequent attempts
   1365                        bdb_setFN();
   \   0000CD                ; Setup parameters for call to function bdb_setFN
   \   0000CD   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1366                        NLME_ResetRequest();
   \   0000D0                ; Setup parameters for call to function NLME_ResetRequest
   \   0000D0   12....       LCALL     `??NLME_ResetRequest::?relay`; Banked call to: NLME_ResetRequest
   1367                        ZDApp_ChangeState( DEV_HOLD );
   \   0000D3                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000D3   7900         MOV       R1,#0x0
   \                     ??bdb_reportCommissioningState_13:
   \   0000D5   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1368                      }
   1369                    }
   1370          #endif
   1371                  }
   1372                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_15:
   \   0000D8   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000DB   E4           CLR       A
   \   0000DC   F0           MOVX      @DPTR,A
   1373                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   0000DD                ; Setup parameters for call to function osal_start_timerEx
   \   0000DD   90....       MOV       DPTR,#__Constant_32
   \   0000E0   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000E3   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000E6   12....       LCALL     ?DEALLOC_XSTACK8
   1374                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_FORMATION;
   \   0000E9   90....       MOV       DPTR,#bdbAttributes + 11
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   C2E2         CLR       0xE0 /* A   */.2
   \   0000EF   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1375                break;  
   1376                
   1377          
   1378                case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   1379          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
   1380                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   \                     ??bdb_reportCommissioningState_5:
   \   0000F2   7401         MOV       A,#0x1
   \   0000F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F7   7403         MOV       A,#0x3
   \   0000F9   F0           MOVX      @DPTR,A
   1381          
   1382                  //Do not notify the status if we have another identify to send
   1383                  if(bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   0000FA   90....       MOV       DPTR,#bdbAttributes + 10
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   7006         JNZ       ??bdb_reportCommissioningState_16
   1384                  {
   1385                    //Success at least once during F&B as initiator, mark it
   1386                    bdb_FBStateSuccessLatch = TRUE;
   \   000100   90....       MOV       DPTR,#bdb_FBStateSuccessLatch
   \   000103   7401         MOV       A,#0x1
   \   000105   F0           MOVX      @DPTR,A
   1387                  }        
   1388                  
   1389                  //Will we process another indentify?
   1390                  if(((FINDING_AND_BINDING_PERIODIC_ENABLE == FALSE) || (bdb_FB_InitiatorCurrentCyclesNumber == 0)) && (bdb_getRespondentRetry(pRespondentHead) == NULL) && (osal_get_timeoutEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0))
   \                     ??bdb_reportCommissioningState_16:
   \   000106   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   6003         JZ        $+5
   \   00010C   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   00010F                ; Setup parameters for call to function bdb_getRespondentRetry
   \   00010F   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000112   6003         JZ        $+5
   \   000114   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   000117                ; Setup parameters for call to function osal_get_timeoutEx
   \   000117   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00011A   6003         JZ        $+5
   \   00011C   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1391                  {
   1392                    // Dealocate respondent list and clean all the F&B process
   1393                    pRespondentCurr = NULL;
   \   00011F   90....       MOV       DPTR,#pRespondentCurr
   \   000122   E4           CLR       A
   \   000123   F0           MOVX      @DPTR,A
   \   000124   A3           INC       DPTR
   \   000125   F0           MOVX      @DPTR,A
   1394                    pRespondentNext = NULL;
   \   000126   90....       MOV       DPTR,#pRespondentNext
   \   000129   F0           MOVX      @DPTR,A
   \   00012A   A3           INC       DPTR
   \   00012B   F0           MOVX      @DPTR,A
   1395                    bdb_zclRespondentListClean( &pRespondentHead );
   \   00012C                ; Setup parameters for call to function bdb_zclRespondentListClean
   \   00012C   7A..         MOV       R2,#pRespondentHead & 0xff
   \   00012E   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   000130   12....       LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
   1396                    osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   \   000133                ; Setup parameters for call to function osal_stop_timerEx
   \   000133   7A00         MOV       R2,#0x0
   \   000135   7B40         MOV       R3,#0x40
   \   000137   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   1397                    
   1398                    //Report success if in any of the attempts we got success, regardless that we did receive no rsp on the last attempt
   1399                    if(bdb_FBStateSuccessLatch && (bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE))
   \                     ??CrossCallReturnLabel_112:
   \   00013A   90....       MOV       DPTR,#bdb_FBStateSuccessLatch
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   600A         JZ        ??bdb_reportCommissioningState_17
   \   000140   90....       MOV       DPTR,#bdbAttributes + 10
   \   000143   E0           MOVX      A,@DPTR
   \   000144   640B         XRL       A,#0xb
   \   000146   7002         JNZ       ??bdb_reportCommissioningState_17
   1400                    {
   1401                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000148   E4           CLR       A
   \   000149   F0           MOVX      @DPTR,A
   1402                    }
   1403                    
   1404                    //Set default state
   1405                    bdb_FBStateSuccessLatch = FALSE;
   \                     ??bdb_reportCommissioningState_17:
   \   00014A   90....       MOV       DPTR,#bdb_FBStateSuccessLatch
   \   00014D   E4           CLR       A
   \   00014E   F0           MOVX      @DPTR,A
   1406                    
   1407                    //Resume BDB machine state only if we were in F&B, if we were on parent lost, only clean the commissioning mode and remove from bdb_ParentLostSavedState
   1408                    if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   \   00014F   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000152   E0           MOVX      A,@DPTR
   \   000153   6406         XRL       A,#0x6
   \   000155   7010         JNZ       ??bdb_reportCommissioningState_18
   1409                    {
   1410                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000157   E4           CLR       A
   \   000158   F0           MOVX      @DPTR,A
   1411                      osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
   \   000159                ; Setup parameters for call to function osal_start_timerEx
   \   000159   90....       MOV       DPTR,#__Constant_32
   \   00015C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00015F   12....       LCALL     ?Subroutine13 & 0xFFFF
   1412                    }
   \                     ??CrossCallReturnLabel_94:
   \   000162   12....       LCALL     ?DEALLOC_XSTACK8
   \   000165   800A         SJMP      ??bdb_reportCommissioningState_19
   1413                    else if(bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   \                     ??bdb_reportCommissioningState_18:
   \   000167   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   6406         XRL       A,#0x6
   \   00016D   7002         JNZ       ??bdb_reportCommissioningState_19
   1414                    {
   1415                      bdbCommissioningProcedureState.bdb_ParentLostSavedState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   00016F   E4           CLR       A
   \   000170   F0           MOVX      @DPTR,A
   1416                    }
   1417                    
   1418                    bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
   \                     ??bdb_reportCommissioningState_19:
   \   000171   90....       MOV       DPTR,#bdbAttributes + 11
   \   000174   E0           MOVX      A,@DPTR
   \   000175   C2E3         CLR       0xE0 /* A   */.3
   \   000177   8074         SJMP      ??bdb_reportCommissioningState_10
   1419                  }
   1420                  else
   1421                  {
   1422                    return;
   1423                  }
   1424          
   1425          #endif
   1426                break;     
   1427                case BDB_COMMISSIONING_STATE_TL:
   1428                  // Set NWK task to run
   1429                  nwk_setStateIdle( FALSE );
   \                     ??bdb_reportCommissioningState_2:
   \   000179                ; Setup parameters for call to function nwk_setStateIdle
   \   000179   7900         MOV       R1,#0x0
   \   00017B   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   1430                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_TOUCHLINK;
   \   00017E   7401         MOV       A,#0x1
   \   000180   12....       LCALL     ?XSTACK_DISP0_8
   \   000183   7404         MOV       A,#0x4
   \   000185   F0           MOVX      @DPTR,A
   1431                  if(didSuccess)
   \   000186   EF           MOV       A,R7
   \   000187   6014         JZ        ??bdb_reportCommissioningState_20
   1432                  {
   1433                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000189   90....       MOV       DPTR,#bdbAttributes + 10
   \   00018C   E4           CLR       A
   \   00018D   F0           MOVX      @DPTR,A
   1434                    bdbAttributes.bdbCommissioningMode = BDB_COMMISSIONING_MODE_IDDLE;
   \   00018E   A3           INC       DPTR
   \   00018F   F0           MOVX      @DPTR,A
   1435                    
   1436                    //Update ZDApp state
   1437          #if (ZG_BUILD_RTR_TYPE)
   1438                    if(ZG_DEVICE_RTRONLY_TYPE)
   \   000190   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000193   E0           MOVX      A,@DPTR
   \   000194   6401         XRL       A,#0x1
   \   000196   7005         JNZ       ??bdb_reportCommissioningState_20
   1439                    {          
   1440                      ZDApp_ChangeState( DEV_ROUTER );
   \   000198                ; Setup parameters for call to function ZDApp_ChangeState
   \   000198   7907         MOV       R1,#0x7
   \   00019A   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1441                    }
   1442          #endif
   1443          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1444                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1445                    {
   1446                      ZDApp_ChangeState( DEV_END_DEVICE );
   1447                    }
   1448          #endif          
   1449                  }
   1450                  //The fail status is already set from the calling function to report commissioning process
   1451                  
   1452                  // The commissioning FAIL status is set before calling the bdb_reportCommissioningState
   1453                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_20:
   \   00019D   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001A0   E4           CLR       A
   \   0001A1   F0           MOVX      @DPTR,A
   1454                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
   \   0001A2                ; Setup parameters for call to function osal_start_timerEx
   \   0001A2   90....       MOV       DPTR,#__Constant_32
   \   0001A5   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001A8   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0001AB   12....       LCALL     ?DEALLOC_XSTACK8
   1455                  //Clear the event
   1456                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
   \   0001AE   90....       MOV       DPTR,#bdbAttributes + 11
   \   0001B1   E0           MOVX      A,@DPTR
   \   0001B2   C2E0         CLR       0xE0 /* A   */.0
   \   0001B4   8037         SJMP      ??bdb_reportCommissioningState_10
   1457                  
   1458                break;
   1459                
   1460                case BDB_INITIALIZATION:
   1461                  //Notify user about successfull initialization
   1462                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_INITIALIZATION;
   \                     ??bdb_reportCommissioningState_6:
   \   0001B6   7401         MOV       A,#0x1
   \   0001B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BB   E4           CLR       A
   \   0001BC   F0           MOVX      @DPTR,A
   1463                  if(didSuccess)
   \   0001BD   EA           MOV       A,R2
   \   0001BE   6021         JZ        ??bdb_reportCommissioningState_21
   1464                  {
   1465                    //Update ZDApp state
   1466          #if (ZG_BUILD_COORDINATOR_TYPE)
   1467                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1468                    {          
   1469                      ZDApp_ChangeState( DEV_ZB_COORD );
   \   0001C0                ; Setup parameters for call to function ZDApp_ChangeState
   \   0001C0   7909         MOV       R1,#0x9
   \   0001C2   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1470                    }
   1471          #endif          
   1472          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1473                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1474                    {
   1475                      uint32 pollrate = POLL_RATE;
   1476                      NLME_SetPollRate(pollrate);
   1477                      ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   1478                      
   1479                    }
   1480          #endif          
   1481                    ZDApp_RestoreNwkSecMaterial();
   \   0001C5                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   0001C5   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   1482                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
   \   0001C8   90....       MOV       DPTR,#bdbAttributes + 10
   \   0001CB   740D         MOV       A,#0xd
   \   0001CD   F0           MOVX      @DPTR,A
   1483                    bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   0001CE   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001D1   E4           CLR       A
   \   0001D2   F0           MOVX      @DPTR,A
   1484                    osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,200);
   \   0001D3                ; Setup parameters for call to function osal_start_timerEx
   \   0001D3   90....       MOV       DPTR,#__Constant_c8
   \   0001D6   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001D9   12....       LCALL     ?Subroutine13 & 0xFFFF
   1485                  }
   \                     ??CrossCallReturnLabel_96:
   \   0001DC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DF   8006         SJMP      ??bdb_reportCommissioningState_22
   1486                  else
   1487                  {
   1488          #if (ZG_BUILD_ENDDEVICE_TYPE)                   
   1489                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1490                    {
   1491                      if(bdb_isDeviceNonFactoryNew())
   1492                      {
   1493                        //Notify the user about losing parent
   1494                        bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
   1495                        bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
   1496                        
   1497                        //Update ZDApp state
   1498                        ZDApp_ChangeState( DEV_NWK_ORPHAN );
   1499                      }
   1500                    }
   1501          #endif
   1502                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \                     ??bdb_reportCommissioningState_21:
   \   0001E1   90....       MOV       DPTR,#bdbAttributes + 10
   \   0001E4   7402         MOV       A,#0x2
   \   0001E6   F0           MOVX      @DPTR,A
   1503                  }
   1504                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIALIZATION;
   \                     ??bdb_reportCommissioningState_22:
   \   0001E7   90....       MOV       DPTR,#bdbAttributes + 11
   \   0001EA   E0           MOVX      A,@DPTR
   \   0001EB   C2E4         CLR       0xE0 /* A   */.4
   \                     ??bdb_reportCommissioningState_10:
   \   0001ED   F0           MOVX      @DPTR,A
   1505          
   1506                break;
   1507          #if (ZG_BUILD_ENDDEVICE_TYPE)     
   1508                case BDB_PARENT_LOST:
   1509                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
   1510                  if(ZG_DEVICE_ENDDEVICE_TYPE)
   1511                  {
   1512                    if(didSuccess)
   1513                    {
   1514                      uint32 pollrate = POLL_RATE;
   1515                      bdbCommissioningProcedureState.bdbCommissioningState = bdbCommissioningProcedureState.bdb_ParentLostSavedState;  
   1516                      bdbCommissioningProcedureState.bdb_ParentLostSavedState = 0;
   1517                      NLME_SetPollRate(pollrate);
   1518                      bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_PARENT_LOST;
   1519                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
   1520                      //Update ZDApp state
   1521                      ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   1522                      
   1523                      bdb_NetworkRestoredResumeState();
   1524                    }
   1525                    else
   1526                    {
   1527                      bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
   1528                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   1529                      
   1530                      NLME_SetPollRate(0);
   1531                      
   1532                    }
   1533                  }
   1534                break;
   1535          #endif
   1536              }
   1537          #ifdef MT_APP_CNF_FUNC
   1538              //Notify the user about the status, the main state which has failed
   1539              bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
   1540              
   1541              bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   1542          #else
   1543              if(pfnCommissioningStatusCB)
   \                     ??bdb_reportCommissioningState_7:
   \   0001EE   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   0001F1   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0001F4   6016         JZ        ??bdb_reportCommissioningState_1
   1544              {
   1545                //Notify the user about the status, the main state which has failed
   1546                bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
   \   0001F6   90....       MOV       DPTR,#bdbAttributes + 10
   \   0001F9   E0           MOVX      A,@DPTR
   \   0001FA   85..82       MOV       DPL,?XSP + 0
   \   0001FD   85..83       MOV       DPH,?XSP + 1
   \   000200   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   1547                
   1548                bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   1549              }
   1550          #endif
   1551            }  
   \                     ??CrossCallReturnLabel_47:
   \   000203   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000206   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000209   12....       LCALL     ?DEALLOC_XSTACK8
   1552          }
   \                     ??bdb_reportCommissioningState_1:
   \   00020C   7404         MOV       A,#0x4
   \   00020E   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B40         MOV       R3,#0x40
   \   000004                REQUIRE ??Subroutine47_0
   \   000004                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   90....       MOV       DPTR,#pRespondentHead
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7A04         MOV       R2,#0x4
   \   000002                REQUIRE ??Subroutine53_0
   \   000002                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine54_0
   \   000002                ; // Fall through to label ??Subroutine54_0
   1553          
   1554          
   1555           /*********************************************************************
   1556           * @fn          bdb_nwkFormationAttempt
   1557           *
   1558           * @brief       Process a nwk formation attempt.
   1559           *
   1560           * @param       didSuccess - TRUE if the nwk formation was success, FALSE 
   1561           *                         otherwise and try secondary channel
   1562           *
   1563           * @return      none
   1564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1565          void bdb_nwkFormationAttempt(bool didSuccess)
   \                     bdb_nwkFormationAttempt:
   1566          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   1567            if(didSuccess)
   \   000006   6004         JZ        ??bdb_nwkFormationAttempt_0
   1568            {
   1569              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION,TRUE);
   \   000008                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000008   7A01         MOV       R2,#0x1
   \   00000A   801F         SJMP      ??bdb_nwkFormationAttempt_1
   1570            }
   1571            else
   1572            {
   1573              //Can we try the secondary channel set?
   1574              if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
   \                     ??bdb_nwkFormationAttempt_0:
   \   00000C   90....       MOV       DPTR,#vDoPrimaryScan
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6017         JZ        ??bdb_nwkFormationAttempt_2
   \   000012   90....       MOV       DPTR,#bdbAttributes
   \   000015   12....       LCALL     ?XLOAD_R0123
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   4A           ORL       A,R2
   \   00001B   4B           ORL       A,R3
   \   00001C   600B         JZ        ??bdb_nwkFormationAttempt_2
   1575              {
   1576                vDoPrimaryScan = FALSE;
   \   00001E   90....       MOV       DPTR,#vDoPrimaryScan
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
   1577                bdb_nwkJoiningFormation(FALSE);
   \   000023                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   \   000027   8007         SJMP      ??bdb_nwkFormationAttempt_3
   1578              }
   1579              else
   1580              {
   1581                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_nwkFormationAttempt_2:
   \   000029                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000029   7A00         MOV       R2,#0x0
   \                     ??bdb_nwkFormationAttempt_1:
   \   00002B   7905         MOV       R1,#0x5
   \   00002D   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1582              }
   1583            }
   1584          }
   \                     ??bdb_nwkFormationAttempt_3:
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
   1585          
   1586          
   1587          
   1588          /*********************************************************************
   1589           * @fn          bdb_isDeviceNonFactoryNew
   1590           *
   1591           * @brief       Returns the state of bdbNodeIsOnANetwork attribute
   1592           * 
   1593           * @param       none
   1594           *
   1595           * @return      bdbNodeIsOnANetwork
   1596           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1597          bool bdb_isDeviceNonFactoryNew(void)
   \                     bdb_isDeviceNonFactoryNew:
   1598          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1599            return bdbAttributes.bdbNodeIsOnANetwork;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 14
   \   000007                REQUIRE ?Subroutine7
   \   000007                ; // Fall through to label ?Subroutine7
   1600          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX      A,@DPTR
   \   000001                REQUIRE ??Subroutine48_0
   \   000001                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   F9           MOV       R1,A
   \   000001   02....       LJMP      ??Subroutine46_0 & 0xFFFF
   1601          
   1602          
   1603          /*********************************************************************
   1604           * @fn          bdb_doTrustCenterRequireKeyExchange
   1605           *
   1606           * @brief       Returns the state of bdbTrustCenterRequireKeyExchange attribute
   1607           * 
   1608           * @param       none
   1609           *
   1610           * @return      bdbTrustCenterRequireKeyExchange
   1611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1612          bool bdb_doTrustCenterRequireKeyExchange(void)
   \                     bdb_doTrustCenterRequireKeyExchange:
   1613          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1614          #if (ZG_BUILD_COORDINATOR_TYPE) 
   1615            return bdbAttributes.bdbTrustCenterRequireKeyExchange;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 17
   \   000007   80..         SJMP      ?Subroutine7
   1616          #else
   1617            return 0;
   1618          #endif
   1619          }
   1620          
   1621          /*********************************************************************
   1622           * @fn      bdb_rejoinNwk
   1623           *
   1624           * @brief   Attempt to rejoin/resume a nwk from nv parameters
   1625           *
   1626           * @param   none
   1627           *
   1628           * @return  ZStatus_t
   1629           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1630          ZStatus_t bdb_rejoinNwk(void)
   \                     bdb_rejoinNwk:
   1631          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1632            ZStatus_t rejoinStatus = ZSuccess;
   \   00000A   7E00         MOV       R6,#0x0
   1633            
   1634            //Update the seq number
   1635            _NIB.SequenceNum ++;
   \   00000C   90....       MOV       DPTR,#_NIB
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   04           INC       A
   \   000011   F0           MOVX      @DPTR,A
   1636            
   1637            osal_nv_write(ZCD_NV_NIB,osal_offsetof( nwkIB_t, SequenceNum ), sizeof( uint8), &_NIB.SequenceNum );
   \   000012                ; Setup parameters for call to function osal_nv_write
   \   000012   75....       MOV       ?V0,#_NIB & 0xff
   \   000015   75....       MOV       ?V1,#(_NIB >> 8) & 0xff
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..01       MOV       ?V0,#0x1
   \   000020   8E..         MOV       ?V1,R6
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   7A21         MOV       R2,#0x21
   \   00002D   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   1638            
   1639            // Transition state machine to correct rejoin state based on nwk key
   1640            if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
   \   000033                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000033   7900         MOV       R1,#0x0
   \   000035   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000038   E9           MOV       A,R1
   \   000039   6401         XRL       A,#0x1
   \   00003B   7004         JNZ       ??bdb_rejoinNwk_0
   1641            {
   1642              ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \   00003D                ; Setup parameters for call to function ZDApp_ChangeState
   \   00003D   7904         MOV       R1,#0x4
   \   00003F   8002         SJMP      ??bdb_rejoinNwk_1
   1643            }
   1644            else
   1645            {
   1646              ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
   \                     ??bdb_rejoinNwk_0:
   \   000041                ; Setup parameters for call to function ZDApp_ChangeState
   \   000041   790E         MOV       R1,#0xe
   \                     ??bdb_rejoinNwk_1:
   \   000043   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1647            }
   1648          
   1649            // Before trying to do rejoin, check if the device has a valid short address
   1650            // If not, generate a random short address for itself
   1651            if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   000046   90....       MOV       DPTR,#_NIB + 20
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   64FE         XRL       A,#0xfe
   \   00004C   7003         JNZ       ??bdb_rejoinNwk_2
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F4           CPL       A
   \                     ??bdb_rejoinNwk_2:
   \   000051   7002         JNZ       ??bdb_rejoinNwk_3
   1652            {
   1653              rejoinStatus = ZFailure;
   \   000053   7E01         MOV       R6,#0x1
   1654            }
   1655          
   1656            // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1657            if ( _NIB.nwkPanId == 0xFFFF )
   \                     ??bdb_rejoinNwk_3:
   \   000055   90....       MOV       DPTR,#_NIB + 33
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F4           CPL       A
   \   00005A   7003         JNZ       ??bdb_rejoinNwk_4
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F4           CPL       A
   \                     ??bdb_rejoinNwk_4:
   \   00005F   7004         JNZ       ??bdb_rejoinNwk_5
   1658            {
   1659              rejoinStatus = ZFailure;
   \   000061   7E01         MOV       R6,#0x1
   \   000063   803A         SJMP      ??bdb_rejoinNwk_6
   1660            }
   1661          
   1662            if(rejoinStatus == ZSuccess)
   \                     ??bdb_rejoinNwk_5:
   \   000065   EE           MOV       A,R6
   \   000066   A2E0         MOV       C,0xE0 /* A   */.0
   \   000068   4035         JC        ??bdb_rejoinNwk_6
   1663            {
   1664              uint8 tmp = true;
   \   00006A   85..82       MOV       DPL,?XSP + 0
   \   00006D   85..83       MOV       DPH,?XSP + 1
   \   000070   7401         MOV       A,#0x1
   \   000072   F0           MOVX      @DPTR,A
   1665              ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   000073                ; Setup parameters for call to function ZMacSetReq
   \   000073   AA..         MOV       R2,?XSP + 0
   \   000075   AB..         MOV       R3,?XSP + 1
   \   000077   7952         MOV       R1,#0x52
   \   000079   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1666                  
   1667              // Perform Secure or Unsecure Rejoin depending on available configuration
   1668              if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
   \   00007C                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00007C   7901         MOV       R1,#0x1
   \   00007E   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000081   E9           MOV       A,R1
   \   000082   6401         XRL       A,#0x1
   \   000084   90....       MOV       DPTR,#_NIB + 22
   \   000087   700B         JNZ       ??bdb_rejoinNwk_7
   1669              {
   1670                rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
   \   000089                ; Setup parameters for call to function NLME_ReJoinRequest
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F9           MOV       R1,A
   \   00008B   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00008D   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00008F   12....       LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   000092   8009         SJMP      ??bdb_rejoinNwk_8
   1671              }
   1672              else
   1673              {
   1674                rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
   \                     ??bdb_rejoinNwk_7:
   \   000094                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F9           MOV       R1,A
   \   000096   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000098   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00009A   12....       LCALL     `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??bdb_rejoinNwk_8:
   \   00009D   E9           MOV       A,R1
   \   00009E   FE           MOV       R6,A
   1675              }
   1676            }
   1677            
   1678            return rejoinStatus;
   \                     ??bdb_rejoinNwk_6:
   \   00009F   EE           MOV       A,R6
   \   0000A0   F9           MOV       R1,A
   \   0000A1   7401         MOV       A,#0x1
   \   0000A3   02....       LJMP      ?Subroutine1 & 0xFFFF
   1679          }
   1680          
   1681          #if (ZG_BUILD_JOINING_TYPE)
   1682           /*********************************************************************
   1683           * @fn          bdb_nwkDiscoveryAttempt
   1684           *
   1685           * @brief       Process a nwk discovery attempt
   1686           *
   1687           * @param       didSuccess - TRUE we found nwk in the scanned channels, FALSE if 
   1688           *                           no suitable nwks were found, try secondary channel
   1689           *
   1690           * @return      none
   1691           */
   1692          void bdb_nwkDiscoveryAttempt(bool didSuccess)
   1693          {
   1694            uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
   1695            
   1696            if(didSuccess)
   1697            {
   1698              bdb_SendMsg(bdb_TaskID, BDB_COMMISSIONING_STATE_JOINING, BDB_MSG_EVENT_SUCCESS,sizeof(bdbJoinEvent),(uint8*)&bdbJoinEvent);
   1699            }
   1700            else
   1701            {
   1702              //Can we try the secondary channel set?
   1703              if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
   1704              {
   1705                vDoPrimaryScan = FALSE;
   1706                bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
   1707                
   1708                ZDApp_NetworkInit( 50 );
   1709              }
   1710              else
   1711              {
   1712                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
   1713              }
   1714            }
   1715          }
   1716          
   1717           /*********************************************************************
   1718           * @fn          bdb_filterNwkDisc
   1719           *
   1720           * @brief       Filter the nwks found and attempt to join the suitable nwks
   1721           *              Here the application can include nwk filters 
   1722           *
   1723           * @param       none
   1724           *
   1725           * @return      none
   1726           */
   1727          void bdb_filterNwkDisc(void)
   1728          {
   1729            networkDesc_t* pNwkDesc;
   1730            uint8 i = 0;
   1731            uint8 ResultCount = 0;
   1732            uint8 stackProfile = 0;
   1733            uint8 stackProfilePro = 0;
   1734            
   1735            pBDBListNwk  = nwk_getNwkDescList();
   1736            nwk_desc_list_release();
   1737            
   1738            pNwkDesc = pBDBListNwk;
   1739            while (pNwkDesc)
   1740            {
   1741              ResultCount++;
   1742              pNwkDesc = pNwkDesc->nextDesc;
   1743            }
   1744            
   1745            if(pBDBListNwk)
   1746            {
   1747              if(pfnFilterNwkDesc)
   1748              {
   1749                pfnFilterNwkDesc(pBDBListNwk, ResultCount);
   1750              }
   1751              
   1752              for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   1753              {
   1754                pNwkDesc = pBDBListNwk;
   1755                
   1756                if(pNwkDesc)
   1757                {
   1758                  for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   1759                  {
   1760                    if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   1761                    {
   1762                      // If the extended Pan ID is commissioned to a non zero value
   1763                      // Only join the Pan that has match EPID
   1764                      if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   1765                      {
   1766                        //Remove from the list
   1767                        bdb_nwkDescFree(pNwkDesc);
   1768                        ResultCount--;
   1769                        continue;
   1770                      }
   1771                    }
   1772                    else if ( zgConfigPANID != 0xFFFF )
   1773                    {
   1774                      // PAN Id is preconfigured. check if it matches
   1775                      if ( pNwkDesc->panId != zgConfigPANID )
   1776                      {
   1777                        //Remove from the list
   1778                        bdb_nwkDescFree(pNwkDesc);
   1779                        ResultCount--;
   1780                        continue;
   1781                      }
   1782                    }
   1783          
   1784                    if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   1785                    {
   1786                      // check that network is allowing joining
   1787                      if ( ZSTACK_ROUTER_BUILD )
   1788                      {
   1789                        if ( stackProfilePro == FALSE )
   1790                        {
   1791                          if ( !pNwkDesc->routerCapacity )
   1792                          {
   1793                            //Remove from the list
   1794                            bdb_nwkDescFree(pNwkDesc);
   1795                            ResultCount--;
   1796                            continue;
   1797                          }
   1798                        }
   1799                        else
   1800                        {
   1801                          if ( !pNwkDesc->deviceCapacity )
   1802                          {
   1803                            //Remove from the list
   1804                            bdb_nwkDescFree(pNwkDesc);
   1805                            ResultCount--;
   1806                            continue;
   1807                          }
   1808                        }
   1809                      }
   1810                      else if ( ZSTACK_END_DEVICE_BUILD )
   1811                      {
   1812                        if ( !pNwkDesc->deviceCapacity )
   1813                        {
   1814                          //Remove from the list
   1815                          bdb_nwkDescFree(pNwkDesc);
   1816                          ResultCount--;
   1817                          continue;
   1818                        }
   1819                      }
   1820                    }
   1821          
   1822                    // check version of zigbee protocol
   1823                    if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   1824                      continue;
   1825          
   1826                    // check version of stack profile
   1827                    if ( pNwkDesc->stackProfile != zgStackProfile  )
   1828                    {
   1829                      if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   1830                          || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   1831                      {
   1832                        stackProfilePro = TRUE;
   1833                      }
   1834          
   1835                      if ( stackProfile == 0 )
   1836                      {
   1837                        //Remove from the list
   1838                        bdb_nwkDescFree(pNwkDesc);
   1839                        ResultCount--;
   1840                        continue;
   1841                      }
   1842                    }
   1843                  }
   1844                }
   1845              }
   1846            }
   1847          }
   1848                
   1849           /*********************************************************************
   1850           * @fn          bdb_tryNwkAssoc
   1851           *
   1852           * @brief       Try to associate to the first network in the network descriptor list
   1853           *
   1854           * @param       none
   1855           *
   1856           * @return      none
   1857           */
   1858          static void bdb_tryNwkAssoc(void)
   1859          {
   1860            if(pBDBListNwk)
   1861            {
   1862              bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
   1863              
   1864              //Try the first in the list after the filtering
   1865              if(ZSuccess != bdb_joinProcess(pBDBListNwk))
   1866              {
   1867                //If fail, free the first in the list and prepare for futher processing, either next nwk or discover again
   1868                uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
   1869                bdb_nwkDescFree(pBDBListNwk);
   1870                bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
   1871              }
   1872            }
   1873            else
   1874            {
   1875              bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_NWK_DISC;
   1876              uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
   1877              
   1878              bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
   1879            }
   1880          }
   1881          
   1882          
   1883          
   1884           /*********************************************************************
   1885           * @fn          bdb_nwkAssocAttemt
   1886           *
   1887           * @brief       Process the result of an attempt to associate to a network 
   1888           *
   1889           * @param       didSuccess - bool
   1890           *
   1891           * @return      none
   1892           */
   1893          void bdb_nwkAssocAttemt(bool didSuccess)
   1894          {
   1895            bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_STATE_JOINING;
   1896            uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
   1897            uint8 status;
   1898            
   1899            if(didSuccess)
   1900            {
   1901              status = BDB_MSG_EVENT_SUCCESS;
   1902            }
   1903            else
   1904            {
   1905              if(bdb_nwkAssocRetriesCount < BDBC_REC_SAME_NETWORK_RETRY_ATTEMPS)
   1906              {
   1907                bdb_nwkAssocRetriesCount++;
   1908              }
   1909              else
   1910              {
   1911                //Free the first in the list and prepare for futher processing
   1912                bdb_nwkDescFree(pBDBListNwk);
   1913                bdb_nwkAssocRetriesCount = 0;
   1914              }
   1915              status = BDB_MSG_EVENT_FAIL;
   1916            }
   1917            bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,status,sizeof(uint8),&bdbJoinEvent);
   1918          }
   1919                                 
   1920          
   1921          /****************************************************************************
   1922           * @fn          bdb_nwkDescFree
   1923           *
   1924           * @brief       This function frees one network discovery data.
   1925           *
   1926           * @param       ZSuccess - If the device was found and erased
   1927           * @param       ZInvalidParameter - Not found
   1928           *
   1929           * @return      none
   1930           */
   1931          ZStatus_t bdb_nwkDescFree(networkDesc_t* nodeDescToRemove)
   1932          {
   1933            networkDesc_t* current_desc;
   1934            networkDesc_t* prev_desc;
   1935            
   1936            current_desc = pBDBListNwk;
   1937          
   1938            while(current_desc != NULL)
   1939            {  
   1940              if(current_desc == nodeDescToRemove)
   1941              {
   1942                if (current_desc == pBDBListNwk)
   1943                {
   1944                  pBDBListNwk = pBDBListNwk->nextDesc;
   1945                }
   1946                else
   1947                {
   1948                  prev_desc->nextDesc = current_desc->nextDesc;
   1949                }
   1950                
   1951                osal_mem_free( current_desc );
   1952                
   1953                return ZSuccess;
   1954              }
   1955          
   1956              prev_desc = current_desc;
   1957              current_desc = current_desc->nextDesc;
   1958            }
   1959            
   1960            return ZInvalidParameter;
   1961          }
   1962          
   1963          /*********************************************************************
   1964          * @fn          bdb_joinProcess
   1965          *
   1966          * @brief       Start the joining process for the selected nwk
   1967          *
   1968          * @return      ZStatus_t
   1969          */  
   1970          ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk)
   1971          {
   1972            ZStatus_t status;
   1973           
   1974            ZDApp_ChangeState( DEV_NWK_JOINING );
   1975            ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   1976          
   1977            status =  NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1978                                  pChosenNwk->logicalChannel,
   1979                                  ZDO_Config_Node_Descriptor.CapabilityFlags,
   1980                                  pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth );
   1981            
   1982            if(status == ZSuccess)
   1983            {
   1984              // The receiver is on, turn network layer polling off.
   1985              if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   1986              {
   1987                // for an End Device with NO Child Table Management process or for a Router
   1988                if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1989                     ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   1990                {
   1991                  NLME_SetPollRate( 0 );
   1992                  NLME_SetQueuedPollRate( 0 );
   1993                  NLME_SetResponseRate( 0 );
   1994                }
   1995              }
   1996              else
   1997              {
   1998                if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1999                {
   2000                  ZDApp_SavedPollRate = zgPollRate;
   2001                  NLME_SetPollRate( zgRejoinPollRate );
   2002                }
   2003              }
   2004            }
   2005            return status;
   2006          }
   2007          #endif
   2008          
   2009          
   2010           /*********************************************************************
   2011           * @fn          bdb_setChannelAttribute
   2012           *
   2013           * @brief       Set the primary or seconday channel for discovery or formation procedure
   2014           *
   2015           * @param       isPrimaryChannel - True if channel to set is primary,  
   2016           *                                 False if the channel to set is secondary
   2017           *
   2018           * @param       channel - Channel mask
   2019           *
   2020           * @return      none
   2021           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2022          void bdb_setChannelAttribute(bool isPrimaryChannel, uint32 channel)
   \                     bdb_setChannelAttribute:
   2023          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   2024            if(isPrimaryChannel)
   \   00000D   E9           MOV       A,R1
   \   00000E   6005         JZ        ??bdb_setChannelAttribute_0
   2025            {
   2026              bdbAttributes.bdbPrimaryChannelSet = channel;
   \   000010   90....       MOV       DPTR,#bdbAttributes + 4
   \   000013   8003         SJMP      ??bdb_setChannelAttribute_1
   2027            }
   2028            else
   2029            {
   2030              bdbAttributes.bdbSecondaryChannelSet = channel;
   \                     ??bdb_setChannelAttribute_0:
   \   000015   90....       MOV       DPTR,#bdbAttributes
   \                     ??bdb_setChannelAttribute_1:
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
   2031            }
   2032          }
   \   00001D   80..         SJMP      ??Subroutine50_0
   2033          
   2034           /*********************************************************************
   2035           * @fn          bdb_setChannel
   2036           *
   2037           * @brief       Set channel and save it in Nv for joining/formation operations
   2038           *
   2039           * @param       channel - Channel mask
   2040           *
   2041           * @return      none
   2042           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2043          void bdb_setChannel(uint32 channel)
   \                     bdb_setChannel:
   2044          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   2045            //Assign the channel and save it into nv
   2046            vScanChannels = channel;
   \   00000D   90....       MOV       DPTR,#zgDefaultChannelList
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_MOV_TO_X
   2047            runtimeChannel = channel;
   \   000015   90....       MOV       DPTR,#runtimeChannel
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
   2048              
   2049            osal_nv_write(ZCD_NV_CHANLIST,0,sizeof(uint32),&vScanChannels);
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   75....       MOV       ?V0,#zgDefaultChannelList & 0xff
   \   000020   75....       MOV       ?V1,#(zgDefaultChannelList >> 8) & 0xff
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75..04       MOV       ?V0,#0x4
   \   00002B   75..00       MOV       ?V1,#0x0
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV       R4,#0x0
   \   000035   7D00         MOV       R5,#0x0
   \   000037   7A84         MOV       R2,#-0x7c
   \   000039   7B00         MOV       R3,#0x0
   \   00003B   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003E   80..         SJMP      ?Subroutine2
   2050          }
   2051          
   2052          
   2053           /*********************************************************************
   2054           * @fn          bdb_nwkJoiningFormation   
   2055           *
   2056           * @brief       Performs Joining/Formation operation on primary or secondary channel
   2057           *
   2058           * @param       isJoining - TRUE if the device is performing joining, FALSE is performing Formation
   2059           *
   2060           * @return      none
   2061           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2062          void bdb_nwkJoiningFormation(bool isJoining)
   \                     bdb_nwkJoiningFormation:
   2063          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2064            
   2065            if((vDoPrimaryScan) && (bdbAttributes.bdbPrimaryChannelSet))
   \   000007   90....       MOV       DPTR,#vDoPrimaryScan
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   601C         JZ        ??bdb_nwkJoiningFormation_0
   \   00000D   90....       MOV       DPTR,#bdbAttributes + 4
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_MOV_X
   \   000015   E5..         MOV       A,?V0
   \   000017   45..         ORL       A,?V1
   \   000019   45..         ORL       A,?V2
   \   00001B   45..         ORL       A,?V3
   \   00001D   600A         JZ        ??bdb_nwkJoiningFormation_0
   2066            {
   2067              bdb_setChannel(bdbAttributes.bdbPrimaryChannelSet);
   \   00001F                ; Setup parameters for call to function bdb_setChannel
   \   00001F   AA..         MOV       R2,?V0
   \   000021   AB..         MOV       R3,?V1
   \   000023   AC..         MOV       R4,?V2
   \   000025   AD..         MOV       R5,?V3
   \   000027   800B         SJMP      ??bdb_nwkJoiningFormation_1
   2068            }
   2069            else
   2070            {
   2071              vDoPrimaryScan = FALSE;
   \                     ??bdb_nwkJoiningFormation_0:
   \   000029   90....       MOV       DPTR,#vDoPrimaryScan
   \   00002C   E4           CLR       A
   \   00002D   F0           MOVX      @DPTR,A
   2072              bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
   \   00002E                ; Setup parameters for call to function bdb_setChannel
   \   00002E   90....       MOV       DPTR,#bdbAttributes
   \   000031   12....       LCALL     ?XLOAD_R2345
   \                     ??bdb_nwkJoiningFormation_1:
   \   000034   12....       LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
   2073            }
   2074          
   2075            if(vScanChannels)
   \   000037   90....       MOV       DPTR,#zgDefaultChannelList
   \   00003A   12....       LCALL     ?XLOAD_R0123
   \   00003D   E8           MOV       A,R0
   \   00003E   49           ORL       A,R1
   \   00003F   4A           ORL       A,R2
   \   000040   4B           ORL       A,R3
   \   000041   601A         JZ        ??bdb_nwkJoiningFormation_2
   2076            {
   2077              if(ZG_DEVICE_RTRONLY_TYPE)
   \   000043   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000046   E0           MOVX      A,@DPTR
   \   000047   6401         XRL       A,#0x1
   \   000049   7007         JNZ       ??bdb_nwkJoiningFormation_3
   2078              {
   2079                if(isJoining)
   \   00004B   EE           MOV       A,R6
   \   00004C   7004         JNZ       ??bdb_nwkJoiningFormation_3
   2080                {
   2081                  ZDOInitDeviceEx(100,0);
   2082                }
   2083                else
   2084                {
   2085                  ZDOInitDeviceEx(100,1);
   \   00004E                ; Setup parameters for call to function ZDOInitDeviceEx
   \   00004E   7901         MOV       R1,#0x1
   \   000050   8002         SJMP      ??bdb_nwkJoiningFormation_4
   2086                }
   2087              }
   2088              //ZED can only join, and ZC can only create
   2089              else
   2090              {
   2091                ZDOInitDeviceEx(100,0);
   \                     ??bdb_nwkJoiningFormation_3:
   \   000052                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000052   7900         MOV       R1,#0x0
   \                     ??bdb_nwkJoiningFormation_4:
   \   000054   7A64         MOV       R2,#0x64
   \   000056   7B00         MOV       R3,#0x0
   \   000058   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   00005B   800E         SJMP      ??bdb_nwkJoiningFormation_5
   2092              }
   2093            }
   2094            else
   2095            {
   2096              if(isJoining)
   \                     ??bdb_nwkJoiningFormation_2:
   \   00005D   EE           MOV       A,R6
   \   00005E   7A00         MOV       R2,#0x0
   \   000060   6004         JZ        ??bdb_nwkJoiningFormation_6
   2097              {
   2098                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
   \   000062                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000062   7903         MOV       R1,#0x3
   \   000064   8002         SJMP      ??bdb_nwkJoiningFormation_7
   2099              }
   2100              else
   2101              {
   2102                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_nwkJoiningFormation_6:
   \   000066                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000066   7905         MOV       R1,#0x5
   \                     ??bdb_nwkJoiningFormation_7:
   \   000068   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2103              }
   2104            }
   2105          }
   \                     ??bdb_nwkJoiningFormation_5:
   \   00006B   02....       LJMP      ??Subroutine50_0 & 0xFFFF
   2106          
   2107          #if (ZG_BUILD_JOINING_TYPE)
   2108           /*********************************************************************
   2109           * @fn          bdb_tcLinkKeyExchangeAttempt
   2110           *
   2111           * @brief       Generic send msg for TC link key exchange process attempts
   2112           *
   2113           * @param       didSuccess - FALSE if the step failed/timeout, TRUE otherwise
   2114           * @param       bdbTCExchangeState - Step in which the attemp was done
   2115           *
   2116           * @return      none
   2117           */
   2118          void bdb_tcLinkKeyExchangeAttempt(bool didSuccess, uint8 bdbTCExchangeState)
   2119          {
   2120            bool bdbEventStatus = BDB_MSG_EVENT_SUCCESS;
   2121            uint8 dummy;
   2122            bdbCommissioningProcedureState.bdbTCExchangeState = bdbTCExchangeState;
   2123            if(didSuccess)
   2124            {
   2125              //Allow try since we are performing a new step.
   2126              osal_stop_timerEx(bdb_TaskID, BDB_PROCESS_TIMEOUT);
   2127              bdbAttributes.bdbTCLinkKeyExchangeAttempts = 0;
   2128            }
   2129            else
   2130            {
   2131              bdbEventStatus = BDB_MSG_EVENT_FAIL;
   2132            }
   2133            bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,bdbEventStatus,1, &dummy);
   2134          }
   2135          
   2136          
   2137           /*********************************************************************
   2138           * @fn          bdb_requestVerifyTCLinkKey
   2139           *
   2140           * @brief       Attempt to verify the TC link key by sending Verify Key Request
   2141           *
   2142           * @param       none
   2143           *
   2144           * @return      none
   2145           */
   2146          void bdb_requestVerifyTCLinkKey(void)
   2147          {
   2148              uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   2149              APSME_VerifyKeyReq_t vKey;
   2150              
   2151              APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   2152              
   2153              vKey.tcExtAddr = TC_ExtAddr;
   2154              vKey.keyType = KEY_TYPE_TC_LINK;
   2155              
   2156              APSME_VerifyKeyReq( &vKey );
   2157              
   2158              osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   2159              osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,BDBC_TC_LINK_KEY_EXANGE_TIMEOUT);
   2160              
   2161          }
   2162          
   2163          /*********************************************************************
   2164           * @fn          bdb_requestTCLinkKey
   2165           *
   2166           * @brief       Attempt to request a TC link key
   2167           *
   2168           * @param       none
   2169           *
   2170           * @return      none
   2171           */
   2172          void bdb_requestTCLinkKey(void)
   2173          {
   2174            zAddrType_t destAddr;
   2175            APSME_RequestKeyReq_t req;
   2176          
   2177            destAddr.addrMode = Addr16Bit;
   2178            destAddr.addr.shortAddr = 0x0000;
   2179            
   2180            req.dstAddr = destAddr.addr.shortAddr;
   2181            req.keyType = KEY_TYPE_TC_LINK;
   2182            
   2183            APSME_RequestKeyReq(&req);
   2184            
   2185            osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   2186            
   2187            osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,(uint32)requestLinkKeyTimeout);
   2188          } 
   2189          
   2190          
   2191          /*********************************************************************
   2192           * @fn          bdb_requestTCStackVersion
   2193           *
   2194           * @brief       Attempt to request the TC stack version using ZDP Node desc if 
   2195           *              join a Centralized nwk
   2196           *
   2197           * @param       none
   2198           *
   2199           * @return      none
   2200           */
   2201          void bdb_requestTCStackVersion(void)
   2202          {
   2203            if(requestNewTrustCenterLinkKey)
   2204            {
   2205              if(!APSME_IsDistributedSecurity())
   2206              {
   2207                if(bdbAttributes.bdbTCLinkKeyExchangeMethod == BDB_TC_LINK_KEY_EXCHANGE_APS_KEY)
   2208                {
   2209                  zAddrType_t destAddr;
   2210                 
   2211                  destAddr.addrMode = Addr16Bit;
   2212                  destAddr.addr.shortAddr = 0x0000;
   2213                 
   2214                  ZDP_NodeDescReq( &destAddr, destAddr.addr.shortAddr, 0);  
   2215                  
   2216                  osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   2217                  osal_start_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT, BDBC_TC_LINK_KEY_EXANGE_TIMEOUT );
   2218                  return;
   2219                }
   2220                else
   2221                {
   2222                  if(pfnCBKETCLinkKeyExchange)
   2223                  {
   2224                    pfnCBKETCLinkKeyExchange();
   2225                  }
   2226                  return;
   2227                }
   2228              }
   2229              else
   2230              {
   2231                bdb_setNodeJoinLinkKeyType(BDB_DISTRIBUTED_SECURITY_GLOBAL_LINK_KEY);
   2232              }
   2233            }
   2234            else
   2235            {
   2236              //Key not required, set default which is global
   2237              bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   2238            }
   2239            //TC link key not required or join distributed nwk
   2240            bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,TRUE);
   2241          }
   2242          #endif
   2243          
   2244          
   2245          /*********************************************************************
   2246           * @fn          bdb_nwkSteeringDeviceOnNwk
   2247           *
   2248           * @brief       Send ZDP mgmt permit joining
   2249           *
   2250           * @param       none
   2251           *
   2252           * @return      none
   2253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2254          void bdb_nwkSteeringDeviceOnNwk(void)
   \                     bdb_nwkSteeringDeviceOnNwk:
   2255          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 9
   \   000004   74F7         MOV       A,#-0x9
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2256            zAddrType_t dstAddr;
   2257            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   74FC         MOV       A,#-0x4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   74FF         MOV       A,#-0x1
   \   000015   F0           MOVX      @DPTR,A
   2258            dstAddr.addrMode = AddrBroadcast;
   \   000016   7408         MOV       A,#0x8
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   740F         MOV       A,#0xf
   \   00001D   F0           MOVX      @DPTR,A
   2259            // Trust Center significance is always true
   2260            ZDP_MgmtPermitJoinReq( &dstAddr, BDBC_MIN_COMMISSIONING_TIME, TRUE, FALSE );
   \   00001E                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7C01         MOV       R4,#0x1
   \   000022   79B4         MOV       R1,#-0x4c
   \   000024   AA..         MOV       R2,?XSP + 0
   \   000026   AB..         MOV       R3,?XSP + 1
   \   000028   12....       LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
   2261          }
   \   00002B   7409         MOV       A,#0x9
   \   00002D                REQUIRE ?Subroutine6
   \   00002D                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   02....       LJMP      ??Subroutine46_0 & 0xFFFF
   2262          
   2263          
   2264          /*********************************************************************
   2265           * @fn          bdb_startResumeCommissioningProcess
   2266           *
   2267           * @brief       Starts or resume the commissioning operations sets in the 
   2268           *              commissioningMode attribute
   2269           *
   2270           * @param       none
   2271           *
   2272           * @return      none
   2273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2274          void bdb_startResumeCommissioningProcess(void)
   \                     bdb_startResumeCommissioningProcess:
   2275          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2276          
   2277          #if ( defined ( BDB_TL_INITIATOR ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) ) 
   2278            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_INITIATOR_TL)
   2279            {
   2280              uint16 nwkAddr;
   2281          
   2282              //Does the device supports this commissioning mode?
   2283              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_TOUCHLINK_CAPABILITY)
   2284              {
   2285                //Clear previous state and substates
   2286                osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
   2287                bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TL;
   2288                
   2289                // Get our short address
   2290                ZMacGetReq( ZMacShortAddress, (byte*)&nwkAddr );
   2291                if ( nwkAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR )
   2292                {
   2293                  initiatorSelectNwkParams();
   2294                }
   2295                
   2296                touchLinkInitiator_StartDevDisc( );  
   2297                
   2298                bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_TOUCHLINK);
   2299              }
   2300              else
   2301              {
   2302                //Process the next commissioning mode
   2303                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   2304              }
   2305              return;
   2306            }
   2307          #endif // BDB_TOUCHLINK_CAPABILITY_ENABLED  
   2308            
   2309          #if ZG_BUILD_ENDDEVICE_TYPE
   2310            if(ZG_DEVICE_ENDDEVICE_TYPE)
   2311            {
   2312              if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
   2313              {
   2314                //No commissioning process can be performed if the ZED has lost its parent
   2315                return;
   2316              }
   2317            }
   2318          #endif
   2319            
   2320            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_STEERING)
   \   00000A   90....       MOV       DPTR,#bdbAttributes + 11
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   A2E1         MOV       C,0xE0 /* A   */.1
   \   000010   5021         JNC       ??bdb_startResumeCommissioningProcess_0
   2321            {
   2322              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
   \   000012   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000015   7404         MOV       A,#0x4
   \   000017   F0           MOVX      @DPTR,A
   2323              
   2324              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_STEERING_CAPABILITY)
   \   000018   90....       MOV       DPTR,#bdbAttributes + 12
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001E   5010         JNC       ??bdb_startResumeCommissioningProcess_1
   2325              {
   2326          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   2327                bdb_ClearNetworkParams();
   2328          #endif
   2329                if(bdbAttributes.bdbNodeIsOnANetwork)
   \   000020   90....       MOV       DPTR,#bdbAttributes + 14
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6003         JZ        ??CrossCallReturnLabel_27
   2330                {
   2331                  bdb_nwkSteeringDeviceOnNwk();
   \   000026                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   000026   12....       LCALL     ?Subroutine30 & 0xFFFF
   2332                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   2333                }
   2334          #if (ZG_BUILD_JOINING_TYPE)
   2335                else
   2336                {
   2337                  if(ZG_DEVICE_JOINING_TYPE)
   2338                  {
   2339                    vDoPrimaryScan = TRUE;
   2340                    
   2341                    //Initialize the commissioning procedure state, bdbJoinState to nwk discovery and TCLinkKeyExchange to not active
   2342                    osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState_t));
   2343                    bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_JOINING;
   2344                    bdb_nwkJoiningFormation(TRUE);
   2345                    bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_NWK_STEERING);
   2346                  }
   2347                }
   2348          #endif
   2349          #if (ZG_BUILD_COORDINATOR_TYPE)
   2350                if(ZG_DEVICE_COORDINATOR_TYPE)
   2351                {
   2352                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, FALSE);
   \                     ??CrossCallReturnLabel_27:
   \   000029                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000029   7A00         MOV       R2,#0x0
   \   00002B   7904         MOV       R1,#0x4
   \   00002D   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2353                }
   2354          #endif
   2355              }
   2356              return;
   \                     ??bdb_startResumeCommissioningProcess_1:
   \   000030   02....       LJMP      ??bdb_startResumeCommissioningProcess_2 & 0xFFFF
   2357            }
   2358            
   2359            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_FORMATION)
   \                     ??bdb_startResumeCommissioningProcess_0:
   \   000033   A2E2         MOV       C,0xE0 /* A   */.2
   \   000035   5044         JNC       ??bdb_startResumeCommissioningProcess_3
   2360            {
   2361              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
   \   000037   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00003A   7405         MOV       A,#0x5
   \   00003C   F0           MOVX      @DPTR,A
   2362              
   2363              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_FORMATION_CAPABILITY)
   \   00003D   90....       MOV       DPTR,#bdbAttributes + 12
   \   000040   E0           MOVX      A,@DPTR
   \   000041   A2E1         MOV       C,0xE0 /* A   */.1
   \   000043   502C         JNC       ??bdb_startResumeCommissioningProcess_4
   2364              {
   2365                if(!bdbAttributes.bdbNodeIsOnANetwork)
   \   000045   90....       MOV       DPTR,#bdbAttributes + 14
   \   000048   E0           MOVX      A,@DPTR
   \   000049   7026         JNZ       ??bdb_startResumeCommissioningProcess_4
   2366                {
   2367          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   2368                bdb_ClearNetworkParams();
   2369          #endif
   2370                  vDoPrimaryScan = TRUE;
   \   00004B   90....       MOV       DPTR,#vDoPrimaryScan
   \   00004E   7401         MOV       A,#0x1
   \   000050   F0           MOVX      @DPTR,A
   2371                  
   2372                  osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
   \   000051                ; Setup parameters for call to function osal_memset
   \   000051   7C04         MOV       R4,#0x4
   \   000053   7D00         MOV       R5,#0x0
   \   000055   7900         MOV       R1,#0x0
   \   000057   7A..         MOV       R2,#bdbCommissioningProcedureState & 0xff
   \   000059   7B..         MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
   \   00005B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2373                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
   \   00005E   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000061   7405         MOV       A,#0x5
   \   000063   F0           MOVX      @DPTR,A
   2374          
   2375                  bdb_nwkJoiningFormation(FALSE);
   \   000064                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   000064   7900         MOV       R1,#0x0
   \   000066   12....       LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   2376                  bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_FORMATION);
   \   000069                ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
   \   000069   7902         MOV       R1,#0x2
   \   00006B   12....       LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
   2377                  return;
   \   00006E   02....       LJMP      ??bdb_startResumeCommissioningProcess_2 & 0xFFFF
   2378                }
   2379              }
   2380              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_startResumeCommissioningProcess_4:
   \   000071                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000071   7A00         MOV       R2,#0x0
   \   000073   7905         MOV       R1,#0x5
   \   000075   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2381              return;
   \   000078   02....       LJMP      ??bdb_startResumeCommissioningProcess_2 & 0xFFFF
   2382            }
   2383          
   2384          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)    
   2385            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
   \                     ??bdb_startResumeCommissioningProcess_3:
   \   00007B   A2E3         MOV       C,0xE0 /* A   */.3
   \   00007D   4003         JC        $+5
   \   00007F   02....       LJMP      ??bdb_startResumeCommissioningProcess_2 & 0xFFFF
   2386            {
   2387              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FINDING_BINDING;
   \   000082   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000085   7406         MOV       A,#0x6
   \   000087   F0           MOVX      @DPTR,A
   2388              
   2389              //Is the device on a network?
   2390              if(bdb_isDeviceNonFactoryNew())
   \   000088   90....       MOV       DPTR,#bdbAttributes + 14
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   7003         JNZ       $+5
   \   00008E   02....       LJMP      ??bdb_startResumeCommissioningProcess_5 & 0xFFFF
   2391              {
   2392                zclAttrRec_t attrRec;
   2393          
   2394                endPointDesc_t *bdb_CurrEpDescriptor = NULL;
   2395          
   2396                bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
   \   000091                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000091   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
   \   000094   8A..         MOV       ?V0,R2
   \   000096   8B..         MOV       ?V1,R3
   \   000098   AE..         MOV       R6,?V0
   \   00009A   AF..         MOV       R7,?V1
   2397                
   2398                //If not found endpoint with Identify cluster is found, then report fail
   2399                if(bdb_CurrEpDescriptor == NULL)
   \   00009C   EA           MOV       A,R2
   \   00009D   4F           ORL       A,R7
   \   00009E   7003         JNZ       $+5
   \   0000A0   02....       LJMP      ??bdb_startResumeCommissioningProcess_5 & 0xFFFF
   2400                {
   2401                  bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   0000A3                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   2402                  return;
   2403                }
   2404                
   2405                if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET)  //F&B as Target
   \   0000A3   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000A6   F8           MOV       R0,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000AF   4003         JC        $+5
   \   0000B1   02....       LJMP      ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
   2406                {
   2407                  if (zclFindAttrRec( bdb_CurrEpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2408                            ATTRID_IDENTIFY_TIME, &attrRec ) )
   \   0000B4                ; Setup parameters for call to function zclFindAttrRec
   \   0000B4   7403         MOV       A,#0x3
   \   0000B6   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B9   88..         MOV       ?V0,R0
   \   0000BB   89..         MOV       ?V1,R1
   \   0000BD   78..         MOV       R0,#?V0
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C2   7C00         MOV       R4,#0x0
   \   0000C4   7D00         MOV       R5,#0x0
   \   0000C6   7A03         MOV       R2,#0x3
   \   0000C8   7B00         MOV       R3,#0x0
   \   0000CA   8E82         MOV       DPL,R6
   \   0000CC   8F83         MOV       DPH,R7
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   F9           MOV       R1,A
   \   0000D0   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000D3   7402         MOV       A,#0x2
   \   0000D5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D8   E9           MOV       A,R1
   \   0000D9   6072         JZ        ??bdb_startResumeCommissioningProcess_7
   2409                  {
   2410                    //Set it to at less 180 
   2411                    if ( *((uint16*)attrRec.attr.dataPtr) <= BDBC_MIN_COMMISSIONING_TIME )
   \   0000DB   7409         MOV       A,#0x9
   \   0000DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E0   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000E3   C3           CLR       C
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   94B5         SUBB      A,#-0x4b
   \   0000E7   A3           INC       DPTR
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   9400         SUBB      A,#0x0
   \   0000EB   5039         JNC       ??bdb_startResumeCommissioningProcess_8
   2412                    {
   2413                      *((uint16*)attrRec.attr.dataPtr) = BDBC_MIN_COMMISSIONING_TIME;
   \   0000ED   8882         MOV       DPL,R0
   \   0000EF   8983         MOV       DPH,R1
   \   0000F1   74B4         MOV       A,#-0x4c
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4   A3           INC       DPTR
   \   0000F5   E4           CLR       A
   \   0000F6   F0           MOVX      @DPTR,A
   2414                       osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   0000F7                ; Setup parameters for call to function osal_start_timerEx
   \   0000F7   90....       MOV       DPTR,#__Constant_3e8
   \   0000FA   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000FD   7A00         MOV       R2,#0x0
   \   0000FF   7B20         MOV       R3,#0x20
   \   000101   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000104   12....       LCALL     ?DEALLOC_XSTACK8
   2415          
   2416                      if(pfnIdentifyTimeChangeCB != NULL)
   \   000107   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   00010A   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00010D   6017         JZ        ??bdb_startResumeCommissioningProcess_8
   2417                      {
   2418                        if(bdbIndentifyActiveEndpoint == 0xFF)
   \   00010F   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   000112   E0           MOVX      A,@DPTR
   \   000113   F4           CPL       A
   \   000114   7004         JNZ       ??bdb_startResumeCommissioningProcess_9
   2419                        {
   2420                          pfnIdentifyTimeChangeCB(bdbIndentifyActiveEndpoint);  
   \   000116                ; Setup parameters for indirect call
   \   000116   79FF         MOV       R1,#-0x1
   \   000118   8006         SJMP      ??bdb_startResumeCommissioningProcess_10
   2421                        }
   2422                        else
   2423                        {
   2424                          pfnIdentifyTimeChangeCB(bdb_CurrEpDescriptor->endPoint);
   \                     ??bdb_startResumeCommissioningProcess_9:
   \   00011A                ; Setup parameters for indirect call
   \   00011A   8E82         MOV       DPL,R6
   \   00011C   8F83         MOV       DPH,R7
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   F9           MOV       R1,A
   2425                        }
   2426                      }
   2427                    }
   \                     ??bdb_startResumeCommissioningProcess_10:
   \   000120   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000123   12....       LCALL     ?CALL_IND
   2428                    //Attribute found and set, report success
   2429                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
   \                     ??bdb_startResumeCommissioningProcess_8:
   \   000126   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000129   4004         JC        ??bdb_startResumeCommissioningProcess_11
   2430                    {
   2431                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS);
   \   00012B                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00012B   7909         MOV       R1,#0x9
   \   00012D   8025         SJMP      ??bdb_startResumeCommissioningProcess_12
   2432                    }
   2433                    else
   2434                    {
   2435                      bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   2436          
   2437                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   \                     ??bdb_startResumeCommissioningProcess_11:
   \   00012F   7401         MOV       A,#0x1
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   7403         MOV       A,#0x3
   \   000136   F0           MOVX      @DPTR,A
   2438                      bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS;
   \   000137   85..82       MOV       DPL,?XSP + 0
   \   00013A   85..83       MOV       DPH,?XSP + 1
   \   00013D   7409         MOV       A,#0x9
   \   00013F   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   2439          
   2440                      bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   2441                    }
   2442                  }
   \                     ??CrossCallReturnLabel_48:
   \   000142   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000145   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000148   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014B   800A         SJMP      ??bdb_startResumeCommissioningProcess_6
   2443                  else
   2444                  {
   2445                    //Attribute not found and no initiator process, report fail
   2446                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
   \                     ??bdb_startResumeCommissioningProcess_7:
   \   00014D   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000150   4005         JC        ??bdb_startResumeCommissioningProcess_6
   2447                    {
   2448                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   000152                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000152   790E         MOV       R1,#0xe
   \                     ??bdb_startResumeCommissioningProcess_12:
   \   000154   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2449                    }
   2450                  }
   2451                }  //F&B Target
   2452                
   2453                if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR)  //F&B as Initiator
   \                     ??bdb_startResumeCommissioningProcess_6:
   \   000157   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00015A   2401         ADD       A,#0x1
   \   00015C   F8           MOV       R0,A
   \   00015D   A3           INC       DPTR
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   3400         ADDC      A,#0x0
   \   000161   F9           MOV       R1,A
   \   000162   8882         MOV       DPL,R0
   \   000164   F583         MOV       DPH,A
   \   000166   E0           MOVX      A,@DPTR
   \   000167   A2E0         MOV       C,0xE0 /* A   */.0
   \   000169   5059         JNC       ??bdb_startResumeCommissioningProcess_2
   2454                {
   2455                  bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   2456                  
   2457                  //If no function to add binds is available then do not process Initiator
   2458                  if(!pbindAddEntry)
   \   00016B   90....       MOV       DPTR,#pbindAddEntry
   \   00016E   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000171   7010         JNZ       ??bdb_startResumeCommissioningProcess_13
   2459                  {
   2460                    //If no target process, then report fail
   2461                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET))
   \   000173   8882         MOV       DPL,R0
   \   000175   8983         MOV       DPH,R1
   \   000177   E0           MOVX      A,@DPTR
   \   000178   A2E1         MOV       C,0xE0 /* A   */.1
   \   00017A   4048         JC        ??bdb_startResumeCommissioningProcess_2
   2462                    {
   2463                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   2464                    }        
   2465                  }
   2466                  else
   2467                  {
   2468                    //Send identify query with the endpoint requested
   2469                    if(bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint) != ZSuccess)
   2470                    {
   2471                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   2472                    }
   2473          
   2474                    //If periodic F&B is enabled
   2475                    if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
   2476                    {
   2477                      // total F&B time will be at least BDBC_MIN_COMMISSIONING_TIME, and at most (BDBC_MIN_COMMISSIONING_TIME + FINDING_AND_BINDING_PERIODIC_TIME - 1)
   2478                      bdb_FB_InitiatorCurrentCyclesNumber = (BDBC_MIN_COMMISSIONING_TIME + (FINDING_AND_BINDING_PERIODIC_TIME - 1)) / FINDING_AND_BINDING_PERIODIC_TIME;
   2479                      
   2480                      osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
   2481                    }
   2482          
   2483                    bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   2484                    bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_INITITATOR_IN_PROGRESS;
   2485          
   2486                    bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   2487                  }
   2488                } //F&B Initiator
   2489              }
   2490              //Not in the network
   2491              else
   2492              {
   2493                bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \                     ??bdb_startResumeCommissioningProcess_5:
   \   00017C                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00017C   790E         MOV       R1,#0xe
   \   00017E   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2494              }
   2495              
   2496              return;
   \   000181   8041         SJMP      ??bdb_startResumeCommissioningProcess_2
   \                     ??bdb_startResumeCommissioningProcess_13:
   \   000183                ; Setup parameters for call to function bdb_SendIdentifyQuery
   \   000183   8E82         MOV       DPL,R6
   \   000185   8F83         MOV       DPH,R7
   \   000187   E0           MOVX      A,@DPTR
   \   000188   F9           MOV       R1,A
   \   000189   12....       LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
   \   00018C   E9           MOV       A,R1
   \   00018D   6005         JZ        ??bdb_startResumeCommissioningProcess_14
   \   00018F                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00018F   790E         MOV       R1,#0xe
   \   000191   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   \                     ??bdb_startResumeCommissioningProcess_14:
   \   000194   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000197   740C         MOV       A,#0xc
   \   000199   F0           MOVX      @DPTR,A
   \   00019A                ; Setup parameters for call to function osal_start_timerEx
   \   00019A   90....       MOV       DPTR,#__Constant_3a98
   \   00019D   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001A0   7A40         MOV       R2,#0x40
   \   0001A2   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0001A5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A8   7401         MOV       A,#0x1
   \   0001AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AD   7403         MOV       A,#0x3
   \   0001AF   F0           MOVX      @DPTR,A
   \   0001B0   85..82       MOV       DPL,?XSP + 0
   \   0001B3   85..83       MOV       DPH,?XSP + 1
   \   0001B6   740A         MOV       A,#0xa
   \   0001B8   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   2497            }
   \                     ??CrossCallReturnLabel_49:
   \   0001BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BE   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0001C1   12....       LCALL     ?DEALLOC_XSTACK8
   2498          #endif
   2499            
   2500          }
   \                     ??bdb_startResumeCommissioningProcess_2:
   \   0001C4   740B         MOV       A,#0xb
   \   0001C6   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB + 1
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F583         MOV       DPH,A
   \   000009   8882         MOV       DPL,R0
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F583         MOV       DPH,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000E   22           RET
   2501          
   2502          /*********************************************************************
   2503           * @fn          bdb_event_loop
   2504           *
   2505           * @brief       Main event loop bdb tasks.
   2506           *
   2507           * @param       task_id - task id
   2508           * @param       events - event bitmap
   2509           *
   2510           * @return      unprocessed events
   2511           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2512          UINT16 bdb_event_loop(byte task_id, UINT16 events)
   \                     bdb_event_loop:
   2513          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2514            (void)task_id;  // Intentionally unreferenced parameter
   2515            
   2516          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
   2517            endPointDesc_t * bdb_CurrEpDescriptor;
   2518          #endif
   2519            
   2520            if(events & BDB_CHANGE_COMMISSIONING_STATE)
   \   00000E   EA           MOV       A,R2
   \   00000F   5404         ANL       A,#0x4
   \   000011   6035         JZ        ??bdb_event_loop_0
   2521            {
   2522              switch(bdbCommissioningProcedureState.bdbCommissioningState)
   \   000013   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000016   E0           MOVX      A,@DPTR
   \   000017   600A         JZ        ??bdb_event_loop_1
   \   000019   24FC         ADD       A,#-0x4
   \   00001B   600B         JZ        ??bdb_event_loop_2
   \   00001D   24FE         ADD       A,#-0x2
   \   00001F   600C         JZ        ??bdb_event_loop_3
   \   000021   801F         SJMP      ??bdb_event_loop_4
   2523              {
   2524                case BDB_COMMISSIONING_STATE_START_RESUME:
   2525                  bdb_startResumeCommissioningProcess();
   \                     ??bdb_event_loop_1:
   \   000023                ; Setup parameters for call to function bdb_startResumeCommissioningProcess
   \   000023   12....       LCALL     `??bdb_startResumeCommissioningProcess::?relay`; Banked call to: bdb_startResumeCommissioningProcess
   2526                break;
   \   000026   801A         SJMP      ??bdb_event_loop_4
   2527                
   2528                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   2529                  if (ZG_BUILD_JOINING_TYPE)
   2530                  {
   2531                    bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
   2532                  }
   2533                break;
   2534                
   2535                case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
   2536                  bdb_nwkSteeringDeviceOnNwk();
   \                     ??bdb_event_loop_2:
   \   000028                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   000028   12....       LCALL     ?Subroutine30 & 0xFFFF
   2537                  
   2538                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   2539                break;
   \                     ??CrossCallReturnLabel_28:
   \   00002B   8015         SJMP      ??bdb_event_loop_4
   2540                
   2541                case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   2542                  bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??bdb_event_loop_3:
   \   00002D   90....       MOV       DPTR,#bdbAttributes + 10
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
   2543                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000032   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000035   F0           MOVX      @DPTR,A
   2544                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   000036                ; Setup parameters for call to function osal_start_timerEx
   \   000036   90....       MOV       DPTR,#__Constant_32
   \   000039   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00003C   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   2545                break;
   2546                
   2547              }
   2548              return (events ^ BDB_CHANGE_COMMISSIONING_STATE);
   \                     ??bdb_event_loop_4:
   \   000042   EE           MOV       A,R6
   \   000043   6404         XRL       A,#0x4
   \   000045   02....       LJMP      ??bdb_event_loop_5 & 0xFFFF
   2549            }
   2550          
   2551            if ( events & SYS_EVENT_MSG )
   \                     ??bdb_event_loop_0:
   \   000048   EB           MOV       A,R3
   \   000049   5480         ANL       A,#0x80
   \   00004B   7026         JNZ       ??bdb_event_loop_6
   2552            {
   2553              uint8 *msg_ptr;
   2554              
   2555              while ( (msg_ptr = osal_msg_receive( bdb_TaskID )) )
   2556              {
   2557                //Process the Incomming ZDO messages used by BDB commissioning methods
   2558                if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_ZDO_CB_MSG)
   2559                {
   2560                  bdb_processZDOMgs((zdoIncomingMsg_t *)msg_ptr);
   2561                }
   2562                
   2563                //Validate the is receive on the right process
   2564                else if(((bdbInMsg_t*)msg_ptr)->hdr.event == bdbCommissioningProcedureState.bdbCommissioningState)
   2565                {
   2566                  bdb_ProcessOSALMsg( (bdbInMsg_t *)msg_ptr );
   2567                }
   2568                //Notify the user
   2569                else if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_NOTIFY_USER)
   2570                {
   2571                  ((bdbCommissioningModeMsg_t*) ((bdbInMsg_t*)msg_ptr)->buf)->bdbRemainingCommissioningModes = bdbAttributes.bdbCommissioningMode;
   2572                  if(pfnCommissioningStatusCB)
   2573                  {
   2574                    pfnCommissioningStatusCB((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
   2575                  }
   2576          #ifdef MT_APP_CNF_FUNC
   2577                  //Notify the host processor about the event
   2578                  MT_AppCnfCommissioningNotification((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
   2579          #endif
   2580                }
   2581          #if (ZG_BUILD_COORDINATOR_TYPE)
   2582                else
   2583                {
   2584                  if(ZG_DEVICE_COORDINATOR_TYPE)
   2585                  {
   2586                    //Notify the status 
   2587                    if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_TC_LINK_KEY_EXCHANGE_PROCESS)
   2588                    {
   2589                      pfnTCLinkKeyExchangeProcessCB( (bdb_TCLinkKeyExchProcess_t*) ((bdbInMsg_t*)msg_ptr)->buf);
   2590                    }
   2591                  }
   2592                }
   2593          #endif
   2594                // Release the memory
   2595                osal_msg_deallocate( msg_ptr );
   2596              }
   2597          
   2598              // Return unprocessed events
   2599              return (events ^ SYS_EVENT_MSG);
   2600            }
   2601            
   2602          
   2603            if(events & BDB_PROCESS_TIMEOUT)
   \   00004D   EB           MOV       A,R3
   \   00004E   5410         ANL       A,#0x10
   \   000050   7003         JNZ       $+5
   \   000052   02....       LJMP      ??bdb_event_loop_7 & 0xFFFF
   2604            {
   2605              bdb_processTimeout();
   2606              // Return unprocessed events
   2607              return (events ^ BDB_PROCESS_TIMEOUT);
   \   000055   EB           MOV       A,R3
   \   000056   6410         XRL       A,#0x10
   \   000058   02....       LJMP      ??bdb_event_loop_8 & 0xFFFF
   2608            }
   \                     ??bdb_event_loop_9:
   \   00005B   7409         MOV       A,#0x9
   \   00005D   68           XRL       A,R0
   \   00005E   700C         JNZ       ??bdb_event_loop_10
   \   000060                ; Setup parameters for indirect call
   \   000060   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F8           MOV       R0,A
   \   000065   A3           INC       DPTR
   \                     ??bdb_event_loop_11:
   \   000066   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000069   12....       LCALL     ?CALL_IND
   \                     ??bdb_event_loop_10:
   \   00006C                ; Setup parameters for call to function osal_msg_deallocate
   \   00006C   AA..         MOV       R2,?V0
   \   00006E   AB..         MOV       R3,?V1
   \   000070   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??bdb_event_loop_6:
   \   000073                ; Setup parameters for call to function osal_msg_receive
   \   000073   90....       MOV       DPTR,#bdb_TaskID
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F9           MOV       R1,A
   \   000078   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00007B   8A..         MOV       ?V0,R2
   \   00007D   8B..         MOV       ?V1,R3
   \   00007F   EA           MOV       A,R2
   \   000080   4B           ORL       A,R3
   \   000081   6066         JZ        ??bdb_event_loop_12
   \   000083   8A82         MOV       DPL,R2
   \   000085   8B83         MOV       DPH,R3
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F8           MOV       R0,A
   \   000089   74D3         MOV       A,#-0x2d
   \   00008B   68           XRL       A,R0
   \   00008C   702D         JNZ       ??bdb_event_loop_13
   \   00008E   EA           MOV       A,R2
   \   00008F   240C         ADD       A,#0xc
   \   000091   F582         MOV       DPL,A
   \   000093   E4           CLR       A
   \   000094   35..         ADDC      A,?V1
   \   000096   F583         MOV       DPH,A
   \   000098   E0           MOVX      A,@DPTR
   \   000099   F5..         MOV       ?V2,A
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   F5..         MOV       ?V3,A
   \   00009F   78..         MOV       R0,#?V2
   \   0000A1   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for bdb_event_loop>_0`:
   \   0000A4   0180         DW        32769
   \   0000A6   03           DB        3
   \   0000A7   ....         DW        ??bdb_event_loop_10
   \   0000A9   ....         DW        ??bdb_event_loop_14
   \   0000AB   ....         DW        ??bdb_event_loop_10
   \   0000AD   ....         DW        ??bdb_event_loop_10
   \   0000AF   ....         DW        ??bdb_event_loop_15
   \                     ??bdb_event_loop_15:
   \   0000B1                ; Setup parameters for call to function bdb_ProcessSimpleDesc
   \   0000B1   12....       LCALL     `??bdb_ProcessSimpleDesc::?relay`; Banked call to: bdb_ProcessSimpleDesc
   \   0000B4   80B6         SJMP      ??bdb_event_loop_10
   \                     ??bdb_event_loop_14:
   \   0000B6                ; Setup parameters for call to function bdb_ProcessIEEEAddrRsp
   \   0000B6   12....       LCALL     `??bdb_ProcessIEEEAddrRsp::?relay`; Banked call to: bdb_ProcessIEEEAddrRsp
   \   0000B9   80B1         SJMP      ??bdb_event_loop_10
   \                     ??bdb_event_loop_13:
   \   0000BB   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   68           XRL       A,R0
   \   0000C0   60AA         JZ        ??bdb_event_loop_10
   \   0000C2   EA           MOV       A,R2
   \   0000C3   2402         ADD       A,#0x2
   \   0000C5   FA           MOV       R2,A
   \   0000C6   E4           CLR       A
   \   0000C7   35..         ADDC      A,?V1
   \   0000C9   FB           MOV       R3,A
   \   0000CA   740A         MOV       A,#0xa
   \   0000CC   68           XRL       A,R0
   \   0000CD   708C         JNZ       ??bdb_event_loop_9
   \   0000CF   90....       MOV       DPTR,#bdbAttributes + 11
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   85..82       MOV       DPL,?V0
   \   0000D6   85..83       MOV       DPH,?V1
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   F0           MOVX      @DPTR,A
   \   0000DE   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   0000E1   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000E4   6086         JZ        ??bdb_event_loop_10
   \   0000E6                ; Setup parameters for indirect call
   \   0000E6   02....       LJMP      ??bdb_event_loop_11 & 0xFFFF
   \                     ??bdb_event_loop_12:
   \   0000E9   EE           MOV       A,R6
   \   0000EA   FA           MOV       R2,A
   \   0000EB   EF           MOV       A,R7
   \   0000EC   6480         XRL       A,#0x80
   \   0000EE   02....       LJMP      ??bdb_event_loop_8 & 0xFFFF
   2609            
   2610            if(events &  BDB_REPORT_TIMEOUT){
   \                     ??bdb_event_loop_7:
   \   0000F1   EA           MOV       A,R2
   \   0000F2   5480         ANL       A,#0x80
   \   0000F4   6008         JZ        ??bdb_event_loop_16
   2611          #ifdef BDB_REPORTING    
   2612              bdb_RepProcessEvent();
   \   0000F6                ; Setup parameters for call to function bdb_RepProcessEvent
   \   0000F6   12....       LCALL     `??bdb_RepProcessEvent::?relay`; Banked call to: bdb_RepProcessEvent
   2613          #endif
   2614              // Return unprocessed events
   2615              return (events ^ BDB_REPORT_TIMEOUT);
   \   0000F9   EE           MOV       A,R6
   \   0000FA   6480         XRL       A,#0x80
   \   0000FC   8059         SJMP      ??bdb_event_loop_5
   2616            }
   2617            
   2618          #if (ZG_BUILD_JOINING_TYPE)
   2619            if(events & BDB_TC_LINK_KEY_EXCHANGE_FAIL)
   2620            {
   2621              if(ZG_DEVICE_JOINING_TYPE)
   2622              {
   2623                NLME_LeaveReq_t leaveReq;
   2624                // Set every field to 0
   2625                osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   2626                
   2627                bdb_setNodeIsOnANetwork(FALSE);
   2628          
   2629                if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   2630                {
   2631                  osal_set_event( bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL);
   2632                }
   2633              }
   2634              // Return unprocessed events
   2635              return (events ^ BDB_TC_LINK_KEY_EXCHANGE_FAIL);
   2636            }
   2637          #endif
   2638            
   2639            if(events & BDB_TC_JOIN_TIMEOUT)
   \                     ??bdb_event_loop_16:
   \   0000FE   EB           MOV       A,R3
   \   0000FF   5408         ANL       A,#0x8
   \   000101   600B         JZ        ??bdb_event_loop_17
   2640            {     
   2641          #if (ZG_BUILD_COORDINATOR_TYPE)
   2642              if(ZG_DEVICE_COORDINATOR_TYPE)
   2643              {
   2644                bdb_TCProcessJoiningList();
   \   000103                ; Setup parameters for call to function bdb_TCProcessJoiningList
   \   000103   12....       LCALL     `??bdb_TCProcessJoiningList::?relay`; Banked call to: bdb_TCProcessJoiningList
   2645              }
   2646          #endif    
   2647              return (events ^ BDB_TC_JOIN_TIMEOUT);
   \   000106   EE           MOV       A,R6
   \   000107   FA           MOV       R2,A
   \   000108   EF           MOV       A,R7
   \   000109   6408         XRL       A,#0x8
   \   00010B   02....       LJMP      ??bdb_event_loop_8 & 0xFFFF
   2648            }
   2649          
   2650          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
   2651            
   2652            if(events & BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT)
   \                     ??bdb_event_loop_17:
   \   00010E   EA           MOV       A,R2
   \   00010F   5440         ANL       A,#0x40
   \   000111   6049         JZ        ??bdb_event_loop_18
   2653            {
   2654              if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
   2655              {
   2656                bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
   \   000113                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000113   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
   \   000116   8A..         MOV       ?V0,R2
   \   000118   8B..         MOV       ?V1,R3
   2657                
   2658                //If we have endpoint from which to send the identify command, then proceed, otherwise finish
   2659                if(bdb_CurrEpDescriptor != NULL) //just a safty check. The fact that we got to this functuon at all means that this cannot be NULL
   \   00011A   EA           MOV       A,R2
   \   00011B   4B           ORL       A,R3
   \   00011C   602B         JZ        ??bdb_event_loop_19
   2660                {
   2661                  //Substract an attempt
   2662                  bdb_FB_InitiatorCurrentCyclesNumber--;
   2663                  
   2664                  if(bdb_FB_InitiatorCurrentCyclesNumber > 0)
   \   00011E   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000121   E0           MOVX      A,@DPTR
   \   000122   14           DEC       A
   \   000123   F0           MOVX      @DPTR,A
   \   000124   6029         JZ        ??bdb_event_loop_20
   2665                  {
   2666                    //Only send Identify Query if there is no pending responses from a previous identify query
   2667                    if ((osal_get_timeoutEx(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0) && (bdb_getRespondentRetry(pRespondentHead) == NULL))
   \   000126                ; Setup parameters for call to function osal_get_timeoutEx
   \   000126   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000129   7010         JNZ       ??bdb_event_loop_21
   \   00012B                ; Setup parameters for call to function bdb_getRespondentRetry
   \   00012B   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00012E   700B         JNZ       ??bdb_event_loop_21
   2668                    {
   2669                      //Send identify query with the endpoint requested
   2670                      bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint);
   \   000130                ; Setup parameters for call to function bdb_SendIdentifyQuery
   \   000130   85..82       MOV       DPL,?V0
   \   000133   85..83       MOV       DPH,?V1
   \   000136   E0           MOVX      A,@DPTR
   \   000137   F9           MOV       R1,A
   \   000138   12....       LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
   2671                    }
   2672                    osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
   \                     ??bdb_event_loop_21:
   \   00013B                ; Setup parameters for call to function osal_start_timerEx
   \   00013B   90....       MOV       DPTR,#__Constant_3a98
   \   00013E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000141   7A40         MOV       R2,#0x40
   \   000143   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   2673                  }
   2674                }
   2675              }
   \                     ??CrossCallReturnLabel_99:
   \   000146   12....       LCALL     ?DEALLOC_XSTACK8
   2676          
   2677              if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
   \                     ??bdb_event_loop_19:
   \   000149   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   7005         JNZ       ??bdb_event_loop_22
   2678              {
   2679                bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   \                     ??bdb_event_loop_20:
   \   00014F                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00014F   790B         MOV       R1,#0xb
   \   000151   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2680              }
   2681              
   2682              return (events ^ BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
   \                     ??bdb_event_loop_22:
   \   000154   EE           MOV       A,R6
   \   000155   6440         XRL       A,#0x40
   \                     ??bdb_event_loop_5:
   \   000157   FA           MOV       R2,A
   \   000158   EF           MOV       A,R7
   \   000159   02....       LJMP      ??bdb_event_loop_8 & 0xFFFF
   2683            }
   2684            
   2685            if(events & BDB_IDENTIFY_TIMEOUT)
   \                     ??bdb_event_loop_18:
   \   00015C   EB           MOV       A,R3
   \   00015D   5420         ANL       A,#0x20
   \   00015F   7003         JNZ       $+5
   \   000161   02....       LJMP      ??bdb_event_loop_23 & 0xFFFF
   2686            {
   2687              zclAttrRec_t identifyAttrRec;
   2688              epList_t *bdb_CurrEpDescriptorNextInList = NULL;
   2689              bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
   \   000164   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   000167   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00016A   88..         MOV       ?V0,R0
   \   00016C   F5..         MOV       ?V1,A
   2690              
   2691              bool KeepIdentifyTimerRunning = FALSE;
   \   00016E   75..00       MOV       ?V4,#0x0
   \   000171   8024         SJMP      ??CrossCallReturnLabel_13
   2692              
   2693              while(bdb_CurrEpDescriptorNextInList != NULL )
   2694              {
   2695                endPointDesc_t *bdb_EpDescriptor = NULL;
   2696                bdb_EpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
   2697              
   2698                //Do not check ZDO or Zigbee reserved endpoints
   2699                if((bdb_CurrEpDescriptorNextInList->epDesc->endPoint == 0) || (bdb_CurrEpDescriptorNextInList->epDesc->endPoint >= BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   2700                {
   2701                  bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   2702                  continue;
   2703                }
   2704                
   2705                if ( zclFindAttrRec( bdb_EpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2706                                  ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
   2707                {
   2708                  if(*((uint16*)identifyAttrRec.attr.dataPtr) > 0)
   2709                  {
   2710                    (uint16)(*((uint16*)identifyAttrRec.attr.dataPtr))--;
   2711                    KeepIdentifyTimerRunning = TRUE;
   2712                  }
   2713                  else
   2714                  {
   2715                    // Use bdb success main state
   2716                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??bdb_event_loop_24:
   \   000173   90....       MOV       DPTR,#bdbAttributes + 10
   \   000176   E4           CLR       A
   \   000177   F0           MOVX      @DPTR,A
   2717                    if(pfnIdentifyTimeChangeCB != NULL)
   \   000178   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   00017B   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00017E   600E         JZ        ??bdb_event_loop_25
   2718                    {
   2719                      pfnIdentifyTimeChangeCB(bdb_EpDescriptor->endPoint);
   \   000180                ; Setup parameters for indirect call
   \   000180   85..82       MOV       DPL,?V2
   \   000183   85..83       MOV       DPH,?V3
   \   000186   E0           MOVX      A,@DPTR
   \   000187   F9           MOV       R1,A
   \   000188   12....       LCALL     ?Subroutine22 & 0xFFFF
   2720                    }
   2721                  }
   \                     ??CrossCallReturnLabel_72:
   \   00018B   12....       LCALL     ?CALL_IND
   2722                }
   2723                bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   \                     ??bdb_event_loop_25:
   \   00018E   85..82       MOV       DPL,?V0
   \   000191   85..83       MOV       DPH,?V1
   \   000194   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000197   E5..         MOV       A,?V0
   \   000199   45..         ORL       A,?V1
   \   00019B   606A         JZ        ??bdb_event_loop_26
   \   00019D   85..82       MOV       DPL,?V0
   \   0001A0   85..83       MOV       DPH,?V1
   \   0001A3   A3           INC       DPTR
   \   0001A4   A3           INC       DPTR
   \   0001A5   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   0001A8   8882         MOV       DPL,R0
   \   0001AA   F583         MOV       DPH,A
   \   0001AC   8582..       MOV       ?V2,DPL
   \   0001AF   8583..       MOV       ?V3,DPH
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   60D9         JZ        ??bdb_event_loop_25
   \   0001B5   C3           CLR       C
   \   0001B6   94F1         SUBB      A,#-0xf
   \   0001B8   50D4         JNC       ??bdb_event_loop_25
   \   0001BA                ; Setup parameters for call to function zclFindAttrRec
   \   0001BA   A8..         MOV       R0,?XSP + 0
   \   0001BC   A9..         MOV       R1,?XSP + 1
   \   0001BE   88..         MOV       ?V6,R0
   \   0001C0   89..         MOV       ?V7,R1
   \   0001C2   78..         MOV       R0,#?V6
   \   0001C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C7   7C00         MOV       R4,#0x0
   \   0001C9   7D00         MOV       R5,#0x0
   \   0001CB   7A03         MOV       R2,#0x3
   \   0001CD   7B00         MOV       R3,#0x0
   \   0001CF   85..82       MOV       DPL,?V2
   \   0001D2   85..83       MOV       DPH,?V3
   \   0001D5   E0           MOVX      A,@DPTR
   \   0001D6   F9           MOV       R1,A
   \   0001D7   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0001DA   7402         MOV       A,#0x2
   \   0001DC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DF   E9           MOV       A,R1
   \   0001E0   60AC         JZ        ??bdb_event_loop_25
   \   0001E2   7406         MOV       A,#0x6
   \   0001E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E7   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0001EA   8882         MOV       DPL,R0
   \   0001EC   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0001EF   6082         JZ        ??bdb_event_loop_24
   \   0001F1   EA           MOV       A,R2
   \   0001F2   24FF         ADD       A,#-0x1
   \   0001F4   1A           DEC       R2
   \   0001F5   EB           MOV       A,R3
   \   0001F6   34FF         ADDC      A,#-0x1
   \   0001F8   FB           MOV       R3,A
   \   0001F9   8882         MOV       DPL,R0
   \   0001FB   8983         MOV       DPH,R1
   \   0001FD   EA           MOV       A,R2
   \   0001FE   F0           MOVX      @DPTR,A
   \   0001FF   A3           INC       DPTR
   \   000200   EB           MOV       A,R3
   \   000201   F0           MOVX      @DPTR,A
   \   000202   75..01       MOV       ?V4,#0x1
   \   000205   8087         SJMP      ??bdb_event_loop_25
   2724              }
   2725              
   2726              //If any endpoint has identify running, keep the timer on
   2727              if(KeepIdentifyTimerRunning)
   \                     ??bdb_event_loop_26:
   \   000207   E5..         MOV       A,?V4
   \   000209   6012         JZ        ??bdb_event_loop_27
   2728              {
   2729                osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   00020B                ; Setup parameters for call to function osal_start_timerEx
   \   00020B   90....       MOV       DPTR,#__Constant_3e8
   \   00020E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000211   7A00         MOV       R2,#0x0
   \   000213   7B20         MOV       R3,#0x20
   \   000215   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   2730              }
   \                     ??CrossCallReturnLabel_102:
   \   000218   12....       LCALL     ?DEALLOC_XSTACK8
   \   00021B   8007         SJMP      ??CrossCallReturnLabel_113
   2731              else
   2732              {
   2733                osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
   \                     ??bdb_event_loop_27:
   \   00021D                ; Setup parameters for call to function osal_stop_timerEx
   \   00021D   7A00         MOV       R2,#0x0
   \   00021F   7B20         MOV       R3,#0x20
   \   000221   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   2734              }
   2735              
   2736              // Return unprocessed events
   2737              return (events ^ BDB_IDENTIFY_TIMEOUT);
   \                     ??CrossCallReturnLabel_113:
   \   000224   EE           MOV       A,R6
   \   000225   FA           MOV       R2,A
   \   000226   EF           MOV       A,R7
   \   000227   6420         XRL       A,#0x20
   \   000229   800D         SJMP      ??bdb_event_loop_8
   2738            }
   2739            
   2740            if(events & BDB_RESPONDENT_PROCESS_TIMEOUT)
   \                     ??bdb_event_loop_23:
   \   00022B   EB           MOV       A,R3
   \   00022C   5440         ANL       A,#0x40
   \   00022E   600B         JZ        ??bdb_event_loop_28
   2741            {
   2742              // Send Simple Descriptor request to a respondent node
   2743              bdb_ProcessRespondentList();
   \   000230                ; Setup parameters for call to function bdb_ProcessRespondentList
   \   000230   12....       LCALL     `??bdb_ProcessRespondentList::?relay`; Banked call to: bdb_ProcessRespondentList
   2744          
   2745              return (events ^ BDB_RESPONDENT_PROCESS_TIMEOUT);
   \   000233   EE           MOV       A,R6
   \   000234   FA           MOV       R2,A
   \   000235   EF           MOV       A,R7
   \   000236   6440         XRL       A,#0x40
   \                     ??bdb_event_loop_8:
   \   000238   FB           MOV       R3,A
   \   000239   8004         SJMP      ??bdb_event_loop_29
   2746            }
   2747          #endif
   2748            
   2749            return 0;
   \                     ??bdb_event_loop_28:
   \   00023B   7A00         MOV       R2,#0x0
   \   00023D   7B00         MOV       R3,#0x0
   \                     ??bdb_event_loop_29:
   \   00023F   7408         MOV       A,#0x8
   \   000241   12....       LCALL     ?DEALLOC_XSTACK8
   \   000244   7F08         MOV       R7,#0x8
   \   000246   02....       LJMP      ?BANKED_LEAVE_XDATA
   2750          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine61_0
   \   000002                ; // Fall through to label ??Subroutine61_0
   2751          
   2752          /*********************************************************************
   2753           * @fn          bdb_processZDOMgs
   2754           *
   2755           * @brief       Process ZDO messages used as part of BDB commissioning methods
   2756           *
   2757           * @param       zdoIncomingMsg_t - ZDO message
   2758           *
   2759           * @return      
   2760           */
   2761          static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg)
   2762          {
   2763            switch ( pMsg->clusterID )
   2764            {
   2765          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)      
   2766              case IEEE_addr_rsp:
   2767                 bdb_ProcessIEEEAddrRsp(pMsg);
   2768              break;
   2769              case Simple_Desc_rsp:
   2770                bdb_ProcessSimpleDesc(pMsg);
   2771              break;
   2772          #endif
   2773          
   2774          #if (ZG_BUILD_JOINING_TYPE)    
   2775              case Node_Desc_rsp:
   2776                bdb_ProcessNodeDescRsp(pMsg);
   2777              break;
   2778          #endif
   2779              
   2780              default:
   2781              break;
   2782            }
   2783          }
   2784          
   2785          
   2786          /*********************************************************************
   2787           * @fn      bdb_ProcessNodeDescRsp
   2788           *
   2789           * @brief   Process Node Descriptor response to validate the stack version of the
   2790           *
   2791           * @param   zdoIncomingMsg_t *pMsg
   2792           *
   2793           * @return  none
   2794           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2795          void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg)
   \                     bdb_ProcessNodeDescRsp:
   2796          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 35
   \   000005   74DD         MOV       A,#-0x23
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2797            //Avoid processing unintended messages
   2798            if(requestNewTrustCenterLinkKey && 
   2799              (bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE))
   \   00000E   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   000011   E0           MOVX      A,@DPTR
   \   000012   7003         JNZ       $+5
   \   000014   02....       LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
   \   000017   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6401         XRL       A,#0x1
   \   00001D   6003         JZ        $+5
   \   00001F   02....       LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
   2800            {
   2801              if(!APSME_IsDistributedSecurity())
   \   000022                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000022   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000025   E9           MOV       A,R1
   \   000026   707B         JNZ       ??bdb_ProcessNodeDescRsp_0
   2802              {
   2803                //Is this from the coordinator?
   2804                if(pMsg->srcAddr.addr.shortAddr == 0x0000)
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000031   7070         JNZ       ??bdb_ProcessNodeDescRsp_0
   2805                {
   2806                  ZDO_NodeDescRsp_t NDRsp;
   2807                  uint8 StackComplianceRev;
   2808          
   2809                  //Stop timer to avoid unintended resets
   2810                  osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
   \   000033                ; Setup parameters for call to function osal_stop_timerEx
   \   000033   7A00         MOV       R2,#0x0
   \   000035   7B10         MOV       R3,#0x10
   \   000037   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   2811                  
   2812                  ZDO_ParseNodeDescRsp(pMsg, &NDRsp);
   \                     ??CrossCallReturnLabel_114:
   \   00003A                ; Setup parameters for call to function ZDO_ParseNodeDescRsp
   \   00003A   7413         MOV       A,#0x13
   \   00003C   12....       LCALL     ?XSTACK_DISP102_8
   \   00003F   EE           MOV       A,R6
   \   000040   FA           MOV       R2,A
   \   000041   EF           MOV       A,R7
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
   2813                  
   2814                  StackComplianceRev = NDRsp.nodeDesc.ServerMask >> STACK_COMPLIANCE_CURRENT_REV_POS;
   2815                  
   2816                  if( StackComplianceRev >= STACK_COMPL_REV_21 )
   \   000046   741E         MOV       A,#0x1e
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00004E   7409         MOV       A,#0x9
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?US_SHR
   \   000055   C3           CLR       C
   \   000056   E5..         MOV       A,?V0
   \   000058   9415         SUBB      A,#0x15
   \   00005A   95E0         SUBB      A,0xE0 /* A   */
   \   00005C   C3           CLR       C
   \   00005D   65D0         XRL       A,PSW
   \   00005F   33           RLC       A
   \   000060   4009         JC        ??bdb_ProcessNodeDescRsp_1
   2817                  {
   2818                    bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_LINK_KEY);
   \   000062                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   000062   7A02         MOV       R2,#0x2
   \   000064   7901         MOV       R1,#0x1
   \   000066   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   \   000069   8038         SJMP      ??bdb_ProcessNodeDescRsp_0
   2819                  }
   2820                  else
   2821                  {
   2822                    APSME_TCLKDevEntry_t TCLKDevEntry;
   2823                    
   2824                    //Save the KeyAttribute for joining device that it has joined non-R21 nwk
   2825                    TCLKDevEntry.keyAttributes = ZG_NON_R21_NWK_JOINED;
   \                     ??bdb_ProcessNodeDescRsp_1:
   \   00006B   7410         MOV       A,#0x10
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   74FD         MOV       A,#-0x3
   \   000072   F0           MOVX      @DPTR,A
   2826                    osal_nv_write(ZCD_NV_TCLK_TABLE_START,osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes),sizeof(uint8),&TCLKDevEntry.keyAttributes);
   \   000073                ; Setup parameters for call to function osal_nv_write
   \   000073   8582..       MOV       ?V0,DPL
   \   000076   8583..       MOV       ?V1,DPH
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007E   75..01       MOV       ?V0,#0x1
   \   000081   75..00       MOV       ?V1,#0x0
   \   000084   78..         MOV       R0,#?V0
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000089   7C10         MOV       R4,#0x10
   \   00008B   7D00         MOV       R5,#0x0
   \   00008D   7A11         MOV       R2,#0x11
   \   00008F   7B01         MOV       R3,#0x1
   \   000091   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000094   12....       LCALL     ?DEALLOC_XSTACK8
   2827                    
   2828                    bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   \   000097                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   000097   7900         MOV       R1,#0x0
   \   000099   12....       LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
   2829                    bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
   \   00009C                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00009C   7A01         MOV       R2,#0x1
   \   00009E   7901         MOV       R1,#0x1
   \   0000A0   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2830                  }
   2831                }
   2832              }
   2833            }
   2834          }
   \                     ??bdb_ProcessNodeDescRsp_0:
   \   0000A3   7423         MOV       A,#0x23
   \   0000A5                REQUIRE ?Subroutine1
   \   0000A5                ; // Fall through to label ?Subroutine1
   2835          
   2836          
   2837          /*********************************************************************
   2838           * @fn          bdb_touchlinkSendFNReset
   2839           *
   2840           * @brief       Starts the Factory New Procedure for Initiator
   2841           *
   2842           * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
   2843           *
   2844           * @return      none
   2845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2846          void bdb_touchlinkSendFNReset( void )
   \                     bdb_touchlinkSendFNReset:
   2847          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2848          #ifdef BDB_TL_INITIATOR
   2849            touchLinkInitiator_ResetToFNProcedure( );
   2850          #endif
   2851          }
   \   000000   02....       LJMP      ?BRET
   2852          
   2853          
   2854          /*********************************************************************
   2855           * @fn          bdb_setNodeIsOnANetwork
   2856           *
   2857           * @brief       Sets and saves in Nv bdbNodeIsOnANetwork attribute
   2858           *
   2859           * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
   2860           *
   2861           * @return      none
   2862           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2863          void bdb_setNodeIsOnANetwork(bool isOnANetwork)
   \                     bdb_setNodeIsOnANetwork:
   2864          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2865            if((bdbAttributes.bdbNodeIsOnANetwork != isOnANetwork) || (!bdb_initialization))
   \   000007   90....       MOV       DPTR,#bdbAttributes + 14
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   7006         JNZ       ??bdb_setNodeIsOnANetwork_0
   \   00000E   90....       MOV       DPTR,#bdb_initialization
   \   000011   E0           MOVX      A,@DPTR
   \   000012   7029         JNZ       ??bdb_setNodeIsOnANetwork_1
   2866            {
   2867              //We lose our network
   2868              if(!isOnANetwork)
   \                     ??bdb_setNodeIsOnANetwork_0:
   \   000014   E9           MOV       A,R1
   \   000015   7005         JNZ       ??bdb_setNodeIsOnANetwork_2
   2869              {
   2870                bdbAttributes.bdbCommissioningMode = 0;
   \   000017   90....       MOV       DPTR,#bdbAttributes + 11
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   2871              }
   2872              
   2873              bdbAttributes.bdbNodeIsOnANetwork = isOnANetwork;
   \                     ??bdb_setNodeIsOnANetwork_2:
   \   00001C   E9           MOV       A,R1
   \   00001D   90....       MOV       DPTR,#bdbAttributes + 14
   \   000020   F0           MOVX      @DPTR,A
   2874              
   2875              osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   000021                ; Setup parameters for call to function osal_nv_write
   \   000021   75....       MOV       ?V0,#(bdbAttributes + 14) & 0xff
   \   000024   75....       MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   75..01       MOV       ?V0,#0x1
   \   00002F   75..00       MOV       ?V1,#0x0
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   12....       LCALL     ?Subroutine32 & 0xFFFF
   2876            }
   \                     ??CrossCallReturnLabel_104:
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
   2877          }
   \                     ??bdb_setNodeIsOnANetwork_1:
   \   00003D   80..         SJMP      ??Subroutine55_0
   2878          
   2879          /*********************************************************************
   2880           * @fn          bdb_setCommissioningGroupID
   2881           *
   2882           * @brief       Sets the commissioning groupd ID
   2883           *
   2884           * @param       groupID
   2885           *
   2886           * @return      none
   2887           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004                REQUIRE ??Subroutine45_0
   \   000004                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2888          void bdb_setCommissioningGroupID(uint16 groupID)
   \                     bdb_setCommissioningGroupID:
   2889          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2890            bdbAttributes.bdbCommissioningGroupID = groupID;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 8
   \   000007   02....       LJMP      ?Subroutine3 & 0xFFFF
   2891          }
   2892          
   2893          /*********************************************************************
   2894           * @fn      bdb_CreateRespondentList
   2895           *
   2896           * @brief   Create respondent list for finding and binding if empty
   2897           *
   2898           * @param   pHead - pointer to a pointer of the list head
   2899           *
   2900           * @return  none
   2901           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   8A82         MOV       DPL,R2
   \   000006   F583         MOV       DPH,A
   \   000008                REQUIRE ??Subroutine52_0
   \   000008                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2902          void bdb_CreateRespondentList( bdbFindingBindingRespondent_t **pHead )
   \                     bdb_CreateRespondentList:
   2903          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine12 & 0xFFFF
   2904          
   2905            // Create the list if empty
   2906            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_73:
   \   000008   7008         JNZ       ??CrossCallReturnLabel_31
   2907            {
   2908              *pHead = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   12....       LCALL     ?Subroutine10 & 0xFFFF
   2909              
   2910              if ( *pHead != NULL )
   \                     ??CrossCallReturnLabel_115:
   \   00000D   6003         JZ        ??CrossCallReturnLabel_31
   2911              {
   2912                (*pHead)->pNext = NULL;
   \   00000F   12....       LCALL     ?Subroutine34 & 0xFFFF
   2913              }
   2914            }
   2915            return;
   \                     ??CrossCallReturnLabel_31:
   \   000012   02....       LJMP      ??Subroutine55_0 & 0xFFFF
   2916          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7A11         MOV       R2,#0x11
   \   000002   7B00         MOV       R3,#0x0
   \   000004   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000007   8B..         MOV       ?V1,R3
   \   000009   A9..         MOV       R1,?V1
   \   00000B                REQUIRE ??Subroutine59_0
   \   00000B                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   EA           MOV       A,R2
   \   000001   240F         ADD       A,#0xf
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   F583         MOV       DPH,A
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   22           RET
   2917          
   2918          /*********************************************************************
   2919           * @fn      bdb_AddRespondentNode
   2920           *
   2921           * @brief   Add node to respondent list for finding and binding
   2922           *
   2923           * @param   pHead - pointer to a pointer of the list head
   2924           *
   2925           * @return  pointer to new node
   2926           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2927          bdbFindingBindingRespondent_t* bdb_AddRespondentNode( bdbFindingBindingRespondent_t **pHead, zclIdentifyQueryRsp_t *pCmd )
   \                     bdb_AddRespondentNode:
   2928          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine12 & 0xFFFF
   2929            bdbFindingBindingRespondent_t **pCurr;
   2930            bdbFindingBindingRespondent_t *temp;
   2931            
   2932              // Create respondent list if empty
   2933            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_74:
   \   000008   7006         JNZ       ??bdb_AddRespondentNode_0
   2934            {
   2935              bdb_CreateRespondentList( pHead );
   \   00000A                ; Setup parameters for call to function bdb_CreateRespondentList
   \   00000A   12....       LCALL     `??bdb_CreateRespondentList::?relay`; Banked call to: bdb_CreateRespondentList
   2936              return *pHead;
   \   00000D   02....       LJMP      ??CrossCallReturnLabel_32 & 0xFFFF
   2937            }
   2938            else
   2939            {
   2940              // if pCmd is equal to NULL, don't look for duplucates
   2941              if( pCmd != NULL )
   \                     ??bdb_AddRespondentNode_0:
   \   000010   EC           MOV       A,R4
   \   000011   4D           ORL       A,R5
   \   000012   606D         JZ        ??bdb_AddRespondentNode_1
   2942              {
   2943                //Find if any duplicate in the list
   2944                temp = *pHead;
   \   000014   E8           MOV       A,R0
   \   000015   FA           MOV       R2,A
   \   000016   E9           MOV       A,R1
   \   000017   FB           MOV       R3,A
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FC           MOV       R4,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FD           MOV       R5,A
   2945                
   2946                while(temp != NULL)
   2947                {
   2948                  if((temp->data.endPoint == pCmd->srcAddr->endPoint) && (temp->data.panId == pCmd->srcAddr->panId))
   \                     ??bdb_AddRespondentNode_2:
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FE           MOV       R6,A
   \   000030   8C82         MOV       DPL,R4
   \   000032   8D83         MOV       DPH,R5
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   6E           XRL       A,R6
   \   00003F   7034         JNZ       ??bdb_AddRespondentNode_3
   \   000041   8A82         MOV       DPL,R2
   \   000043   8B83         MOV       DPH,R3
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   6E           XRL       A,R6
   \   00005E   7003         JNZ       ??bdb_AddRespondentNode_4
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6F           XRL       A,R7
   \                     ??bdb_AddRespondentNode_4:
   \   000063   7010         JNZ       ??bdb_AddRespondentNode_3
   2949                  {
   2950                    //Duplicate
   2951                    if(temp->data.addr.shortAddr == pCmd->srcAddr->addr.shortAddr)
   \   000065   8A82         MOV       DPL,R2
   \   000067   8B83         MOV       DPH,R3
   \   000069   12....       LCALL     ?Subroutine28 & 0xFFFF
   2952                    {
   2953                      return NULL;
   2954                    }
   2955                  }
   \                     ??CrossCallReturnLabel_25:
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   6E           XRL       A,R6
   \   00006E   7003         JNZ       ??bdb_AddRespondentNode_5
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   6F           XRL       A,R7
   \                     ??bdb_AddRespondentNode_5:
   \   000073   6021         JZ        ??bdb_AddRespondentNode_6
   2956                  temp = temp->pNext;
   \                     ??bdb_AddRespondentNode_3:
   \   000075   EA           MOV       A,R2
   \   000076   240F         ADD       A,#0xf
   \   000078   F582         MOV       DPL,A
   \   00007A   E4           CLR       A
   \   00007B   3B           ADDC      A,R3
   \   00007C   12....       LCALL     ?Subroutine17 & 0xFFFF
   2957                }
   2958              }
   \                     ??CrossCallReturnLabel_122:
   \   00007F   70A0         JNZ       ??bdb_AddRespondentNode_2
   2959              
   2960              pCurr = &((*pHead)->pNext);
   2961              
   2962              while ( *pCurr != NULL )
   2963              {
   2964                pCurr = &((*pCurr)->pNext);
   \                     ??bdb_AddRespondentNode_1:
   \   000081   E8           MOV       A,R0
   \   000082   240F         ADD       A,#0xf
   \   000084   FE           MOV       R6,A
   \   000085   E4           CLR       A
   \   000086   39           ADDC      A,R1
   \   000087   FF           MOV       R7,A
   2965              }
   \   000088   8E82         MOV       DPL,R6
   \   00008A   8F83         MOV       DPH,R7
   \   00008C   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00008F   70F0         JNZ       ??bdb_AddRespondentNode_1
   2966          
   2967              *pCurr = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
   \   000091                ; Setup parameters for call to function osal_mem_alloc
   \   000091   12....       LCALL     ?Subroutine10 & 0xFFFF
   2968              
   2969              if(*pCurr == NULL)
   \                     ??CrossCallReturnLabel_116:
   \   000094   7006         JNZ       ??bdb_AddRespondentNode_7
   2970              {
   2971                //No memory
   2972                return NULL;
   \                     ??bdb_AddRespondentNode_6:
   \   000096   7A00         MOV       R2,#0x0
   \   000098   7B00         MOV       R3,#0x0
   \   00009A   800A         SJMP      ??CrossCallReturnLabel_20
   2973              }
   2974              
   2975              (*pCurr)->pNext = NULL;
   \                     ??bdb_AddRespondentNode_7:
   \   00009C   12....       LCALL     ?Subroutine34 & 0xFFFF
   2976            }
   2977            
   2978            return *pCurr;
   \                     ??CrossCallReturnLabel_32:
   \   00009F   8E82         MOV       DPL,R6
   \   0000A1   8F83         MOV       DPH,R7
   \   0000A3   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000A6   02....       LJMP      ??Subroutine55_0 & 0xFFFF
   2979          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   22           RET
   2980          
   2981          /*********************************************************************
   2982           * @fn      bdb_zclRespondentListClean
   2983           *
   2984           * @brief   This function free reserved memory for respondent list
   2985           *
   2986           * @param   pHead - begin of the respondent list
   2987           *
   2988           * @return  status
   2989           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2990          void bdb_zclRespondentListClean( bdbFindingBindingRespondent_t **pHead )
   \                     bdb_zclRespondentListClean:
   2991          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine12 & 0xFFFF
   2992            bdbFindingBindingRespondent_t **pCurr;
   2993            bdbFindingBindingRespondent_t **pNext;
   2994            
   2995            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_75:
   \   000008   6035         JZ        ??bdb_zclRespondentListClean_0
   2996            {
   2997              return;
   2998            }
   2999            
   3000            pCurr = pHead;
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   801C         SJMP      ??bdb_zclRespondentListClean_1
   3001            
   3002            while( *pCurr != NULL )
   3003            {
   3004              pNext = &((*pCurr)->pNext);
   \                     ??bdb_zclRespondentListClean_2:
   \   000010   EA           MOV       A,R2
   \   000011   240F         ADD       A,#0xf
   \   000013   F5..         MOV       ?V2,A
   \   000015   E4           CLR       A
   \   000016   3B           ADDC      A,R3
   \   000017   F5..         MOV       ?V3,A
   3005              osal_mem_free( *pCurr );
   \   000019                ; Setup parameters for call to function osal_mem_free
   \   000019   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3006              *pCurr = ( bdbFindingBindingRespondent_t* )NULL;
   \   00001C   85..82       MOV       DPL,?V0
   \   00001F   85..83       MOV       DPH,?V1
   \   000022   E4           CLR       A
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   F0           MOVX      @DPTR,A
   3007              pCurr = pNext;
   \   000026   85....       MOV       ?V0,?V2
   \   000029   85....       MOV       ?V1,?V3
   3008            }
   \                     ??bdb_zclRespondentListClean_1:
   \   00002C   85..82       MOV       DPL,?V0
   \   00002F   85..83       MOV       DPH,?V1
   \   000032   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000035   70D9         JNZ       ??bdb_zclRespondentListClean_2
   3009            *pHead = NULL;
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
   3010          }
   \                     ??bdb_zclRespondentListClean_0:
   \   00003F   02....       LJMP      ??Subroutine50_0 & 0xFFFF
   3011          
   3012           /*********************************************************************
   3013           * PRIVATE FUNCTIONS
   3014           *********************************************************************/
   3015          
   3016          /*********************************************************************
   3017           * @fn      bdb_ProcessOSALMsg
   3018           *
   3019           * @brief   Process the incoming task message.
   3020           *
   3021           * @param   msgPtr - message to process
   3022           *
   3023           * @return  none
   3024           */
   3025          void bdb_ProcessOSALMsg( bdbInMsg_t *msgPtr )
   3026          {
   3027            
   3028            switch(msgPtr->hdr.event)
   3029            {
   3030          #if (ZG_BUILD_JOINING_TYPE)
   3031              case BDB_COMMISSIONING_STATE_JOINING:
   3032                if(ZG_DEVICE_JOINING_TYPE)
   3033                {
   3034                  switch(msgPtr->buf[0])
   3035                  {
   3036                    case BDB_JOIN_EVENT_NWK_DISCOVERY:
   3037                      if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   3038                      {
   3039                        bdb_filterNwkDisc();
   3040                        bdb_tryNwkAssoc();
   3041                      }
   3042                      else
   3043                      {
   3044                        bdb_nwkDiscoveryAttempt(FALSE);
   3045                      }
   3046                    break;
   3047                    
   3048                    case BDB_JOIN_EVENT_ASSOCIATION:
   3049                      if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   3050                      {
   3051                        bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_WAITING_NWK_KEY;
   3052                        //Nwk key timeout get right timing
   3053                        osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT, BDB_DEFAULT_DEVICE_UNAUTH_TIMEOUT);
   3054                      }
   3055                      else
   3056                      {
   3057                        if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   3058                             (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   3059                        {
   3060                          uint16 addr = INVALID_NODE_ADDR;
   3061                          // Invalidate nwk addr so end device does not use in its data reqs.
   3062                          _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   3063                          ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   3064                        }
   3065          
   3066                        //Clear the neighbor Table and network discovery tables.
   3067                        nwkNeighborInitTable();
   3068                        NLME_NwkDiscTerm();
   3069                        _NIB.nwkState = NWK_INIT;
   3070                        
   3071                        bdb_tryNwkAssoc();
   3072                      }
   3073                    break;
   3074                  }
   3075                }
   3076              break;
   3077              
   3078              case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   3079                if(ZG_DEVICE_JOINING_TYPE)
   3080                {
   3081                  if(msgPtr->hdr.status != BDB_MSG_EVENT_SUCCESS)
   3082                  {
   3083                    bdbAttributes.bdbTCLinkKeyExchangeAttempts++;
   3084                    if(bdbAttributes.bdbTCLinkKeyExchangeAttempts > bdbAttributes.bdbTCLinkKeyExchangeAttemptsMax)
   3085                    {
   3086                      //TCLK process fail due to many attempts fails
   3087                      bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
   3088                      return;
   3089                    }
   3090                  }
   3091                  switch(bdbCommissioningProcedureState.bdbTCExchangeState)
   3092                  {
   3093                    case BDB_REQ_TC_STACK_VERSION:
   3094                      bdb_requestTCStackVersion();
   3095                    break;
   3096                    case BDB_REQ_TC_LINK_KEY:
   3097                      bdb_requestTCLinkKey();
   3098                    break;
   3099                    case BDB_REQ_VERIFY_TC_LINK_KEY:
   3100                      bdb_requestVerifyTCLinkKey();
   3101                    break;
   3102                  }
   3103                }
   3104             break;
   3105          #endif
   3106             }
   3107          }
   3108          
   3109          
   3110          /*********************************************************************
   3111           * @fn      bdb_processTimeout
   3112           *
   3113           * @brief   Handles timeout of the bdb process
   3114           *
   3115           * @param   msgPtr - message to process
   3116           *
   3117           * @return  none
   3118           */
   3119          void bdb_processTimeout(void)
   3120          {
   3121          #if (ZG_BUILD_JOINING_TYPE)
   3122            if(ZG_DEVICE_JOINING_TYPE)
   3123            {
   3124              switch(bdbCommissioningProcedureState.bdbCommissioningState)
   3125              {
   3126                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   3127                  
   3128                  bdb_tcLinkKeyExchangeAttempt(FALSE,bdbCommissioningProcedureState.bdbTCExchangeState);
   3129                break;
   3130                case BDB_COMMISSIONING_STATE_JOINING:
   3131                  if(bdbCommissioningProcedureState.bdbJoinState == BDB_JOIN_STATE_WAITING_NWK_KEY)
   3132                  {
   3133                    //If nwk key fails, then try association again
   3134                    bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
   3135                    bdb_nwkAssocAttemt(FALSE);
   3136                  }
   3137                break;
   3138              }
   3139            }
   3140          #endif
   3141            
   3142          }
   3143          
   3144          
   3145          /*********************************************************************
   3146           * @fn      bdb_SendMsg
   3147           *
   3148           * @brief   Send messages to bdb processing with the expected format
   3149           *
   3150           * @param   msgPtr - message to process
   3151           *
   3152           * @return  none
   3153           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3154          void bdb_SendMsg(uint8 taskID, uint8 toCommissioningState,uint8 status, uint8 len, uint8 *buf)
   \                     bdb_SendMsg:
   3155          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V7,R2
   \   000009   8B..         MOV       ?V8,R3
   \   00000B   8C..         MOV       ?V3,R4
   3156            bdbInMsg_t *msgPtr = NULL;
   3157          
   3158            if ( (len > 0) && (buf != NULL) )
   \   00000D   EC           MOV       A,R4
   \   00000E   6052         JZ        ??bdb_SendMsg_0
   \   000010   7411         MOV       A,#0x11
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000018   6048         JZ        ??bdb_SendMsg_0
   3159            {
   3160              uint8 tmpLength;
   3161              tmpLength = len;
   3162              tmpLength += sizeof(osal_event_hdr_t);
   3163              
   3164              msgPtr = (bdbInMsg_t *)osal_msg_allocate( tmpLength );
   \   00001A                ; Setup parameters for call to function osal_msg_allocate
   \   00001A   7402         MOV       A,#0x2
   \   00001C   2C           ADD       A,R4
   \   00001D   FA           MOV       R2,A
   \   00001E   7B00         MOV       R3,#0x0
   \   000020   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000023   8A..         MOV       ?V4,R2
   \   000025   8B..         MOV       ?V5,R3
   \   000027   AE..         MOV       R6,?V4
   \   000029   AF..         MOV       R7,?V5
   3165              
   3166              if ( msgPtr )
   \   00002B   EA           MOV       A,R2
   \   00002C   4F           ORL       A,R7
   \   00002D   6033         JZ        ??bdb_SendMsg_0
   3167              {
   3168                osal_memcpy( msgPtr->buf, buf, len );
   \   00002F                ; Setup parameters for call to function osal_memcpy
   \   00002F   85....       MOV       ?V4,?V0
   \   000032   85....       MOV       ?V5,?V1
   \   000035   75..00       MOV       ?V6,#0x0
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003D   AC..         MOV       R4,?V3
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   EA           MOV       A,R2
   \   000042   2402         ADD       A,#0x2
   \   000044   FA           MOV       R2,A
   \   000045   E4           CLR       A
   \   000046   3F           ADDC      A,R7
   \   000047   FB           MOV       R3,A
   \   000048   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   3169              
   3170                msgPtr->hdr.event = toCommissioningState;
   \   00004E   8E82         MOV       DPL,R6
   \   000050   8F83         MOV       DPH,R7
   \   000052   E5..         MOV       A,?V7
   \   000054   F0           MOVX      @DPTR,A
   3171                msgPtr->hdr.status = status;
   \   000055   A3           INC       DPTR
   \   000056   E5..         MOV       A,?V8
   \   000058   F0           MOVX      @DPTR,A
   3172                osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000059                ; Setup parameters for call to function osal_msg_send
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   EF           MOV       A,R7
   \   00005C   FB           MOV       R3,A
   \   00005D   A9..         MOV       R1,?V2
   \   00005F   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   3173              }
   3174            }
   3175          }
   \                     ??bdb_SendMsg_0:
   \   000062   7F09         MOV       R7,#0x9
   \   000064   02....       LJMP      ?BANKED_LEAVE_XDATA
   3176          
   3177          
   3178          /*********************************************************************
   3179           * @fn      bdb_RegisterCommissioningStatusCB
   3180           *
   3181           * @brief   Register a callback in which the status of the procedures done in
   3182           *          BDB commissioning process will be reported
   3183           *
   3184           * @param   bdbGCB_CommissioningStatus - application callback
   3185           *
   3186           * @return  none
   3187           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3188          void bdb_RegisterCommissioningStatusCB(bdbGCB_CommissioningStatus_t bdbGCB_CommissioningStatus)
   \                     bdb_RegisterCommissioningStatusCB:
   3189          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3190            pfnCommissioningStatusCB = bdbGCB_CommissioningStatus;
   \   000004   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   000007   02....       LJMP      ?Subroutine3 & 0xFFFF
   3191          }
   3192          
   3193          /*********************************************************************
   3194           * @fn      bdb_ClearNetworkParams
   3195           *
   3196           * @brief   Restore nwk parameters to invalid if the device is not on a network
   3197           *
   3198           * @param   void
   3199           *
   3200           * @return  void
   3201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3202          void bdb_ClearNetworkParams(void)
   \                     bdb_ClearNetworkParams:
   3203          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3204          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   3205            if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   3206            {
   3207              //Clear the event
   3208              _NIB.nwkPanId = INVALID_NODE_ADDR;
   3209              _NIB.nwkLogicalChannel = 0;
   3210              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   3211              touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
   3212            }
   3213          #endif
   3214          }
   \   000000   02....       LJMP      ?BRET
   3215          
   3216          /*********************************************************************
   3217           * @fn      bdb_getZCLFrameCounter
   3218           *
   3219           * @brief   Get the next ZCL Frame Counter for packet sequence number
   3220           *
   3221           * @param   none
   3222           *
   3223           * @return  next ZCL frame counter
   3224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3225          uint8 bdb_getZCLFrameCounter(void)
   \                     bdb_getZCLFrameCounter:
   3226          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3227            bdb_ZclTransactionSequenceNumber++;
   \   000004   90....       MOV       DPTR,#bdb_ZclTransactionSequenceNumber
   \   000007   E0           MOVX      A,@DPTR
   \   000008   04           INC       A
   \   000009   F0           MOVX      @DPTR,A
   3228            return bdb_ZclTransactionSequenceNumber;
   \   00000A   02....       LJMP      ??Subroutine48_0 & 0xFFFF
   3229          
   3230          }
   3231          
   3232          
   3233          #if (ZG_BUILD_JOINING_TYPE)
   3234          /*********************************************************************
   3235           * @fn      bdb_RegisterCBKETCLinkKeyExchangeCB
   3236           *
   3237           * @brief   Register a callback in which the TC link key exchange procedure will 
   3238           *          be performed by application.
   3239           *          Upon fail or success bdb must be notified, see bdb_CBKETCLinkKeyExchangeAttempt
   3240           *
   3241           * @param   bdbGCB_TCLinkKeyExchangeMethod - application callback
   3242           *
   3243           * @return  none
   3244           */
   3245          void bdb_RegisterCBKETCLinkKeyExchangeCB(bdbGCB_CBKETCLinkKeyExchange_t bdbGCB_CBKETCLinkKeyExchange)
   3246          {
   3247            if(bdbGCB_CBKETCLinkKeyExchange)
   3248            {
   3249              pfnCBKETCLinkKeyExchange = bdbGCB_CBKETCLinkKeyExchange;
   3250              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_CBKE;
   3251            }
   3252            else
   3253            {
   3254              pfnCBKETCLinkKeyExchange = NULL;
   3255              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
   3256            }
   3257          }
   3258          
   3259          /*********************************************************************
   3260           * @fn      bdb_RegisterForFilterNwkDescCB
   3261           *
   3262           * @brief   Register a callback in which the application gets the list of network
   3263           *          descriptors got from active scan.
   3264           *          Use bdb_nwkDescFree to release the network descriptors that are not 
   3265           *          of interest and leave those which are to be attempted.
   3266           *
   3267           * @param   bdbGCB_FilterNwkDesc - application callback
   3268           *
   3269           * @return  none
   3270           */
   3271          void bdb_RegisterForFilterNwkDescCB(bdbGCB_FilterNwkDesc_t bdbGCB_FilterNwkDesc)
   3272          {
   3273            if(bdbGCB_FilterNwkDesc)
   3274            {
   3275              pfnFilterNwkDesc = bdbGCB_FilterNwkDesc;
   3276            }
   3277          }
   3278          
   3279          
   3280          /*********************************************************************
   3281           * @fn          bdb_CBKETCLinkKeyExchangeAttempt
   3282           *
   3283           * @brief       Tell BDB module the result of the TC link key exchange, to try
   3284           *              the default process or to keep going with the joining process.
   3285           *
   3286           * @param       didSuccess - TRUE if the process was succes, False otherwise
   3287           *
   3288           * @return      unprocessed events
   3289           */
   3290          void bdb_CBKETCLinkKeyExchangeAttempt(bool didSuccess)
   3291          {
   3292            if(didSuccess)
   3293            {
   3294              bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   3295              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
   3296            }
   3297            else
   3298            {
   3299              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
   3300              //We are going back one state to try it again
   3301              bdbCommissioningProcedureState.bdbTCExchangeState -= BDB_TC_EXCHANGE_NEXT_STATE;
   3302              bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
   3303            }
   3304          
   3305          }
   3306          #endif
   3307          
   3308          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   3309          
   3310          /*********************************************************************
   3311           * @fn      gp_ChangeChannelReq
   3312           *
   3313           * @brief   Callback function to notify the BDB about a GP commissioning 
   3314           * request that will change the current channel for at most 
   3315           * gpBirectionalCommissioningChangeChannelTimeout ms
   3316           *
   3317           * @param   channel - Channel in which the commissioning will take place
   3318           *
   3319           * @return  TRUE to allow change channel, FALSE to do not allow
   3320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3321          static uint8 gp_ChangeChannelReq(void)
   \                     gp_ChangeChannelReq:
   3322          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3323            uint8 allowChangeChannel = TRUE;
   \   000004   7901         MOV       R1,#0x1
   3324            
   3325            //Do not allow changes of channel if any process is in place
   3326            if(bdbAttributes.bdbCommissioningMode)
   \   000006   90....       MOV       DPTR,#bdbAttributes + 11
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6002         JZ        ??gp_ChangeChannelReq_0
   3327            {
   3328              allowChangeChannel = FALSE;
   \   00000C   7900         MOV       R1,#0x0
   3329            }
   3330            
   3331            //Check application state to decide if allow change channel or not
   3332            
   3333            return allowChangeChannel;
   \                     ??gp_ChangeChannelReq_0:
   \   00000E   02....       LJMP      ??Subroutine46_0 & 0xFFFF
   3334          }
   3335          
   3336          
   3337          /*********************************************************************
   3338           * @fn          gp_CBInit
   3339           *
   3340           * @brief       Register the callbacks for GP endpoint
   3341           *
   3342           * @param       none
   3343           *
   3344           * @return      none
   3345           */
   3346          void gp_CBInit(void)
   3347          {
   3348            GP_DataCnfGCB = GP_DataCnf;
   3349            GP_endpointInitGCB = gp_endpointInit;  
   3350            GP_expireDuplicateFilteringGCB = gp_expireDuplicateFiltering;
   3351            GP_stopCommissioningModeGCB = gp_stopCommissioningMode;
   3352            GP_returnOperationalChannelGCB = gp_returnOperationalChannel;
   3353            GP_DataIndGCB = GP_DataInd;
   3354            GP_SecReqGCB = GP_SecReq;   
   3355            GP_CheckAnnouncedDeviceGCB = gp_CheckAnnouncedDevice;
   3356              
   3357            GP_aliasConflictAnnce = &aliasConflictAnnce;
   3358            
   3359            GP_endpointInitGCB();
   3360          }
   3361          
   3362          #endif
   3363          
   3364          /*********************************************************************
   3365          *********************************************************************/
   3366          
   3367          
   3368          /******************************************************************************
   3369           * @fn          bdb_GenerateInstallCodeCRC
   3370           *
   3371           * @brief       Creates a CRC for the install code passed.
   3372           *
   3373           * @param       installCode - install code from which CRC will be generated
   3374           *
   3375           * @return      CRC
   3376           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3377          uint16 bdb_GenerateInstallCodeCRC(uint8 *installCode)
   \                     bdb_GenerateInstallCodeCRC:
   3378          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV       A,#-0x2
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   3379            uint16 CRC;
   3380            
   3381            bdb_calculateCCITT_CRC(installCode, INSTALL_CODE_LEN, &CRC);
   \   000009                ; Setup parameters for call to function bdb_calculateCCITT_CRC
   \   000009   90....       MOV       DPTR,#__Constant_10
   \   00000C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00000F   7404         MOV       A,#0x4
   \   000011   12....       LCALL     ?XSTACK_DISP102_8
   \   000014   12....       LCALL     `??bdb_calculateCCITT_CRC::?relay`; Banked call to: bdb_calculateCCITT_CRC
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?DEALLOC_XSTACK8
   3382          
   3383            return CRC;
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000025   7402         MOV       A,#0x2
   \   000027   02....       LJMP      ?Subroutine6 & 0xFFFF
   3384          }
   3385          
   3386          /******************************************************************************
   3387           * @fn          bdb_calculateCCITT_CRC
   3388           *
   3389           * @brief       Creates a CRC for the install code passed.
   3390           *
   3391           * @param       Mb - install code from which CRC will be generated
   3392           * @param       msglen - install code length
   3393           * @param       crc - 
   3394           *
   3395           * @return      none
   3396           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3397          void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc)
   \                     bdb_calculateCCITT_CRC:
   3398          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   3399            uint16 crcinit_direct; 
   3400            uint16 crcinit_nondirect;
   3401            bdb_crcInit(crc, &crcinit_direct, &crcinit_nondirect);
   \   000012                ; Setup parameters for call to function bdb_crcInit
   \   000012   A8..         MOV       R0,?XSP + 0
   \   000014   A9..         MOV       R1,?XSP + 1
   \   000016   88..         MOV       ?V2,R0
   \   000018   89..         MOV       ?V3,R1
   \   00001A   78..         MOV       R0,#?V2
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?XSTACK_DISP102_8
   \   000024   AA..         MOV       R2,?V0
   \   000026   AB..         MOV       R3,?V1
   \   000028   12....       LCALL     `??bdb_crcInit::?relay`; Banked call to: bdb_crcInit
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   3402            *crc = bdb_crcBitByBitFast(Mb, msglen, crcinit_direct, crcinit_nondirect);
   \   000030                ; Setup parameters for call to function bdb_crcBitByBitFast
   \   000030   85..82       MOV       DPL,?XSP + 0
   \   000033   85..83       MOV       DPH,?XSP + 1
   \   000036   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000039   7412         MOV       A,#0x12
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000041   7408         MOV       A,#0x8
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   E0           MOVX      A,@DPTR
   \   000047   FC           MOV       R4,A
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   FD           MOV       R5,A
   \   00004B   EE           MOV       A,R6
   \   00004C   FA           MOV       R2,A
   \   00004D   EF           MOV       A,R7
   \   00004E   FB           MOV       R3,A
   \   00004F   12....       LCALL     `??bdb_crcBitByBitFast::?relay`; Banked call to: bdb_crcBitByBitFast
   \   000052   7406         MOV       A,#0x6
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057   85..82       MOV       DPL,?V0
   \   00005A   85..83       MOV       DPH,?V1
   \   00005D   EA           MOV       A,R2
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   EB           MOV       A,R3
   \   000061   F0           MOVX      @DPTR,A
   3403          }
   \   000062   02....       LJMP      ?Subroutine2 & 0xFFFF
   3404          
   3405          
   3406          /******************************************************************************
   3407           * @fn          bdb_crcInit
   3408           *
   3409           * @brief       Initialize CRC calculation
   3410           *
   3411           * @param       crc - 
   3412           * @param       crcinit_direct -
   3413           * @param       crcinit_nondirect - 
   3414           *
   3415           * @return      none
   3416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3417          void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect)
   \                     bdb_crcInit:
   3418          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3419          
   3420            uint16 i;
   3421            uint16 bit;
   3422          
   3423            *crcinit_direct = CRC_INIT;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   74FF         MOV       A,#-0x1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
   3424            *crc = CRC_INIT;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   F0           MOVX      @DPTR,A
   3425            for (i=0; i<CRC_ORDER; i++) 
   \   000015   7E10         MOV       R6,#0x10
   3426            {
   3427              bit = *crc & 1;
   \                     ??bdb_crcInit_0:
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   3428              if (bit) *crc^= CRC_POLYNOM;
   \   00001D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001F   5008         JNC       ??bdb_crcInit_1
   \   000021   6421         XRL       A,#0x21
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6410         XRL       A,#0x10
   \   000028   F0           MOVX      @DPTR,A
   3429              *crc >>= 1;
   \                     ??bdb_crcInit_1:
   \   000029   8A82         MOV       DPL,R2
   \   00002B   8B83         MOV       DPH,R3
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FC           MOV       R4,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C3           CLR       C
   \   000032   13           RRC       A
   \   000033   FD           MOV       R5,A
   \   000034   EC           MOV       A,R4
   \   000035   13           RRC       A
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   ED           MOV       A,R5
   \   00003D   F0           MOVX      @DPTR,A
   3430              if (bit) *crc|= CRC_HIGHBIT;
   \   00003E   E8           MOV       A,R0
   \   00003F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000041   5009         JNC       ??bdb_crcInit_2
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   4480         ORL       A,#0x80
   \   00004B   F0           MOVX      @DPTR,A
   3431            }	
   \                     ??bdb_crcInit_2:
   \   00004C   1E           DEC       R6
   \   00004D   EE           MOV       A,R6
   \   00004E   70C7         JNZ       ??bdb_crcInit_0
   3432            *crcinit_nondirect = *crc;
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000057   7409         MOV       A,#0x9
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FA           MOV       R2,A
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F583         MOV       DPH,A
   \   000062   8A82         MOV       DPL,R2
   \   000064   E8           MOV       A,R0
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   E9           MOV       A,R1
   \   000068   F0           MOVX      @DPTR,A
   3433          
   3434          }
   \   000069   02....       LJMP      ?Subroutine0 & 0xFFFF
   3435          
   3436          
   3437          /******************************************************************************
   3438           * @fn          bdb_crcReflect
   3439           *
   3440           * @brief       
   3441           *
   3442           * @param       crc - 
   3443           * @param       bitnum -
   3444           *
   3445           * @return      none
   3446           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3447          uint16 bdb_crcReflect (uint16 crc, uint16 bitnum)
   \                     bdb_crcReflect:
   3448          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3449          
   3450            // reflects the lower 'bitnum' bits of 'crc'
   3451          
   3452            uint16 i, j=1, crcout=0;
   \   000005   7E01         MOV       R6,#0x1
   \   000007   7F00         MOV       R7,#0x0
   \   000009   8F..         MOV       ?V0,R7
   \   00000B   8F..         MOV       ?V1,R7
   3453          
   3454            for (i=(uint16)1<<(bitnum-1); i; i>>=1) {
   \   00000D   8E..         MOV       ?V2,R6
   \   00000F   8F..         MOV       ?V3,R7
   \   000011   EC           MOV       A,R4
   \   000012   14           DEC       A
   \   000013   78..         MOV       R0,#?V2
   \   000015   12....       LCALL     ?S_SHL
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
   \   00001C   8022         SJMP      ??bdb_crcReflect_0
   3455              if (crc & i) crcout|=j;
   \                     ??bdb_crcReflect_1:
   \   00001E   EA           MOV       A,R2
   \   00001F   58           ANL       A,R0
   \   000020   FC           MOV       R4,A
   \   000021   EB           MOV       A,R3
   \   000022   59           ANL       A,R1
   \   000023   FD           MOV       R5,A
   \   000024   EC           MOV       A,R4
   \   000025   4D           ORL       A,R5
   \   000026   600A         JZ        ??bdb_crcReflect_2
   \   000028   EE           MOV       A,R6
   \   000029   45..         ORL       A,?V0
   \   00002B   F5..         MOV       ?V0,A
   \   00002D   EF           MOV       A,R7
   \   00002E   45..         ORL       A,?V1
   \   000030   F5..         MOV       ?V1,A
   3456              j<<= 1;
   \                     ??bdb_crcReflect_2:
   \   000032   EE           MOV       A,R6
   \   000033   25E0         ADD       A,0xE0 /* A   */
   \   000035   FE           MOV       R6,A
   \   000036   EF           MOV       A,R7
   \   000037   33           RLC       A
   \   000038   FF           MOV       R7,A
   3457            }
   \   000039   E9           MOV       A,R1
   \   00003A   C3           CLR       C
   \   00003B   13           RRC       A
   \   00003C   F9           MOV       R1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   13           RRC       A
   \   00003F   F8           MOV       R0,A
   \                     ??bdb_crcReflect_0:
   \   000040   E8           MOV       A,R0
   \   000041   49           ORL       A,R1
   \   000042   70DA         JNZ       ??bdb_crcReflect_1
   3458            return (crcout);
   \   000044   AA..         MOV       R2,?V0
   \   000046   AB..         MOV       R3,?V1
   \   000048   02....       LJMP      ??Subroutine50_0 & 0xFFFF
   3459          }
   3460          
   3461          
   3462          /******************************************************************************
   3463           * @fn          bdb_crcBitByBitFast
   3464           *
   3465           * @brief       
   3466           *
   3467           * @param       p - 
   3468           * @param       len -
   3469           * @param       crcinit_direct - 
   3470           * @param       crcinit_nondirect -
   3471           *
   3472           * @return      crc
   3473           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3474          uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect) 
   \                     bdb_crcBitByBitFast:
   3475          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   3476            // fast bit by bit algorithm without augmented zero bytes.
   3477            // does not use lookup table, suited for polynom orders between 1...32.
   3478          
   3479            uint16 i, j, c, bit;
   3480            uint16 crc = crcinit_direct;
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   3481          
   3482            for (i=0; i<len; i++) {
   \   00000D   75..00       MOV       ?V0,#0x0
   \   000010   75..00       MOV       ?V1,#0x0
   \   000013   7414         MOV       A,#0x14
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   78..         MOV       R0,#?V8
   \   00001A   12....       LCALL     ?L_MOV_X
   \   00001D   8046         SJMP      ??bdb_crcBitByBitFast_0
   3483          
   3484              c = (uint16)*p++;
   \                     ??bdb_crcBitByBitFast_1:
   \   00001F   85..82       MOV       DPL,?V2
   \   000022   85..83       MOV       DPH,?V3
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FA           MOV       R2,A
   \   000027   7B00         MOV       R3,#0x0
   \   000029   A3           INC       DPTR
   \   00002A   8582..       MOV       ?V2,DPL
   \   00002D   8583..       MOV       ?V3,DPH
   3485              c = bdb_crcReflect(c, 8);
   \   000030                ; Setup parameters for call to function bdb_crcReflect
   \   000030   7C08         MOV       R4,#0x8
   \   000032   7D00         MOV       R5,#0x0
   \   000034   12....       LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
   3486          
   3487              for (j=0x80; j; j>>=1) {
   \   000037   7880         MOV       R0,#-0x80
   3488          
   3489                bit = crc & CRC_HIGHBIT;
   \                     ??bdb_crcBitByBitFast_2:
   \   000039   EF           MOV       A,R7
   \   00003A   5480         ANL       A,#0x80
   \   00003C   FD           MOV       R5,A
   3490                crc<<= 1;
   \   00003D   EE           MOV       A,R6
   \   00003E   25E0         ADD       A,0xE0 /* A   */
   \   000040   FE           MOV       R6,A
   \   000041   EF           MOV       A,R7
   \   000042   33           RLC       A
   \   000043   FF           MOV       R7,A
   3491                if (c & j) bit^= CRC_HIGHBIT;
   \   000044   EA           MOV       A,R2
   \   000045   58           ANL       A,R0
   \   000046   6004         JZ        ??bdb_crcBitByBitFast_3
   \   000048   7480         MOV       A,#-0x80
   \   00004A   6D           XRL       A,R5
   \   00004B   FD           MOV       R5,A
   3492                if (bit) crc^= CRC_POLYNOM;
   \                     ??bdb_crcBitByBitFast_3:
   \   00004C   ED           MOV       A,R5
   \   00004D   6008         JZ        ??bdb_crcBitByBitFast_4
   \   00004F   7421         MOV       A,#0x21
   \   000051   6E           XRL       A,R6
   \   000052   FE           MOV       R6,A
   \   000053   7410         MOV       A,#0x10
   \   000055   6F           XRL       A,R7
   \   000056   FF           MOV       R7,A
   3493              }
   \                     ??bdb_crcBitByBitFast_4:
   \   000057   C3           CLR       C
   \   000058   E8           MOV       A,R0
   \   000059   13           RRC       A
   \   00005A   F8           MOV       R0,A
   \   00005B   70DC         JNZ       ??bdb_crcBitByBitFast_2
   3494            }	
   \   00005D   05..         INC       ?V0
   \   00005F   E5..         MOV       A,?V0
   \   000061   7002         JNZ       ??bdb_crcBitByBitFast_0
   \   000063   05..         INC       ?V1
   \                     ??bdb_crcBitByBitFast_0:
   \   000065   85....       MOV       ?V4,?V0
   \   000068   85....       MOV       ?V5,?V1
   \   00006B   E4           CLR       A
   \   00006C   F5..         MOV       ?V6,A
   \   00006E   F5..         MOV       ?V7,A
   \   000070   78..         MOV       R0,#?V8
   \   000072   79..         MOV       R1,#?V4
   \   000074   12....       LCALL     ?UL_GT
   \   000077   40A6         JC        ??bdb_crcBitByBitFast_1
   3495          
   3496            crc=bdb_crcReflect(crc, CRC_ORDER);
   3497            crc^= CRC_XOR;
   3498          
   3499            return(crc);
   \   000079                ; Setup parameters for call to function bdb_crcReflect
   \   000079   7C10         MOV       R4,#0x10
   \   00007B   7D00         MOV       R5,#0x0
   \   00007D   EE           MOV       A,R6
   \   00007E   FA           MOV       R2,A
   \   00007F   EF           MOV       A,R7
   \   000080   FB           MOV       R3,A
   \   000081   12....       LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
   \   000084   EA           MOV       A,R2
   \   000085   F4           CPL       A
   \   000086   FA           MOV       R2,A
   \   000087   EB           MOV       A,R3
   \   000088   F4           CPL       A
   \   000089   FB           MOV       R3,A
   \   00008A   7F0C         MOV       R7,#0xc
   \   00008C   02....       LJMP      ?BANKED_LEAVE_XDATA
   3500          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bdbAttributes>`:
   \   000000   00F0FF07     DD 134213632
   \   000004   00080000     DD 2048
   \   000008   FFFF         DW 65535
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   07           DB 7
   \   00000D   04           DB 4
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   0F           DB 15
   \   000011   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for vDoPrimaryScan>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBdbInstallCodeCRC>`:
   \   000000   83           DB 131
   \   000001   FE           DB 254
   \   000002   D3           DB 211
   \   000003   40           DB 64
   \   000004   7A           DB 122
   \   000005   93           DB 147
   \   000006   97           DB 151
   \   000007   23           DB 35
   \   000008   A5           DB 165
   \   000009   C6           DB 198
   \   00000A   39           DB 57
   \   00000B   B2           DB 178
   \   00000C   69           DB 105
   \   00000D   16           DB 22
   \   00000E   D5           DB 213
   \   00000F   05           DB 5
   \   000010   C3           DB 195
   \   000011   B5           DB 181

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c8:
   \   000000   C8000000     DD 200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3a98:
   \   000000   983A0000     DD 15000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10:
   \   000000   10000000     DD 16
   3501          
   3502          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   bdb_AddRespondentNode
        0     10   -> bdb_CreateRespondentList
        0     10   -> osal_mem_alloc
      0      0   bdb_ClearNetworkParams
      0     20   bdb_CreateRespondentList
        0     10   -> osal_mem_alloc
      2     36   bdb_GenerateInstallCodeCRC
        2      6   -> bdb_calculateCCITT_CRC
      0      9   bdb_Init
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> bdb_RepInit
        0      9   -> gp_RegisterGPChangeChannelReqForBDBCB
        0      9   -> gp_endpointInit
      0      0   bdb_NetworkRestoredResumeState
      1     36   bdb_NotifyCommissioningModeStart
        0     15   -> bdb_SendMsg
      0     49   bdb_ProcessNodeDescRsp
        0     45   -> APSME_IsDistributedSecurity
        0     45   -> ZDO_ParseNodeDescRsp
        0     45   -> bdb_reportCommissioningState
        0     45   -> bdb_setNodeJoinLinkKeyType
        0     45   -> bdb_tcLinkKeyExchangeAttempt
        0     49   -> osal_nv_write
        0     45   -> osal_stop_timerEx
      2      0   bdb_RegisterCommissioningStatusCB
      1     10   bdb_RegisterSimpleDescriptor
        0     10   -> afRegister
        0     10   -> osal_mem_alloc
      2      0   bdb_RegisterTCLinkKeyExchangeProcessCB
      1     79   bdb_SendMsg
        0     20   -> osal_memcpy
        0     17   -> osal_msg_allocate
        0     17   -> osal_msg_send
      0     36   bdb_StartCommissioning
        0     32   -> APSME_IsDistributedSecurity
        0     32   -> ZDApp_ReadNetworkRestoreState
        0     32   -> ZDOInitDeviceEx
        0     32   -> bdb_RepConstructReportingData
        0     32   -> bdb_RepUpdateMarkBindings
        0     32   -> bdb_nwkSteeringDeviceOnNwk
        0     32   -> bdb_reportCommissioningState
        0     32   -> bdb_setNodeIsOnANetwork
        0     32   -> osal_get_timeoutEx
        0     32   -> osal_isbufset
        0     32   -> osal_memset
        0     32   -> osal_nv_delete
        0     32   -> osal_nv_item_len
        0     36   -> osal_nv_read
        0     36   -> osal_nv_write
        0     32   -> osal_set_event
        0     32   -> zgWriteStartupOptions
      1     32   bdb_TCAddJoiningDevice
        0     30   -> bdb_SendMsg
        0     28   -> osal_mem_alloc
        0     31   -> osal_memcmp
        0     31   -> osal_memcpy
        0     32   -> osal_start_reload_timer
      0     75   bdb_TCJoiningDeviceFree
        0     15   -> osal_mem_free
        0     18   -> osal_memcmp
      0     85   bdb_TCProcessJoiningList
        0     59   -> APSME_SearchTCLinkKeyEntry
        0     57   -> AddrMgrEntryLookupExt
        0     59   -> ZDSecMgrAPSRemove
        0     57   -> ZDSecMgrAddrClear
        0     59   -> bdb_SendMsg
        0     57   -> bdb_TCJoiningDeviceFree
        0     60   -> osal_memcpy
        0     57   -> osal_memset
        0     61   -> osal_nv_write
        0     57   -> osal_stop_timerEx
      0     31   bdb_TCjoiningDeviceComplete
        0     30   -> bdb_SendMsg
        0     28   -> bdb_TCJoiningDeviceFree
        0     31   -> osal_memcmp
        0     31   -> osal_memcpy
        0     28   -> osal_stop_timerEx
      0     24   bdb_ZclIdentifyCmdInd
        0     24   -> osal_start_timerEx
        0     20   -> osal_stop_timerEx
        0     22   -> zclFindAttrRec
      0     34   bdb_addInstallCode
        0     30   -> APSME_AddTCLinkKey
        0     30   -> bdb_GenerateInstallCodeCRC
        0     30   -> osal_build_uint16
        0     34   -> sspMMOHash
      0     28   bdb_calculateCCITT_CRC
        0     22   -> bdb_crcBitByBitFast
        0     18   -> bdb_crcInit
      0     42   bdb_crcBitByBitFast
        0     20   -> bdb_crcReflect
      0     27   bdb_crcInit
      0     32   bdb_crcReflect
      2      0   bdb_doTrustCenterRequireKeyExchange
      1     28   bdb_event_loop
        0     24   -> bdb_ProcessIEEEAddrRsp
        0     24   -> bdb_ProcessRespondentList
        0     24   -> bdb_ProcessSimpleDesc
        0     24   -> bdb_RepProcessEvent
        0     24   -> bdb_SendIdentifyQuery
        0     24   -> bdb_TCProcessJoiningList
        0     24   -> bdb_exitFindingBindingWStatus
        0     24   -> bdb_getRespondentRetry
        0     24   -> bdb_nwkSteeringDeviceOnNwk
        0     24   -> bdb_reportCommissioningState
        0     24   -> bdb_setEpDescListToActiveEndpoint
        0     24   -> bdb_startResumeCommissioningProcess
        0     24   -> osal_get_timeoutEx
        0     24   -> osal_msg_deallocate
        0     24   -> osal_msg_receive
        0     28   -> osal_start_timerEx
        0     24   -> osal_stop_timerEx
        0     26   -> zclFindAttrRec
      2      0   bdb_getZCLFrameCounter
      2      0   bdb_isDeviceNonFactoryNew
      0      9   bdb_nwkFormationAttempt
        0      9   -> bdb_nwkJoiningFormation
        0      9   -> bdb_reportCommissioningState
      0     33   bdb_nwkJoiningFormation
        0     12   -> ZDOInitDeviceEx
        0     12   -> bdb_reportCommissioningState
        0     12   -> bdb_setChannel
      2     41   bdb_nwkSteeringDeviceOnNwk
        2      9   -> ZDP_MgmtPermitJoinReq
      0      0   bdb_parentLost
      0     15   bdb_rejoinNwk
        0     11   -> NLME_ReJoinRequest
        0     11   -> NLME_ReJoinRequestUnsecure
        0     11   -> ZDApp_ChangeState
        0     11   -> ZDApp_RestoreNwkKey
        0     11   -> ZMacSetReq
        0     15   -> osal_nv_write
      1     63   bdb_reportCommissioningState
        0     14   -> NLME_ResetRequest
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_RestoreNwkSecMaterial
        0     14   -> ZMacSetReq
        0     16   -> bdb_SendMsg
        0     14   -> bdb_getRespondentRetry
        0     14   -> bdb_setFN
        0     14   -> bdb_zclRespondentListClean
        0     14   -> nwk_setStateIdle
        0     14   -> osal_get_timeoutEx
        0     18   -> osal_start_timerEx
        0     14   -> osal_stop_timerEx
        0     14   -> zgWriteStartupOptions
      2      0   bdb_resetLocalAction
        2      0   -> ZDApp_ResetTimerStart
        2      0   -> bdb_setFN
      0     28   bdb_setChannel
        0     16   -> osal_nv_write
      0     12   bdb_setChannelAttribute
      2      0   bdb_setCommissioningGroupID
      2     14   bdb_setFN
        2      0   -> bdb_setNodeIsOnANetwork
        2      0   -> zgWriteStartupOptions
      2      0   bdb_setJoinUsesInstallCodeKey
      0     46   bdb_setNodeIsOnANetwork
        0     14   -> osal_nv_write
      2      0   bdb_setTCRequireKeyExchange
      0     49   bdb_startResumeCommissioningProcess
        0     21   -> bdb_NotifyCommissioningModeStart
        0     21   -> bdb_SendIdentifyQuery
        0     23   -> bdb_SendMsg
        0     21   -> bdb_exitFindingBindingWStatus
        0     21   -> bdb_nwkJoiningFormation
        0     21   -> bdb_nwkSteeringDeviceOnNwk
        0     21   -> bdb_reportCommissioningState
        0     21   -> bdb_setEpDescListToActiveEndpoint
        0     21   -> osal_memset
        0     25   -> osal_start_timerEx
        0     23   -> zclFindAttrRec
      0      0   bdb_touchlinkSendFNReset
      0     26   bdb_zclRespondentListClean
        0     12   -> osal_mem_free
      2      0   gp_ChangeChannelReq


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?<Initializer for bdbAttributes>
       1  ?<Initializer for vDoPrimaryScan>
      18  ?<Initializer for zgBdbInstallCodeCRC>
       6  ??Subroutine40_0
      12  ??Subroutine41_0
       6  ??Subroutine42_0
       8  ??Subroutine43_0
      11  ??Subroutine44_0
       1  ??Subroutine45_0
       7  ??Subroutine46_0
      13  ??Subroutine47_0
       4  ??Subroutine48_0
       3  ??Subroutine49_0
       5  ??Subroutine50_0
       6  ??Subroutine51_0
       7  ??Subroutine52_0
       2  ??Subroutine53_0
      11  ??Subroutine54_0
       5  ??Subroutine55_0
       2  ??Subroutine56_0
       6  ??Subroutine57_0
       9  ??Subroutine58_0
      12  ??Subroutine59_0
       6  ??Subroutine60_0
       8  ??Subroutine61_0
       5  ??Subroutine62_0
       5  ?Subroutine0
       3  ?Subroutine1
      11  ?Subroutine10
      10  ?Subroutine11
       8  ?Subroutine12
       2  ?Subroutine13
       6  ?Subroutine14
      15  ?Subroutine15
      19  ?Subroutine16
       2  ?Subroutine17
      20  ?Subroutine18
       4  ?Subroutine19
       2  ?Subroutine2
       4  ?Subroutine20
       4  ?Subroutine21
       3  ?Subroutine22
      12  ?Subroutine23
       8  ?Subroutine24
      14  ?Subroutine25
       6  ?Subroutine26
       9  ?Subroutine27
       8  ?Subroutine28
       2  ?Subroutine29
       4  ?Subroutine3
      11  ?Subroutine30
       4  ?Subroutine31
       6  ?Subroutine32
       8  ?Subroutine33
      14  ?Subroutine34
      15  ?Subroutine35
       3  ?Subroutine36
       5  ?Subroutine37
      10  ?Subroutine38
       6  ?Subroutine39
      10  ?Subroutine4
       5  ?Subroutine5
       6  ?Subroutine6
       1  ?Subroutine7
       8  ?Subroutine8
       1  ?Subroutine9
       4  __Constant_10
       4  __Constant_32
       4  __Constant_3a98
       4  __Constant_3e8
       4  __Constant_c8
      18  bdbAttributes
       4  bdbCommissioningProcedureState
     169  bdb_AddRespondentNode
       3  bdb_ClearNetworkParams
      21  bdb_CreateRespondentList
       2  bdb_CurrEpDescriptorList
       1  bdb_FBStateSuccessLatch
       1  bdb_FB_InitiatorCurrentCyclesNumber
      42  bdb_GenerateInstallCodeCRC
       2  bdb_HeadEpDescriptorList
     153  bdb_Init
       3  bdb_NetworkRestoredResumeState
      34  bdb_NotifyCommissioningModeStart
     165  bdb_ProcessNodeDescRsp
      10  bdb_RegisterCommissioningStatusCB
      58  bdb_RegisterSimpleDescriptor
      19  bdb_RegisterTCLinkKeyExchangeProcessCB
     103  bdb_SendMsg
     477  bdb_StartCommissioning
     336  bdb_TCAddJoiningDevice
     148  bdb_TCJoiningDeviceFree
     406  bdb_TCProcessJoiningList
     157  bdb_TCjoiningDeviceComplete
       1  bdb_TaskID
     129  bdb_ZclIdentifyCmdInd
       1  bdb_ZclTransactionSequenceNumber
     130  bdb_addInstallCode
     101  bdb_calculateCCITT_CRC
     143  bdb_crcBitByBitFast
     108  bdb_crcInit
      75  bdb_crcReflect
       9  bdb_doTrustCenterRequireKeyExchange
     585  bdb_event_loop
      13  bdb_getZCLFrameCounter
       1  bdb_initialization
       7  bdb_isDeviceNonFactoryNew
       2  bdb_joiningDeviceList
      51  bdb_nwkFormationAttempt
     110  bdb_nwkJoiningFormation
      45  bdb_nwkSteeringDeviceOnNwk
       3  bdb_parentLost
     166  bdb_rejoinNwk
     529  bdb_reportCommissioningState
      16  bdb_resetLocalAction
      64  bdb_setChannel
      31  bdb_setChannelAttribute
      10  bdb_setCommissioningGroupID
      18  bdb_setFN
      23  bdb_setJoinUsesInstallCodeKey
      63  bdb_setNodeIsOnANetwork
      11  bdb_setTCRequireKeyExchange
     457  bdb_startResumeCommissioningProcess
       3  bdb_touchlinkSendFNReset
      66  bdb_zclRespondentListClean
      17  gp_ChangeChannelReq
       2  pRespondentCurr
       2  pRespondentHead
       2  pRespondentNext
       2  pfnCommissioningStatusCB
       2  pfnTCLinkKeyExchangeProcessCB
       1  touchLinkTargetEnabled
       1  vDoPrimaryScan
      18  zgBdbInstallCodeCRC
     270  -- Other

 
 5 736 bytes in segment BANKED_CODE
   270 bytes in segment BANK_RELAYS
    37 bytes in segment XDATA_I
    37 bytes in segment XDATA_ID
    20 bytes in segment XDATA_ROM_C
    26 bytes in segment XDATA_Z
 
   307 bytes of CODE     memory
     0 bytes of CONST    memory (+ 20 bytes shared)
 5 736 bytes of HUGECODE memory
    63 bytes of XDATA    memory

Errors: none
Warnings: none
