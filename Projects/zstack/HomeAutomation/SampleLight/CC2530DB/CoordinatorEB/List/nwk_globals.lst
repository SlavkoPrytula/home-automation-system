###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               19/Apr/2021  18:00:00
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack 3.0.2\Components\stack\nwk\nwk_globals.c
#    Command line       =  
#        -f C:\users\slavko\Temp\EW83bd.tmp ("C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Components\stack\nwk\nwk_globals.c" -D BDB_REPORTING -D SECURE=1
#        -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK
#        -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -lC "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\nwk_globals.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj\nwk_globals.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack 3.0.2\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2015-01-08 16:32:12 -0800 (Thu, 08 Jan 2015) $
      4            Revision:       $Revision: 41678 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "AddrMgr.h"
     47          #include "AssocList.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          #include "nwk_globals.h"
     51          #include "APS.h"
     52          #include "ssp.h"
     53          #include "rtg.h"
     54          #include "ZDConfig.h"
     55          #include "ZGlobals.h"
     56          #include "ZDApp.h"
     57          #include "ZDSecMgr.h"
     58          
     59          #if defined ( LCD_SUPPORTED )
     60            #include "OnBoard.h"
     61          #endif
     62          
     63          /* HAL */
     64          #include "hal_lcd.h"
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          /*********************************************************************
     71           * CONSTANTS
     72           */
     73          // Maximums for the data buffer queue
     74          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     75          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     76          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     77          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     78          
     79          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     80          // A known shortcoming is that when a message is enqueued as "hold" for a
     81          // sleeping device, the timer tick may have counted down to 1, so that msg
     82          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     83          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     84          // So the hold time will vary within this interval:
     85          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     86          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     87          
     88           #define NWK_INDIRECT_CNT_RTG_TMR    60
     89          // To hold msg for sleeping end devices for 30 secs:
     90          // #define CNT_RTG_TIMER            1
     91          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     92          // To hold msg for sleeping end devices for 30 mins:
     93          // #define CNT_RTG_TIMER            60
     94          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     95          // To hold msg for sleeping end devices for 30 days:
     96          // #define CNT_RTG_TIMER            60
     97          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     98          // Maximum msgs to hold per associated device.
     99          #define NWK_INDIRECT_MSG_MAX_PER    3
    100          // Maximum total msgs to hold for all associated devices.
    101          #define NWK_INDIRECT_MSG_MAX_ALL    \
    102                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
    103          
    104          /*********************************************************************
    105           * TYPEDEFS
    106           */
    107          
    108          /*********************************************************************
    109           * NWK GLOBAL VARIABLES
    110           */
    111          
    112          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
    113          CONST deviceTableIndex_t gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   15           DB 21
    114          
    115          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
    116          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   0F           DB 15
    117          
    118          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
    119          CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
    120          CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    121          CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    122          CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    123          

   \                                 In  segment CODE_C, align 1
    124          CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   3C           DB 60

   \                                 In  segment CODE_C, align 1
    125          CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    126          CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    127          
    128          // change this if using a different stack profile...
    129          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    131          
    132          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133            uint8 CskipRtrs[1] = {0};
   \                     CskipRtrs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134            uint8 CskipChldrn[1] = {0};
   \                     CskipChldrn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
    136            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
    137            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
    138          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    139            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    140            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    141          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    142            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    143            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    144          #endif // STACK_PROFILE_ID
    145          
    146          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    147          uint8 gMIN_TREE_LQI = MIN_LQI_COST_3;
   \                     gMIN_TREE_LQI:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LQI>`
   \   000001                REQUIRE __INIT_XDATA_I
    148          
    149          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 588
   \   00024C                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment CODE_C, align 1
    152          CONST uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES = MAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
   \                     gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES:
   \   000000   02           DB 2

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint16 nwkPollCount = 0;
   \                     nwkPollCount:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment CODE_C, align 1
    154          CONST uint16 gNWK_MAX_POLL_COUNT = NWK_MAX_POLL_COUNT;
   \                     gNWK_MAX_POLL_COUNT:
   \   000000   E803         DW 1000
    155          
    156          #if defined ( ZIGBEEPRO )

   \                                 In  segment CODE_C, align 1
    157            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = NWK_MIN_ROUTER_CHILDREN;
   \                     gNWK_MIN_ROUTER_CHILDREN:
   \   000000   0000         DW 0

   \                                 In  segment CODE_C, align 1
    158            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = NWK_MIN_ENDDEVICE_CHILDREN;
   \                     gNWK_MIN_ENDDEVICE_CHILDREN:
   \   000000   0000         DW 0
    159          #else
    160            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = 0;
    161            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = 0;
    162          #endif
    163          

   \                                 In  segment CODE_C, align 1
    164          CONFIG_ITEM rtgTableIndex_t gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   28           DB 40

   \                                 In  segment CODE_C, align 1
    165          CONFIG_ITEM srcRtgTableIndex_t gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C           DB 12

   \                                 In  segment CODE_C, align 1
    166          CONFIG_ITEM rreqTableIndex_t gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    167          

   \                                 In  segment CODE_C, align 1
    168          CONFIG_ITEM neighborTableIndex_t gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   10           DB 16
    169          
    170           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 368
   \   000170                REQUIRE __INIT_XDATA_Z
    172          

   \                                 In  segment CODE_C, align 1
    173          CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
   \                     gMAX_SOURCE_ROUTE:
   \   000000   0C           DB 12
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
   \                     gMAX_BROADCAST_QUEUED:
   \   000000   0A           DB 10
    176          

   \                                 In  segment CODE_C, align 1
    177          CONST uint8 gLINK_DOWN_TRIGGER = LINK_DOWN_TRIGGER;
   \                     gLINK_DOWN_TRIGGER:
   \   000000   03           DB 3
    178          

   \                                 In  segment CODE_C, align 1
    179          CONST uint8 gGOOD_LINK_COST = GOOD_LINK_COST;
   \                     gGOOD_LINK_COST:
   \   000000   03           DB 3
    180          

   \                                 In  segment CODE_C, align 1
    181          CONST uint8 gMAX_PASSIVE_ACK_CNT = MAX_PASSIVE_ACK_CNT;
   \                     gMAX_PASSIVE_ACK_CNT:
   \   000000   08           DB 8
    182          
    183          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    185          
    186          #if defined ( ZIGBEEPRO ) || defined ( ZBIT )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
   \                     rtgSrcTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188            uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
   \                     rtgSrcRelayList:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
    189          #endif
    190          
    191          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    193          
    194          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    195          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    196          
    197          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    200          

   \                                 In  segment CODE_C, align 1
    201          CONFIG_ITEM bcastTableIndex_t gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    202          
    203          // For tree addressing, this switch allows the allocation of a
    204          // router address to an end device when end device address are
    205          // all used up.  If this option is enabled, address space
    206          // could be limited.

   \                                 In  segment CODE_C, align 1
    207          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    208          
    209          #if defined ( ZIGBEEPRO ) || defined ( ZBIT )
    210          // number of link status periods after the last received address conflict report
    211          // (network status command)

   \                                 In  segment CODE_C, align 1
    212          CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
   \                     gNWK_CONFLICTED_ADDR_EXPIRY_TIME:
   \   000000   04           DB 4
    213          #endif
    214          
    215          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZBIT )

   \                                 In  segment CODE_C, align 1
    216          CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
   \                     gNWK_FREQ_AGILITY_ALL_MAC_ERRS:
   \   000000   00           DB 0
    217          #endif
    218          
    219          // The time limited to one MTO RReq (Concentrator Announce) in milliseconds.

   \                                 In  segment CODE_C, align 1
    220          CONST uint16 gMTO_RREQ_LIMIT_TIME = MTO_RREQ_LIMIT_TIME;
   \                     gMTO_RREQ_LIMIT_TIME:
   \   000000   E803         DW 1000
    221          
    222          // The number of seconds a MTO routing entry will last.

   \                                 In  segment CODE_C, align 1
    223          CONST uint8 gMTO_ROUTE_EXPIRY_TIME = MTO_ROUTE_EXPIRY_TIME;
   \                     gMTO_ROUTE_EXPIRY_TIME:
   \   000000   FF           DB 255
    224          
    225          // Route Discovery Request Default Radius

   \                                 In  segment CODE_C, align 1
    226          CONST uint8 gDEFAULT_ROUTE_REQUEST_RADIUS = DEFAULT_ROUTE_REQUEST_RADIUS;
   \                     gDEFAULT_ROUTE_REQUEST_RADIUS:
   \   000000   1E           DB 30
    227          
    228          // Network message radius

   \                                 In  segment CODE_C, align 1
    229          CONST uint8 gDEF_NWK_RADIUS = DEF_NWK_RADIUS;
   \                     gDEF_NWK_RADIUS:
   \   000000   1E           DB 30
    230          
    231          #if ( ZSTACK_ROUTER_BUILD ) || defined ( ZBIT )

   \                                 In  segment CODE_C, align 1
    232          CONST uint16 gLINK_STATUS_JITTER_MASK = LINK_STATUS_JITTER_MASK;
   \                     gLINK_STATUS_JITTER_MASK:
   \   000000   7F00         DW 127
    233          #endif
    234          
    235          // Maximum number of devices either aged out or not recognized as child

   \                                 In  segment CODE_C, align 1
    236          CONST uint8 gMAX_NOT_MYCHILD_DEVICES = MAX_NOT_MYCHILD_DEVICES;
   \                     gMAX_NOT_MYCHILD_DEVICES:
   \   000000   05           DB 5
    237          
    238          // Child table Management timeout values

   \                                 In  segment CODE_C, align 1
    239          CONST uint32 timeoutValue[15] =
   \                     timeoutValue:
   \   000000   0A000000     DD 10
   \   000004   02000000     DD 2
   \   000008   04000000     DD 4
   \   00000C   08000000     DD 8
   \   000010   10000000     DD 16
   \   000014   20000000     DD 32
   \   000018   40000000     DD 64
   \   00001C   80000000     DD 128
   \   000020   00010000     DD 256
   \   000024   00020000     DD 512
   \   000028   00040000     DD 1024
   \   00002C   00080000     DD 2048
   \   000030   00100000     DD 4096
   \   000034   00200000     DD 8192
   \   000038   00400000     DD 16384
    240          {   10, // 0	10 seconds
    241               2, // 1	2 minutes
    242               4, // 2	4 minutes
    243               8, // 3	8 minutes
    244              16, // 4	16 minutes
    245              32, // 5	32 minutes
    246              64, // 6	64 minutes
    247             128, // 7	128 minutes
    248             256, // 8	256 minutes
    249             512, // 9	512 minutes
    250            1024, // 10	1024 minutes
    251            2048, // 11	2048 minutes
    252            4096, // 12	4096 minutes
    253            8192, // 13	8192 minutes
    254           16384 // 14	16384 minutes
    255          };
    256          
    257          // This table stores devices that have been aged out by the Child Aging Table
    258          // mechanism or have never been a child of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    259          nwkNotMyChild_t notMyChildList[MAX_NOT_MYCHILD_DEVICES];
   \                     notMyChildList:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    260          

   \                                 In  segment CODE_C, align 1
    261          CONST uint32 gMAX_NWK_FRAMECOUNTER_CHANGES = MAX_NWK_FRAMECOUNTER_CHANGES;
   \                     gMAX_NWK_FRAMECOUNTER_CHANGES:
   \   000000   E8030000     DD 1000
    262          
    263          #if defined ( FEATURE_MNP )
    264            uint8 gMAX_MNP_QUEUED = MAX_MNP_QUEUED;
    265          #endif
    266          
    267          /*********************************************************************
    268           * APS GLOBAL VARIABLES
    269           */
    270          
    271          // The Maximum number of binding records
    272          // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    273          CONFIG_ITEM bindTableIndex_t gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   04           DB 4
    274          
    275          #if defined ( REFLECTOR )
    276            // The Maximum number of cluster IDs in a binding record
    277            // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    278            CONFIG_ITEM uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    279          

   \                                 In  segment CODE_C, align 1
    280            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    281          
    282            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    283            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    284          #endif
    285          
    286          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    287          CONFIG_ITEM uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    288          
    289          // APS End Device Broadcast Table
    290          #if ( ZG_BUILD_ENDDEVICE_TYPE )
    291            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
    292            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
    293          #endif
    294          
    295          /*********************************************************************
    296           * SECURITY GLOBAL VARIABLES
    297           */
    298          
    299          // This is the default pre-configured key,
    300          // change this to make a unique key
    301          // SEC_KEY_LEN is defined in ssp.h.
    302          
    303          
    304          #if (ZG_BUILD_JOINING_TYPE)  
    305          //Distributed key is only used by devices with joining capabilities (router and ZED)
    306          CONFIG_ITEM uint8 distributedDefaultKey[SEC_KEY_LEN] = DISTRIBUTED_GLOBAL_LINK_KEY;
    307          #endif
    308          
    309          #if defined ( DEFAULT_KEY )

   \                                 In  segment CODE_C, align 1
    310          CONFIG_ITEM uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;
   \                     defaultKey:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
    311          #else
    312          CONST uint8 defaultKey[SEC_KEY_LEN] =
    313          {
    314          #if defined ( APP_TP ) || defined ( APP_TP2 )
    315            // Key for ZigBee Conformance Testing
    316            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    317            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    318          #else
    319            // Key for In-House Testing
    320            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    321            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    322          #endif
    323          };
    324          #endif
    325          
    326          // This is the default pre-configured Trust Center Link key,
    327          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    328          CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] = DEFAULT_TC_LINK_KEY;
   \                     defaultTCLinkKey:
   \   000000   5A           DB 90
   \   000001   69           DB 105
   \   000002   67           DB 103
   \   000003   42           DB 66
   \   000004   65           DB 101
   \   000005   65           DB 101
   \   000006   41           DB 65
   \   000007   6C           DB 108
   \   000008   6C           DB 108
   \   000009   69           DB 105
   \   00000A   61           DB 97
   \   00000B   6E           DB 110
   \   00000C   63           DB 99
   \   00000D   65           DB 101
   \   00000E   30           DB 48
   \   00000F   39           DB 57
    329          
    330          /*********************************************************************
    331           * STATUS STRINGS
    332           */
    333          #if defined ( LCD_SUPPORTED )

   \                                 In  segment XDATA_ROM_C, align 1
    334            const char PingStr[]         = "Ping Rcvd from";
   \                     PingStr:
   \   000000   50696E67     DB "Ping Rcvd from"
   \            20526376
   \            64206672
   \            6F6D00  

   \                                 In  segment XDATA_ROM_C, align 1
    335            const char AssocCnfStr[]     = "Assoc Cnf";
   \                     AssocCnfStr:
   \   000000   4173736F     DB "Assoc Cnf"
   \            6320436E
   \            6600    

   \                                 In  segment XDATA_ROM_C, align 1
    336            const char SuccessStr[]      = "Success";
   \                     SuccessStr:
   \   000000   53756363     DB "Success"
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
    337            const char EndDeviceStr[]    = "EndDevice:";
   \                     EndDeviceStr:
   \   000000   456E6444     DB "EndDevice:"
   \            65766963
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
    338            const char ParentStr[]       = "Parent:";
   \                     ParentStr:
   \   000000   50617265     DB "Parent:"
   \            6E743A00

   \                                 In  segment XDATA_ROM_C, align 1
    339            const char ZigbeeCoordStr[]  = "ZigBee Coord";
   \                     ZigbeeCoordStr:
   \   000000   5A696742     DB "ZigBee Coord"
   \            65652043
   \            6F6F7264
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    340            const char NetworkIDStr[]    = "Network ID:";
   \                     NetworkIDStr:
   \   000000   4E657477     DB "Network ID:"
   \            6F726B20
   \            49443A00

   \                                 In  segment XDATA_ROM_C, align 1
    341            const char RouterStr[]       = "Router:";
   \                     RouterStr:
   \   000000   526F7574     DB "Router:"
   \            65723A00

   \                                 In  segment XDATA_ROM_C, align 1
    342            const char OrphanRspStr[]    = "Orphan Response";
   \                     OrphanRspStr:
   \   000000   4F727068     DB "Orphan Response"
   \            616E2052
   \            6573706F
   \            6E736500

   \                                 In  segment XDATA_ROM_C, align 1
    343            const char SentStr[]         = "Sent";
   \                     SentStr:
   \   000000   53656E74     DB "Sent"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    344            const char FailedStr[]       = "Failed";
   \                     FailedStr:
   \   000000   4661696C     DB "Failed"
   \            656400  

   \                                 In  segment XDATA_ROM_C, align 1
    345            const char AssocRspFailStr[] = "Assoc Rsp fail";
   \                     AssocRspFailStr:
   \   000000   4173736F     DB "Assoc Rsp fail"
   \            63205273
   \            70206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    346            const char AssocIndStr[]     = "Assoc Ind";
   \                     AssocIndStr:
   \   000000   4173736F     DB "Assoc Ind"
   \            6320496E
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
    347            const char AssocCnfFailStr[] = "Assoc Cnf fail";
   \                     AssocCnfFailStr:
   \   000000   4173736F     DB "Assoc Cnf fail"
   \            6320436E
   \            66206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    348            const char EnergyLevelStr[]  = "Energy Level";
   \                     EnergyLevelStr:
   \   000000   456E6572     DB "Energy Level"
   \            6779204C
   \            6576656C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    349            const char ScanFailedStr[]   = "Scan Failed";
   \                     ScanFailedStr:
   \   000000   5363616E     DB "Scan Failed"
   \            20466169
   \            6C656400
    350          #endif
    351          
    352          /*********************************************************************
    353           * @fn       nwk_globals_init()
    354           *
    355           * @brief
    356           *
    357           *   Initialize nwk layer globals.  These are the system defaults and
    358           *   should be changed by the user here.  The default definitions are
    359           *   defined in nwk.h or NLMEDE.h.
    360           *
    361           * @param   none
    362           *
    363           * @return  none
    364           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    365          void nwk_globals_init( void )
   \                     nwk_globals_init:
    366          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    367            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A46         MOV       R2,#0x46
   \   000006   7B00         MOV       R3,#0x0
   \   000008   12....       LCALL     `??AddrMgrInit::?relay`; Banked call to: AddrMgrInit
    368          
    369          #if !defined ( ZIGBEEPRO )
    370            if ( ZSTACK_ROUTER_BUILD )
    371            {
    372              // Initialize the Cskip Table
    373              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
    374              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
    375            }
    376          #endif
    377          
    378          #if defined ( ZIGBEE_FREQ_AGILITY )
    379            NwkFreqAgilityInit();
   \   00000B                ; Setup parameters for call to function NwkFreqAgilityInit
   \   00000B   12....       LCALL     `??NwkFreqAgilityInit::?relay`; Banked call to: NwkFreqAgilityInit
    380          #endif
    381          
    382            if ( ( ZSTACK_ROUTER_BUILD ) && ( zgChildAgingEnable == TRUE ) )
   \   00000E   90....       MOV       DPTR,#zgChildAgingEnable
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6401         XRL       A,#0x1
   \   000014   7003         JNZ       ??nwk_globals_init_0
    383            {
    384              // Set the function pointers for the Child Aging feature
    385              NwkInitChildAging();
   \   000016                ; Setup parameters for call to function NwkInitChildAging
   \   000016   12....       LCALL     `??NwkInitChildAging::?relay`; Banked call to: NwkInitChildAging
    386            }
    387          }
   \                     ??nwk_globals_init_0:
   \   000019   D083         POP       DPH
   \   00001B   D082         POP       DPL
   \   00001D   02....       LJMP      ?BRET
    388          
    389          /*********************************************************************
    390           * @fn       NIB_init()
    391           *
    392           * @brief
    393           *
    394           *   Initialize attribute values in NIB
    395           *
    396           * @param   none
    397           *
    398           * @return  none
    399           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          void NIB_init()
   \                     NIB_init:
    401          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    402            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000008   EA           MOV       A,R2
   \   000009   90....       MOV       DPTR,#_NIB
   \   00000C   F0           MOVX      @DPTR,A
    403          
    404            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000D   90....       MOV       DPTR,#_NIB + 17
   \   000010   7402         MOV       A,#0x2
   \   000012   F0           MOVX      @DPTR,A
    405            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000013   90....       MOV       DPTR,#_NIB + 4
   \   000016   7414         MOV       A,#0x14
   \   000018   F0           MOVX      @DPTR,A
    406          
    407          #if ( NWK_MODE == NWK_MODE_MESH )
    408            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000019   90....       MOV       DPTR,#_NIB + 40
   \   00001C   740F         MOV       A,#0xf
   \   00001E   F0           MOVX      @DPTR,A
    409            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001F   A3           INC       DPTR
   \   000020   F0           MOVX      @DPTR,A
    410          #endif
    411          
    412            // BROADCAST SETTINGS:
    413            // *******************
    414            //   Broadcast Delivery Time
    415            //     - set to multiples of 100ms
    416            //     - should be 500ms more than the retry time
    417            //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    418            //   Passive Ack Timeout
    419            //     - set to multiples of 100ms
    420            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000021   90....       MOV       DPTR,#zgBcastDeliveryTime
   \   000024   E0           MOVX      A,@DPTR
   \   000025   90....       MOV       DPTR,#_NIB + 7
   \   000028   F0           MOVX      @DPTR,A
    421            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   000029   90....       MOV       DPTR,#zgPassiveAckTimeout
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   90....       MOV       DPTR,#_NIB + 1
   \   000030   F0           MOVX      @DPTR,A
    422            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000031   90....       MOV       DPTR,#zgMaxBcastRetires
   \   000034   E0           MOVX      A,@DPTR
   \   000035   90....       MOV       DPTR,#_NIB + 2
   \   000038   F0           MOVX      @DPTR,A
    423          
    424            _NIB.ReportConstantCost = 0;
   \   000039   90....       MOV       DPTR,#_NIB + 8
   \   00003C   E4           CLR       A
   \   00003D   F0           MOVX      @DPTR,A
    425            _NIB.RouteDiscRetries = 0;
   \   00003E   A3           INC       DPTR
   \   00003F   F0           MOVX      @DPTR,A
    426            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   000040   90....       MOV       DPTR,#_NIB + 11
   \   000043   04           INC       A
   \   000044   F0           MOVX      @DPTR,A
    427            _NIB.nwkAllFresh = NWK_ALL_FRESH;
   \   000045   90....       MOV       DPTR,#_NIB + 104
   \   000048   F0           MOVX      @DPTR,A
    428          
    429            if ( ZG_SECURE_ENABLED )
    430            {
    431              _NIB.SecurityLevel = SECURITY_LEVEL;
   \   000049   90....       MOV       DPTR,#_NIB + 12
   \   00004C   7405         MOV       A,#0x5
   \   00004E   F0           MOVX      @DPTR,A
    432            }
    433            else
    434            {
    435              _NIB.SecurityLevel = 0;
    436            }
    437          
    438            _NIB.SymLink = TRUE;
   \   00004F   A3           INC       DPTR
   \   000050   7401         MOV       A,#0x1
   \   000052   F0           MOVX      @DPTR,A
    439          
    440            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000053   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000056   E0           MOVX      A,@DPTR
   \   000057   90....       MOV       DPTR,#_NIB + 14
   \   00005A   F0           MOVX      @DPTR,A
    441          
    442            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   00005B   90....       MOV       DPTR,#zgIndirectMsgTimeout
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   90....       MOV       DPTR,#_NIB + 15
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   E4           CLR       A
   \   000065   F0           MOVX      @DPTR,A
    443          
    444            _NIB.RouteDiscoveryTime = zgRouteDiscoveryTime;
   \   000066   90....       MOV       DPTR,#zgRouteDiscoveryTime
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   90....       MOV       DPTR,#_NIB + 18
   \   00006D   F0           MOVX      @DPTR,A
    445            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   00006E   90....       MOV       DPTR,#zgRouteExpiryTime
   \   000071   E0           MOVX      A,@DPTR
   \   000072   90....       MOV       DPTR,#_NIB + 19
   \   000075   12....       LCALL     ?Subroutine1 & 0xFFFF
    446          
    447            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
    448            _NIB.nwkLogicalChannel = 0;
   \                     ??CrossCallReturnLabel_0:
   \   000078   A3           INC       DPTR
   \   000079   E4           CLR       A
   \   00007A   12....       LCALL     ?Subroutine1 & 0xFFFF
    449            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
    450            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_1:
   \   00007D                ; Setup parameters for call to function osal_memset
   \   00007D   7C08         MOV       R4,#0x8
   \   00007F   7D00         MOV       R5,#0x0
   \   000081   7900         MOV       R1,#0x0
   \   000083   7A..         MOV       R2,#(_NIB + 25) & 0xff
   \   000085   7B..         MOV       R3,#((_NIB + 25) >> 8) & 0xff
   \   000087   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    451            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   00008A   90....       MOV       DPTR,#_NIB + 33
   \   00008D   74FE         MOV       A,#-0x2
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   A3           INC       DPTR
   \   000091   04           INC       A
   \   000092   F0           MOVX      @DPTR,A
    452          
    453            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   000093                ; Setup parameters for call to function sAddrExtCpy
   \   000093   7C..         MOV       R4,#zgExtendedPANID & 0xff
   \   000095   7D..         MOV       R5,#(zgExtendedPANID >> 8) & 0xff
   \   000097   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000099   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   00009B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    454          
    455            _NIB.nwkKeyLoaded = FALSE;
   \   00009E   90....       MOV       DPTR,#_NIB + 61
   \   0000A1   E4           CLR       A
   \   0000A2   F0           MOVX      @DPTR,A
    456          
    457            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD;
   \   0000A3   90....       MOV       DPTR,#_NIB + 98
   \   0000A6   740F         MOV       A,#0xf
   \   0000A8   F0           MOVX      @DPTR,A
    458            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000A9   A3           INC       DPTR
   \   0000AA   7403         MOV       A,#0x3
   \   0000AC   F0           MOVX      @DPTR,A
    459          
    460            //MTO and source routing
    461            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000AD   90....       MOV       DPTR,#zgConcentratorDiscoveryTime
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   90....       MOV       DPTR,#_NIB + 102
   \   0000B4   F0           MOVX      @DPTR,A
    462            _NIB.nwkIsConcentrator = zgConcentratorEnable;
   \   0000B5   90....       MOV       DPTR,#zgConcentratorEnable
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   90....       MOV       DPTR,#_NIB + 101
   \   0000BC   F0           MOVX      @DPTR,A
    463            _NIB.nwkConcentratorRadius = zgConcentratorRadius;
   \   0000BD   90....       MOV       DPTR,#zgConcentratorRadius
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   90....       MOV       DPTR,#_NIB + 103
   \   0000C4   F0           MOVX      @DPTR,A
    464          
    465          #if defined ( ZIGBEEPRO )
    466            _NIB.nwkUseMultiCast = MULTICAST_ENABLED;
   \   0000C5   90....       MOV       DPTR,#_NIB + 100
   \   0000C8   E4           CLR       A
   \   0000C9   F0           MOVX      @DPTR,A
    467          #else
    468            _NIB.nwkUseMultiCast = FALSE;
    469          #endif
    470          
    471          #if defined ( NV_RESTORE )
    472            if ( osal_nv_read( ZCD_NV_NWKMGR_ADDR, 0, sizeof( _NIB.nwkManagerAddr ),
    473                               &_NIB.nwkManagerAddr ) != SUCCESS )
   \   0000CA                ; Setup parameters for call to function osal_nv_read
   \   0000CA   75....       MOV       ?V0,#(_NIB + 105) & 0xff
   \   0000CD   75....       MOV       ?V1,#((_NIB + 105) >> 8) & 0xff
   \   0000D0   78..         MOV       R0,#?V0
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D5   75..02       MOV       ?V0,#0x2
   \   0000D8   75..00       MOV       ?V1,#0x0
   \   0000DB   78..         MOV       R0,#?V0
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E0   7C00         MOV       R4,#0x0
   \   0000E2   7D00         MOV       R5,#0x0
   \   0000E4   7A89         MOV       R2,#-0x77
   \   0000E6   7B00         MOV       R3,#0x0
   \   0000E8   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000EB   7404         MOV       A,#0x4
   \   0000ED   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F0   E9           MOV       A,R1
   \   0000F1   6007         JZ        ??NIB_init_0
    474          #endif
    475            {
    476              _NIB.nwkManagerAddr = 0x0000;
   \   0000F3   90....       MOV       DPTR,#_NIB + 105
   \   0000F6   E4           CLR       A
   \   0000F7   F0           MOVX      @DPTR,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   F0           MOVX      @DPTR,A
    477            }
    478          
    479            NLME_SetUpdateID( 0 );
   \                     ??NIB_init_0:
   \   0000FA                ; Setup parameters for call to function NLME_SetUpdateID
   \   0000FA   7900         MOV       R1,#0x0
   \   0000FC   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    480            _NIB.nwkTotalTransmissions = 0;
   \   0000FF   90....       MOV       DPTR,#_NIB + 107
   \   000102   E4           CLR       A
   \   000103   F0           MOVX      @DPTR,A
   \   000104   A3           INC       DPTR
   \   000105   F0           MOVX      @DPTR,A
    481          }
   \   000106                REQUIRE ?Subroutine0
   \   000106                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   74FE         MOV       A,#-0x2
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   04           INC       A
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
    482          
    483          /*********************************************************************
    484           * @fn       nwk_Status()
    485           *
    486           * @brief
    487           *
    488           *   Status report.
    489           *
    490           * @param   statusCode
    491           * @param   statusValue
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    496          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    497          #if defined ( SERIAL_DEBUG_SUPPORTED ) || (defined ( LEGACY_LCD_DEBUG ) && defined (LCD_SUPPORTED))
    498            switch ( statusCode )
   \   00000D   8C..         MOV       ?V4,R4
   \   00000F   8D..         MOV       ?V5,R5
   \   000011   E4           CLR       A
   \   000012   F5..         MOV       ?V6,A
   \   000014   F5..         MOV       ?V7,A
   \   000016   78..         MOV       R0,#?V2
   \   000018   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for nwk_Status>_0`:
   \   00001B   0000         DW        0
   \   00001D   0800         DW        8
   \   00001F   0200         DW        2
   \   000021   ....         DW        ??nwk_Status_0
   \   000023   0400         DW        4
   \   000025   ....         DW        ??nwk_Status_1
   \   000027   0500         DW        5
   \   000029   ....         DW        ??nwk_Status_2
   \   00002B   0600         DW        6
   \   00002D   ....         DW        ??nwk_Status_3
   \   00002F   0700         DW        7
   \   000031   ....         DW        ??nwk_Status_4
   \   000033   0110         DW        4097
   \   000035   ....         DW        ??nwk_Status_5
   \   000037   0310         DW        4099
   \   000039   ....         DW        ??nwk_Status_6
   \   00003B   0410         DW        4100
   \   00003D   ....         DW        ??nwk_Status_7
   \   00003F   ....         DW        ??nwk_Status_8
    499            {
    500              case NWK_STATUS_COORD_ADDR:
    501                if ( ZSTACK_ROUTER_BUILD )
    502                {
    503                  
    504                if ( _NIB.nwkDevAddress == NWK_PAN_COORD_ADDR )
   \                     ??nwk_Status_2:
   \   000041   90....       MOV       DPTR,#_NIB + 20
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F8           MOV       R0,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F9           MOV       R1,A
   \   000049   E8           MOV       A,R0
   \   00004A   49           ORL       A,R1
   \   00004B   7009         JNZ       ??nwk_Status_9
    505                {
    506                  HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_DEBUG_LINE_1 );
   \   00004D                ; Setup parameters for call to function HalLcdWriteString
   \   00004D   79FF         MOV       R1,#-0x1
   \   00004F   7A..         MOV       R2,#ZigbeeCoordStr & 0xff
   \   000051   7B..         MOV       R3,#(ZigbeeCoordStr >> 8) & 0xff
   \   000053   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    507                }
    508                if ( (_NIB.nwkDevAddress != NWK_PAN_COORD_ADDR) &&
    509                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??nwk_Status_9:
   \   000056   90....       MOV       DPTR,#_NIB + 20
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   FC           MOV       R4,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FD           MOV       R5,A
   \   00005E   EC           MOV       A,R4
   \   00005F   4D           ORL       A,R5
   \   000060   6020         JZ        ??nwk_Status_10
   \   000062   74FE         MOV       A,#-0x2
   \   000064   6C           XRL       A,R4
   \   000065   7003         JNZ       ??nwk_Status_11
   \   000067   74FF         MOV       A,#-0x1
   \   000069   6D           XRL       A,R5
   \                     ??nwk_Status_11:
   \   00006A   6016         JZ        ??nwk_Status_10
    510                {
    511                  HalLcdWriteStringValue( (char*)RouterStr, _NIB.nwkDevAddress, 16, HAL_LCD_DEBUG_LINE_1 );
   \   00006C                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00006C   75..FF       MOV       ?V2,#-0x1
   \   00006F   78..         MOV       R0,#?V2
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000074   7910         MOV       R1,#0x10
   \   000076   7A..         MOV       R2,#RouterStr & 0xff
   \   000078   7B..         MOV       R3,#(RouterStr >> 8) & 0xff
   \   00007A   12....       LCALL     `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
   \   00007D   7401         MOV       A,#0x1
   \   00007F   12....       LCALL     ?DEALLOC_XSTACK8
    512                }
    513                
    514                  HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_DEBUG_LINE_2 );
   \                     ??nwk_Status_10:
   \   000082                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000082   75..FF       MOV       ?V2,#-0x1
   \   000085   78..         MOV       R0,#?V2
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008A   7910         MOV       R1,#0x10
   \   00008C   AC..         MOV       R4,?V0
   \   00008E   AD..         MOV       R5,?V1
   \   000090   7A..         MOV       R2,#NetworkIDStr & 0xff
   \   000092   7B..         MOV       R3,#(NetworkIDStr >> 8) & 0xff
   \   000094   12....       LCALL     `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
   \   000097   7401         MOV       A,#0x1
   \   000099   12....       LCALL     ?DEALLOC_XSTACK8
    515                  BuzzerControl( BUZZER_BLIP );
   \   00009C                ; Setup parameters for call to function BuzzerControl
   \   00009C   7902         MOV       R1,#0x2
   \   00009E   12....       LCALL     `??BuzzerControl::?relay`; Banked call to: BuzzerControl
    516                }
    517                break;
   \   0000A1   8079         SJMP      ??nwk_Status_8
    518          
    519              case NWK_STATUS_ROUTER_ADDR:
    520                if ( ZSTACK_ROUTER_BUILD )
    521                {
    522                  HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_DEBUG_LINE_1 );
   \                     ??nwk_Status_3:
   \   0000A3                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000A3   75..FF       MOV       ?V2,#-0x1
   \   0000A6   78..         MOV       R0,#?V2
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AB   7910         MOV       R1,#0x10
   \   0000AD   7A..         MOV       R2,#RouterStr & 0xff
   \   0000AF   7B..         MOV       R3,#(RouterStr >> 8) & 0xff
   \   0000B1   802A         SJMP      ??nwk_Status_12
    523                }
    524                break;
    525          
    526              case NWK_STATUS_ORPHAN_RSP:
    527                if ( ZSTACK_ROUTER_BUILD )
    528                {
    529                  if ( statusValue == ZSuccess )
   \                     ??nwk_Status_4:
   \   0000B3   7A..         MOV       R2,#OrphanRspStr & 0xff
   \   0000B5   7B..         MOV       R3,#(OrphanRspStr >> 8) & 0xff
   \   0000B7   EC           MOV       A,R4
   \   0000B8   4D           ORL       A,R5
   \   0000B9   7006         JNZ       ??nwk_Status_13
    530                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
   \   0000BB                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000BB   7C..         MOV       R4,#SentStr & 0xff
   \   0000BD   7D..         MOV       R5,#(SentStr >> 8) & 0xff
   \   0000BF   8058         SJMP      ??nwk_Status_14
    531                  else
    532                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
   \                     ??nwk_Status_13:
   \   0000C1                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000C1   7C..         MOV       R4,#FailedStr & 0xff
   \   0000C3   7D..         MOV       R5,#(FailedStr >> 8) & 0xff
   \   0000C5   8052         SJMP      ??nwk_Status_14
    533                }
    534                break;
    535          
    536              case NWK_ERROR_ASSOC_RSP:
    537                if ( ZSTACK_ROUTER_BUILD )
    538                {
    539                  HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_DEBUG_LINE_1 );
   \                     ??nwk_Status_5:
   \   0000C7                ; Setup parameters for call to function HalLcdWriteString
   \   0000C7   79FF         MOV       R1,#-0x1
   \   0000C9   7A..         MOV       R2,#AssocRspFailStr & 0xff
   \   0000CB   7B..         MOV       R3,#(AssocRspFailStr >> 8) & 0xff
   \   0000CD   8023         SJMP      ??nwk_Status_15
    540                  HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_DEBUG_LINE_2 );
    541                }
    542                break;
    543          
    544              case NWK_STATUS_ED_ADDR:
    545                if ( ZSTACK_END_DEVICE_BUILD )
    546                {
    547                  HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_DEBUG_LINE_1 );
    548                }
    549                break;
    550          
    551              case NWK_STATUS_PARENT_ADDR:
    552                      HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_DEBUG_LINE_2 );
   \                     ??nwk_Status_1:
   \   0000CF                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000CF   75..FF       MOV       ?V2,#-0x1
   \   0000D2   78..         MOV       R0,#?V2
   \   0000D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D7   7910         MOV       R1,#0x10
   \   0000D9   7A..         MOV       R2,#ParentStr & 0xff
   \   0000DB   7B..         MOV       R3,#(ParentStr >> 8) & 0xff
   \                     ??nwk_Status_12:
   \   0000DD   12....       LCALL     `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
   \   0000E0   8028         SJMP      ??nwk_Status_16
    553                break;
    554          
    555              case NWK_STATUS_ASSOC_CNF:
    556                HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
   \                     ??nwk_Status_0:
   \   0000E2                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000E2   7C..         MOV       R4,#SuccessStr & 0xff
   \   0000E4   7D..         MOV       R5,#(SuccessStr >> 8) & 0xff
   \   0000E6   7A..         MOV       R2,#AssocCnfStr & 0xff
   \   0000E8   7B..         MOV       R3,#(AssocCnfStr >> 8) & 0xff
   \   0000EA   802D         SJMP      ??nwk_Status_14
    557                break;
    558          
    559              case NWK_ERROR_ASSOC_CNF_DENIED:
    560                HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_DEBUG_LINE_1 );
   \                     ??nwk_Status_6:
   \   0000EC                ; Setup parameters for call to function HalLcdWriteString
   \   0000EC   79FF         MOV       R1,#-0x1
   \   0000EE   7A..         MOV       R2,#AssocCnfFailStr & 0xff
   \   0000F0   7B..         MOV       R3,#(AssocCnfFailStr >> 8) & 0xff
   \                     ??nwk_Status_15:
   \   0000F2   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    561                HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_DEBUG_LINE_2 );
   \   0000F5                ; Setup parameters for call to function HalLcdWriteValue
   \   0000F5   75..FF       MOV       ?V0,#-0x1
   \   0000F8   78..         MOV       R0,#?V0
   \   0000FA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FD   7910         MOV       R1,#0x10
   \   0000FF   AA..         MOV       R2,?V4
   \   000101   AB..         MOV       R3,?V5
   \   000103   AC..         MOV       R4,?V6
   \   000105   AD..         MOV       R5,?V7
   \   000107   12....       LCALL     `??HalLcdWriteValue::?relay`; Banked call to: HalLcdWriteValue
   \                     ??nwk_Status_16:
   \   00010A   7401         MOV       A,#0x1
   \   00010C   12....       LCALL     ?DEALLOC_XSTACK8
    562                break;
   \   00010F   800B         SJMP      ??nwk_Status_8
    563          
    564              case NWK_ERROR_ENERGY_SCAN_FAILED:
    565                HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
   \                     ??nwk_Status_7:
   \   000111                ; Setup parameters for call to function HalLcdWriteScreen
   \   000111   7C..         MOV       R4,#ScanFailedStr & 0xff
   \   000113   7D..         MOV       R5,#(ScanFailedStr >> 8) & 0xff
   \   000115   7A..         MOV       R2,#EnergyLevelStr & 0xff
   \   000117   7B..         MOV       R3,#(EnergyLevelStr >> 8) & 0xff
   \                     ??nwk_Status_14:
   \   000119   12....       LCALL     `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    566                break;
    567            }
    568          #endif
    569          }
   \                     ??nwk_Status_8:
   \   00011C   7F08         MOV       R7,#0x8
   \   00011E   02....       LJMP      ?BANKED_LEAVE_XDATA
    570          
    571          /*********************************************************************
    572           * @fn      nwk_adjustDelay()
    573           *
    574           * @brief   Adjust the retransmit delay. Modify this function to
    575           *          change the default delay behavior.
    576           *
    577           * @param   existingDelay - default delay
    578           * @param   confirmStatus - data confirm status
    579           * @param   bufOptions - network buffer options
    580           *
    581           * @return  delay value - this number is the number of
    582           *          network event ticks (~2ms).
    583           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    584          uint16 nwk_adjustDelay( uint16 existingDelay, uint8 confirmStatus, uint16 bufOptions )
   \                     nwk_adjustDelay:
    585          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    586            uint16 result = existingDelay;
   \   000007   EA           MOV       A,R2
   \   000008   F8           MOV       R0,A
   \   000009   EB           MOV       A,R3
   \   00000A   F9           MOV       R1,A
    587            uint16 mask = 0;       // Random mask
    588            uint16 startValue = 0; // Start value
    589          
    590            switch ( confirmStatus )
   \   00000B   EE           MOV       A,R6
   \   00000C   241F         ADD       A,#0x1f
   \   00000E   6004         JZ        ??nwk_adjustDelay_0
   \   000010   24F0         ADD       A,#-0x10
   \   000012   7013         JNZ       ??nwk_adjustDelay_1
    591            {
    592              case ZMacTransactionOverFlow:
    593              case ZMacChannelAccessFailure:
    594                if ( bufOptions & (HANDLE_DELAY | HANDLE_HI_DELAY) )
   \                     ??nwk_adjustDelay_0:
   \   000014   EC           MOV       A,R4
   \   000015   5430         ANL       A,#0x30
   \   000017   600E         JZ        ??nwk_adjustDelay_1
    595                {
    596                  // Delay 4 - 18 ms
    597                  mask = 0x0007;
    598                  startValue = 2;
    599                }
    600                break;
    601          
    602              case ZNwkNoRoute:
    603              case ZMAC_NO_RESOURCES:
    604              case ZMacNoACK:
    605              default:
    606                // leave default delay
    607                mask = 0;
    608                startValue = 0;
    609                break;
    610            }
    611          
    612            if ( (mask > 0) && (startValue > 0) )
    613            {
    614              result = (osal_rand() & mask) + startValue;
   \   000019                ; Setup parameters for call to function osal_rand
   \   000019   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00001C   EA           MOV       A,R2
   \   00001D   5407         ANL       A,#0x7
   \   00001F   7900         MOV       R1,#0x0
   \   000021   2402         ADD       A,#0x2
   \   000023   F8           MOV       R0,A
   \   000024   5001         JNC       ??nwk_adjustDelay_1
   \   000026   09           INC       R1
    615            }
    616          
    617            return ( result );
   \                     ??nwk_adjustDelay_1:
   \   000027   E8           MOV       A,R0
   \   000028   FA           MOV       R2,A
   \   000029   E9           MOV       A,R1
   \   00002A   FB           MOV       R3,A
   \   00002B   02....       LJMP      ?Subroutine0 & 0xFFFF
    618          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LQI>`:
   \   000000   06           DB 6
    619          
    620          /*********************************************************************
    621          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     14   NIB_init
        0     10   -> NLME_SetUpdateID
        0     10   -> osal_memset
        0     14   -> osal_nv_read
        0     10   -> osal_rand
        0     10   -> sAddrExtCpy
      0     17   nwk_Status
        0     16   -> BuzzerControl
        0     16   -> HalLcdWriteScreen
        0     16   -> HalLcdWriteString
        0     17   -> HalLcdWriteStringValue
        0     17   -> HalLcdWriteValue
      0     10   nwk_adjustDelay
        0     10   -> osal_rand
      2      0   nwk_globals_init
        2      0   -> AddrMgrInit
        2      0   -> NwkFreqAgilityInit
        2      0   -> NwkInitChildAging


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for gMIN_TREE_LQI>
       5  ?Subroutine0
       9  ?Subroutine1
      15  AssocCnfFailStr
      10  AssocCnfStr
      10  AssocIndStr
      15  AssocRspFailStr
     588  AssociatedDevList
      56  BindingTable
       2  Cskip
       1  CskipChldrn
       1  CskipRtrs
      11  EndDeviceStr
      13  EnergyLevelStr
       7  FailedStr
     262  NIB_init
      12  NetworkIDStr
      16  OrphanRspStr
       8  ParentStr
      15  PingStr
       8  RouterStr
      12  ScanFailedStr
       5  SentStr
       8  SuccessStr
      13  ZigbeeCoordStr
      36  bcastHoldAckMask
       9  bcastHoldHandle
      72  bcastTable
      16  defaultKey
      16  defaultTCLinkKey
       1  gAPS_MAX_GROUPS
       2  gBIND_REC_SIZE
       1  gDEFAULT_ROUTE_REQUEST_RADIUS
       1  gDEF_NWK_RADIUS
       1  gGOOD_LINK_COST
       1  gLINK_DOWN_TRIGGER
       2  gLINK_STATUS_JITTER_MASK
       1  gMAX_BCAST
       1  gMAX_BINDING_CLUSTER_IDS
       1  gMAX_BROADCAST_QUEUED
       1  gMAX_NEIGHBOR_ENTRIES
       1  gMAX_NOT_MYCHILD_DEVICES
       4  gMAX_NWK_FRAMECOUNTER_CHANGES
       1  gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
       1  gMAX_PASSIVE_ACK_CNT
       1  gMAX_RREQ_ENTRIES
       1  gMAX_RTG_ENTRIES
       1  gMAX_RTG_SRC_ENTRIES
       1  gMAX_SOURCE_ROUTE
       1  gMIN_TREE_LQI
       1  gMTO_ROUTE_EXPIRY_TIME
       2  gMTO_RREQ_LIMIT_TIME
       1  gNWK_CONFLICTED_ADDR_EXPIRY_TIME
       1  gNWK_FREQ_AGILITY_ALL_MAC_ERRS
       1  gNWK_INDIRECT_CNT_RTG_TMR
       1  gNWK_INDIRECT_MSG_MAX_ALL
       1  gNWK_INDIRECT_MSG_MAX_PER
       1  gNWK_MAX_BINDING_ENTRIES
       1  gNWK_MAX_DATABUFS_CONFIRMED
       1  gNWK_MAX_DATABUFS_SCHEDULED
       1  gNWK_MAX_DATABUFS_TOTAL
       1  gNWK_MAX_DATABUFS_WAITING
       1  gNWK_MAX_DEVICE_LIST
       2  gNWK_MAX_POLL_COUNT
       1  gNWK_MAX_SLEEPING_END_DEVICES
       2  gNWK_MIN_ENDDEVICE_CHILDREN
       2  gNWK_MIN_ROUTER_CHILDREN
       1  gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
     368  neighborTable
      20  notMyChildList
       2  nwkPollCount
     289  nwk_Status
      46  nwk_adjustDelay
      32  nwk_globals_init
      64  rtDiscTable
      24  rtgSrcRelayList
      72  rtgSrcTable
     280  rtgTable
      60  timeoutValue
      24  -- Other

 
   643 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
   138 bytes in segment CODE_C
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
   178 bytes in segment XDATA_ROM_C
 1 595 bytes in segment XDATA_Z
 
   163 bytes of CODE     memory
   178 bytes of CONST    memory
   643 bytes of HUGECODE memory
 1 596 bytes of XDATA    memory

Errors: none
Warnings: none
