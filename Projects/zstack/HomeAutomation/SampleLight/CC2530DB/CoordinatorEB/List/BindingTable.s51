///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              19/Apr/2021  17:59:53
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack 3.0.2\Components\stack\nwk\BindingTable.c
//    Command line       =  
//        -f C:\users\slavko\Temp\EW6783.tmp ("C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Components\stack\nwk\BindingTable.c" -D BDB_REPORTING -D
//        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D
//        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
//        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS
//        -D ZCL_LEVEL_CTRL -lC "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\BindingTable.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME BindingTable

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_C_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??BindCopyBackupToNewNV::?relay`,0203H
        PUBLIC `??BindInitNV::?relay`
        FUNCTION `??BindInitNV::?relay`,0203H
        PUBLIC `??BindRestoreFromNV::?relay`
        FUNCTION `??BindRestoreFromNV::?relay`,0203H
        PUBLIC `??BindSetDefaultNV::?relay`
        FUNCTION `??BindSetDefaultNV::?relay`,0203H
        FUNCTION `??BindUpgradeTableInNV::?relay`,0203H
        PUBLIC `??BindWriteNV::?relay`
        FUNCTION `??BindWriteNV::?relay`,0203H
        PUBLIC `??GetBindingTableEntry::?relay`
        FUNCTION `??GetBindingTableEntry::?relay`,0203H
        PUBLIC `??InitBindingTable::?relay`
        FUNCTION `??InitBindingTable::?relay`,0203H
        PUBLIC `??bindAddClusterIdToList::?relay`
        FUNCTION `??bindAddClusterIdToList::?relay`,0203H
        PUBLIC `??bindAddEntry::?relay`
        FUNCTION `??bindAddEntry::?relay`,0203H
        PUBLIC `??bindAddrIndexGet::?relay`
        FUNCTION `??bindAddrIndexGet::?relay`,0203H
        PUBLIC `??bindAddrMgrLocalLoad::?relay`
        FUNCTION `??bindAddrMgrLocalLoad::?relay`,0203H
        PUBLIC `??bindAddressClear::?relay`
        FUNCTION `??bindAddressClear::?relay`,0203H
        PUBLIC `??bindCapacity::?relay`
        FUNCTION `??bindCapacity::?relay`,0203H
        PUBLIC `??bindFind::?relay`
        FUNCTION `??bindFind::?relay`,0203H
        PUBLIC `??bindFindEmpty::?relay`
        FUNCTION `??bindFindEmpty::?relay`,0203H
        PUBLIC `??bindFindExisting::?relay`
        FUNCTION `??bindFindExisting::?relay`,0203H
        PUBLIC `??bindIsClusterIDinList::?relay`
        FUNCTION `??bindIsClusterIDinList::?relay`,0203H
        PUBLIC `??bindNumBoundTo::?relay`
        FUNCTION `??bindNumBoundTo::?relay`,0203H
        PUBLIC `??bindNumOfEntries::?relay`
        FUNCTION `??bindNumOfEntries::?relay`,0203H
        PUBLIC `??bindNumReflections::?relay`
        FUNCTION `??bindNumReflections::?relay`,0203H
        PUBLIC `??bindRemoveClusterIdFromList::?relay`
        FUNCTION `??bindRemoveClusterIdFromList::?relay`,0203H
        PUBLIC `??bindRemoveDev::?relay`
        FUNCTION `??bindRemoveDev::?relay`,0203H
        PUBLIC `??bindRemoveEntry::?relay`
        FUNCTION `??bindRemoveEntry::?relay`,0203H
        PUBLIC `??bindRemoveSrcDev::?relay`
        FUNCTION `??bindRemoveSrcDev::?relay`,0203H
        PUBLIC `??bindUpdateAddr::?relay`
        FUNCTION `??bindUpdateAddr::?relay`,0203H
        PUBLIC `??bindingAddrMgsHelperConvert::?relay`
        FUNCTION `??bindingAddrMgsHelperConvert::?relay`,0203H
        PUBLIC `??bindingAddrMgsHelperConvertShort::?relay`
        FUNCTION `??bindingAddrMgsHelperConvertShort::?relay`,0203H
        PUBLIC `??bindingAddrMgsHelperFind::?relay`
        FUNCTION `??bindingAddrMgsHelperFind::?relay`,0203H
        FUNCTION BindCopyBackupToNewNV,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC BindInitNV
        FUNCTION BindInitNV,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC BindRestoreFromNV
        FUNCTION BindRestoreFromNV,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC BindSetDefaultNV
        FUNCTION BindSetDefaultNV,0a1603H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION BindUpgradeTableInNV,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC BindWriteNV
        FUNCTION BindWriteNV,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC GetBindingTableEntry
        FUNCTION GetBindingTableEntry,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC InitBindingTable
        FUNCTION InitBindingTable,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bindAddClusterIdToList
        FUNCTION bindAddClusterIdToList,0203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindAddEntry
        FUNCTION bindAddEntry,0a1603H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC bindAddrIndexGet
        FUNCTION bindAddrIndexGet,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindAddrMgrLocalLoad
        FUNCTION bindAddrMgrLocalLoad,0a1203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC bindAddressClear
        FUNCTION bindAddressClear,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindCapacity
        FUNCTION bindCapacity,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindFind
        FUNCTION bindFind,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindFindEmpty
        FUNCTION bindFindEmpty,0203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindFindExisting
        FUNCTION bindFindExisting,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindIsClusterIDinList
        FUNCTION bindIsClusterIDinList,0203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindNumBoundTo
        FUNCTION bindNumBoundTo,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindNumOfEntries
        FUNCTION bindNumOfEntries,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindNumReflections
        FUNCTION bindNumReflections,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bindRemoveClusterIdFromList
        FUNCTION bindRemoveClusterIdFromList,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindRemoveDev
        FUNCTION bindRemoveDev,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bindRemoveEntry
        FUNCTION bindRemoveEntry,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindRemoveSrcDev
        FUNCTION bindRemoveSrcDev,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bindUpdateAddr
        FUNCTION bindUpdateAddr,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC bindingAddrMgsHelperConvert
        FUNCTION bindingAddrMgsHelperConvert,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bindingAddrMgsHelperConvertShort
        FUNCTION bindingAddrMgsHelperConvertShort,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindingAddrMgsHelperFind
        FUNCTION bindingAddrMgsHelperFind,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC pBindInitNV
        PUBLIC pBindRestoreFromNV
        PUBLIC pBindSetDefaultNV
        PUBLIC pBindWriteNV
        PUBLIC pbindAddEntry
        PUBLIC pbindNumOfEntries
        PUBLIC pbindRemoveDev
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
`??AddrMgrEntryGet::?relay` SYMBOL "?relay", AddrMgrEntryGet
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
`??AddrMgrEntryLookupNwk::?relay` SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
`??AddrMgrEntryRelease::?relay` SYMBOL "?relay", AddrMgrEntryRelease
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
`??AddrMgrEntryUpdate::?relay` SYMBOL "?relay", AddrMgrEntryUpdate
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
NLME_GetCoordExtAddr SYMBOL "NLME_GetCoordExtAddr"
`??NLME_GetCoordExtAddr::?relay` SYMBOL "?relay", NLME_GetCoordExtAddr
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
`??NLME_GetCoordShortAddr::?relay` SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
bdb_RepMarkHasBindingInEndpointClusterArray SYMBOL "bdb_RepMarkHasBindingInEndpointClusterArray"
`??bdb_RepMarkHasBindingInEndpointClusterArray::` SYMBOL "?relay", bdb_RepMarkHasBindingInEndpointClusterArray
bdb_RepStartOrContinueReporting SYMBOL "bdb_RepStartOrContinueReporting"
`??bdb_RepStartOrContinueReporting::?relay` SYMBOL "?relay", bdb_RepStartOrContinueReporting
bdb_RepUpdateMarkBindings SYMBOL "bdb_RepUpdateMarkBindings"
`??bdb_RepUpdateMarkBindings::?relay` SYMBOL "?relay", bdb_RepUpdateMarkBindings
nwkCreateDuplicateNV SYMBOL "nwkCreateDuplicateNV"
`??nwkCreateDuplicateNV::?relay` SYMBOL "?relay", nwkCreateDuplicateNV
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_delete      SYMBOL "osal_nv_delete"
`??osal_nv_delete::?relay` SYMBOL "?relay", osal_nv_delete
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
BindInitNV          SYMBOL "BindInitNV"
`??BindInitNV::?relay` SYMBOL "?relay", BindInitNV
BindRestoreFromNV   SYMBOL "BindRestoreFromNV"
`??BindRestoreFromNV::?relay` SYMBOL "?relay", BindRestoreFromNV
BindSetDefaultNV    SYMBOL "BindSetDefaultNV"
`??BindSetDefaultNV::?relay` SYMBOL "?relay", BindSetDefaultNV
BindWriteNV         SYMBOL "BindWriteNV"
`??BindWriteNV::?relay` SYMBOL "?relay", BindWriteNV
GetBindingTableEntry SYMBOL "GetBindingTableEntry"
`??GetBindingTableEntry::?relay` SYMBOL "?relay", GetBindingTableEntry
InitBindingTable    SYMBOL "InitBindingTable"
`??InitBindingTable::?relay` SYMBOL "?relay", InitBindingTable
bindAddClusterIdToList SYMBOL "bindAddClusterIdToList"
`??bindAddClusterIdToList::?relay` SYMBOL "?relay", bindAddClusterIdToList
bindAddEntry        SYMBOL "bindAddEntry"
`??bindAddEntry::?relay` SYMBOL "?relay", bindAddEntry
bindAddrIndexGet    SYMBOL "bindAddrIndexGet"
`??bindAddrIndexGet::?relay` SYMBOL "?relay", bindAddrIndexGet
bindAddrMgrLocalLoad SYMBOL "bindAddrMgrLocalLoad"
`??bindAddrMgrLocalLoad::?relay` SYMBOL "?relay", bindAddrMgrLocalLoad
bindAddressClear    SYMBOL "bindAddressClear"
`??bindAddressClear::?relay` SYMBOL "?relay", bindAddressClear
bindCapacity        SYMBOL "bindCapacity"
`??bindCapacity::?relay` SYMBOL "?relay", bindCapacity
bindFind            SYMBOL "bindFind"
`??bindFind::?relay` SYMBOL "?relay", bindFind
bindFindEmpty       SYMBOL "bindFindEmpty"
`??bindFindEmpty::?relay` SYMBOL "?relay", bindFindEmpty
bindFindExisting    SYMBOL "bindFindExisting"
`??bindFindExisting::?relay` SYMBOL "?relay", bindFindExisting
bindIsClusterIDinList SYMBOL "bindIsClusterIDinList"
`??bindIsClusterIDinList::?relay` SYMBOL "?relay", bindIsClusterIDinList
bindNumBoundTo      SYMBOL "bindNumBoundTo"
`??bindNumBoundTo::?relay` SYMBOL "?relay", bindNumBoundTo
bindNumOfEntries    SYMBOL "bindNumOfEntries"
`??bindNumOfEntries::?relay` SYMBOL "?relay", bindNumOfEntries
bindNumReflections  SYMBOL "bindNumReflections"
`??bindNumReflections::?relay` SYMBOL "?relay", bindNumReflections
bindRemoveClusterIdFromList SYMBOL "bindRemoveClusterIdFromList"
`??bindRemoveClusterIdFromList::?relay` SYMBOL "?relay", bindRemoveClusterIdFromList
bindRemoveDev       SYMBOL "bindRemoveDev"
`??bindRemoveDev::?relay` SYMBOL "?relay", bindRemoveDev
bindRemoveEntry     SYMBOL "bindRemoveEntry"
`??bindRemoveEntry::?relay` SYMBOL "?relay", bindRemoveEntry
bindRemoveSrcDev    SYMBOL "bindRemoveSrcDev"
`??bindRemoveSrcDev::?relay` SYMBOL "?relay", bindRemoveSrcDev
bindUpdateAddr      SYMBOL "bindUpdateAddr"
`??bindUpdateAddr::?relay` SYMBOL "?relay", bindUpdateAddr
bindingAddrMgsHelperConvert SYMBOL "bindingAddrMgsHelperConvert"
`??bindingAddrMgsHelperConvert::?relay` SYMBOL "?relay", bindingAddrMgsHelperConvert
bindingAddrMgsHelperConvertShort SYMBOL "bindingAddrMgsHelperConvertShort"
`??bindingAddrMgsHelperConvertShort::?relay` SYMBOL "?relay", bindingAddrMgsHelperConvertShort
bindingAddrMgsHelperFind SYMBOL "bindingAddrMgsHelperFind"
`??bindingAddrMgsHelperFind::?relay` SYMBOL "?relay", bindingAddrMgsHelperFind

        EXTERN `??AddrMgrEntryGet::?relay`
        FUNCTION `??AddrMgrEntryGet::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryLookupNwk::?relay`
        FUNCTION `??AddrMgrEntryLookupNwk::?relay`,00H
        EXTERN `??AddrMgrEntryRelease::?relay`
        FUNCTION `??AddrMgrEntryRelease::?relay`,00H
        EXTERN `??AddrMgrEntryUpdate::?relay`
        FUNCTION `??AddrMgrEntryUpdate::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??NLME_GetCoordExtAddr::?relay`
        FUNCTION `??NLME_GetCoordExtAddr::?relay`,00H
        EXTERN `??NLME_GetCoordShortAddr::?relay`
        FUNCTION `??NLME_GetCoordShortAddr::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??bdb_RepMarkHasBindingInEndpointClusterArray::`
        FUNCTION `??bdb_RepMarkHasBindingInEndpointClusterArray::`,00H
        EXTERN `??bdb_RepStartOrContinueReporting::?relay`
        FUNCTION `??bdb_RepStartOrContinueReporting::?relay`,00H
        EXTERN `??bdb_RepUpdateMarkBindings::?relay`
        FUNCTION `??bdb_RepUpdateMarkBindings::?relay`,00H
        EXTERN `??nwkCreateDuplicateNV::?relay`
        FUNCTION `??nwkCreateDuplicateNV::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_delete::?relay`
        FUNCTION `??osal_nv_delete::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN BindingTable
        EXTERN NLME_GetCoordExtAddr
        FUNCTION NLME_GetCoordExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN bdb_RepMarkHasBindingInEndpointClusterArray
        FUNCTION bdb_RepMarkHasBindingInEndpointClusterArray,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepStartOrContinueReporting
        FUNCTION bdb_RepStartOrContinueReporting,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepUpdateMarkBindings
        FUNCTION bdb_RepUpdateMarkBindings,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gBIND_REC_SIZE
        EXTERN gMAX_BINDING_CLUSTER_IDS
        EXTERN gNWK_MAX_BINDING_ENTRIES
        EXTERN nwkCreateDuplicateNV
        FUNCTION nwkCreateDuplicateNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_delete
        FUNCTION osal_nv_delete,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pfnBindNotificationCB
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack 3.0.2\Components\stack\nwk\BindingTable.c
//    1 /**************************************************************************************************
//    2   Filename:       BindingTable.c
//    3   Revised:        $Date: 2014-10-08 08:37:03 -0700 (Wed, 08 Oct 2014) $
//    4   Revision:       $Revision: 40512 $
//    5 
//    6   Description:    Device binding table functions.
//    7 
//    8 
//    9   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "OSAL_Nv.h"
//   46 #include "nwk_globals.h"
//   47 #include "AddrMgr.h"
//   48 #include "BindingTable.h"
//   49 #include "nwk_util.h"
//   50 #include "bdb.h"
//   51 #include "bdb_interface.h"
//   52 #if BDB_REPORTING  
//   53 #include "bdb_Reporting.h"
//   54 #endif
//   55 
//   56 /*********************************************************************
//   57  * MACROS
//   58  */
//   59 
//   60 /*********************************************************************
//   61  * CONSTANTS
//   62  */
//   63 #define NV_BIND_EMPTY   0xFF
//   64 #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
//   65 #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
//   66 
//   67 /*********************************************************************
//   68  * TYPEDEFS
//   69  */
//   70 typedef struct
//   71 {
//   72   uint8        srcEP;
//   73   uint16       dstIndex;
//   74   uint8        dstEP;
//   75   uint8        dstAddrMode;
//   76   uint8        clusterIDs;
//   77   uint16*      clusterIDList;
//   78 } bindFields_t;
//   79 
//   80 /*********************************************************************
//   81  * GLOBAL VARIABLES
//   82  */
//   83 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
//   84 extern bdbGCB_BindNotification_t        pfnBindNotificationCB;
//   85 #endif
//   86 
//   87 /*********************************************************************
//   88  * LOCAL FUNCTIONS
//   89  */
//   90 void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
//   91                     AddrMgrEntry_t *entryNew );
//   92 BindingEntry_t *bindFindEmpty( void );
//   93 uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
//   94 uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
//   95 void bindAddrMgrLocalLoad( void );
//   96 
//   97 #if !defined ( BINDINGTABLE_NV_SINGLES )
//   98   #if !defined ( DONT_UPGRADE_BIND )
//   99     static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen );
//  100     static uint8 BindUpgradeTableInNV( void );
//  101   #endif
//  102 #endif // !BINDINGTABLE_NV_SINGLES
//  103 
//  104 
//  105 /*********************************************************************
//  106  * LOCAL VARIABLES
//  107  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  108 static uint8 bindAddrMgrLocalLoaded = FALSE;
bindAddrMgrLocalLoaded:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  109 
//  110 /*********************************************************************
//  111  * Function Pointers
//  112  */
//  113 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  114 BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
pbindAddEntry:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  115                                   zAddrType_t *dstAddr, byte dstEpInt,
//  116                                   byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  117 uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
pbindNumOfEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  118 void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
pbindRemoveDev:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  119 byte (*pBindInitNV)( void ) = (void*)NULL;
pBindInitNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  120 void (*pBindSetDefaultNV)( void ) = (void*)NULL;
pBindSetDefaultNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  121 uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
pBindRestoreFromNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  122 void (*pBindWriteNV)( void ) = (void*)NULL;
pBindWriteNV:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  123 
//  124 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  125 /*********************************************************************
//  126  * @fn      BindAddrMgrCB()
//  127  *
//  128  * @brief   Address Manager Callback function
//  129  *
//  130  * @param   update -
//  131  * @param   entry -
//  132  *
//  133  * @return  pointer to
//  134  */
//  135 void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
//  136                     AddrMgrEntry_t *entryOld )
//  137 {
//  138   // Check for either deleted items or changed Extended (Duplicate) addresses
//  139 }
//  140 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  141 
//  142 /*********************************************************************
//  143  * @fn      InitBindingTable()
//  144  *
//  145  * @brief
//  146  *
//  147  *   This function is used to initialise the binding table
//  148  *
//  149  * @param   none
//  150  *
//  151  * @return  none
//  152  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  153 void InitBindingTable( void )
InitBindingTable:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function InitBindingTable
        CODE
//  154 {
        FUNCALL InitBindingTable, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  155   osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
        ; Setup parameters for call to function osal_memset
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       ?V0,A
        MOV       A,R4
        MOV       B,?V0
        MUL       AB
        MOV       R4,A
        MOV       R0,B
        MOV       B,?V0
        MOV       A,R5
        MUL       AB
        ADD       A,R0
        MOV       R5,A
        MOV       R1,#-0x1
        MOV       R2,#BindingTable & 0xff
        MOV       R3,#(BindingTable >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  156 
//  157   pbindAddEntry = bindAddEntry;
        MOV       DPTR,#pbindAddEntry
        MOV       A,#`??bindAddEntry::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??bindAddEntry::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
//  158   pbindNumOfEntries = bindNumOfEntries;
        MOV       DPTR,#pbindNumOfEntries
        MOV       A,#`??bindNumOfEntries::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??bindNumOfEntries::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
//  159   pbindRemoveDev = bindRemoveDev;
        MOV       DPTR,#pbindRemoveDev
        MOV       A,#`??bindRemoveDev::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??bindRemoveDev::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
//  160   pBindInitNV = BindInitNV;
        MOV       DPTR,#pBindInitNV
        MOV       A,#`??BindInitNV::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??BindInitNV::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
//  161   pBindSetDefaultNV = BindSetDefaultNV;
        MOV       DPTR,#pBindSetDefaultNV
        MOV       A,#`??BindSetDefaultNV::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??BindSetDefaultNV::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
//  162   pBindRestoreFromNV = BindRestoreFromNV;
        MOV       DPTR,#pBindRestoreFromNV
        MOV       A,#`??BindRestoreFromNV::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??BindRestoreFromNV::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
//  163   pBindWriteNV = BindWriteNV;
        MOV       DPTR,#pBindWriteNV
        MOV       A,#`??BindWriteNV::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??BindWriteNV::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
//  164 
//  165   bindAddrMgrLocalLoaded = FALSE;
        MOV       DPTR,#bindAddrMgrLocalLoaded
        CLR       A
        MOVX      @DPTR,A
//  166 
//  167 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  168   // Register with the address manager
//  169   AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
//  170 #endif
//  171 }
        SJMP      ??Subroutine35_0
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 23)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  172 
//  173 /*********************************************************************
//  174  * @fn      bindFindEmpty()
//  175  *
//  176  * @brief   This function returns a pointer to an empty binding slot
//  177  *
//  178  * @param   none
//  179  *
//  180  * @return  pointer to binding table entry, NULL if not added
//  181  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  182 BindingEntry_t *bindFindEmpty( void )
bindFindEmpty:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function bindFindEmpty
        CODE
//  183 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  184   bindTableIndex_t x;
//  185 
//  186   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV       R2,#0x0
        SJMP      ??bindFindEmpty_0
??bindFindEmpty_1:
        INC       R2
??bindFindEmpty_0:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        JNC       ??bindFindEmpty_2
//  187   {
//  188     // It's empty if the index is "Not Found"
//  189     if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
        MOV       A,R2
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_48:
        JNZ       ??bindFindEmpty_1
//  190     {
//  191       return ( &BindingTable[x] );
        MOV       R2,DPL
        MOV       R3,DPH
        SJMP      ??bindFindEmpty_3
//  192     }
//  193   }
//  194 
//  195   return ( (BindingEntry_t *)NULL );
??bindFindEmpty_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bindFindEmpty_3:
        LJMP      ??Subroutine43_0 & 0xFFFF
//  196 }
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function bindFindEmpty
          CFI Conditional ??CrossCallReturnLabel_48
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function bindNumOfEntries
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond5) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond5) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond5) CFA_SP SP+-7
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOV       B,#0xe
        MUL       AB
        MOV       R0,A
        MOV       R1,B
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function bindCapacity
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function bindFindEmpty
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond8) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond8) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond8) CFA_SP SP+-7
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function bindNumOfEntries
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond9) CFA_SP SP+-7
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_51:
        CPL       A
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
//  197 
//  198 /*********************************************************************
//  199  * @fn      bindNumOfEntries()
//  200  *
//  201  * @brief   This function returns the number of binding table entries.
//  202  *          The return for this is the number of clusters in the
//  203  *          table NOT the number of entries.
//  204  *
//  205  * @param   none
//  206  *
//  207  * @return  number of entries
//  208  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  209 uint16 bindNumOfEntries( void )
bindNumOfEntries:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function bindNumOfEntries
        CODE
//  210 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  211   bindTableIndex_t x;
//  212   uint16 found;
//  213 
//  214   for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R4,#0x0
        SJMP      ??bindNumOfEntries_0
//  215   {
//  216     // It's empty if the index is "Not Found"
//  217     if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
??bindNumOfEntries_1:
        MOV       A,R4
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_49:
        JZ        ??bindNumOfEntries_2
//  218     {
//  219       found += BindingTable[x].numClusterIds;
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R2
        ADD       A,R0
        MOV       R2,A
        CLR       A
        ADDC      A,R3
        MOV       R3,A
//  220     }
//  221   }
??bindNumOfEntries_2:
        INC       R4
??bindNumOfEntries_0:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R4
        CLR       C
        SUBB      A,R0
        JC        ??bindNumOfEntries_1
//  222 
//  223   return ( found );
        LJMP      ??Subroutine43_0 & 0xFFFF
//  224 }
          CFI EndBlock cfiBlock11
//  225 
//  226 /*********************************************************************
//  227  * @fn      bindCapacity()
//  228  *
//  229  * @brief   This function returns the number of binding entries
//  230  *          possible and used.
//  231  *
//  232  * @param   maxEntries - pointer to a place to put the max entries
//  233  * @param   usedEntries - pointer to a place to put the number
//  234  *               of used entries
//  235  *
//  236  * @return  none
//  237  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  238 void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
bindCapacity:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function bindCapacity
        CODE
//  239 {
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  240   bindTableIndex_t x;
//  241   bindTableIndex_t used;
//  242 
//  243   for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV       R7,#0x0
        MOV       R6,#0x0
        SJMP      ??bindCapacity_0
//  244   {
//  245     // It's empty if the index is "Not Found"
//  246     if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
??bindCapacity_1:
        MOV       A,R6
        MOV       B,#0xe
        MUL       AB
        MOV       R0,A
        MOV       ?V0,B
        MOV       R1,?V0
        LCALL     ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_47:
        JZ        ??bindCapacity_2
//  247     {
//  248       used++;
        INC       R7
//  249     }
//  250   }
??bindCapacity_2:
        INC       R6
??bindCapacity_0:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        ??bindCapacity_1
//  251 
//  252   *maxEntries = gNWK_MAX_BINDING_ENTRIES;
        CLR       A
        MOVC      A,@A+DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  253   *usedEntries = used;
        MOV       A,R7
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  254 }
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock12
//  255 
//  256 /*********************************************************************
//  257  * @fn      bindAddEntry()
//  258  *
//  259  * @brief   This function is used to Add an entry to the binding table
//  260  *
//  261  * @param       srcEpInt - source endpoint
//  262  * @param       dstAddr - destination Address
//  263  * @param       dstEpInt - destination endpoint
//  264  * @param       numClusterIds - number of cluster Ids in the list
//  265  * @param       clusterIds - pointer to the Object ID list
//  266  *
//  267  * @return  pointer to binding table entry, NULL if not added
//  268  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  269 BindingEntry_t *bindAddEntry( byte srcEpInt,
bindAddEntry:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function bindAddEntry
        CODE
//  270                               zAddrType_t *dstAddr, byte dstEpInt,
//  271                               byte numClusterIds, uint16 *clusterIds )
//  272 {
        FUNCALL bindAddEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddrMgrLocalLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddrIndexGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bdb_RepMarkHasBindingInEndpointClusterArray
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddClusterIdToList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindFindEmpty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bdb_RepMarkHasBindingInEndpointClusterArray
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bdb_RepStartOrContinueReporting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V3,R1
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V11,R4
        MOV       ?V2,R5
//  273   uint8            index;
//  274   bindTableIndex_t bindIdx;
//  275   BindingEntry_t*  entry;
//  276   bindFields_t     fields;
//  277   bdbBindNotificationData_t bindData;
//  278 #ifdef BDB_REPORTING  
//  279   uint8 bindAdded = FALSE;
        MOV       ?V1,#0x0
//  280 #endif
//  281 
//  282   //Zigbee Spec 2.2.4.3.1.1
//  283   //Cannot create an endpoint for invalid endpoint index, neither for non-Group 
//  284   //or Non-Extended IEEE Address modes
//  285   if( (dstAddr->addrMode != AddrGroup) && (dstAddr->addrMode != Addr64Bit) ||
//  286       (srcEpInt == 0) || (srcEpInt == 0xFF) )
        MOV       A,R2
        ADD       A,#0x8
        MOV       ?V6,A
        CLR       A
        ADDC      A,?V5
        MOV       ?V7,A
        MOV       DPL,?V6
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x1
        XRL       A,R0
        JZ        ??bindAddEntry_0
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??bindAddEntry_1
??bindAddEntry_0:
        MOV       A,R1
        JZ        ??bindAddEntry_1
        MOV       A,#-0x1
        XRL       A,R1
        JZ        ??bindAddEntry_1
//  287   {
//  288     return NULL;
//  289   }
//  290   //Do not accept neither binds to IEEE Addr with invalid endpoints
//  291   if(( dstAddr->addrMode == Addr64Bit ) && (dstEpInt == 0))
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??bindAddEntry_2
        MOV       A,R4
        JNZ       ??bindAddEntry_2
//  292   {
//  293     return NULL;
??bindAddEntry_1:
        MOV       R2,#0x0
        MOV       R3,#0x0
        LJMP      ??bindAddEntry_3 & 0xFFFF
//  294   }
//  295   
//  296     
//  297   osal_memcpy( &bindData.dstAddr, dstAddr, sizeof( zAddrType_t) );
??bindAddEntry_2:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       R4,#0x9
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  298   bindData.ep = dstEpInt;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V11
        MOVX      @DPTR,A
//  299     
//  300   // initialize results
//  301   entry = NULL;
        MOV       R6,#0x0
        MOV       R7,#0x0
//  302 
//  303   // make sure local addresses have been loaded
//  304   bindAddrMgrLocalLoad();
        ; Setup parameters for call to function bindAddrMgrLocalLoad
        LCALL     `??bindAddrMgrLocalLoad::?relay`; Banked call to: bindAddrMgrLocalLoad
//  305 
//  306   // setup fields
//  307   fields.dstIndex = bindAddrIndexGet( dstAddr );
        ; Setup parameters for call to function bindAddrIndexGet
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
        MOV       ?V4,R2
        MOV       ?V5,R3
//  308   fields.srcEP    = srcEpInt;
//  309 
//  310   if ( dstAddr->addrMode == AddrGroup )
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bindAddEntry_4
//  311   {
//  312     fields.dstAddrMode = DSTGROUPMODE_GROUP;
        MOV       ?V0,#0x1
//  313     fields.dstEP       = 0;
        MOV       ?V7,#0x0
        SJMP      ??bindAddEntry_5
//  314   }
//  315   else
//  316   {
//  317     fields.dstAddrMode = DSTGROUPMODE_ADDR;
??bindAddEntry_4:
        MOV       ?V0,#0x0
//  318     fields.dstEP       = dstEpInt;
        MOV       ?V7,?V11
//  319   }
//  320 
//  321   if ( fields.dstIndex != INVALID_NODE_ADDR  )
??bindAddEntry_5:
        MOV       A,#-0x2
        XRL       A,R2
        JNZ       ??bindAddEntry_6
        MOV       A,#-0x1
        XRL       A,R3
??bindAddEntry_6:
        JNZ       $+5
        LJMP      ??bindAddEntry_7 & 0xFFFF
//  322   {
//  323     for ( bindIdx = 0; bindIdx < gNWK_MAX_BINDING_ENTRIES; bindIdx++ )
        MOV       R2,#0x0
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V12,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V13,A
        SJMP      ??bindAddEntry_8
??bindAddEntry_9:
        INC       R2
??bindAddEntry_8:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??bindAddEntry_10 & 0xFFFF
//  324     {
//  325       if ( ( fields.srcEP       == BindingTable[bindIdx].srcEP        ) &&
//  326            ( fields.dstAddrMode == BindingTable[bindIdx].dstGroupMode ) &&
//  327            ( fields.dstIndex    == BindingTable[bindIdx].dstIdx       ) &&
//  328            ( fields.dstEP       == BindingTable[bindIdx].dstEP        )    )
        MOV       A,R2
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_7:
        XRL       A,?V3
        JNZ       ??bindAddEntry_9
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V0
        JNZ       ??bindAddEntry_9
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V4
        JNZ       ??bindAddEntry_11
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bindAddEntry_11:
        JNZ       ??bindAddEntry_9
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V7
        JNZ       ??bindAddEntry_9
//  329       {
//  330         entry = &BindingTable[bindIdx];
//  331 
//  332         // break from loop
//  333         break;
//  334       }
//  335     }
//  336 
//  337     if ( entry != NULL )
//  338     {
//  339       // Loop through the cluster IDs
//  340       for ( index = 0; index < numClusterIds; index++ )
        MOV       ?V0,#0x0
        SJMP      ??bindAddEntry_12
//  341       {
//  342         // Found - is the cluster already defined?
//  343         if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
//  344         {
//  345           // Nope, add this cluster
//  346           if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
//  347           {
//  348             // Indicate error if cluster list was full
//  349             entry = NULL;
//  350           }
//  351           else
//  352           {
//  353             // new bind added - notify application
//  354             bindData.clusterId = clusterIds[index];
??bindAddEntry_13:
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
//  355 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)             
//  356             if ( pfnBindNotificationCB != NULL )
??CrossCallReturnLabel_16:
        JZ        ??bindAddEntry_14
//  357             {
//  358               pfnBindNotificationCB( &bindData );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
//  359             }
//  360 #endif
//  361 #ifdef BDB_REPORTING  
//  362             bdb_RepMarkHasBindingInEndpointClusterArray(srcEpInt, clusterIds[index], BDBREPORTING_FALSE, BDBREPORTING_TRUE); 
??bindAddEntry_14:
        ; Setup parameters for call to function bdb_RepMarkHasBindingInEndpointClusterArray
        LCALL     ?Subroutine20 & 0xFFFF
//  363             bindAdded = TRUE;
//  364 #endif
//  365           }
??CrossCallReturnLabel_28:
        INC       ?V0
??bindAddEntry_12:
        MOV       A,?V0
        CLR       C
        SUBB      A,?V2
        JC        $+5
        LJMP      ??bindAddEntry_15 & 0xFFFF
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
        MOV       A,R1
        JNZ       ??CrossCallReturnLabel_28
        ; Setup parameters for call to function bindAddClusterIdToList
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bindAddClusterIdToList::?relay`; Banked call to: bindAddClusterIdToList
        MOV       A,R1
        JNZ       ??bindAddEntry_13
        MOV       R6,#0x0
        MOV       R7,#0x0
        SJMP      ??CrossCallReturnLabel_28
//  366         }
//  367       }
//  368     }
//  369     else
//  370     {
//  371       // Find an empty slot
//  372       entry = bindFindEmpty();
??bindAddEntry_10:
        ; Setup parameters for call to function bindFindEmpty
        LCALL     `??bindFindEmpty::?relay`; Banked call to: bindFindEmpty
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R6,?V8
        MOV       R7,?V9
//  373 
//  374       // Check against the maximum number allowed
//  375       if ( entry != NULL )
        MOV       A,R2
        ORL       A,R7
        JNZ       $+5
        LJMP      ??bindAddEntry_7 & 0xFFFF
//  376       {
//  377         // Add new entry
//  378         entry->srcEP         = fields.srcEP;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,?V3
        MOVX      @DPTR,A
//  379         entry->dstGroupMode  = fields.dstAddrMode;
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
//  380         entry->dstIdx        = fields.dstIndex;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOV       A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V5
        LCALL     ?Subroutine31 & 0xFFFF
//  381         entry->dstEP         = fields.dstEP;
??CrossCallReturnLabel_43:
        MOV       A,?V7
        MOVX      @DPTR,A
//  382 
//  383         if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
        MOV       DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR       A
        MOVC      A,@A+DPTR
        CLR       C
        SUBB      A,?V2
        JNC       ??bindAddEntry_16
//  384         {
//  385           numClusterIds = gMAX_BINDING_CLUSTER_IDS;
        CLR       A
        MOVC      A,@A+DPTR
        MOV       ?V2,A
//  386         }
//  387         
//  388         for(index = 0; index < numClusterIds; index++)
??bindAddEntry_16:
        MOV       ?V0,#0x0
        SJMP      ??bindAddEntry_17
//  389         {
//  390           // new bind added - notify application
//  391           bindData.clusterId = clusterIds[index];
??bindAddEntry_18:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
//  392 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
//  393           if ( pfnBindNotificationCB != NULL )
??CrossCallReturnLabel_17:
        JZ        ??bindAddEntry_19
//  394           {
//  395             pfnBindNotificationCB( &bindData );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
//  396           }
//  397 #endif
//  398 #ifdef BDB_REPORTING   
//  399             bdb_RepMarkHasBindingInEndpointClusterArray(srcEpInt, clusterIds[index], BDBREPORTING_FALSE, BDBREPORTING_TRUE); 
??bindAddEntry_19:
        ; Setup parameters for call to function bdb_RepMarkHasBindingInEndpointClusterArray
        LCALL     ?Subroutine20 & 0xFFFF
//  400             bindAdded = TRUE;
//  401 #endif
//  402         }
??CrossCallReturnLabel_29:
        INC       ?V0
??bindAddEntry_17:
        MOV       A,?V0
        CLR       C
        SUBB      A,?V2
        JC        ??bindAddEntry_18
//  403 
//  404         entry->numClusterIds = numClusterIds;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,?V2
        MOVX      @DPTR,A
//  405 
//  406         osal_memcpy( entry->clusterIdList,
//  407                      clusterIds,
//  408                      numClusterIds * sizeof(uint16) );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V12
        MOV       ?V5,?V13
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       R4,?V2
        MOV       A,R4
        ADD       A,R4
        MOV       R4,A
        CLR       A
        RLC       A
        MOV       R5,A
        MOV       A,R6
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  409       }
//  410     }
//  411   }
//  412 #ifdef BDB_REPORTING
//  413   if(bindAdded == TRUE)
??bindAddEntry_15:
        MOV       A,?V1
        MOV       C,0xE0 /* A   */.0
        JNC       ??bindAddEntry_7
//  414   {
//  415     bdb_RepStartOrContinueReporting( );
        ; Setup parameters for call to function bdb_RepStartOrContinueReporting
        LCALL     `??bdb_RepStartOrContinueReporting::?relay`; Banked call to: bdb_RepStartOrContinueReporting
//  416   }
//  417 #endif
//  418   return entry;
??bindAddEntry_7:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
??bindAddEntry_3:
        MOV       A,#0xc
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
//  419 }
          CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function bindAddEntry
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOV       R5,#0x1
        MOV       R4,#0x0
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       R1,?V3
        LCALL     `??bdb_RepMarkHasBindingInEndpointClusterArray::`; Banked call to: bdb_RepMarkHasBindingInEndpointClusterArray
        MOV       ?V1,#0x1
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function bindAddEntry
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       DPTR,#pfnBindNotificationCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function bindAddEntry
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV       R0,?V0
        MOV       A,R0
        ADD       A,R0
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,?V12
        ADD       A,R0
        MOV       ?V4,A
        MOV       A,?V13
        ADDC      A,R1
        MOV       ?V5,A
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV       DPL,?V4
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  420 
//  421 /*********************************************************************
//  422  * @fn      bindRemoveEntry
//  423  *
//  424  * @brief   Removes a binding table entry.
//  425  *
//  426  * @param   pBind - pointer to binding table entry to delete
//  427  *
//  428  * @return  TRUE if Removed, FALSE if not
//  429  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  430 byte bindRemoveEntry( BindingEntry_t *pBind )
bindRemoveEntry:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function bindRemoveEntry
        CODE
//  431 {
        FUNCALL bindRemoveEntry, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveEntry, bdb_RepUpdateMarkBindings
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  432   osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
        ; Setup parameters for call to function osal_memset
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV       R1,#-0x1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  433 #ifdef BDB_REPORTING
//  434   bdb_RepUpdateMarkBindings();
        ; Setup parameters for call to function bdb_RepUpdateMarkBindings
        LCALL     `??bdb_RepUpdateMarkBindings::?relay`; Banked call to: bdb_RepUpdateMarkBindings
//  435 #endif
//  436   return ( TRUE );
        MOV       R1,#0x1
        LJMP      ??Subroutine43_0 & 0xFFFF
//  437 }
          CFI EndBlock cfiBlock23

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function InitBindingTable
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function bindRemoveEntry
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond25) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond25) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond25) CFA_SP SP+-7
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function BindWriteNV
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOV       DPTR,#gBIND_REC_SIZE
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R4,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R5,A
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27
//  438 
//  439 /*********************************************************************
//  440  * @fn      bindIsClusterIDinList()
//  441  *
//  442  * @brief   Is the clusterID in the clusterID list?
//  443  *
//  444  * @param   enter - binding table entry
//  445  * @param   clusterId  - Cluster ID to look for
//  446  *
//  447  * @return  TRUE if found, FALSE if not found
//  448  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  449 byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
bindIsClusterIDinList:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function bindIsClusterIDinList
        CODE
//  450 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  451   uint8 x;
//  452 
//  453   if ( entry != NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??bindIsClusterIDinList_0
//  454   {
//  455     for ( x = 0; x < entry->numClusterIds; x++ )
        MOV       R6,#0x0
        SJMP      ??bindIsClusterIDinList_1
??bindIsClusterIDinList_2:
        INC       R6
??bindIsClusterIDinList_1:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JNC       ??bindIsClusterIDinList_0
//  456     {
//  457       if ( entry->clusterIdList[x] == clusterId )
        MOV       A,R6
        ADD       A,0xE0 /* A   */
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,R2
        ADD       A,R0
        MOV       DPL,A
        MOV       A,R3
        ADDC      A,R1
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??bindIsClusterIDinList_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R5
??bindIsClusterIDinList_3:
        JNZ       ??bindIsClusterIDinList_2
//  458       {
//  459         return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??bindIsClusterIDinList_4
//  460       }
//  461     }
//  462   }
//  463 
//  464   return ( FALSE );
??bindIsClusterIDinList_0:
        MOV       R1,#0x0
??bindIsClusterIDinList_4:
        LJMP      ?Subroutine2 & 0xFFFF
//  465 }
          CFI EndBlock cfiBlock28
//  466 
//  467 /*********************************************************************
//  468  * @fn      bindRemoveClusterIdFromList()
//  469  *
//  470  * @brief   Removes a ClusterID from a list of ClusterIDs.
//  471  *
//  472  * @param   enter - binding table entry
//  473  * @param   clusterId  - Cluster ID to look for
//  474  *
//  475  * @return  TRUE if there are at least 1 clusterID left, FALSE if none
//  476  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  477 byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
bindRemoveClusterIdFromList:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function bindRemoveClusterIdFromList
        CODE
//  478 {
        FUNCALL bindRemoveClusterIdFromList, bdb_RepUpdateMarkBindings
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//  479   byte x;
//  480   uint16 *listPtr;
//  481   byte numIds;
//  482 
//  483 #ifdef BDB_REPORTING
//  484   uint8 numRemoved = 0;
        MOV       ?V2,#0x0
//  485 #endif
//  486   if ( entry )
        MOV       A,R2
        ORL       A,R3
        JZ        ??bindRemoveClusterIdFromList_0
//  487   {
//  488     if ( entry->numClusterIds > 0 )
        MOV       A,R2
        ADD       A,#0x5
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV       ?V0,A
        JZ        ??bindRemoveClusterIdFromList_0
//  489     {
//  490       listPtr = entry->clusterIdList;
        MOV       A,R2
        ADD       A,#0x6
        INC       R0
        CLR       A
        ADDC      A,R3
        MOV       R1,A
//  491       numIds = entry->numClusterIds;
        MOV       ?V4,?V0
//  492 
//  493       // Copy the new list over
//  494       for ( x = 0; x < numIds; x++ )
        MOV       ?V3,#0x0
        SJMP      ??bindRemoveClusterIdFromList_1
//  495       {
//  496         if ( entry->clusterIdList[x] != clusterId )
//  497         {
//  498           *listPtr++ = entry->clusterIdList[x];
??bindRemoveClusterIdFromList_2:
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
        MOV       A,R0
        ADD       A,#0x2
        MOV       R0,A
        JNC       ??bindRemoveClusterIdFromList_3
        INC       R1
//  499         }
??bindRemoveClusterIdFromList_3:
        INC       ?V3
??bindRemoveClusterIdFromList_1:
        MOV       A,?V3
        CLR       C
        SUBB      A,?V4
        JNC       ??bindRemoveClusterIdFromList_4
        MOV       A,?V3
        ADD       A,0xE0 /* A   */
        MOV       ?V0,A
        CLR       A
        RLC       A
        MOV       ?V1,A
        MOV       A,R2
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,R3
        ADDC      A,?V1
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,R4
        XRL       A,?V0
        JNZ       ??bindRemoveClusterIdFromList_5
        MOV       A,R5
        XRL       A,?V1
??bindRemoveClusterIdFromList_5:
        JNZ       ??bindRemoveClusterIdFromList_2
//  500         else
//  501         {
//  502           entry->numClusterIds--;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        DEC       A
        MOVX      @DPTR,A
//  503           
//  504 #ifdef BDB_REPORTING
//  505            numRemoved++;
        INC       ?V2
//  506 #endif          
//  507           if ( entry->numClusterIds == 0 )
        JNZ       ??bindRemoveClusterIdFromList_3
//  508           {
//  509             break;
//  510           }
//  511         }
//  512       }
//  513       
//  514     }
//  515   }
//  516 
//  517 #ifdef BDB_REPORTING
//  518   if(numRemoved>0)
??bindRemoveClusterIdFromList_4:
        MOV       A,?V2
        JZ        ??bindRemoveClusterIdFromList_6
//  519     bdb_RepUpdateMarkBindings();
        ; Setup parameters for call to function bdb_RepUpdateMarkBindings
        LCALL     `??bdb_RepUpdateMarkBindings::?relay`; Banked call to: bdb_RepUpdateMarkBindings
??bindRemoveClusterIdFromList_6:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        JZ        ??bindRemoveClusterIdFromList_0
//  520 #endif 
//  521   
//  522   if ( entry && (entry->numClusterIds > 0) )
//  523   {
//  524     return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??bindRemoveClusterIdFromList_7
//  525   }
//  526   else
//  527   {
//  528     return ( FALSE );
??bindRemoveClusterIdFromList_0:
        MOV       R1,#0x0
//  529   }
??bindRemoveClusterIdFromList_7:
        SJMP      ??Subroutine38_0
//  530 }
          CFI EndBlock cfiBlock29

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x2
          CFI EndBlock cfiBlock30
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 32)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock31
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock32
//  531 
//  532 /*********************************************************************
//  533  * @fn      bindAddClusterIdToList()
//  534  *
//  535  * @brief   Adds a ClusterID to a list of ClusterIDs.
//  536  *
//  537  * @param   enter - binding table entry
//  538  * @param   clusterId  - Cluster ID to Add
//  539  *
//  540  * @return  TRUE if Added, FALSE if not
//  541  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  542 byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
bindAddClusterIdToList:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function bindAddClusterIdToList
        CODE
//  543 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  544   if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
        MOV       A,R2
        ORL       A,R3
        JZ        ??bindAddClusterIdToList_0
        MOV       A,R2
        ADD       A,#0x5
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R7,A
        MOV       A,R6
        CLR       C
        SUBB      A,R7
        JNC       ??bindAddClusterIdToList_0
//  545   {
//  546     // Add the new one
//  547     entry->clusterIdList[entry->numClusterIds] = clusterId;
        MOV       A,R6
        ADD       A,R6
        MOV       R6,A
        CLR       A
        RLC       A
        MOV       R7,A
        MOV       A,R2
        ADD       A,R6
        MOV       DPL,A
        MOV       A,R3
        ADDC      A,R7
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
//  548     entry->numClusterIds++;
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  549     return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??bindAddClusterIdToList_1
//  550   }
//  551   return ( FALSE );
??bindAddClusterIdToList_0:
        MOV       R1,#0x0
??bindAddClusterIdToList_1:
          CFI EndBlock cfiBlock33
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  552 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock34
//  553 
//  554 /*********************************************************************
//  555  * @fn      bindFindExisting
//  556  *
//  557  * @brief   Finds an existing src/epint to dst/epint bind record
//  558  *
//  559  * @param   srcEpInt - Source Endpoint/Interface
//  560  * @param   dstAddr - Destination address
//  561  * @param   dstEpInt - Destination Endpoint/Interface
//  562  *
//  563  * @return  pointer to existing entry or NULL
//  564  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  565 BindingEntry_t *bindFindExisting( byte srcEpInt,
bindFindExisting:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function bindFindExisting
        CODE
//  566                                   zAddrType_t *dstAddr, byte dstEpInt )
//  567 {
        FUNCALL bindFindExisting, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV       A,#-0xd
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       ?V1,R4
//  568   uint16 dstIdx;
//  569   bindTableIndex_t x;
//  570 
//  571   // Find the records in the assoc list
//  572   if ( dstAddr->addrMode == AddrGroup )
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_37:
        JNZ       ??bindFindExisting_0
//  573   {
//  574     dstIdx = dstAddr->addr.shortAddr;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        SJMP      ??bindFindExisting_1
//  575   }
//  576   else
//  577   {
//  578     dstIdx = bindingAddrMgsHelperFind( dstAddr );
??bindFindExisting_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
//  579   }
//  580 
//  581   if ( dstIdx == INVALID_NODE_ADDR )
??bindFindExisting_1:
        MOV       A,#-0x2
        XRL       A,R4
        JNZ       ??bindFindExisting_2
        MOV       A,#-0x1
        XRL       A,R5
??bindFindExisting_2:
        JZ        ??bindFindExisting_3
//  582   {
//  583     return ( (BindingEntry_t *)NULL );
//  584   }
//  585 
//  586   // Start at the beginning
//  587   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV       ?V2,#0x0
        SJMP      ??bindFindExisting_4
//  588   {
//  589     if ( (BindingTable[x].srcEP == srcEpInt) )
??bindFindExisting_5:
        MOV       A,#0x1
        XRL       A,?V3
        JNZ       ??bindFindExisting_6
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??bindFindExisting_7
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R5
??bindFindExisting_7:
        JZ        ??bindFindExisting_8
??bindFindExisting_6:
        INC       ?V2
??bindFindExisting_4:
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_13:
        JNC       ??bindFindExisting_3
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_8:
        MOVX      A,@DPTR
        XRL       A,?V0
        JNZ       ??bindFindExisting_6
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,R2
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bindFindExisting_5
        MOV       A,?V3
        JNZ       ??bindFindExisting_6
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??bindFindExisting_9
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R5
??bindFindExisting_9:
        JNZ       ??bindFindExisting_6
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V1
        JNZ       ??bindFindExisting_6
//  590     {
//  591       if ( ((dstAddr->addrMode == AddrGroup)
//  592               && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
//  593               && (dstIdx == BindingTable[x].dstIdx))
//  594          || ((dstAddr->addrMode != AddrGroup)
//  595              && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
//  596              && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
//  597       {
//  598         return ( &BindingTable[x] );
        SJMP      ??bindFindExisting_8
//  599       }
//  600     }
//  601   }
//  602 
//  603   return ( (BindingEntry_t *)NULL );
??bindFindExisting_3:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bindFindExisting_8:
        MOV       R7,#0x5
        LJMP      ?BANKED_LEAVE_XDATA
//  604 }
          CFI EndBlock cfiBlock35
//  605 
//  606 /*********************************************************************
//  607  * @fn       bindRemoveDev()
//  608  *
//  609  * @brief
//  610  *
//  611  *   Remove all bind(s) entries associated to a device address (destination).
//  612  *   Updates binding table.
//  613  *
//  614  * @param   Addr - address of device to be removed from Binding Table
//  615  *
//  616  * @return  none
//  617  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  618 void bindRemoveDev( zAddrType_t *Addr )
bindRemoveDev:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function bindRemoveDev
        CODE
//  619 {
        FUNCALL bindRemoveDev, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveDev, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveDev, bindAddressClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  620   uint16 idx;
//  621   bindTableIndex_t x;
//  622 
//  623   if ( Addr->addrMode == AddrGroup )
        MOV       A,R2
        ADD       A,#0x8
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       ?V0,R0
        MOV       ?V1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bindRemoveDev_0
//  624   {
//  625     idx = Addr->addr.shortAddr;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        SJMP      ??bindRemoveDev_1
//  626   }
//  627   else
//  628   {
//  629     idx = bindingAddrMgsHelperFind( Addr );
??bindRemoveDev_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
//  630   }
//  631 
//  632   if ( idx == INVALID_NODE_ADDR )
??bindRemoveDev_1:
        MOV       A,#-0x2
        XRL       A,R6
        JNZ       ??bindRemoveDev_2
        MOV       A,#-0x1
        XRL       A,R7
??bindRemoveDev_2:
        JZ        ??bindRemoveDev_3
//  633   {
//  634     return;
//  635   }
//  636 
//  637   // Removes all the entries that match the destination Address/Index
//  638   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV       ?V2,#0x0
        SJMP      ??bindRemoveDev_4
//  639   {
//  640     if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
//  641                                          && (BindingTable[x].dstIdx == idx) ) ||
//  642          ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
//  643                                          && (BindingTable[x].dstIdx == idx) ) )
??bindRemoveDev_5:
        MOV       A,R4
        JNZ       ??bindRemoveDev_6
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bindRemoveDev_7
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bindRemoveDev_7:
        JNZ       ??bindRemoveDev_6
//  644     {
//  645       bindRemoveEntry( &BindingTable[x] );
??bindRemoveDev_8:
        ; Setup parameters for call to function bindRemoveEntry
        LCALL     `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
//  646     }
??bindRemoveDev_6:
        INC       ?V2
??bindRemoveDev_4:
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_14:
        JNC       ??bindRemoveDev_9
        LCALL     ?Subroutine10 & 0xFFFF
//  647   }
??CrossCallReturnLabel_9:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       A,R2
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bindRemoveDev_5
        MOV       A,#0x1
        XRL       A,R4
        JNZ       ??bindRemoveDev_6
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bindRemoveDev_10
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bindRemoveDev_10:
        JZ        ??bindRemoveDev_8
        SJMP      ??bindRemoveDev_6
//  648 
//  649   // If this is the last Bind Entry for that idx then clear BINDING
//  650   // user from Address Manager
//  651   bindAddressClear( idx );
??bindRemoveDev_9:
        ; Setup parameters for call to function bindAddressClear
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bindAddressClear::?relay`; Banked call to: bindAddressClear
//  652 }
??bindRemoveDev_3:
          CFI EndBlock cfiBlock36
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function bindFindExisting
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function bindRemoveDev
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function bindNumReflections
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,?V2
        CLR       C
        SUBB      A,R0
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function bindFindExisting
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function bindRemoveDev
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        MOV       A,?V2
        MOV       B,#0xe
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#BindingTable & 0xff
        ADD       A,R0
        MOV       R2,A
        MOV       A,#(BindingTable >> 8) & 0xff
        ADDC      A,R1
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44
//  653 
//  654 /*********************************************************************
//  655  * @fn       bindRemoveSrcDev()
//  656  *
//  657  * @brief
//  658  *
//  659  *   Remove binds(s) associated to device address (source).
//  660  *   Updates binding table.
//  661  *
//  662  * @param   ep - endpoint to remove, 0xFF is all endpoints
//  663  *
//  664  * @return  none
//  665  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  666 void bindRemoveSrcDev( uint8 ep )
bindRemoveSrcDev:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function bindRemoveSrcDev
        CODE
//  667 {
        FUNCALL bindRemoveSrcDev, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveSrcDev, bindAddressClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       ?V1,R1
//  668   bindTableIndex_t x;
//  669 
//  670   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV       ?V0,#0x0
        SJMP      ??bindRemoveSrcDev_0
//  671   {
//  672     if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
??bindRemoveSrcDev_1:
        MOV       A,?V0
        MOV       B,#0xe
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#BindingTable & 0xff
        ADD       A,R0
        MOV       R2,A
        MOV       A,#(BindingTable >> 8) & 0xff
        ADDC      A,R1
        MOV       R3,A
        MOV       A,#-0x1
        XRL       A,?V1
        JZ        ??bindRemoveSrcDev_2
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,?V1
        JNZ       ??bindRemoveSrcDev_3
//  673     {
//  674       uint16 idx = BindingTable[x].dstIdx;
??bindRemoveSrcDev_2:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  675 
//  676       bindRemoveEntry( &BindingTable[x] );
        ; Setup parameters for call to function bindRemoveEntry
        LCALL     `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
//  677 
//  678       // If this is the last Bind Entry for that idx then clear BINDING
//  679       // user from Address Manager
//  680       bindAddressClear( idx );
        ; Setup parameters for call to function bindAddressClear
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bindAddressClear::?relay`; Banked call to: bindAddressClear
//  681     }
//  682   }
??bindRemoveSrcDev_3:
        INC       ?V0
??bindRemoveSrcDev_0:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,?V0
        CLR       C
        SUBB      A,R0
        JC        ??bindRemoveSrcDev_1
//  683 }
        LJMP      ??Subroutine35_0 & 0xFFFF
          CFI EndBlock cfiBlock45
//  684 
//  685 /*********************************************************************
//  686  * @fn          bindNumBoundTo
//  687  *
//  688  * @brief       Calculate the number items this device is bound to.
//  689  *              When srcMode is set to TRUE, discard what value devAddr
//  690  *              has, it returns number count bound to the local dev.
//  691  *
//  692  * @param       devAddr - device Address
//  693  * @param       devEP - endpoint
//  694  * @param       srcMode - TRUE - assume devHandle is a source address
//  695  *                        FALSE - destination address
//  696  *
//  697  * @return      status
//  698  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  699 byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
bindNumBoundTo:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function bindNumBoundTo
        CODE
//  700 {
        FUNCALL bindNumBoundTo, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V1,R1
        MOV       ?V2,R4
//  701   BindingEntry_t *pBind;
//  702   uint16 idx;
//  703   byte   num;
//  704   bindTableIndex_t x;
//  705 
//  706   // Init
//  707   num = 0;
        MOV       ?V0,#0x0
//  708 
//  709   if ( devAddr->addrMode == AddrGroup )
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_38:
        JNZ       ??bindNumBoundTo_0
//  710   {
//  711     idx = devAddr->addr.shortAddr;
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine47_0 & 0xFFFF
//  712   }
??CrossCallReturnLabel_69:
        SJMP      ??bindNumBoundTo_1
//  713   else
//  714   {
//  715     idx = bindingAddrMgsHelperFind( devAddr );
??bindNumBoundTo_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
//  716   }
//  717 
//  718   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
??bindNumBoundTo_1:
        MOV       R4,#0x0
        SJMP      ??bindNumBoundTo_2
//  719   {
//  720     pBind = &BindingTable[x];
//  721     if ( srcMode )
//  722     {
//  723       if ( pBind->srcEP == devEpInt )
//  724       {
//  725         num++;
//  726       }
//  727     }
//  728     else
//  729     {
//  730       if ( ((devAddr->addrMode == AddrGroup)
//  731               && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
//  732           || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
//  733                                 && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
??bindNumBoundTo_3:
        MOV       A,R5
        JNZ       ??bindNumBoundTo_4
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bindNumBoundTo_5
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bindNumBoundTo_5:
        JNZ       ??bindNumBoundTo_4
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V1
        JNZ       ??bindNumBoundTo_4
//  734       {
//  735         num++;
??bindNumBoundTo_6:
        INC       ?V0
//  736       }
??bindNumBoundTo_4:
        INC       R4
??bindNumBoundTo_2:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R4
        CLR       C
        SUBB      A,R0
        JNC       ??bindNumBoundTo_7
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV       A,?V2
        MOV       DPL,R0
        MOV       DPH,R1
        JZ        ??bindNumBoundTo_8
        MOVX      A,@DPTR
        XRL       A,?V1
        JNZ       ??bindNumBoundTo_4
        SJMP      ??bindNumBoundTo_6
??bindNumBoundTo_8:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bindNumBoundTo_3
        MOV       A,#0x1
        XRL       A,R5
        JNZ       ??bindNumBoundTo_4
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bindNumBoundTo_9
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bindNumBoundTo_9:
        JZ        ??bindNumBoundTo_6
        SJMP      ??bindNumBoundTo_4
//  737     }
//  738   }
//  739 
//  740   return num;
??bindNumBoundTo_7:
        MOV       R1,?V0
        LJMP      ??Subroutine38_0 & 0xFFFF
//  741 }
          CFI EndBlock cfiBlock46

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function bindFindExisting
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function bindNumBoundTo
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOV       A,R2
        ADD       A,#0x8
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_46:
        XRL       A,#0x1
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function bindRemoveClusterIdFromList
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function bindFindExisting
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_37
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-4
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function bindNumBoundTo
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_38
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-4
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function bindNumBoundTo
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function bindAddressClear
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond55) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond55) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond55) CFA_SP SP+-7
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker56 Using cfiCommon1
          CFI (cfiPicker56) NoFunction
          CFI (cfiPicker56) Picker
        MOV       A,R4
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiPicker56
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function bindUpdateAddr
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function bindNumBoundTo
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function bindAddressClear
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond59) CFA_SP SP+-7
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker60 Using cfiCommon1
          CFI (cfiPicker60) NoFunction
          CFI (cfiPicker60) Picker
        MOV       B,#0xe
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#BindingTable & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(BindingTable >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiPicker60
//  742 
//  743 /*********************************************************************
//  744  * @fn          bindNumReflections
//  745  *
//  746  * @brief       Counts the number of reflections needed for a
//  747  *              endpoint and cluster ID combo.
//  748  *
//  749  * @param       ep - source endpoint
//  750  * @param       clusterID - matching clusterID
//  751  *
//  752  * @return      number of reflections needed.
//  753  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  754 uint16 bindNumReflections( uint8 ep, uint16 clusterID )
bindNumReflections:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI Function bindNumReflections
        CODE
//  755 {
        FUNCALL bindNumReflections, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V3,R1
        MOV       ?V0,R2
        MOV       ?V1,R3
//  756   bindTableIndex_t x;
//  757   BindingEntry_t *pBind;
//  758   uint16 cnt = 0;
        MOV       R6,#0x0
        MOV       R7,#0x0
//  759   uint8 bindEP;
//  760 
//  761   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV       ?V2,#0x0
        SJMP      ??bindNumReflections_0
//  762   {
//  763     pBind = &BindingTable[x];
??bindNumReflections_1:
        MOV       A,?V2
        MOV       B,#0xe
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        LCALL     ?Subroutine30 & 0xFFFF
//  764     bindEP = pBind->srcEP;
//  765 
//  766     if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
??CrossCallReturnLabel_50:
        XRL       A,?V3
        JNZ       ??bindNumReflections_2
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
        MOV       A,R1
        JZ        ??bindNumReflections_2
//  767     {
//  768       cnt++;
        INC       R6
        MOV       A,R6
        JNZ       ??bindNumReflections_2
        INC       R7
//  769     }
//  770   }
??bindNumReflections_2:
        INC       ?V2
??bindNumReflections_0:
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_15:
        JC        ??bindNumReflections_1
//  771 
//  772   return ( cnt );
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LJMP      ?Subroutine4 & 0xFFFF
//  773 }
          CFI EndBlock cfiBlock61

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function bindFindEmpty
          CFI Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_48
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function bindNumOfEntries
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_49
          CFI (cfiCond63) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond63) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond63) CFA_SP SP+-9
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function bindCapacity
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_47
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function bindNumReflections
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        MOV       A,#BindingTable & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(BindingTable >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66
//  774 
//  775 /*********************************************************************
//  776  * @fn          bindFind
//  777  *
//  778  * @brief       Finds the binding entry for the source address, endpoint
//  779  *              and cluster ID passed in as a parameter.
//  780  *
//  781  * @param       ep - source endpoint
//  782  * @param       clusterID - matching clusterID
//  783  * @param       skip - number of matches to skip before returning
//  784  *
//  785  * @return      pointer to the binding table entry, NULL if not found
//  786  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  787 BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
bindFind:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function bindFind
        CODE
//  788 {
        FUNCALL bindFind, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V4,R1
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V5,R4
//  789   BindingEntry_t *pBind;
//  790   byte skipped = 0;
        MOV       ?V2,#0x0
//  791   bindTableIndex_t x;
//  792 
//  793   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV       ?V3,#0x0
        SJMP      ??bindFind_0
//  794   {
//  795     pBind = &BindingTable[x];
//  796 
//  797     if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
//  798     {
//  799       if ( skipped < skipping )
//  800       {
//  801         skipped++;
??bindFind_1:
        INC       ?V2
//  802       }
??bindFind_2:
        INC       ?V3
??bindFind_0:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,?V3
        CLR       C
        SUBB      A,R0
        JNC       ??bindFind_3
        MOV       A,?V3
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_6:
        XRL       A,?V4
        JNZ       ??bindFind_2
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
        MOV       A,R1
        JZ        ??bindFind_2
        MOV       A,?V2
        CLR       C
        SUBB      A,?V5
        JC        ??bindFind_1
//  803       else
//  804       {
//  805         return ( pBind );
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        SJMP      ??bindFind_4
//  806       }
//  807     }
//  808   }
//  809 
//  810   return ( (BindingEntry_t *)NULL );
??bindFind_3:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bindFind_4:
        LJMP      ??Subroutine38_0 & 0xFFFF
//  811 }
          CFI EndBlock cfiBlock67

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond68 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function bindFind
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker70 Using cfiCommon1
          CFI (cfiPicker70) NoFunction
          CFI (cfiPicker70) Picker
        MOV       B,#0xe
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#BindingTable & 0xff
        ADD       A,R0
        MOV       R6,A
        MOV       A,#(BindingTable >> 8) & 0xff
        ADDC      A,R1
        MOV       R7,A
        MOV       DPL,R6
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiPicker70
//  812 
//  813 /*********************************************************************
//  814  * @fn      bindAddressClear
//  815  *
//  816  * @brief   Lookup a binding entry by specific Idx, if none is found
//  817  *          clears the BINDING user from Address Manager.
//  818  *
//  819  * @param   dstIdx - Source Address Manager Index
//  820  *
//  821  * @return  none
//  822  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  823 void bindAddressClear( uint16 dstIdx )
bindAddressClear:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function bindAddressClear
        CODE
//  824 {
        FUNCALL bindAddressClear, AddrMgrEntryRelease
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  825   bindTableIndex_t i;
//  826 
//  827   if ( dstIdx != INVALID_NODE_ADDR )
        MOV       A,#-0x2
        XRL       A,R2
        JNZ       ??bindAddressClear_0
        MOV       A,#-0x1
        XRL       A,R3
??bindAddressClear_0:
        JZ        ??bindAddressClear_1
//  828   {
//  829     // Looks for a specific Idx
//  830     for ( i = 0; i < gNWK_MAX_BINDING_ENTRIES; i++ )
        MOV       R4,#0x0
        SJMP      ??bindAddressClear_2
//  831     {
//  832       if ( ( BindingTable[i].dstGroupMode != AddrGroup ) &&
//  833            ( BindingTable[i].dstGroupMode == DSTGROUPMODE_ADDR ) &&
//  834            ( BindingTable[i].dstIdx == dstIdx ) )
??bindAddressClear_3:
        LCALL     ?Subroutine13 & 0xFFFF
//  835       {
//  836         break;  // found at least one
//  837       }
//  838     }
??CrossCallReturnLabel_54:
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x1
        XRL       A,R5
        JZ        ??bindAddressClear_4
        MOV       A,R5
        JNZ       ??bindAddressClear_4
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bindAddressClear_5
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bindAddressClear_5:
        JZ        ??bindAddressClear_1
??bindAddressClear_4:
        INC       R4
??bindAddressClear_2:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R4
        CLR       C
        SUBB      A,R0
        JC        ??bindAddressClear_3
//  839 
//  840     if ( i == gNWK_MAX_BINDING_ENTRIES )
        CLR       A
        MOVC      A,@A+DPTR
        XRL       A,R4
        JNZ       ??bindAddressClear_1
//  841     {
//  842       // No binding entry is associated with dstIdx.
//  843       // Remove user binding bit from the address manager entry corresponding to dstIdx.
//  844       AddrMgrEntry_t addrEntry;
//  845 
//  846       addrEntry.user = ADDRMGR_USER_BINDING;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x4
        MOVX      @DPTR,A
//  847       addrEntry.index = dstIdx;
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine32 & 0xFFFF
//  848 
//  849       AddrMgrEntryRelease( &addrEntry );
//  850     }
//  851   }
??CrossCallReturnLabel_55:
        LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
//  852 }
??bindAddressClear_1:
        SJMP      ??Subroutine42_0
          CFI EndBlock cfiBlock71

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function bindAddressClear
          CFI Conditional ??CrossCallReturnLabel_55
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function bindingAddrMgsHelperConvert
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_20
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-4
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function bindingAddrMgsHelperConvertShort
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_21
          CFI (cfiCond74) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond74) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond74) CFA_SP SP+-9
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond76 Using cfiCommon0
          CFI Function bindUpdateAddr
          CFI Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function bindUpdateAddr
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_25
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-4
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function bindingAddrMgsHelperFind
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_22
          CFI (cfiCond78) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond78) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond78) CFA_SP SP+-9
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function bindAddrIndexGet
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_23
          CFI (cfiCond79) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond79) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond79) CFA_SP SP+-9
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function bindAddressClear
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond80) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond80) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond80) CFA_SP SP+-7
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function bindingAddrMgsHelperConvert
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_20
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-4
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function bindingAddrMgsHelperConvertShort
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_21
          CFI (cfiCond82) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond82) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond82) CFA_SP SP+-9
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryRelease
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        RET
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock84 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV       A,#0xb
          CFI EndBlock cfiBlock84
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiBlock85 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_72:
          CFI EndBlock cfiBlock85
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiBlock86 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV       A,#0xd
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock86
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiBlock87 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock87
//  853 
//  854 /*********************************************************************
//  855  * @fn          bindUpdateAddr
//  856  *
//  857  * @brief       Update the network address in the binding table.
//  858  *
//  859  * @param       oldAddr - old network address
//  860  * @param       newAddr - new network address
//  861  *
//  862  * @return      none
//  863  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  864 void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
bindUpdateAddr:
          CFI Block cfiBlock88 Using cfiCommon0
          CFI Function bindUpdateAddr
        CODE
//  865 {
        FUNCALL bindUpdateAddr, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindUpdateAddr, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  866   uint16 oldIdx;
//  867   uint16 newIdx;
//  868   zAddrType_t addr;
//  869   bindTableIndex_t x;
//  870   BindingEntry_t *pBind;
//  871 
//  872   addr.addrMode = Addr16Bit;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  873   addr.addr.shortAddr = oldAddr;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ?Subroutine18 & 0xFFFF
//  874   oldIdx = bindingAddrMgsHelperFind( &addr );
??CrossCallReturnLabel_24:
        MOV       ?V0,R2
        MOV       ?V1,R3
//  875   addr.addr.shortAddr = newAddr;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        LCALL     ?Subroutine18 & 0xFFFF
//  876   newIdx = bindingAddrMgsHelperFind( &addr );
??CrossCallReturnLabel_25:
        MOV       ?V2,R2
//  877 
//  878   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV       R2,#0x0
        SJMP      ??bindUpdateAddr_0
//  879   {
//  880     pBind = &BindingTable[x];
??bindUpdateAddr_1:
        MOV       A,R2
        LCALL     ??Subroutine39_0 & 0xFFFF
//  881 
//  882     if ( pBind->dstIdx == oldIdx )
??CrossCallReturnLabel_52:
        MOV       A,R0
        ADD       A,#0x2
        MOV       R0,A
        JNC       ??bindUpdateAddr_2
        INC       R1
??bindUpdateAddr_2:
        MOV       DPL,A
        MOV       DPH,R1
        MOVX      A,@DPTR
        XRL       A,?V0
        JNZ       ??bindUpdateAddr_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V1
??bindUpdateAddr_3:
        JNZ       ??bindUpdateAddr_4
//  883     {
//  884       pBind->dstIdx = newIdx;
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,?V2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  885     }
//  886   }
??bindUpdateAddr_4:
        INC       R2
??bindUpdateAddr_0:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        JC        ??bindUpdateAddr_1
//  887 }
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        LJMP      ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock88

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond89 Using cfiCommon0
          CFI Function bindUpdateAddr
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function bindUpdateAddr
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        LCALL     ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        RET
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91
//  888 
//  889 /*********************************************************************
//  890  * @fn      bindingAddrMgsHelperFind
//  891  *
//  892  * @brief   Turns an zAddrType_t to an Addr Manager index
//  893  *
//  894  * @param   addr - zAddrType_t
//  895  *
//  896  * @return  INVALID_NODE_ADDR if not found, otherwise an index
//  897  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  898 uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
bindingAddrMgsHelperFind:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
        CODE
//  899 {
        FUNCALL bindingAddrMgsHelperFind, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperFind, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperFind, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  900   AddrMgrEntry_t entry;
//  901 
//  902   // Resolve addresses with the address manager
//  903   entry.user = ADDRMGR_USER_BINDING;
        LCALL     ?Subroutine15 & 0xFFFF
//  904   if ( addr->addrMode == Addr16Bit )
??CrossCallReturnLabel_18:
        XRL       A,#0x2
        JNZ       ??bindingAddrMgsHelperFind_0
//  905   {
//  906     entry.nwkAddr = addr->addr.shortAddr;
        LCALL     ?Subroutine21 & 0xFFFF
//  907     AddrMgrEntryLookupNwk( &entry );
//  908   }
??CrossCallReturnLabel_60:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_22:
        SJMP      ??CrossCallReturnLabel_39
//  909   else
//  910   {
//  911     AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
??bindingAddrMgsHelperFind_0:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
//  912     AddrMgrEntryLookupExt( &entry );
//  913   }
//  914 
//  915   return ( entry.index );
??CrossCallReturnLabel_39:
        LJMP      ?Subroutine1 & 0xFFFF
//  916 }
          CFI EndBlock cfiBlock92

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
          CFI Conditional ??CrossCallReturnLabel_60
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function bindAddrIndexGet
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond94) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond94) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond94) CFA_SP SP+-7
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker95 Using cfiCommon1
          CFI (cfiPicker95) NoFunction
          CFI (cfiPicker95) Picker
        MOV       DPL,R2
        MOV       DPH,R3
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiPicker95
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiCond96 Using cfiCommon0
          CFI Function bindAddrMgrLocalLoad
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function bindingAddrMgsHelperFind
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond97) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond97) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond97) CFA_SP SP+-7
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function bindAddrIndexGet
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond98) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond98) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond98) CFA_SP SP+-7
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x1
        RET
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99
//  917 
//  918 /*********************************************************************
//  919  * @fn      bindingAddrMgsHelperConvert
//  920  *
//  921  * @brief   Convert an index into an zAddrType_t
//  922  *
//  923  * @param   idx -
//  924  * @param   addr - zAddrType_t
//  925  *
//  926  * @return  TRUE if found, FALSE if not
//  927  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  928 uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
bindingAddrMgsHelperConvert:
          CFI Block cfiBlock100 Using cfiCommon0
          CFI Function bindingAddrMgsHelperConvert
        CODE
//  929 {
        FUNCALL bindingAddrMgsHelperConvert, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperConvert, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  930   AddrMgrEntry_t entry;
//  931   uint8 stat;
//  932 
//  933   // Resolve addresses with the address manager
//  934   entry.user = ADDRMGR_USER_BINDING;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x4
        MOVX      @DPTR,A
//  935   entry.index = idx;
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
//  936   stat = AddrMgrEntryGet( &entry );
??CrossCallReturnLabel_20:
        MOV       A,R1
        MOV       ?V0,A
//  937   if ( stat )
        JZ        ??bindingAddrMgsHelperConvert_0
//  938   {
//  939     addr->addrMode = Addr64Bit;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x3
        MOVX      @DPTR,A
//  940     osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        LCALL     ?XSTACK_DISP0_8
        MOV       R4,DPL
        MOV       R5,DPH
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
//  941   }
//  942 
//  943   return ( stat );
??bindingAddrMgsHelperConvert_0:
        MOV       R1,?V0
        MOV       A,#0xd
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP      ?Subroutine2 & 0xFFFF
//  944 }
          CFI EndBlock cfiBlock100
//  945 
//  946 /*********************************************************************
//  947  * @fn      bindingAddrMgsHelperConvertShort
//  948  *
//  949  * @brief   Convert an index into a short address
//  950  *
//  951  * @param   idx -
//  952  *
//  953  * @return  INVALID_NODE_ADDR if not available, otherwise the short address
//  954  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  955 uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
bindingAddrMgsHelperConvertShort:
          CFI Block cfiBlock101 Using cfiCommon0
          CFI Function bindingAddrMgsHelperConvertShort
        CODE
//  956 {
        FUNCALL bindingAddrMgsHelperConvertShort, AddrMgrEntryGet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  957   AddrMgrEntry_t entry;
//  958 
//  959   // Resolve addresses with the address manager
//  960   entry.user = ADDRMGR_USER_BINDING;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x4
        MOVX      @DPTR,A
//  961   entry.index = idx;
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
//  962   AddrMgrEntryGet( &entry );
//  963 
//  964   return ( entry.nwkAddr );
??CrossCallReturnLabel_21:
        MOV       A,#0x1
        LJMP      ??Subroutine41_0 & 0xFFFF
//  965 }
          CFI EndBlock cfiBlock101

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function bindingAddrMgsHelperConvert
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function bindingAddrMgsHelperConvertShort
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond103) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond103) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond103) CFA_SP SP+-7
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
        RET
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104
//  966 
//  967 /*********************************************************************
//  968  * @fn      bindAddrMgrLocalLoad
//  969  *
//  970  * @brief   Load local(self and parent) address information into
//  971  *          Address Manager
//  972  *
//  973  * @param   none
//  974  *
//  975  * @return  none
//  976  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  977 void bindAddrMgrLocalLoad( void )
bindAddrMgrLocalLoad:
          CFI Block cfiBlock105 Using cfiCommon0
          CFI Function bindAddrMgrLocalLoad
        CODE
//  978 {
        FUNCALL bindAddrMgrLocalLoad, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, NLME_GetCoordExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
//  979   AddrMgrEntry_t entry;
//  980   uint16         parent;
//  981 
//  982   // add "local"(self and parent) address informtion into the Address
//  983   // Manager
//  984   if ( bindAddrMgrLocalLoaded == FALSE )
        MOV       DPTR,#bindAddrMgrLocalLoaded
        MOVX      A,@DPTR
        JNZ       ??bindAddrMgrLocalLoad_0
//  985   {
//  986     // add the device's address information
//  987     entry.user    = ADDRMGR_USER_BINDING;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x4
        MOVX      @DPTR,A
//  988     entry.nwkAddr = _NIB.nwkDevAddress;
        MOV       DPTR,#_NIB + 20
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  989     AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
//  990     AddrMgrEntryUpdate( &entry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
//  991 
//  992     // make sure parent address is valid
//  993     parent = NLME_GetCoordShortAddr();
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
//  994     if ( ( parent != entry.nwkAddr     ) &&
//  995          ( parent != INVALID_NODE_ADDR )    )
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??bindAddrMgrLocalLoad_1
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??bindAddrMgrLocalLoad_1:
        JZ        ??bindAddrMgrLocalLoad_2
        MOV       A,#-0x2
        XRL       A,R0
        JNZ       ??bindAddrMgrLocalLoad_3
        MOV       A,#-0x1
        XRL       A,R1
??bindAddrMgrLocalLoad_3:
        JZ        ??bindAddrMgrLocalLoad_2
//  996     {
//  997       // add the parent's address information
//  998       entry.nwkAddr = parent;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  999       NLME_GetCoordExtAddr( entry.extAddr );
        ; Setup parameters for call to function NLME_GetCoordExtAddr
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
// 1000       AddrMgrEntryUpdate( &entry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
// 1001     }
// 1002 
// 1003     bindAddrMgrLocalLoaded = TRUE;
??bindAddrMgrLocalLoad_2:
        MOV       DPTR,#bindAddrMgrLocalLoaded
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1004   }
// 1005 }
??bindAddrMgrLocalLoad_0:
        MOV       A,#0xd
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock105
// 1006 
// 1007 /*********************************************************************
// 1008  * @fn      bindAddrIndexGet
// 1009  *
// 1010  * @brief   Get bind address index.
// 1011  *
// 1012  * @param   addr - <zAddrType_t>
// 1013  *
// 1014  * @return  (uint16) address index
// 1015  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1016 uint16 bindAddrIndexGet( zAddrType_t* addr )
bindAddrIndexGet:
          CFI Block cfiBlock106 Using cfiCommon0
          CFI Function bindAddrIndexGet
        CODE
// 1017 {
        FUNCALL bindAddrIndexGet, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
// 1018   AddrMgrEntry_t entry;
// 1019   uint8          update;
// 1020 
// 1021   update = FALSE;
// 1022 
// 1023   // sync binding addresses with the address manager
// 1024   entry.user = ADDRMGR_USER_BINDING;
        LCALL     ?Subroutine15 & 0xFFFF
// 1025 
// 1026   if ( addr->addrMode == Addr16Bit )
??CrossCallReturnLabel_19:
        MOV       R0,A
        MOV       A,#0x2
        XRL       A,R0
        JNZ       ??bindAddrIndexGet_0
// 1027   {
// 1028     entry.nwkAddr = addr->addr.shortAddr;
        LCALL     ?Subroutine21 & 0xFFFF
// 1029 
// 1030     if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
// 1031     {
// 1032       update = TRUE;
// 1033     }
// 1034   }
??CrossCallReturnLabel_61:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV       A,R1
        JNZ       ??bindAddrIndexGet_1
        SJMP      ??bindAddrIndexGet_2
// 1035   else if ( addr->addrMode == Addr64Bit )
??bindAddrIndexGet_0:
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??bindAddrIndexGet_3
// 1036   {
// 1037     AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
// 1038 
// 1039     if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
??CrossCallReturnLabel_40:
        MOV       A,R1
        JNZ       ??bindAddrIndexGet_1
// 1040     {
// 1041       update = TRUE;
// 1042     }
// 1043   }
// 1044   else if ( addr->addrMode == AddrGroup )
// 1045   {
// 1046     entry.index = addr->addr.shortAddr;
// 1047   }
// 1048   else
// 1049   {
// 1050     entry.index = INVALID_NODE_ADDR;
// 1051   }
// 1052 
// 1053   if ( update )
// 1054   {
// 1055     AddrMgrEntryUpdate( &entry );
??bindAddrIndexGet_2:
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        SJMP      ??bindAddrIndexGet_1
// 1056   }
??bindAddrIndexGet_3:
        MOV       A,#0x1
        XRL       A,R0
        JNZ       ??bindAddrIndexGet_4
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        SJMP      ??bindAddrIndexGet_5
??bindAddrIndexGet_4:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
??bindAddrIndexGet_5:
        MOVX      @DPTR,A
// 1057 
// 1058   return entry.index;
??bindAddrIndexGet_1:
        LJMP      ?Subroutine1 & 0xFFFF
// 1059 }
          CFI EndBlock cfiBlock106

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
          CFI Conditional ??CrossCallReturnLabel_39
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function bindAddrIndexGet
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond108) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond108) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond108) CFA_SP SP+-7
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        RET
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
          CFI Conditional ??CrossCallReturnLabel_22
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function bindAddrIndexGet
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond111) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond111) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond111) CFA_SP SP+-7
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        RET
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond113 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
          CFI Conditional ??CrossCallReturnLabel_18
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function bindAddrIndexGet
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond114) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond114) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond114) CFA_SP SP+-7
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x4
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_44:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function bindingAddrMgsHelperFind
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_18
          CFI (cfiCond117) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond117) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond117) CFA_SP SP+-9
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function bindAddrIndexGet
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_19
          CFI (cfiCond118) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond118) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond118) CFA_SP SP+-9
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker119 Using cfiCommon1
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119
// 1060 
// 1061 /*********************************************************************
// 1062  * @fn      GetBindingTableEntry
// 1063  *
// 1064  * @brief   Get a pointer to the Nth valid binding table entry.
// 1065  *
// 1066  * @param   Nth valid entry being requested.
// 1067  *
// 1068  * @return  The Nth valid binding table entry.
// 1069  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1070 BindingEntry_t *GetBindingTableEntry( uint16 Nth )
GetBindingTableEntry:
          CFI Block cfiBlock120 Using cfiCommon0
          CFI Function GetBindingTableEntry
        CODE
// 1071 {
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1072   BindingEntry_t *rtrn = NULL;
        MOV       R0,#0x0
        MOV       R1,#0x0
// 1073 
// 1074 #if defined ( REFLECTOR )
// 1075   bindTableIndex_t idx, cnt = 0;
        MOV       R4,#0x0
// 1076 
// 1077   for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
        MOV       R5,#0x0
        SJMP      ??GetBindingTableEntry_0
??GetBindingTableEntry_1:
        INC       R5
??GetBindingTableEntry_0:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R6,A
        MOV       A,R5
        CLR       C
        SUBB      A,R6
        JNC       ??GetBindingTableEntry_2
// 1078   {
// 1079     if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
        MOV       A,R5
        MOV       B,#0xe
        MUL       AB
        MOV       R6,A
        MOV       ?V0,B
        MOV       R7,?V0
        MOV       A,#BindingTable & 0xff
        ADD       A,R6
        MOV       DPL,A
        MOV       A,#(BindingTable >> 8) & 0xff
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        CPL       A
        JZ        ??GetBindingTableEntry_1
// 1080     {
// 1081       if ( cnt++ == Nth )
        MOV       ?V0,R4
        MOV       A,#0x1
        ADD       A,R4
        MOV       R4,A
        MOV       R6,?V0
        MOV       A,R2
        XRL       A,R6
        ORL       A,R3
        JNZ       ??GetBindingTableEntry_1
// 1082       {
// 1083         rtrn = BindingTable+idx;
        MOV       R0,DPL
        MOV       R1,DPH
// 1084         break;
// 1085       }
// 1086     }
// 1087   }
// 1088 #else
// 1089   (void)Nth;
// 1090 #endif
// 1091 
// 1092   return rtrn;
??GetBindingTableEntry_2:
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        LJMP      ?Subroutine2 & 0xFFFF
// 1093 }
          CFI EndBlock cfiBlock120
// 1094 
// 1095 #if !defined ( BINDINGTABLE_NV_SINGLES )
// 1096 /*********************************************************************
// 1097  * @fn          BindInitNV
// 1098  *
// 1099  * @brief       Initialize the Binding NV Item
// 1100  *
// 1101  * @param       none
// 1102  *
// 1103  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
// 1104  *              exist in NV, NV_OPER_FAILED if failure.
// 1105  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1106 byte BindInitNV( void )
BindInitNV:
          CFI Block cfiBlock121 Using cfiCommon0
          CFI Function BindInitNV
        CODE
// 1107 {
        FUNCALL BindInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindInitNV, BindSetDefaultNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1108   byte ret;
// 1109 
// 1110   // Initialize the device list
// 1111   ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
// 1112                   (uint16)( sizeof( nvBindingHdr_t ) + NV_BIND_ITEM_SIZE ), NULL );
        ; Setup parameters for call to function osal_nv_item_init
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV       R4,A
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        MOV       R2,#0x41
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        MOV       R6,A
// 1113 
// 1114   if (ret == NV_ITEM_UNINIT) 
        MOV       A,#0x9
        XRL       A,R6
        JNZ       ??BindInitNV_0
// 1115   {
// 1116     BindSetDefaultNV();
        ; Setup parameters for call to function BindSetDefaultNV
        LCALL     `??BindSetDefaultNV::?relay`; Banked call to: BindSetDefaultNV
// 1117   }
// 1118 
// 1119   return ( ret );
??BindInitNV_0:
        MOV       A,R6
        MOV       R1,A
        LJMP      ??Subroutine35_0 & 0xFFFF
// 1120 }
          CFI EndBlock cfiBlock121
// 1121 
// 1122 /*********************************************************************
// 1123  * @fn          BindSetDefaultNV
// 1124  *
// 1125  * @brief       Write the defaults to NV
// 1126  *
// 1127  * @param       none
// 1128  *
// 1129  * @return      none
// 1130  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1131 void BindSetDefaultNV( void )
BindSetDefaultNV:
          CFI Block cfiBlock122 Using cfiCommon0
          CFI Function BindSetDefaultNV
        CODE
// 1132 {
        FUNCALL BindSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1133   nvBindingHdr_t hdr;
// 1134 
// 1135   // Initialize the header
// 1136   hdr.numRecs = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1137 
// 1138   // Save off the header
// 1139   osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1140 }
        MOV       A,#0x2
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock122
// 1141 
// 1142 #if !defined ( DONT_UPGRADE_BIND )
// 1143 /*********************************************************************
// 1144  * @fn          BindCopyBackupToNewNV
// 1145  *
// 1146  * @brief       Creates the New NV item, copies the backup data into
// 1147  *              the New NV ID, and Deletes the duplicate NV item.
// 1148  *
// 1149  * @param       dupLen - NV item length of the old Binding table.
// 1150  * @param       newLen - NV item length of the new Binding table to be created.
// 1151  *
// 1152  * @return      ZSuccess - All the actions were successful.
// 1153  *              ZFailure - Any of the actions failed.
// 1154  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1155 static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen )
BindCopyBackupToNewNV:
          CFI Block cfiBlock123 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
        CODE
// 1156 {
        FUNCALL BindCopyBackupToNewNV, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 18
        MOV       A,#-0x12
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
// 1157   uint8 status = ZSuccess;
        MOV       ?V2,#0x0
// 1158   uint16 bindLen;
// 1159 
// 1160   bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
        ; Setup parameters for call to function osal_nv_item_len
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV       R4,?V4
        MOV       R5,?V5
// 1161 
// 1162 
// 1163   if ( ( bindLen > 0 ) && ( bindLen != newLen ) )
        MOV       A,R2
        ORL       A,R5
        JZ        ??BindCopyBackupToNewNV_0
        MOV       A,?V0
        XRL       A,R4
        JNZ       ??BindCopyBackupToNewNV_1
        MOV       A,?V1
        XRL       A,R5
??BindCopyBackupToNewNV_1:
        JZ        ??BindCopyBackupToNewNV_0
// 1164   {
// 1165     // The existing item does not match the New length
// 1166     osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen );
        ; Setup parameters for call to function osal_nv_delete
        MOV       R2,#0x41
        MOV       R3,#0x0
        LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
// 1167   }
// 1168 
// 1169   // Create Binding Table NV item with the NEW legth
// 1170   if ( osal_nv_item_init( ZCD_NV_BINDING_TABLE, newLen, NULL ) != NV_OPER_FAILED )
??BindCopyBackupToNewNV_0:
        ; Setup parameters for call to function osal_nv_item_init
        CLR       A
        MOV       ?V4,A
        MOV       ?V5,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R2,#0x41
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
        XRL       A,#0xa
        JNZ       $+5
        LJMP      ??BindCopyBackupToNewNV_2 & 0xFFFF
// 1171   {
// 1172     nvBindingHdr_t hdrBackup;
// 1173 
// 1174     // Copy ONLY the valid records from the duplicate NV table into the new table
// 1175     // at the end of this process the table content will be compacted
// 1176     if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdrBackup ) == ZSuccess )
        ; Setup parameters for call to function osal_nv_read
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x3
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
        JZ        $+5
        LJMP      ??BindCopyBackupToNewNV_2 & 0xFFFF
// 1177     {
// 1178       bindTableIndex_t i;
// 1179       uint16 validBackupRecs = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1180       BindingEntry_t backupRec;
// 1181 
// 1182       // Read in the device list. This loop will stop when:
// 1183       // The total number of valid records has been reached either because:
// 1184       //          The new table is full of valid records OR
// 1185       //          The old table has less valid records than the size of the table
// 1186       for ( i = 0; ( validBackupRecs < gNWK_MAX_BINDING_ENTRIES ) && ( validBackupRecs < hdrBackup.numRecs ); i++ )
        MOV       ?V0,#0x0
        SJMP      ??BindCopyBackupToNewNV_3
// 1187       {
// 1188         if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE,
// 1189                           (uint16)(sizeof(nvBindingHdr_t) + (i * NV_BIND_REC_SIZE)),
// 1190                           NV_BIND_REC_SIZE, &backupRec ) == ZSuccess )
??BindCopyBackupToNewNV_4:
        ; Setup parameters for call to function osal_nv_read
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       DPTR,#gBIND_REC_SIZE
        LCALL     ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV       R2,#0x0
        MOV       R3,#0x3
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
        JZ        $+5
        LJMP      ??BindCopyBackupToNewNV_2 & 0xFFFF
// 1191         {
// 1192           if ( backupRec.srcEP != NV_BIND_EMPTY )
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CPL       A
        JZ        ??CrossCallReturnLabel_35
// 1193           {
// 1194             // Save the valid record into the NEW NV table.
// 1195             if ( osal_nv_write( ZCD_NV_BINDING_TABLE,
// 1196                                 (uint16)((sizeof(nvBindingHdr_t)) + (validBackupRecs * NV_BIND_REC_SIZE)),
// 1197                                 NV_BIND_REC_SIZE, &backupRec ) != ZSuccess )
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       DPTR,#gBIND_REC_SIZE
        LCALL     ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV       R2,A
        MOV       B,?V4
        MOV       A,R1
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
        JNZ       ??BindCopyBackupToNewNV_2
// 1198             {
// 1199                status = ZFailure;
// 1200                break; // Terminate the loop as soon as a problem with NV is detected
// 1201             }
// 1202 
// 1203             validBackupRecs++;
        LCALL     ?Subroutine24 & 0xFFFF
// 1204           }
// 1205         }
// 1206         else
// 1207         {
// 1208            status = ZFailure;
// 1209            break; // Terminate the loop as soon as a problem with NV is detected
// 1210         }
// 1211       }
??CrossCallReturnLabel_35:
        INC       ?V0
??BindCopyBackupToNewNV_3:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        PUSH      DPL
          CFI CFA_SP SP+-1
        PUSH      DPH
          CFI CFA_SP SP+-2
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        POP       DPH
          CFI CFA_SP SP+-1
        POP       DPL
          CFI CFA_SP SP+0
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,R0
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JNC       ??BindCopyBackupToNewNV_5
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        PUSH      DPL
          CFI CFA_SP SP+-1
        PUSH      DPH
          CFI CFA_SP SP+-2
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_33:
        POP       DPH
          CFI CFA_SP SP+-1
        POP       DPL
          CFI CFA_SP SP+0
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,R0
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,R1
        JNC       $+5
        LJMP      ??BindCopyBackupToNewNV_4 & 0xFFFF
// 1212 
// 1213       // Only save the header and delete the duplicate element if the previous
// 1214       // process was successful
// 1215       if ( status == ZSuccess )
// 1216       {
// 1217         // Save off the header
// 1218         if ( osal_nv_write( ZCD_NV_BINDING_TABLE, 0,
// 1219                             sizeof(nvBindingHdr_t), &validBackupRecs ) == ZSuccess )
??BindCopyBackupToNewNV_5:
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
        JNZ       ??BindCopyBackupToNewNV_2
// 1220         {
// 1221           // Delete the duplicate NV Item, once the data has been stored in the NEW table
// 1222           if ( osal_nv_delete( ZCD_NV_DUPLICATE_BINDING_TABLE, dupLen ) != ZSuccess )
        ; Setup parameters for call to function osal_nv_delete
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#0x0
        MOV       R3,#0x3
        LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
        MOV       A,R1
        JZ        ??BindCopyBackupToNewNV_6
// 1223           {
// 1224             status = ZFailure;
// 1225           }
// 1226         }
// 1227         else
// 1228         {
// 1229           status = ZFailure;
// 1230         }
// 1231       }
// 1232     }
// 1233     else
// 1234     {
// 1235       status = ZFailure;
// 1236     }
// 1237   }
// 1238   else
// 1239   {
// 1240     status = ZFailure;
??BindCopyBackupToNewNV_2:
        MOV       ?V2,#0x1
// 1241   }
// 1242 
// 1243   return ( status );
??BindCopyBackupToNewNV_6:
        MOV       R1,?V2
        MOV       A,#0x12
        LJMP      ??Subroutine37_0 & 0xFFFF
// 1244 }
          CFI EndBlock cfiBlock123

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond124 Using cfiCommon0
          CFI Function BindSetDefaultNV
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function BindCopyBackupToNewNV
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function BindWriteNV
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        MOV       R4,#0x0
        MOV       R5,#0x0
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function BindWriteNV
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_27
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function BindSetDefaultNV
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function BindCopyBackupToNewNV
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function BindWriteNV
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker133 Using cfiCommon1
          CFI (cfiPicker133) NoFunction
          CFI (cfiPicker133) Picker
        MOV       R2,#0x41
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond134 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function BindUpgradeTableInNV
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker136 Using cfiCommon1
          CFI (cfiPicker136) NoFunction
          CFI (cfiPicker136) Picker
        MOV       R2,#0x41
        MOV       R3,#0x0
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiPicker136
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond137 Using cfiCommon0
          CFI Function BindUpgradeTableInNV
          CFI Conditional ??CrossCallReturnLabel_68
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function BindCopyBackupToNewNV
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function BindUpgradeTableInNV
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V4,R2
        MOV       ?V5,R3
        RET
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond141 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function bindAddrIndexGet
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond142) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond142) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond142) CFA_SP SP+-7
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function BindCopyBackupToNewNV
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function BindCopyBackupToNewNV
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-4
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function BindRestoreFromNV
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146
// 1245 #endif // !DONT_UPGRADE_BIND
// 1246 
// 1247 #if !defined ( DONT_UPGRADE_BIND )
// 1248 /*********************************************************************
// 1249  * @fn          BindUpgradeTableInNV
// 1250  *
// 1251  * @brief       Verifies if the existing table in NV has different size
// 1252  *              than the table defined by parameters in the current code.
// 1253  *              If different, creates a backup table, deletes the existing
// 1254  *              table and creates the new table with the new size. After
// 1255  *              this process is done ZCD_NV_BINDING_TABLE NV item contains
// 1256  *              only valid records retrieved from the original table, up to
// 1257  *              the maximum number of records defined by gNWK_MAX_BINDING_ENTRIES
// 1258  *
// 1259  * @param       none
// 1260  *
// 1261  * @return      ZSuccess - the Update process was sucessful.
// 1262  *              ZFailure - otherwise.
// 1263  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1264 static uint8 BindUpgradeTableInNV( void )
BindUpgradeTableInNV:
          CFI Block cfiBlock147 Using cfiCommon0
          CFI Function BindUpgradeTableInNV
        CODE
// 1265 {
        FUNCALL BindUpgradeTableInNV, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, nwkCreateDuplicateNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, BindCopyBackupToNewNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1266   uint8 status = ZSuccess;
        MOV       ?V2,#0x0
// 1267   nvBindingHdr_t hdr;
// 1268   uint16 dupLen;
// 1269   uint16 bindLen;
// 1270   uint16 newLen;
// 1271   bool duplicateReady = FALSE;
// 1272 
// 1273   // Size of the Binding table based on current paramenters in the code
// 1274   newLen = sizeof(nvBindingHdr_t) + NV_BIND_ITEM_SIZE;
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV       ?V0,A
        CLR       A
        ADDC      A,R1
        MOV       ?V1,A
// 1275 
// 1276   // Size of the Binding table NV item, this is the whole size of the item,
// 1277   // it could inculde invalid records also
// 1278   bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
        ; Setup parameters for call to function osal_nv_item_len
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV       R6,?V4
        MOV       R7,?V5
// 1279 
// 1280   // Get the number of valid records from the Binding table
// 1281   osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V4,#0x2
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1282 
// 1283   // Identify if there is a duplicate NV item, if it is there, that means an
// 1284   // Upgrade process did not finish properly last time
// 1285   // The length function will return 0 if the Backup NV ID does not exist.
// 1286   dupLen = osal_nv_item_len( ZCD_NV_DUPLICATE_BINDING_TABLE );
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#0x0
        MOV       R3,#0x3
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV       R1,?V5
// 1287 
// 1288   // A duplicate of the original Binding item will be done if:
// 1289   // 1) A duplicate NV item DOES NOT exist AND the size of the original Binding
// 1290   //    item in NV is different (larger/smaller) than the the length calculated
// 1291   //    from the parameters in the code. If they are the same there is no need
// 1292   //    to do the Upgrade process.
// 1293   // 2) A duplicate NV item exists (probably because the previous upgrade
// 1294   //    process was interrupted) and [the original Binding NV items exists AND
// 1295   //    has valid recods (it is important to make sure that valid records exist
// 1296   //    in the binding table because it is possible that the item was created
// 1297   //    but the data was not copied in the previous upgrade process).
// 1298   if ( ( ( dupLen == 0 ) && ( bindLen != newLen ) ) ||
// 1299        ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs > 0 ) ) )
        MOV       A,R2
        ORL       A,R1
        JNZ       ??BindUpgradeTableInNV_0
        MOV       A,?V0
        XRL       A,R6
        JNZ       ??BindUpgradeTableInNV_1
        MOV       A,?V1
        XRL       A,R7
??BindUpgradeTableInNV_1:
        JNZ       ??BindUpgradeTableInNV_2
        SJMP      ??BindUpgradeTableInNV_3
??BindUpgradeTableInNV_0:
        MOV       A,R6
        ORL       A,R7
        JZ        ??BindUpgradeTableInNV_4
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV       A,R2
        ORL       A,R3
        JZ        ??BindUpgradeTableInNV_4
// 1300   {
// 1301     // Create a copy from original NV item into a duplicate NV item
// 1302     if ( ( status = nwkCreateDuplicateNV( ZCD_NV_BINDING_TABLE,
// 1303                                           ZCD_NV_DUPLICATE_BINDING_TABLE ) ) == ZSuccess )
??BindUpgradeTableInNV_2:
        ; Setup parameters for call to function nwkCreateDuplicateNV
        MOV       R4,#0x0
        MOV       R5,#0x3
        MOV       R2,#0x41
        MOV       R3,#0x0
        LCALL     `??nwkCreateDuplicateNV::?relay`; Banked call to: nwkCreateDuplicateNV
        MOV       A,R1
        MOV       R0,A
        MOV       ?V2,A
        JNZ       ??BindUpgradeTableInNV_3
// 1304     {
// 1305       // Delete the original NV item once the duplicate is ready
// 1306       if ( osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen ) != ZSuccess )
        ; Setup parameters for call to function osal_nv_delete
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#0x41
        MOV       R3,#0x0
        LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
        MOV       A,R1
        JZ        ??BindUpgradeTableInNV_5
// 1307       {
// 1308         status = ZFailure;
        MOV       ?V2,#0x1
        SJMP      ??BindUpgradeTableInNV_3
// 1309       }
// 1310       else
// 1311       {
// 1312         duplicateReady = TRUE;
// 1313       }
// 1314     }
// 1315   }
// 1316   else if ( ( ( dupLen > 0 ) && ( bindLen == 0 ) ) ||
// 1317             ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs == 0 ) ) )
// 1318   {
// 1319     // If for some reason a duplicate NV item was left in the system from a
// 1320     // previous upgrade process and:
// 1321     // 1) The original Binding NV item DOES NOT exist OR
// 1322     // 2) The original Binding NV item exist, but has no valid records.
// 1323     // it is necessary to rely in the data in the Duplicate item to create
// 1324     // the Binding table
// 1325     bindLen = dupLen;
??BindUpgradeTableInNV_4:
        MOV       R6,?V4
        MOV       A,R1
        MOV       R7,A
// 1326 
// 1327     duplicateReady = TRUE;
// 1328   }
// 1329 
// 1330   if ( duplicateReady == TRUE )
// 1331   {
// 1332     // Creates the New Binding table, Copy data from backup and Delete backup NV ID
// 1333     status = BindCopyBackupToNewNV( bindLen, newLen );
??BindUpgradeTableInNV_5:
        ; Setup parameters for call to function BindCopyBackupToNewNV
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??BindCopyBackupToNewNV::?relay`; Banked call to: BindCopyBackupToNewNV
        MOV       A,R1
        MOV       ?V2,A
// 1334   }
// 1335   return ( status );
??BindUpgradeTableInNV_3:
        MOV       R1,?V2
        LJMP      ?Subroutine3 & 0xFFFF
// 1336 }
          CFI EndBlock cfiBlock147

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond148 Using cfiCommon0
          CFI Function BindUpgradeTableInNV
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function BindRestoreFromNV
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker150 Using cfiCommon1
          CFI (cfiPicker150) NoFunction
          CFI (cfiPicker150) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiPicker150
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiCond151 Using cfiCommon0
          CFI Function bindNumBoundTo
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function bindingAddrMgsHelperFind
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond152) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond152) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond152) CFA_SP SP+-7
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function bindAddrIndexGet
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond153) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond153) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond153) CFA_SP SP+-7
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function bindingAddrMgsHelperConvertShort
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond154) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond154) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond154) CFA_SP SP+-7
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function BindUpgradeTableInNV
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function BindRestoreFromNV
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker157 Using cfiCommon1
          CFI (cfiPicker157) NoFunction
          CFI (cfiPicker157) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiPicker157

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond158 Using cfiCommon0
          CFI Function BindInitNV
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function BindUpgradeTableInNV
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker160 Using cfiCommon1
          CFI (cfiPicker160) NoFunction
          CFI (cfiPicker160) Picker
        MOV       DPTR,#gBIND_REC_SIZE
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       ?V0,A
        MOV       A,R0
        MOV       B,?V0
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,?V0
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0x2
        RET
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiPicker160
// 1337 #endif // !DONT_UPGRADE_BIND
// 1338 
// 1339 /*********************************************************************
// 1340  * @fn          BindRestoreFromNV
// 1341  *
// 1342  * @brief       Restore the binding table from NV
// 1343  *
// 1344  * @param       none
// 1345  *
// 1346  * @return      Number of entries restored
// 1347  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1348 uint16 BindRestoreFromNV( void )
BindRestoreFromNV:
          CFI Block cfiBlock161 Using cfiCommon0
          CFI Function BindRestoreFromNV
        CODE
// 1349 {
        FUNCALL BindRestoreFromNV, BindUpgradeTableInNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1350   nvBindingHdr_t hdr;
// 1351 
// 1352   hdr.numRecs = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1353 
// 1354 #if !defined ( DONT_UPGRADE_BIND )
// 1355   if ( BindUpgradeTableInNV() == ZSuccess )
        ; Setup parameters for call to function BindUpgradeTableInNV
        LCALL     `??BindUpgradeTableInNV::?relay`; Banked call to: BindUpgradeTableInNV
        MOV       A,R1
        JZ        $+5
        LJMP      ??BindRestoreFromNV_0 & 0xFFFF
// 1356 #endif
// 1357   {
// 1358     if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        JNZ       ??BindRestoreFromNV_0
// 1359     {
// 1360       bindTableIndex_t x;
// 1361       uint16 validRecsCount = 0;
        MOV       R6,#0x0
        MOV       R7,#0x0
// 1362 
// 1363       // Read in the device list
// 1364       for ( x = 0; ( x < gNWK_MAX_BINDING_ENTRIES ) && ( validRecsCount < hdr.numRecs ); x++ )
        MOV       ?V0,#0x0
        SJMP      ??BindRestoreFromNV_1
// 1365       {
// 1366         if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
// 1367                            (uint16)(sizeof(nvBindingHdr_t) + (x * NV_BIND_REC_SIZE)),
// 1368                            NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
??BindRestoreFromNV_2:
        MOV       A,?V0
        MOV       B,#0xe
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#BindingTable & 0xff
        ADD       A,R0
        MOV       ?V2,A
        MOV       A,#(BindingTable >> 8) & 0xff
        ADDC      A,R1
        MOV       ?V3,A
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       DPTR,#gBIND_REC_SIZE
        LCALL     ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL     ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        JNZ       ??BindRestoreFromNV_3
// 1369         {
// 1370           if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        CPL       A
        JZ        ??BindRestoreFromNV_3
// 1371           {
// 1372             validRecsCount++;
        INC       R6
        MOV       A,R6
        JNZ       ??BindRestoreFromNV_3
        INC       R7
// 1373           }
// 1374         }
// 1375       }
??BindRestoreFromNV_3:
        INC       ?V0
??BindRestoreFromNV_1:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,?V0
        CLR       C
        SUBB      A,R0
        JNC       ??BindRestoreFromNV_0
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine22 & 0xFFFF
// 1376     }
// 1377   }
??CrossCallReturnLabel_34:
        CLR       C
        MOV       A,R6
        SUBB      A,R0
        MOV       A,R7
        SUBB      A,R1
        JC        ??BindRestoreFromNV_2
// 1378   return ( hdr.numRecs );
??BindRestoreFromNV_0:
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_71:
        LJMP      ?Subroutine3 & 0xFFFF
// 1379 }
          CFI EndBlock cfiBlock161

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function BindUpgradeTableInNV
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function BindRestoreFromNV
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker164 Using cfiCommon1
          CFI (cfiPicker164) NoFunction
          CFI (cfiPicker164) Picker
        MOV       R4,#0x0
        MOV       R5,#0x0
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiPicker164
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiCond165 Using cfiCommon0
          CFI Function BindRestoreFromNV
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function BindUpgradeTableInNV
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function BindRestoreFromNV
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker168 Using cfiCommon1
          CFI (cfiPicker168) NoFunction
          CFI (cfiPicker168) Picker
        MOV       R2,#0x41
        MOV       R3,#0x0
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiPicker168
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiCond169 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function BindCopyBackupToNewNV
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function BindRestoreFromNV
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function BindUpgradeTableInNV
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function BindRestoreFromNV
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker174 Using cfiCommon1
          CFI (cfiPicker174) NoFunction
          CFI (cfiPicker174) Picker
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiPicker174

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond175 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function BindRestoreFromNV
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker177 Using cfiCommon1
          CFI (cfiPicker177) NoFunction
          CFI (cfiPicker177) Picker
        MOV       R0,?V0
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        RET
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiPicker177

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond178 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function BindCopyBackupToNewNV
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_2
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-4
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function BindRestoreFromNV
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_3
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-4
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker181 Using cfiCommon1
          CFI (cfiPicker181) NoFunction
          CFI (cfiPicker181) Picker
        MOV       DPTR,#gBIND_REC_SIZE
        CLR       A
        MOVC      A,@A+DPTR
        MOV       ?V4,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       ?V5,A
        MOV       A,R0
        MOV       B,?V4
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,?V5
        MUL       AB
        ADD       A,R2
        RET
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiPicker181
// 1380 
// 1381 /*********************************************************************
// 1382  * @fn          BindWriteNV
// 1383  *
// 1384  * @brief       Save the Binding Table in NV
// 1385  *
// 1386  * @param       none
// 1387  *
// 1388  * @return      none
// 1389  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1390 void BindWriteNV( void )
BindWriteNV:
          CFI Block cfiBlock182 Using cfiCommon0
          CFI Function BindWriteNV
        CODE
// 1391 {
        FUNCALL BindWriteNV, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1392   BindingEntry_t *pBind;
// 1393   BindingEntry_t bind;
// 1394   nvBindingHdr_t hdr;
// 1395   bindTableIndex_t x;
// 1396 
// 1397   hdr.numRecs = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1398 
// 1399   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV       R6,#0x0
        SJMP      ??BindWriteNV_0
// 1400   {
// 1401     pBind = &BindingTable[x];
??BindWriteNV_1:
        MOV       A,R6
        MOV       B,#0xe
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#BindingTable & 0xff
        ADD       A,R0
        MOV       ?V0,A
        MOV       A,#(BindingTable >> 8) & 0xff
        ADDC      A,R1
        MOV       ?V1,A
// 1402 
// 1403     osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V0
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1404 
// 1405     // Save the record to NV
// 1406     osal_nv_write( ZCD_NV_BINDING_TABLE,
// 1407                    (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
// 1408                    NV_BIND_REC_SIZE, &bind );
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       DPTR,#gBIND_REC_SIZE
        LCALL     ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       A,R6
        MOV       R0,A
        MOV       DPTR,#gBIND_REC_SIZE
        CLR       A
        MOVC      A,@A+DPTR
        MOV       ?V2,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       ?V3,A
        MOV       A,R0
        MOV       B,?V2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,?V3
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1409 
// 1410     if ( pBind->srcEP != NV_BIND_EMPTY )
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        CPL       A
        JZ        ??CrossCallReturnLabel_36
// 1411     {
// 1412       hdr.numRecs++;
        LCALL     ?Subroutine24 & 0xFFFF
// 1413     }
// 1414   }
??CrossCallReturnLabel_36:
        INC       R6
??BindWriteNV_0:
        MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        ??BindWriteNV_1
// 1415 
// 1416   // Save off the header
// 1417   osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1418 }
        MOV       A,#0x10
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock182

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond183 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function BindWriteNV
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker185 Using cfiCommon1
          CFI (cfiPicker185) NoFunction
          CFI (cfiPicker185) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiPicker185

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond186 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function BindWriteNV
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker188 Using cfiCommon1
          CFI (cfiPicker188) NoFunction
          CFI (cfiPicker188) Picker
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_65:
        RET
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiPicker188

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??InitBindingTable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    InitBindingTable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindFindEmpty::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFindEmpty

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindNumOfEntries::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumOfEntries

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindCapacity::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindCapacity

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindIsClusterIDinList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindIsClusterIDinList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveClusterIdFromList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveClusterIdFromList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddClusterIdToList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddClusterIdToList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindFindExisting::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFindExisting

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveDev::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveDev

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveSrcDev::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveSrcDev

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindNumBoundTo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumBoundTo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindNumReflections::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumReflections

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindFind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddressClear::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddressClear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindUpdateAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindUpdateAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindingAddrMgsHelperFind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperFind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindingAddrMgsHelperConvert::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperConvert

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindingAddrMgsHelperConvertShort::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperConvertShort

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddrMgrLocalLoad::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddrMgrLocalLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddrIndexGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddrIndexGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GetBindingTableEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GetBindingTableEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindInitNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindInitNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindSetDefaultNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindSetDefaultNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindCopyBackupToNewNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindCopyBackupToNewNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindUpgradeTableInNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindUpgradeTableInNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindRestoreFromNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindRestoreFromNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindWriteNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindWriteNV

        END
// 1419 
// 1420 #else // !BINDINGTABLE_NV_SINGLES
// 1421 /*********************************************************************
// 1422  * @fn          BindInitNV
// 1423  *
// 1424  * @brief       Initialize the Binding NV Item
// 1425  *
// 1426  * @param       none
// 1427  *
// 1428  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
// 1429  *              exist in NV, NV_OPER_FAILED if failure.
// 1430  */
// 1431 byte BindInitNV( void )
// 1432 {
// 1433   bindTableIndex_t x;
// 1434 
// 1435   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
// 1436   {
// 1437     // Initialize each binding record
// 1438     osal_nv_item_init_ex( ZCD_NV_EX_BINDING_TABLE, x, NV_BIND_REC_SIZE, NULL );
// 1439   }
// 1440   return ( ZSUCCESS );
// 1441 }
// 1442 
// 1443 /*********************************************************************
// 1444  * @fn          BindSetDefaultNV
// 1445  *
// 1446  * @brief       Write the defaults to NV
// 1447  *
// 1448  * @param       none
// 1449  *
// 1450  * @return      none
// 1451  */
// 1452 void BindSetDefaultNV( void )
// 1453 {
// 1454   BindingEntry_t bind;
// 1455   bindTableIndex_t x;
// 1456 
// 1457   // Initialize a binding record
// 1458   osal_memset( &bind, 0xFF, sizeof ( BindingEntry_t ) );
// 1459 
// 1460   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
// 1461   {
// 1462     // Over write each binding record with an "empty" record
// 1463     osal_nv_write_ex( ZCD_NV_EX_BINDING_TABLE, x, 0, NV_BIND_REC_SIZE, &bind );
// 1464   }
// 1465 }
// 1466 
// 1467 /*********************************************************************
// 1468  * @fn          BindRestoreFromNV
// 1469  *
// 1470  * @brief       Restore the binding table from NV
// 1471  *
// 1472  * @param       none
// 1473  *
// 1474  * @return      Number of entries restored (non-emtpy)
// 1475  */
// 1476 uint16 BindRestoreFromNV( void )
// 1477 {
// 1478   bindTableIndex_t x;
// 1479   uint16 validRecsCount = 0;
// 1480 
// 1481   // Read in the device list
// 1482   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
// 1483   {
// 1484     if ( osal_nv_read_ex( ZCD_NV_EX_BINDING_TABLE, x, 0,
// 1485                      (uint16)NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
// 1486     {
// 1487       // Check for non-empty record
// 1488       if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
// 1489       {
// 1490         // Count non-empty records
// 1491         validRecsCount++;
// 1492       }
// 1493     }
// 1494   }
// 1495   return ( validRecsCount );
// 1496 }
// 1497 
// 1498 /*********************************************************************
// 1499  * @fn          BindWriteNV
// 1500  *
// 1501  * @brief       Copy the Binding Table in NV
// 1502  *
// 1503  * @param       none
// 1504  *
// 1505  * @return      none
// 1506  */
// 1507 void BindWriteNV( void )
// 1508 {
// 1509   bindTableIndex_t x;
// 1510 
// 1511   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
// 1512   {
// 1513     // Save the record to NV
// 1514     osal_nv_write_ex( ZCD_NV_EX_BINDING_TABLE, x, 0,
// 1515                      (uint16)NV_BIND_REC_SIZE, &BindingTable[x] );
// 1516   }
// 1517 }
// 1518 #endif // BINDINGTABLE_NV_SINGLES
// 1519 
// 1520 /*********************************************************************
// 1521 *********************************************************************/
// 
// 3 866 bytes in segment BANKED_CODE
//   174 bytes in segment BANK_RELAYS
//    15 bytes in segment XDATA_Z
// 
//   174 bytes of CODE     memory
// 3 866 bytes of HUGECODE memory
//    15 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
