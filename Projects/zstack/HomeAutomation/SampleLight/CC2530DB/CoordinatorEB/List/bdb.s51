///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              19/Apr/2021  17:59:51
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
//    Command line       =  
//        -f C:\users\slavko\Temp\EW5de2.tmp ("C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Components\stack\bdb\bdb.c" -D BDB_REPORTING -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
//        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
//        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -lC
//        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\bdb.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME bdb

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_GT
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??bdb_AddRespondentNode::?relay`
        FUNCTION `??bdb_AddRespondentNode::?relay`,0203H
        PUBLIC `??bdb_ClearNetworkParams::?relay`
        FUNCTION `??bdb_ClearNetworkParams::?relay`,0203H
        PUBLIC `??bdb_CreateRespondentList::?relay`
        FUNCTION `??bdb_CreateRespondentList::?relay`,0203H
        PUBLIC `??bdb_GenerateInstallCodeCRC::?relay`
        FUNCTION `??bdb_GenerateInstallCodeCRC::?relay`,0203H
        PUBLIC `??bdb_Init::?relay`
        FUNCTION `??bdb_Init::?relay`,0203H
        PUBLIC `??bdb_NetworkRestoredResumeState::?relay`
        FUNCTION `??bdb_NetworkRestoredResumeState::?relay`,0203H
        PUBLIC `??bdb_NotifyCommissioningModeStart::?relay`
        FUNCTION `??bdb_NotifyCommissioningModeStart::?relay`,0203H
        PUBLIC `??bdb_ProcessNodeDescRsp::?relay`
        FUNCTION `??bdb_ProcessNodeDescRsp::?relay`,0203H
        PUBLIC `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,0203H
        PUBLIC `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,0203H
        PUBLIC `??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela`
        FUNCTION `??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela`,0203H
        PUBLIC `??bdb_SendMsg::?relay`
        FUNCTION `??bdb_SendMsg::?relay`,0203H
        PUBLIC `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,0203H
        PUBLIC `??bdb_TCAddJoiningDevice::?relay`
        FUNCTION `??bdb_TCAddJoiningDevice::?relay`,0203H
        FUNCTION `??bdb_TCJoiningDeviceFree::?relay`,0203H
        FUNCTION `??bdb_TCProcessJoiningList::?relay`,0203H
        PUBLIC `??bdb_TCjoiningDeviceComplete::?relay`
        FUNCTION `??bdb_TCjoiningDeviceComplete::?relay`,0203H
        PUBLIC `??bdb_ZclIdentifyCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyCmdInd::?relay`,0203H
        PUBLIC `??bdb_addInstallCode::?relay`
        FUNCTION `??bdb_addInstallCode::?relay`,0203H
        PUBLIC `??bdb_calculateCCITT_CRC::?relay`
        FUNCTION `??bdb_calculateCCITT_CRC::?relay`,0203H
        PUBLIC `??bdb_crcBitByBitFast::?relay`
        FUNCTION `??bdb_crcBitByBitFast::?relay`,0203H
        PUBLIC `??bdb_crcInit::?relay`
        FUNCTION `??bdb_crcInit::?relay`,0203H
        PUBLIC `??bdb_crcReflect::?relay`
        FUNCTION `??bdb_crcReflect::?relay`,0203H
        PUBLIC `??bdb_doTrustCenterRequireKeyExchange::?relay`
        FUNCTION `??bdb_doTrustCenterRequireKeyExchange::?relay`,0203H
        PUBLIC `??bdb_event_loop::?relay`
        FUNCTION `??bdb_event_loop::?relay`,0203H
        PUBLIC `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,0203H
        PUBLIC `??bdb_isDeviceNonFactoryNew::?relay`
        FUNCTION `??bdb_isDeviceNonFactoryNew::?relay`,0203H
        PUBLIC `??bdb_nwkFormationAttempt::?relay`
        FUNCTION `??bdb_nwkFormationAttempt::?relay`,0203H
        FUNCTION `??bdb_nwkJoiningFormation::?relay`,0203H
        FUNCTION `??bdb_nwkSteeringDeviceOnNwk::?relay`,0203H
        PUBLIC `??bdb_parentLost::?relay`
        FUNCTION `??bdb_parentLost::?relay`,0203H
        PUBLIC `??bdb_rejoinNwk::?relay`
        FUNCTION `??bdb_rejoinNwk::?relay`,0203H
        PUBLIC `??bdb_reportCommissioningState::?relay`
        FUNCTION `??bdb_reportCommissioningState::?relay`,0203H
        PUBLIC `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,0203H
        PUBLIC `??bdb_setChannel::?relay`
        FUNCTION `??bdb_setChannel::?relay`,0203H
        PUBLIC `??bdb_setChannelAttribute::?relay`
        FUNCTION `??bdb_setChannelAttribute::?relay`,0203H
        PUBLIC `??bdb_setCommissioningGroupID::?relay`
        FUNCTION `??bdb_setCommissioningGroupID::?relay`,0203H
        PUBLIC `??bdb_setFN::?relay`
        FUNCTION `??bdb_setFN::?relay`,0203H
        PUBLIC `??bdb_setJoinUsesInstallCodeKey::?relay`
        FUNCTION `??bdb_setJoinUsesInstallCodeKey::?relay`,0203H
        PUBLIC `??bdb_setNodeIsOnANetwork::?relay`
        FUNCTION `??bdb_setNodeIsOnANetwork::?relay`,0203H
        PUBLIC `??bdb_setTCRequireKeyExchange::?relay`
        FUNCTION `??bdb_setTCRequireKeyExchange::?relay`,0203H
        FUNCTION `??bdb_startResumeCommissioningProcess::?relay`,0203H
        PUBLIC `??bdb_touchlinkSendFNReset::?relay`
        FUNCTION `??bdb_touchlinkSendFNReset::?relay`,0203H
        PUBLIC `??bdb_zclRespondentListClean::?relay`
        FUNCTION `??bdb_zclRespondentListClean::?relay`,0203H
        FUNCTION `??gp_ChangeChannelReq::?relay`,0203H
        PUBWEAK __Constant_10
        PUBWEAK __Constant_32
        PUBWEAK __Constant_3a98
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_c8
        PUBLIC bdbAttributes
        PUBLIC bdbCommissioningProcedureState
        PUBLIC bdb_AddRespondentNode
        FUNCTION bdb_AddRespondentNode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_ClearNetworkParams
        FUNCTION bdb_ClearNetworkParams,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_CreateRespondentList
        FUNCTION bdb_CreateRespondentList,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_CurrEpDescriptorList
        PUBLIC bdb_FB_InitiatorCurrentCyclesNumber
        PUBLIC bdb_GenerateInstallCodeCRC
        FUNCTION bdb_GenerateInstallCodeCRC,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 6, STACK
        PUBLIC bdb_HeadEpDescriptorList
        PUBLIC bdb_Init
        FUNCTION bdb_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_NetworkRestoredResumeState
        FUNCTION bdb_NetworkRestoredResumeState,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_NotifyCommissioningModeStart
        FUNCTION bdb_NotifyCommissioningModeStart,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_ProcessNodeDescRsp
        FUNCTION bdb_ProcessNodeDescRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        PUBLIC bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_RegisterTCLinkKeyExchangeProcessCB
        FUNCTION bdb_RegisterTCLinkKeyExchangeProcessCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_SendMsg
        FUNCTION bdb_SendMsg,0a1203H
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC bdb_TCAddJoiningDevice
        FUNCTION bdb_TCAddJoiningDevice,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        FUNCTION bdb_TCJoiningDeviceFree,0a1203H
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        FUNCTION bdb_TCProcessJoiningList,0a1203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 61, STACK
        PUBLIC bdb_TCjoiningDeviceComplete
        FUNCTION bdb_TCjoiningDeviceComplete,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC bdb_TaskID
        PUBLIC bdb_ZclIdentifyCmdInd
        FUNCTION bdb_ZclIdentifyCmdInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC bdb_ZclTransactionSequenceNumber
        PUBLIC bdb_addInstallCode
        FUNCTION bdb_addInstallCode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC bdb_calculateCCITT_CRC
        FUNCTION bdb_calculateCCITT_CRC,0a1203H
        ARGFRAME XSTACK, 6, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bdb_crcBitByBitFast
        FUNCTION bdb_crcBitByBitFast,0a1203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC bdb_crcInit
        FUNCTION bdb_crcInit,0203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_crcReflect
        FUNCTION bdb_crcReflect,080203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_doTrustCenterRequireKeyExchange
        FUNCTION bdb_doTrustCenterRequireKeyExchange,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_event_loop
        FUNCTION bdb_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_initialization
        PUBLIC bdb_isDeviceNonFactoryNew
        FUNCTION bdb_isDeviceNonFactoryNew,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_nwkFormationAttempt
        FUNCTION bdb_nwkFormationAttempt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_nwkJoiningFormation,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION bdb_nwkSteeringDeviceOnNwk,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_parentLost
        FUNCTION bdb_parentLost,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_rejoinNwk
        FUNCTION bdb_rejoinNwk,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_reportCommissioningState
        FUNCTION bdb_reportCommissioningState,0a1203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setChannel
        FUNCTION bdb_setChannel,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC bdb_setChannelAttribute
        FUNCTION bdb_setChannelAttribute,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_setCommissioningGroupID
        FUNCTION bdb_setCommissioningGroupID,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setFN
        FUNCTION bdb_setFN,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setJoinUsesInstallCodeKey
        FUNCTION bdb_setJoinUsesInstallCodeKey,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setNodeIsOnANetwork
        FUNCTION bdb_setNodeIsOnANetwork,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_setTCRequireKeyExchange
        FUNCTION bdb_setTCRequireKeyExchange,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_startResumeCommissioningProcess,0a1203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC bdb_touchlinkSendFNReset
        FUNCTION bdb_touchlinkSendFNReset,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_zclRespondentListClean
        FUNCTION bdb_zclRespondentListClean,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION gp_ChangeChannelReq,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC pRespondentCurr
        PUBLIC pRespondentHead
        PUBLIC pRespondentNext
        PUBLIC touchLinkTargetEnabled
        PUBLIC vDoPrimaryScan
        PUBLIC zgBdbInstallCodeCRC
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_AddTCLinkKey  SYMBOL "APSME_AddTCLinkKey"
`??APSME_AddTCLinkKey::?relay` SYMBOL "?relay", APSME_AddTCLinkKey
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
APSME_SearchTCLinkKeyEntry SYMBOL "APSME_SearchTCLinkKeyEntry"
`??APSME_SearchTCLinkKeyEntry::?relay` SYMBOL "?relay", APSME_SearchTCLinkKeyEntry
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
`?<Name GP_DataCnf 8>` SYMBOL "GP_DataCnf"
`??GP_DataCnf::?relay` SYMBOL "?relay", `?<Name GP_DataCnf 8>`
`?<Name GP_DataInd 10>` SYMBOL "GP_DataInd"
`??GP_DataInd::?relay` SYMBOL "?relay", `?<Name GP_DataInd 10>`
`?<Name GP_SecReq 12>` SYMBOL "GP_SecReq"
`??GP_SecReq::?relay` SYMBOL "?relay", `?<Name GP_SecReq 12>`
NLME_ReJoinRequest  SYMBOL "NLME_ReJoinRequest"
`??NLME_ReJoinRequest::?relay` SYMBOL "?relay", NLME_ReJoinRequest
NLME_ReJoinRequestUnsecure SYMBOL "NLME_ReJoinRequestUnsecure"
`??NLME_ReJoinRequestUnsecure::?relay` SYMBOL "?relay", NLME_ReJoinRequestUnsecure
NLME_ResetRequest   SYMBOL "NLME_ResetRequest"
`??NLME_ResetRequest::?relay` SYMBOL "?relay", NLME_ResetRequest
ZDApp_ChangeState   SYMBOL "ZDApp_ChangeState"
`??ZDApp_ChangeState::?relay` SYMBOL "?relay", ZDApp_ChangeState
ZDApp_ReadNetworkRestoreState SYMBOL "ZDApp_ReadNetworkRestoreState"
`??ZDApp_ReadNetworkRestoreState::?relay` SYMBOL "?relay", ZDApp_ReadNetworkRestoreState
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
`??ZDApp_ResetTimerStart::?relay` SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
`??ZDApp_RestoreNwkKey::?relay` SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_RestoreNwkSecMaterial SYMBOL "ZDApp_RestoreNwkSecMaterial"
`??ZDApp_RestoreNwkSecMaterial::?relay` SYMBOL "?relay", ZDApp_RestoreNwkSecMaterial
ZDOInitDeviceEx     SYMBOL "ZDOInitDeviceEx"
`??ZDOInitDeviceEx::?relay` SYMBOL "?relay", ZDOInitDeviceEx
ZDO_ParseNodeDescRsp SYMBOL "ZDO_ParseNodeDescRsp"
`??ZDO_ParseNodeDescRsp::?relay` SYMBOL "?relay", ZDO_ParseNodeDescRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDSecMgrAPSRemove   SYMBOL "ZDSecMgrAPSRemove"
`??ZDSecMgrAPSRemove::?relay` SYMBOL "?relay", ZDSecMgrAPSRemove
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
`??ZDSecMgrAddrClear::?relay` SYMBOL "?relay", ZDSecMgrAddrClear
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
bdb_ProcessIEEEAddrRsp SYMBOL "bdb_ProcessIEEEAddrRsp"
`??bdb_ProcessIEEEAddrRsp::?relay` SYMBOL "?relay", bdb_ProcessIEEEAddrRsp
bdb_ProcessRespondentList SYMBOL "bdb_ProcessRespondentList"
`??bdb_ProcessRespondentList::?relay` SYMBOL "?relay", bdb_ProcessRespondentList
bdb_ProcessSimpleDesc SYMBOL "bdb_ProcessSimpleDesc"
`??bdb_ProcessSimpleDesc::?relay` SYMBOL "?relay", bdb_ProcessSimpleDesc
bdb_RepConstructReportingData SYMBOL "bdb_RepConstructReportingData"
`??bdb_RepConstructReportingData::?relay` SYMBOL "?relay", bdb_RepConstructReportingData
bdb_RepInit         SYMBOL "bdb_RepInit"
`??bdb_RepInit::?relay` SYMBOL "?relay", bdb_RepInit
bdb_RepProcessEvent SYMBOL "bdb_RepProcessEvent"
`??bdb_RepProcessEvent::?relay` SYMBOL "?relay", bdb_RepProcessEvent
bdb_RepUpdateMarkBindings SYMBOL "bdb_RepUpdateMarkBindings"
`??bdb_RepUpdateMarkBindings::?relay` SYMBOL "?relay", bdb_RepUpdateMarkBindings
bdb_SendIdentifyQuery SYMBOL "bdb_SendIdentifyQuery"
`??bdb_SendIdentifyQuery::?relay` SYMBOL "?relay", bdb_SendIdentifyQuery
bdb_exitFindingBindingWStatus SYMBOL "bdb_exitFindingBindingWStatus"
`??bdb_exitFindingBindingWStatus::?relay` SYMBOL "?relay", bdb_exitFindingBindingWStatus
bdb_getRespondentRetry SYMBOL "bdb_getRespondentRetry"
`??bdb_getRespondentRetry::?relay` SYMBOL "?relay", bdb_getRespondentRetry
bdb_setEpDescListToActiveEndpoint SYMBOL "bdb_setEpDescListToActiveEndpoint"
`??bdb_setEpDescListToActiveEndpoint::?relay` SYMBOL "?relay", bdb_setEpDescListToActiveEndpoint
bdb_setNodeJoinLinkKeyType SYMBOL "bdb_setNodeJoinLinkKeyType"
`??bdb_setNodeJoinLinkKeyType::?relay` SYMBOL "?relay", bdb_setNodeJoinLinkKeyType
bdb_tcLinkKeyExchangeAttempt SYMBOL "bdb_tcLinkKeyExchangeAttempt"
`??bdb_tcLinkKeyExchangeAttempt::?relay` SYMBOL "?relay", bdb_tcLinkKeyExchangeAttempt
`?<Name gp_CheckAnnouncedDev 72>` SYMBOL "gp_CheckAnnouncedDevice"
`??gp_CheckAnnouncedDevice::?relay` SYMBOL "?relay", `?<Name gp_CheckAnnouncedDev 72>`
gp_RegisterGPChangeChannelReqForBDBCB SYMBOL "gp_RegisterGPChangeChannelReqForBDBCB"
`??gp_RegisterGPChangeChannelReqForBDBCB::?relay` SYMBOL "?relay", gp_RegisterGPChangeChannelReqForBDBCB
gp_endpointInit     SYMBOL "gp_endpointInit"
`??gp_endpointInit::?relay` SYMBOL "?relay", gp_endpointInit
`?<Name gp_expireDuplicateFi 78>` SYMBOL "gp_expireDuplicateFiltering"
`??gp_expireDuplicateFiltering::?relay` SYMBOL "?relay", `?<Name gp_expireDuplicateFi 78>`
`?<Name gp_returnOperational 80>` SYMBOL "gp_returnOperationalChannel"
`??gp_returnOperationalChannel::?relay` SYMBOL "?relay", `?<Name gp_returnOperational 80>`
`?<Name gp_stopCommissioning 82>` SYMBOL "gp_stopCommissioningMode"
`??gp_stopCommissioningMode::?relay` SYMBOL "?relay", `?<Name gp_stopCommissioning 82>`
nwk_setStateIdle    SYMBOL "nwk_setStateIdle"
`??nwk_setStateIdle::?relay` SYMBOL "?relay", nwk_setStateIdle
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_delete      SYMBOL "osal_nv_delete"
`??osal_nv_delete::?relay` SYMBOL "?relay", osal_nv_delete
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_reload_timer SYMBOL "osal_start_reload_timer"
`??osal_start_reload_timer::?relay` SYMBOL "?relay", osal_start_reload_timer
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sspMMOHash          SYMBOL "sspMMOHash"
`??sspMMOHash::?relay` SYMBOL "?relay", sspMMOHash
zclFindAttrRec      SYMBOL "zclFindAttrRec"
`??zclFindAttrRec::?relay` SYMBOL "?relay", zclFindAttrRec
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
bdb_AddRespondentNode SYMBOL "bdb_AddRespondentNode"
`??bdb_AddRespondentNode::?relay` SYMBOL "?relay", bdb_AddRespondentNode
bdb_ClearNetworkParams SYMBOL "bdb_ClearNetworkParams"
`??bdb_ClearNetworkParams::?relay` SYMBOL "?relay", bdb_ClearNetworkParams
bdb_CreateRespondentList SYMBOL "bdb_CreateRespondentList"
`??bdb_CreateRespondentList::?relay` SYMBOL "?relay", bdb_CreateRespondentList
bdb_GenerateInstallCodeCRC SYMBOL "bdb_GenerateInstallCodeCRC"
`??bdb_GenerateInstallCodeCRC::?relay` SYMBOL "?relay", bdb_GenerateInstallCodeCRC
bdb_Init            SYMBOL "bdb_Init"
`??bdb_Init::?relay` SYMBOL "?relay", bdb_Init
bdb_NetworkRestoredResumeState SYMBOL "bdb_NetworkRestoredResumeState"
`??bdb_NetworkRestoredResumeState::?relay` SYMBOL "?relay", bdb_NetworkRestoredResumeState
bdb_NotifyCommissioningModeStart SYMBOL "bdb_NotifyCommissioningModeStart"
`??bdb_NotifyCommissioningModeStart::?relay` SYMBOL "?relay", bdb_NotifyCommissioningModeStart
bdb_ProcessNodeDescRsp SYMBOL "bdb_ProcessNodeDescRsp"
`??bdb_ProcessNodeDescRsp::?relay` SYMBOL "?relay", bdb_ProcessNodeDescRsp
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_RegisterTCLinkKeyExchangeProcessCB SYMBOL "bdb_RegisterTCLinkKeyExchangeProcessCB"
`??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela` SYMBOL "?relay", bdb_RegisterTCLinkKeyExchangeProcessCB
bdb_SendMsg         SYMBOL "bdb_SendMsg"
`??bdb_SendMsg::?relay` SYMBOL "?relay", bdb_SendMsg
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_TCAddJoiningDevice SYMBOL "bdb_TCAddJoiningDevice"
`??bdb_TCAddJoiningDevice::?relay` SYMBOL "?relay", bdb_TCAddJoiningDevice
bdb_TCjoiningDeviceComplete SYMBOL "bdb_TCjoiningDeviceComplete"
`??bdb_TCjoiningDeviceComplete::?relay` SYMBOL "?relay", bdb_TCjoiningDeviceComplete
bdb_ZclIdentifyCmdInd SYMBOL "bdb_ZclIdentifyCmdInd"
`??bdb_ZclIdentifyCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyCmdInd
bdb_addInstallCode  SYMBOL "bdb_addInstallCode"
`??bdb_addInstallCode::?relay` SYMBOL "?relay", bdb_addInstallCode
bdb_calculateCCITT_CRC SYMBOL "bdb_calculateCCITT_CRC"
`??bdb_calculateCCITT_CRC::?relay` SYMBOL "?relay", bdb_calculateCCITT_CRC
bdb_crcBitByBitFast SYMBOL "bdb_crcBitByBitFast"
`??bdb_crcBitByBitFast::?relay` SYMBOL "?relay", bdb_crcBitByBitFast
bdb_crcInit         SYMBOL "bdb_crcInit"
`??bdb_crcInit::?relay` SYMBOL "?relay", bdb_crcInit
bdb_crcReflect      SYMBOL "bdb_crcReflect"
`??bdb_crcReflect::?relay` SYMBOL "?relay", bdb_crcReflect
bdb_doTrustCenterRequireKeyExchange SYMBOL "bdb_doTrustCenterRequireKeyExchange"
`??bdb_doTrustCenterRequireKeyExchange::?relay` SYMBOL "?relay", bdb_doTrustCenterRequireKeyExchange
bdb_event_loop      SYMBOL "bdb_event_loop"
`??bdb_event_loop::?relay` SYMBOL "?relay", bdb_event_loop
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
bdb_isDeviceNonFactoryNew SYMBOL "bdb_isDeviceNonFactoryNew"
`??bdb_isDeviceNonFactoryNew::?relay` SYMBOL "?relay", bdb_isDeviceNonFactoryNew
bdb_nwkFormationAttempt SYMBOL "bdb_nwkFormationAttempt"
`??bdb_nwkFormationAttempt::?relay` SYMBOL "?relay", bdb_nwkFormationAttempt
bdb_parentLost      SYMBOL "bdb_parentLost"
`??bdb_parentLost::?relay` SYMBOL "?relay", bdb_parentLost
bdb_rejoinNwk       SYMBOL "bdb_rejoinNwk"
`??bdb_rejoinNwk::?relay` SYMBOL "?relay", bdb_rejoinNwk
bdb_reportCommissioningState SYMBOL "bdb_reportCommissioningState"
`??bdb_reportCommissioningState::?relay` SYMBOL "?relay", bdb_reportCommissioningState
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
bdb_setChannel      SYMBOL "bdb_setChannel"
`??bdb_setChannel::?relay` SYMBOL "?relay", bdb_setChannel
bdb_setChannelAttribute SYMBOL "bdb_setChannelAttribute"
`??bdb_setChannelAttribute::?relay` SYMBOL "?relay", bdb_setChannelAttribute
bdb_setCommissioningGroupID SYMBOL "bdb_setCommissioningGroupID"
`??bdb_setCommissioningGroupID::?relay` SYMBOL "?relay", bdb_setCommissioningGroupID
bdb_setFN           SYMBOL "bdb_setFN"
`??bdb_setFN::?relay` SYMBOL "?relay", bdb_setFN
bdb_setJoinUsesInstallCodeKey SYMBOL "bdb_setJoinUsesInstallCodeKey"
`??bdb_setJoinUsesInstallCodeKey::?relay` SYMBOL "?relay", bdb_setJoinUsesInstallCodeKey
bdb_setNodeIsOnANetwork SYMBOL "bdb_setNodeIsOnANetwork"
`??bdb_setNodeIsOnANetwork::?relay` SYMBOL "?relay", bdb_setNodeIsOnANetwork
bdb_setTCRequireKeyExchange SYMBOL "bdb_setTCRequireKeyExchange"
`??bdb_setTCRequireKeyExchange::?relay` SYMBOL "?relay", bdb_setTCRequireKeyExchange
bdb_touchlinkSendFNReset SYMBOL "bdb_touchlinkSendFNReset"
`??bdb_touchlinkSendFNReset::?relay` SYMBOL "?relay", bdb_touchlinkSendFNReset
bdb_zclRespondentListClean SYMBOL "bdb_zclRespondentListClean"
`??bdb_zclRespondentListClean::?relay` SYMBOL "?relay", bdb_zclRespondentListClean

        EXTERN `??APSME_AddTCLinkKey::?relay`
        FUNCTION `??APSME_AddTCLinkKey::?relay`,00H
        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??APSME_SearchTCLinkKeyEntry::?relay`
        FUNCTION `??APSME_SearchTCLinkKeyEntry::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??GP_DataCnf::?relay`
        FUNCTION `??GP_DataCnf::?relay`,00H
        EXTERN `??GP_DataInd::?relay`
        FUNCTION `??GP_DataInd::?relay`,00H
        EXTERN `??GP_SecReq::?relay`
        FUNCTION `??GP_SecReq::?relay`,00H
        EXTERN `??NLME_ReJoinRequest::?relay`
        FUNCTION `??NLME_ReJoinRequest::?relay`,00H
        EXTERN `??NLME_ReJoinRequestUnsecure::?relay`
        FUNCTION `??NLME_ReJoinRequestUnsecure::?relay`,00H
        EXTERN `??NLME_ResetRequest::?relay`
        FUNCTION `??NLME_ResetRequest::?relay`,00H
        EXTERN `??ZDApp_ChangeState::?relay`
        FUNCTION `??ZDApp_ChangeState::?relay`,00H
        EXTERN `??ZDApp_ReadNetworkRestoreState::?relay`
        FUNCTION `??ZDApp_ReadNetworkRestoreState::?relay`,00H
        EXTERN `??ZDApp_ResetTimerStart::?relay`
        FUNCTION `??ZDApp_ResetTimerStart::?relay`,00H
        EXTERN `??ZDApp_RestoreNwkKey::?relay`
        FUNCTION `??ZDApp_RestoreNwkKey::?relay`,00H
        EXTERN `??ZDApp_RestoreNwkSecMaterial::?relay`
        FUNCTION `??ZDApp_RestoreNwkSecMaterial::?relay`,00H
        EXTERN `??ZDOInitDeviceEx::?relay`
        FUNCTION `??ZDOInitDeviceEx::?relay`,00H
        EXTERN `??ZDO_ParseNodeDescRsp::?relay`
        FUNCTION `??ZDO_ParseNodeDescRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??ZDSecMgrAPSRemove::?relay`
        FUNCTION `??ZDSecMgrAPSRemove::?relay`,00H
        EXTERN `??ZDSecMgrAddrClear::?relay`
        FUNCTION `??ZDSecMgrAddrClear::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??bdb_ProcessIEEEAddrRsp::?relay`
        FUNCTION `??bdb_ProcessIEEEAddrRsp::?relay`,00H
        EXTERN `??bdb_ProcessRespondentList::?relay`
        FUNCTION `??bdb_ProcessRespondentList::?relay`,00H
        EXTERN `??bdb_ProcessSimpleDesc::?relay`
        FUNCTION `??bdb_ProcessSimpleDesc::?relay`,00H
        EXTERN `??bdb_RepConstructReportingData::?relay`
        FUNCTION `??bdb_RepConstructReportingData::?relay`,00H
        EXTERN `??bdb_RepInit::?relay`
        FUNCTION `??bdb_RepInit::?relay`,00H
        EXTERN `??bdb_RepProcessEvent::?relay`
        FUNCTION `??bdb_RepProcessEvent::?relay`,00H
        EXTERN `??bdb_RepUpdateMarkBindings::?relay`
        FUNCTION `??bdb_RepUpdateMarkBindings::?relay`,00H
        EXTERN `??bdb_SendIdentifyQuery::?relay`
        FUNCTION `??bdb_SendIdentifyQuery::?relay`,00H
        EXTERN `??bdb_exitFindingBindingWStatus::?relay`
        FUNCTION `??bdb_exitFindingBindingWStatus::?relay`,00H
        EXTERN `??bdb_getRespondentRetry::?relay`
        FUNCTION `??bdb_getRespondentRetry::?relay`,00H
        EXTERN `??bdb_setEpDescListToActiveEndpoint::?relay`
        FUNCTION `??bdb_setEpDescListToActiveEndpoint::?relay`,00H
        EXTERN `??bdb_setNodeJoinLinkKeyType::?relay`
        FUNCTION `??bdb_setNodeJoinLinkKeyType::?relay`,00H
        EXTERN `??bdb_tcLinkKeyExchangeAttempt::?relay`
        FUNCTION `??bdb_tcLinkKeyExchangeAttempt::?relay`,00H
        EXTERN `??gp_CheckAnnouncedDevice::?relay`
        FUNCTION `??gp_CheckAnnouncedDevice::?relay`,00H
        EXTERN `??gp_RegisterGPChangeChannelReqForBDBCB::?relay`
        FUNCTION `??gp_RegisterGPChangeChannelReqForBDBCB::?relay`,00H
        EXTERN `??gp_endpointInit::?relay`
        FUNCTION `??gp_endpointInit::?relay`,00H
        EXTERN `??gp_expireDuplicateFiltering::?relay`
        FUNCTION `??gp_expireDuplicateFiltering::?relay`,00H
        EXTERN `??gp_returnOperationalChannel::?relay`
        FUNCTION `??gp_returnOperationalChannel::?relay`,00H
        EXTERN `??gp_stopCommissioningMode::?relay`
        FUNCTION `??gp_stopCommissioningMode::?relay`,00H
        EXTERN `??nwk_setStateIdle::?relay`
        FUNCTION `??nwk_setStateIdle::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_delete::?relay`
        FUNCTION `??osal_nv_delete::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_reload_timer::?relay`
        FUNCTION `??osal_start_reload_timer::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sspMMOHash::?relay`
        FUNCTION `??sspMMOHash::?relay`,00H
        EXTERN `??zclFindAttrRec::?relay`
        FUNCTION `??zclFindAttrRec::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN AIB_apsTrustCenterAddress
        EXTERN APSME_AddTCLinkKey
        FUNCTION APSME_AddTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SearchTCLinkKeyEntry
        FUNCTION APSME_SearchTCLinkKeyEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN GP_CheckAnnouncedDeviceGCB
        EXTERN GP_DataCnfGCB
        EXTERN GP_DataIndGCB
        EXTERN GP_SecReqGCB
        EXTERN GP_aliasConflictAnnce
        EXTERN GP_endpointInitGCB
        EXTERN GP_expireDuplicateFilteringGCB
        EXTERN GP_returnOperationalChannelGCB
        EXTERN GP_stopCommissioningModeGCB
        EXTERN NLME_ReJoinRequest
        FUNCTION NLME_ReJoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequestUnsecure
        FUNCTION NLME_ReJoinRequestUnsecure,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ResetRequest
        FUNCTION NLME_ResetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN TCLinkKeyFrmCntr
        EXTERN ZDApp_ChangeState
        FUNCTION ZDApp_ChangeState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_RestoreNwkSecMaterial
        FUNCTION ZDApp_RestoreNwkSecMaterial,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDeviceEx
        FUNCTION ZDOInitDeviceEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseNodeDescRsp
        FUNCTION ZDO_ParseNodeDescRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UseExtendedPANID
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrAPSRemove
        FUNCTION ZDSecMgrAPSRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aliasConflictAnnce
        EXTERN bdbIndentifyActiveEndpoint
        EXTERN bdb_ProcessIEEEAddrRsp
        FUNCTION bdb_ProcessIEEEAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ProcessRespondentList
        FUNCTION bdb_ProcessRespondentList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ProcessSimpleDesc
        FUNCTION bdb_ProcessSimpleDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepConstructReportingData
        FUNCTION bdb_RepConstructReportingData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepInit
        FUNCTION bdb_RepInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepProcessEvent
        FUNCTION bdb_RepProcessEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepUpdateMarkBindings
        FUNCTION bdb_RepUpdateMarkBindings,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_SendIdentifyQuery
        FUNCTION bdb_SendIdentifyQuery,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_exitFindingBindingWStatus
        FUNCTION bdb_exitFindingBindingWStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_getRespondentRetry
        FUNCTION bdb_getRespondentRetry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setEpDescListToActiveEndpoint
        FUNCTION bdb_setEpDescListToActiveEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setNodeJoinLinkKeyType
        FUNCTION bdb_setNodeJoinLinkKeyType,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_tcLinkKeyExchangeAttempt
        FUNCTION bdb_tcLinkKeyExchangeAttempt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_RegisterGPChangeChannelReqForBDBCB
        FUNCTION gp_RegisterGPChangeChannelReqForBDBCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_endpointInit
        FUNCTION gp_endpointInit,0602H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_setStateIdle
        FUNCTION nwk_setStateIdle,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_isbufset
        FUNCTION osal_isbufset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_delete
        FUNCTION osal_nv_delete,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_reload_timer
        FUNCTION osal_start_reload_timer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pbindAddEntry
        EXTERN pfnIdentifyTimeChangeCB
        EXTERN requestNewTrustCenterLinkKey
        EXTERN runtimeChannel
        EXTERN sspMMOHash
        FUNCTION sspMMOHash,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclFindAttrRec
        FUNCTION zclFindAttrRec,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_TaskID
        EXTERN zgAllowInstallCodes
        EXTERN zgDefaultChannelList
        EXTERN zgDeviceLogicalType
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
//    1 /**************************************************************************************************
//    2   Filename:       bdb.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the Base Device Behavior functions and attributes.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "bdb.h"
//   45 #include "ZDApp.h"
//   46 #include "OSAL.h"
//   47 #include "ZDConfig.h"
//   48 #include "hal_led.h"
//   49 #include "ZDObject.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AddrMgr.h"
//   52 #include "ZDSecMgr.h"
//   53 #include "nwk.h"
//   54 #include "nwk_util.h"
//   55 #include "ssp_hash.h"
//   56 #ifdef BDB_REPORTING
//   57 #include "bdb_Reporting.h"
//   58 #endif 
//   59 
//   60 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//   61 #include "gp_interface.h"
//   62 #include "gp_common.h"
//   63 #include "dgp_stub.h"
//   64 #endif
//   65 
//   66 #include "bdb_interface.h"
//   67 
//   68 #if defined ( INTER_PAN ) 
//   69 #if defined ( BDB_TL_INITIATOR )  
//   70 #include "bdb_touchlink_initiator.h"
//   71 #endif
//   72 #if defined ( BDB_TL_TARGET )  
//   73 #include "bdb_touchlink_target.h"
//   74 #endif
//   75 #endif
//   76    
//   77 #if defined ( INTER_PAN ) && ( defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET ) )
//   78   #include "bdb_touchlink.h"
//   79 #endif
//   80  
//   81 #ifdef MT_APP_CNF_FUNC
//   82 #include "MT_APP_CONFIG.h"
//   83 #endif
//   84    
//   85  /*********************************************************************
//   86  * MACROS
//   87  */
//   88 //This is actually the channels used
//   89 #define vScanChannels  zgDefaultChannelList
//   90    
//   91  /*********************************************************************
//   92  * CONSTANTS
//   93  */
//   94 
//   95 #define NUMBER_OF_CHANNELS     16
//   96 
//   97 #define CHANNEL_11_MASK_POS    11
//   98 #define CHANNEL_26_MASK_POS    26
//   99    

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  100 uint8 bdb_FB_InitiatorCurrentCyclesNumber = 0; //last cycle is #1 (i.e. cycles-left = (bdb_FB_InitiatorCurrentCyclesNumber - 1))
bdb_FB_InitiatorCurrentCyclesNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  101 
//  102 /*********************************************************************
//  103  * TYPEDEFS
//  104  */
//  105  
//  106  
//  107  /*********************************************************************
//  108  * GLOBAL VARIABLES
//  109  */
//  110 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  111 byte bdb_TaskID;
bdb_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  112 bdbAttributes_t bdbAttributes = BDB_ATTRIBUTES_DEFAULT_CONFIG;
bdbAttributes:
        DATA8
        DS 18
        REQUIRE `?<Initializer for bdbAttributes>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  113 epList_t *bdb_HeadEpDescriptorList = NULL;
bdb_HeadEpDescriptorList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  114 epList_t *bdb_CurrEpDescriptorList = NULL;
bdb_CurrEpDescriptorList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  115 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  116 bdbFindingBindingRespondent_t *pRespondentHead = NULL;
pRespondentHead:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  117 bdbFindingBindingRespondent_t *pRespondentCurr = NULL;
pRespondentCurr:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  118 bdbFindingBindingRespondent_t *pRespondentNext = NULL;
pRespondentNext:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  119 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  120 bdbCommissioningProcedureState_t bdbCommissioningProcedureState; 
bdbCommissioningProcedureState:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  121 bool bdb_initialization = FALSE;  //Variable to tell if the initialization process has been started
bdb_initialization:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  122 
//  123 //Nwk formation and nwk steering for nodes not in nwk

        RSEG XDATA_I:XDATA:NOROOT(0)
//  124 bool vDoPrimaryScan = TRUE;
vDoPrimaryScan:
        DATA8
        DS 1
        REQUIRE `?<Initializer for vDoPrimaryScan>`
        REQUIRE __INIT_XDATA_I
//  125 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  126 uint8 zgBdbInstallCodeCRC[INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN] = {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5};
zgBdbInstallCodeCRC:
        DATA8
        DS 18
        REQUIRE `?<Initializer for zgBdbInstallCodeCRC>`
        REQUIRE __INIT_XDATA_I
//  127 
//  128 //Pointer of the nwk being tried in association process
//  129 #if (ZG_BUILD_JOINING_TYPE)
//  130 static networkDesc_t *pBDBListNwk = NULL;
//  131 #endif
//  132 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 uint8 bdb_ZclTransactionSequenceNumber=0x00;
bdb_ZclTransactionSequenceNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  134 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 bool touchLinkTargetEnabled = FALSE;
touchLinkTargetEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  136 
//  137  /*********************************************************************
//  138  * EXTERNAL VARIABLES
//  139  */
//  140 
//  141 extern devStartModes_t devStartMode;
//  142 extern bool  requestNewTrustCenterLinkKey;
//  143 extern uint32 requestLinkKeyTimeout;
//  144 extern uint32 ZDApp_SavedPollRate;
//  145 
//  146 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
//  147 extern bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChangeCB;
//  148 extern uint8 bdbIndentifyActiveEndpoint;
//  149 #endif
//  150 
//  151 extern bdbFindingBindingRespondent_t *pRespondentNext;
//  152 
//  153 #ifndef DISABLE_GREENPOWER_BASIC_PROXY
//  154 extern ZDO_DeviceAnnce_t aliasConflictAnnce;
//  155 #endif
//  156 
//  157 /*********************************************************************
//  158  * EXTERNAL FUNCTIONS
//  159  */
//  160 
//  161 extern void ZDApp_ResetTimerStart( uint16 delay );
//  162 extern void ZDApp_NodeProfileSync( uint8 stackProfile );
//  163 extern uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
//  164 extern uint8 ZDApp_ReadNetworkRestoreState( void );
//  165 
//  166 extern bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
//  167 extern void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
//  168 extern void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
//  169 
//  170 /*********************************************************************
//  171  * LOCAL VARIABLES
//  172  */
//  173 #if (ZG_BUILD_JOINING_TYPE)
//  174   static uint8 bdb_nwkAssocRetriesCount = 0;
//  175 #endif
//  176 #if (ZG_BUILD_COORDINATOR_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  177   static bdb_joiningDeviceList_t *bdb_joiningDeviceList = NULL;
bdb_joiningDeviceList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  178 #endif
//  179   
//  180 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
//  181 //Latch to save the status success of any attempt in the periodic F&B process  

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  182 static uint8 bdb_FBStateSuccessLatch = FALSE;
bdb_FBStateSuccessLatch:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  183 #endif
//  184  /*********************************************************************
//  185  * LOCAL FUNCTIONS
//  186  */
//  187 static void bdb_ProcessOSALMsg(bdbInMsg_t *msgPtr);
//  188 void bdb_NotifyCommissioningModeStart(uint8 commissioningMode);
//  189 static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg);
//  190 
//  191 #if (ZG_BUILD_JOINING_TYPE)
//  192 static void bdb_requestTCStackVersion(void);
//  193 static void bdb_requestTCLinkKey(void);
//  194 static void bdb_requestVerifyTCLinkKey(void);
//  195 static void bdb_tryNwkAssoc(void);
//  196 #endif
//  197 
//  198 
//  199 static void bdb_processTimeout(void);
//  200 static void bdb_startResumeCommissioningProcess(void);
//  201 static void bdb_nwkSteeringDeviceOnNwk(void);
//  202 static void bdb_nwkJoiningFormation(bool isJoining);
//  203 
//  204 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  205 static uint8 gp_ChangeChannelReq(void);
//  206 static void gp_CBInit(void);
//  207 #endif
//  208 
//  209 
//  210 #if (ZG_BUILD_COORDINATOR_TYPE)
//  211 static void bdb_TCProcessJoiningList(void);
//  212 static ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove);
//  213 #endif
//  214 #if (ZG_BUILD_COORDINATOR_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  215 static bdbGCB_TCLinkKeyExchangeProcess_t  pfnTCLinkKeyExchangeProcessCB = NULL;
pfnTCLinkKeyExchangeProcessCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  216 #endif

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  217 static bdbGCB_CommissioningStatus_t       pfnCommissioningStatusCB = NULL; 
pfnCommissioningStatusCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  218 #if (ZG_BUILD_JOINING_TYPE)
//  219 static bdbGCB_CBKETCLinkKeyExchange_t     pfnCBKETCLinkKeyExchange = NULL;
//  220 static bdbGCB_FilterNwkDesc_t             pfnFilterNwkDesc = NULL;   
//  221 #endif
//  222 
//  223 
//  224 
//  225 void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc);
//  226 void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect);
//  227 uint16 bdb_crcReflect (uint16 crc, uint16 bitnum);
//  228 uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect);
//  229 void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg);
//  230 
//  231 /*********************************************************************
//  232  * PUBLIC FUNCTIONS
//  233  *********************************************************************/
//  234 void bdb_filterNwkDisc(void);
//  235 ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk);
//  236 
//  237 ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr);
//  238 void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr);
//  239 
//  240  /*********************************************************************
//  241  * @fn          bdb_Init
//  242  *
//  243  * @brief       Initialization function for the Base Device Behavior.
//  244  *
//  245  * @param       task_id - bdb_TaskID Task ID
//  246  *
//  247  * @return      none
//  248  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  249 void bdb_Init( byte task_id )
bdb_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function bdb_Init
        CODE
//  250 {
        FUNCALL bdb_Init, bdb_RepInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, gp_RegisterGPChangeChannelReqForBDBCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, gp_endpointInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  251   bdb_TaskID = task_id;
        MOV       DPTR,#bdb_TaskID
        MOVX      @DPTR,A
//  252     
//  253 #if (ZG_BUILD_COORDINATOR_TYPE)
//  254   if(ZG_DEVICE_COORDINATOR_TYPE)
//  255   {
//  256     if(bdbAttributes.bdbJoinUsesInstallCodeKey)
        MOV       DPTR,#bdbAttributes + 15
        MOVX      A,@DPTR
        JZ        ??bdb_Init_0
//  257     {
//  258       zgAllowInstallCodes = ZG_IC_MUST_USED;
        MOV       DPTR,#zgAllowInstallCodes
        MOV       A,#0x2
        MOVX      @DPTR,A
//  259     }
//  260   }
//  261 #endif
//  262   
//  263 #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )  
//  264   touchLinkInitiator_InitDevice( );
//  265 #endif
//  266 
//  267 #if (BDB_REPORTING)
//  268   bdb_RepInit();
??bdb_Init_0:
        ; Setup parameters for call to function bdb_RepInit
        LCALL     `??bdb_RepInit::?relay`; Banked call to: bdb_RepInit
//  269 #endif  
//  270   
//  271   //Register ZDO callbacks
//  272   ZDO_RegisterForZDOMsg ( task_id, Node_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x2
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  273 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
//  274   ZDO_RegisterForZDOMsg ( task_id, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x1
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  275   ZDO_RegisterForZDOMsg ( task_id, Simple_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x4
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  276 #endif
//  277   
//  278 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  279   gp_RegisterGPChangeChannelReqForBDBCB(gp_ChangeChannelReq);
        ; Setup parameters for call to function gp_RegisterGPChangeChannelReqForBDBCB
        MOV       R2,#`??gp_ChangeChannelReq::?relay` & 0xff
        MOV       R3,#(`??gp_ChangeChannelReq::?relay` >> 8) & 0xff
        LCALL     `??gp_RegisterGPChangeChannelReqForBDBCB::?relay`; Banked call to: gp_RegisterGPChangeChannelReqForBDBCB
//  280   gp_CBInit();
        MOV       DPTR,#GP_DataCnfGCB
        MOV       A,#`??GP_DataCnf::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??GP_DataCnf::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_endpointInitGCB
        MOV       A,#`??gp_endpointInit::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??gp_endpointInit::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_expireDuplicateFilteringGCB
        MOV       A,#`??gp_expireDuplicateFiltering::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??gp_expireDuplicateFiltering::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_stopCommissioningModeGCB
        MOV       A,#`??gp_stopCommissioningMode::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??gp_stopCommissioningMode::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_returnOperationalChannelGCB
        MOV       A,#`??gp_returnOperationalChannel::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??gp_returnOperationalChannel::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_DataIndGCB
        MOV       A,#`??GP_DataInd::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??GP_DataInd::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_SecReqGCB
        MOV       A,#`??GP_SecReq::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??GP_SecReq::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_CheckAnnouncedDeviceGCB
        MOV       A,#`??gp_CheckAnnouncedDevice::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??gp_CheckAnnouncedDevice::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_aliasConflictAnnce
        MOV       A,#aliasConflictAnnce & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(aliasConflictAnnce >> 8) & 0xff
        MOVX      @DPTR,A
        ; Setup parameters for call to function gp_endpointInit
        LCALL     `??gp_endpointInit::?relay`; Banked call to: gp_endpointInit
//  281 #endif
//  282 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  283 
//  284 /*********************************************************************
//  285  * @fn      bdb_RegisterSimpleDescriptor
//  286  *
//  287  * @brief   Register the Simple descriptor. This function also registers 
//  288  *          the profile's cluster conversion table.
//  289  *
//  290  * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
//  291  *
//  292  * @return  none
//  293  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  294 void bdb_RegisterSimpleDescriptor( SimpleDescriptionFormat_t *simpleDesc )
bdb_RegisterSimpleDescriptor:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function bdb_RegisterSimpleDescriptor
        CODE
//  295 {
        FUNCALL bdb_RegisterSimpleDescriptor, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RegisterSimpleDescriptor, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  296   endPointDesc_t *epDesc;
//  297 
//  298   // Register the application's endpoint descriptor
//  299   //  - This memory is allocated and never freed.
//  300   epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x7
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
//  301   if ( epDesc )
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RegisterSimpleDescriptor_0
//  302   {
//  303     // Fill out the endpoint description.
//  304     epDesc->endPoint = simpleDesc->EndPoint;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
//  305     epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
        INC       DPTR
        INC       DPTR
        MOV       A,#zcl_TaskID & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(zcl_TaskID >> 8) & 0xff
        LCALL     ?Subroutine11 & 0xFFFF
//  306     epDesc->simpleDesc = simpleDesc;
??CrossCallReturnLabel_0:
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        LCALL     ?Subroutine11 & 0xFFFF
//  307     epDesc->latencyReq = noLatencyReqs;
??CrossCallReturnLabel_1:
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  308 
//  309     // Register the endpoint description with the AF
//  310     afRegister( epDesc );
        ; Setup parameters for call to function afRegister
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  311   }
//  312 }
??bdb_RegisterSimpleDescriptor_0:
        LJMP      ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function bdb_RegisterSimpleDescriptor
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function bdb_RegisterSimpleDescriptor
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//  313 
//  314 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
//  315 /*********************************************************************
//  316  * @fn      bdb_ZclIdentifyCmdInd
//  317  *
//  318  * @brief   Callback from the ZCL General Cluster Library when
//  319  *          it received an Identity Command for this application.
//  320  *
//  321  * @param   identifyTime - the number of seconds to identify yourself
//  322  * @param   endpoint - destination endpoint
//  323  *
//  324  * @return  none
//  325  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  326 void bdb_ZclIdentifyCmdInd( uint16 identifyTime, uint8 endpoint )
bdb_ZclIdentifyCmdInd:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
        CODE
//  327 {
        FUNCALL bdb_ZclIdentifyCmdInd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyCmdInd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyCmdInd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R1
//  328   zclAttrRec_t identifyAttrRec;
//  329   
//  330   if ( zclFindAttrRec( endpoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  331                       ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       R1,?V0
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  332   {
//  333     //If we are processing an actual change
//  334     if(*(uint16*)identifyAttrRec.attr.dataPtr != identifyTime)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_22:
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_ZclIdentifyCmdInd_1
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bdb_ZclIdentifyCmdInd_1:
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  335     {
//  336       if ( identifyTime > 0 )
        MOV       A,R6
        ORL       A,R7
        MOV       DPL,R0
        MOV       DPH,R1
        JZ        ??bdb_ZclIdentifyCmdInd_2
//  337       {
//  338         *((uint16*)identifyAttrRec.attr.dataPtr) = identifyTime;
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  339         osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R2,#0x0
        MOV       R3,#0x20
        LCALL     ??Subroutine54_0 & 0xFFFF
//  340       }
??CrossCallReturnLabel_100:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        SJMP      ??CrossCallReturnLabel_111
//  341       else if ( identifyTime <= 0 )
//  342       {
//  343         *((uint16*)identifyAttrRec.attr.dataPtr) = 0;
??bdb_ZclIdentifyCmdInd_2:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  344         osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,A
        MOV       R3,#0x20
        LCALL     ??Subroutine58_0 & 0xFFFF
//  345       }
//  346       
//  347       if(pfnIdentifyTimeChangeCB != NULL)
??CrossCallReturnLabel_111:
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_76:
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  348       {
//  349         pfnIdentifyTimeChangeCB(endpoint);
        ; Setup parameters for indirect call
        MOV       R1,?V0
        LCALL     ??Subroutine51_0 & 0xFFFF
//  350       }
//  351     }
//  352   }
??CrossCallReturnLabel_68:
        LCALL     ?CALL_IND
//  353 }
??bdb_ZclIdentifyCmdInd_0:
        MOV       A,#0x8
        LJMP      ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock6
//  354 #endif
//  355 
//  356 
//  357 #if (ZG_BUILD_JOINING_TYPE) 
//  358  /*********************************************************************
//  359  * @fn          bdb_setActiveCentralizedLinkKey
//  360  *
//  361  * @brief       Set the active centralized key to be used, Global or IC derived. See zstack_CentralizedLinkKeyModes_t
//  362  *
//  363  * @param       zstack_CentralizedLinkKeyModes - Key to be used for joining centralized network
//  364  * @param       pKey - Key to be used (if any)
//  365  *
//  366  * @return      ZStatus_t - ZFailure when no valid BDB_INSTALL_CODE_USE is used
//  367  *                          ZInvalidParameter when IC buffer is null
//  368  */
//  369 ZStatus_t bdb_setActiveCentralizedLinkKey(uint8 zstack_CentralizedLinkKeyModes, uint8* pKey)
//  370 {
//  371   ZStatus_t Status;
//  372 
//  373   uint8 extAddr[Z_EXTADDR_LEN];
//  374 
//  375   osal_memset(extAddr,0x00,Z_EXTADDR_LEN);
//  376 
//  377   if(pKey == NULL)
//  378   {
//  379     return ZInvalidParameter;
//  380   }
//  381 
//  382   //Clear it, if the request requires it, it will be set
//  383   gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = FALSE;
//  384 
//  385   switch(zstack_CentralizedLinkKeyModes)
//  386   {
//  387     case zstack_UseDefaultGlobalTrustCenterLinkKey:
//  388       //Set the default key to be used in centralized networks as defaultTCLinkKey
//  389       Status = APSME_SetDefaultKey();
//  390     break;
//  391 
//  392     case zstack_UseInstallCodeWithFallback:
//  393       //same as zstack_UseInstallCode but attempt default TRUE
//  394       gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
//  395     case zstack_UseInstallCode:
//  396        //Set the install code as default key
//  397       Status = bdb_addInstallCode(pKey,extAddr);
//  398     break;
//  399 
//  400     case zstack_UseAPSKeyWithFallback:
//  401       //same as zstack_UseAPSKey but attempt default TRUE
//  402       gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
//  403     case zstack_UseAPSKey:
//  404       //Set the key as global default
//  405       Status = APSME_AddTCLinkKey(pKey,extAddr);
//  406     break;
//  407     
//  408     default:
//  409       Status = ZInvalidParameter;
//  410     break;
//  411   }
//  412 
//  413   return Status;
//  414 }
//  415 #endif
//  416 
//  417 
//  418     
//  419   
//  420 /******************************************************************************
//  421  * @fn          bdb_addInstallCode
//  422  *
//  423  * @brief       Interface to add an install codes and adds a APS TC Link key.
//  424  *
//  425  * @param       pInstallCode - [in] Install Code with CRC (buffer size of 18 bytes).
//  426  *              pExt - [in] Extended address of the node.
//  427  *
//  428  * @return      ZStatus_t
//  429  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  430 ZStatus_t bdb_addInstallCode(uint8* pInstallCode, uint8* pExt)
bdb_addInstallCode:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function bdb_addInstallCode
        CODE
//  431 {
        FUNCALL bdb_addInstallCode, bdb_GenerateInstallCodeCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, sspMMOHash
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, APSME_AddTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  432   uint8  hashOutput[16];
//  433   uint16 CRC;
//  434   
//  435 #if (ZG_BUILD_COORDINATOR_TYPE)
//  436   if(ZG_DEVICE_COORDINATOR_TYPE)
//  437   {
//  438     if(zgAllowInstallCodes == ZG_IC_NOT_SUPPORTED)
        MOV       DPTR,#zgAllowInstallCodes
        MOVX      A,@DPTR
        JNZ       ??bdb_addInstallCode_0
//  439     {
//  440       return ZFailure;
        MOV       R1,#0x1
        SJMP      ??bdb_addInstallCode_1
//  441     }
//  442   }
//  443 #endif
//  444        
//  445   if((pInstallCode == NULL) || (pExt == NULL))
??bdb_addInstallCode_0:
        MOV       A,R2
        ORL       A,R7
        JZ        ??bdb_addInstallCode_2
        MOV       A,R4
        ORL       A,R5
        JZ        ??bdb_addInstallCode_2
//  446   {
//  447     return ZInvalidParameter;
//  448   }
//  449   
//  450   CRC = bdb_GenerateInstallCodeCRC(pInstallCode);
        ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
        LCALL     `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
        MOV       ?V2,R2
        MOV       ?V3,R3
//  451 
//  452   //Validate CRC
//  453   if(CRC != osal_build_uint16(&pInstallCode[INSTALL_CODE_LEN]))
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        ADD       A,#0x10
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,R2
        XRL       A,?V2
        JNZ       ??bdb_addInstallCode_3
        MOV       A,R3
        XRL       A,?V3
??bdb_addInstallCode_3:
        JZ        ??bdb_addInstallCode_4
//  454   {
//  455     return ZInvalidParameter;
??bdb_addInstallCode_2:
        MOV       R1,#0x2
        SJMP      ??bdb_addInstallCode_1
//  456   }
//  457 
//  458   sspMMOHash (NULL, 0, pInstallCode,(INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN) * BITS_PER_BYTE, hashOutput);
??bdb_addInstallCode_4:
        ; Setup parameters for call to function sspMMOHash
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V2,#-0x70
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  459 
//  460   return APSME_AddTCLinkKey(hashOutput,pExt);
        ; Setup parameters for call to function APSME_AddTCLinkKey
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
??bdb_addInstallCode_1:
        MOV       A,#0x10
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  461 }    
          CFI EndBlock cfiBlock7
//  462     
//  463 
//  464 #if (ZG_BUILD_COORDINATOR_TYPE)
//  465  /*********************************************************************
//  466  * @fn      bdb_RegisterTCLinkKeyExchangeProcessCB
//  467  *
//  468  * @brief   Register a callback to receive notifications on the joining devices 
//  469  *          and its status on TC link key exchange
//  470  *
//  471  * @param   bdbGCB_TCLinkKeyExchangeProcess - application callback 
//  472  *          (extended address of device, status: 0 = Joining, 1 = TC link key exchange success, 2 = TC link key exchange failed)
//  473  *
//  474  * @return  none
//  475  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  476 void bdb_RegisterTCLinkKeyExchangeProcessCB(bdbGCB_TCLinkKeyExchangeProcess_t bdbGCB_TCLinkKeyExchangeProcess)
bdb_RegisterTCLinkKeyExchangeProcessCB:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function bdb_RegisterTCLinkKeyExchangeProcessCB
        CODE
//  477 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  478   if(bdbGCB_TCLinkKeyExchangeProcess != NULL)
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RegisterTCLinkKeyExchangeProcessCB_0
//  479   {
//  480     pfnTCLinkKeyExchangeProcessCB = bdbGCB_TCLinkKeyExchangeProcess;
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  481   }
//  482 }
??bdb_RegisterTCLinkKeyExchangeProcessCB_0:
        LJMP      ??Subroutine46_0 & 0xFFFF
          CFI EndBlock cfiBlock8
//  483 
//  484 
//  485 
//  486  /*********************************************************************
//  487  * @fn          bdb_setTCRequireKeyExchange
//  488  *
//  489  * @brief       Set the bdb_setTCRequireKeyExchange attribute
//  490  *
//  491  * @param       isKeyExchangeRequired - True if TC will remove devices that do 
//  492  *              not perform key exchange after bdbTrustCenterNodeJoinTimeout, 
//  493  *              False to not remove devices.
//  494  *
//  495  * @return      none
//  496  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  497 void bdb_setTCRequireKeyExchange(bool isKeyExchangeRequired)
bdb_setTCRequireKeyExchange:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function bdb_setTCRequireKeyExchange
        CODE
//  498 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  499   bdbAttributes.bdbTrustCenterRequireKeyExchange = isKeyExchangeRequired;
        MOV       A,R1
        MOV       DPTR,#bdbAttributes + 17
        LJMP      ??Subroutine45_0 & 0xFFFF
//  500 }
          CFI EndBlock cfiBlock9
//  501 
//  502 
//  503 
//  504  /*********************************************************************
//  505  * @fn          bdb_TCAddJoiningDevice
//  506  *
//  507  * @brief       Add a joining device to the list of devices that must request a 
//  508  *              key before bdbTrustCenterNodeJoinTimeout.
//  509  *
//  510  * @param       parentAddr - Address of the parent device
//  511  * @param       JoiningExtAddr - IEEE address of the joining device
//  512  *
//  513  * @return      ZStatus_t - ZFailure No memory to allocate the device in the list
//  514  *                          ZInvalidParameter
//  515  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  516 ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr)
bdb_TCAddJoiningDevice:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
        CODE
//  517 {
        FUNCALL bdb_TCAddJoiningDevice, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_start_reload_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV       A,#-0x13
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V6,R2
        MOV       ?V7,R3
//  518   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  519   
//  520   if((parentAddr == INVALID_NODE_ADDR) || (JoiningExtAddr == NULL))
        MOV       A,#-0x2
        XRL       A,R2
        JNZ       ??bdb_TCAddJoiningDevice_0
        MOV       A,#-0x1
        XRL       A,R3
??bdb_TCAddJoiningDevice_0:
        JZ        ??bdb_TCAddJoiningDevice_1
        MOV       A,R4
        ORL       A,R5
        JNZ       ??bdb_TCAddJoiningDevice_2
//  521   {
//  522     return ZInvalidParameter;
??bdb_TCAddJoiningDevice_1:
        MOV       R1,#0x2
        LJMP      ??bdb_TCAddJoiningDevice_3 & 0xFFFF
//  523   }
//  524   
//  525   //If the list was empty and element was allocated, then start the timer
//  526   if(bdb_joiningDeviceList == NULL)
??bdb_TCAddJoiningDevice_2:
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V2,#0x0
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_77:
        JNZ       ??bdb_TCAddJoiningDevice_4
//  527   {
//  528     bdb_joiningDeviceList = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xd
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPTR,#bdb_joiningDeviceList
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  529     if(bdb_joiningDeviceList == NULL)
        MOV       R1,A
        MOV       A,R2
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_TCAddJoiningDevice_5 & 0xFFFF
//  530     {
//  531       return ZFailure;
//  532     }
//  533    
//  534     osal_start_reload_timer(bdb_TaskID,BDB_TC_JOIN_TIMEOUT,1000);
        ; Setup parameters for call to function osal_start_reload_timer
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_reload_timer::?relay`; Banked call to: osal_start_reload_timer
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  535     tempJoiningDescNode = bdb_joiningDeviceList;
        MOV       DPTR,#bdb_joiningDeviceList
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??bdb_TCAddJoiningDevice_6
//  536   }
//  537   //if the list was not empty then add the entry at the end of the list
//  538   else
//  539   {
//  540     tempJoiningDescNode = bdb_joiningDeviceList;
??bdb_TCAddJoiningDevice_4:
        LCALL     ?Subroutine36 & 0xFFFF
//  541     
//  542     //Validate that this is not already in the list... somehow
//  543     if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
??CrossCallReturnLabel_120:
        ; Setup parameters for call to function osal_memcmp
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
        JNZ       ??bdb_TCAddJoiningDevice_7
//  544     {
//  545       //The device added is already in the list, refresh its time and do nothing else
//  546       tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
//  547       return ZSuccess;
//  548     }
//  549     
//  550     while(tempJoiningDescNode->nextDev != NULL)
??bdb_TCAddJoiningDevice_8:
        MOV       A,R6
        ADD       A,#0xb
        MOV       R6,A
        JNC       ??bdb_TCAddJoiningDevice_9
        INC       R7
??bdb_TCAddJoiningDevice_9:
        MOV       DPL,A
        MOV       DPH,R7
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_78:
        JZ        ??bdb_TCAddJoiningDevice_10
//  551     {
//  552       tempJoiningDescNode = tempJoiningDescNode->nextDev;
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
//  553       
//  554       //Validate that this is not already in the list... somehow
//  555       if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
        JZ        ??bdb_TCAddJoiningDevice_8
//  556       {
//  557         //The device added is already in the list, refresh its time and do nothing else
//  558         tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
??bdb_TCAddJoiningDevice_7:
        LCALL     ?Subroutine18 & 0xFFFF
//  559         return ZSuccess;
??CrossCallReturnLabel_6:
        LJMP      ??bdb_TCAddJoiningDevice_11 & 0xFFFF
//  560       }
//  561     }
//  562     
//  563     tempJoiningDescNode->nextDev = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
??bdb_TCAddJoiningDevice_10:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xd
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V5,R3
        MOV       R1,?V5
        LCALL     ??Subroutine59_0 & 0xFFFF
//  564     if(tempJoiningDescNode->nextDev == NULL)
??CrossCallReturnLabel_117:
        JNZ       ??bdb_TCAddJoiningDevice_12
//  565     {
//  566       return ZFailure;
??bdb_TCAddJoiningDevice_5:
        MOV       R1,#0x1
        SJMP      ??bdb_TCAddJoiningDevice_3
//  567     }
//  568     
//  569     tempJoiningDescNode = tempJoiningDescNode->nextDev;
??bdb_TCAddJoiningDevice_12:
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
??bdb_TCAddJoiningDevice_6:
        MOV       R7,A
//  570   }
//  571   
//  572   if(pfnTCLinkKeyExchangeProcessCB)
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V4,A
        CLR       A
        ADDC      A,R7
        MOV       ?V5,A
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_79:
        JZ        ??bdb_TCAddJoiningDevice_13
//  573   {
//  574     bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  575     osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V8,?V4
        MOV       ?V9,?V5
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  576     bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_JOINING;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
//  577     
//  578     bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x9
        MOV       R3,#0x0
        MOV       R2,#0x9
        LCALL     ??Subroutine44_0 & 0xFFFF
//  579   }
??CrossCallReturnLabel_62:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  580   
//  581   tempJoiningDescNode->nextDev = NULL;
??bdb_TCAddJoiningDevice_13:
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_29:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  582   tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
        LCALL     ?Subroutine18 & 0xFFFF
//  583   tempJoiningDescNode->parentAddr = parentAddr;
??CrossCallReturnLabel_7:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,?V6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V7
        MOVX      @DPTR,A
//  584   osal_memcpy(tempJoiningDescNode->bdbJoiningNodeEui64, JoiningExtAddr, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  585   
//  586   return ZSuccess;
??bdb_TCAddJoiningDevice_11:
        MOV       R1,#0x0
??bdb_TCAddJoiningDevice_3:
          CFI EndBlock cfiBlock10
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  587 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 28)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R7,#0xb
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function bdb_TCAddJoiningDevice
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOV       DPTR,#bdbAttributes + 16
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
//  588 
//  589 /****************************************************************************
//  590  * @fn          bdb_TCProcessJoiningList
//  591  *
//  592  * @brief       Process the timer to handle the joining devices if the TC link 
//  593  *              key is mandatory for all devices
//  594  *
//  595  * @param       none
//  596  *
//  597  * @return      none
//  598  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  599 void bdb_TCProcessJoiningList(void)
bdb_TCProcessJoiningList:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
        CODE
//  600 {
        FUNCALL bdb_TCProcessJoiningList, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, ZDSecMgrAPSRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, bdb_TCJoiningDeviceFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 42
        MOV       A,#-0x2a
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  601   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  602   
//  603   if(bdb_joiningDeviceList)
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_80:
        JNZ       $+5
        LJMP      ??bdb_TCProcessJoiningList_0 & 0xFFFF
//  604   {
//  605     tempJoiningDescNode = bdb_joiningDeviceList;
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ?Subroutine24 & 0xFFFF
//  606   
//  607     while(tempJoiningDescNode)
//  608     {
//  609       if(tempJoiningDescNode->NodeJoinTimeout)
??CrossCallReturnLabel_12:
        MOV       A,?V0
        ADD       A,#0xa
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        ??bdb_TCProcessJoiningList_1
//  610       {
//  611         tempJoiningDescNode->NodeJoinTimeout--;
        DEC       A
        MOVX      @DPTR,A
//  612       }
//  613       
//  614       if(tempJoiningDescNode->NodeJoinTimeout == 0)
        JZ        $+5
        LJMP      ??bdb_TCProcessJoiningList_2 & 0xFFFF
//  615       {
//  616         //Check if the key exchange is required 
//  617         if(bdb_doTrustCenterRequireKeyExchange())
??bdb_TCProcessJoiningList_1:
        MOV       A,?V0
        ADD       A,#0x2
        MOV       R6,A
        CLR       A
        ADDC      A,?V1
        MOV       R7,A
        MOV       ?V4,R6
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       DPTR,#bdbAttributes + 17
        MOVX      A,@DPTR
        JZ        ??bdb_TCProcessJoiningList_3
//  618         {
//  619             AddrMgrEntry_t entry;
//  620             
//  621             entry.user = ADDRMGR_USER_DEFAULT;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  622             osal_memcpy(entry.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 60)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  623             
//  624             if(AddrMgrEntryLookupExt(&entry))
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV       A,R1
        JZ        ??bdb_TCProcessJoiningList_3
//  625             {
//  626               ZDSecMgrAPSRemove(entry.nwkAddr,entry.extAddr,tempJoiningDescNode->parentAddr);
        ; Setup parameters for call to function ZDSecMgrAPSRemove
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOV       R4,DPL
        MOV       R5,DPH
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
//  627             }
//  628         }
??CrossCallReturnLabel_17:
        LCALL     `??ZDSecMgrAPSRemove::?relay`; Banked call to: ZDSecMgrAPSRemove
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  629         
//  630         //Expired device either is legacy device not using the TCLK entry or got 
//  631         //removed from the network because of timeout, eitherway it is not using
//  632         //TCLK entry neither the Security user in the address manager, so free the entry
//  633         //in both tables.
//  634         
//  635         uint16 keyNvIndex;
//  636         uint16 index;        
//  637         APSME_TCLKDevEntry_t TCLKDevEntry;
//  638         uint8 found;
//  639         
//  640         //Remove the entry in address manager
//  641         ZDSecMgrAddrClear(tempJoiningDescNode->bdbJoiningNodeEui64);
??bdb_TCProcessJoiningList_3:
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
//  642         
//  643         //search for the entry in the TCLK table
//  644         keyNvIndex = APSME_SearchTCLinkKeyEntry(tempJoiningDescNode->bdbJoiningNodeEui64,&found, NULL);
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
//  645         
//  646         //If found, erase it.
//  647         if(found == TRUE)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_TCProcessJoiningList_4
//  648         {
//  649           osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x13
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  650           TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#0x27
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  651           
//  652           //Increase the shift by one. Validate the maximum shift of the seed which is 15
//  653           index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
        MOV       A,R6
        ADD       A,#-0x11
        MOV       R0,A
        MOV       A,R7
        ADDC      A,#-0x2
        MOV       R1,A
//  654           
//  655           TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
        MOV       A,R0
        MOV       B,#0x9
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x9
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#TCLinkKeyFrmCntr & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine9 & 0xFFFF
//  656           TCLinkKeyFrmCntr[index].txFrmCntr = 0;
??CrossCallReturnLabel_56:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine43_0 & 0xFFFF
//  657           
//  658           //Update the entry
//  659           osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
??CrossCallReturnLabel_54:
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       ?V2,#0x13
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 61)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ??Subroutine57_0 & 0xFFFF
//  660         }
??CrossCallReturnLabel_106:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  661         
//  662         if(pfnTCLinkKeyExchangeProcessCB)
??bdb_TCProcessJoiningList_4:
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_81:
        JZ        ??bdb_TCProcessJoiningList_5
//  663         {
//  664           bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  665           osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 60)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  666           bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_FAIL;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  667           
//  668           bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
        ; Setup parameters for call to function bdb_SendMsg
        DEC       A
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       R4,#0x9
        MOV       R3,#0x0
        MOV       R2,#0x9
        LCALL     ??Subroutine44_0 & 0xFFFF
//  669         }
??CrossCallReturnLabel_63:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  670        
//  671         //Free the device from the list
//  672         bdb_TCJoiningDeviceFree(tempJoiningDescNode);
??bdb_TCProcessJoiningList_5:
        ; Setup parameters for call to function bdb_TCJoiningDeviceFree
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
//  673       }
//  674       tempJoiningDescNode = tempJoiningDescNode->nextDev;
??bdb_TCProcessJoiningList_2:
        MOV       A,?V0
        LCALL     ?Subroutine39 & 0xFFFF
//  675     }
//  676   }
??CrossCallReturnLabel_35:
        ADDC      A,?V1
        MOV       DPH,A
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_10:
        JZ        $+5
        LJMP      ??CrossCallReturnLabel_12 & 0xFFFF
//  677 
//  678   //we are done with the list
//  679   if(bdb_joiningDeviceList == NULL)
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_82:
        JNZ       ??CrossCallReturnLabel_109
//  680   {
//  681     osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
??bdb_TCProcessJoiningList_0:
        ; Setup parameters for call to function osal_stop_timerEx
        LCALL     ?Subroutine20 & 0xFFFF
//  682   }
//  683 }
??CrossCallReturnLabel_109:
        MOV       A,#0x2a
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock15
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function bdb_TCProcessJoiningList
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 60)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function bdb_TCProcessJoiningList
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 60)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        MOV       R2,DPL
        MOV       R3,DPH
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function bdb_SendMsg
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function bdb_TCAddJoiningDevice
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function bdb_TCProcessJoiningList
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 60)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function bdb_TCProcessJoiningList
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 60)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28
//  684 
//  685 
//  686 
//  687 /****************************************************************************
//  688  * @fn          bdb_TCjoiningDeviceComplete
//  689  *
//  690  * @brief       This function frees a joining device from the list that has 
//  691  *              finished TC link key exchange process
//  692  *
//  693  * @param       JoiningExtAddr - Extended address of the device
//  694  *
//  695  * @return      none
//  696  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  697 void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr)
bdb_TCjoiningDeviceComplete:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function bdb_TCjoiningDeviceComplete
        CODE
//  698 {
        FUNCALL bdb_TCjoiningDeviceComplete, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCjoiningDeviceComplete, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCjoiningDeviceComplete, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCjoiningDeviceComplete, bdb_TCJoiningDeviceFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCjoiningDeviceComplete, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV       A,#-0x13
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V0,R2
        MOV       ?V1,R3
//  699   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  700   
//  701   if((bdb_joiningDeviceList != NULL) && (JoiningExtAddr != NULL))
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_83:
        JNZ       $+5
        LJMP      ??CrossCallReturnLabel_110 & 0xFFFF
        MOV       A,R2
        ORL       A,R3
        JZ        ??CrossCallReturnLabel_110
//  702   {
//  703     tempJoiningDescNode = bdb_joiningDeviceList;
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_121:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        ; Setup parameters for call to function osal_memcmp
        MOV       ?V8,?V0
        MOV       ?V9,?V1
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R3,?V6
        LCALL     ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
        JZ        ??bdb_TCjoiningDeviceComplete_0
//  704     
//  705     while(tempJoiningDescNode != NULL)
//  706     {
//  707       if(osal_memcmp(tempJoiningDescNode->bdbJoiningNodeEui64,JoiningExtAddr,Z_EXTADDR_LEN))
//  708       {
//  709         if(pfnTCLinkKeyExchangeProcessCB)
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_84:
        JZ        ??bdb_TCjoiningDeviceComplete_1
//  710         {
//  711           bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  712           osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  713           bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_SUCCESS;
        LCALL     ?Subroutine8 & 0xFFFF
//  714           
//  715           bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
//  716         }        
??CrossCallReturnLabel_45:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x9
        MOV       R3,#0x0
        MOV       R2,#0x9
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  717         
//  718         bdb_TCJoiningDeviceFree(tempJoiningDescNode);
??bdb_TCjoiningDeviceComplete_1:
        ; Setup parameters for call to function bdb_TCJoiningDeviceFree
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
//  719         break;
        SJMP      ??bdb_TCjoiningDeviceComplete_2
//  720       }
//  721       tempJoiningDescNode = tempJoiningDescNode->nextDev;
??bdb_TCjoiningDeviceComplete_0:
        LCALL     ?Subroutine33 & 0xFFFF
//  722     }
??CrossCallReturnLabel_30:
        LCALL     ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_118:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??CrossCallReturnLabel_121
//  723    
//  724     if(bdb_joiningDeviceList == NULL)
??bdb_TCjoiningDeviceComplete_2:
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_85:
        JNZ       ??CrossCallReturnLabel_110
//  725     {
//  726       osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        LCALL     ?Subroutine20 & 0xFFFF
//  727     }
//  728   }
//  729 }
??CrossCallReturnLabel_110:
        LJMP      ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock29

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOV       A,R6
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_38:
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function bdb_TCAddJoiningDevice
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_29
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-4
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_30
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-4
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function bdb_TCjoiningDeviceComplete
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function bdb_NotifyCommissioningModeStart
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function bdb_NotifyCommissioningModeStart
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47
//  730 
//  731 
//  732 
//  733 /****************************************************************************
//  734  * @fn          bdb_TCJoiningDeviceFree
//  735  *
//  736  * @brief       This function frees a joining device from the list.
//  737  *
//  738  * @param       ZSuccess - If the device was found and erased
//  739  * @param       ZInvalidParameter - Not found
//  740  *
//  741  * @return      none
//  742  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  743 ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove)
bdb_TCJoiningDeviceFree:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
        CODE
//  744 {
        FUNCALL bdb_TCJoiningDeviceFree, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCJoiningDeviceFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCJoiningDeviceFree, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCJoiningDeviceFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       DPTR,#bdb_joiningDeviceList
        JZ        ??bdb_TCJoiningDeviceFree_0
//  745   bdb_joiningDeviceList_t* descCurrent;
//  746   bdb_joiningDeviceList_t* descPrev;
//  747   
//  748   //validate empty list?
//  749   
//  750   //Is it the first?
//  751   if(osal_memcmp(bdb_joiningDeviceList->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
//  752   {
//  753     descCurrent = bdb_joiningDeviceList;
        LCALL     ?Subroutine26 & 0xFFFF
//  754     bdb_joiningDeviceList = bdb_joiningDeviceList->nextDev;
??CrossCallReturnLabel_18:
        MOV       DPTR,#bdb_joiningDeviceList
        MOVX      A,@DPTR
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_36:
        ADDC      A,R3
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_129:
        MOV       DPTR,#bdb_joiningDeviceList
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  755     osal_mem_free( descCurrent );
        ; Setup parameters for call to function osal_mem_free
        SJMP      ??bdb_TCJoiningDeviceFree_1
//  756     return ZSuccess;
//  757   }
//  758   
//  759   descPrev = NULL;
//  760   descCurrent = bdb_joiningDeviceList;
//  761   
//  762   while(descCurrent != NULL)
//  763   {
//  764     if(osal_memcmp(descCurrent->nextDev->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
//  765     {
//  766       descPrev = descCurrent;
//  767       break;
//  768     }
//  769     descCurrent = descCurrent->nextDev;
??bdb_TCJoiningDeviceFree_0:
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_123:
        JZ        ??bdb_TCJoiningDeviceFree_2
        MOV       A,R2
        ADD       A,#0xb
        MOV       R6,A
        CLR       A
        ADDC      A,R3
        MOV       R7,A
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       DPL,R6
        MOV       DPH,R7
        JZ        ??bdb_TCJoiningDeviceFree_0
//  770   }
//  771   if(descPrev == NULL)
//  772   {
//  773     //Not found
//  774     return ZInvalidParameter;
//  775   }
//  776   
//  777   descPrev->nextDev = descPrev->nextDev->nextDev;
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_131:
        XCH       A,R0
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_37:
        ADDC      A,R0
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_130:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  778     
//  779   osal_mem_free( JoiningDeviceToRemove );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
??bdb_TCJoiningDeviceFree_1:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  780   return ZSuccess;
        MOV       R1,#0x0
        SJMP      ??bdb_TCJoiningDeviceFree_3
??bdb_TCJoiningDeviceFree_2:
        MOV       R1,#0x2
??bdb_TCJoiningDeviceFree_3:
        LJMP      ?Subroutine5 & 0xFFFF
//  781 
//  782 }
          CFI EndBlock cfiBlock48

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_134:
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       R3,#0x0
        LCALL     ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_53:
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function bdb_TCAddJoiningDevice
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function bdb_TCjoiningDeviceComplete
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_4
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-4
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_5
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-4
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function bdb_TCAddJoiningDevice
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function bdb_TCAddJoiningDevice
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker60 Using cfiCommon1
          CFI (cfiPicker60) NoFunction
          CFI (cfiPicker60) Picker
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiPicker60
//  783 
//  784  /*********************************************************************
//  785  * @fn          bdb_setJoinUsesInstallCodeKey
//  786  *
//  787  * @brief       Set BDB attribute bdbJoinUsesInstallCodeKey.
//  788  *
//  789  * @param       set - If TRUE only devices with IC register in TC can join the 
//  790  *              nwk, otherwise devices may or not have a IC register
//  791  *
//  792  * @return      none
//  793  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  794 void bdb_setJoinUsesInstallCodeKey(bool set)
bdb_setJoinUsesInstallCodeKey:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI Function bdb_setJoinUsesInstallCodeKey
        CODE
//  795 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  796   bdbAttributes.bdbJoinUsesInstallCodeKey = set;
        MOV       A,R1
        MOV       DPTR,#bdbAttributes + 15
        MOVX      @DPTR,A
//  797   if(set)
        MOV       DPTR,#zgAllowInstallCodes
        JZ        ??bdb_setJoinUsesInstallCodeKey_0
//  798   {
//  799     zgAllowInstallCodes = ZG_IC_MUST_USED;
        MOV       A,#0x2
        SJMP      ??bdb_setJoinUsesInstallCodeKey_1
//  800   }
//  801   else
//  802   {
//  803     zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
??bdb_setJoinUsesInstallCodeKey_0:
        MOV       A,#0x1
//  804   }
??bdb_setJoinUsesInstallCodeKey_1:
        LJMP      ??Subroutine45_0 & 0xFFFF
//  805 }
          CFI EndBlock cfiBlock61
//  806 #endif
//  807 
//  808  /*********************************************************************
//  809  * @fn          bdb_StartCommissioning
//  810  *
//  811  * @brief       Start the commissioning process setting the commissioning mode given.
//  812  *
//  813  * @param       mode - refer to bdbCommissioningMode
//  814  *
//  815  * @return      none
//  816  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  817 void bdb_StartCommissioning(uint8 mode)
bdb_StartCommissioning:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI Function bdb_StartCommissioning
        CODE
//  818 {
        FUNCALL bdb_StartCommissioning, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, ZDApp_ReadNetworkRestoreState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_RepConstructReportingData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_isbufset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_RepUpdateMarkBindings
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,R1
//  819   //Application cannot request to set the device in initialization mode or parent lost
//  820   mode &= ~(BDB_COMMISSIONING_MODE_INITIALIZATION | BDB_COMMISSIONING_MODE_PARENT_LOST);
//  821     
//  822 #ifdef BDB_TL_INITIATOR
//  823   if ( touchlinkFNReset == TRUE )
//  824   {
//  825     return;
//  826   }
//  827 #else
//  828   //Commissioning mode used only for initiator
//  829   mode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
        ANL       ?V0,#0xce
//  830 #endif
//  831   
//  832 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==0)    
//  833   //Commissioning mode used only for devices with F&B
//  834   mode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
//  835 #endif
//  836  
//  837   //If we have running process or the machine state is triggered, then just append and it will be excecuted
//  838   if((bdbAttributes.bdbCommissioningMode) || (osal_get_timeoutEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE)))
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        JNZ       ??bdb_StartCommissioning_0
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_67:
        JZ        ??bdb_StartCommissioning_1
//  839   {
//  840 #if ZG_BUILD_ENDDEVICE_TYPE
//  841     if(ZG_DEVICE_ENDDEVICE_TYPE)
//  842     {
//  843       //Devices with parent lost are not allowed to perform actions
//  844       if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
//  845       {
//  846         return;
//  847       }
//  848     }
//  849 #endif
//  850     
//  851     //If we are on the network and got requested to do nwk steering, we do not need to wait other process, 
//  852     // just send permit joining and report the application
//  853     if((bdbAttributes.bdbNodeIsOnANetwork) && (mode & BDB_COMMISSIONING_MODE_NWK_STEERING))
??bdb_StartCommissioning_0:
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_StartCommissioning_2
        MOV       A,?V0
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_StartCommissioning_2
//  854     {
//  855       bdb_nwkSteeringDeviceOnNwk();
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL     ?Subroutine30 & 0xFFFF
//  856       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
//  857       
//  858       //Clean nwk steering
//  859       mode ^= BDB_COMMISSIONING_MODE_NWK_STEERING; 
??CrossCallReturnLabel_26:
        XRL       ?V0,#0x2
//  860     }
//  861     
//  862     //add the remaining valid commissioning modes requested, those will be process when bdb finish its current process
//  863     bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
??bdb_StartCommissioning_2:
        MOV       A,#0x3f
        ANL       A,?V0
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  864     return;      
        LJMP      ??bdb_StartCommissioning_3 & 0xFFFF
//  865   }
//  866 
//  867   //Save the commissioning modes valid requested
//  868   bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
??bdb_StartCommissioning_1:
        MOV       A,#0x3f
        ANL       A,?V0
        MOV       R6,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R6
        MOVX      @DPTR,A
//  869   
//  870   
//  871   //Start processing the initialization, once per power cycle.
//  872   if(!bdb_initialization)
        MOV       DPTR,#bdb_initialization
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
//  873   {
//  874     bdb_initialization = TRUE;
        MOV       A,#0x1
        MOVX      @DPTR,A
//  875     
//  876 #ifdef BDB_REPORTING
//  877     //Delete NV data if startup was with factory reset
//  878     if(ZDO_INITDEV_NEW_NETWORK_STATE == ZDApp_ReadNetworkRestoreState())
        ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
        LCALL     `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_StartCommissioning_5
//  879     {
//  880       //Factory reset bdb reporting NV data
//  881       uint16 attrRepNvLen = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#0x56
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
//  882       if ( attrRepNvLen > 0 )
        MOV       A,R2
        ORL       A,R5
        JZ        ??bdb_StartCommissioning_5
//  883       {
//  884         osal_nv_delete( ZCD_NV_BDBREPORTINGCONFIG, attrRepNvLen );
        ; Setup parameters for call to function osal_nv_delete
        MOV       R2,#0x56
        MOV       R3,#0x0
        LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
//  885       }
//  886     }
//  887 
//  888     //Construct the Endpoint-cluster array
//  889     bdb_RepConstructReportingData();
??bdb_StartCommissioning_5:
        ; Setup parameters for call to function bdb_RepConstructReportingData
        LCALL     `??bdb_RepConstructReportingData::?relay`; Banked call to: bdb_RepConstructReportingData
//  890 #endif //BDB_REPORTING
//  891     
//  892     osal_nv_read(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V2,#(bdbAttributes + 14) & 0xff
        MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  893     
//  894     //Are we on a network
//  895     if(bdbAttributes.bdbNodeIsOnANetwork == TRUE)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
//  896     {
//  897 #ifdef ZG_BUILD_JOINING_TYPE
//  898       //Only for joining devices validate the joining procedure
//  899       if(ZG_DEVICE_JOINING_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_StartCommissioning_6
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
//  900       {
//  901         //If we got into a network
//  902         if(!osal_isbufset( AIB_apsTrustCenterAddress, 0x00, Z_EXTADDR_LEN ))
??bdb_StartCommissioning_6:
        ; Setup parameters for call to function osal_isbufset
        MOV       R4,#0x8
        MOV       R1,#0x0
        MOV       DPTR,#AIB_apsTrustCenterAddress
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
//  903         {
//  904           //Which is not distributed
//  905           if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
//  906           {
//  907             uint8 keyAttributes;
//  908             osal_nv_read(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes), sizeof(uint8), &keyAttributes);
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  909             //If we must perform the TCLK exchange and we didn't complete it, then reset to FN
//  910             if(requestNewTrustCenterLinkKey && (keyAttributes != ZG_NON_R21_NWK_JOINED) && (keyAttributes != ZG_VERIFIED_KEY))
        MOV       DPTR,#requestNewTrustCenterLinkKey
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0xfd
        JZ        ??bdb_StartCommissioning_7
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        ??bdb_StartCommissioning_7
//  911             {
//  912               //Force to initialize the entry
//  913               APSME_TCLKDevEntry_t APSME_TCLKDevEntry;
//  914               
//  915               osal_memset(&APSME_TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x13
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  916               APSME_TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  917               osal_nv_write(ZCD_NV_TCLK_TABLE_START, 0, sizeof(APSME_TCLKDevEntry_t), &APSME_TCLKDevEntry);
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x13
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  918               TCLinkKeyFrmCntr[0].txFrmCntr = 0;
        MOV       DPTR,#TCLinkKeyFrmCntr
        LCALL     ?Subroutine9 & 0xFFFF
//  919               TCLinkKeyFrmCntr[0].rxFrmCntr = 0;
??CrossCallReturnLabel_57:
        INC       DPTR
        LCALL     ??Subroutine43_0 & 0xFFFF
//  920               
//  921               
//  922               //reset the device parameters to FN
//  923               bdbAttributes.bdbNodeIsOnANetwork = FALSE;
??CrossCallReturnLabel_55:
        MOV       DPTR,#bdbAttributes + 14
        MOVX      @DPTR,A
//  924               osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V2,#(bdbAttributes + 14) & 0xff
        MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  925               zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  926               
//  927               //Then start the commissioning process requested
//  928               bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        SJMP      ??bdb_StartCommissioning_8
//  929               osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
//  930               return;
//  931             }
//  932           }
//  933         }
//  934       }
//  935 #endif //ZG_BUILD_JOINING_TYPE
//  936       
//  937       //Set the initialization
//  938       bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_INITIALIZATION;
//  939       bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
??bdb_StartCommissioning_7:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x7
        MOVX      @DPTR,A
//  940       bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
        MOV       A,#0x10
        ORL       A,R6
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  941       
//  942       if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        JNZ       ??bdb_StartCommissioning_9
//  943       {
//  944 #ifdef BDB_REPORTING
//  945         //Mark the clusterEndpoint entries that have binding, starts reporting if at least one entry was marked
//  946         bdb_RepUpdateMarkBindings();
        ; Setup parameters for call to function bdb_RepUpdateMarkBindings
        LCALL     `??bdb_RepUpdateMarkBindings::?relay`; Banked call to: bdb_RepUpdateMarkBindings
//  947 #endif
//  948         return;
        SJMP      ??bdb_StartCommissioning_3
//  949       }
//  950       bdb_setNodeIsOnANetwork(FALSE);  
??bdb_StartCommissioning_9:
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  951       //Not in the network
//  952       bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x7
        SJMP      ??bdb_StartCommissioning_10
//  953       return;
//  954     }
//  955   }
//  956 
//  957   //Got requested only to initialize, if so, report that it failed
//  958   if(bdbAttributes.bdbCommissioningMode == 0)
??bdb_StartCommissioning_4:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        JNZ       ??bdb_StartCommissioning_8
//  959   {
//  960     //Set the initialization state and report it to fail
//  961     bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x7
        MOVX      @DPTR,A
//  962     bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,A
??bdb_StartCommissioning_10:
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  963     return;
        SJMP      ??bdb_StartCommissioning_3
//  964   }
//  965 
//  966   
//  967   //Start the commissioning process
//  968   bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_StartCommissioning_8:
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
//  969   osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x4
        MOV       R3,A
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
//  970 }
??bdb_StartCommissioning_3:
        MOV       A,#0x14
        LJMP      ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock62

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 59)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function bdb_StartCommissioning
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function bdb_AddRespondentNode
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function bdb_GenerateInstallCodeCRC
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond67) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond67) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond67) CFA_SP SP+-7
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function bdb_StartCommissioning
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        CLR       A
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function bdb_StartCommissioning
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function bdb_TCProcessJoiningList
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function bdb_StartCommissioning
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76
//  971 
//  972 
//  973  /*********************************************************************
//  974  * @fn          bdb_NotifyCommissioningModeStart
//  975  *
//  976  * @brief       Notify the user about a commissioning method just started
//  977  *
//  978  * @param       commissioningMode
//  979  *
//  980  * @return      none
//  981  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  982 void bdb_NotifyCommissioningModeStart(uint8 commissioningMode)
bdb_NotifyCommissioningModeStart:
          CFI Block cfiBlock77 Using cfiCommon0
          CFI Function bdb_NotifyCommissioningModeStart
        CODE
//  983 {
        FUNCALL bdb_NotifyCommissioningModeStart, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  984   bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
//  985 
//  986   bdbCommissioningModeMsg.bdbCommissioningMode = commissioningMode;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
//  987   bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_IN_PROGRESS;
        LCALL     ?Subroutine8 & 0xFFFF
//  988   //Remaining commissioning modes are set just before the call to the application to avoid race conditions
//  989 
//  990   bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
??CrossCallReturnLabel_46:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  991 }
        MOV       A,#0x3
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock77

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function bdb_NotifyCommissioningModeStart
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function bdb_reportCommissioningState
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker82 Using cfiCommon1
          CFI (cfiPicker82) NoFunction
          CFI (cfiPicker82) Picker
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiPicker82
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function bdb_TCProcessJoiningList
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 59)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function bdb_NotifyCommissioningModeStart
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function bdb_reportCommissioningState
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90
//  992 
//  993 
//  994 
//  995 #if (ZG_BUILD_JOINING_TYPE)
//  996  /*********************************************************************
//  997  * @fn          bdb_setNodeJoinLinkKeyType
//  998  *
//  999  * @brief       Set the key type in use in the network joined. Global centralized key is used by default
// 1000  *
// 1001  * @param       none
// 1002  *
// 1003  * @return      none
// 1004  */
// 1005 void bdb_setNodeJoinLinkKeyType(uint8 KeyType)
// 1006 {
// 1007   bdbAttributes.bdbNodeJoinLinkKeyType = KeyType;
// 1008 }
// 1009 #endif
// 1010 
// 1011  /*********************************************************************
// 1012  * @fn          bdb_setFN
// 1013  *
// 1014  * @brief       Set configuration for FN. This FN configuration will be perfome 
// 1015  *              upon call to ZDOInitDevice
// 1016  *
// 1017  * @param       none
// 1018  *
// 1019  * @return      none
// 1020  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1021 void bdb_setFN(void)
bdb_setFN:
          CFI Block cfiBlock91 Using cfiCommon0
          CFI Function bdb_setFN
        CODE
// 1022 {
        FUNCALL bdb_setFN, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setFN, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1023   bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 1024 
// 1025 #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
// 1026     touchLink_InitFreeRanges( TRUE );
// 1027     touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
// 1028 #endif
// 1029 #if defined ( INTER_PAN ) && defined ( BDB_TL_TARGET ) 
// 1030     touchLink_InitFreeRanges( FALSE );
// 1031     touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
// 1032 #endif
// 1033 
// 1034   //Set the device as factory new
// 1035   zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
// 1036 }
        SJMP      ??Subroutine46_0
          CFI EndBlock cfiBlock91
// 1037 
// 1038  /*********************************************************************
// 1039  * @fn          bdb_resetLocalAction
// 1040  *
// 1041  * @brief       Application interface to perform BDB Reset to FN.
// 1042  *
// 1043  * @param       none
// 1044  *
// 1045  * @return      none
// 1046  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1047 void bdb_resetLocalAction(void)
bdb_resetLocalAction:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI Function bdb_resetLocalAction
        CODE
// 1048 {
        FUNCALL bdb_resetLocalAction, bdb_setFN
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1049   //Process reset as nwk leave if the device is on the network and is able to process it
// 1050   if((ZG_BUILD_JOINING_TYPE) && (bdbAttributes.bdbNodeIsOnANetwork) && (!(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)))
// 1051   {
// 1052     NLME_LeaveReq_t leaveReq;
// 1053     // Set every field to 0
// 1054     osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
// 1055     
// 1056     bdb_setFN();
// 1057       
// 1058     NLME_LeaveReq( &leaveReq );
// 1059     
// 1060     return;
// 1061   }
// 1062   else
// 1063   {
// 1064     bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1065     
// 1066     ZDApp_ResetTimerStart( 500 );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV       R2,#-0xc
        MOV       R3,#0x1
        LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
// 1067   }
// 1068 }
        SJMP      ??Subroutine46_0
          CFI EndBlock cfiBlock92

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock93 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
          CFI EndBlock cfiBlock93
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOVX      @DPTR,A
          CFI EndBlock cfiBlock94
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiBlock95 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock95
// 1069 
// 1070 
// 1071  /*********************************************************************
// 1072  * @fn          bdb_parentLost
// 1073  *
// 1074  * @brief       Notify bdb that connection with parent is lost
// 1075  *
// 1076  * @return      none
// 1077  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1078 void bdb_parentLost(void)
bdb_parentLost:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI Function bdb_parentLost
        CODE
// 1079 {
        ; Saved register size: 0
        ; Auto size: 0
// 1080 #if ZG_BUILD_ENDDEVICE_TYPE
// 1081   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1082   {
// 1083     while(pBDBListNwk)
// 1084     {
// 1085       bdb_nwkDescFree(pBDBListNwk);
// 1086     }
// 1087     
// 1088     nwk_desc_list_free();  
// 1089     if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
// 1090     {
// 1091       //If parent lost during TCLK exchange, then report TCLK exchange fail
// 1092       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE)
// 1093       {
// 1094         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
// 1095         return;
// 1096       }
// 1097       bdbCommissioningProcedureState.bdb_ParentLostSavedState = bdbCommissioningProcedureState.bdbCommissioningState;
// 1098       
// 1099     }
// 1100     bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
// 1101     NLME_OrphanStateSet();
// 1102     ZDApp_ChangeState( DEV_NWK_ORPHAN );
// 1103     
// 1104     // turn receiver off while in orphan state
// 1105     byte temp = FALSE;
// 1106     ZMacSetReq(ZMacRxOnIdle, &temp);
// 1107     
// 1108     bdb_reportCommissioningState(BDB_PARENT_LOST,FALSE);
// 1109   }
// 1110 #endif
// 1111 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock96
// 1112 
// 1113 
// 1114 
// 1115 
// 1116 
// 1117  /*********************************************************************
// 1118  * @fn          bdb_NetworkRestoredResumeState
// 1119  *
// 1120  * @brief       Restore the state of child device after parent lost
// 1121  *
// 1122  * @return      none
// 1123  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1124 void bdb_NetworkRestoredResumeState(void)
bdb_NetworkRestoredResumeState:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI Function bdb_NetworkRestoredResumeState
        CODE
// 1125 {
        ; Saved register size: 0
        ; Auto size: 0
// 1126 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
// 1127 #if ZG_BUILD_ENDDEVICE_TYPE
// 1128   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1129   {
// 1130     uint8 restoreSimpleDesc = FALSE;
// 1131     //If restored when F&B still enabled, then restore the simple descriptors attempts
// 1132     if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
// 1133     {
// 1134       bdbFindingBindingRespondent_t  *pRespondentTemp = NULL;
// 1135       
// 1136       pRespondentTemp = pRespondentHead;
// 1137       
// 1138       while(pRespondentTemp != NULL)
// 1139       {
// 1140         if(pRespondentTemp->attempts & FINDING_AND_BINDING_PARENT_LOST)
// 1141         {
// 1142           pRespondentTemp->attempts &= ~FINDING_AND_BINDING_PARENT_LOST;
// 1143           restoreSimpleDesc = TRUE;
// 1144         }
// 1145         pRespondentTemp = pRespondentTemp->pNext;
// 1146       }
// 1147     }
// 1148     if(restoreSimpleDesc)
// 1149     {
// 1150       //Restore the simple Descriptor sending after 1 second of restoring the network
// 1151       osal_start_timerEx(bdb_TaskID,BDB_RESPONDENT_PROCESS_TIMEOUT, 1000);
// 1152     }
// 1153   }
// 1154 #endif
// 1155 #endif
// 1156 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock97
// 1157 
// 1158 #if ZG_BUILD_ENDDEVICE_TYPE
// 1159  /*********************************************************************
// 1160  * @fn          bdb_ZedAttemptRecoverNwk
// 1161  *
// 1162  * @brief       Instruct the ZED to try to rejoin its previews network
// 1163  *
// 1164  * @return      success if the attempt is being excecuted
// 1165  *              False if device do not have nwk parameters to perform this action
// 1166  */
// 1167 uint8 bdb_ZedAttemptRecoverNwk(void)
// 1168 {
// 1169   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1170   {
// 1171     if(bdbAttributes.bdbNodeIsOnANetwork)
// 1172     {
// 1173       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST)
// 1174       {
// 1175         if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
// 1176         {
// 1177           return ZSuccess;
// 1178         }
// 1179       }
// 1180     }
// 1181   }
// 1182   return ZFailure;
// 1183 }
// 1184 
// 1185 #endif
// 1186 
// 1187  /*********************************************************************
// 1188  * @fn          bdb_reportCommissioningState
// 1189  *
// 1190  * @brief       Process the result of a BDB main state attempt.
// 1191  *
// 1192  * @param       bdbCommissioningState - MainState that is issuing fail
// 1193  * @param       didSuccess - TRUE if the main state were success, FALSE otherwise
// 1194  *
// 1195  * @return      none
// 1196  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1197 void bdb_reportCommissioningState(uint8 bdbCommissioningState,bool didSuccess)
bdb_reportCommissioningState:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
        CODE
// 1198 {
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_setFN
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_ResetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_zclRespondentListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, nwk_setStateIdle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_RestoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R2
        MOV       R7,A
// 1199   bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 1200   //Process only if we are in that state, or if we are on parent lost and processing F&B
// 1201   if((bdbCommissioningProcedureState.bdbCommissioningState == bdbCommissioningState)
// 1202      || ((bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST) && (bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)))
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,R6
        JZ        ??bdb_reportCommissioningState_0
        MOVX      A,@DPTR
        XRL       A,#0x8
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1203   {
// 1204     switch(bdbCommissioningState)
??bdb_reportCommissioningState_0:
        MOV       A,R1
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_2 & 0xFFFF
        ADD       A,#-0x2
        JZ        ??bdb_reportCommissioningState_3
        DEC       A
        JZ        ??bdb_reportCommissioningState_4
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_5 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_6 & 0xFFFF
        LJMP      ??bdb_reportCommissioningState_7 & 0xFFFF
// 1205     {
// 1206 #if (ZG_BUILD_JOINING_TYPE)
// 1207       case BDB_COMMISSIONING_STATE_JOINING:
// 1208         if(ZG_DEVICE_JOINING_TYPE)
// 1209         {
// 1210           //Prepare for the next state or commissioning mode to be excecuted
// 1211           osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
// 1212 
// 1213           if(didSuccess)
// 1214           {
// 1215             //Next state is TC link key exchange
// 1216             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE;
// 1217             //Free the list of nwk discovered
// 1218             while(pBDBListNwk)
// 1219             {
// 1220               bdb_nwkDescFree(pBDBListNwk);
// 1221             }
// 1222             
// 1223             //Set the poll rate of the ZED joining device to 1 second to allow TCLK 
// 1224             //exchange be perfomed successfully in cases in which application has a 
// 1225             //slow pollrate
// 1226             NLME_SetPollRate(TCLK_POLL_RATE);
// 1227             
// 1228             //No notification in this step
// 1229             return;
// 1230           } 
// 1231           else
// 1232           {
// 1233             uint8 temp = FALSE;
// 1234             //If fail, then restore poll rate
// 1235             NLME_SetPollRate(POLL_RATE);
// 1236             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
// 1237             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
// 1238             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
// 1239             bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
// 1240             
// 1241             //Turn off the radio
// 1242             ZMacSetReq(ZMacRxOnIdle, &temp);
// 1243             //Set the device to FN, to start as new for subsequent attempts
// 1244             bdb_setFN();
// 1245             NLME_ResetRequest();
// 1246             ZDApp_ChangeState( DEV_HOLD );
// 1247             
// 1248             //Free the list of nwk discovered
// 1249             while(pBDBListNwk)
// 1250             {
// 1251               bdb_nwkDescFree(pBDBListNwk);
// 1252             }
// 1253           }
// 1254         }
// 1255       break;
// 1256 
// 1257       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 1258         if(ZG_DEVICE_JOINING_TYPE)
// 1259         {
// 1260           if(didSuccess)
// 1261           {
// 1262             //Clear any setting that would set the device as FN
// 1263             zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);            
// 1264             
// 1265             //Next state is nwk steering on the nwk (permit joining)
// 1266             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
// 1267             osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE, 50);
// 1268             
// 1269             //Set the poll rate to the application default after TCLK success
// 1270             NLME_SetPollRate(POLL_RATE);
// 1271 
// 1272             osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT );
// 1273             //No notification to the user is needed
// 1274             return;
// 1275           }
// 1276           else
// 1277           {
// 1278             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
// 1279             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TCLK_EX_FAILURE;
// 1280             
// 1281             osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
// 1282            
// 1283             //No process shall be attempted after this fail
// 1284             bdbAttributes.bdbCommissioningMode = 0;
// 1285             
// 1286             //Fill the context for the user notification
// 1287             osal_start_timerEx(bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL,BDB_TC_LINK_KEY_EXCHANGE_FAIL_LEAVE_TIMEOUT);
// 1288           }
// 1289         }
// 1290       break;
// 1291 #endif
// 1292       
// 1293       case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
// 1294         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
??bdb_reportCommissioningState_3:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1295         if(didSuccess)
        MOV       A,R2
        MOV       DPTR,#bdbAttributes + 10
        JZ        ??bdb_reportCommissioningState_8
// 1296         {
// 1297           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        CLR       A
        MOVX      @DPTR,A
// 1298           
// 1299 #if (ZG_BUILD_RTR_TYPE)          
// 1300           //Update ZDApp state
// 1301           if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_reportCommissioningState_9
// 1302           {          
// 1303             ZDApp_ChangeState( DEV_ROUTER );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x7
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
        SJMP      ??bdb_reportCommissioningState_9
// 1304           }
// 1305 #endif
// 1306 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1307           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1308           {
// 1309             ZDApp_ChangeState( DEV_END_DEVICE );
// 1310           }
// 1311 #endif
// 1312         }
// 1313 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1314         else
// 1315         {
// 1316           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1317           {
// 1318             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
??bdb_reportCommissioningState_8:
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1319           }
// 1320         }
// 1321 #endif
// 1322         
// 1323         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_9:
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
// 1324         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_92:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1325         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.1
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1326       break;
// 1327       
// 1328       case BDB_COMMISSIONING_STATE_FORMATION:
// 1329         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FORMATION;
??bdb_reportCommissioningState_4:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1330 
// 1331         if(didSuccess)
        MOV       A,R2
        MOV       DPTR,#bdbAttributes + 10
        JZ        ??bdb_reportCommissioningState_11
// 1332         {
// 1333           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        CLR       A
        MOVX      @DPTR,A
// 1334 
// 1335           //Clear any setting that would set the device as FN
// 1336           zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);          
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,A
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
// 1337           
// 1338            //Update ZDApp State
// 1339 #if (ZG_BUILD_RTR_TYPE)
// 1340           if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_reportCommissioningState_12
// 1341           {          
// 1342             ZDApp_ChangeState( DEV_ROUTER );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x7
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1343           }
// 1344 #endif    
// 1345 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1346           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1347           {          
// 1348             ZDApp_ChangeState( DEV_ZB_COORD );
??bdb_reportCommissioningState_12:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x9
        SJMP      ??bdb_reportCommissioningState_13
// 1349           }     
// 1350 #endif
// 1351         }
// 1352         else
// 1353         {
// 1354           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_FORMATION_FAILURE;
??bdb_reportCommissioningState_11:
        MOV       A,#0x8
        MOVX      @DPTR,A
// 1355           //If not on the nwk, then restart the nwk parameters
// 1356 #if (ZG_BUILD_RTR_TYPE)
// 1357           if(ZG_DEVICE_RTR_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JZ        ??bdb_reportCommissioningState_14
        XRL       A,#0x1
        JNZ       ??bdb_reportCommissioningState_15
// 1358           {           
// 1359             if(!bdbAttributes.bdbNodeIsOnANetwork)
??bdb_reportCommissioningState_14:
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JNZ       ??bdb_reportCommissioningState_15
// 1360             {
// 1361               uint8 temp = FALSE;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1362               //Turn off the radio
// 1363               ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1364               //Set the device to FN, to start as new for subsequent attempts
// 1365               bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1366               NLME_ResetRequest();
        ; Setup parameters for call to function NLME_ResetRequest
        LCALL     `??NLME_ResetRequest::?relay`; Banked call to: NLME_ResetRequest
// 1367               ZDApp_ChangeState( DEV_HOLD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x0
??bdb_reportCommissioningState_13:
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1368             }
// 1369           }
// 1370 #endif
// 1371         }
// 1372         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_15:
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
// 1373         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_93:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1374         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_FORMATION;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.2
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1375       break;  
// 1376       
// 1377 
// 1378       case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 1379 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
// 1380         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
??bdb_reportCommissioningState_5:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 1381 
// 1382         //Do not notify the status if we have another identify to send
// 1383         if(bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        JNZ       ??bdb_reportCommissioningState_16
// 1384         {
// 1385           //Success at least once during F&B as initiator, mark it
// 1386           bdb_FBStateSuccessLatch = TRUE;
        MOV       DPTR,#bdb_FBStateSuccessLatch
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1387         }        
// 1388         
// 1389         //Will we process another indentify?
// 1390         if(((FINDING_AND_BINDING_PERIODIC_ENABLE == FALSE) || (bdb_FB_InitiatorCurrentCyclesNumber == 0)) && (bdb_getRespondentRetry(pRespondentHead) == NULL) && (osal_get_timeoutEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0))
??bdb_reportCommissioningState_16:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        ; Setup parameters for call to function bdb_getRespondentRetry
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_15:
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        ; Setup parameters for call to function osal_get_timeoutEx
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_65:
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1391         {
// 1392           // Dealocate respondent list and clean all the F&B process
// 1393           pRespondentCurr = NULL;
        MOV       DPTR,#pRespondentCurr
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1394           pRespondentNext = NULL;
        MOV       DPTR,#pRespondentNext
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1395           bdb_zclRespondentListClean( &pRespondentHead );
        ; Setup parameters for call to function bdb_zclRespondentListClean
        MOV       R2,#pRespondentHead & 0xff
        MOV       R3,#(pRespondentHead >> 8) & 0xff
        LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
// 1396           osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        LCALL     ??Subroutine58_0 & 0xFFFF
// 1397           
// 1398           //Report success if in any of the attempts we got success, regardless that we did receive no rsp on the last attempt
// 1399           if(bdb_FBStateSuccessLatch && (bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE))
??CrossCallReturnLabel_112:
        MOV       DPTR,#bdb_FBStateSuccessLatch
        MOVX      A,@DPTR
        JZ        ??bdb_reportCommissioningState_17
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        XRL       A,#0xb
        JNZ       ??bdb_reportCommissioningState_17
// 1400           {
// 1401             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        CLR       A
        MOVX      @DPTR,A
// 1402           }
// 1403           
// 1404           //Set default state
// 1405           bdb_FBStateSuccessLatch = FALSE;
??bdb_reportCommissioningState_17:
        MOV       DPTR,#bdb_FBStateSuccessLatch
        CLR       A
        MOVX      @DPTR,A
// 1406           
// 1407           //Resume BDB machine state only if we were in F&B, if we were on parent lost, only clean the commissioning mode and remove from bdb_ParentLostSavedState
// 1408           if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??bdb_reportCommissioningState_18
// 1409           {
// 1410             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        CLR       A
        MOVX      @DPTR,A
// 1411             osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine13 & 0xFFFF
// 1412           }
??CrossCallReturnLabel_94:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        SJMP      ??bdb_reportCommissioningState_19
// 1413           else if(bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
??bdb_reportCommissioningState_18:
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??bdb_reportCommissioningState_19
// 1414           {
// 1415             bdbCommissioningProcedureState.bdb_ParentLostSavedState = BDB_COMMISSIONING_STATE_START_RESUME;
        CLR       A
        MOVX      @DPTR,A
// 1416           }
// 1417           
// 1418           bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
??bdb_reportCommissioningState_19:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.3
        SJMP      ??bdb_reportCommissioningState_10
// 1419         }
// 1420         else
// 1421         {
// 1422           return;
// 1423         }
// 1424 
// 1425 #endif
// 1426       break;     
// 1427       case BDB_COMMISSIONING_STATE_TL:
// 1428         // Set NWK task to run
// 1429         nwk_setStateIdle( FALSE );
??bdb_reportCommissioningState_2:
        ; Setup parameters for call to function nwk_setStateIdle
        MOV       R1,#0x0
        LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
// 1430         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_TOUCHLINK;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
// 1431         if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_20
// 1432         {
// 1433           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV       DPTR,#bdbAttributes + 10
        CLR       A
        MOVX      @DPTR,A
// 1434           bdbAttributes.bdbCommissioningMode = BDB_COMMISSIONING_MODE_IDDLE;
        INC       DPTR
        MOVX      @DPTR,A
// 1435           
// 1436           //Update ZDApp state
// 1437 #if (ZG_BUILD_RTR_TYPE)
// 1438           if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_reportCommissioningState_20
// 1439           {          
// 1440             ZDApp_ChangeState( DEV_ROUTER );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x7
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1441           }
// 1442 #endif
// 1443 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1444           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1445           {
// 1446             ZDApp_ChangeState( DEV_END_DEVICE );
// 1447           }
// 1448 #endif          
// 1449         }
// 1450         //The fail status is already set from the calling function to report commissioning process
// 1451         
// 1452         // The commissioning FAIL status is set before calling the bdb_reportCommissioningState
// 1453         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_20:
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
// 1454         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_95:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1455         //Clear the event
// 1456         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.0
        SJMP      ??bdb_reportCommissioningState_10
// 1457         
// 1458       break;
// 1459       
// 1460       case BDB_INITIALIZATION:
// 1461         //Notify user about successfull initialization
// 1462         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_INITIALIZATION;
??bdb_reportCommissioningState_6:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1463         if(didSuccess)
        MOV       A,R2
        JZ        ??bdb_reportCommissioningState_21
// 1464         {
// 1465           //Update ZDApp state
// 1466 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1467           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1468           {          
// 1469             ZDApp_ChangeState( DEV_ZB_COORD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x9
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1470           }
// 1471 #endif          
// 1472 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1473           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1474           {
// 1475             uint32 pollrate = POLL_RATE;
// 1476             NLME_SetPollRate(pollrate);
// 1477             ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
// 1478             
// 1479           }
// 1480 #endif          
// 1481           ZDApp_RestoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
        LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
// 1482           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0xd
        MOVX      @DPTR,A
// 1483           bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
// 1484           osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,200);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_c8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine13 & 0xFFFF
// 1485         }
??CrossCallReturnLabel_96:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        SJMP      ??bdb_reportCommissioningState_22
// 1486         else
// 1487         {
// 1488 #if (ZG_BUILD_ENDDEVICE_TYPE)                   
// 1489           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1490           {
// 1491             if(bdb_isDeviceNonFactoryNew())
// 1492             {
// 1493               //Notify the user about losing parent
// 1494               bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
// 1495               bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
// 1496               
// 1497               //Update ZDApp state
// 1498               ZDApp_ChangeState( DEV_NWK_ORPHAN );
// 1499             }
// 1500           }
// 1501 #endif
// 1502           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
??bdb_reportCommissioningState_21:
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1503         }
// 1504         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIALIZATION;
??bdb_reportCommissioningState_22:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.4
??bdb_reportCommissioningState_10:
        MOVX      @DPTR,A
// 1505 
// 1506       break;
// 1507 #if (ZG_BUILD_ENDDEVICE_TYPE)     
// 1508       case BDB_PARENT_LOST:
// 1509         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
// 1510         if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1511         {
// 1512           if(didSuccess)
// 1513           {
// 1514             uint32 pollrate = POLL_RATE;
// 1515             bdbCommissioningProcedureState.bdbCommissioningState = bdbCommissioningProcedureState.bdb_ParentLostSavedState;  
// 1516             bdbCommissioningProcedureState.bdb_ParentLostSavedState = 0;
// 1517             NLME_SetPollRate(pollrate);
// 1518             bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_PARENT_LOST;
// 1519             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
// 1520             //Update ZDApp state
// 1521             ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
// 1522             
// 1523             bdb_NetworkRestoredResumeState();
// 1524           }
// 1525           else
// 1526           {
// 1527             bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
// 1528             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
// 1529             
// 1530             NLME_SetPollRate(0);
// 1531             
// 1532           }
// 1533         }
// 1534       break;
// 1535 #endif
// 1536     }
// 1537 #ifdef MT_APP_CNF_FUNC
// 1538     //Notify the user about the status, the main state which has failed
// 1539     bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
// 1540     
// 1541     bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 1542 #else
// 1543     if(pfnCommissioningStatusCB)
??bdb_reportCommissioningState_7:
        MOV       DPTR,#pfnCommissioningStatusCB
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_86:
        JZ        ??bdb_reportCommissioningState_1
// 1544     {
// 1545       //Notify the user about the status, the main state which has failed
// 1546       bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine41_0 & 0xFFFF
// 1547       
// 1548       bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 1549     }
// 1550 #endif
// 1551   }  
??CrossCallReturnLabel_47:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1552 }
??bdb_reportCommissioningState_1:
        MOV       A,#0x4
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock98

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function bdb_event_loop
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        MOV       R2,#0x0
        MOV       R3,#0x40
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function bdb_StartCommissioning
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function bdb_reportCommissioningState
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function bdb_event_loop
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker105 Using cfiCommon1
          CFI (cfiPicker105) NoFunction
          CFI (cfiPicker105) Picker
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        RET
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiPicker105
// 1553 
// 1554 
// 1555  /*********************************************************************
// 1556  * @fn          bdb_nwkFormationAttempt
// 1557  *
// 1558  * @brief       Process a nwk formation attempt.
// 1559  *
// 1560  * @param       didSuccess - TRUE if the nwk formation was success, FALSE 
// 1561  *                         otherwise and try secondary channel
// 1562  *
// 1563  * @return      none
// 1564  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1565 void bdb_nwkFormationAttempt(bool didSuccess)
bdb_nwkFormationAttempt:
          CFI Block cfiBlock106 Using cfiCommon0
          CFI Function bdb_nwkFormationAttempt
        CODE
// 1566 {
        FUNCALL bdb_nwkFormationAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkFormationAttempt, bdb_nwkJoiningFormation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkFormationAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
// 1567   if(didSuccess)
        JZ        ??bdb_nwkFormationAttempt_0
// 1568   {
// 1569     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION,TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        SJMP      ??bdb_nwkFormationAttempt_1
// 1570   }
// 1571   else
// 1572   {
// 1573     //Can we try the secondary channel set?
// 1574     if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
??bdb_nwkFormationAttempt_0:
        MOV       DPTR,#vDoPrimaryScan
        MOVX      A,@DPTR
        JZ        ??bdb_nwkFormationAttempt_2
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkFormationAttempt_2
// 1575     {
// 1576       vDoPrimaryScan = FALSE;
        MOV       DPTR,#vDoPrimaryScan
        CLR       A
        MOVX      @DPTR,A
// 1577       bdb_nwkJoiningFormation(FALSE);
        ; Setup parameters for call to function bdb_nwkJoiningFormation
        MOV       R1,A
        LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
        SJMP      ??bdb_nwkFormationAttempt_3
// 1578     }
// 1579     else
// 1580     {
// 1581       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_nwkFormationAttempt_2:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
??bdb_nwkFormationAttempt_1:
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1582     }
// 1583   }
// 1584 }
??bdb_nwkFormationAttempt_3:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock106
// 1585 
// 1586 
// 1587 
// 1588 /*********************************************************************
// 1589  * @fn          bdb_isDeviceNonFactoryNew
// 1590  *
// 1591  * @brief       Returns the state of bdbNodeIsOnANetwork attribute
// 1592  * 
// 1593  * @param       none
// 1594  *
// 1595  * @return      bdbNodeIsOnANetwork
// 1596  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1597 bool bdb_isDeviceNonFactoryNew(void)
bdb_isDeviceNonFactoryNew:
          CFI Block cfiBlock107 Using cfiCommon0
          CFI Function bdb_isDeviceNonFactoryNew
        CODE
// 1598 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1599   return bdbAttributes.bdbNodeIsOnANetwork;
        MOV       DPTR,#bdbAttributes + 14
          CFI EndBlock cfiBlock107
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7
// 1600 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock108 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOVX      A,@DPTR
          CFI EndBlock cfiBlock108
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiBlock109 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV       R1,A
        LJMP      ??Subroutine46_0 & 0xFFFF
          CFI EndBlock cfiBlock109
// 1601 
// 1602 
// 1603 /*********************************************************************
// 1604  * @fn          bdb_doTrustCenterRequireKeyExchange
// 1605  *
// 1606  * @brief       Returns the state of bdbTrustCenterRequireKeyExchange attribute
// 1607  * 
// 1608  * @param       none
// 1609  *
// 1610  * @return      bdbTrustCenterRequireKeyExchange
// 1611  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1612 bool bdb_doTrustCenterRequireKeyExchange(void)
bdb_doTrustCenterRequireKeyExchange:
          CFI Block cfiBlock110 Using cfiCommon0
          CFI Function bdb_doTrustCenterRequireKeyExchange
        CODE
// 1613 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1614 #if (ZG_BUILD_COORDINATOR_TYPE) 
// 1615   return bdbAttributes.bdbTrustCenterRequireKeyExchange;
        MOV       DPTR,#bdbAttributes + 17
        SJMP      ?Subroutine7
// 1616 #else
// 1617   return 0;
// 1618 #endif
// 1619 }
          CFI EndBlock cfiBlock110
// 1620 
// 1621 /*********************************************************************
// 1622  * @fn      bdb_rejoinNwk
// 1623  *
// 1624  * @brief   Attempt to rejoin/resume a nwk from nv parameters
// 1625  *
// 1626  * @param   none
// 1627  *
// 1628  * @return  ZStatus_t
// 1629  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1630 ZStatus_t bdb_rejoinNwk(void)
bdb_rejoinNwk:
          CFI Block cfiBlock111 Using cfiCommon0
          CFI Function bdb_rejoinNwk
        CODE
// 1631 {
        FUNCALL bdb_rejoinNwk, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, NLME_ReJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, NLME_ReJoinRequestUnsecure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1632   ZStatus_t rejoinStatus = ZSuccess;
        MOV       R6,#0x0
// 1633   
// 1634   //Update the seq number
// 1635   _NIB.SequenceNum ++;
        MOV       DPTR,#_NIB
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
// 1636   
// 1637   osal_nv_write(ZCD_NV_NIB,osal_offsetof( nwkIB_t, SequenceNum ), sizeof( uint8), &_NIB.SequenceNum );
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#_NIB & 0xff
        MOV       ?V1,#(_NIB >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       ?V0,#0x1
        MOV       ?V1,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x21
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_105:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1638   
// 1639   // Transition state machine to correct rejoin state based on nwk key
// 1640   if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x0
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_rejoinNwk_0
// 1641   {
// 1642     ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x4
        SJMP      ??bdb_rejoinNwk_1
// 1643   }
// 1644   else
// 1645   {
// 1646     ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
??bdb_rejoinNwk_0:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0xe
??bdb_rejoinNwk_1:
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1647   }
// 1648 
// 1649   // Before trying to do rejoin, check if the device has a valid short address
// 1650   // If not, generate a random short address for itself
// 1651   if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??bdb_rejoinNwk_2
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??bdb_rejoinNwk_2:
        JNZ       ??bdb_rejoinNwk_3
// 1652   {
// 1653     rejoinStatus = ZFailure;
        MOV       R6,#0x1
// 1654   }
// 1655 
// 1656   // Check if the device has a valid PanID, if not, set it to the discovered Pan
// 1657   if ( _NIB.nwkPanId == 0xFFFF )
??bdb_rejoinNwk_3:
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??bdb_rejoinNwk_4
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??bdb_rejoinNwk_4:
        JNZ       ??bdb_rejoinNwk_5
// 1658   {
// 1659     rejoinStatus = ZFailure;
        MOV       R6,#0x1
        SJMP      ??bdb_rejoinNwk_6
// 1660   }
// 1661 
// 1662   if(rejoinStatus == ZSuccess)
??bdb_rejoinNwk_5:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JC        ??bdb_rejoinNwk_6
// 1663   {
// 1664     uint8 tmp = true;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1665     ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1666         
// 1667     // Perform Secure or Unsecure Rejoin depending on available configuration
// 1668     if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x1
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        XRL       A,#0x1
        MOV       DPTR,#_NIB + 22
        JNZ       ??bdb_rejoinNwk_7
// 1669     {
// 1670       rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
        ; Setup parameters for call to function NLME_ReJoinRequest
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
        SJMP      ??bdb_rejoinNwk_8
// 1671     }
// 1672     else
// 1673     {
// 1674       rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
??bdb_rejoinNwk_7:
        ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
??bdb_rejoinNwk_8:
        MOV       A,R1
        MOV       R6,A
// 1675     }
// 1676   }
// 1677   
// 1678   return rejoinStatus;
??bdb_rejoinNwk_6:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x1
        LJMP      ?Subroutine1 & 0xFFFF
// 1679 }
          CFI EndBlock cfiBlock111
// 1680 
// 1681 #if (ZG_BUILD_JOINING_TYPE)
// 1682  /*********************************************************************
// 1683  * @fn          bdb_nwkDiscoveryAttempt
// 1684  *
// 1685  * @brief       Process a nwk discovery attempt
// 1686  *
// 1687  * @param       didSuccess - TRUE we found nwk in the scanned channels, FALSE if 
// 1688  *                           no suitable nwks were found, try secondary channel
// 1689  *
// 1690  * @return      none
// 1691  */
// 1692 void bdb_nwkDiscoveryAttempt(bool didSuccess)
// 1693 {
// 1694   uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
// 1695   
// 1696   if(didSuccess)
// 1697   {
// 1698     bdb_SendMsg(bdb_TaskID, BDB_COMMISSIONING_STATE_JOINING, BDB_MSG_EVENT_SUCCESS,sizeof(bdbJoinEvent),(uint8*)&bdbJoinEvent);
// 1699   }
// 1700   else
// 1701   {
// 1702     //Can we try the secondary channel set?
// 1703     if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
// 1704     {
// 1705       vDoPrimaryScan = FALSE;
// 1706       bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
// 1707       
// 1708       ZDApp_NetworkInit( 50 );
// 1709     }
// 1710     else
// 1711     {
// 1712       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
// 1713     }
// 1714   }
// 1715 }
// 1716 
// 1717  /*********************************************************************
// 1718  * @fn          bdb_filterNwkDisc
// 1719  *
// 1720  * @brief       Filter the nwks found and attempt to join the suitable nwks
// 1721  *              Here the application can include nwk filters 
// 1722  *
// 1723  * @param       none
// 1724  *
// 1725  * @return      none
// 1726  */
// 1727 void bdb_filterNwkDisc(void)
// 1728 {
// 1729   networkDesc_t* pNwkDesc;
// 1730   uint8 i = 0;
// 1731   uint8 ResultCount = 0;
// 1732   uint8 stackProfile = 0;
// 1733   uint8 stackProfilePro = 0;
// 1734   
// 1735   pBDBListNwk  = nwk_getNwkDescList();
// 1736   nwk_desc_list_release();
// 1737   
// 1738   pNwkDesc = pBDBListNwk;
// 1739   while (pNwkDesc)
// 1740   {
// 1741     ResultCount++;
// 1742     pNwkDesc = pNwkDesc->nextDesc;
// 1743   }
// 1744   
// 1745   if(pBDBListNwk)
// 1746   {
// 1747     if(pfnFilterNwkDesc)
// 1748     {
// 1749       pfnFilterNwkDesc(pBDBListNwk, ResultCount);
// 1750     }
// 1751     
// 1752     for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
// 1753     {
// 1754       pNwkDesc = pBDBListNwk;
// 1755       
// 1756       if(pNwkDesc)
// 1757       {
// 1758         for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
// 1759         {
// 1760           if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
// 1761           {
// 1762             // If the extended Pan ID is commissioned to a non zero value
// 1763             // Only join the Pan that has match EPID
// 1764             if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 1765             {
// 1766               //Remove from the list
// 1767               bdb_nwkDescFree(pNwkDesc);
// 1768               ResultCount--;
// 1769               continue;
// 1770             }
// 1771           }
// 1772           else if ( zgConfigPANID != 0xFFFF )
// 1773           {
// 1774             // PAN Id is preconfigured. check if it matches
// 1775             if ( pNwkDesc->panId != zgConfigPANID )
// 1776             {
// 1777               //Remove from the list
// 1778               bdb_nwkDescFree(pNwkDesc);
// 1779               ResultCount--;
// 1780               continue;
// 1781             }
// 1782           }
// 1783 
// 1784           if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
// 1785           {
// 1786             // check that network is allowing joining
// 1787             if ( ZSTACK_ROUTER_BUILD )
// 1788             {
// 1789               if ( stackProfilePro == FALSE )
// 1790               {
// 1791                 if ( !pNwkDesc->routerCapacity )
// 1792                 {
// 1793                   //Remove from the list
// 1794                   bdb_nwkDescFree(pNwkDesc);
// 1795                   ResultCount--;
// 1796                   continue;
// 1797                 }
// 1798               }
// 1799               else
// 1800               {
// 1801                 if ( !pNwkDesc->deviceCapacity )
// 1802                 {
// 1803                   //Remove from the list
// 1804                   bdb_nwkDescFree(pNwkDesc);
// 1805                   ResultCount--;
// 1806                   continue;
// 1807                 }
// 1808               }
// 1809             }
// 1810             else if ( ZSTACK_END_DEVICE_BUILD )
// 1811             {
// 1812               if ( !pNwkDesc->deviceCapacity )
// 1813               {
// 1814                 //Remove from the list
// 1815                 bdb_nwkDescFree(pNwkDesc);
// 1816                 ResultCount--;
// 1817                 continue;
// 1818               }
// 1819             }
// 1820           }
// 1821 
// 1822           // check version of zigbee protocol
// 1823           if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 1824             continue;
// 1825 
// 1826           // check version of stack profile
// 1827           if ( pNwkDesc->stackProfile != zgStackProfile  )
// 1828           {
// 1829             if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 1830                 || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
// 1831             {
// 1832               stackProfilePro = TRUE;
// 1833             }
// 1834 
// 1835             if ( stackProfile == 0 )
// 1836             {
// 1837               //Remove from the list
// 1838               bdb_nwkDescFree(pNwkDesc);
// 1839               ResultCount--;
// 1840               continue;
// 1841             }
// 1842           }
// 1843         }
// 1844       }
// 1845     }
// 1846   }
// 1847 }
// 1848       
// 1849  /*********************************************************************
// 1850  * @fn          bdb_tryNwkAssoc
// 1851  *
// 1852  * @brief       Try to associate to the first network in the network descriptor list
// 1853  *
// 1854  * @param       none
// 1855  *
// 1856  * @return      none
// 1857  */
// 1858 static void bdb_tryNwkAssoc(void)
// 1859 {
// 1860   if(pBDBListNwk)
// 1861   {
// 1862     bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
// 1863     
// 1864     //Try the first in the list after the filtering
// 1865     if(ZSuccess != bdb_joinProcess(pBDBListNwk))
// 1866     {
// 1867       //If fail, free the first in the list and prepare for futher processing, either next nwk or discover again
// 1868       uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
// 1869       bdb_nwkDescFree(pBDBListNwk);
// 1870       bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
// 1871     }
// 1872   }
// 1873   else
// 1874   {
// 1875     bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_NWK_DISC;
// 1876     uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
// 1877     
// 1878     bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
// 1879   }
// 1880 }
// 1881 
// 1882 
// 1883 
// 1884  /*********************************************************************
// 1885  * @fn          bdb_nwkAssocAttemt
// 1886  *
// 1887  * @brief       Process the result of an attempt to associate to a network 
// 1888  *
// 1889  * @param       didSuccess - bool
// 1890  *
// 1891  * @return      none
// 1892  */
// 1893 void bdb_nwkAssocAttemt(bool didSuccess)
// 1894 {
// 1895   bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_STATE_JOINING;
// 1896   uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
// 1897   uint8 status;
// 1898   
// 1899   if(didSuccess)
// 1900   {
// 1901     status = BDB_MSG_EVENT_SUCCESS;
// 1902   }
// 1903   else
// 1904   {
// 1905     if(bdb_nwkAssocRetriesCount < BDBC_REC_SAME_NETWORK_RETRY_ATTEMPS)
// 1906     {
// 1907       bdb_nwkAssocRetriesCount++;
// 1908     }
// 1909     else
// 1910     {
// 1911       //Free the first in the list and prepare for futher processing
// 1912       bdb_nwkDescFree(pBDBListNwk);
// 1913       bdb_nwkAssocRetriesCount = 0;
// 1914     }
// 1915     status = BDB_MSG_EVENT_FAIL;
// 1916   }
// 1917   bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,status,sizeof(uint8),&bdbJoinEvent);
// 1918 }
// 1919                        
// 1920 
// 1921 /****************************************************************************
// 1922  * @fn          bdb_nwkDescFree
// 1923  *
// 1924  * @brief       This function frees one network discovery data.
// 1925  *
// 1926  * @param       ZSuccess - If the device was found and erased
// 1927  * @param       ZInvalidParameter - Not found
// 1928  *
// 1929  * @return      none
// 1930  */
// 1931 ZStatus_t bdb_nwkDescFree(networkDesc_t* nodeDescToRemove)
// 1932 {
// 1933   networkDesc_t* current_desc;
// 1934   networkDesc_t* prev_desc;
// 1935   
// 1936   current_desc = pBDBListNwk;
// 1937 
// 1938   while(current_desc != NULL)
// 1939   {  
// 1940     if(current_desc == nodeDescToRemove)
// 1941     {
// 1942       if (current_desc == pBDBListNwk)
// 1943       {
// 1944         pBDBListNwk = pBDBListNwk->nextDesc;
// 1945       }
// 1946       else
// 1947       {
// 1948         prev_desc->nextDesc = current_desc->nextDesc;
// 1949       }
// 1950       
// 1951       osal_mem_free( current_desc );
// 1952       
// 1953       return ZSuccess;
// 1954     }
// 1955 
// 1956     prev_desc = current_desc;
// 1957     current_desc = current_desc->nextDesc;
// 1958   }
// 1959   
// 1960   return ZInvalidParameter;
// 1961 }
// 1962 
// 1963 /*********************************************************************
// 1964 * @fn          bdb_joinProcess
// 1965 *
// 1966 * @brief       Start the joining process for the selected nwk
// 1967 *
// 1968 * @return      ZStatus_t
// 1969 */  
// 1970 ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk)
// 1971 {
// 1972   ZStatus_t status;
// 1973  
// 1974   ZDApp_ChangeState( DEV_NWK_JOINING );
// 1975   ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
// 1976 
// 1977   status =  NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
// 1978                         pChosenNwk->logicalChannel,
// 1979                         ZDO_Config_Node_Descriptor.CapabilityFlags,
// 1980                         pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth );
// 1981   
// 1982   if(status == ZSuccess)
// 1983   {
// 1984     // The receiver is on, turn network layer polling off.
// 1985     if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
// 1986     {
// 1987       // for an End Device with NO Child Table Management process or for a Router
// 1988       if ( ( ZG_DEVICE_RTR_TYPE )  ||
// 1989            ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
// 1990       {
// 1991         NLME_SetPollRate( 0 );
// 1992         NLME_SetQueuedPollRate( 0 );
// 1993         NLME_SetResponseRate( 0 );
// 1994       }
// 1995     }
// 1996     else
// 1997     {
// 1998       if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
// 1999       {
// 2000         ZDApp_SavedPollRate = zgPollRate;
// 2001         NLME_SetPollRate( zgRejoinPollRate );
// 2002       }
// 2003     }
// 2004   }
// 2005   return status;
// 2006 }
// 2007 #endif
// 2008 
// 2009 
// 2010  /*********************************************************************
// 2011  * @fn          bdb_setChannelAttribute
// 2012  *
// 2013  * @brief       Set the primary or seconday channel for discovery or formation procedure
// 2014  *
// 2015  * @param       isPrimaryChannel - True if channel to set is primary,  
// 2016  *                                 False if the channel to set is secondary
// 2017  *
// 2018  * @param       channel - Channel mask
// 2019  *
// 2020  * @return      none
// 2021  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2022 void bdb_setChannelAttribute(bool isPrimaryChannel, uint32 channel)
bdb_setChannelAttribute:
          CFI Block cfiBlock112 Using cfiCommon0
          CFI Function bdb_setChannelAttribute
        CODE
// 2023 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2024   if(isPrimaryChannel)
        MOV       A,R1
        JZ        ??bdb_setChannelAttribute_0
// 2025   {
// 2026     bdbAttributes.bdbPrimaryChannelSet = channel;
        MOV       DPTR,#bdbAttributes + 4
        SJMP      ??bdb_setChannelAttribute_1
// 2027   }
// 2028   else
// 2029   {
// 2030     bdbAttributes.bdbSecondaryChannelSet = channel;
??bdb_setChannelAttribute_0:
        MOV       DPTR,#bdbAttributes
??bdb_setChannelAttribute_1:
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2031   }
// 2032 }
        SJMP      ??Subroutine50_0
          CFI EndBlock cfiBlock112
// 2033 
// 2034  /*********************************************************************
// 2035  * @fn          bdb_setChannel
// 2036  *
// 2037  * @brief       Set channel and save it in Nv for joining/formation operations
// 2038  *
// 2039  * @param       channel - Channel mask
// 2040  *
// 2041  * @return      none
// 2042  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock113 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x4
          CFI EndBlock cfiBlock113
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiBlock114 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock114
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiBlock115 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock115

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2043 void bdb_setChannel(uint32 channel)
bdb_setChannel:
          CFI Block cfiBlock116 Using cfiCommon0
          CFI Function bdb_setChannel
        CODE
// 2044 {
        FUNCALL bdb_setChannel, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2045   //Assign the channel and save it into nv
// 2046   vScanChannels = channel;
        MOV       DPTR,#zgDefaultChannelList
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2047   runtimeChannel = channel;
        MOV       DPTR,#runtimeChannel
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2048     
// 2049   osal_nv_write(ZCD_NV_CHANLIST,0,sizeof(uint32),&vScanChannels);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#zgDefaultChannelList & 0xff
        MOV       ?V1,#(zgDefaultChannelList >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x4
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7c
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        SJMP      ?Subroutine2
// 2050 }
          CFI EndBlock cfiBlock116
// 2051 
// 2052 
// 2053  /*********************************************************************
// 2054  * @fn          bdb_nwkJoiningFormation   
// 2055  *
// 2056  * @brief       Performs Joining/Formation operation on primary or secondary channel
// 2057  *
// 2058  * @param       isJoining - TRUE if the device is performing joining, FALSE is performing Formation
// 2059  *
// 2060  * @return      none
// 2061  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2062 void bdb_nwkJoiningFormation(bool isJoining)
bdb_nwkJoiningFormation:
          CFI Block cfiBlock117 Using cfiCommon0
          CFI Function bdb_nwkJoiningFormation
        CODE
// 2063 {
        FUNCALL bdb_nwkJoiningFormation, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2064   
// 2065   if((vDoPrimaryScan) && (bdbAttributes.bdbPrimaryChannelSet))
        MOV       DPTR,#vDoPrimaryScan
        MOVX      A,@DPTR
        JZ        ??bdb_nwkJoiningFormation_0
        MOV       DPTR,#bdbAttributes + 4
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        ORL       A,?V1
        ORL       A,?V2
        ORL       A,?V3
        JZ        ??bdb_nwkJoiningFormation_0
// 2066   {
// 2067     bdb_setChannel(bdbAttributes.bdbPrimaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        SJMP      ??bdb_nwkJoiningFormation_1
// 2068   }
// 2069   else
// 2070   {
// 2071     vDoPrimaryScan = FALSE;
??bdb_nwkJoiningFormation_0:
        MOV       DPTR,#vDoPrimaryScan
        CLR       A
        MOVX      @DPTR,A
// 2072     bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R2345
??bdb_nwkJoiningFormation_1:
        LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
// 2073   }
// 2074 
// 2075   if(vScanChannels)
        MOV       DPTR,#zgDefaultChannelList
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkJoiningFormation_2
// 2076   {
// 2077     if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_nwkJoiningFormation_3
// 2078     {
// 2079       if(isJoining)
        MOV       A,R6
        JNZ       ??bdb_nwkJoiningFormation_3
// 2080       {
// 2081         ZDOInitDeviceEx(100,0);
// 2082       }
// 2083       else
// 2084       {
// 2085         ZDOInitDeviceEx(100,1);
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x1
        SJMP      ??bdb_nwkJoiningFormation_4
// 2086       }
// 2087     }
// 2088     //ZED can only join, and ZC can only create
// 2089     else
// 2090     {
// 2091       ZDOInitDeviceEx(100,0);
??bdb_nwkJoiningFormation_3:
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
??bdb_nwkJoiningFormation_4:
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        SJMP      ??bdb_nwkJoiningFormation_5
// 2092     }
// 2093   }
// 2094   else
// 2095   {
// 2096     if(isJoining)
??bdb_nwkJoiningFormation_2:
        MOV       A,R6
        MOV       R2,#0x0
        JZ        ??bdb_nwkJoiningFormation_6
// 2097     {
// 2098       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R1,#0x3
        SJMP      ??bdb_nwkJoiningFormation_7
// 2099     }
// 2100     else
// 2101     {
// 2102       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_nwkJoiningFormation_6:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R1,#0x5
??bdb_nwkJoiningFormation_7:
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2103     }
// 2104   }
// 2105 }
??bdb_nwkJoiningFormation_5:
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock117
// 2106 
// 2107 #if (ZG_BUILD_JOINING_TYPE)
// 2108  /*********************************************************************
// 2109  * @fn          bdb_tcLinkKeyExchangeAttempt
// 2110  *
// 2111  * @brief       Generic send msg for TC link key exchange process attempts
// 2112  *
// 2113  * @param       didSuccess - FALSE if the step failed/timeout, TRUE otherwise
// 2114  * @param       bdbTCExchangeState - Step in which the attemp was done
// 2115  *
// 2116  * @return      none
// 2117  */
// 2118 void bdb_tcLinkKeyExchangeAttempt(bool didSuccess, uint8 bdbTCExchangeState)
// 2119 {
// 2120   bool bdbEventStatus = BDB_MSG_EVENT_SUCCESS;
// 2121   uint8 dummy;
// 2122   bdbCommissioningProcedureState.bdbTCExchangeState = bdbTCExchangeState;
// 2123   if(didSuccess)
// 2124   {
// 2125     //Allow try since we are performing a new step.
// 2126     osal_stop_timerEx(bdb_TaskID, BDB_PROCESS_TIMEOUT);
// 2127     bdbAttributes.bdbTCLinkKeyExchangeAttempts = 0;
// 2128   }
// 2129   else
// 2130   {
// 2131     bdbEventStatus = BDB_MSG_EVENT_FAIL;
// 2132   }
// 2133   bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,bdbEventStatus,1, &dummy);
// 2134 }
// 2135 
// 2136 
// 2137  /*********************************************************************
// 2138  * @fn          bdb_requestVerifyTCLinkKey
// 2139  *
// 2140  * @brief       Attempt to verify the TC link key by sending Verify Key Request
// 2141  *
// 2142  * @param       none
// 2143  *
// 2144  * @return      none
// 2145  */
// 2146 void bdb_requestVerifyTCLinkKey(void)
// 2147 {
// 2148     uint8 TC_ExtAddr[Z_EXTADDR_LEN];
// 2149     APSME_VerifyKeyReq_t vKey;
// 2150     
// 2151     APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
// 2152     
// 2153     vKey.tcExtAddr = TC_ExtAddr;
// 2154     vKey.keyType = KEY_TYPE_TC_LINK;
// 2155     
// 2156     APSME_VerifyKeyReq( &vKey );
// 2157     
// 2158     osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
// 2159     osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,BDBC_TC_LINK_KEY_EXANGE_TIMEOUT);
// 2160     
// 2161 }
// 2162 
// 2163 /*********************************************************************
// 2164  * @fn          bdb_requestTCLinkKey
// 2165  *
// 2166  * @brief       Attempt to request a TC link key
// 2167  *
// 2168  * @param       none
// 2169  *
// 2170  * @return      none
// 2171  */
// 2172 void bdb_requestTCLinkKey(void)
// 2173 {
// 2174   zAddrType_t destAddr;
// 2175   APSME_RequestKeyReq_t req;
// 2176 
// 2177   destAddr.addrMode = Addr16Bit;
// 2178   destAddr.addr.shortAddr = 0x0000;
// 2179   
// 2180   req.dstAddr = destAddr.addr.shortAddr;
// 2181   req.keyType = KEY_TYPE_TC_LINK;
// 2182   
// 2183   APSME_RequestKeyReq(&req);
// 2184   
// 2185   osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
// 2186   
// 2187   osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,(uint32)requestLinkKeyTimeout);
// 2188 } 
// 2189 
// 2190 
// 2191 /*********************************************************************
// 2192  * @fn          bdb_requestTCStackVersion
// 2193  *
// 2194  * @brief       Attempt to request the TC stack version using ZDP Node desc if 
// 2195  *              join a Centralized nwk
// 2196  *
// 2197  * @param       none
// 2198  *
// 2199  * @return      none
// 2200  */
// 2201 void bdb_requestTCStackVersion(void)
// 2202 {
// 2203   if(requestNewTrustCenterLinkKey)
// 2204   {
// 2205     if(!APSME_IsDistributedSecurity())
// 2206     {
// 2207       if(bdbAttributes.bdbTCLinkKeyExchangeMethod == BDB_TC_LINK_KEY_EXCHANGE_APS_KEY)
// 2208       {
// 2209         zAddrType_t destAddr;
// 2210        
// 2211         destAddr.addrMode = Addr16Bit;
// 2212         destAddr.addr.shortAddr = 0x0000;
// 2213        
// 2214         ZDP_NodeDescReq( &destAddr, destAddr.addr.shortAddr, 0);  
// 2215         
// 2216         osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
// 2217         osal_start_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT, BDBC_TC_LINK_KEY_EXANGE_TIMEOUT );
// 2218         return;
// 2219       }
// 2220       else
// 2221       {
// 2222         if(pfnCBKETCLinkKeyExchange)
// 2223         {
// 2224           pfnCBKETCLinkKeyExchange();
// 2225         }
// 2226         return;
// 2227       }
// 2228     }
// 2229     else
// 2230     {
// 2231       bdb_setNodeJoinLinkKeyType(BDB_DISTRIBUTED_SECURITY_GLOBAL_LINK_KEY);
// 2232     }
// 2233   }
// 2234   else
// 2235   {
// 2236     //Key not required, set default which is global
// 2237     bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
// 2238   }
// 2239   //TC link key not required or join distributed nwk
// 2240   bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,TRUE);
// 2241 }
// 2242 #endif
// 2243 
// 2244 
// 2245 /*********************************************************************
// 2246  * @fn          bdb_nwkSteeringDeviceOnNwk
// 2247  *
// 2248  * @brief       Send ZDP mgmt permit joining
// 2249  *
// 2250  * @param       none
// 2251  *
// 2252  * @return      none
// 2253  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2254 void bdb_nwkSteeringDeviceOnNwk(void)
bdb_nwkSteeringDeviceOnNwk:
          CFI Block cfiBlock118 Using cfiCommon0
          CFI Function bdb_nwkSteeringDeviceOnNwk
        CODE
// 2255 {
        FUNCALL bdb_nwkSteeringDeviceOnNwk, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 2256   zAddrType_t dstAddr;
// 2257   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 2258   dstAddr.addrMode = AddrBroadcast;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        MOVX      @DPTR,A
// 2259   // Trust Center significance is always true
// 2260   ZDP_MgmtPermitJoinReq( &dstAddr, BDBC_MIN_COMMISSIONING_TIME, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV       R5,#0x0
        MOV       R4,#0x1
        MOV       R1,#-0x4c
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
// 2261 }
        MOV       A,#0x9
          CFI EndBlock cfiBlock118
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock119 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 9)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
          CFI Valid
        LJMP      ??Subroutine46_0 & 0xFFFF
          CFI EndBlock cfiBlock119
// 2262 
// 2263 
// 2264 /*********************************************************************
// 2265  * @fn          bdb_startResumeCommissioningProcess
// 2266  *
// 2267  * @brief       Starts or resume the commissioning operations sets in the 
// 2268  *              commissioningMode attribute
// 2269  *
// 2270  * @param       none
// 2271  *
// 2272  * @return      none
// 2273  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2274 void bdb_startResumeCommissioningProcess(void)
bdb_startResumeCommissioningProcess:
          CFI Block cfiBlock120 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
        CODE
// 2275 {
        FUNCALL bdb_startResumeCommissioningProcess, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_nwkJoiningFormation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_NotifyCommissioningModeStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendIdentifyQuery
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 11
        MOV       A,#-0xb
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 2276 
// 2277 #if ( defined ( BDB_TL_INITIATOR ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) ) 
// 2278   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_INITIATOR_TL)
// 2279   {
// 2280     uint16 nwkAddr;
// 2281 
// 2282     //Does the device supports this commissioning mode?
// 2283     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_TOUCHLINK_CAPABILITY)
// 2284     {
// 2285       //Clear previous state and substates
// 2286       osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
// 2287       bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TL;
// 2288       
// 2289       // Get our short address
// 2290       ZMacGetReq( ZMacShortAddress, (byte*)&nwkAddr );
// 2291       if ( nwkAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR )
// 2292       {
// 2293         initiatorSelectNwkParams();
// 2294       }
// 2295       
// 2296       touchLinkInitiator_StartDevDisc( );  
// 2297       
// 2298       bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_TOUCHLINK);
// 2299     }
// 2300     else
// 2301     {
// 2302       //Process the next commissioning mode
// 2303       bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
// 2304     }
// 2305     return;
// 2306   }
// 2307 #endif // BDB_TOUCHLINK_CAPABILITY_ENABLED  
// 2308   
// 2309 #if ZG_BUILD_ENDDEVICE_TYPE
// 2310   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 2311   {
// 2312     if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
// 2313     {
// 2314       //No commissioning process can be performed if the ZED has lost its parent
// 2315       return;
// 2316     }
// 2317   }
// 2318 #endif
// 2319   
// 2320   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_STEERING)
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_startResumeCommissioningProcess_0
// 2321   {
// 2322     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x4
        MOVX      @DPTR,A
// 2323     
// 2324     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_STEERING_CAPABILITY)
        MOV       DPTR,#bdbAttributes + 12
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_startResumeCommissioningProcess_1
// 2325     {
// 2326 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 2327       bdb_ClearNetworkParams();
// 2328 #endif
// 2329       if(bdbAttributes.bdbNodeIsOnANetwork)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??CrossCallReturnLabel_27
// 2330       {
// 2331         bdb_nwkSteeringDeviceOnNwk();
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL     ?Subroutine30 & 0xFFFF
// 2332         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
// 2333       }
// 2334 #if (ZG_BUILD_JOINING_TYPE)
// 2335       else
// 2336       {
// 2337         if(ZG_DEVICE_JOINING_TYPE)
// 2338         {
// 2339           vDoPrimaryScan = TRUE;
// 2340           
// 2341           //Initialize the commissioning procedure state, bdbJoinState to nwk discovery and TCLinkKeyExchange to not active
// 2342           osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState_t));
// 2343           bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_JOINING;
// 2344           bdb_nwkJoiningFormation(TRUE);
// 2345           bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_NWK_STEERING);
// 2346         }
// 2347       }
// 2348 #endif
// 2349 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2350       if(ZG_DEVICE_COORDINATOR_TYPE)
// 2351       {
// 2352         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, FALSE);
??CrossCallReturnLabel_27:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2353       }
// 2354 #endif
// 2355     }
// 2356     return;
??bdb_startResumeCommissioningProcess_1:
        LJMP      ??bdb_startResumeCommissioningProcess_2 & 0xFFFF
// 2357   }
// 2358   
// 2359   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_FORMATION)
??bdb_startResumeCommissioningProcess_0:
        MOV       C,0xE0 /* A   */.2
        JNC       ??bdb_startResumeCommissioningProcess_3
// 2360   {
// 2361     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x5
        MOVX      @DPTR,A
// 2362     
// 2363     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_FORMATION_CAPABILITY)
        MOV       DPTR,#bdbAttributes + 12
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_startResumeCommissioningProcess_4
// 2364     {
// 2365       if(!bdbAttributes.bdbNodeIsOnANetwork)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JNZ       ??bdb_startResumeCommissioningProcess_4
// 2366       {
// 2367 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 2368       bdb_ClearNetworkParams();
// 2369 #endif
// 2370         vDoPrimaryScan = TRUE;
        MOV       DPTR,#vDoPrimaryScan
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2371         
// 2372         osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,#bdbCommissioningProcedureState & 0xff
        MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2373         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x5
        MOVX      @DPTR,A
// 2374 
// 2375         bdb_nwkJoiningFormation(FALSE);
        ; Setup parameters for call to function bdb_nwkJoiningFormation
        MOV       R1,#0x0
        LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
// 2376         bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_FORMATION);
        ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
        MOV       R1,#0x2
        LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
// 2377         return;
        LJMP      ??bdb_startResumeCommissioningProcess_2 & 0xFFFF
// 2378       }
// 2379     }
// 2380     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_startResumeCommissioningProcess_4:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2381     return;
        LJMP      ??bdb_startResumeCommissioningProcess_2 & 0xFFFF
// 2382   }
// 2383 
// 2384 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)    
// 2385   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
??bdb_startResumeCommissioningProcess_3:
        MOV       C,0xE0 /* A   */.3
        JC        $+5
        LJMP      ??bdb_startResumeCommissioningProcess_2 & 0xFFFF
// 2386   {
// 2387     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FINDING_BINDING;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x6
        MOVX      @DPTR,A
// 2388     
// 2389     //Is the device on a network?
// 2390     if(bdb_isDeviceNonFactoryNew())
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_5 & 0xFFFF
// 2391     {
// 2392       zclAttrRec_t attrRec;
// 2393 
// 2394       endPointDesc_t *bdb_CurrEpDescriptor = NULL;
// 2395 
// 2396       bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
// 2397       
// 2398       //If not found endpoint with Identify cluster is found, then report fail
// 2399       if(bdb_CurrEpDescriptor == NULL)
        MOV       A,R2
        ORL       A,R7
        JNZ       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_5 & 0xFFFF
// 2400       {
// 2401         bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
// 2402         return;
// 2403       }
// 2404       
// 2405       if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET)  //F&B as Target
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV       R0,A
        INC       DPTR
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_69:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        $+5
        LJMP      ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
// 2406       {
// 2407         if (zclFindAttrRec( bdb_CurrEpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2408                   ATTRID_IDENTIFY_TIME, &attrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R1
        JZ        ??bdb_startResumeCommissioningProcess_7
// 2409         {
// 2410           //Set it to at less 180 
// 2411           if ( *((uint16*)attrRec.attr.dataPtr) <= BDBC_MIN_COMMISSIONING_TIME )
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_23:
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#-0x4b
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JNC       ??bdb_startResumeCommissioningProcess_8
// 2412           {
// 2413             *((uint16*)attrRec.attr.dataPtr) = BDBC_MIN_COMMISSIONING_TIME;
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,#-0x4c
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
// 2414              osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R2,#0x0
        MOV       R3,#0x20
        LCALL     ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_101:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 2415 
// 2416             if(pfnIdentifyTimeChangeCB != NULL)
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_87:
        JZ        ??bdb_startResumeCommissioningProcess_8
// 2417             {
// 2418               if(bdbIndentifyActiveEndpoint == 0xFF)
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??bdb_startResumeCommissioningProcess_9
// 2419               {
// 2420                 pfnIdentifyTimeChangeCB(bdbIndentifyActiveEndpoint);  
        ; Setup parameters for indirect call
        MOV       R1,#-0x1
        SJMP      ??bdb_startResumeCommissioningProcess_10
// 2421               }
// 2422               else
// 2423               {
// 2424                 pfnIdentifyTimeChangeCB(bdb_CurrEpDescriptor->endPoint);
??bdb_startResumeCommissioningProcess_9:
        ; Setup parameters for indirect call
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
// 2425               }
// 2426             }
// 2427           }
??bdb_startResumeCommissioningProcess_10:
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL     ?CALL_IND
// 2428           //Attribute found and set, report success
// 2429           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
??bdb_startResumeCommissioningProcess_8:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_2:
        JC        ??bdb_startResumeCommissioningProcess_11
// 2430           {
// 2431             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0x9
        SJMP      ??bdb_startResumeCommissioningProcess_12
// 2432           }
// 2433           else
// 2434           {
// 2435             bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 2436 
// 2437             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
??bdb_startResumeCommissioningProcess_11:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2438             bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x9
        LCALL     ??Subroutine41_0 & 0xFFFF
// 2439 
// 2440             bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 2441           }
// 2442         }
??CrossCallReturnLabel_48:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        SJMP      ??bdb_startResumeCommissioningProcess_6
// 2443         else
// 2444         {
// 2445           //Attribute not found and no initiator process, report fail
// 2446           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
??bdb_startResumeCommissioningProcess_7:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_3:
        JC        ??bdb_startResumeCommissioningProcess_6
// 2447           {
// 2448             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
??bdb_startResumeCommissioningProcess_12:
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2449           }
// 2450         }
// 2451       }  //F&B Target
// 2452       
// 2453       if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR)  //F&B as Initiator
??bdb_startResumeCommissioningProcess_6:
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_9:
        ADD       A,#0x1
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_startResumeCommissioningProcess_2
// 2454       {
// 2455         bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 2456         
// 2457         //If no function to add binds is available then do not process Initiator
// 2458         if(!pbindAddEntry)
        MOV       DPTR,#pbindAddEntry
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_124:
        JNZ       ??bdb_startResumeCommissioningProcess_13
// 2459         {
// 2460           //If no target process, then report fail
// 2461           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET))
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        ??bdb_startResumeCommissioningProcess_2
// 2462           {
// 2463             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
// 2464           }        
// 2465         }
// 2466         else
// 2467         {
// 2468           //Send identify query with the endpoint requested
// 2469           if(bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint) != ZSuccess)
// 2470           {
// 2471             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
// 2472           }
// 2473 
// 2474           //If periodic F&B is enabled
// 2475           if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
// 2476           {
// 2477             // total F&B time will be at least BDBC_MIN_COMMISSIONING_TIME, and at most (BDBC_MIN_COMMISSIONING_TIME + FINDING_AND_BINDING_PERIODIC_TIME - 1)
// 2478             bdb_FB_InitiatorCurrentCyclesNumber = (BDBC_MIN_COMMISSIONING_TIME + (FINDING_AND_BINDING_PERIODIC_TIME - 1)) / FINDING_AND_BINDING_PERIODIC_TIME;
// 2479             
// 2480             osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
// 2481           }
// 2482 
// 2483           bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
// 2484           bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_INITITATOR_IN_PROGRESS;
// 2485 
// 2486           bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 2487         }
// 2488       } //F&B Initiator
// 2489     }
// 2490     //Not in the network
// 2491     else
// 2492     {
// 2493       bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
??bdb_startResumeCommissioningProcess_5:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2494     }
// 2495     
// 2496     return;
        SJMP      ??bdb_startResumeCommissioningProcess_2
??bdb_startResumeCommissioningProcess_13:
        ; Setup parameters for call to function bdb_SendIdentifyQuery
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
        MOV       A,R1
        JZ        ??bdb_startResumeCommissioningProcess_14
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
??bdb_startResumeCommissioningProcess_14:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOV       A,#0xc
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3a98
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R2,#0x40
        LCALL     ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_98:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0xa
        LCALL     ??Subroutine41_0 & 0xFFFF
// 2497   }
??CrossCallReturnLabel_49:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 2498 #endif
// 2499   
// 2500 }
??bdb_startResumeCommissioningProcess_2:
        MOV       A,#0xb
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock120

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function bdb_StartCommissioning
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function bdb_event_loop
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
        ; Setup parameters for call to function bdb_reportCommissioningState
        ; Setup parameters for call to function bdb_reportCommissioningState
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
        RET
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_135:
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_71
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function bdb_event_loop
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        MOV       DPTR,#pfnIdentifyTimeChangeCB + 1
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond131 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_68
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function bdb_event_loop
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function bdb_event_loop
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker136 Using cfiCommon1
          CFI (cfiPicker136) NoFunction
          CFI (cfiPicker136) Picker
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiPicker136

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond137 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker139 Using cfiCommon1
          CFI (cfiPicker139) NoFunction
          CFI (cfiPicker139) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_34:
        RET
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiPicker139

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond140 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_9
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-4
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_2
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-4
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_3
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-4
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker144 Using cfiCommon1
          CFI (cfiPicker144) NoFunction
          CFI (cfiPicker144) Picker
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiPicker144

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond145 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker147 Using cfiCommon1
          CFI (cfiPicker147) NoFunction
          CFI (cfiPicker147) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        RET
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiPicker147

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond148 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function bdb_AddRespondentNode
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function bdb_zclRespondentListClean
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker151 Using cfiCommon1
          CFI (cfiPicker151) NoFunction
          CFI (cfiPicker151) Picker
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       DPL,R2
        MOV       DPH,A
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiPicker151
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond152 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function bdb_TCAddJoiningDevice
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function bdb_TCAddJoiningDevice
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function bdb_TCAddJoiningDevice
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function bdb_TCProcessJoiningList
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function bdb_TCProcessJoiningList
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function bdb_TCProcessJoiningList
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function bdb_reportCommissioningState
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function bdb_event_loop
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function bdb_event_loop
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function bdb_AddRespondentNode
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function bdb_CreateRespondentList
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function bdb_AddRespondentNode
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-2
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function bdb_zclRespondentListClean
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker171 Using cfiCommon1
          CFI (cfiPicker171) NoFunction
          CFI (cfiPicker171) Picker
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_136:
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiPicker171

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond172 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_131
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_134, ??CrossCallReturnLabel_4
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-4
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_134, ??CrossCallReturnLabel_5
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-4
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function bdb_ZclIdentifyCmdInd
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_22
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-4
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_23
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-4
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function bdb_CreateRespondentList
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_73
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-4
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function bdb_AddRespondentNode
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_74
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-4
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function bdb_zclRespondentListClean
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_75
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-4
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function bdb_ZclIdentifyCmdInd
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_76
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-4
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function bdb_TCAddJoiningDevice
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_77
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-4
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function bdb_TCAddJoiningDevice
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_78
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-4
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function bdb_TCAddJoiningDevice
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_79
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-4
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function bdb_TCProcessJoiningList
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_80
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-4
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function bdb_TCProcessJoiningList
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_81
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-4
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function bdb_TCProcessJoiningList
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_82
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-4
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_83
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-4
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_84
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-4
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_85
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-4
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function bdb_reportCommissioningState
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_86
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-4
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_87
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-4
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function bdb_event_loop
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_88
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-4
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function bdb_event_loop
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_89
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-4
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_90
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-4
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function bdb_AddRespondentNode
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_91
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-4
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function bdb_event_loop
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function bdb_event_loop
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-2
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_129
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-4
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_130
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-4
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function bdb_event_loop
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_127
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-4
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function bdb_crcInit
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_128
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-4
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker202 Using cfiCommon1
          CFI (cfiPicker202) NoFunction
          CFI (cfiPicker202) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiPicker202
// 2501 
// 2502 /*********************************************************************
// 2503  * @fn          bdb_event_loop
// 2504  *
// 2505  * @brief       Main event loop bdb tasks.
// 2506  *
// 2507  * @param       task_id - task id
// 2508  * @param       events - event bitmap
// 2509  *
// 2510  * @return      unprocessed events
// 2511  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2512 UINT16 bdb_event_loop(byte task_id, UINT16 events)
bdb_event_loop:
          CFI Block cfiBlock203 Using cfiCommon0
          CFI Function bdb_event_loop
        CODE
// 2513 {
        FUNCALL bdb_event_loop, bdb_startResumeCommissioningProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessSimpleDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessIEEEAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_RepProcessEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_TCProcessJoiningList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_SendIdentifyQuery
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessRespondentList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2514   (void)task_id;  // Intentionally unreferenced parameter
// 2515   
// 2516 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
// 2517   endPointDesc_t * bdb_CurrEpDescriptor;
// 2518 #endif
// 2519   
// 2520   if(events & BDB_CHANGE_COMMISSIONING_STATE)
        MOV       A,R2
        ANL       A,#0x4
        JZ        ??bdb_event_loop_0
// 2521   {
// 2522     switch(bdbCommissioningProcedureState.bdbCommissioningState)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        JZ        ??bdb_event_loop_1
        ADD       A,#-0x4
        JZ        ??bdb_event_loop_2
        ADD       A,#-0x2
        JZ        ??bdb_event_loop_3
        SJMP      ??bdb_event_loop_4
// 2523     {
// 2524       case BDB_COMMISSIONING_STATE_START_RESUME:
// 2525         bdb_startResumeCommissioningProcess();
??bdb_event_loop_1:
        ; Setup parameters for call to function bdb_startResumeCommissioningProcess
        LCALL     `??bdb_startResumeCommissioningProcess::?relay`; Banked call to: bdb_startResumeCommissioningProcess
// 2526       break;
        SJMP      ??bdb_event_loop_4
// 2527       
// 2528       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 2529         if (ZG_BUILD_JOINING_TYPE)
// 2530         {
// 2531           bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
// 2532         }
// 2533       break;
// 2534       
// 2535       case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
// 2536         bdb_nwkSteeringDeviceOnNwk();
??bdb_event_loop_2:
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL     ?Subroutine30 & 0xFFFF
// 2537         
// 2538         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
// 2539       break;
??CrossCallReturnLabel_28:
        SJMP      ??bdb_event_loop_4
// 2540       
// 2541       case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 2542         bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
??bdb_event_loop_3:
        MOV       DPTR,#bdbAttributes + 10
        CLR       A
        MOVX      @DPTR,A
// 2543         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      @DPTR,A
// 2544         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 28)
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_97:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
// 2545       break;
// 2546       
// 2547     }
// 2548     return (events ^ BDB_CHANGE_COMMISSIONING_STATE);
??bdb_event_loop_4:
        MOV       A,R6
        XRL       A,#0x4
        LJMP      ??bdb_event_loop_5 & 0xFFFF
// 2549   }
// 2550 
// 2551   if ( events & SYS_EVENT_MSG )
??bdb_event_loop_0:
        MOV       A,R3
        ANL       A,#0x80
        JNZ       ??bdb_event_loop_6
// 2552   {
// 2553     uint8 *msg_ptr;
// 2554     
// 2555     while ( (msg_ptr = osal_msg_receive( bdb_TaskID )) )
// 2556     {
// 2557       //Process the Incomming ZDO messages used by BDB commissioning methods
// 2558       if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_ZDO_CB_MSG)
// 2559       {
// 2560         bdb_processZDOMgs((zdoIncomingMsg_t *)msg_ptr);
// 2561       }
// 2562       
// 2563       //Validate the is receive on the right process
// 2564       else if(((bdbInMsg_t*)msg_ptr)->hdr.event == bdbCommissioningProcedureState.bdbCommissioningState)
// 2565       {
// 2566         bdb_ProcessOSALMsg( (bdbInMsg_t *)msg_ptr );
// 2567       }
// 2568       //Notify the user
// 2569       else if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_NOTIFY_USER)
// 2570       {
// 2571         ((bdbCommissioningModeMsg_t*) ((bdbInMsg_t*)msg_ptr)->buf)->bdbRemainingCommissioningModes = bdbAttributes.bdbCommissioningMode;
// 2572         if(pfnCommissioningStatusCB)
// 2573         {
// 2574           pfnCommissioningStatusCB((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
// 2575         }
// 2576 #ifdef MT_APP_CNF_FUNC
// 2577         //Notify the host processor about the event
// 2578         MT_AppCnfCommissioningNotification((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
// 2579 #endif
// 2580       }
// 2581 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2582       else
// 2583       {
// 2584         if(ZG_DEVICE_COORDINATOR_TYPE)
// 2585         {
// 2586           //Notify the status 
// 2587           if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_TC_LINK_KEY_EXCHANGE_PROCESS)
// 2588           {
// 2589             pfnTCLinkKeyExchangeProcessCB( (bdb_TCLinkKeyExchProcess_t*) ((bdbInMsg_t*)msg_ptr)->buf);
// 2590           }
// 2591         }
// 2592       }
// 2593 #endif
// 2594       // Release the memory
// 2595       osal_msg_deallocate( msg_ptr );
// 2596     }
// 2597 
// 2598     // Return unprocessed events
// 2599     return (events ^ SYS_EVENT_MSG);
// 2600   }
// 2601   
// 2602 
// 2603   if(events & BDB_PROCESS_TIMEOUT)
        MOV       A,R3
        ANL       A,#0x10
        JNZ       $+5
        LJMP      ??bdb_event_loop_7 & 0xFFFF
// 2604   {
// 2605     bdb_processTimeout();
// 2606     // Return unprocessed events
// 2607     return (events ^ BDB_PROCESS_TIMEOUT);
        MOV       A,R3
        XRL       A,#0x10
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2608   }
??bdb_event_loop_9:
        MOV       A,#0x9
        XRL       A,R0
        JNZ       ??bdb_event_loop_10
        ; Setup parameters for indirect call
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
??bdb_event_loop_11:
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL     ?CALL_IND
??bdb_event_loop_10:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??bdb_event_loop_6:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_event_loop_12
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#-0x2d
        XRL       A,R0
        JNZ       ??bdb_event_loop_13
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for bdb_event_loop>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_14
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_15
        CODE
??bdb_event_loop_15:
        ; Setup parameters for call to function bdb_ProcessSimpleDesc
        LCALL     `??bdb_ProcessSimpleDesc::?relay`; Banked call to: bdb_ProcessSimpleDesc
        SJMP      ??bdb_event_loop_10
??bdb_event_loop_14:
        ; Setup parameters for call to function bdb_ProcessIEEEAddrRsp
        LCALL     `??bdb_ProcessIEEEAddrRsp::?relay`; Banked call to: bdb_ProcessIEEEAddrRsp
        SJMP      ??bdb_event_loop_10
??bdb_event_loop_13:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        ??bdb_event_loop_10
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        MOV       A,#0xa
        XRL       A,R0
        JNZ       ??bdb_event_loop_9
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        MOV       DPTR,#pfnCommissioningStatusCB
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_88:
        JZ        ??bdb_event_loop_10
        ; Setup parameters for indirect call
        LJMP      ??bdb_event_loop_11 & 0xFFFF
??bdb_event_loop_12:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2609   
// 2610   if(events &  BDB_REPORT_TIMEOUT){
??bdb_event_loop_7:
        MOV       A,R2
        ANL       A,#0x80
        JZ        ??bdb_event_loop_16
// 2611 #ifdef BDB_REPORTING    
// 2612     bdb_RepProcessEvent();
        ; Setup parameters for call to function bdb_RepProcessEvent
        LCALL     `??bdb_RepProcessEvent::?relay`; Banked call to: bdb_RepProcessEvent
// 2613 #endif
// 2614     // Return unprocessed events
// 2615     return (events ^ BDB_REPORT_TIMEOUT);
        MOV       A,R6
        XRL       A,#0x80
        SJMP      ??bdb_event_loop_5
// 2616   }
// 2617   
// 2618 #if (ZG_BUILD_JOINING_TYPE)
// 2619   if(events & BDB_TC_LINK_KEY_EXCHANGE_FAIL)
// 2620   {
// 2621     if(ZG_DEVICE_JOINING_TYPE)
// 2622     {
// 2623       NLME_LeaveReq_t leaveReq;
// 2624       // Set every field to 0
// 2625       osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
// 2626       
// 2627       bdb_setNodeIsOnANetwork(FALSE);
// 2628 
// 2629       if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
// 2630       {
// 2631         osal_set_event( bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL);
// 2632       }
// 2633     }
// 2634     // Return unprocessed events
// 2635     return (events ^ BDB_TC_LINK_KEY_EXCHANGE_FAIL);
// 2636   }
// 2637 #endif
// 2638   
// 2639   if(events & BDB_TC_JOIN_TIMEOUT)
??bdb_event_loop_16:
        MOV       A,R3
        ANL       A,#0x8
        JZ        ??bdb_event_loop_17
// 2640   {     
// 2641 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2642     if(ZG_DEVICE_COORDINATOR_TYPE)
// 2643     {
// 2644       bdb_TCProcessJoiningList();
        ; Setup parameters for call to function bdb_TCProcessJoiningList
        LCALL     `??bdb_TCProcessJoiningList::?relay`; Banked call to: bdb_TCProcessJoiningList
// 2645     }
// 2646 #endif    
// 2647     return (events ^ BDB_TC_JOIN_TIMEOUT);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x8
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2648   }
// 2649 
// 2650 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
// 2651   
// 2652   if(events & BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT)
??bdb_event_loop_17:
        MOV       A,R2
        ANL       A,#0x40
        JZ        ??bdb_event_loop_18
// 2653   {
// 2654     if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
// 2655     {
// 2656       bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2657       
// 2658       //If we have endpoint from which to send the identify command, then proceed, otherwise finish
// 2659       if(bdb_CurrEpDescriptor != NULL) //just a safty check. The fact that we got to this functuon at all means that this cannot be NULL
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_event_loop_19
// 2660       {
// 2661         //Substract an attempt
// 2662         bdb_FB_InitiatorCurrentCyclesNumber--;
// 2663         
// 2664         if(bdb_FB_InitiatorCurrentCyclesNumber > 0)
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        DEC       A
        MOVX      @DPTR,A
        JZ        ??bdb_event_loop_20
// 2665         {
// 2666           //Only send Identify Query if there is no pending responses from a previous identify query
// 2667           if ((osal_get_timeoutEx(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0) && (bdb_getRespondentRetry(pRespondentHead) == NULL))
        ; Setup parameters for call to function osal_get_timeoutEx
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_66:
        JNZ       ??bdb_event_loop_21
        ; Setup parameters for call to function bdb_getRespondentRetry
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_16:
        JNZ       ??bdb_event_loop_21
// 2668           {
// 2669             //Send identify query with the endpoint requested
// 2670             bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint);
        ; Setup parameters for call to function bdb_SendIdentifyQuery
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
// 2671           }
// 2672           osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
??bdb_event_loop_21:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3a98
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R2,#0x40
        LCALL     ??Subroutine53_0 & 0xFFFF
// 2673         }
// 2674       }
// 2675     }
??CrossCallReturnLabel_99:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
// 2676 
// 2677     if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
??bdb_event_loop_19:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JNZ       ??bdb_event_loop_22
// 2678     {
// 2679       bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
??bdb_event_loop_20:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xb
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2680     }
// 2681     
// 2682     return (events ^ BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
??bdb_event_loop_22:
        MOV       A,R6
        XRL       A,#0x40
??bdb_event_loop_5:
        MOV       R2,A
        MOV       A,R7
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2683   }
// 2684   
// 2685   if(events & BDB_IDENTIFY_TIMEOUT)
??bdb_event_loop_18:
        MOV       A,R3
        ANL       A,#0x20
        JNZ       $+5
        LJMP      ??bdb_event_loop_23 & 0xFFFF
// 2686   {
// 2687     zclAttrRec_t identifyAttrRec;
// 2688     epList_t *bdb_CurrEpDescriptorNextInList = NULL;
// 2689     bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
        MOV       DPTR,#bdb_HeadEpDescriptorList
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_132:
        MOV       ?V0,R0
        MOV       ?V1,A
// 2690     
// 2691     bool KeepIdentifyTimerRunning = FALSE;
        MOV       ?V4,#0x0
        SJMP      ??CrossCallReturnLabel_13
// 2692     
// 2693     while(bdb_CurrEpDescriptorNextInList != NULL )
// 2694     {
// 2695       endPointDesc_t *bdb_EpDescriptor = NULL;
// 2696       bdb_EpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
// 2697     
// 2698       //Do not check ZDO or Zigbee reserved endpoints
// 2699       if((bdb_CurrEpDescriptorNextInList->epDesc->endPoint == 0) || (bdb_CurrEpDescriptorNextInList->epDesc->endPoint >= BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
// 2700       {
// 2701         bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
// 2702         continue;
// 2703       }
// 2704       
// 2705       if ( zclFindAttrRec( bdb_EpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2706                         ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
// 2707       {
// 2708         if(*((uint16*)identifyAttrRec.attr.dataPtr) > 0)
// 2709         {
// 2710           (uint16)(*((uint16*)identifyAttrRec.attr.dataPtr))--;
// 2711           KeepIdentifyTimerRunning = TRUE;
// 2712         }
// 2713         else
// 2714         {
// 2715           // Use bdb success main state
// 2716           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
??bdb_event_loop_24:
        MOV       DPTR,#bdbAttributes + 10
        CLR       A
        MOVX      @DPTR,A
// 2717           if(pfnIdentifyTimeChangeCB != NULL)
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_89:
        JZ        ??bdb_event_loop_25
// 2718           {
// 2719             pfnIdentifyTimeChangeCB(bdb_EpDescriptor->endPoint);
        ; Setup parameters for indirect call
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     ?Subroutine22 & 0xFFFF
// 2720           }
// 2721         }
??CrossCallReturnLabel_72:
        LCALL     ?CALL_IND
// 2722       }
// 2723       bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
??bdb_event_loop_25:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??bdb_event_loop_26
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_133:
        MOV       DPL,R0
        MOV       DPH,A
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        MOVX      A,@DPTR
        JZ        ??bdb_event_loop_25
        CLR       C
        SUBB      A,#-0xf
        JNC       ??bdb_event_loop_25
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        JZ        ??bdb_event_loop_25
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_127:
        MOV       DPL,R0
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_126:
        JZ        ??bdb_event_loop_24
        MOV       A,R2
        ADD       A,#-0x1
        DEC       R2
        MOV       A,R3
        ADDC      A,#-0x1
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       ?V4,#0x1
        SJMP      ??bdb_event_loop_25
// 2724     }
// 2725     
// 2726     //If any endpoint has identify running, keep the timer on
// 2727     if(KeepIdentifyTimerRunning)
??bdb_event_loop_26:
        MOV       A,?V4
        JZ        ??bdb_event_loop_27
// 2728     {
// 2729       osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R2,#0x0
        MOV       R3,#0x20
        LCALL     ??Subroutine54_0 & 0xFFFF
// 2730     }
??CrossCallReturnLabel_102:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        SJMP      ??CrossCallReturnLabel_113
// 2731     else
// 2732     {
// 2733       osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
??bdb_event_loop_27:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x20
        LCALL     ??Subroutine58_0 & 0xFFFF
// 2734     }
// 2735     
// 2736     // Return unprocessed events
// 2737     return (events ^ BDB_IDENTIFY_TIMEOUT);
??CrossCallReturnLabel_113:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x20
        SJMP      ??bdb_event_loop_8
// 2738   }
// 2739   
// 2740   if(events & BDB_RESPONDENT_PROCESS_TIMEOUT)
??bdb_event_loop_23:
        MOV       A,R3
        ANL       A,#0x40
        JZ        ??bdb_event_loop_28
// 2741   {
// 2742     // Send Simple Descriptor request to a respondent node
// 2743     bdb_ProcessRespondentList();
        ; Setup parameters for call to function bdb_ProcessRespondentList
        LCALL     `??bdb_ProcessRespondentList::?relay`; Banked call to: bdb_ProcessRespondentList
// 2744 
// 2745     return (events ^ BDB_RESPONDENT_PROCESS_TIMEOUT);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x40
??bdb_event_loop_8:
        MOV       R3,A
        SJMP      ??bdb_event_loop_29
// 2746   }
// 2747 #endif
// 2748   
// 2749   return 0;
??bdb_event_loop_28:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_event_loop_29:
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
// 2750 }
          CFI EndBlock cfiBlock203

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond204 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function bdb_event_loop
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker206 Using cfiCommon1
          CFI (cfiPicker206) NoFunction
          CFI (cfiPicker206) Picker
        MOV       DPTR,#pRespondentHead
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiPicker206

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond207 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function bdb_event_loop
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-2
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiPicker210 Using cfiCommon1
          CFI (cfiPicker210) NoFunction
          CFI (cfiPicker210) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        RET
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiPicker210

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond211 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
          CFI Conditional ??CrossCallReturnLabel_92
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function bdb_reportCommissioningState
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-2
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function bdb_reportCommissioningState
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function bdb_reportCommissioningState
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function bdb_reportCommissioningState
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-2
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function bdb_event_loop
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker217 Using cfiCommon1
          CFI (cfiPicker217) NoFunction
          CFI (cfiPicker217) Picker
        MOV       R2,#0x4
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiPicker217
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond218 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_98
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function bdb_event_loop
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function bdb_reportCommissioningState
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function bdb_reportCommissioningState
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function bdb_reportCommissioningState
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function bdb_reportCommissioningState
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function bdb_reportCommissioningState
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-2
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function bdb_event_loop
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond225) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond225) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond225) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond225) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond225) CFA_SP SP+-2
          CFI (cfiCond225) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker226 Using cfiCommon1
          CFI (cfiPicker226) NoFunction
          CFI (cfiPicker226) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiPicker226
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiCond227 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_100
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-2
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function bdb_event_loop
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-2
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function bdb_event_loop
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function bdb_reportCommissioningState
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function bdb_reportCommissioningState
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function bdb_reportCommissioningState
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function bdb_reportCommissioningState
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-2
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function bdb_reportCommissioningState
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-2
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function bdb_event_loop
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-2
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker238 Using cfiCommon1
          CFI (cfiPicker238) NoFunction
          CFI (cfiPicker238) Picker
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiPicker238
// 2751 
// 2752 /*********************************************************************
// 2753  * @fn          bdb_processZDOMgs
// 2754  *
// 2755  * @brief       Process ZDO messages used as part of BDB commissioning methods
// 2756  *
// 2757  * @param       zdoIncomingMsg_t - ZDO message
// 2758  *
// 2759  * @return      
// 2760  */
// 2761 static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg)
// 2762 {
// 2763   switch ( pMsg->clusterID )
// 2764   {
// 2765 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)      
// 2766     case IEEE_addr_rsp:
// 2767        bdb_ProcessIEEEAddrRsp(pMsg);
// 2768     break;
// 2769     case Simple_Desc_rsp:
// 2770       bdb_ProcessSimpleDesc(pMsg);
// 2771     break;
// 2772 #endif
// 2773 
// 2774 #if (ZG_BUILD_JOINING_TYPE)    
// 2775     case Node_Desc_rsp:
// 2776       bdb_ProcessNodeDescRsp(pMsg);
// 2777     break;
// 2778 #endif
// 2779     
// 2780     default:
// 2781     break;
// 2782   }
// 2783 }
// 2784 
// 2785 
// 2786 /*********************************************************************
// 2787  * @fn      bdb_ProcessNodeDescRsp
// 2788  *
// 2789  * @brief   Process Node Descriptor response to validate the stack version of the
// 2790  *
// 2791  * @param   zdoIncomingMsg_t *pMsg
// 2792  *
// 2793  * @return  none
// 2794  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2795 void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg)
bdb_ProcessNodeDescRsp:
          CFI Block cfiBlock239 Using cfiCommon0
          CFI Function bdb_ProcessNodeDescRsp
        CODE
// 2796 {
        FUNCALL bdb_ProcessNodeDescRsp, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, ZDO_ParseNodeDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 35
        MOV       A,#-0x23
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2797   //Avoid processing unintended messages
// 2798   if(requestNewTrustCenterLinkKey && 
// 2799     (bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE))
        MOV       DPTR,#requestNewTrustCenterLinkKey
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
// 2800   {
// 2801     if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JNZ       ??bdb_ProcessNodeDescRsp_0
// 2802     {
// 2803       //Is this from the coordinator?
// 2804       if(pMsg->srcAddr.addr.shortAddr == 0x0000)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_90:
        JNZ       ??bdb_ProcessNodeDescRsp_0
// 2805       {
// 2806         ZDO_NodeDescRsp_t NDRsp;
// 2807         uint8 StackComplianceRev;
// 2808 
// 2809         //Stop timer to avoid unintended resets
// 2810         osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        LCALL     ??Subroutine58_0 & 0xFFFF
// 2811         
// 2812         ZDO_ParseNodeDescRsp(pMsg, &NDRsp);
??CrossCallReturnLabel_114:
        ; Setup parameters for call to function ZDO_ParseNodeDescRsp
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
// 2813         
// 2814         StackComplianceRev = NDRsp.nodeDesc.ServerMask >> STACK_COMPLIANCE_CURRENT_REV_POS;
// 2815         
// 2816         if( StackComplianceRev >= STACK_COMPL_REV_21 )
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV       A,#0x9
        MOV       R0,#?V0
        LCALL     ?US_SHR
        CLR       C
        MOV       A,?V0
        SUBB      A,#0x15
        SUBB      A,0xE0 /* A   */
        CLR       C
        XRL       A,PSW
        RLC       A
        JC        ??bdb_ProcessNodeDescRsp_1
// 2817         {
// 2818           bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_LINK_KEY);
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV       R2,#0x2
        MOV       R1,#0x1
        LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
        SJMP      ??bdb_ProcessNodeDescRsp_0
// 2819         }
// 2820         else
// 2821         {
// 2822           APSME_TCLKDevEntry_t TCLKDevEntry;
// 2823           
// 2824           //Save the KeyAttribute for joining device that it has joined non-R21 nwk
// 2825           TCLKDevEntry.keyAttributes = ZG_NON_R21_NWK_JOINED;
??bdb_ProcessNodeDescRsp_1:
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x3
        MOVX      @DPTR,A
// 2826           osal_nv_write(ZCD_NV_TCLK_TABLE_START,osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes),sizeof(uint8),&TCLKDevEntry.keyAttributes);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_108:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 45)
// 2827           
// 2828           bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
// 2829           bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2830         }
// 2831       }
// 2832     }
// 2833   }
// 2834 }
??bdb_ProcessNodeDescRsp_0:
        MOV       A,#0x23
          CFI EndBlock cfiBlock239
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock240 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock240
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiBlock241 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock241

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond242 Using cfiCommon0
          CFI Function bdb_StartCommissioning
          CFI Conditional ??CrossCallReturnLabel_103
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function bdb_setNodeIsOnANetwork
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-2
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker244 Using cfiCommon1
          CFI (cfiPicker244) NoFunction
          CFI (cfiPicker244) Picker
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiPicker244
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiCond245 Using cfiCommon0
          CFI Function bdb_rejoinNwk
          CFI Conditional ??CrossCallReturnLabel_105
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function bdb_StartCommissioning
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-2
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function bdb_setNodeIsOnANetwork
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-2
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker248 Using cfiCommon1
          CFI (cfiPicker248) NoFunction
          CFI (cfiPicker248) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiPicker248
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond249 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_106
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 61)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function bdb_StartCommissioning
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-2
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function bdb_rejoinNwk
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-2
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function bdb_StartCommissioning
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-2
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function bdb_setNodeIsOnANetwork
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-2
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker255 Using cfiCommon1
          CFI (cfiPicker255) NoFunction
          CFI (cfiPicker255) Picker
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiPicker255

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond256 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_109
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond257 Using cfiCommon0
          CFI (cfiCond257) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond257) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond257) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond257) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond257) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond257) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond257) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond257) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond257) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond257) CFA_SP SP+-2
          CFI (cfiCond257) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker258 Using cfiCommon1
          CFI (cfiPicker258) NoFunction
          CFI (cfiPicker258) Picker
        MOV       R2,#0x0
        MOV       R3,#0x8
          CFI EndBlock cfiCond256
          CFI EndBlock cfiCond257
          CFI EndBlock cfiPicker258
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiCond259 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_111
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function bdb_reportCommissioningState
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-2
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond261 Using cfiCommon0
          CFI (cfiCond261) Function bdb_event_loop
          CFI (cfiCond261) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond261) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond261) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond261) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond261) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond261) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond261) CFA_SP SP+-2
          CFI (cfiCond261) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+-2
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function bdb_TCProcessJoiningList
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond263) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond263) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond263) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond263) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond263) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond263) CFA_SP SP+-2
          CFI (cfiCond263) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond264) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond264) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond264) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond264) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond264) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond264) CFA_SP SP+-2
          CFI (cfiCond264) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker265 Using cfiCommon1
          CFI (cfiPicker265) NoFunction
          CFI (cfiPicker265) Picker
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        RET
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiPicker265
// 2835 
// 2836 
// 2837 /*********************************************************************
// 2838  * @fn          bdb_touchlinkSendFNReset
// 2839  *
// 2840  * @brief       Starts the Factory New Procedure for Initiator
// 2841  *
// 2842  * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
// 2843  *
// 2844  * @return      none
// 2845  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2846 void bdb_touchlinkSendFNReset( void )
bdb_touchlinkSendFNReset:
          CFI Block cfiBlock266 Using cfiCommon0
          CFI Function bdb_touchlinkSendFNReset
        CODE
// 2847 {
        ; Saved register size: 0
        ; Auto size: 0
// 2848 #ifdef BDB_TL_INITIATOR
// 2849   touchLinkInitiator_ResetToFNProcedure( );
// 2850 #endif
// 2851 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock266
// 2852 
// 2853 
// 2854 /*********************************************************************
// 2855  * @fn          bdb_setNodeIsOnANetwork
// 2856  *
// 2857  * @brief       Sets and saves in Nv bdbNodeIsOnANetwork attribute
// 2858  *
// 2859  * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
// 2860  *
// 2861  * @return      none
// 2862  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2863 void bdb_setNodeIsOnANetwork(bool isOnANetwork)
bdb_setNodeIsOnANetwork:
          CFI Block cfiBlock267 Using cfiCommon0
          CFI Function bdb_setNodeIsOnANetwork
        CODE
// 2864 {
        FUNCALL bdb_setNodeIsOnANetwork, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2865   if((bdbAttributes.bdbNodeIsOnANetwork != isOnANetwork) || (!bdb_initialization))
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_setNodeIsOnANetwork_0
        MOV       DPTR,#bdb_initialization
        MOVX      A,@DPTR
        JNZ       ??bdb_setNodeIsOnANetwork_1
// 2866   {
// 2867     //We lose our network
// 2868     if(!isOnANetwork)
??bdb_setNodeIsOnANetwork_0:
        MOV       A,R1
        JNZ       ??bdb_setNodeIsOnANetwork_2
// 2869     {
// 2870       bdbAttributes.bdbCommissioningMode = 0;
        MOV       DPTR,#bdbAttributes + 11
        CLR       A
        MOVX      @DPTR,A
// 2871     }
// 2872     
// 2873     bdbAttributes.bdbNodeIsOnANetwork = isOnANetwork;
??bdb_setNodeIsOnANetwork_2:
        MOV       A,R1
        MOV       DPTR,#bdbAttributes + 14
        MOVX      @DPTR,A
// 2874     
// 2875     osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#(bdbAttributes + 14) & 0xff
        MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        LCALL     ?Subroutine32 & 0xFFFF
// 2876   }
??CrossCallReturnLabel_104:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 2877 }
??bdb_setNodeIsOnANetwork_1:
        SJMP      ??Subroutine55_0
          CFI EndBlock cfiBlock267
// 2878 
// 2879 /*********************************************************************
// 2880  * @fn          bdb_setCommissioningGroupID
// 2881  *
// 2882  * @brief       Sets the commissioning groupd ID
// 2883  *
// 2884  * @param       groupID
// 2885  *
// 2886  * @return      none
// 2887  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2888 void bdb_setCommissioningGroupID(uint16 groupID)
bdb_setCommissioningGroupID:
          CFI Block cfiBlock268 Using cfiCommon0
          CFI Function bdb_setCommissioningGroupID
        CODE
// 2889 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2890   bdbAttributes.bdbCommissioningGroupID = groupID;
        MOV       DPTR,#bdbAttributes + 8
        LJMP      ?Subroutine3 & 0xFFFF
// 2891 }
          CFI EndBlock cfiBlock268
// 2892 
// 2893 /*********************************************************************
// 2894  * @fn      bdb_CreateRespondentList
// 2895  *
// 2896  * @brief   Create respondent list for finding and binding if empty
// 2897  *
// 2898  * @param   pHead - pointer to a pointer of the list head
// 2899  *
// 2900  * @return  none
// 2901  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2902 void bdb_CreateRespondentList( bdbFindingBindingRespondent_t **pHead )
bdb_CreateRespondentList:
          CFI Block cfiBlock269 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
        CODE
// 2903 {
        FUNCALL bdb_CreateRespondentList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL     ?Subroutine12 & 0xFFFF
// 2904 
// 2905   // Create the list if empty
// 2906   if ( *pHead == NULL )
??CrossCallReturnLabel_73:
        JNZ       ??CrossCallReturnLabel_31
// 2907   {
// 2908     *pHead = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        LCALL     ?Subroutine10 & 0xFFFF
// 2909     
// 2910     if ( *pHead != NULL )
??CrossCallReturnLabel_115:
        JZ        ??CrossCallReturnLabel_31
// 2911     {
// 2912       (*pHead)->pNext = NULL;
        LCALL     ?Subroutine34 & 0xFFFF
// 2913     }
// 2914   }
// 2915   return;
??CrossCallReturnLabel_31:
        LJMP      ??Subroutine55_0 & 0xFFFF
// 2916 }
          CFI EndBlock cfiBlock269

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond270 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
          CFI Conditional ??CrossCallReturnLabel_115
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond271 Using cfiCommon0
          CFI (cfiCond271) Function bdb_AddRespondentNode
          CFI (cfiCond271) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond271) CFA_SP SP+-2
          CFI (cfiCond271) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker272 Using cfiCommon1
          CFI (cfiPicker272) NoFunction
          CFI (cfiPicker272) Picker
        MOV       R2,#0x11
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V1,R3
        MOV       R1,?V1
          CFI EndBlock cfiCond270
          CFI EndBlock cfiCond271
          CFI EndBlock cfiPicker272
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiCond273 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_117
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function bdb_CreateRespondentList
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond274) CFA_SP SP+-2
          CFI (cfiCond274) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function bdb_AddRespondentNode
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond275) CFA_SP SP+-2
          CFI (cfiCond275) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker276 Using cfiCommon1
          CFI (cfiPicker276) NoFunction
          CFI (cfiPicker276) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,R2
        ORL       A,R1
        RET
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiPicker276
// 2917 
// 2918 /*********************************************************************
// 2919  * @fn      bdb_AddRespondentNode
// 2920  *
// 2921  * @brief   Add node to respondent list for finding and binding
// 2922  *
// 2923  * @param   pHead - pointer to a pointer of the list head
// 2924  *
// 2925  * @return  pointer to new node
// 2926  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2927 bdbFindingBindingRespondent_t* bdb_AddRespondentNode( bdbFindingBindingRespondent_t **pHead, zclIdentifyQueryRsp_t *pCmd )
bdb_AddRespondentNode:
          CFI Block cfiBlock277 Using cfiCommon0
          CFI Function bdb_AddRespondentNode
        CODE
// 2928 {
        FUNCALL bdb_AddRespondentNode, bdb_CreateRespondentList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_AddRespondentNode, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL     ?Subroutine12 & 0xFFFF
// 2929   bdbFindingBindingRespondent_t **pCurr;
// 2930   bdbFindingBindingRespondent_t *temp;
// 2931   
// 2932     // Create respondent list if empty
// 2933   if ( *pHead == NULL )
??CrossCallReturnLabel_74:
        JNZ       ??bdb_AddRespondentNode_0
// 2934   {
// 2935     bdb_CreateRespondentList( pHead );
        ; Setup parameters for call to function bdb_CreateRespondentList
        LCALL     `??bdb_CreateRespondentList::?relay`; Banked call to: bdb_CreateRespondentList
// 2936     return *pHead;
        LJMP      ??CrossCallReturnLabel_32 & 0xFFFF
// 2937   }
// 2938   else
// 2939   {
// 2940     // if pCmd is equal to NULL, don't look for duplucates
// 2941     if( pCmd != NULL )
??bdb_AddRespondentNode_0:
        MOV       A,R4
        ORL       A,R5
        JZ        ??bdb_AddRespondentNode_1
// 2942     {
// 2943       //Find if any duplicate in the list
// 2944       temp = *pHead;
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
// 2945       
// 2946       while(temp != NULL)
// 2947       {
// 2948         if((temp->data.endPoint == pCmd->srcAddr->endPoint) && (temp->data.panId == pCmd->srcAddr->panId))
??bdb_AddRespondentNode_2:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_AddRespondentNode_3
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_24:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_AddRespondentNode_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bdb_AddRespondentNode_4:
        JNZ       ??bdb_AddRespondentNode_3
// 2949         {
// 2950           //Duplicate
// 2951           if(temp->data.addr.shortAddr == pCmd->srcAddr->addr.shortAddr)
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine28 & 0xFFFF
// 2952           {
// 2953             return NULL;
// 2954           }
// 2955         }
??CrossCallReturnLabel_25:
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_AddRespondentNode_5
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bdb_AddRespondentNode_5:
        JZ        ??bdb_AddRespondentNode_6
// 2956         temp = temp->pNext;
??bdb_AddRespondentNode_3:
        MOV       A,R2
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        LCALL     ?Subroutine17 & 0xFFFF
// 2957       }
// 2958     }
??CrossCallReturnLabel_122:
        JNZ       ??bdb_AddRespondentNode_2
// 2959     
// 2960     pCurr = &((*pHead)->pNext);
// 2961     
// 2962     while ( *pCurr != NULL )
// 2963     {
// 2964       pCurr = &((*pCurr)->pNext);
??bdb_AddRespondentNode_1:
        MOV       A,R0
        ADD       A,#0xf
        MOV       R6,A
        CLR       A
        ADDC      A,R1
        MOV       R7,A
// 2965     }
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_91:
        JNZ       ??bdb_AddRespondentNode_1
// 2966 
// 2967     *pCurr = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        LCALL     ?Subroutine10 & 0xFFFF
// 2968     
// 2969     if(*pCurr == NULL)
??CrossCallReturnLabel_116:
        JNZ       ??bdb_AddRespondentNode_7
// 2970     {
// 2971       //No memory
// 2972       return NULL;
??bdb_AddRespondentNode_6:
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??CrossCallReturnLabel_20
// 2973     }
// 2974     
// 2975     (*pCurr)->pNext = NULL;
??bdb_AddRespondentNode_7:
        LCALL     ?Subroutine34 & 0xFFFF
// 2976   }
// 2977   
// 2978   return *pCurr;
??CrossCallReturnLabel_32:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_20:
        LJMP      ??Subroutine55_0 & 0xFFFF
// 2979 }
          CFI EndBlock cfiBlock277

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond278 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function bdb_AddRespondentNode
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-2
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker280 Using cfiCommon1
          CFI (cfiPicker280) NoFunction
          CFI (cfiPicker280) Picker
        MOV       A,R2
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiPicker280

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond281 Using cfiCommon0
          CFI Function bdb_AddRespondentNode
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function bdb_AddRespondentNode
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-2
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker283 Using cfiCommon1
          CFI (cfiPicker283) NoFunction
          CFI (cfiPicker283) Picker
        LCALL     ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_119:
        MOV       DPL,R4
        MOV       DPH,R5
        RET
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiPicker283

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond284 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_120
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond285) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond285) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond285) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond285) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-2
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker286 Using cfiCommon1
          CFI (cfiPicker286) NoFunction
          CFI (cfiPicker286) Picker
        MOV       DPTR,#bdb_joiningDeviceList
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiPicker286
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiCond287 Using cfiCommon0
          CFI Function bdb_TCjoiningDeviceComplete
          CFI Conditional ??CrossCallReturnLabel_118
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function bdb_AddRespondentNode
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_24
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-4
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function bdb_AddRespondentNode
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_25
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-4
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function bdb_TCAddJoiningDevice
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond290) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond290) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond290) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond290) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond290) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond290) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond290) CFA_SP SP+-2
          CFI (cfiCond290) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond291) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond291) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond291) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond291) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond291) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond291) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond291) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond291) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond291) CFA_SP SP+-2
          CFI (cfiCond291) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker292 Using cfiCommon1
          CFI (cfiPicker292) NoFunction
          CFI (cfiPicker292) Picker
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        RET
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiPicker292
// 2980 
// 2981 /*********************************************************************
// 2982  * @fn      bdb_zclRespondentListClean
// 2983  *
// 2984  * @brief   This function free reserved memory for respondent list
// 2985  *
// 2986  * @param   pHead - begin of the respondent list
// 2987  *
// 2988  * @return  status
// 2989  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2990 void bdb_zclRespondentListClean( bdbFindingBindingRespondent_t **pHead )
bdb_zclRespondentListClean:
          CFI Block cfiBlock293 Using cfiCommon0
          CFI Function bdb_zclRespondentListClean
        CODE
// 2991 {
        FUNCALL bdb_zclRespondentListClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        LCALL     ?Subroutine12 & 0xFFFF
// 2992   bdbFindingBindingRespondent_t **pCurr;
// 2993   bdbFindingBindingRespondent_t **pNext;
// 2994   
// 2995   if ( *pHead == NULL )
??CrossCallReturnLabel_75:
        JZ        ??bdb_zclRespondentListClean_0
// 2996   {
// 2997     return;
// 2998   }
// 2999   
// 3000   pCurr = pHead;
        MOV       ?V0,R2
        MOV       ?V1,R3
        SJMP      ??bdb_zclRespondentListClean_1
// 3001   
// 3002   while( *pCurr != NULL )
// 3003   {
// 3004     pNext = &((*pCurr)->pNext);
??bdb_zclRespondentListClean_2:
        MOV       A,R2
        ADD       A,#0xf
        MOV       ?V2,A
        CLR       A
        ADDC      A,R3
        MOV       ?V3,A
// 3005     osal_mem_free( *pCurr );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3006     *pCurr = ( bdbFindingBindingRespondent_t* )NULL;
        MOV       DPL,?V0
        MOV       DPH,?V1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3007     pCurr = pNext;
        MOV       ?V0,?V2
        MOV       ?V1,?V3
// 3008   }
??bdb_zclRespondentListClean_1:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_125:
        JNZ       ??bdb_zclRespondentListClean_2
// 3009   *pHead = NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3010 }
??bdb_zclRespondentListClean_0:
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock293

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond294 Using cfiCommon0
          CFI Function bdb_event_loop
          CFI Conditional ??CrossCallReturnLabel_126
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function bdb_AddRespondentNode
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-2
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker296 Using cfiCommon1
          CFI (cfiPicker296) NoFunction
          CFI (cfiPicker296) Picker
        MOV       DPH,A
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiPicker296
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiCond297 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_123
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-2
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond299 Using cfiCommon0
          CFI (cfiCond299) Function bdb_zclRespondentListClean
          CFI (cfiCond299) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond299) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond299) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond299) CFA_SP SP+-2
          CFI (cfiCond299) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond300 Using cfiCommon0
          CFI (cfiCond300) Function bdb_event_loop
          CFI (cfiCond300) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond300) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond300) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond300) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond300) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond300) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond300) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond300) CFA_SP SP+-2
          CFI (cfiCond300) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function bdb_AddRespondentNode
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+-2
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker302 Using cfiCommon1
          CFI (cfiPicker302) NoFunction
          CFI (cfiPicker302) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiCond299
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiPicker302
// 3011 
// 3012  /*********************************************************************
// 3013  * PRIVATE FUNCTIONS
// 3014  *********************************************************************/
// 3015 
// 3016 /*********************************************************************
// 3017  * @fn      bdb_ProcessOSALMsg
// 3018  *
// 3019  * @brief   Process the incoming task message.
// 3020  *
// 3021  * @param   msgPtr - message to process
// 3022  *
// 3023  * @return  none
// 3024  */
// 3025 void bdb_ProcessOSALMsg( bdbInMsg_t *msgPtr )
// 3026 {
// 3027   
// 3028   switch(msgPtr->hdr.event)
// 3029   {
// 3030 #if (ZG_BUILD_JOINING_TYPE)
// 3031     case BDB_COMMISSIONING_STATE_JOINING:
// 3032       if(ZG_DEVICE_JOINING_TYPE)
// 3033       {
// 3034         switch(msgPtr->buf[0])
// 3035         {
// 3036           case BDB_JOIN_EVENT_NWK_DISCOVERY:
// 3037             if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
// 3038             {
// 3039               bdb_filterNwkDisc();
// 3040               bdb_tryNwkAssoc();
// 3041             }
// 3042             else
// 3043             {
// 3044               bdb_nwkDiscoveryAttempt(FALSE);
// 3045             }
// 3046           break;
// 3047           
// 3048           case BDB_JOIN_EVENT_ASSOCIATION:
// 3049             if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
// 3050             {
// 3051               bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_WAITING_NWK_KEY;
// 3052               //Nwk key timeout get right timing
// 3053               osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT, BDB_DEFAULT_DEVICE_UNAUTH_TIMEOUT);
// 3054             }
// 3055             else
// 3056             {
// 3057               if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 3058                    (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
// 3059               {
// 3060                 uint16 addr = INVALID_NODE_ADDR;
// 3061                 // Invalidate nwk addr so end device does not use in its data reqs.
// 3062                 _NIB.nwkDevAddress = INVALID_NODE_ADDR;
// 3063                 ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
// 3064               }
// 3065 
// 3066               //Clear the neighbor Table and network discovery tables.
// 3067               nwkNeighborInitTable();
// 3068               NLME_NwkDiscTerm();
// 3069               _NIB.nwkState = NWK_INIT;
// 3070               
// 3071               bdb_tryNwkAssoc();
// 3072             }
// 3073           break;
// 3074         }
// 3075       }
// 3076     break;
// 3077     
// 3078     case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 3079       if(ZG_DEVICE_JOINING_TYPE)
// 3080       {
// 3081         if(msgPtr->hdr.status != BDB_MSG_EVENT_SUCCESS)
// 3082         {
// 3083           bdbAttributes.bdbTCLinkKeyExchangeAttempts++;
// 3084           if(bdbAttributes.bdbTCLinkKeyExchangeAttempts > bdbAttributes.bdbTCLinkKeyExchangeAttemptsMax)
// 3085           {
// 3086             //TCLK process fail due to many attempts fails
// 3087             bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
// 3088             return;
// 3089           }
// 3090         }
// 3091         switch(bdbCommissioningProcedureState.bdbTCExchangeState)
// 3092         {
// 3093           case BDB_REQ_TC_STACK_VERSION:
// 3094             bdb_requestTCStackVersion();
// 3095           break;
// 3096           case BDB_REQ_TC_LINK_KEY:
// 3097             bdb_requestTCLinkKey();
// 3098           break;
// 3099           case BDB_REQ_VERIFY_TC_LINK_KEY:
// 3100             bdb_requestVerifyTCLinkKey();
// 3101           break;
// 3102         }
// 3103       }
// 3104    break;
// 3105 #endif
// 3106    }
// 3107 }
// 3108 
// 3109 
// 3110 /*********************************************************************
// 3111  * @fn      bdb_processTimeout
// 3112  *
// 3113  * @brief   Handles timeout of the bdb process
// 3114  *
// 3115  * @param   msgPtr - message to process
// 3116  *
// 3117  * @return  none
// 3118  */
// 3119 void bdb_processTimeout(void)
// 3120 {
// 3121 #if (ZG_BUILD_JOINING_TYPE)
// 3122   if(ZG_DEVICE_JOINING_TYPE)
// 3123   {
// 3124     switch(bdbCommissioningProcedureState.bdbCommissioningState)
// 3125     {
// 3126       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 3127         
// 3128         bdb_tcLinkKeyExchangeAttempt(FALSE,bdbCommissioningProcedureState.bdbTCExchangeState);
// 3129       break;
// 3130       case BDB_COMMISSIONING_STATE_JOINING:
// 3131         if(bdbCommissioningProcedureState.bdbJoinState == BDB_JOIN_STATE_WAITING_NWK_KEY)
// 3132         {
// 3133           //If nwk key fails, then try association again
// 3134           bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
// 3135           bdb_nwkAssocAttemt(FALSE);
// 3136         }
// 3137       break;
// 3138     }
// 3139   }
// 3140 #endif
// 3141   
// 3142 }
// 3143 
// 3144 
// 3145 /*********************************************************************
// 3146  * @fn      bdb_SendMsg
// 3147  *
// 3148  * @brief   Send messages to bdb processing with the expected format
// 3149  *
// 3150  * @param   msgPtr - message to process
// 3151  *
// 3152  * @return  none
// 3153  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3154 void bdb_SendMsg(uint8 taskID, uint8 toCommissioningState,uint8 status, uint8 len, uint8 *buf)
bdb_SendMsg:
          CFI Block cfiBlock303 Using cfiCommon0
          CFI Function bdb_SendMsg
        CODE
// 3155 {
        FUNCALL bdb_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        MOV       A,#-0x11
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       ?V7,R2
        MOV       ?V8,R3
        MOV       ?V3,R4
// 3156   bdbInMsg_t *msgPtr = NULL;
// 3157 
// 3158   if ( (len > 0) && (buf != NULL) )
        MOV       A,R4
        JZ        ??bdb_SendMsg_0
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_11:
        JZ        ??bdb_SendMsg_0
// 3159   {
// 3160     uint8 tmpLength;
// 3161     tmpLength = len;
// 3162     tmpLength += sizeof(osal_event_hdr_t);
// 3163     
// 3164     msgPtr = (bdbInMsg_t *)osal_msg_allocate( tmpLength );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       A,#0x2
        ADD       A,R4
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 3165     
// 3166     if ( msgPtr )
        MOV       A,R2
        ORL       A,R7
        JZ        ??bdb_SendMsg_0
// 3167     {
// 3168       osal_memcpy( msgPtr->buf, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,?V3
        MOV       R5,#0x0
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 3169     
// 3170       msgPtr->hdr.event = toCommissioningState;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,?V7
        MOVX      @DPTR,A
// 3171       msgPtr->hdr.status = status;
        INC       DPTR
        MOV       A,?V8
        MOVX      @DPTR,A
// 3172       osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V2
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 3173     }
// 3174   }
// 3175 }
??bdb_SendMsg_0:
        MOV       R7,#0x9
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock303

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond304 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond305 Using cfiCommon0
          CFI (cfiCond305) Function bdb_SendMsg
          CFI (cfiCond305) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond305) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond305) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond305) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond305) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond305) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond305) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond305) CFA_SP SP+-2
          CFI (cfiCond305) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker306 Using cfiCommon1
          CFI (cfiPicker306) NoFunction
          CFI (cfiPicker306) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,?V0
        ORL       A,?V1
        RET
          CFI EndBlock cfiCond304
          CFI EndBlock cfiCond305
          CFI EndBlock cfiPicker306
// 3176 
// 3177 
// 3178 /*********************************************************************
// 3179  * @fn      bdb_RegisterCommissioningStatusCB
// 3180  *
// 3181  * @brief   Register a callback in which the status of the procedures done in
// 3182  *          BDB commissioning process will be reported
// 3183  *
// 3184  * @param   bdbGCB_CommissioningStatus - application callback
// 3185  *
// 3186  * @return  none
// 3187  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3188 void bdb_RegisterCommissioningStatusCB(bdbGCB_CommissioningStatus_t bdbGCB_CommissioningStatus)
bdb_RegisterCommissioningStatusCB:
          CFI Block cfiBlock307 Using cfiCommon0
          CFI Function bdb_RegisterCommissioningStatusCB
        CODE
// 3189 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3190   pfnCommissioningStatusCB = bdbGCB_CommissioningStatus;
        MOV       DPTR,#pfnCommissioningStatusCB
        LJMP      ?Subroutine3 & 0xFFFF
// 3191 }
          CFI EndBlock cfiBlock307
// 3192 
// 3193 /*********************************************************************
// 3194  * @fn      bdb_ClearNetworkParams
// 3195  *
// 3196  * @brief   Restore nwk parameters to invalid if the device is not on a network
// 3197  *
// 3198  * @param   void
// 3199  *
// 3200  * @return  void
// 3201  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3202 void bdb_ClearNetworkParams(void)
bdb_ClearNetworkParams:
          CFI Block cfiBlock308 Using cfiCommon0
          CFI Function bdb_ClearNetworkParams
        CODE
// 3203 {
        ; Saved register size: 0
        ; Auto size: 0
// 3204 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 3205   if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
// 3206   {
// 3207     //Clear the event
// 3208     _NIB.nwkPanId = INVALID_NODE_ADDR;
// 3209     _NIB.nwkLogicalChannel = 0;
// 3210     _NIB.nwkDevAddress = INVALID_NODE_ADDR;
// 3211     touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
// 3212   }
// 3213 #endif
// 3214 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock308
// 3215 
// 3216 /*********************************************************************
// 3217  * @fn      bdb_getZCLFrameCounter
// 3218  *
// 3219  * @brief   Get the next ZCL Frame Counter for packet sequence number
// 3220  *
// 3221  * @param   none
// 3222  *
// 3223  * @return  next ZCL frame counter
// 3224  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3225 uint8 bdb_getZCLFrameCounter(void)
bdb_getZCLFrameCounter:
          CFI Block cfiBlock309 Using cfiCommon0
          CFI Function bdb_getZCLFrameCounter
        CODE
// 3226 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3227   bdb_ZclTransactionSequenceNumber++;
        MOV       DPTR,#bdb_ZclTransactionSequenceNumber
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
// 3228   return bdb_ZclTransactionSequenceNumber;
        LJMP      ??Subroutine48_0 & 0xFFFF
// 3229 
// 3230 }
          CFI EndBlock cfiBlock309
// 3231 
// 3232 
// 3233 #if (ZG_BUILD_JOINING_TYPE)
// 3234 /*********************************************************************
// 3235  * @fn      bdb_RegisterCBKETCLinkKeyExchangeCB
// 3236  *
// 3237  * @brief   Register a callback in which the TC link key exchange procedure will 
// 3238  *          be performed by application.
// 3239  *          Upon fail or success bdb must be notified, see bdb_CBKETCLinkKeyExchangeAttempt
// 3240  *
// 3241  * @param   bdbGCB_TCLinkKeyExchangeMethod - application callback
// 3242  *
// 3243  * @return  none
// 3244  */
// 3245 void bdb_RegisterCBKETCLinkKeyExchangeCB(bdbGCB_CBKETCLinkKeyExchange_t bdbGCB_CBKETCLinkKeyExchange)
// 3246 {
// 3247   if(bdbGCB_CBKETCLinkKeyExchange)
// 3248   {
// 3249     pfnCBKETCLinkKeyExchange = bdbGCB_CBKETCLinkKeyExchange;
// 3250     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_CBKE;
// 3251   }
// 3252   else
// 3253   {
// 3254     pfnCBKETCLinkKeyExchange = NULL;
// 3255     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
// 3256   }
// 3257 }
// 3258 
// 3259 /*********************************************************************
// 3260  * @fn      bdb_RegisterForFilterNwkDescCB
// 3261  *
// 3262  * @brief   Register a callback in which the application gets the list of network
// 3263  *          descriptors got from active scan.
// 3264  *          Use bdb_nwkDescFree to release the network descriptors that are not 
// 3265  *          of interest and leave those which are to be attempted.
// 3266  *
// 3267  * @param   bdbGCB_FilterNwkDesc - application callback
// 3268  *
// 3269  * @return  none
// 3270  */
// 3271 void bdb_RegisterForFilterNwkDescCB(bdbGCB_FilterNwkDesc_t bdbGCB_FilterNwkDesc)
// 3272 {
// 3273   if(bdbGCB_FilterNwkDesc)
// 3274   {
// 3275     pfnFilterNwkDesc = bdbGCB_FilterNwkDesc;
// 3276   }
// 3277 }
// 3278 
// 3279 
// 3280 /*********************************************************************
// 3281  * @fn          bdb_CBKETCLinkKeyExchangeAttempt
// 3282  *
// 3283  * @brief       Tell BDB module the result of the TC link key exchange, to try
// 3284  *              the default process or to keep going with the joining process.
// 3285  *
// 3286  * @param       didSuccess - TRUE if the process was succes, False otherwise
// 3287  *
// 3288  * @return      unprocessed events
// 3289  */
// 3290 void bdb_CBKETCLinkKeyExchangeAttempt(bool didSuccess)
// 3291 {
// 3292   if(didSuccess)
// 3293   {
// 3294     bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
// 3295     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
// 3296   }
// 3297   else
// 3298   {
// 3299     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
// 3300     //We are going back one state to try it again
// 3301     bdbCommissioningProcedureState.bdbTCExchangeState -= BDB_TC_EXCHANGE_NEXT_STATE;
// 3302     bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
// 3303   }
// 3304 
// 3305 }
// 3306 #endif
// 3307 
// 3308 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
// 3309 
// 3310 /*********************************************************************
// 3311  * @fn      gp_ChangeChannelReq
// 3312  *
// 3313  * @brief   Callback function to notify the BDB about a GP commissioning 
// 3314  * request that will change the current channel for at most 
// 3315  * gpBirectionalCommissioningChangeChannelTimeout ms
// 3316  *
// 3317  * @param   channel - Channel in which the commissioning will take place
// 3318  *
// 3319  * @return  TRUE to allow change channel, FALSE to do not allow
// 3320  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3321 static uint8 gp_ChangeChannelReq(void)
gp_ChangeChannelReq:
          CFI Block cfiBlock310 Using cfiCommon0
          CFI Function gp_ChangeChannelReq
        CODE
// 3322 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3323   uint8 allowChangeChannel = TRUE;
        MOV       R1,#0x1
// 3324   
// 3325   //Do not allow changes of channel if any process is in place
// 3326   if(bdbAttributes.bdbCommissioningMode)
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        JZ        ??gp_ChangeChannelReq_0
// 3327   {
// 3328     allowChangeChannel = FALSE;
        MOV       R1,#0x0
// 3329   }
// 3330   
// 3331   //Check application state to decide if allow change channel or not
// 3332   
// 3333   return allowChangeChannel;
??gp_ChangeChannelReq_0:
        LJMP      ??Subroutine46_0 & 0xFFFF
// 3334 }
          CFI EndBlock cfiBlock310
// 3335 
// 3336 
// 3337 /*********************************************************************
// 3338  * @fn          gp_CBInit
// 3339  *
// 3340  * @brief       Register the callbacks for GP endpoint
// 3341  *
// 3342  * @param       none
// 3343  *
// 3344  * @return      none
// 3345  */
// 3346 void gp_CBInit(void)
// 3347 {
// 3348   GP_DataCnfGCB = GP_DataCnf;
// 3349   GP_endpointInitGCB = gp_endpointInit;  
// 3350   GP_expireDuplicateFilteringGCB = gp_expireDuplicateFiltering;
// 3351   GP_stopCommissioningModeGCB = gp_stopCommissioningMode;
// 3352   GP_returnOperationalChannelGCB = gp_returnOperationalChannel;
// 3353   GP_DataIndGCB = GP_DataInd;
// 3354   GP_SecReqGCB = GP_SecReq;   
// 3355   GP_CheckAnnouncedDeviceGCB = gp_CheckAnnouncedDevice;
// 3356     
// 3357   GP_aliasConflictAnnce = &aliasConflictAnnce;
// 3358   
// 3359   GP_endpointInitGCB();
// 3360 }
// 3361 
// 3362 #endif
// 3363 
// 3364 /*********************************************************************
// 3365 *********************************************************************/
// 3366 
// 3367 
// 3368 /******************************************************************************
// 3369  * @fn          bdb_GenerateInstallCodeCRC
// 3370  *
// 3371  * @brief       Creates a CRC for the install code passed.
// 3372  *
// 3373  * @param       installCode - install code from which CRC will be generated
// 3374  *
// 3375  * @return      CRC
// 3376  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3377 uint16 bdb_GenerateInstallCodeCRC(uint8 *installCode)
bdb_GenerateInstallCodeCRC:
          CFI Block cfiBlock311 Using cfiCommon0
          CFI Function bdb_GenerateInstallCodeCRC
        CODE
// 3378 {
        FUNCALL bdb_GenerateInstallCodeCRC, bdb_calculateCCITT_CRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 6, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 6, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 3379   uint16 CRC;
// 3380   
// 3381   bdb_calculateCCITT_CRC(installCode, INSTALL_CODE_LEN, &CRC);
        ; Setup parameters for call to function bdb_calculateCCITT_CRC
        MOV       DPTR,#__Constant_10
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 6)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        LCALL     `??bdb_calculateCCITT_CRC::?relay`; Banked call to: bdb_calculateCCITT_CRC
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 3382 
// 3383   return CRC;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV       A,#0x2
        LJMP      ?Subroutine6 & 0xFFFF
// 3384 }
          CFI EndBlock cfiBlock311
// 3385 
// 3386 /******************************************************************************
// 3387  * @fn          bdb_calculateCCITT_CRC
// 3388  *
// 3389  * @brief       Creates a CRC for the install code passed.
// 3390  *
// 3391  * @param       Mb - install code from which CRC will be generated
// 3392  * @param       msglen - install code length
// 3393  * @param       crc - 
// 3394  *
// 3395  * @return      none
// 3396  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3397 void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc)
bdb_calculateCCITT_CRC:
          CFI Block cfiBlock312 Using cfiCommon0
          CFI Function bdb_calculateCCITT_CRC
        CODE
// 3398 {
        FUNCALL bdb_calculateCCITT_CRC, bdb_crcInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_calculateCCITT_CRC, bdb_crcBitByBitFast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
// 3399   uint16 crcinit_direct; 
// 3400   uint16 crcinit_nondirect;
// 3401   bdb_crcInit(crc, &crcinit_direct, &crcinit_nondirect);
        ; Setup parameters for call to function bdb_crcInit
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_crcInit::?relay`; Banked call to: bdb_crcInit
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 3402   *crc = bdb_crcBitByBitFast(Mb, msglen, crcinit_direct, crcinit_nondirect);
        ; Setup parameters for call to function bdb_crcBitByBitFast
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_crcBitByBitFast::?relay`; Banked call to: bdb_crcBitByBitFast
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 3403 }
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock312
// 3404 
// 3405 
// 3406 /******************************************************************************
// 3407  * @fn          bdb_crcInit
// 3408  *
// 3409  * @brief       Initialize CRC calculation
// 3410  *
// 3411  * @param       crc - 
// 3412  * @param       crcinit_direct -
// 3413  * @param       crcinit_nondirect - 
// 3414  *
// 3415  * @return      none
// 3416  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3417 void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect)
bdb_crcInit:
          CFI Block cfiBlock313 Using cfiCommon0
          CFI Function bdb_crcInit
        CODE
// 3418 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3419 
// 3420   uint16 i;
// 3421   uint16 bit;
// 3422 
// 3423   *crcinit_direct = CRC_INIT;
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3424   *crc = CRC_INIT;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3425   for (i=0; i<CRC_ORDER; i++) 
        MOV       R6,#0x10
// 3426   {
// 3427     bit = *crc & 1;
??bdb_crcInit_0:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
// 3428     if (bit) *crc^= CRC_POLYNOM;
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_crcInit_1
        XRL       A,#0x21
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x10
        MOVX      @DPTR,A
// 3429     *crc >>= 1;
??bdb_crcInit_1:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        CLR       C
        RRC       A
        MOV       R5,A
        MOV       A,R4
        RRC       A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 3430     if (bit) *crc|= CRC_HIGHBIT;
        MOV       A,R0
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_crcInit_2
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x80
        MOVX      @DPTR,A
// 3431   }	
??bdb_crcInit_2:
        DEC       R6
        MOV       A,R6
        JNZ       ??bdb_crcInit_0
// 3432   *crcinit_nondirect = *crc;
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_128:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R2
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 3433 
// 3434 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock313

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond314 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_129
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond315) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond315) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond315) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond315) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond315) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond315) CFA_SP SP+-2
          CFI (cfiCond315) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker316 Using cfiCommon1
          CFI (cfiPicker316) NoFunction
          CFI (cfiPicker316) Picker
        MOV       DPH,A
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiPicker316
        REQUIRE ??Subroutine62_0
        ; // Fall through to label ??Subroutine62_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine62_0:
          CFI Block cfiCond317 Using cfiCommon0
          CFI Function bdb_event_loop
          CFI Conditional ??CrossCallReturnLabel_127
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function bdb_crcInit
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+-2
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond319) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond319) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond319) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond319) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond319) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond319) CFA_SP SP+-2
          CFI (cfiCond319) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond320 Using cfiCommon0
          CFI (cfiCond320) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond320) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond320) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond320) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond320) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond320) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond320) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond320) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond320) CFA_SP SP+-2
          CFI (cfiCond320) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker321 Using cfiCommon1
          CFI (cfiPicker321) NoFunction
          CFI (cfiPicker321) Picker
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_137:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiCond320
          CFI EndBlock cfiPicker321
// 3435 
// 3436 
// 3437 /******************************************************************************
// 3438  * @fn          bdb_crcReflect
// 3439  *
// 3440  * @brief       
// 3441  *
// 3442  * @param       crc - 
// 3443  * @param       bitnum -
// 3444  *
// 3445  * @return      none
// 3446  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3447 uint16 bdb_crcReflect (uint16 crc, uint16 bitnum)
bdb_crcReflect:
          CFI Block cfiBlock322 Using cfiCommon0
          CFI Function bdb_crcReflect
        CODE
// 3448 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3449 
// 3450   // reflects the lower 'bitnum' bits of 'crc'
// 3451 
// 3452   uint16 i, j=1, crcout=0;
        MOV       R6,#0x1
        MOV       R7,#0x0
        MOV       ?V0,R7
        MOV       ?V1,R7
// 3453 
// 3454   for (i=(uint16)1<<(bitnum-1); i; i>>=1) {
        MOV       ?V2,R6
        MOV       ?V3,R7
        MOV       A,R4
        DEC       A
        MOV       R0,#?V2
        LCALL     ?S_SHL
        MOV       R0,?V2
        MOV       R1,?V3
        SJMP      ??bdb_crcReflect_0
// 3455     if (crc & i) crcout|=j;
??bdb_crcReflect_1:
        MOV       A,R2
        ANL       A,R0
        MOV       R4,A
        MOV       A,R3
        ANL       A,R1
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        JZ        ??bdb_crcReflect_2
        MOV       A,R6
        ORL       A,?V0
        MOV       ?V0,A
        MOV       A,R7
        ORL       A,?V1
        MOV       ?V1,A
// 3456     j<<= 1;
??bdb_crcReflect_2:
        MOV       A,R6
        ADD       A,0xE0 /* A   */
        MOV       R6,A
        MOV       A,R7
        RLC       A
        MOV       R7,A
// 3457   }
        MOV       A,R1
        CLR       C
        RRC       A
        MOV       R1,A
        MOV       A,R0
        RRC       A
        MOV       R0,A
??bdb_crcReflect_0:
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_crcReflect_1
// 3458   return (crcout);
        MOV       R2,?V0
        MOV       R3,?V1
        LJMP      ??Subroutine50_0 & 0xFFFF
// 3459 }
          CFI EndBlock cfiBlock322
// 3460 
// 3461 
// 3462 /******************************************************************************
// 3463  * @fn          bdb_crcBitByBitFast
// 3464  *
// 3465  * @brief       
// 3466  *
// 3467  * @param       p - 
// 3468  * @param       len -
// 3469  * @param       crcinit_direct - 
// 3470  * @param       crcinit_nondirect -
// 3471  *
// 3472  * @return      crc
// 3473  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3474 uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect) 
bdb_crcBitByBitFast:
          CFI Block cfiBlock323 Using cfiCommon0
          CFI Function bdb_crcBitByBitFast
        CODE
// 3475 {
        FUNCALL bdb_crcBitByBitFast, bdb_crcReflect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_crcBitByBitFast, bdb_crcReflect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV       ?V2,R2
        MOV       ?V3,R3
// 3476   // fast bit by bit algorithm without augmented zero bytes.
// 3477   // does not use lookup table, suited for polynom orders between 1...32.
// 3478 
// 3479   uint16 i, j, c, bit;
// 3480   uint16 crc = crcinit_direct;
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 3481 
// 3482   for (i=0; i<len; i++) {
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
        SJMP      ??bdb_crcBitByBitFast_0
// 3483 
// 3484     c = (uint16)*p++;
??bdb_crcBitByBitFast_1:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R3,#0x0
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
// 3485     c = bdb_crcReflect(c, 8);
        ; Setup parameters for call to function bdb_crcReflect
        MOV       R4,#0x8
        MOV       R5,#0x0
        LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
// 3486 
// 3487     for (j=0x80; j; j>>=1) {
        MOV       R0,#-0x80
// 3488 
// 3489       bit = crc & CRC_HIGHBIT;
??bdb_crcBitByBitFast_2:
        MOV       A,R7
        ANL       A,#0x80
        MOV       R5,A
// 3490       crc<<= 1;
        MOV       A,R6
        ADD       A,0xE0 /* A   */
        MOV       R6,A
        MOV       A,R7
        RLC       A
        MOV       R7,A
// 3491       if (c & j) bit^= CRC_HIGHBIT;
        MOV       A,R2
        ANL       A,R0
        JZ        ??bdb_crcBitByBitFast_3
        MOV       A,#-0x80
        XRL       A,R5
        MOV       R5,A
// 3492       if (bit) crc^= CRC_POLYNOM;
??bdb_crcBitByBitFast_3:
        MOV       A,R5
        JZ        ??bdb_crcBitByBitFast_4
        MOV       A,#0x21
        XRL       A,R6
        MOV       R6,A
        MOV       A,#0x10
        XRL       A,R7
        MOV       R7,A
// 3493     }
??bdb_crcBitByBitFast_4:
        CLR       C
        MOV       A,R0
        RRC       A
        MOV       R0,A
        JNZ       ??bdb_crcBitByBitFast_2
// 3494   }	
        INC       ?V0
        MOV       A,?V0
        JNZ       ??bdb_crcBitByBitFast_0
        INC       ?V1
??bdb_crcBitByBitFast_0:
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        CLR       A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       R0,#?V8
        MOV       R1,#?V4
        LCALL     ?UL_GT
        JC        ??bdb_crcBitByBitFast_1
// 3495 
// 3496   crc=bdb_crcReflect(crc, CRC_ORDER);
// 3497   crc^= CRC_XOR;
// 3498 
// 3499   return(crc);
        ; Setup parameters for call to function bdb_crcReflect
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
        MOV       A,R2
        CPL       A
        MOV       R2,A
        MOV       A,R3
        CPL       A
        MOV       R3,A
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
// 3500 }
          CFI EndBlock cfiBlock323

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bdbAttributes>`:
        DATA32
        DD 134213632
        DD 2048
        DATA16
        DW 65535
        DATA8
        DB 0
        DB 0
        DB 7
        DB 4
        DB 0
        DB 0
        DB 15
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for vDoPrimaryScan>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgBdbInstallCodeCRC>`:
        DATA8
        DB 131
        DB 254
        DB 211
        DB 64
        DB 122
        DB 147
        DB 151
        DB 35
        DB 165
        DB 198
        DB 57
        DB 178
        DB 105
        DB 22
        DB 213
        DB 5
        DB 195
        DB 181

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_32:
        DD 50

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_c8:
        DD 200

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3a98:
        DD 15000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_10:
        DD 16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterSimpleDescriptor::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterSimpleDescriptor

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ZclIdentifyCmdInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ZclIdentifyCmdInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_addInstallCode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_addInstallCode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterTCLinkKeyExchangeProcessCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setTCRequireKeyExchange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setTCRequireKeyExchange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_TCAddJoiningDevice::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_TCAddJoiningDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_TCProcessJoiningList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_TCProcessJoiningList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_TCjoiningDeviceComplete::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_TCjoiningDeviceComplete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_TCJoiningDeviceFree::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_TCJoiningDeviceFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setJoinUsesInstallCodeKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setJoinUsesInstallCodeKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_StartCommissioning::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_StartCommissioning

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_NotifyCommissioningModeStart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_NotifyCommissioningModeStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setFN::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setFN

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_resetLocalAction::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_resetLocalAction

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_parentLost::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_parentLost

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_NetworkRestoredResumeState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_NetworkRestoredResumeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_reportCommissioningState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_reportCommissioningState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkFormationAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkFormationAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_isDeviceNonFactoryNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_isDeviceNonFactoryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_doTrustCenterRequireKeyExchange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_doTrustCenterRequireKeyExchange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_rejoinNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_rejoinNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setChannelAttribute::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setChannelAttribute

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setChannel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setChannel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkJoiningFormation::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkJoiningFormation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkSteeringDeviceOnNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkSteeringDeviceOnNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_startResumeCommissioningProcess::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_startResumeCommissioningProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessNodeDescRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessNodeDescRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_touchlinkSendFNReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_touchlinkSendFNReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setNodeIsOnANetwork::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setNodeIsOnANetwork

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setCommissioningGroupID::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setCommissioningGroupID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_CreateRespondentList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_CreateRespondentList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_AddRespondentNode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_AddRespondentNode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclRespondentListClean::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclRespondentListClean

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterCommissioningStatusCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterCommissioningStatusCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ClearNetworkParams::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ClearNetworkParams

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_getZCLFrameCounter::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_getZCLFrameCounter

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_ChangeChannelReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_ChangeChannelReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_GenerateInstallCodeCRC::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_GenerateInstallCodeCRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_calculateCCITT_CRC::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_calculateCCITT_CRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcReflect::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcReflect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcBitByBitFast::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcBitByBitFast

        END
// 3501 
// 3502 
// 
// 5 736 bytes in segment BANKED_CODE
//   270 bytes in segment BANK_RELAYS
//    37 bytes in segment XDATA_I
//    37 bytes in segment XDATA_ID
//    20 bytes in segment XDATA_ROM_C
//    26 bytes in segment XDATA_Z
// 
//   307 bytes of CODE     memory
//     0 bytes of CONST    memory (+ 20 bytes shared)
// 5 736 bytes of HUGECODE memory
//    63 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
