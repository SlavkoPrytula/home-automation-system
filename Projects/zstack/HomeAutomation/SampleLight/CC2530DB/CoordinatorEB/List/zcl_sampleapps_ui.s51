///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              19/Apr/2021  18:00:04
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\Source\zcl_sampleapps_ui.c
//    Command line       =  
//        -f C:\users\slavko\Temp\EW9032.tmp ("C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\Source\zcl_sampleapps_ui.c" -D
//        BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE
//        -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D
//        xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
//        -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -lC "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\zcl_sampleapps_ui.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_sampleapps_ui

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_AND
        EXTERN ?L_AND_TO_X
        EXTERN ?L_IOR_TO_X
        EXTERN ?L_NOT
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?S_DIV_MOD
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_DIV_MOD
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??UI_ActionBackFromAppMenu::?relay`
        FUNCTION `??UI_ActionBackFromAppMenu::?relay`,0203H
        PUBLIC `??UI_DeviceStateUpdated::?relay`
        FUNCTION `??UI_DeviceStateUpdated::?relay`,0203H
        PUBLIC `??UI_Init::?relay`
        FUNCTION `??UI_Init::?relay`,0203H
        PUBLIC `??UI_MainStateMachine::?relay`
        FUNCTION `??UI_MainStateMachine::?relay`,0203H
        PUBLIC `??UI_UpdateComissioningStatus::?relay`
        FUNCTION `??UI_UpdateComissioningStatus::?relay`,0203H
        PUBLIC `??UI_UpdateLcd::?relay`
        FUNCTION `??UI_UpdateLcd::?relay`,0203H
        FUNCTION `??uiActionAppSecificMenu::?relay`,0203H
        FUNCTION `??uiActionConfigureEnables::?relay`,0203H
        FUNCTION `??uiActionMenuJump::?relay`,0203H
        FUNCTION `??uiActionProcessConfigureChannels::?relay`,0203H
        FUNCTION `??uiActionProcessConfigurePanId::?relay`,0203H
        FUNCTION `??uiActionProcessPrepareInstallCode::?relay`,0203H
        FUNCTION `??uiActionResetToFactoryNew::?relay`,0203H
        FUNCTION `??uiActionSetInstallCode::?relay`,0203H
        FUNCTION `??uiActionStartComissioning::?relay`,0203H
        FUNCTION `??uiArrayToString::?relay`,0203H
        FUNCTION `??uiCreateChannelMaskString::?relay`,0203H
        FUNCTION `??uiProcessBindNotification::?relay`,0203H
        FUNCTION `??uiProcessIdentifyTimeChange::?relay`,0203H
        FUNCTION `??uiProcessPermitJoin::?relay`,0203H
        FUNCTION `??uiUintToString::?relay`,0203H
        PUBLIC UI_ActionBackFromAppMenu
        FUNCTION UI_ActionBackFromAppMenu,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC UI_DeviceStateUpdated
        FUNCTION UI_DeviceStateUpdated,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC UI_Init
        FUNCTION UI_Init,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC UI_MainStateMachine
        FUNCTION UI_MainStateMachine,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC UI_UpdateComissioningStatus
        FUNCTION UI_UpdateComissioningStatus,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC UI_UpdateLcd
        FUNCTION UI_UpdateLcd,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 81, STACK
        PUBWEAK __Constant_1f4
        PUBWEAK __Constant_fa
        FUNCTION uiActionAppSecificMenu,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION uiActionConfigureEnables,080603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION uiActionMenuJump,080603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION uiActionProcessConfigureChannels,080603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION uiActionProcessConfigurePanId,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION uiActionProcessPrepareInstallCode,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION uiActionResetToFactoryNew,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION uiActionSetInstallCode,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION uiActionStartComissioning,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION uiArrayToString,080203H
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION uiCreateChannelMaskString,080203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        FUNCTION uiProcessBindNotification,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION uiProcessIdentifyTimeChange,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION uiProcessPermitJoin,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION uiUintToString,080203H
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLcd_HW_Clear     SYMBOL "HalLcd_HW_Clear"
`??HalLcd_HW_Clear::?relay` SYMBOL "?relay", HalLcd_HW_Clear
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetRemainingPermitJoiningDuration SYMBOL "NLME_GetRemainingPermitJoiningDuration"
`??NLME_GetRemainingPermitJoiningDuration::?rela` SYMBOL "?relay", NLME_GetRemainingPermitJoiningDuration
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
`??ZDO_RegisterForZdoCB::?relay` SYMBOL "?relay", ZDO_RegisterForZdoCB
bdb_GenerateInstallCodeCRC SYMBOL "bdb_GenerateInstallCodeCRC"
`??bdb_GenerateInstallCodeCRC::?relay` SYMBOL "?relay", bdb_GenerateInstallCodeCRC
bdb_GetFBInitiatorStatus SYMBOL "bdb_GetFBInitiatorStatus"
`??bdb_GetFBInitiatorStatus::?relay` SYMBOL "?relay", bdb_GetFBInitiatorStatus
bdb_RegisterBindNotificationCB SYMBOL "bdb_RegisterBindNotificationCB"
`??bdb_RegisterBindNotificationCB::?relay` SYMBOL "?relay", bdb_RegisterBindNotificationCB
bdb_RegisterIdentifyTimeChangeCB SYMBOL "bdb_RegisterIdentifyTimeChangeCB"
`??bdb_RegisterIdentifyTimeChangeCB::?relay` SYMBOL "?relay", bdb_RegisterIdentifyTimeChangeCB
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_addInstallCode  SYMBOL "bdb_addInstallCode"
`??bdb_addInstallCode::?relay` SYMBOL "?relay", bdb_addInstallCode
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
UI_ActionBackFromAppMenu SYMBOL "UI_ActionBackFromAppMenu"
`??UI_ActionBackFromAppMenu::?relay` SYMBOL "?relay", UI_ActionBackFromAppMenu
UI_DeviceStateUpdated SYMBOL "UI_DeviceStateUpdated"
`??UI_DeviceStateUpdated::?relay` SYMBOL "?relay", UI_DeviceStateUpdated
UI_Init             SYMBOL "UI_Init"
`??UI_Init::?relay` SYMBOL "?relay", UI_Init
UI_MainStateMachine SYMBOL "UI_MainStateMachine"
`??UI_MainStateMachine::?relay` SYMBOL "?relay", UI_MainStateMachine
UI_UpdateComissioningStatus SYMBOL "UI_UpdateComissioningStatus"
`??UI_UpdateComissioningStatus::?relay` SYMBOL "?relay", UI_UpdateComissioningStatus
UI_UpdateLcd        SYMBOL "UI_UpdateLcd"
`??UI_UpdateLcd::?relay` SYMBOL "?relay", UI_UpdateLcd

        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLcd_HW_Clear::?relay`
        FUNCTION `??HalLcd_HW_Clear::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetRemainingPermitJoiningDuration::?rela`
        FUNCTION `??NLME_GetRemainingPermitJoiningDuration::?rela`,00H
        EXTERN `??ZDO_RegisterForZdoCB::?relay`
        FUNCTION `??ZDO_RegisterForZdoCB::?relay`,00H
        EXTERN `??bdb_GenerateInstallCodeCRC::?relay`
        FUNCTION `??bdb_GenerateInstallCodeCRC::?relay`,00H
        EXTERN `??bdb_GetFBInitiatorStatus::?relay`
        FUNCTION `??bdb_GetFBInitiatorStatus::?relay`,00H
        EXTERN `??bdb_RegisterBindNotificationCB::?relay`
        FUNCTION `??bdb_RegisterBindNotificationCB::?relay`,00H
        EXTERN `??bdb_RegisterIdentifyTimeChangeCB::?relay`
        FUNCTION `??bdb_RegisterIdentifyTimeChangeCB::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??bdb_addInstallCode::?relay`
        FUNCTION `??bdb_addInstallCode::?relay`,00H
        EXTERN `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcd_HW_Clear
        FUNCTION HalLcd_HW_Clear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetRemainingPermitJoiningDuration
        FUNCTION NLME_GetRemainingPermitJoiningDuration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN aExtendedAddress
        EXTERN bdbAttributes
        EXTERN bdb_GenerateInstallCodeCRC
        FUNCTION bdb_GenerateInstallCodeCRC,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_GetFBInitiatorStatus
        FUNCTION bdb_GetFBInitiatorStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterBindNotificationCB
        FUNCTION bdb_RegisterBindNotificationCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterIdentifyTimeChangeCB
        FUNCTION bdb_RegisterIdentifyTimeChangeCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_addInstallCode
        FUNCTION bdb_addInstallCode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgConfigPANID

// C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\Source\zcl_sampleapps_ui.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleapps_ui.c
//    3   Revised:        $Date: 2016-8-1 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Z-Stack Sample Application User Interface.
//    8 
//    9 
//   10   Copyright 2006-2016 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This file implements the user interface that is common to most of the Z-Stack sample applications.
//   43 
//   44   The sample applications are intended for the following platforms:
//   45   - CC2530EM+SmartRF05
//   46   - CC2538EM+SmartRF06
//   47 
//   48   The UI peripherals being used:
//   49 
//   50   - LCD based menu system:
//   51     only using 3 lines of 16 characters each, for compatibility accross platforms.
//   52 
//   53   - Switches: 
//   54     Using 4 directional switches and one selection switch. On SmartRF05, these are implemented by
//   55     the joystick.
//   56 
//   57     - The switches have the following functionality, where applicable:
//   58       - Left/Right: depending on the menu screen, these are used for either:
//   59         - move to the previous/next menu screen
//   60         - move to the previous/next digit/sub-item within a menu screen
//   61       - Up/Down: change the value of the currently selected item
//   62       - Ok (Select): execute the operation associated with the current menu screeen
//   63 
//   64   - LEDs:
//   65     LED1 is used differently by the individual applications.
//   66     the 3 other LEDs are common accross all the applications, and function as follows:
//   67 
//   68     - LED2: device state and type
//   69       - Off: not connected to network
//   70       - Constantly on: connected to the network as an end device
//   71       - Blinking, 4 seconds period, 95% duty cycle: connected to the network as a router
//   72       - Blinking, 4 seconds period, 75% duty cycle: connected to the network as a coordinator
//   73 
//   74     - LED3: identify status
//   75       - Off: device is not identifying
//   76       - Blinking, 1 second period, 50% duty cycle: device is identifying
//   77 
//   78     - LED4: open for joining status
//   79       - Off: other devices cannot join through this device
//   80       - Blinking, 1 second period, 25% duty cycle: other devices can join using standard comissioning
//   81       - Blinking, 1 second period, 75% duty cycle: other devices can join using touchlink (i.e
//   82         touchlink is enabled on the current device as a target)
//   83       - On: device can join using either standard comissioning or touchlink
//   84 
//   85   The menu system:
//   86 
//   87     <HELP> Wellcome screen
//   88       Displays the sample application name.
//   89       Press and hold [OK] to show a simple help screen.
//   90       
//   91       Help screen
//   92       Release [OK] to go back to the welcome screen.
//   93       
//   94     <CONFIGURE> Configuration sub-menu
//   95       Press [OK] to display the configuration sub-menu
//   96       
//   97       <ADD INSTL CODE> install code sub-menu
//   98         Press [OK] to display the install code sub-menu
//   99         
//  100         <SET INSTL CODE> set install code
//  101           Press [OK] to to edit the install code
//  102           
//  103           Install code editing screen
//  104             Press [LEFT] / [RIGHT] to select a digit
//  105             Press [UP] / [DOWN] to change the selected digit
//  106             press [OK] to to go back to the higher menu level
//  107             
//  108         <SET I.C. ADDR> set install code address (coordinator only)
//  109           Press [OK] to to edit the install code address
//  110 
//  111           Install code address editing screen
//  112             Press [LEFT] / [RIGHT] to select a digit
//  113             Press [UP] / [DOWN] to change the selected digit
//  114             press [OK] to to go back to the higher menu level
//  115             
//  116         <APLY INST CODE> apply install code
//  117           Press [OK] to apply the address+Install-Code pair (coordinator) or the Install-Code (Routers and End-Devices)
//  118           This menu screen also displays the status of the last apply-install-code operation
//  119 
//  120         <BACK> go back to higher menu level
//  121           press [OK] to to go back to the higher menu level
//  122         
//  123       <T.L. TRGT TIME> Set the touchlink enable duration
//  124         Press and hold [UP] / [DOWN] to increase / decrease the displayed time. The longer the press, the faster
//  125         the change. 
//  126         The maximum duration is 86400 seconds. Increasing it above this value will display '(forever)' - 
//  127         in this setting, the touchlink target will stay active once started and untill manually stopped.
//  128         The minimum duration is 1 second. Decreasing it below this value sets tohchlink target to always disabled.
//  129         This menu item is only available if BDB_TL_TARGET is defined.
//  130 
//  131       <T.L. STEALING> enable/disable touchlink stealing
//  132         Press [OK] to toggle (enable/disable) touchlink stealing.
//  133         When stealing is enabled, a touchlink target may be 'stolen' by another device acting as a touchlink 
//  134         initiator, which will take it out of its existing network and add it to another network.
//  135         This menu item is only available if BDB_TL_TARGET is defined.
//  136 
//  137       <T.L. INITIATOR> enable/disable touchlink initiator
//  138         Press [OK] to toggle (enable/disable) touchlink initiator.
//  139         When enabled, touchlink initiator functionality will be executed as part of the commissioning procedure.
//  140         This menu item is only available if BDB_TL_INITIATOR is defined.
//  141 
//  142       <NWK FORMATION> enable/disable network formation for when cannot connect to an existing network
//  143         Press [OK] to toggle (enable/disable) network formation.
//  144         When enabled, network formation will be executed as part of the commissioning procedure, unless 
//  145         the device has already joined a network.
//  146 
//  147       <NWK STEERING> enable/disable attempting to connect to an existing network
//  148         Press [OK] to toggle (enable/disable) network steering.
//  149         When enabled, network steering will be executed as part of the commissioning procedure, so the
//  150         device will try to join an existing network, and will open the network for joining of other devices
//  151         once it is joined.
//  152 
//  153       <FINDNG+BINDNG> enable/disable finding and binding
//  154         Press [OK] to toggle (enable/disable) finding and binding (F&B).
//  155         When enabled, finding and binding will be executed as part of the commissioning procedure, so the
//  156         device will either start identifying, look for matchng devices that are currently identifying, or 
//  157         both (depending of whether it is a F&B target, initiator, or both).
//  158       
//  159       <PRI CHANL MASK> set the primary channel mask
//  160         Press [OK] to edit the primary channel list
//  161 
//  162         Primary channel list editing screen
//  163           Press [LEFT] / [RIGHT] to select a channel (from channel 11 to channel 26)
//  164           Press [UP] / [DOWN] to enable / disable the selected channel, accordingly.
//  165           press [OK] to to go back to the higher menu level
//  166 
//  167       <SEC CHANL MASK> set the secondary channel mask
//  168         Press [OK] to edit the secondary channel list
//  169         
//  170         Secondary channel list editing screen
//  171           Press [LEFT] / [RIGHT] to select a channel (from channel 11 to channel 26)
//  172           Press [UP] / [DOWN] to enable / disable the selected channel, accordingly
//  173           press [OK] to to go back to the higher menu level
//  174         
//  175       <PAN ID> set the PAN ID
//  176         Press [OK] to edit the PAN ID to create / connect to
//  177         
//  178         PAN ID editing screen
//  179           Press [LEFT] / [RIGHT] to select the digit to edit
//  180           Press [UP] / [DOWN] to change the selected digit
//  181           press [OK] to to go back to the higher menu level
//  182         
//  183       <BACK> go back to higher menu level
//  184         press [OK] to to go back to the higher menu level
//  185       
//  186     <COMMISSION> start comissionin
//  187       Press [OK] to start the commissioning procedure. (Note: this is disabled if a previous comissioning is
//  188       already on-going).
//  189       This procedure will execute the following methods, depending on whether they are enabled or disabled
//  190       in the respective configuration item):
//  191         - Touchlink (as Touchlink Initiator)
//  192         - Network Steering
//  193         - Network Formation
//  194         - Finding and Binding
//  195       This screen shows the following information
//  196         Line1:
//  197           Current commissioning method being executed:
//  198             TL: Touchlink
//  199             NS: Network Steering
//  200             NF: Network Formation
//  201             FB: Finding And Binding
//  202             PL: Parent Lost (for end devices only)
//  203             -- - idle (commissioning not currently active)
//  204           Network status
//  205             NotOnNwk - not currently connected to a network
//  206             FORM - network was formed by the current device during the latest execution of the NF method
//  207             JOIN - the current device joined an existing network during the latest execution of the NS method
//  208             TCHL - the current device joined a network using touchlink 
//  209             EXST - the device was already connected to a network when the commissioning was started
//  210           Joining permission state (not showing on end devices):
//  211             CLOSED - the current device is closed for joining of other devices
//  212             OpenXXX - the current device is open for joining of other devices, and will close in XXX seconds
//  213         Line2:
//  214           IdXXX - The device is identifying (if XXX > 0), and will stop identifying in XXX seconds.
//  215           SrchXXX/YY - The device is currently performing F&B as an Initiator (if XXX > 0), and will stop in
//  216             XXX seconds. YY is the number of matching endpoints that were foind, for which bindings were 
//  217             successfully created or already existed.
//  218         
//  219     <T.L. TARGET> start touchlink target
//  220       Press [OK] to start / stop touchlink target functionality.
//  221       When not active, pressing [OK] will start touchlink target for the duration defined by the respective
//  222       configuration item.
//  223       When active, pressing OK will immidiately stop touchlink target functionality.
//  224       This menu item is only available if BDB_TL_TARGET is defined.
//  225 
//  226     <APP MENU> application-specific sub-menu
//  227       Press [OK] to enter the application-specific sub-menu.
//  228       See the main comment in the specific application c file for more details.
//  229       
//  230     <INFO> device and network information
//  231       This screen has no operation related to it. It shows the following information:
//  232         Line1:
//  233           Device IEEE address
//  234         Line2: (only meaningful when the device is on a network)
//  235           nXXXX - the Network pan-id
//  236           cXX - the Channel the network is active on
//  237           aXXXX - the short Address of the device
//  238         Line3:
//  239           XXX (YYY) - the device is not connected to a network.
//  240             XXX is either ZR, ZC or ZED, depending on the build configuration.
//  241             YYY is the network-state value (see definition of devStates_t in ZDApp.h).
//  242           ZC - the device is connected to a network as a coordinator.
//  243           ZR CENT - the device is connected to a centralized network as a router.
//  244           ZR DIST - the device is connected to a distributed network as a router.
//  245           ZED pXXXX - the device is connected to a network as an end device. Parent address is XXXX.
//  246 
//  247     <RESET TO FN> reset the device to factory-new
//  248       Press [OK] to reset the device to factory-new. The device will disconnect from the network, and 
//  249       all configurations and network information will be deleted.
//  250 
//  251 *********************************************************************/
//  252 
//  253 #ifdef LEGACY_LCD_DEBUG
//  254 #error Please disable LEGACY_LCD_DEBUG.
//  255 #endif
//  256 
//  257 #if (BDB_INSTALL_CODE_USE!=BDB_INSTALL_CODE_USE_IC_CRC)
//  258 #warning Install-Code functionality is disabled. To enable, make sure BDB_INSTALL_CODE_USE==BDB_INSTALL_CODE_USE_IC_CRC
//  259 #endif
//  260 
//  261 /*********************************************************************
//  262  * INCLUDES
//  263  */
//  264 #include "hal_types.h"
//  265 #include "hal_key.h"
//  266 #include "bdb_interface.h"
//  267 #include "hal_lcd.h"
//  268 #include "hal_led.h"
//  269 #include "zcl.h"
//  270 #include "zdapp.h"
//  271 #include "zcl_sampleapps_ui.h"
//  272 
//  273 #ifdef BDB_TL_TARGET
//  274   #include "bdb_touchlink_target.h"
//  275 #endif
//  276 
//  277 
//  278 /*********************************************************************
//  279  * CONSTANT-MACROS AND ENUMERATIONS
//  280  */
//  281 enum
//  282 {
//  283   UI_STATE_DEFAULT = 0,
//  284   UI_STATE_CONFIGURE,
//  285   UI_STATE_COMMISSION,
//  286 #ifdef BDB_TL_TARGET
//  287   UI_STATE_TOGGLE_TL_TARGET,
//  288 #endif
//  289   UI_STATE_APP_SPECIFIC_MENU,
//  290   UI_STATE_INFO,
//  291   UI_STATE_RESET_TO_FACTORY_NEW,
//  292   UI_STATE_STATE_HELP,
//  293   UI_STATE_SET_INST_CODE,
//  294 #ifdef BDB_TL_TARGET
//  295   UI_STATE_TOUCHLINK_TARGET,
//  296   UI_STATE_TOUCHLINK_STEALING,
//  297 #endif
//  298 #ifdef BDB_TL_INITIATOR
//  299   UI_STATE_TOUCHLINK_INITIATOR,
//  300 #endif
//  301   UI_STATE_NETWORK_FORMATION,
//  302   UI_STATE_NETWORK_STEERING,
//  303   UI_STATE_FINDING_AND_BINDING,
//  304   UI_STATE_SET_PRI_CHANEL_MASK_0,
//  305   UI_STATE_SET_SEC_CHANEL_MASK_0,
//  306   UI_STATE_SET_PAN_ID_0,
//  307   UI_STATE_BACK_FROM_CONFIGURE,
//  308   UI_STATE_SET_PRI_CHANEL_MASK_1,
//  309   UI_STATE_SET_SEC_CHANEL_MASK_1,
//  310   UI_STATE_SET_PAN_ID_1,
//  311   UI_STATE_SET_INST_CODE_0,
//  312 #if (ZG_BUILD_COORDINATOR_TYPE)
//  313   UI_STATE_SET_INST_CODE_ADDR_0,
//  314 #endif
//  315   UI_STATE_SET_INST_CODE_DONE,
//  316   UI_STATE_BACK_FROM_INSTALL_CODE,
//  317   UI_STATE_SET_INST_CODE_1,
//  318 #if (ZG_BUILD_COORDINATOR_TYPE)
//  319   UI_STATE_SET_INST_CODE_ADDR_1,
//  320 #endif
//  321 };
//  322 
//  323 #define DEFAULT_COMISSIONING_MODE (BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_FINDING_BINDING)
//  324 
//  325 #define TOUCHLINK_TIMEOUT_INCREMENTS_INITIAL 1000
//  326 #define TOUCHLINK_TIMEOUT_INCREMENTS_MAX 10000000
//  327 
//  328 #define DEFAULT_TOUCHLINK_TARGET_TIMEOUT 30000
//  329 
//  330 #define LCD_CURSOR_UPDATE_INTERVAL 500
//  331 
//  332 #define LCD_AUTO_REFRESH_INTERVAL_ON_COMISSIONING_SCREEN 250
//  333 
//  334 #define LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN 1000
//  335 #define LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN_END 50
//  336 
//  337 #define LCD_LINE_LENGTH 16
//  338 
//  339 #define STATUS_UNKNOWN 0xFF
//  340 
//  341 #define LCD_CURSOR_CHAR ' '
//  342 
//  343 #define UI_INSTALL_CODE_DEFAULT {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5} //This install code produces the key: 66B6900981E1EE3CA4206B6B861C02BB
//  344 #define UI_INSTALL_CODE_ADDR_DEFAULT {0xE7,0xFC,0x0E,0x04,0x00,0x4B,0x12,0x00}
//  345 
//  346 
//  347 #ifdef HAL_BOARD_CC2538
//  348 #define UI_LCD_LINE_1 HAL_LCD_LINE_3
//  349 #define UI_LCD_LINE_2 HAL_LCD_LINE_4
//  350 #define UI_LCD_LINE_3 HAL_LCD_LINE_5
//  351 
//  352 #define LCD_CC2538_PREFIX_COUNT 3
//  353 #else
//  354 #define UI_LCD_LINE_1 HAL_LCD_LINE_1
//  355 #define UI_LCD_LINE_2 HAL_LCD_LINE_2
//  356 #define UI_LCD_LINE_3 HAL_LCD_LINE_3
//  357 
//  358 #define LCD_CC2538_PREFIX_COUNT 0
//  359 #endif
//  360 
//  361 #define UI_LED_IDENTIFY_DUTY_CYCLE    50
//  362 
//  363 #define UI_LED_COORDINATOR_DUTY_CYCLE 75
//  364 #define UI_LED_ROUTER_DUTY_CYCLE      95
//  365 #define UI_LED_END_DEVICE_DUTY_CYCLE 100
//  366 
//  367 #define UI_LED_DEVICE_STATE_FLASH_TIME 4000
//  368 
//  369 #define UI_LED_DEVICE_STATE       HAL_LED_2
//  370 #define UI_LED_IDENTIFY           HAL_LED_3
//  371 #define UI_LED_NETWORK_OPEN_STATE HAL_LED_4
//  372 
//  373 #define NWK_OPEN_FOR_JOINING 0x1
//  374 #define NWK_OPEN_TOUCHLINK_AS_TARGET 0x2
//  375 
//  376 /*********************************************************************
//  377  * TYPEDEFS
//  378  */
//  379    
//  380 /*********************************************************************
//  381 * LOCAL FUNCTIONS DECLARATIONS
//  382 */
//  383 static void uiUintToString(uint32 value, char * str, uint8 base, uint8 num_of_digists, bool pad0, bool reverse);
//  384 static void uiArrayToString(uint8 * buf, char * str, uint8 num_of_digists, bool big_endian);
//  385 static void uiCreateChannelMaskString(uint32 channel_mask, char * str);
//  386 
//  387 
//  388 #ifdef BDB_TL_TARGET
//  389 static void uiActionToggleTlTarget(uint16 keys);
//  390 #endif
//  391 static void uiActionStartComissioning(uint16 keys);
//  392 static void uiActionSetInstallCode(uint16 keys);
//  393 static void uiActionResetToFactoryNew(uint16 keys);
//  394 static void uiActionConfigureEnables(uint16 keys);
//  395 static void uiActionMenuJump(uint16 keys);
//  396 static void uiActionProcessConfigureChannels(uint16 keys);
//  397 static void uiActionProcessConfigurePanId(uint16 keys);
//  398 static void uiActionProcessPrepareInstallCode(uint16 keys);
//  399 static void uiActionAppSecificMenu(uint16 keys);
//  400 
//  401 static void *uiProcessPermitJoin( void *duration );
//  402 
//  403 static void uiProcessIdentifyTimeChange( uint8 endpoint );
//  404 
//  405 static void uiProcessBindNotification( bdbBindNotificationData_t *data );
//  406 
//  407 #ifdef BDB_TL_TARGET
//  408 static void uiProcessTouchlinkTargetEnable( uint8 enable );
//  409 #endif
//  410 
//  411 /*********************************************************************
//  412  * CONSTANTS
//  413  */

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  414 static const uiState_t gui_states_main[] = 
gui_states_main:
        DB 254
        DB 5
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionStartComissioning::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionAppSecificMenu::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 0
        DW 0H
        DATA8
        DB 0
        DB 254
        DATA16
        DW 4
        DW `??uiActionResetToFactoryNew::?relay`
        DATA8
        DB 255
        DB 255
        DATA16
        DW 1024
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 14
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionConfigureEnables::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionConfigureEnables::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionConfigureEnables::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 7
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 255
        DB 255
        DATA16
        DW 1055
        DW `??uiActionProcessConfigureChannels::?relay`
        DATA8
        DB 255
        DB 255
        DATA16
        DW 1055
        DW `??uiActionProcessConfigureChannels::?relay`
        DATA8
        DB 255
        DB 255
        DATA16
        DW 1055
        DW `??uiActionProcessConfigurePanId::?relay`
        DATA8
        DB 254
        DB 21
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionSetInstallCode::?relay`
        DATA8
        DB 18
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 255
        DB 255
        DATA16
        DW 1055
        DW `??uiActionProcessPrepareInstallCode::?relay`
        DATA8
        DB 255
        DB 255
        DATA16
        DW 1055
        DW `??uiActionProcessPrepareInstallCode::?relay`
//  415 {
//  416   /*  UI_STATE_DEFAULT                */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_RESET_TO_FACTORY_NEW,    UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  417   /*  UI_STATE_CONFIGURE              */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  418   /*  UI_STATE_COMMISSION             */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionStartComissioning},
//  419 #ifdef BDB_TL_TARGET
//  420   /*  UI_STATE_TOGGLE_TL_TARGET       */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionToggleTlTarget},
//  421 #endif
//  422   /*  UI_STATE_APP_SPECIFIC_MENU      */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionAppSecificMenu},
//  423   /*  UI_STATE_INFO                   */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            0, NULL},
//  424   /*  UI_STATE_RESET_TO_FACTORY_NEW   */ {UI_STATE_DEFAULT,               UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionResetToFactoryNew},
//  425 
//  426   /*  UI_STATE_STATE_HELP             */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_5_RELEASED,&uiActionMenuJump},
//  427 
//  428   /*  UI_STATE_SET_INST_CODE          */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_BACK_FROM_CONFIGURE,     UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  429 #ifdef BDB_TL_TARGET
//  430   /*  UI_STATE_TOUCHLINK_TARGET       */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_1_RELEASED | UI_KEY_SW_3_RELEASED, &uiActionConfigureEnables},
//  431   /*  UI_STATE_TOUCHLINK_STEALING     */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
//  432 #endif
//  433 #ifdef BDB_TL_INITIATOR
//  434   /*  UI_STATE_TOUCHLINK_INITIATOR    */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
//  435 #endif
//  436   /*  UI_STATE_NETWORK_FORMATION      */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
//  437   /*  UI_STATE_NETWORK_STEERING       */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
//  438   /*  UI_STATE_FINDING_AND_BINDING    */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
//  439   /*  UI_STATE_SET_PRI_CHANEL_MASK_0  */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  440   /*  UI_STATE_SET_SEC_CHANEL_MASK_0  */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  441   /*  UI_STATE_SET_PAN_ID_0           */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  442   /*  UI_STATE_BACK_FROM_CONFIGURE    */ {UI_STATE_SET_INST_CODE,         UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  443 
//  444   /*  UI_STATE_SET_PRI_CHANEL_MASK_1  */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessConfigureChannels},
//  445   /*  UI_STATE_SET_SEC_CHANEL_MASK_1  */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessConfigureChannels},
//  446   /*  UI_STATE_SET_PAN_ID_1           */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessConfigurePanId},
//  447 
//  448   /*  UI_STATE_SET_INST_CODE_0        */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_BACK_FROM_INSTALL_CODE,  UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  449 #if (ZG_BUILD_COORDINATOR_TYPE)
//  450   /*  UI_STATE_SET_INST_CODE_ADDR_0   */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  451 #endif  
//  452   /*  UI_STATE_SET_INST_CODE_DONE     */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionSetInstallCode},
//  453   /*  UI_STATE_BACK_FROM_INSTALL_CODE */ {UI_STATE_SET_INST_CODE_0,       UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  454 
//  455   /*  UI_STATE_SET_INST_CODE_1        */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessPrepareInstallCode},
//  456 #if (ZG_BUILD_COORDINATOR_TYPE)
//  457   /*  UI_STATE_SET_INST_CODE_ADDR_1   */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessPrepareInstallCode},
//  458 #endif
//  459 };
//  460 
//  461 /*********************************************************************
//  462  * GLOBAL VARIABLES
//  463  */
//  464 
//  465 /*********************************************************************
//  466  * GLOBAL FUNCTIONS
//  467  */
//  468 
//  469 /*********************************************************************
//  470  * EXTERNAL REFERENCES
//  471  */
//  472 extern uint8 aExtendedAddress[];
//  473 
//  474 /*********************************************************************
//  475  * LOCAL VARIABLES
//  476  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  477 static uint8 uiAppTaskId;
uiAppTaskId:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  478 static uint16 uiLcdAutoUpdateEvent;
uiLcdAutoUpdateEvent:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  479 static uint16 * pUiIdentifyTimeAttribute;
pUiIdentifyTimeAttribute:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  480 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  481 static uiAppUpdateLcd_t uiAppUpdateLcd;
uiAppUpdateLcd:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  482 static const uiState_t * uiAppStatesMain = NULL;
uiAppStatesMain:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  483 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  484 static uint8 FBMatchesFound = 0;
FBMatchesFound:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  485 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  486 static int uiCurrentState = UI_STATE_DEFAULT;
uiCurrentState:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  487 static bool uiCommissioningIsInitializing = FALSE;
uiCommissioningIsInitializing:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  488 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  489 static uint8 uiLcdCursorLine = 0xFF;
uiLcdCursorLine:
        DATA8
        DS 1
        REQUIRE `?<Initializer for uiLcdCursorLine>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  490 static uint8 uiLcdCursorCol;
uiLcdCursorCol:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  491 static uint8 uiLcdCursorState;
uiLcdCursorState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  492 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  493 static uint8 uiSelectedBdbComissioningModes = DEFAULT_COMISSIONING_MODE;
uiSelectedBdbComissioningModes:
        DATA8
        DS 1
        REQUIRE `?<Initializer for uiSelectedBdbComissioningMod`
        REQUIRE __INIT_XDATA_I
//  494 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  495 static ZStatus_t uiAddInstallCodeLastStatus = STATUS_UNKNOWN;
uiAddInstallCodeLastStatus:
        DATA8
        DS 1
        REQUIRE `?<Initializer for uiAddInstallCodeLastStatus>`
        REQUIRE __INIT_XDATA_I
//  496 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  497 static char * uiCommissioningStateStr = "--";
uiCommissioningStateStr:
        DATA16
        DS 2
        REQUIRE `?<Initializer for uiCommissioningStateStr>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  498 static char * uiCommissioningNetworkConnrctionStr = NULL;
uiCommissioningNetworkConnrctionStr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  499 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  500 static bool uiComissioningIsActive = FALSE;
uiComissioningIsActive:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  501 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  502 static bool uiResetInitiated = FALSE;
uiResetInitiated:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  503 
//  504 #ifdef BDB_TL_TARGET
//  505 static uint16 uiKeyAutoRepeatEvent;
//  506 static uint32 uiLcdAutoUpdateInterval;
//  507 
//  508 static uint16 uiAutoKeyRepeatDelay = 500;
//  509 static uint32 uiAutoKeyRepeatCount = 0;
//  510 
//  511 static uint32 uiTouchlinkTargetTimeout = DEFAULT_TOUCHLINK_TARGET_TIMEOUT;
//  512 #endif
//  513 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  514 static uint8 uiInstallCode[] = UI_INSTALL_CODE_DEFAULT;
uiInstallCode:
        DATA8
        DS 18
        REQUIRE `?<Initializer for uiInstallCode>`
        REQUIRE __INIT_XDATA_I
//  515 #if (ZG_BUILD_COORDINATOR_TYPE)

        RSEG XDATA_I:XDATA:NOROOT(0)
//  516 static uint8 uiInstallCodeAddr[Z_EXTADDR_LEN] = UI_INSTALL_CODE_ADDR_DEFAULT;
uiInstallCodeAddr:
        DATA8
        DS 8
        REQUIRE `?<Initializer for uiInstallCodeAddr>`
        REQUIRE __INIT_XDATA_I
//  517 #endif
//  518 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  519 static const uiState_t * uiStates = gui_states_main;
uiStates:
        DATA16
        DS 2
        REQUIRE `?<Initializer for uiStates>`
        REQUIRE __INIT_XDATA_I
//  520 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  521 static char * uiAppTitleStr;
uiAppTitleStr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  522 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  523 static uint8 uiNetworkOpenStateLedDutyCycle[] = {0, 25, 75, 100}; //25% = open for joining; 75% = touchlink target; 100% = both;
uiNetworkOpenStateLedDutyCycle:
        DATA32
        DS 4
        REQUIRE `?<Initializer for uiNetworkOpenStateLedDutyCyc`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  524 static uint8 uiNwkOpenState = 0x00;
uiNwkOpenState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  525 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  526 static devStates_t uiNwkStateShadow = DEV_HOLD;
uiNwkStateShadow:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  527 
//  528 /*********************************************************************
//  529  * LOCAL UTILITY FUNCTIONS
//  530  */
//  531 
//  532 /*********************************************************************
//  533  * @fn          uiUintToString
//  534  *
//  535  * @brief       format an integer into a string buffer.
//  536  *
//  537  * @param       value - 32bit unsigned int value to be formatted
//  538  *              str - pointer to a buffer to store the formatted bnumber
//  539  *              base - base represenation of the value. currently only tested base 10 and 16
//  540  *              num_of_digists - number of digits to include in the formatted string
//  541  *              pad0 - should be set to TRUE to pad the number with leading 0's as required
//  542  *              reverse - should be set to TRUE to reverse the output string
//  543  *
//  544  * @return      none
//  545  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  546 static void uiUintToString (uint32 value, char * str, uint8 base, uint8 num_of_digists, bool pad0, bool reverse)
uiUintToString:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function uiUintToString
        CODE
//  547 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
//  548   int i;
//  549   uint8 index;
//  550   
//  551   for (i = 0; i < num_of_digists; i++)
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       ?V8,A
        CLR       A
        MOV       ?V9,A
        MOV       ?V10,A
        MOV       ?V11,A
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R5,A
        SJMP      ??uiUintToString_0
??uiUintToString_1:
        INC       R2
        MOV       A,R2
        JNZ       ??uiUintToString_0
        INC       R3
??uiUintToString_0:
        MOV       A,R4
        MOV       R0,A
        CLR       C
        MOV       A,R2
        SUBB      A,R0
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_84:
        JNC       ??uiUintToString_2
//  552   {
//  553     index = (reverse ? i : num_of_digists - 1 - i);
        MOV       A,R5
        JZ        ??uiUintToString_3
        MOV       A,R2
        SJMP      ??uiUintToString_4
??uiUintToString_3:
        MOV       A,R2
        MOV       R0,A
        MOV       A,#-0x1
        ADD       A,R4
        CLR       C
        SUBB      A,R0
??uiUintToString_4:
        MOV       R7,A
//  554     str[index] = '0' + (value % base);
        MOV       ?V12,?V8
        MOV       ?V13,?V9
        MOV       ?V14,?V10
        MOV       ?V15,?V11
        MOV       ?V0,?V4
        MOV       ?V1,?V5
        MOV       ?V2,?V6
        MOV       ?V3,?V7
        MOV       R0,#?V0
        MOV       R1,#?V12
        LCALL     ?UL_DIV_MOD
        MOV       A,?V12
        ADD       A,#0x30
        MOV       ?V0,A
        MOV       A,R7
        MOV       R0,A
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV       A,?V0
        MOVX      @DPTR,A
//  555     if (str[index] > '9')
        CLR       C
        SUBB      A,#0x3a
        JC        ??uiUintToString_5
//  556     {
//  557       str[index] += 'A' - '0' - 10;
        MOVX      A,@DPTR
        ADD       A,#0x7
        MOVX      @DPTR,A
//  558     }
//  559     value /= base;
??uiUintToString_5:
        MOV       ?V0,?V8
        MOV       ?V1,?V9
        MOV       ?V2,?V10
        MOV       ?V3,?V11
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?UL_DIV_MOD
//  560     if ((!pad0) && (value == 0))
        MOV       A,R6
        JNZ       ??uiUintToString_1
        MOV       A,?V4
        ORL       A,?V5
        ORL       A,?V6
        ORL       A,?V7
        JNZ       ??uiUintToString_1
//  561     {
//  562       break;
//  563     }
//  564   }
//  565 }
??uiUintToString_2:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function uiUintToString
          CFI Conditional ??CrossCallReturnLabel_84
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function uiCreateChannelMaskString
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        MOV       A,R3
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function uiArrayToString
          CFI Conditional ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function uiUintToString
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function uiCreateChannelMaskString
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7
//  566 
//  567 /*********************************************************************
//  568  * @fn          uiArrayToString
//  569  *
//  570  * @brief       format a memory buffer into a string buffer in hex representation.
//  571  *
//  572  * @param       buf - pointer to a bufer to be formatted
//  573  *              str - pointer to a buffer to store the formatted string
//  574  *              num_of_digists - number of digits to include in the formatted string
//  575  *              big_endian - whether the memory content should be represented as big or little endian
//  576  *
//  577  * @return      none
//  578  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  579 static void uiArrayToString (uint8 * buf, char * str, uint8 num_of_digists, bool big_endian)
uiArrayToString:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function uiArrayToString
        CODE
//  580 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V5,R1
//  581   int i;
//  582   uint8 stringIndex;
//  583   uint8 value;
//  584   
//  585   for (i = 0; i < num_of_digists; i++)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V6,A
        SJMP      ??uiArrayToString_0
//  586   {
//  587     stringIndex = (big_endian ? i : num_of_digists - 1 - i);
//  588     if(big_endian)
//  589     {
//  590       value = (buf[i / 2] >> (4 * (!(i % 2)))) & 0x0F;
//  591     }
//  592     else
//  593     {
//  594       value = (buf[i / 2] >> (4 * (i % 2))) & 0x0F;
??uiArrayToString_1:
        MOV       A,R4
        MOV       R0,A
        MOV       A,R5
        MOV       R1,A
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     ?S_DIV_MOD
        LCALL     ?Subroutine31 & 0xFFFF
//  595     }
??CrossCallReturnLabel_60:
        MOV       ?V8,A
        MOV       ?V9,#0x0
        MOV       A,R2
        RLC       A
        RLC       A
        ANL       A,#0xfc
        MOV       R0,#?V8
        LCALL     ?SS_SHR
        MOV       A,?V8
??uiArrayToString_2:
        ANL       A,#0xf
        MOV       R0,A
//  596     str[stringIndex] = '0' + value;
        MOV       A,#0x30
        ADD       A,R0
        MOV       R0,A
        MOV       R2,?V4
        MOV       A,?V0
        ADD       A,R2
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOV       A,R0
        MOVX      @DPTR,A
//  597     if (str[stringIndex] > '9')
        CLR       C
        SUBB      A,#0x3a
        JC        ??uiArrayToString_3
//  598     {
//  599       str[stringIndex] += 'A' - '0' - 10;
        MOVX      A,@DPTR
        ADD       A,#0x7
        MOVX      @DPTR,A
//  600     }
??uiArrayToString_3:
        INC       R4
        MOV       A,R4
        JNZ       ??uiArrayToString_0
        INC       R5
??uiArrayToString_0:
        MOV       R0,?V5
        CLR       C
        MOV       A,R4
        SUBB      A,R0
        MOV       A,R5
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_83:
        JNC       ??uiArrayToString_4
        MOV       A,?V6
        JZ        ??uiArrayToString_5
        MOV       A,R4
        SJMP      ??uiArrayToString_6
??uiArrayToString_5:
        MOV       A,R4
        MOV       R0,A
        MOV       A,#-0x1
        ADD       A,?V5
        CLR       C
        SUBB      A,R0
??uiArrayToString_6:
        MOV       ?V4,A
        MOV       A,R4
        MOV       R0,A
        MOV       A,R5
        MOV       R1,A
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     ?S_DIV_MOD
        MOV       A,?V6
        JZ        ??uiArrayToString_1
        MOV       A,R2
        ORL       A,R3
        JNZ       ??uiArrayToString_7
        MOV       ?V2,#0x4
        SJMP      ??uiArrayToString_8
??uiArrayToString_7:
        MOV       ?V2,#0x0
??uiArrayToString_8:
        MOV       A,R4
        MOV       R0,A
        MOV       A,R5
        MOV       R1,A
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     ?S_DIV_MOD
        LCALL     ?Subroutine31 & 0xFFFF
//  601   }
??CrossCallReturnLabel_61:
        MOV       R0,?V2
        CJNE      R0,#0x0,??uiArrayToString_9
        SJMP      ??uiArrayToString_2
??uiArrayToString_9:
        CLR       C
        RRC       A
        DJNZ      R0,??uiArrayToString_9
        SJMP      ??uiArrayToString_2
//  602 }
??uiArrayToString_4:
          CFI EndBlock cfiBlock8
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function uiArrayToString
          CFI Conditional ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function uiArrayToString
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV       ?V9,R1
        MOV       A,R6
        ADD       A,R0
        MOV       DPL,A
        MOV       A,R7
        ADDC      A,?V9
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12
//  603 
//  604 /*********************************************************************
//  605  * @fn          uiCreateChannelMaskString
//  606  *
//  607  * @brief       format a channel mask into a string bugger
//  608  *
//  609  * @param       channel_mask - bitmask of the enabled / disabled channels (bits 11-26 represent the
//  610  *                respective channels)
//  611  *              str - pointer to a buffer to store the formatted string
//  612  *
//  613  * @return      none
//  614  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  615 static void uiCreateChannelMaskString(uint32 channel_mask, char * str)
uiCreateChannelMaskString:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function uiCreateChannelMaskString
        CODE
//  616 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
//  617   int i;
//  618   uint32 mask = 0x00000800;
        MOV       ?V0,#0x0
        MOV       ?V1,#0x8
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
//  619   
//  620   for (i = 0; i < 16; i++)
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine35 & 0xFFFF
//  621   {
//  622     str[i] = channel_mask & mask ? '*' : '-';
??CrossCallReturnLabel_66:
        MOV       ?V8,?V4
        MOV       ?V9,?V5
        MOV       ?V10,?V6
        MOV       ?V11,?V7
        MOV       R0,#?V8
        MOV       R1,#?V0
        LCALL     ?L_AND
        MOV       A,?V8
        ORL       A,?V9
        ORL       A,?V10
        ORL       A,?V11
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        JZ        ??uiCreateChannelMaskString_0
        MOV       A,#0x2a
        SJMP      ??uiCreateChannelMaskString_1
??uiCreateChannelMaskString_0:
        MOV       A,#0x2d
??uiCreateChannelMaskString_1:
        MOVX      @DPTR,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R4
        ADD       A,R2
        MOV       DPL,A
        MOV       A,R5
        ADDC      A,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  623     mask <<= 1;
        MOV       A,#0x1
        MOV       R0,#?V0
        LCALL     ?L_SHL
//  624   }
        INC       R2
        MOV       A,R2
        JNZ       ??uiCreateChannelMaskString_2
        INC       R3
??uiCreateChannelMaskString_2:
        CLR       C
        SUBB      A,#0x10
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_85:
        JC        ??CrossCallReturnLabel_66
//  625   
//  626   str[16] = 0;
        MOV       A,R4
        ADD       A,#0x10
        MOV       DPL,A
        CLR       A
        ADDC      A,R5
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
//  627 }
        INC       A
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13
//  628 
//  629 
//  630 /*********************************************************************
//  631  * LOCAL FUNCTIONS
//  632  */
//  633 
//  634 /*********************************************************************
//  635  * @fn          uiActionMenuJump
//  636  *
//  637  * @brief       State-machine action for jumping to another state
//  638  *
//  639  * @param       keys - the keypress code that triggered the call to this function
//  640  *
//  641  * @return      none
//  642  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  643 static void uiActionMenuJump(uint16 keys)
uiActionMenuJump:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function uiActionMenuJump
        CODE
//  644 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  645   switch (uiCurrentState)
        MOV       DPTR,#uiCurrentState
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_134:
        JNZ       ??uiActionMenuJump_0
        MOV       A,?V0
        LCALL     ?UC_SWITCH_SPARSE
`?<Jumptable for uiActionMenuJump>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        11
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        11
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        12
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        13
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_7
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        14
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_8
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        18
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        19
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        21
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_0
        CODE
//  646   {
//  647     case UI_STATE_DEFAULT:
//  648       uiCurrentState = UI_STATE_STATE_HELP;
??uiActionMenuJump_1:
        MOV       DPTR,#uiCurrentState
        MOV       A,#0x6
        SJMP      ??uiActionMenuJump_11
//  649       break;
//  650     case UI_STATE_STATE_HELP:
//  651       uiCurrentState = UI_STATE_DEFAULT;
??uiActionMenuJump_3:
        MOV       DPTR,#uiCurrentState
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        SJMP      ??uiActionMenuJump_12
//  652       break;
//  653     case UI_STATE_CONFIGURE:
//  654       uiCurrentState = UI_STATE_SET_INST_CODE;
//  655       break;
//  656     case UI_STATE_BACK_FROM_CONFIGURE:
//  657       uiCurrentState = UI_STATE_CONFIGURE;
??uiActionMenuJump_8:
        MOV       DPTR,#uiCurrentState
        MOV       A,#0x1
        SJMP      ??uiActionMenuJump_11
//  658       break;
//  659     case UI_STATE_SET_PRI_CHANEL_MASK_0:
//  660       uiCurrentState = UI_STATE_SET_PRI_CHANEL_MASK_1;
??uiActionMenuJump_5:
        MOV       DPTR,#uiCurrentState
        MOV       A,#0xf
        SJMP      ??uiActionMenuJump_11
//  661       break;
//  662     case UI_STATE_SET_SEC_CHANEL_MASK_0:
//  663       uiCurrentState = UI_STATE_SET_SEC_CHANEL_MASK_1;
??uiActionMenuJump_6:
        MOV       DPTR,#uiCurrentState
        MOV       A,#0x10
        SJMP      ??uiActionMenuJump_11
//  664       break;
//  665     case UI_STATE_SET_PAN_ID_0:
//  666       uiCurrentState = UI_STATE_SET_PAN_ID_1;
??uiActionMenuJump_7:
        MOV       DPTR,#uiCurrentState
        MOV       A,#0x11
        SJMP      ??uiActionMenuJump_11
//  667       break;
//  668     case UI_STATE_SET_INST_CODE:
//  669       uiCurrentState = UI_STATE_SET_INST_CODE_0;
??uiActionMenuJump_4:
        MOV       DPTR,#uiCurrentState
        MOV       A,#0x12
        SJMP      ??uiActionMenuJump_11
//  670       break;
//  671     case UI_STATE_SET_INST_CODE_0:
//  672       uiCurrentState = UI_STATE_SET_INST_CODE_1;
??uiActionMenuJump_9:
        MOV       DPTR,#uiCurrentState
        MOV       A,#0x16
        SJMP      ??uiActionMenuJump_11
//  673       break;
//  674 #if (ZG_BUILD_COORDINATOR_TYPE)
//  675     case UI_STATE_SET_INST_CODE_ADDR_0:
//  676       uiCurrentState = UI_STATE_SET_INST_CODE_ADDR_1;
??uiActionMenuJump_10:
        MOV       DPTR,#uiCurrentState
        MOV       A,#0x17
        SJMP      ??uiActionMenuJump_11
//  677       break;
//  678 #endif
//  679     case UI_STATE_BACK_FROM_INSTALL_CODE:
//  680       uiCurrentState = UI_STATE_SET_INST_CODE;
??uiActionMenuJump_2:
        MOV       DPTR,#uiCurrentState
        MOV       A,#0x7
??uiActionMenuJump_11:
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
??uiActionMenuJump_12:
        MOVX      @DPTR,A
//  681       break;
//  682   }
//  683 }
??uiActionMenuJump_0:
          CFI EndBlock cfiBlock14
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15
//  684 
//  685 /*********************************************************************
//  686  * @fn          uiActionStartComissioning
//  687  *
//  688  * @brief       State-machine action for starting comissioning
//  689  *
//  690  * @param       keys - the keypress code that triggered the call to this function
//  691  *
//  692  * @return      none
//  693  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  694 static void uiActionStartComissioning(uint16 keys)
uiActionStartComissioning:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function uiActionStartComissioning
        CODE
//  695 {
        FUNCALL uiActionStartComissioning, UI_UpdateLcd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uiActionStartComissioning, bdb_StartCommissioning
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  696   if ((!uiComissioningIsActive) && (uiSelectedBdbComissioningModes != 0))
        MOV       DPTR,#uiComissioningIsActive
        MOVX      A,@DPTR
        JNZ       ??uiActionStartComissioning_0
        MOV       DPTR,#uiSelectedBdbComissioningModes
        MOVX      A,@DPTR
        JZ        ??uiActionStartComissioning_0
//  697   {
//  698     uiComissioningIsActive = TRUE;
        MOV       DPTR,#uiComissioningIsActive
        MOV       A,#0x1
        MOVX      @DPTR,A
//  699 
//  700     FBMatchesFound = 0;
        MOV       DPTR,#FBMatchesFound
        CLR       A
        MOVX      @DPTR,A
//  701     
//  702     //update LCD now, since bdb_StartCommissioning() is blocking for a few seconds,
//  703     // and we want to give a prompt response to the user
//  704     uiCommissioningIsInitializing = TRUE;
        MOV       DPTR,#uiCommissioningIsInitializing
        INC       A
        MOVX      @DPTR,A
//  705     UI_UpdateLcd();
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
//  706 
//  707     //if already on the network - mark it as 'existing connection'
//  708     if ((uiNwkStateShadow == DEV_END_DEVICE) || (uiNwkStateShadow == DEV_ZB_COORD) || (uiNwkStateShadow == DEV_ROUTER))
        MOV       DPTR,#uiNwkStateShadow
        MOVX      A,@DPTR
        XRL       A,#0x6
        JZ        ??uiActionStartComissioning_1
        MOVX      A,@DPTR
        XRL       A,#0x9
        JZ        ??uiActionStartComissioning_1
        MOVX      A,@DPTR
        XRL       A,#0x7
        JNZ       ??uiActionStartComissioning_2
//  709     {
//  710       uiCommissioningNetworkConnrctionStr = "EXST";
??uiActionStartComissioning_1:
        MOV       DPTR,#uiCommissioningNetworkConnrctionStr
        MOV       A,#`?<Constant "EXST">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "EXST">` >> 8) & 0xff
        MOVX      @DPTR,A
//  711     }
//  712     
//  713     bdb_StartCommissioning(uiSelectedBdbComissioningModes);
??uiActionStartComissioning_2:
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       DPTR,#uiSelectedBdbComissioningModes
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  714   }
//  715 }
??uiActionStartComissioning_0:
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock16
//  716 
//  717 /*********************************************************************
//  718  * @fn          uiActionSetInstallCode
//  719  *
//  720  * @brief       State-machine action for setting the install code
//  721  *
//  722  * @param       keys - the keypress code that triggered the call to this function
//  723  *
//  724  * @return      none
//  725  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  726 static void uiActionSetInstallCode(uint16 keys)
uiActionSetInstallCode:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function uiActionSetInstallCode
        CODE
//  727 {
        FUNCALL uiActionSetInstallCode, bdb_GenerateInstallCodeCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uiActionSetInstallCode, bdb_addInstallCode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  728   uint16 crc = bdb_GenerateInstallCodeCRC(uiInstallCode);
        ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
        LCALL     ?Subroutine30 & 0xFFFF
//  729   uiInstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
//  730   uiInstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
//  731 
//  732 #if (ZG_BUILD_COORDINATOR_TYPE)
//  733   if (ZG_DEVICE_COORDINATOR_TYPE)
//  734   {  
//  735     uiAddInstallCodeLastStatus = bdb_addInstallCode(uiInstallCode, uiInstallCodeAddr);
??CrossCallReturnLabel_58:
        ; Setup parameters for call to function bdb_addInstallCode
        MOV       R4,#uiInstallCodeAddr & 0xff
        MOV       R5,#(uiInstallCodeAddr >> 8) & 0xff
        MOV       R2,#uiInstallCode & 0xff
        MOV       R3,#(uiInstallCode >> 8) & 0xff
        LCALL     `??bdb_addInstallCode::?relay`; Banked call to: bdb_addInstallCode
        MOV       A,R1
        MOV       DPTR,#uiAddInstallCodeLastStatus
        MOVX      @DPTR,A
//  736   }
//  737   else
//  738   {
//  739     uiAddInstallCodeLastStatus = bdb_setActiveCentralizedLinkKey(zstack_UseInstallCode, uiInstallCode);
//  740   }
//  741 #else
//  742   uiAddInstallCodeLastStatus = bdb_setActiveCentralizedLinkKey(zstack_UseInstallCode, uiInstallCode);
//  743 #endif
//  744 }
        SJMP      ?Subroutine1
          CFI EndBlock cfiBlock17
//  745 
//  746 /*********************************************************************
//  747  * @fn          uiActionAppSecificMenu
//  748  *
//  749  * @brief       State-machine action for executing the application-specific sub-menus
//  750  *
//  751  * @param       keys - the keypress code that triggered the call to this function
//  752  *
//  753  * @return      none
//  754  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  755 void uiActionAppSecificMenu(uint16 keys)
uiActionAppSecificMenu:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function uiActionAppSecificMenu
        CODE
//  756 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  757   if (uiAppStatesMain != NULL)
        MOV       DPTR,#uiAppStatesMain
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_96:
        JZ        ??uiActionAppSecificMenu_0
//  758   {
//  759     uiStates = uiAppStatesMain;
        MOV       DPTR,#uiStates
        LCALL     ??Subroutine53_0 & 0xFFFF
//  760     uiCurrentState = 1; //do not start from 0, which is the 'back' menu item
??CrossCallReturnLabel_142:
        MOV       DPTR,#uiCurrentState
        MOV       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  761   }
//  762 }
??uiActionAppSecificMenu_0:
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock18
//  763 
//  764 /*********************************************************************
//  765  * @fn          UI_ActionBackFromAppMenu
//  766  *
//  767  * @brief       Application state-machine action for returning to the common menu
//  768  *
//  769  * @param       keys - the keypress code that triggered the call to this function
//  770  *
//  771  * @return      none
//  772  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  773 void UI_ActionBackFromAppMenu(uint16 keys)
UI_ActionBackFromAppMenu:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function UI_ActionBackFromAppMenu
        CODE
//  774 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  775   uiStates = gui_states_main;
        MOV       DPTR,#uiStates
        MOV       A,#gui_states_main & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(gui_states_main >> 8) & 0xff
        MOVX      @DPTR,A
//  776   uiCurrentState = UI_STATE_APP_SPECIFIC_MENU;
        MOV       DPTR,#uiCurrentState
        MOV       A,#0x3
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  777 }
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock19
//  778 
//  779 #ifdef BDB_TL_TARGET
//  780 /*********************************************************************
//  781  * @fn          uiActionToggleTlTarget
//  782  *
//  783  * @brief       State-machine action for toggling touchlink-target functionality
//  784  *
//  785  * @param       keys - the keypress code that triggered the call to this function
//  786  *
//  787  * @return      none
//  788  */
//  789 void uiActionToggleTlTarget(uint16 keys)
//  790 {
//  791   if (!touchLinkTargetEnabled)
//  792   {
//  793     if (uiTouchlinkTargetTimeout > 0)
//  794     {
//  795       touchLinkTarget_EnableCommissioning( uiTouchlinkTargetTimeout );
//  796       uiLcdAutoUpdateInterval = LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN;
//  797     }
//  798   }
//  799   else
//  800   {
//  801     touchLinkTarget_DisableCommissioning();
//  802     uiLcdAutoUpdateInterval = LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN_END;
//  803   }
//  804 }
//  805 #endif
//  806 
//  807 /*********************************************************************
//  808  * @fn          uiActionProcessConfigureChannels
//  809  *
//  810  * @brief       State-machine action for configuring channel masks
//  811  *
//  812  * @param       keys - the keypress code that triggered the call to this function
//  813  *
//  814  * @return      none
//  815  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  816 static void uiActionProcessConfigureChannels(uint16 keys)
uiActionProcessConfigureChannels:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function uiActionProcessConfigureChannels
        CODE
//  817 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  818   uint32 * channelMask;
//  819   
//  820   uiLcdCursorLine = 1;
        MOV       DPTR,#uiLcdCursorLine
        MOV       A,#0x1
        MOVX      @DPTR,A
//  821   uiLcdCursorState = 0;
        MOV       DPTR,#uiLcdCursorState
        LCALL     ?Subroutine9 & 0xFFFF
//  822 
//  823   if (uiCurrentState == UI_STATE_SET_PRI_CHANEL_MASK_1)
??CrossCallReturnLabel_86:
        XRL       A,#0xf
        JNZ       ??uiActionProcessConfigureChannels_0
        INC       DPTR
        MOVX      A,@DPTR
??uiActionProcessConfigureChannels_0:
        JNZ       ??uiActionProcessConfigureChannels_1
//  824   {
//  825     channelMask = &bdbAttributes.bdbPrimaryChannelSet;
        MOV       R4,#(bdbAttributes + 4) & 0xff
        MOV       R5,#((bdbAttributes + 4) >> 8) & 0xff
        SJMP      ??uiActionProcessConfigureChannels_2
//  826   }
//  827   else
//  828   {
//  829     channelMask = &bdbAttributes.bdbSecondaryChannelSet;
??uiActionProcessConfigureChannels_1:
        MOV       R4,#bdbAttributes & 0xff
        MOV       R5,#(bdbAttributes >> 8) & 0xff
//  830   }
//  831 
//  832   if (keys & UI_KEY_SW_5_RELEASED)
??uiActionProcessConfigureChannels_2:
        MOV       A,R3
        ANL       A,#0x4
        JZ        ??uiActionProcessConfigureChannels_3
//  833   {
//  834     uiLcdCursorCol = 0;
        MOV       DPTR,#uiLcdCursorCol
        CLR       A
        MOVX      @DPTR,A
//  835   }
//  836   
//  837   if (keys & UI_KEY_SW_1_PRESSED)
??uiActionProcessConfigureChannels_3:
        MOV       ?V0,#0x0
        MOV       ?V1,#0x8
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
        MOV       DPTR,#uiLcdCursorCol
        MOVX      A,@DPTR
        MOV       R0,#?V0
        LCALL     ?L_SHL
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??uiActionProcessConfigureChannels_4
//  838   {
//  839     *channelMask |= ((uint32)0x00000800 << uiLcdCursorCol);
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       R0,#?V0
        LCALL     ?L_IOR_TO_X
//  840     uiLcdCursorState = 1;
        SJMP      ??uiActionProcessConfigureChannels_5
//  841   }
//  842   else if (keys & UI_KEY_SW_3_PRESSED)
??uiActionProcessConfigureChannels_4:
        ANL       A,#0x10
        JZ        ??uiActionProcessConfigureChannels_6
//  843   {
//  844     *channelMask &= ~(((uint32)0x00000800 << uiLcdCursorCol));
        MOV       R0,#?V0
        LCALL     ?L_NOT
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       R0,#?V0
        LCALL     ?L_AND_TO_X
//  845     uiLcdCursorState = 1;
??uiActionProcessConfigureChannels_5:
        MOV       DPTR,#uiLcdCursorState
        MOV       A,#0x1
        SJMP      ??CrossCallReturnLabel_0
//  846   }
//  847   else if (keys & UI_KEY_SW_2_PRESSED)
??uiActionProcessConfigureChannels_6:
        MOV       A,R2
        ANL       A,#0x2
        JZ        ??uiActionProcessConfigureChannels_7
//  848   {
//  849     if (uiLcdCursorCol < 15)
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0xf
        JNC       ??uiActionProcessConfigureChannels_8
//  850     {
//  851       uiLcdCursorCol++;
        MOVX      A,@DPTR
        INC       A
        SJMP      ??CrossCallReturnLabel_0
//  852     }
//  853     else
//  854     {
//  855       uiLcdCursorCol = 0;
??uiActionProcessConfigureChannels_8:
        CLR       A
        SJMP      ??CrossCallReturnLabel_0
//  856     }
//  857   }
//  858   else if (keys & UI_KEY_SW_4_PRESSED)
??uiActionProcessConfigureChannels_7:
        MOV       A,R2
        ANL       A,#0x8
        JZ        ??uiActionProcessConfigureChannels_9
//  859   {
//  860     if (uiLcdCursorCol > 0)
        MOVX      A,@DPTR
        JZ        ??uiActionProcessConfigureChannels_10
//  861     {
//  862       uiLcdCursorCol--;
        DEC       A
        SJMP      ??CrossCallReturnLabel_0
//  863     }
//  864     else
//  865     {
//  866       uiLcdCursorCol = 15;
??uiActionProcessConfigureChannels_10:
        MOV       A,#0xf
        SJMP      ??CrossCallReturnLabel_0
//  867     }
//  868   }
//  869   else if (keys & UI_KEY_SW_5_PRESSED)
??uiActionProcessConfigureChannels_9:
        MOV       A,R2
        ANL       A,#0x4
        JZ        ??uiActionProcessConfigureChannels_11
//  870   {
//  871     if (uiCurrentState == UI_STATE_SET_PRI_CHANEL_MASK_1)
        MOV       DPTR,#uiCurrentState
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??uiActionProcessConfigureChannels_12
        INC       DPTR
        MOVX      A,@DPTR
??uiActionProcessConfigureChannels_12:
        MOV       DPTR,#uiCurrentState
        JNZ       ??uiActionProcessConfigureChannels_13
//  872     {
//  873       uiCurrentState = UI_STATE_SET_PRI_CHANEL_MASK_0;
        MOV       A,#0xb
        SJMP      ??uiActionProcessConfigureChannels_14
//  874     }
//  875     else
//  876     {
//  877       uiCurrentState = UI_STATE_SET_SEC_CHANEL_MASK_0;
??uiActionProcessConfigureChannels_13:
        MOV       A,#0xc
//  878     }
//  879     
//  880     uiLcdCursorLine = 0xFF;
//  881   }
??uiActionProcessConfigureChannels_14:
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX      @DPTR,A
//  882 }
??uiActionProcessConfigureChannels_11:
          CFI EndBlock cfiBlock20
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock21
//  883 
//  884 /*********************************************************************
//  885  * @fn          uiActionProcessConfigurePanId
//  886  *
//  887  * @brief       State-machine action for configuring the PAN ID
//  888  *
//  889  * @param       keys - the keypress code that triggered the call to this function
//  890  *
//  891  * @return      none
//  892  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  893 static void uiActionProcessConfigurePanId(uint16 keys)
uiActionProcessConfigurePanId:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function uiActionProcessConfigurePanId
        CODE
//  894 {
        FUNCALL uiActionProcessConfigurePanId, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uiActionProcessConfigurePanId, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  895   uint8 shift;
//  896   uint8 digit;
//  897   
//  898   uiLcdCursorLine = 0;
        MOV       DPTR,#uiLcdCursorLine
        CLR       A
        MOVX      @DPTR,A
//  899   uiLcdCursorState = 0;
        MOV       DPTR,#uiLcdCursorState
        MOVX      @DPTR,A
//  900   
//  901   if (keys & UI_KEY_SW_5_RELEASED)
        MOV       A,R3
        ANL       A,#0x4
        JZ        ??uiActionProcessConfigurePanId_0
//  902   {
//  903     uiLcdCursorCol = 6;
        MOV       DPTR,#uiLcdCursorCol
        MOV       A,#0x6
        MOVX      @DPTR,A
//  904   }
//  905 
//  906   if ((keys & UI_KEY_SW_1_PRESSED) || (keys & UI_KEY_SW_3_PRESSED))
??uiActionProcessConfigurePanId_0:
        MOV       A,R2
        ANL       A,#0x11
        JNZ       $+5
        LJMP      ??uiActionProcessConfigurePanId_1 & 0xFFFF
//  907   {
//  908     shift = 4 * (9 - uiLcdCursorCol);
        MOV       DPTR,#uiLcdCursorCol
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x9
        CLR       C
        SUBB      A,R0
        RLC       A
        RLC       A
        ANL       A,#0xfc
        MOV       R4,A
//  909     digit = (zgConfigPANID >> shift) & 0xF;
        MOV       DPTR,#zgConfigPANID
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_135:
        MOV       ?V1,A
        MOV       A,R4
        MOV       R0,#?V0
        LCALL     ?US_SHR
        MOV       A,?V0
        ANL       A,#0xf
        MOV       R1,A
//  910     if (keys & UI_KEY_SW_1_PRESSED)
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??uiActionProcessConfigurePanId_2
//  911     {
//  912       if (digit < 15)
        MOV       A,R1
        CLR       C
        SUBB      A,#0xf
        JNC       ??uiActionProcessConfigurePanId_3
//  913       {
//  914         digit++;
        INC       R1
        SJMP      ??uiActionProcessConfigurePanId_4
//  915       }
//  916       else
//  917       {
//  918         digit = 0;
??uiActionProcessConfigurePanId_3:
        MOV       R1,#0x0
        SJMP      ??uiActionProcessConfigurePanId_4
//  919       }
//  920     }
//  921     else if (keys & UI_KEY_SW_3_PRESSED)
??uiActionProcessConfigurePanId_2:
        ANL       A,#0x10
        JZ        ??uiActionProcessConfigurePanId_4
//  922     {
//  923       if (digit > 0)
        MOV       A,R1
        JZ        ??uiActionProcessConfigurePanId_5
//  924       {
//  925         digit--;
        DEC       R1
        SJMP      ??uiActionProcessConfigurePanId_4
//  926       }
//  927       else
//  928       {
//  929         digit = 15;
??uiActionProcessConfigurePanId_5:
        MOV       R1,#0xf
//  930       }
//  931     }
//  932 
//  933     zgConfigPANID &= ~((uint32)0xF << shift);
//  934     zgConfigPANID |= (uint32)digit << shift;
??uiActionProcessConfigurePanId_4:
        MOV       ?V0,#0xf
        MOV       ?V1,#0x0
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
        MOV       A,R4
        MOV       R0,#?V0
        LCALL     ?L_SHL
        MOV       A,?V0
        CPL       A
        MOV       R2,A
        MOV       A,?V1
        CPL       A
        MOV       R3,A
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        ANL       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,R3
        MOVX      @DPTR,A
        MOV       ?V0,R1
        CLR       A
        MOV       ?V1,A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       A,R4
        MOV       R0,#?V0
        LCALL     ?L_SHL
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        ORL       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,?V1
        MOVX      @DPTR,A
//  935     uiLcdCursorState = 1;
        MOV       DPTR,#uiLcdCursorState
        MOV       A,#0x1
        SJMP      ??CrossCallReturnLabel_1
//  936   }
//  937   else if (keys & UI_KEY_SW_2_PRESSED)
??uiActionProcessConfigurePanId_1:
        MOV       A,R2
        ANL       A,#0x2
        JZ        ??uiActionProcessConfigurePanId_6
//  938   {
//  939     if (uiLcdCursorCol < 9)
        MOV       DPTR,#uiLcdCursorCol
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x9
        JNC       ??uiActionProcessConfigurePanId_7
//  940     {
//  941       uiLcdCursorCol++;
        MOVX      A,@DPTR
        INC       A
        SJMP      ??CrossCallReturnLabel_1
//  942     }
//  943   }
//  944   else if (keys & UI_KEY_SW_4_PRESSED)
??uiActionProcessConfigurePanId_6:
        MOV       A,R2
        ANL       A,#0x8
        JZ        ??uiActionProcessConfigurePanId_8
//  945   {
//  946     if (uiLcdCursorCol > 6)
        MOV       DPTR,#uiLcdCursorCol
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x7
        JC        ??uiActionProcessConfigurePanId_7
//  947     {
//  948       uiLcdCursorCol--;
        MOVX      A,@DPTR
        DEC       A
        SJMP      ??CrossCallReturnLabel_1
//  949     }
//  950   }
//  951   else if (keys & UI_KEY_SW_5_PRESSED)
??uiActionProcessConfigurePanId_8:
        MOV       A,R2
        ANL       A,#0x4
        JZ        ??uiActionProcessConfigurePanId_7
//  952   {
//  953     osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &zgConfigPANID); //todo: check and display result of osal_nv_write()
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#-0x7d
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V0,R2
        MOV       ?V1,R3
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V2,#zgConfigPANID & 0xff
        MOV       ?V3,#(zgConfigPANID >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7d
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  954 
//  955     uiCurrentState = UI_STATE_SET_PAN_ID_0;
        MOV       DPTR,#uiCurrentState
        MOV       A,#0xd
        LCALL     ?Subroutine5 & 0xFFFF
//  956     
//  957     uiLcdCursorLine = 0xFF;
//  958   }
??CrossCallReturnLabel_1:
        MOVX      @DPTR,A
//  959 }
??uiActionProcessConfigurePanId_7:
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock22

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function uiActionProcessConfigureChannels
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function uiActionProcessConfigurePanId
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function uiActionProcessPrepareInstallCode
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        MOV       DPTR,#uiLcdCursorLine
        MOV       A,#-0x1
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26
//  960 
//  961 /*********************************************************************
//  962  * @fn          uiActionProcessPrepareInstallCode
//  963  *
//  964  * @brief       State-machine action for editing the install-code and the install-code address
//  965  *
//  966  * @param       keys - the keypress code that triggered the call to this function
//  967  *
//  968  * @return      none
//  969  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  970 static void uiActionProcessPrepareInstallCode(uint16 keys)
uiActionProcessPrepareInstallCode:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function uiActionProcessPrepareInstallCode
        CODE
//  971 {
        FUNCALL uiActionProcessPrepareInstallCode, bdb_GenerateInstallCodeCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uiActionProcessPrepareInstallCode, bdb_GenerateInstallCodeCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
//  972   static uint8 * pCurrentModifiedField;
//  973   static uint8 CurrentModifiedFieldLen;
//  974   static bool CurrentModifiedFieldIsBigEndian;
//  975   
//  976   static uint8 index;
//  977 
//  978   uint8 shift;
//  979   uint8 digit;
//  980   uint8 bufIndex;
//  981   uint16 crc;
//  982 
//  983   uiLcdCursorState = 0;
        MOV       DPTR,#uiLcdCursorState
        CLR       A
        MOVX      @DPTR,A
//  984   
//  985   if (keys & UI_KEY_SW_5_RELEASED)
        MOV       A,R3
        ANL       A,#0x4
        JZ        ??uiActionProcessPrepareInstallCode_0
//  986   {
//  987     index = 0;
        MOV       DPTR,#??index
        LCALL     ?Subroutine9 & 0xFFFF
//  988     
//  989 #if (ZG_BUILD_COORDINATOR_TYPE)
//  990     if (uiCurrentState == UI_STATE_SET_INST_CODE_ADDR_1)
??CrossCallReturnLabel_87:
        XRL       A,#0x17
        JNZ       ??uiActionProcessPrepareInstallCode_1
        INC       DPTR
        MOVX      A,@DPTR
??uiActionProcessPrepareInstallCode_1:
        MOV       DPTR,#??pCurrentModifiedField
        JNZ       ??uiActionProcessPrepareInstallCode_2
//  991     {
//  992       pCurrentModifiedField = uiInstallCodeAddr;
        MOV       A,#uiInstallCodeAddr & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(uiInstallCodeAddr >> 8) & 0xff
        MOVX      @DPTR,A
//  993       CurrentModifiedFieldLen = sizeof(uiInstallCodeAddr);
        MOV       DPTR,#??CurrentModifiedFieldLen
        MOV       A,#0x8
        MOVX      @DPTR,A
//  994       CurrentModifiedFieldIsBigEndian = FALSE;
        MOV       DPTR,#??CurrentModifiedFieldIsBigEndian
        CLR       A
        SJMP      ??CrossCallReturnLabel_77
//  995     }
//  996     else
//  997 #endif
//  998     {
//  999       pCurrentModifiedField = uiInstallCode;
??uiActionProcessPrepareInstallCode_2:
        MOV       A,#uiInstallCode & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(uiInstallCode >> 8) & 0xff
        MOVX      @DPTR,A
// 1000       CurrentModifiedFieldLen = INSTALL_CODE_LEN;
        MOV       DPTR,#??CurrentModifiedFieldLen
        MOV       A,#0x10
        MOVX      @DPTR,A
// 1001       CurrentModifiedFieldIsBigEndian = TRUE;
        MOV       DPTR,#??CurrentModifiedFieldIsBigEndian
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1002 
// 1003       crc = bdb_GenerateInstallCodeCRC(uiInstallCode);
        ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
        LCALL     ?Subroutine40 & 0xFFFF
// 1004       uiInstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
// 1005       uiInstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
// 1006     }
// 1007   }
??CrossCallReturnLabel_77:
        MOVX      @DPTR,A
// 1008 
// 1009   if ((keys & UI_KEY_SW_1_PRESSED) || (keys & UI_KEY_SW_3_PRESSED))
??uiActionProcessPrepareInstallCode_0:
        MOV       DPTR,#??index
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,R6
        ANL       A,#0x11
        MOV       R4,A
        JNZ       $+5
        LJMP      ??uiActionProcessPrepareInstallCode_3 & 0xFFFF
// 1010   {
// 1011     if(pCurrentModifiedField == uiInstallCode)
        MOV       A,R2
        ADD       A,#0x1
        MOV       ?V0,A
        CLR       A
        ADDC      A,#0x0
        MOV       ?V1,A
        MOV       DPTR,#??pCurrentModifiedField
        MOVX      A,@DPTR
        XRL       A,#uiInstallCode & 0xff
        JNZ       ??uiActionProcessPrepareInstallCode_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#(uiInstallCode >> 8) & 0xff
??uiActionProcessPrepareInstallCode_4:
        MOV       DPTR,#??CurrentModifiedFieldIsBigEndian
        JNZ       ??uiActionProcessPrepareInstallCode_5
// 1012     {
// 1013       shift = 4 * ((CurrentModifiedFieldIsBigEndian ? (index + 1) : index ) % 2);
        MOVX      A,@DPTR
        JZ        ??uiActionProcessPrepareInstallCode_6
        SJMP      ??uiActionProcessPrepareInstallCode_7
// 1014     }
// 1015     else
// 1016     {
// 1017       shift = 4 * ((CurrentModifiedFieldIsBigEndian ? index : (index + 1)) % 2);
??uiActionProcessPrepareInstallCode_5:
        MOVX      A,@DPTR
        JZ        ??uiActionProcessPrepareInstallCode_7
??uiActionProcessPrepareInstallCode_6:
        MOV       A,R2
        MOV       R0,A
        MOV       R1,#0x0
        SJMP      ??uiActionProcessPrepareInstallCode_8
??uiActionProcessPrepareInstallCode_7:
        MOV       R0,?V0
        MOV       R1,?V1
??uiActionProcessPrepareInstallCode_8:
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     ?S_DIV_MOD
        MOV       A,R2
        RLC       A
        RLC       A
        ANL       A,#0xfc
        MOV       R2,A
// 1018     }
// 1019     bufIndex = (CurrentModifiedFieldIsBigEndian ? (index / 2) : (CurrentModifiedFieldLen - 1 - (index / 2)));
        MOV       DPTR,#??index
        MOVX      A,@DPTR
        CLR       C
        RRC       A
        MOV       R0,A
        MOV       DPTR,#??CurrentModifiedFieldIsBigEndian
        MOVX      A,@DPTR
        JZ        ??uiActionProcessPrepareInstallCode_9
        MOV       ?V0,R0
        SJMP      ??uiActionProcessPrepareInstallCode_10
??uiActionProcessPrepareInstallCode_9:
        MOV       DPTR,#??CurrentModifiedFieldLen
        MOVX      A,@DPTR
        DEC       A
        CLR       C
        SUBB      A,R0
        MOV       ?V0,A
// 1020     digit = (pCurrentModifiedField[bufIndex] >> shift) & 0xF;
??uiActionProcessPrepareInstallCode_10:
        MOV       R0,?V0
        MOV       DPTR,#??pCurrentModifiedField
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_47:
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       ?V2,A
        MOV       ?V3,#0x0
        MOV       A,R2
        MOV       R0,#?V2
        LCALL     ?SS_SHR
        MOV       A,?V2
        ANL       A,#0xf
        MOV       R0,A
// 1021 
// 1022     if (keys & UI_KEY_SW_1_PRESSED)
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JNC       ??uiActionProcessPrepareInstallCode_11
// 1023     {
// 1024       if (digit < 15)
        MOV       A,R0
        CLR       C
        SUBB      A,#0xf
        JNC       ??uiActionProcessPrepareInstallCode_12
// 1025       {
// 1026         digit++;
        INC       R0
        SJMP      ??uiActionProcessPrepareInstallCode_13
// 1027       }
// 1028       else
// 1029       {
// 1030         digit = 0;
??uiActionProcessPrepareInstallCode_12:
        MOV       R0,#0x0
        SJMP      ??uiActionProcessPrepareInstallCode_13
// 1031       }
// 1032     }
// 1033     else if (keys & UI_KEY_SW_3_PRESSED)
??uiActionProcessPrepareInstallCode_11:
        ANL       A,#0x10
        JZ        ??uiActionProcessPrepareInstallCode_13
// 1034     {
// 1035       if (digit > 0)
        MOV       A,R0
        JZ        ??uiActionProcessPrepareInstallCode_14
// 1036       {
// 1037         digit--;
        DEC       R0
        SJMP      ??uiActionProcessPrepareInstallCode_13
// 1038       }
// 1039       else
// 1040       {
// 1041         digit = 15;
??uiActionProcessPrepareInstallCode_14:
        MOV       R0,#0xf
// 1042       }
// 1043     }
// 1044     
// 1045     pCurrentModifiedField[bufIndex] &= ~((uint32)0xF << shift);
// 1046     pCurrentModifiedField[bufIndex] |= (uint32)digit << shift;
??uiActionProcessPrepareInstallCode_13:
        MOV       ?V4,R0
        CLR       A
        MOV       ?V5,A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       A,R2
        MOV       R0,#?V4
        LCALL     ?L_SHL
        MOV       R1,?V4
        MOV       ?V4,#0xf
        MOV       ?V5,A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       A,R2
        MOV       R0,#?V4
        LCALL     ?L_SHL
        MOV       A,?V4
        CPL       A
        ANL       A,R3
        ORL       A,R1
        MOVX      @DPTR,A
// 1047     uiLcdCursorState = 1;
        MOV       DPTR,#uiLcdCursorState
        MOV       A,#0x1
        SJMP      ??uiActionProcessPrepareInstallCode_15
// 1048   }
// 1049   else if (keys & UI_KEY_SW_2_PRESSED)
??uiActionProcessPrepareInstallCode_3:
        MOV       A,R6
        ANL       A,#0x2
        JZ        ??uiActionProcessPrepareInstallCode_16
// 1050   {
// 1051     if (index < CurrentModifiedFieldLen * 2 - 1)
        MOV       DPTR,#??CurrentModifiedFieldLen
        MOVX      A,@DPTR
        ADD       A,0xE0 /* A   */
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,R0
        ADD       A,#-0x1
        DEC       R0
        MOV       A,R1
        ADDC      A,#-0x1
        MOV       R1,A
        CLR       C
        MOV       A,R2
        SUBB      A,R0
        CLR       A
        SUBB      A,R1
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        MOV       DPTR,#??index
        JNC       ??uiActionProcessPrepareInstallCode_17
// 1052     {
// 1053       index++;
        MOVX      A,@DPTR
        INC       A
        SJMP      ??uiActionProcessPrepareInstallCode_15
// 1054     }
// 1055     else
// 1056     {
// 1057       index = 0;
??uiActionProcessPrepareInstallCode_17:
        CLR       A
        SJMP      ??uiActionProcessPrepareInstallCode_15
// 1058     }
// 1059   }
// 1060   else if (keys & UI_KEY_SW_4_PRESSED)
??uiActionProcessPrepareInstallCode_16:
        MOV       A,R6
        ANL       A,#0x8
        JZ        ??uiActionProcessPrepareInstallCode_18
// 1061   {
// 1062     if (index > 0)
        MOVX      A,@DPTR
        JZ        ??uiActionProcessPrepareInstallCode_19
// 1063     {
// 1064       index --;
        DEC       A
        SJMP      ??uiActionProcessPrepareInstallCode_15
// 1065     }
// 1066     else
// 1067     {
// 1068       index = (CurrentModifiedFieldLen * 2 - 1);
??uiActionProcessPrepareInstallCode_19:
        MOV       DPTR,#??CurrentModifiedFieldLen
        MOVX      A,@DPTR
        CLR       C
        RLC       A
        DEC       A
        MOV       DPTR,#??index
??uiActionProcessPrepareInstallCode_15:
        MOVX      @DPTR,A
// 1069     }
// 1070   }
// 1071   
// 1072   uiLcdCursorLine = index / LCD_LINE_LENGTH;
??uiActionProcessPrepareInstallCode_18:
        MOV       DPTR,#??index
        MOVX      A,@DPTR
        SWAP      A
        ANL       A,#0xf
        MOV       DPTR,#uiLcdCursorLine
        MOVX      @DPTR,A
// 1073   uiLcdCursorCol = index % LCD_LINE_LENGTH;
        MOV       DPTR,#??index
        MOVX      A,@DPTR
        ANL       A,#0xf
        MOV       DPTR,#uiLcdCursorCol
        LCALL     ??Subroutine45_0 & 0xFFFF
// 1074 
// 1075   if ((uiCurrentState == UI_STATE_SET_INST_CODE_1) && ((keys & UI_KEY_SW_1_PRESSED) || (keys & UI_KEY_SW_3_PRESSED)))
??CrossCallReturnLabel_88:
        XRL       A,#0x16
        JNZ       ??uiActionProcessPrepareInstallCode_20
        INC       DPTR
        MOVX      A,@DPTR
??uiActionProcessPrepareInstallCode_20:
        JNZ       ??CrossCallReturnLabel_59
        MOV       A,R4
        JZ        ??CrossCallReturnLabel_59
// 1076   {
// 1077     crc = bdb_GenerateInstallCodeCRC(uiInstallCode);
        ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
        LCALL     ?Subroutine30 & 0xFFFF
// 1078     uiInstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
// 1079     uiInstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
// 1080   }
// 1081 
// 1082   if (keys & UI_KEY_SW_5_PRESSED)
??CrossCallReturnLabel_59:
        MOV       A,R6
        ANL       A,#0x4
        JZ        ??uiActionProcessPrepareInstallCode_21
// 1083   {
// 1084 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1085     if (uiCurrentState == UI_STATE_SET_INST_CODE_ADDR_1)
        MOV       DPTR,#uiCurrentState
        MOVX      A,@DPTR
        XRL       A,#0x17
        JNZ       ??uiActionProcessPrepareInstallCode_22
        INC       DPTR
        MOVX      A,@DPTR
??uiActionProcessPrepareInstallCode_22:
        MOV       DPTR,#uiCurrentState
        JNZ       ??uiActionProcessPrepareInstallCode_23
// 1086     {
// 1087       uiCurrentState = UI_STATE_SET_INST_CODE_ADDR_0;
        MOV       A,#0x13
        SJMP      ??uiActionProcessPrepareInstallCode_24
// 1088     }
// 1089     else
// 1090 #endif
// 1091     {
// 1092       uiCurrentState = UI_STATE_SET_INST_CODE_0;
??uiActionProcessPrepareInstallCode_23:
        MOV       A,#0x12
// 1093     }
// 1094     
// 1095     uiLcdCursorLine = 0xFF;
// 1096   }
??uiActionProcessPrepareInstallCode_24:
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        MOVX      @DPTR,A
// 1097 }
??uiActionProcessPrepareInstallCode_21:
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock27

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function uiActionSetInstallCode
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function uiActionProcessPrepareInstallCode
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_78:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function uiActionProcessPrepareInstallCode
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function uiActionSetInstallCode
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_58
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-4
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function uiActionProcessPrepareInstallCode
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_59
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-4
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        MOV       R2,#uiInstallCode & 0xff
        MOV       R3,#(uiInstallCode >> 8) & 0xff
        LCALL     `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
        MOV       A,R2
        MOV       DPTR,#uiInstallCode + 16
        MOVX      @DPTR,A
        MOV       A,R3
        INC       DPTR
        RET
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function uiUintToString
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function uiActionProcessPrepareInstallCode
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       DPL,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??pCurrentModifiedField:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??CurrentModifiedFieldLen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??CurrentModifiedFieldIsBigEndian:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??index:
        DS 1
        REQUIRE __INIT_XDATA_Z
// 1098 
// 1099 /*********************************************************************
// 1100  * @fn          uiActionConfigureEnables
// 1101  *
// 1102  * @brief       State-machine action for toggling various configurations on and off
// 1103  *
// 1104  * @param       keys - the keypress code that triggered the call to this function
// 1105  *
// 1106  * @return      none
// 1107  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1108 static void uiActionConfigureEnables(uint16 keys)
uiActionConfigureEnables:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function uiActionConfigureEnables
        CODE
// 1109 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1110 #if defined ( BDB_TL_TARGET )
// 1111   static uint32 TouchlinkTimeoutIncements = TOUCHLINK_TIMEOUT_INCREMENTS_INITIAL;
// 1112 #endif
// 1113 
// 1114   switch (uiCurrentState)
        MOV       DPTR,#uiCurrentState
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for uiActionConfigureEnables>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        8
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionConfigureEnables_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionConfigureEnables_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionConfigureEnables_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionConfigureEnables_3
        CODE
// 1115   {
// 1116 #ifdef BDB_TL_TARGET
// 1117     case UI_STATE_TOUCHLINK_TARGET:
// 1118       if (keys & UI_KEY_SW_1_PRESSED)
// 1119       {
// 1120         if (uiTouchlinkTargetTimeout < TOUCHLINK_TARGET_PERPETUAL - TouchlinkTimeoutIncements)
// 1121         {
// 1122           uiTouchlinkTargetTimeout += TouchlinkTimeoutIncements;
// 1123         }
// 1124         else
// 1125         {
// 1126           uiTouchlinkTargetTimeout = TOUCHLINK_TARGET_PERPETUAL;
// 1127         }
// 1128       }
// 1129       else if ((keys & UI_KEY_SW_3_PRESSED) && (uiTouchlinkTargetTimeout >= TouchlinkTimeoutIncements))
// 1130       {
// 1131         if ((uiTouchlinkTargetTimeout % TouchlinkTimeoutIncements) != 0)
// 1132         {
// 1133           uiTouchlinkTargetTimeout -= uiTouchlinkTargetTimeout % TouchlinkTimeoutIncements;
// 1134         }
// 1135         else
// 1136         {
// 1137           uiTouchlinkTargetTimeout -= TouchlinkTimeoutIncements;
// 1138         }
// 1139       }
// 1140 
// 1141       if ((keys & (UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED)) && ((uiTouchlinkTargetTimeout > 0) && (uiTouchlinkTargetTimeout < TOUCHLINK_TARGET_PERPETUAL)))
// 1142       {
// 1143         osal_start_timerEx(uiAppTaskId, uiKeyAutoRepeatEvent, uiAutoKeyRepeatDelay);
// 1144         uiAutoKeyRepeatDelay = 100;
// 1145         if (TouchlinkTimeoutIncements < TOUCHLINK_TIMEOUT_INCREMENTS_MAX)
// 1146         {
// 1147           uiAutoKeyRepeatCount++;
// 1148           if (uiAutoKeyRepeatCount == 3)
// 1149           {
// 1150             uiAutoKeyRepeatCount = 0;
// 1151             TouchlinkTimeoutIncements *= 2;
// 1152           }
// 1153         }
// 1154       }
// 1155       else
// 1156       {
// 1157         osal_stop_timerEx(uiAppTaskId, uiKeyAutoRepeatEvent);
// 1158         uiAutoKeyRepeatDelay = 500;
// 1159         uiAutoKeyRepeatCount = 0;
// 1160         TouchlinkTimeoutIncements = 1000;
// 1161       }
// 1162       break;
// 1163     case UI_STATE_TOUCHLINK_STEALING:
// 1164       bdb_TouchlinkSetAllowStealing( ! bdb_TouchlinkGetAllowStealing() );
// 1165       break;
// 1166 #endif
// 1167 #ifdef BDB_TL_INITIATOR
// 1168     case UI_STATE_TOUCHLINK_INITIATOR:
// 1169       uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_INITIATOR_TL;
// 1170       break;
// 1171 #endif
// 1172     case UI_STATE_NETWORK_FORMATION:
// 1173       uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_NWK_FORMATION;
??uiActionConfigureEnables_1:
        MOV       DPTR,#uiSelectedBdbComissioningModes
        MOVX      A,@DPTR
        XRL       A,#0x4
        SJMP      ??uiActionConfigureEnables_4
// 1174       break;
// 1175     case UI_STATE_NETWORK_STEERING:
// 1176       uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_NWK_STEERING;
??uiActionConfigureEnables_2:
        MOV       DPTR,#uiSelectedBdbComissioningModes
        MOVX      A,@DPTR
        XRL       A,#0x2
        SJMP      ??uiActionConfigureEnables_4
// 1177       break;
// 1178     case UI_STATE_FINDING_AND_BINDING:
// 1179       uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_FINDING_BINDING;
??uiActionConfigureEnables_3:
        MOV       DPTR,#uiSelectedBdbComissioningModes
        MOVX      A,@DPTR
        XRL       A,#0x8
??uiActionConfigureEnables_4:
        MOVX      @DPTR,A
// 1180       break;
// 1181   }
// 1182 }
??uiActionConfigureEnables_0:
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock38
// 1183 
// 1184 /*********************************************************************
// 1185  * @fn          uiActionResetToFactoryNew
// 1186  *
// 1187  * @brief       State-machine action for resetting the device to factory new
// 1188  *
// 1189  * @param       keys - the keypress code that triggered the call to this function
// 1190  *
// 1191  * @return      none
// 1192  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1193 static void uiActionResetToFactoryNew(uint16 keys)
uiActionResetToFactoryNew:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function uiActionResetToFactoryNew
        CODE
// 1194 {
        FUNCALL uiActionResetToFactoryNew, bdb_resetLocalAction
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1195   uiResetInitiated = TRUE;
        MOV       DPTR,#uiResetInitiated
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1196   bdb_resetLocalAction();
        ; Setup parameters for call to function bdb_resetLocalAction
        LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
// 1197 }
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock39
// 1198   
// 1199 /*********************************************************************
// 1200  * @fn          UI_MainStateMachine
// 1201  *
// 1202  * @brief       This is the main UI state machine engine.
// 1203  *              This function should be called from the application's key handler, and also from its event-loop
// 1204  *              for processing the key-repress event.
// 1205  *
// 1206  * @param       current_keys - a bitmask of the keys that are currently pressed, or 0xFFFF when this function
// 1207  *              is invoked to handle key auto-repeat.
// 1208  *
// 1209  * @return      none
// 1210  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1211 void UI_MainStateMachine( uint16 current_keys ) //argument is uint16 to allow 8 bits for the keys (for future use), and another unique value to mark a re-press of the previous keys.
UI_MainStateMachine:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function UI_MainStateMachine
        CODE
// 1212 {
        FUNCALL UI_MainStateMachine, UI_UpdateLcd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1213   static byte PrevKeys = 0; //holds the keys that were pressed during the previous time this function was called. (Does not hold the keys that were released.)
// 1214 
// 1215   uint8 SavedLcdCursorLine = uiLcdCursorLine;
        MOV       DPTR,#uiLcdCursorLine
        MOVX      A,@DPTR
        MOV       ?V0,A
// 1216   bool LcdUpdateIsRequired = FALSE;
// 1217   uint16 keys; //will hold the bitmask of the currently pressed keys at the lower 8 bits, and the keys that have just been released at the higher 8 bits.
// 1218 
// 1219   if (uiResetInitiated)
        MOV       DPTR,#uiResetInitiated
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??UI_MainStateMachine_0 & 0xFFFF
// 1220   {
// 1221     return;
// 1222   }
// 1223   
// 1224   if (current_keys == UI_KEY_AUTO_PRESSED)
        MOV       DPTR,#??PrevKeys
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??UI_MainStateMachine_1
        MOV       A,#-0x1
        XRL       A,R3
??UI_MainStateMachine_1:
        JNZ       ??UI_MainStateMachine_2
// 1225   {
// 1226     keys = PrevKeys;
        MOV       A,R0
        MOV       R6,A
        MOV       R7,#0x0
        SJMP      ??UI_MainStateMachine_3
// 1227   }
// 1228   else
// 1229   {
// 1230     keys = (current_keys | (((PrevKeys ^ current_keys) & PrevKeys) << 8));
??UI_MainStateMachine_2:
        MOV       A,R0
        XRL       A,R2
        ANL       A,R0
        MOV       R1,A
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        ORL       A,R1
        MOV       R7,A
// 1231   }
// 1232   
// 1233   uiLcdCursorLine = 0xFF;
??UI_MainStateMachine_3:
        MOV       DPTR,#uiLcdCursorLine
        MOV       A,#-0x1
        LCALL     ??Subroutine45_0 & 0xFFFF
// 1234 
// 1235   if ((keys & UI_KEY_SW_2_PRESSED) && (uiStates[uiCurrentState].next_state != UI_STATE_UNCHANGED))
??CrossCallReturnLabel_89:
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       B,#0x6
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x6
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       DPTR,#uiStates
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R6
        ANL       A,#0x2
        JZ        ??UI_MainStateMachine_4
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,#-0x1
        XRL       A,R2
        JZ        ??UI_MainStateMachine_4
// 1236   {
// 1237     if (uiStates[uiCurrentState].next_state == UI_STATE_DEFAULT_MOVE)
        MOV       A,#-0x2
        XRL       A,R2
        JNZ       ??UI_MainStateMachine_5
// 1238     {
// 1239       uiCurrentState++;
        MOV       DPTR,#uiCurrentState
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        SJMP      ??UI_MainStateMachine_6
// 1240     }
// 1241     else
// 1242     {
// 1243       uiCurrentState = uiStates[uiCurrentState].next_state;
// 1244     }
// 1245     
// 1246     LcdUpdateIsRequired = TRUE;
// 1247   }
// 1248   else if ((keys & UI_KEY_SW_4_PRESSED) && (uiStates[uiCurrentState].prev_state != UI_STATE_UNCHANGED))
??UI_MainStateMachine_4:
        MOV       A,R6
        ANL       A,#0x8
        JZ        ??UI_MainStateMachine_7
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,#-0x1
        XRL       A,R2
        JZ        ??UI_MainStateMachine_7
// 1249   {
// 1250     if (uiStates[uiCurrentState].prev_state == UI_STATE_DEFAULT_MOVE)
        MOV       A,#-0x2
        XRL       A,R2
        JNZ       ??UI_MainStateMachine_5
// 1251     {
// 1252       uiCurrentState--;
        MOV       DPTR,#uiCurrentState
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        SJMP      ??UI_MainStateMachine_6
// 1253     }
// 1254     else
// 1255     {
// 1256       uiCurrentState = uiStates[uiCurrentState].prev_state;
??UI_MainStateMachine_5:
        MOV       A,R2
        MOV       DPTR,#uiCurrentState
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
??UI_MainStateMachine_6:
        MOVX      @DPTR,A
// 1257     }
// 1258     
// 1259     LcdUpdateIsRequired = TRUE;
// 1260   }
// 1261   else if ((keys & uiStates[uiCurrentState].keys_mask) && (uiStates[uiCurrentState].state_func != NULL))
// 1262   {
// 1263     uiStates[uiCurrentState].state_func(keys);
// 1264     
// 1265     LcdUpdateIsRequired = TRUE;
// 1266   }
// 1267 
// 1268   if (LcdUpdateIsRequired)
// 1269   {
// 1270     UI_UpdateLcd();
??UI_MainStateMachine_8:
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
        SJMP      ??UI_MainStateMachine_9
// 1271   }
??UI_MainStateMachine_7:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,R6
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,R7
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??UI_MainStateMachine_10
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_103:
        MOV       DPL,R0
        MOV       DPH,A
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??UI_MainStateMachine_10
        ; Setup parameters for indirect call
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ?CALL_IND
        SJMP      ??UI_MainStateMachine_8
// 1272   else
// 1273   {
// 1274     uiLcdCursorLine = SavedLcdCursorLine;
??UI_MainStateMachine_10:
        MOV       A,?V0
        MOV       DPTR,#uiLcdCursorLine
        MOVX      @DPTR,A
// 1275   }
// 1276 
// 1277   PrevKeys = keys & 0xFF; //only remember the keys that are currently pressed. Released keys are irrelevant. the 0xFF is not needed, since the target is uint8, but it is there just so it is clear that this assignment of uint16 into uint8 is intentional.
??UI_MainStateMachine_9:
        MOV       A,R6
        MOV       DPTR,#??PrevKeys
        MOVX      @DPTR,A
// 1278 }
??UI_MainStateMachine_0:
          CFI EndBlock cfiBlock40
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock41

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function uiActionProcessConfigureChannels
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function uiActionProcessPrepareInstallCode
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        CLR       A
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function uiActionProcessPrepareInstallCode
          CFI Conditional ??CrossCallReturnLabel_88
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function UI_MainStateMachine
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function uiActionProcessConfigureChannels
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function uiActionProcessPrepareInstallCode
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOVX      @DPTR,A
        MOV       DPTR,#uiCurrentState
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??PrevKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z
// 1279 
// 1280 /*********************************************************************
// 1281  * @fn          UI_UpdateComissioningStatus
// 1282  *
// 1283  * @brief       Update the comissioning status to be displayed when the respective menu-screen is selected.
// 1284  *              This function should be called from the application, from within the function registered to
// 1285  *              be notified about these events.
// 1286  *
// 1287  * @param       bdbCommissioningModeMsg - comissioning mode and state information
// 1288  *
// 1289  * @return      none
// 1290  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1291 void UI_UpdateComissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
UI_UpdateComissioningStatus:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function UI_UpdateComissioningStatus
        CODE
// 1292 {
        FUNCALL UI_UpdateComissioningStatus, UI_UpdateLcd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1293   uiCommissioningIsInitializing = FALSE;
        MOV       DPTR,#uiCommissioningIsInitializing
        CLR       A
        MOVX      @DPTR,A
// 1294   
// 1295   switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??UI_UpdateComissioningStatus_0
        DEC       A
        JZ        ??UI_UpdateComissioningStatus_1
        DEC       A
        JZ        ??UI_UpdateComissioningStatus_2
        DEC       A
        JZ        ??UI_UpdateComissioningStatus_3
        SJMP      ??UI_UpdateComissioningStatus_4
// 1296   {
// 1297     case BDB_COMMISSIONING_FORMATION:
// 1298       uiCommissioningStateStr = "NF";
??UI_UpdateComissioningStatus_2:
        MOV       DPTR,#uiCommissioningStateStr
        MOV       A,#`?<Constant "NF">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "NF">` >> 8) & 0xff
        MOVX      @DPTR,A
// 1299       if ((bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) && (uiCommissioningNetworkConnrctionStr == NULL))
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??UI_UpdateComissioningStatus_4
        MOV       DPTR,#uiCommissioningNetworkConnrctionStr
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_97:
        JNZ       ??UI_UpdateComissioningStatus_5
// 1300       {
// 1301         uiCommissioningNetworkConnrctionStr = "FORM";
        MOV       DPTR,#uiCommissioningNetworkConnrctionStr
        MOV       A,#`?<Constant "FORM">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "FORM">` >> 8) & 0xff
        SJMP      ??UI_UpdateComissioningStatus_6
// 1302       }
// 1303       break;
// 1304     case BDB_COMMISSIONING_NWK_STEERING:
// 1305       uiCommissioningStateStr = "NS";
??UI_UpdateComissioningStatus_1:
        MOV       DPTR,#uiCommissioningStateStr
        MOV       A,#`?<Constant "NS">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "NS">` >> 8) & 0xff
        MOVX      @DPTR,A
// 1306       if ((bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) && (uiCommissioningNetworkConnrctionStr == NULL))
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??UI_UpdateComissioningStatus_4
        MOV       DPTR,#uiCommissioningNetworkConnrctionStr
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_98:
        JNZ       ??UI_UpdateComissioningStatus_5
// 1307       {
// 1308         uiCommissioningNetworkConnrctionStr = "JOIN";
        MOV       DPTR,#uiCommissioningNetworkConnrctionStr
        MOV       A,#`?<Constant "JOIN">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "JOIN">` >> 8) & 0xff
??UI_UpdateComissioningStatus_6:
        MOVX      @DPTR,A
        SJMP      ??UI_UpdateComissioningStatus_5
// 1309       }
// 1310       break;
// 1311     case BDB_COMMISSIONING_FINDING_BINDING:
// 1312       uiCommissioningStateStr = "FB";
??UI_UpdateComissioningStatus_3:
        MOV       DPTR,#uiCommissioningStateStr
        MOV       A,#`?<Constant "FB">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "FB">` >> 8) & 0xff
        SJMP      ??UI_UpdateComissioningStatus_7
// 1313       break;
// 1314     case BDB_COMMISSIONING_INITIALIZATION:
// 1315       uiCommissioningStateStr = "IN";
??UI_UpdateComissioningStatus_0:
        MOV       DPTR,#uiCommissioningStateStr
        MOV       A,#`?<Constant "IN">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "IN">` >> 8) & 0xff
??UI_UpdateComissioningStatus_7:
        MOVX      @DPTR,A
// 1316       break;
// 1317 #if ZG_BUILD_ENDDEVICE_TYPE    
// 1318     case BDB_COMMISSIONING_PARENT_LOST:
// 1319       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
// 1320       {
// 1321         uiCommissioningStateStr = "--";
// 1322       }
// 1323       else
// 1324       {
// 1325         uiCommissioningStateStr = "PL";
// 1326       }
// 1327       break;
// 1328 #endif
// 1329 #if BDB_TOUCHLINK_CAPABILITY_ENABLED
// 1330     case BDB_COMMISSIONING_TOUCHLINK:
// 1331       uiCommissioningStateStr = "TL";
// 1332       if ((bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) && (uiCommissioningNetworkConnrctionStr == NULL))
// 1333       {
// 1334         uiCommissioningNetworkConnrctionStr = "TCHL";
// 1335       }
// 1336       break;
// 1337 #endif
// 1338   }
// 1339 
// 1340   if ((bdbCommissioningModeMsg->bdbCommissioningStatus != BDB_COMMISSIONING_IN_PROGRESS) && (bdbCommissioningModeMsg->bdbRemainingCommissioningModes == 0))
??UI_UpdateComissioningStatus_4:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??UI_UpdateComissioningStatus_8
??UI_UpdateComissioningStatus_5:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       ??UI_UpdateComissioningStatus_8
// 1341   {
// 1342     uiCommissioningStateStr = "--";
        MOV       DPTR,#uiCommissioningStateStr
        MOV       A,#`?<Constant "--">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "--">` >> 8) & 0xff
        MOVX      @DPTR,A
// 1343 
// 1344     uiComissioningIsActive = FALSE;
        MOV       DPTR,#uiComissioningIsActive
        CLR       A
        MOVX      @DPTR,A
// 1345   }
// 1346   
// 1347   UI_UpdateLcd();
??UI_UpdateComissioningStatus_8:
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
// 1348 }
          CFI EndBlock cfiBlock50
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock51
// 1349 
// 1350 
// 1351 void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
// 1352 
// 1353 
// 1354 /*********************************************************************
// 1355  * @fn          UI_UpdateLcd
// 1356  *
// 1357  * @brief       Update the LCD display.
// 1358  *              This function should be called by the application when handling the display-auto-refresh event, and
// 1359  *              also whenevet an action that may change the information being displayed is executed.
// 1360  *
// 1361  * @param       none
// 1362  *
// 1363  * @return      none
// 1364  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1365 void UI_UpdateLcd( void )
UI_UpdateLcd:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function UI_UpdateLcd
        CODE
// 1366 {
        FUNCALL UI_UpdateLcd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, NLME_GetRemainingPermitJoiningDuration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, bdb_GetFBInitiatorStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 80, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiArrayToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiArrayToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiArrayToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiArrayToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiArrayToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiArrayToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiArrayToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiCreateChannelMaskString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiCreateChannelMaskString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiCreateChannelMaskString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiCreateChannelMaskString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 80, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, HalLcd_HW_Clear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 58
        MOV       A,#-0x3a
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1367   char * line[3];
// 1368   char LineBuf[3][LCD_CC2538_PREFIX_COUNT + LCD_LINE_LENGTH + 1];
// 1369   uint8 i;
// 1370   uint8 *xad;
// 1371   bool LcdAutoRefreshRequired = FALSE;
        MOV       R6,#0x0
// 1372   uint8 FBRemainingTimeLeft;
// 1373   uint8 PermitJoinDuration;
// 1374   
// 1375   LineBuf[0][LCD_CC2538_PREFIX_COUNT] = 0;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1376   LineBuf[1][LCD_CC2538_PREFIX_COUNT] = 0;
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1377   LineBuf[2][LCD_CC2538_PREFIX_COUNT] = 0;
        MOV       A,#0x29
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1378   line[0] = LineBuf[0] + LCD_CC2538_PREFIX_COUNT;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP100_8
        LCALL     ?Subroutine8 & 0xFFFF
// 1379   line[1] = LineBuf[1] + LCD_CC2538_PREFIX_COUNT;
??CrossCallReturnLabel_149:
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine53_0 & 0xFFFF
// 1380   line[2] = LineBuf[2] + LCD_CC2538_PREFIX_COUNT;
??CrossCallReturnLabel_143:
        MOV       A,#0x29
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine53_0 & 0xFFFF
// 1381 
// 1382 #ifdef HAL_BOARD_CC2538
// 1383   for (i = 0; i < LCD_CC2538_PREFIX_COUNT; i++)
// 1384   {
// 1385     LineBuf[0][i] = ' ';
// 1386     LineBuf[1][i] = ' ';
// 1387     LineBuf[2][i] = ' ';
// 1388   }
// 1389 #endif
// 1390 
// 1391   osal_stop_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent);
??CrossCallReturnLabel_144:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       DPTR,#uiLcdAutoUpdateEvent
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV       DPTR,#uiAppTaskId
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1392 
// 1393   if (uiStates == uiAppStatesMain)
        MOV       DPTR,#uiStates
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_52:
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??UI_UpdateLcd_0
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??UI_UpdateLcd_0:
        JNZ       ??UI_UpdateLcd_1
// 1394   {
// 1395     if (uiCurrentState == UI_STATE_BACK_FROM_APP_MENU)
        MOV       DPTR,#uiCurrentState
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_99:
        JNZ       $+5
        LJMP      ??UI_UpdateLcd_2 & 0xFFFF
// 1396     {
// 1397       line[2] = "<     BACK     >";
// 1398     }
// 1399     else
// 1400     {
// 1401       uiAppUpdateLcd(uiCurrentState, line);
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPTR,#uiCurrentState
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#uiAppUpdateLcd
        LCALL     ?Subroutine24 & 0xFFFF
// 1402     }
// 1403   }
??CrossCallReturnLabel_43:
        LCALL     ?CALL_IND
        LJMP      ??UI_UpdateLcd_3 & 0xFFFF
// 1404   else
// 1405   {
// 1406     switch (uiCurrentState)
??UI_UpdateLcd_1:
        MOV       R2,#`?<Constant "1234567890123456">` & 0xff
        MOV       R3,#(`?<Constant "1234567890123456">` >> 8) & 0xff
        MOV       ?V4,#`?<Constant "    0x          ">` & 0xff
        MOV       ?V5,#(`?<Constant "    0x          ">` >> 8) & 0xff
        MOV       ?V6,R6
        MOV       ?V0,#`?<Constant "    0xFFFF (any)">` & 0xff
        MOV       ?V1,#(`?<Constant "    0xFFFF (any)">` >> 8) & 0xff
        MOV       ?V2,R6
        MOV       DPTR,#uiCurrentState
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
        MOV       R0,#?V8
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for UI_UpdateLcd>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        23
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_8
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_9
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_11
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_12
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_13
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_14
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_15
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_17
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_18
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_19
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_20
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_21
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_22
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_23
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_24
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_25
        CODE
// 1407     {
// 1408       case UI_STATE_FINDING_AND_BINDING:
// 1409         line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_FINDING_BINDING ? "ENABLED" : "DISABLED";
??UI_UpdateLcd_14:
        MOV       DPTR,#uiSelectedBdbComissioningModes
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??UI_UpdateLcd_26
        MOV       R0,#`?<Constant "ENABLED">` & 0xff
        MOV       R1,#(`?<Constant "ENABLED">` >> 8) & 0xff
        SJMP      ??UI_UpdateLcd_27
??UI_UpdateLcd_26:
        MOV       R0,#`?<Constant "DISABLED">` & 0xff
        MOV       R1,#(`?<Constant "DISABLED">` >> 8) & 0xff
??UI_UpdateLcd_27:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
// 1410         line[2] = "<FINDNG+BINDNG >";
??CrossCallReturnLabel_7:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<FINDNG+BINDNG >">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<FINDNG+BINDNG >">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1411         break;
// 1412       case UI_STATE_BACK_FROM_CONFIGURE:
// 1413         line[2] = "<     BACK     >";
// 1414         break;
// 1415       case UI_STATE_BACK_FROM_INSTALL_CODE:
// 1416         line[2] = "<     BACK     >";
??UI_UpdateLcd_2:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<     BACK     >">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<     BACK     >">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1417         break;
// 1418       case UI_STATE_NETWORK_FORMATION:
// 1419         line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_NWK_FORMATION ? "ENABLED" : "DISABLED";
??UI_UpdateLcd_12:
        MOV       DPTR,#uiSelectedBdbComissioningModes
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.2
        JNC       ??UI_UpdateLcd_29
        MOV       R0,#`?<Constant "ENABLED">` & 0xff
        MOV       R1,#(`?<Constant "ENABLED">` >> 8) & 0xff
        SJMP      ??UI_UpdateLcd_30
??UI_UpdateLcd_29:
        MOV       R0,#`?<Constant "DISABLED">` & 0xff
        MOV       R1,#(`?<Constant "DISABLED">` >> 8) & 0xff
??UI_UpdateLcd_30:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
// 1420         line[2] = "<NWK FORMATION >";
??CrossCallReturnLabel_8:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<NWK FORMATION >">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<NWK FORMATION >">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1421         break;
// 1422       case UI_STATE_NETWORK_STEERING:
// 1423         line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_NWK_STEERING ? "ENABLED" : "DISABLED";
??UI_UpdateLcd_13:
        MOV       DPTR,#uiSelectedBdbComissioningModes
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??UI_UpdateLcd_31
        MOV       R0,#`?<Constant "ENABLED">` & 0xff
        MOV       R1,#(`?<Constant "ENABLED">` >> 8) & 0xff
        SJMP      ??UI_UpdateLcd_32
??UI_UpdateLcd_31:
        MOV       R0,#`?<Constant "DISABLED">` & 0xff
        MOV       R1,#(`?<Constant "DISABLED">` >> 8) & 0xff
??UI_UpdateLcd_32:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
// 1424         line[2] = "< NWK STEERING >";
??CrossCallReturnLabel_9:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "< NWK STEERING >">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "< NWK STEERING >">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1425         break;
// 1426 #ifdef BDB_TL_TARGET
// 1427       case UI_STATE_TOGGLE_TL_TARGET:
// 1428         {
// 1429           uint32 temp_u32;
// 1430 
// 1431           temp_u32 = touchLinkTarget_GetTimer();
// 1432           if (temp_u32 == 0)
// 1433           {
// 1434             line[1] = "DISABLED        ";
// 1435           }
// 1436           else if (temp_u32 == TOUCHLINK_TARGET_PERPETUAL)
// 1437           {
// 1438             line[1] = "ENABLED FOREVER ";
// 1439           }
// 1440           else
// 1441           {
// 1442             uiConstStrCpy(line[1], "ENABLED (     s)");
// 1443             uiUintToString( temp_u32 / 1000 + ((temp_u32 % 1000) > 0 ? 1 : 0), line[1] + 9, 10, 5, FALSE, FALSE); //note: timeouts longer than 65535 seconds will not display correctly
// 1444             osal_start_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent, uiLcdAutoUpdateInterval);
// 1445           }
// 1446         }
// 1447         line[2] = "< T.L. TARGET  >";
// 1448         break;
// 1449       case UI_STATE_TOUCHLINK_TARGET:
// 1450         if (uiTouchlinkTargetTimeout == 0)
// 1451         {
// 1452           line[1] = "DISABLED        ";
// 1453         }
// 1454         else if (uiTouchlinkTargetTimeout == TOUCHLINK_TARGET_PERPETUAL)
// 1455         {
// 1456           line[1] = "Enable (forever)";
// 1457         }
// 1458         else
// 1459         {
// 1460           uiConstStrCpy(line[1], "Enable For     s");
// 1461           uiUintToString( uiTouchlinkTargetTimeout / 1000 + ((uiTouchlinkTargetTimeout % 1000) > 0 ? 1 : 0), line[1] + 10, 10, 5, FALSE, FALSE); //note: timeouts longer than 65535 seconds will not display correctly
// 1462           line[1][16] = 0;
// 1463         }
// 1464         line[2] = "<T.L. TRGT TIME>";
// 1465         break;
// 1466       case UI_STATE_TOUCHLINK_STEALING:
// 1467         line[1] = bdb_TouchlinkGetAllowStealing() ? "ENABLED" : "DISABLED";
// 1468         line[2] = "<T.L. STEALING >";
// 1469         break;
// 1470 #endif
// 1471 #ifdef BDB_TL_INITIATOR
// 1472       case UI_STATE_TOUCHLINK_INITIATOR:
// 1473         line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_INITIATOR_TL ? "ENABLED" : "DISABLED";
// 1474         line[2] = "<T.L. INITIATOR>";
// 1475         break;
// 1476 #endif
// 1477       case UI_STATE_CONFIGURE:
// 1478         line[2] = "<  CONFIGURE   >";
??UI_UpdateLcd_5:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<  CONFIGURE   >">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<  CONFIGURE   >">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1479         break;
// 1480       case UI_STATE_RESET_TO_FACTORY_NEW:
// 1481         if (uiResetInitiated)
??UI_UpdateLcd_9:
        MOV       DPTR,#uiResetInitiated
        MOVX      A,@DPTR
        JZ        ??UI_UpdateLcd_33
// 1482         {
// 1483           line[0] = "Resetting,";
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#`?<Constant "Resetting,">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "Resetting,">` >> 8) & 0xff
        MOVX      @DPTR,A
// 1484           line[1] = "Please wait...";
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "Please wait...">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "Please wait...">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1485         }
// 1486         else
// 1487         {
// 1488           line[2] = "< RESET TO FN  >";
??UI_UpdateLcd_33:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "< RESET TO FN  >">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "< RESET TO FN  >">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1489         }
// 1490         break;
// 1491       case UI_STATE_DEFAULT:
// 1492         line[0] = uiAppTitleStr;
??UI_UpdateLcd_4:
        MOV       DPTR,#uiAppTitleStr
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL     ?Subroutine8 & 0xFFFF
// 1493         line[1] = "hold OK for help";
??CrossCallReturnLabel_150:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "hold OK for help">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "hold OK for help">` >> 8) & 0xff
        MOVX      @DPTR,A
// 1494         line[2] = "<     HELP     >";
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<     HELP     >">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<     HELP     >">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1495         break;
// 1496       case UI_STATE_STATE_HELP:
// 1497 #ifdef HAL_BOARD_CC2538
// 1498         line[0] = "< > to move     ";
// 1499         line[1] = "^ v change value";
// 1500 #else
// 1501         line[0] = "\x1B \x1A to move     ";
??UI_UpdateLcd_10:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#`?<Constant "\\033 \\032 to move     ">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "\\033 \\032 to move     ">` >> 8) & 0xff
        MOVX      @DPTR,A
// 1502         line[1] = "\x18 \x19 change value";
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "\\030 \\031 change value">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "\\030 \\031 change value">` >> 8) & 0xff
        MOVX      @DPTR,A
// 1503 #endif        
// 1504         line[2] = "OK to execute   ";
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "OK to execute   ">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "OK to execute   ">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1505         break;
// 1506       case UI_STATE_COMMISSION:
// 1507         if (uiCommissioningIsInitializing)
??UI_UpdateLcd_6:
        MOV       DPTR,#uiCommissioningIsInitializing
        MOVX      A,@DPTR
        JZ        ??UI_UpdateLcd_34
// 1508         {
// 1509           uiConstStrCpy(line[0], "Please wait...  ");
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "Please wait...  ">` & 0xff
        MOV       ?V1,#(`?<Constant "Please wait...  ">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
// 1510         }
??CrossCallReturnLabel_49:
        LJMP      ??UI_UpdateLcd_35 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 76)
// 1511         else
// 1512         {
// 1513           uiConstStrCpy(line[0], "xx              "); // TL/NF/NS/FB/-- TCHL/FORM/JOIN count/CLOSE
??UI_UpdateLcd_34:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "xx              ">` & 0xff
        MOV       ?V1,#(`?<Constant "xx              ">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1514 
// 1515           osal_memcpy(line[0] + 0, uiCommissioningStateStr, 2);
        ; Setup parameters for call to function osal_memcpy
        MOV       DPTR,#uiCommissioningStateStr
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1516 
// 1517           if ((uiNwkStateShadow != DEV_END_DEVICE) && (uiNwkStateShadow != DEV_ZB_COORD) && (uiNwkStateShadow != DEV_ROUTER))
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,#0x3
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R3,A
        MOV       DPTR,#uiNwkStateShadow
        MOVX      A,@DPTR
        XRL       A,#0x6
        JZ        ??UI_UpdateLcd_36
        MOVX      A,@DPTR
        XRL       A,#0x9
        JZ        ??UI_UpdateLcd_36
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??UI_UpdateLcd_36
// 1518           {
// 1519             uiConstStrOver(line[0] + 3, "NotOnNwk");
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "NotOnNwk">` & 0xff
        MOV       ?V1,#(`?<Constant "NotOnNwk">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x8
        LJMP      ??UI_UpdateLcd_37 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 76)
// 1520           }
// 1521           else
// 1522           {
// 1523             if (uiCommissioningNetworkConnrctionStr != NULL)
??UI_UpdateLcd_36:
        MOV       DPTR,#uiCommissioningNetworkConnrctionStr
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_100:
        JZ        ??UI_UpdateLcd_38
// 1524             {
// 1525               osal_memcpy(line[0] + 3, uiCommissioningNetworkConnrctionStr, 4);
        ; Setup parameters for call to function osal_memcpy
        MOV       DPTR,#uiCommissioningNetworkConnrctionStr
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_90:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1526               line[0][7] = ' ';
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine39 & 0xFFFF
// 1527             }
??CrossCallReturnLabel_104:
        XCH       A,R0
        ADD       A,#0x7
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOV       A,#0x20
        MOVX      @DPTR,A
// 1528 
// 1529             if ((uiNwkStateShadow == DEV_ZB_COORD) || (uiNwkStateShadow == DEV_ROUTER))
??UI_UpdateLcd_38:
        MOV       DPTR,#uiNwkStateShadow
        MOVX      A,@DPTR
        XRL       A,#0x9
        JZ        ??UI_UpdateLcd_39
        MOVX      A,@DPTR
        XRL       A,#0x7
        JNZ       ??UI_UpdateLcd_40
// 1530             {
// 1531               PermitJoinDuration = NLME_GetRemainingPermitJoiningDuration();
??UI_UpdateLcd_39:
        ; Setup parameters for call to function NLME_GetRemainingPermitJoiningDuration
        LCALL     `??NLME_GetRemainingPermitJoiningDuration::?rela`; Banked call to: NLME_GetRemainingPermitJoiningDuration
        MOV       A,R1
        MOV       R7,A
// 1532               
// 1533               if (PermitJoinDuration > 0)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,#0x8
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R3,A
        MOV       A,R1
        JZ        ??UI_UpdateLcd_41
// 1534               {
// 1535                 uiConstStrOver(line[0] + 8, "Open");
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "Open">` & 0xff
        MOV       ?V1,#(`?<Constant "Open">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_91:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1536                 uiUintToString(PermitJoinDuration, line[0] + 12, 10, 3, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,#0x3
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0xc
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_115:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R1,#0xa
        MOV       A,R7
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_138:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1537                 LcdAutoRefreshRequired = TRUE;
        MOV       R6,#0x1
        SJMP      ??UI_UpdateLcd_40
// 1538               }
// 1539               else
// 1540               {
// 1541                 uiConstStrOver(line[0] + 8, "CLOSED");
??UI_UpdateLcd_41:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "CLOSED">` & 0xff
        MOV       ?V1,#(`?<Constant "CLOSED">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x6
??UI_UpdateLcd_37:
        MOV       R5,#0x0
??UI_UpdateLcd_35:
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1542               }
// 1543             }
// 1544            }
// 1545         }
// 1546         
// 1547         uiConstStrCpy(line[1], "Id000 Srch000/00"); // IDENTIFYING, SEARCHING   - IDFYcnt SRCHcnt
??UI_UpdateLcd_40:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "Id000 Srch000/00">` & 0xff
        MOV       ?V1,#(`?<Constant "Id000 Srch000/00">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1548 
// 1549         uiUintToString(*pUiIdentifyTimeAttribute, line[1] + 2, 10, 3, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,#0x3
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0x2
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_116:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R1,#0xa
        MOV       DPTR,#pUiIdentifyTimeAttribute
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_129:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1550         bdb_GetFBInitiatorStatus(&FBRemainingTimeLeft, NULL);
        ; Setup parameters for call to function bdb_GetFBInitiatorStatus
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??bdb_GetFBInitiatorStatus::?relay`; Banked call to: bdb_GetFBInitiatorStatus
// 1551         uiUintToString(FBRemainingTimeLeft, line[1] + 10, 10, 3, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,#0x3
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0xa
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_117:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R1,#0xa
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1552         uiUintToString(FBMatchesFound, line[1] + 14, 10, 2, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,#0x2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0xe
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_118:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R1,#0xa
        MOV       DPTR,#FBMatchesFound
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1553 
// 1554         if ((*pUiIdentifyTimeAttribute > 0) || (FBRemainingTimeLeft > 0) || (uiCommissioningStateStr != "--"))
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_101:
        JNZ       ??UI_UpdateLcd_42
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JNZ       ??UI_UpdateLcd_42
        MOV       DPTR,#uiCommissioningStateStr
        MOVX      A,@DPTR
        XRL       A,#`?<Constant "--">` & 0xff
        JNZ       ??UI_UpdateLcd_43
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#(`?<Constant "--">` >> 8) & 0xff
??UI_UpdateLcd_43:
        JNZ       ??UI_UpdateLcd_42
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        MOV       B.0,C
        SJMP      ??UI_UpdateLcd_44
// 1555         {
// 1556           LcdAutoRefreshRequired = TRUE;
??UI_UpdateLcd_42:
        SETB      B.0
// 1557         }
// 1558 
// 1559         line[2] = "<  COMMISSION  >";
??UI_UpdateLcd_44:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<  COMMISSION  >">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<  COMMISSION  >">` >> 8) & 0xff
        MOVX      @DPTR,A
// 1560         
// 1561         if (LcdAutoRefreshRequired)
        MOV       C,B.0
        JC        $+5
        LJMP      ??UI_UpdateLcd_3 & 0xFFFF
// 1562         {
// 1563           osal_start_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent, LCD_AUTO_REFRESH_INTERVAL_ON_COMISSIONING_SCREEN);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_fa
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 80)
        LCALL     ?Subroutine19 & 0xFFFF
// 1564         }
??CrossCallReturnLabel_32:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        LJMP      ??UI_UpdateLcd_3 & 0xFFFF
// 1565         break;
// 1566       case UI_STATE_SET_INST_CODE:
// 1567         line[2] = "<ADD INSTL CODE>";
??UI_UpdateLcd_11:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<ADD INSTL CODE>">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<ADD INSTL CODE>">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1568         break;
// 1569       case UI_STATE_SET_INST_CODE_0:
// 1570         uiArrayToString(uiInstallCode, line[0], 16, TRUE); 
??UI_UpdateLcd_21:
        ; Setup parameters for call to function uiArrayToString
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       R1,#0x10
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1571         uiArrayToString(uiInstallCode + 8, line[1], 16, TRUE); 
        ; Setup parameters for call to function uiArrayToString
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       R1,#0x10
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1572         line[0][16] = 0;
        LCALL     ?Subroutine16 & 0xFFFF
// 1573         line[1][16] = 0;
??CrossCallReturnLabel_25:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine50_0 & 0xFFFF
// 1574         line[2] = "<SET INSTL CODE>";
??CrossCallReturnLabel_111:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<SET INSTL CODE>">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<SET INSTL CODE>">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1575         break;
// 1576 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1577       case UI_STATE_SET_INST_CODE_ADDR_0:
// 1578         uiArrayToString(uiInstallCodeAddr, line[0],16, FALSE); 
??UI_UpdateLcd_22:
        ; Setup parameters for call to function uiArrayToString
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       R1,#0x10
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1579         line[0][16] = 0;
        LCALL     ?Subroutine13 & 0xFFFF
// 1580         line[2] = "<SET I.C. ADDR >";
??CrossCallReturnLabel_109:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<SET I.C. ADDR >">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<SET I.C. ADDR >">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1581         break;
// 1582 #endif
// 1583       case UI_STATE_SET_INST_CODE_DONE:
// 1584         line[0] = "Last status:";
??UI_UpdateLcd_23:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#`?<Constant "Last status:">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "Last status:">` >> 8) & 0xff
        MOVX      @DPTR,A
// 1585         
// 1586         switch (uiAddInstallCodeLastStatus)
        MOV       DPTR,#uiAddInstallCodeLastStatus
        MOVX      A,@DPTR
        JZ        ??UI_UpdateLcd_45
        INC       A
        JNZ       ??UI_UpdateLcd_46
// 1587         {
// 1588           case STATUS_UNKNOWN:
// 1589             line[1] = "---";
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "---">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "---">` >> 8) & 0xff
        SJMP      ??UI_UpdateLcd_47
// 1590             break;
// 1591           case ZSuccess:
// 1592             line[1] = "SUCCESS";
??UI_UpdateLcd_45:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "SUCCESS">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "SUCCESS">` >> 8) & 0xff
??UI_UpdateLcd_47:
        MOVX      @DPTR,A
// 1593             break;
        SJMP      ??UI_UpdateLcd_48
// 1594           default:
// 1595             uiConstStrCpy(line[1], "ERROR (0x  )    ");
??UI_UpdateLcd_46:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "ERROR (0x  )    ">` & 0xff
        MOV       ?V1,#(`?<Constant "ERROR (0x  )    ">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1596             uiUintToString( uiAddInstallCodeLastStatus, line[1] + 9, 16, 2, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,#0x2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0x9
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_119:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R1,#0x10
        MOV       DPTR,#uiAddInstallCodeLastStatus
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1597             break;
// 1598         }
// 1599         line[2] = "<APLY INST CODE>";
??UI_UpdateLcd_48:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<APLY INST CODE>">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<APLY INST CODE>">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1600         break;
// 1601 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1602       case UI_STATE_SET_INST_CODE_ADDR_1:
// 1603         uiArrayToString(uiInstallCodeAddr, line[0],16, FALSE); 
??UI_UpdateLcd_25:
        ; Setup parameters for call to function uiArrayToString
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       R1,#0x10
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1604         line[0][16] = 0;
        LCALL     ?Subroutine13 & 0xFFFF
// 1605         line[2] = "       I.C. ADDR";
??CrossCallReturnLabel_110:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "       I.C. ADDR">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "       I.C. ADDR">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1606         break;
// 1607 #endif
// 1608       case UI_STATE_SET_INST_CODE_1:
// 1609         uiArrayToString(uiInstallCode, line[0], 16, TRUE); 
??UI_UpdateLcd_24:
        ; Setup parameters for call to function uiArrayToString
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       R1,#0x10
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1610         uiArrayToString(uiInstallCode + 8, line[1], 16, TRUE); 
        ; Setup parameters for call to function uiArrayToString
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       R1,#0x10
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1611         line[0][16] = 0;
        LCALL     ?Subroutine16 & 0xFFFF
// 1612         line[1][16] = 0;
??CrossCallReturnLabel_26:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
// 1613         uiConstStrCpy(line[2], "       INST CODE");
??CrossCallReturnLabel_30:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "       INST CODE">` & 0xff
        MOV       ?V1,#(`?<Constant "       INST CODE">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1614         uiArrayToString( uiInstallCode + 16, line[2], 4, TRUE);
        ; Setup parameters for call to function uiArrayToString
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       R1,#0x4
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV       R2,#(uiInstallCode + 16) & 0xff
        MOV       R3,#((uiInstallCode + 16) >> 8) & 0xff
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_79:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1615         break;
        LJMP      ??UI_UpdateLcd_3 & 0xFFFF
// 1616       case UI_STATE_APP_SPECIFIC_MENU:
// 1617         line[2] = "<   APP MENU   >";
??UI_UpdateLcd_7:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<   APP MENU   >">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<   APP MENU   >">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1618         break;
// 1619       case UI_STATE_SET_PRI_CHANEL_MASK_0:
// 1620         line[0] = "1234567890123456";
??UI_UpdateLcd_15:
        LCALL     ?Subroutine6 & 0xFFFF
// 1621         uiCreateChannelMaskString(bdbAttributes.bdbPrimaryChannelSet, line[1]);
??CrossCallReturnLabel_3:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       DPTR,#bdbAttributes + 4
        LCALL     ?XLOAD_R2345
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1622         line[2] = "<PRI CHANL MASK>";
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<PRI CHANL MASK>">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<PRI CHANL MASK>">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1623         break;
// 1624       case UI_STATE_SET_SEC_CHANEL_MASK_0:
// 1625         line[0] = "1234567890123456";
??UI_UpdateLcd_16:
        LCALL     ?Subroutine6 & 0xFFFF
// 1626         uiCreateChannelMaskString(bdbAttributes.bdbSecondaryChannelSet, line[1]);
??CrossCallReturnLabel_4:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R2345
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1627         line[2] = "<SEC CHANL MASK>";
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<SEC CHANL MASK>">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<SEC CHANL MASK>">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1628         break;
// 1629       case UI_STATE_SET_PRI_CHANEL_MASK_1:
// 1630         line[0] = "1234567890123456";
??UI_UpdateLcd_18:
        LCALL     ?Subroutine6 & 0xFFFF
// 1631         uiCreateChannelMaskString(bdbAttributes.bdbPrimaryChannelSet, line[1]);
??CrossCallReturnLabel_5:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       DPTR,#bdbAttributes + 4
        LCALL     ?XLOAD_R2345
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1632         line[2] = " PRI CHANL MASK ";
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant " PRI CHANL MASK ">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant " PRI CHANL MASK ">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1633         break;
// 1634       case UI_STATE_SET_SEC_CHANEL_MASK_1:
// 1635         line[0] = "1234567890123456";
??UI_UpdateLcd_19:
        LCALL     ?Subroutine6 & 0xFFFF
// 1636         uiCreateChannelMaskString(bdbAttributes.bdbSecondaryChannelSet, line[1]);
??CrossCallReturnLabel_6:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R2345
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1637         line[2] = " SEC CHANL MASK ";
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant " SEC CHANL MASK ">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant " SEC CHANL MASK ">` >> 8) & 0xff
        LJMP      ??UI_UpdateLcd_28 & 0xFFFF
// 1638         break;
// 1639       case UI_STATE_SET_PAN_ID_0:
// 1640         if (zgConfigPANID == 0xFFFF)
??UI_UpdateLcd_17:
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??UI_UpdateLcd_49
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??UI_UpdateLcd_49:
        JNZ       ??UI_UpdateLcd_50
// 1641         {
// 1642           uiConstStrCpy(line[0], "    0xFFFF (any)");
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        SJMP      ??UI_UpdateLcd_51
// 1643         }
// 1644         else
// 1645         {
// 1646           uiConstStrCpy(line[0], "    0x          ");
??UI_UpdateLcd_50:
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1647           uiUintToString( zgConfigPANID, line[0] + 6, 16, 4, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,#0x4
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
// 1648         }
??CrossCallReturnLabel_125:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_127:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1649         line[2] = "<    PAN ID    >";
??UI_UpdateLcd_51:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "<    PAN ID    >">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "<    PAN ID    >">` >> 8) & 0xff
        SJMP      ??UI_UpdateLcd_28
// 1650         break;
// 1651       case UI_STATE_SET_PAN_ID_1:
// 1652         if (zgConfigPANID == 0xFFFF)
??UI_UpdateLcd_20:
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??UI_UpdateLcd_52
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??UI_UpdateLcd_52:
        JNZ       ??UI_UpdateLcd_53
// 1653         {
// 1654           uiConstStrCpy(line[0], "    0xFFFF (any)");
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        SJMP      ??UI_UpdateLcd_54
// 1655         }
// 1656         else
// 1657         {
// 1658           uiConstStrCpy(line[0], "    0x          ");
??UI_UpdateLcd_53:
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1659           uiUintToString( zgConfigPANID, line[0] + 6, 16, 4, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,#0x4
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
// 1660         }
??CrossCallReturnLabel_126:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_128:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1661         line[2] = "     PAN ID     ";
??UI_UpdateLcd_54:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`?<Constant "     PAN ID     ">` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`?<Constant "     PAN ID     ">` >> 8) & 0xff
??UI_UpdateLcd_28:
        MOVX      @DPTR,A
// 1662         break;
        LJMP      ??UI_UpdateLcd_3 & 0xFFFF
// 1663       case UI_STATE_INFO:
// 1664         // Display the extended address.
// 1665         xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
??UI_UpdateLcd_8:
        MOV       R0,#(aExtendedAddress + 7) & 0xff
        MOV       R1,#((aExtendedAddress + 7) >> 8) & 0xff
// 1666         
// 1667         for (i = 0; i < Z_EXTADDR_LEN * 2; xad--)
        MOV       R2,#0x0
// 1668         {
// 1669           uint8 ch;
// 1670           ch = (*xad >> 4) & 0x0F;
??UI_UpdateLcd_55:
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        SWAP      A
        ANL       A,#0xf
        MOV       R4,A
// 1671           line[0][i++] = ch + (( ch < 10 ) ? '0' : '7');
        MOV       A,R2
        MOV       R6,A
        MOV       A,#0x1
        ADD       A,R6
        MOV       R2,A
        MOV       A,R4
        CLR       C
        SUBB      A,#0xa
        JNC       ??UI_UpdateLcd_56
        MOV       R3,#0x30
        SJMP      ??UI_UpdateLcd_57
??UI_UpdateLcd_56:
        MOV       R3,#0x37
??UI_UpdateLcd_57:
        MOV       A,R4
        ADD       A,R3
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R3,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       DPL,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1672           ch = *xad & 0x0F;
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        ANL       A,#0xf
        MOV       R4,A
// 1673           line[0][i++] = ch + (( ch < 10 ) ? '0' : '7');
        MOV       A,R2
        MOV       R7,A
        MOV       A,#0x1
        ADD       A,R2
        MOV       R2,A
        MOV       A,R4
        CLR       C
        SUBB      A,#0xa
        JNC       ??UI_UpdateLcd_58
        MOV       R3,#0x30
        SJMP      ??UI_UpdateLcd_59
??UI_UpdateLcd_58:
        MOV       R3,#0x37
??UI_UpdateLcd_59:
        MOV       A,R4
        ADD       A,R3
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,R7
        MOV       R3,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       DPL,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1674         }
        MOV       A,R0
        ADD       A,#-0x1
        DEC       R0
        MOV       A,R1
        ADDC      A,#-0x1
        MOV       R1,A
        MOV       A,R2
        CLR       C
        SUBB      A,#0x10
        JC        ??UI_UpdateLcd_55
// 1675         
// 1676         line[0][Z_EXTADDR_LEN*2] = '\0';
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine18 & 0xFFFF
// 1677 
// 1678         uiConstStrCpy( line[1], "nxxxx cxx axxxx ");
??CrossCallReturnLabel_31:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "nxxxx cxx axxxx ">` & 0xff
        MOV       ?V1,#(`?<Constant "nxxxx cxx axxxx ">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1679 
// 1680         uiUintToString( _NIB.nwkPanId, line[1] + 1 , 16, 4, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,#0x4
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0x1
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_120:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R1,#0x10
        MOV       DPTR,#_NIB + 33
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_130:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1681         line[1][5] = ' ';
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_45:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x20
        MOVX      @DPTR,A
// 1682         
// 1683         uiUintToString( _NIB.nwkLogicalChannel, (void *)(line[1] + 7), 10, 2, TRUE, FALSE );
        ; Setup parameters for call to function uiUintToString
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,#0x2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0x7
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_121:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R1,#0xa
        MOV       DPTR,#_NIB + 22
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1684         line[1][9] = ' ';
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_105:
        XCH       A,R0
        ADD       A,#0x9
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOV       A,#0x20
        MOVX      @DPTR,A
// 1685         
// 1686         uiUintToString( _NIB.nwkDevAddress, line[1] + 11, 16, 4, TRUE, FALSE );
        ; Setup parameters for call to function uiUintToString
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,#0x4
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0xb
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_122:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R1,#0x10
        MOV       DPTR,#_NIB + 20
        LCALL     ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_131:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1687 
// 1688         uiConstStrCpy(line[2], "          <INFO>");
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "          <INFO>">` & 0xff
        MOV       ?V1,#(`?<Constant "          <INFO>">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1689         switch (uiNwkStateShadow)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV       DPTR,#uiNwkStateShadow
        MOVX      A,@DPTR
        ADD       A,#-0x6
        JZ        ??UI_UpdateLcd_60
        DEC       A
        JZ        ??UI_UpdateLcd_61
        ADD       A,#-0x2
        JZ        $+5
        LJMP      ??UI_UpdateLcd_62 & 0xFFFF
// 1690         {
// 1691           case DEV_ZB_COORD:
// 1692             uiConstStrOver(line[2], "ZC");
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "ZC">` & 0xff
        MOV       ?V1,#(`?<Constant "ZC">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x2
        MOV       R5,#0x0
        SJMP      ??CrossCallReturnLabel_51
          CFI CFA_XSP16 add(XSP16, 76)
// 1693             break;
// 1694           case DEV_ROUTER:
// 1695             if (APSME_IsDistributedSecurity())
??UI_UpdateLcd_61:
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JZ        ??UI_UpdateLcd_63
// 1696             {
// 1697               uiConstStrOver(line[2], "ZR DIST");
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "ZR DIST">` & 0xff
        MOV       ?V1,#(`?<Constant "ZR DIST">` >> 8) & 0xff
        SJMP      ??UI_UpdateLcd_64
// 1698             }
// 1699             else
// 1700             {
// 1701               uiConstStrOver(line[2], "ZR CENT");
??UI_UpdateLcd_63:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "ZR CENT">` & 0xff
        MOV       ?V1,#(`?<Constant "ZR CENT">` >> 8) & 0xff
??UI_UpdateLcd_64:
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x7
        MOV       R5,#0x0
        MOV       A,R4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_95:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        LJMP      ??UI_UpdateLcd_3 & 0xFFFF
// 1702             }
// 1703             break;
// 1704           case DEV_END_DEVICE:
// 1705             uiConstStrOver(line[2], "ZED p");
??UI_UpdateLcd_60:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "ZED p">` & 0xff
        MOV       ?V1,#(`?<Constant "ZED p">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x5
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_92:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1706             uiUintToString( _NIB.nwkCoordAddress, line[2] + 5, 16, 4, TRUE, FALSE );
        ; Setup parameters for call to function uiUintToString
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,#0x4
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0x5
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_123:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R1,#0x10
        MOV       DPTR,#_NIB + 23
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_132:
        SJMP      ??UI_UpdateLcd_65
          CFI CFA_XSP16 add(XSP16, 76)
// 1707             break;
// 1708           default:
// 1709 #if ZG_BUILD_COORDINATOR_TYPE
// 1710             uiConstStrOver(line[2], "ZC (   )");
??UI_UpdateLcd_62:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "ZC (   )">` & 0xff
        MOV       ?V1,#(`?<Constant "ZC (   )">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x8
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_93:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1711             uiUintToString( uiNwkStateShadow, line[2] + 4, 10, 3, TRUE, FALSE );
        ; Setup parameters for call to function uiUintToString
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,#0x3
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0x4
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_124:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R1,#0xa
        MOV       DPTR,#uiNwkStateShadow
        MOVX      A,@DPTR
        MOV       R2,A
        CLR       A
        MOV       R3,A
??UI_UpdateLcd_65:
        LCALL     ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_140:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1712 #elif ZG_BUILD_RTRONLY_TYPE
// 1713             uiConstStrOver(line[2], "ZR (   )");
// 1714             uiUintToString( uiNwkStateShadow, line[2] + 4, 10, 3, TRUE, FALSE );
// 1715 #elif ZG_BUILD_ENDDEVICE_TYPE
// 1716             uiConstStrOver(line[2], "ZED (   )");
// 1717             uiUintToString( uiNwkStateShadow, line[2] + 5, 10, 3, TRUE, FALSE );
// 1718 #else
// 1719             uiConstStrOver(line[2], "(   )");
// 1720             uiUintToString( uiNwkStateShadow, line[2] + 1, 10, 3, TRUE, FALSE );
// 1721 #endif
// 1722             break;
// 1723         }
// 1724         
// 1725         break;
// 1726       default:
// 1727         break;
// 1728     }
// 1729   }
// 1730 
// 1731   if (uiLcdCursorLine != 0xFF)
??UI_UpdateLcd_3:
        MOV       DPTR,#uiLcdCursorLine
        MOVX      A,@DPTR
        CPL       A
        JZ        ??UI_UpdateLcd_66
// 1732   {
// 1733     if (uiLcdCursorState == 0)
        MOV       DPTR,#uiLcdCursorState
        MOVX      A,@DPTR
        JNZ       ??UI_UpdateLcd_67
// 1734     {
// 1735       line[uiLcdCursorLine][uiLcdCursorCol] = LCD_CURSOR_CHAR; //note: the cursor must point to a writeable memory location, i.e. not const
        MOV       DPTR,#uiLcdCursorCol
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPTR,#uiLcdCursorLine
        MOVX      A,@DPTR
        ADD       A,0xE0 /* A   */
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,DPL
        ADD       A,R0
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,R2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       DPL,R0
        MOV       DPH,A
        MOV       A,#0x20
        MOVX      @DPTR,A
// 1736     }
// 1737     uiLcdCursorState ^= 1;
??UI_UpdateLcd_67:
        MOV       DPTR,#uiLcdCursorState
        MOVX      A,@DPTR
        XRL       A,#0x1
        MOVX      @DPTR,A
// 1738     
// 1739     osal_start_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent, LCD_CURSOR_UPDATE_INTERVAL);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1f4
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 80)
        LCALL     ?Subroutine19 & 0xFFFF
// 1740   }
??CrossCallReturnLabel_33:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1741 
// 1742 #ifdef HAL_BOARD_CC2538
// 1743   for (i = 0; i < 3; i++)
// 1744   {
// 1745     if (line[i] != LineBuf[i] + LCD_CC2538_PREFIX_COUNT)
// 1746     {
// 1747       osal_memcpy(LineBuf[i] + LCD_CC2538_PREFIX_COUNT, line[i], LCD_LINE_LENGTH + 1);
// 1748     }
// 1749     
// 1750     line[i] = LineBuf[i];
// 1751   }
// 1752 #endif
// 1753   
// 1754 #ifdef LCD_SUPPORTED
// 1755   HalLcd_HW_Clear();
??UI_UpdateLcd_66:
        ; Setup parameters for call to function HalLcd_HW_Clear
        LCALL     `??HalLcd_HW_Clear::?relay`; Banked call to: HalLcd_HW_Clear
// 1756   HalLcdWriteString( line[0], UI_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine23 & 0xFFFF
// 1757   HalLcdWriteString( line[1], UI_LCD_LINE_2 );
??CrossCallReturnLabel_40:
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       A,R1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
// 1758   HalLcdWriteString( line[2], UI_LCD_LINE_3 );
??CrossCallReturnLabel_41:
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
// 1759 
// 1760 #ifdef DEBUG_LCD_REFRESH
// 1761   {
// 1762     static bool toggle=TRUE;
// 1763     HalLcd_HW_WriteChar(3,15,(toggle = !toggle) ? '>' : ' ');
// 1764   }
// 1765 #endif
// 1766 
// 1767 #endif
// 1768 }
??CrossCallReturnLabel_42:
        MOV       A,#0x3a
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock52

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function UI_UpdateLcd
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function UI_UpdateLcd
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function UI_UpdateLcd
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker57 Using cfiCommon1
          CFI (cfiPicker57) NoFunction
          CFI (cfiPicker57) Picker
        LCALL     `??uiCreateChannelMaskString::?relay`; Banked call to: uiCreateChannelMaskString
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond58 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_90
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function UI_UpdateLcd
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker60 Using cfiCommon1
          CFI (cfiPicker60) NoFunction
          CFI (cfiPicker60) Picker
        MOV       R4,#0x4
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiPicker60
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond61 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_92
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function UI_UpdateLcd
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-2
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function UI_UpdateLcd
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function UI_UpdateLcd
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker65 Using cfiCommon1
          CFI (cfiPicker65) NoFunction
          CFI (cfiPicker65) Picker
        MOV       R5,#0x0
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiPicker65
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function UI_UpdateLcd
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function UI_UpdateLcd
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function UI_UpdateLcd
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function UI_UpdateLcd
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function UI_UpdateLcd
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker72 Using cfiCommon1
          CFI (cfiPicker72) NoFunction
          CFI (cfiPicker72) Picker
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiPicker72

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function UI_UpdateLcd
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function UI_UpdateLcd
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function UI_UpdateLcd
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_74:
        RET
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function UI_UpdateLcd
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_49
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-4
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function UI_UpdateLcd
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_50
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-4
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function UI_UpdateLcd
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_51
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-4
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function UI_UpdateLcd
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_40
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-4
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function UI_UpdateLcd
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_41
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-4
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function UI_UpdateLcd
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_42
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-4
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function UI_UpdateLcd
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_32
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-4
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 80)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function UI_UpdateLcd
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_33
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-4
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 80)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function UI_UpdateLcd
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_10
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-4
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function UI_UpdateLcd
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_11
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-4
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function UI_UpdateLcd
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_12
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-4
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function UI_UpdateLcd
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_13
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-4
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function UI_UpdateLcd
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_14
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-4
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function UI_UpdateLcd
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_15
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-4
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function UI_UpdateLcd
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_16
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-4
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function UI_UpdateLcd
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_17
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-4
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function UI_UpdateLcd
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_18
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-4
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function UI_UpdateLcd
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_19
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-4
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function UI_UpdateLcd
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_20
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-4
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker98 Using cfiCommon1
          CFI (cfiPicker98) NoFunction
          CFI (cfiPicker98) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiPicker98

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function UI_UpdateLcd
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function UI_UpdateLcd
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker102 Using cfiCommon1
          CFI (cfiPicker102) NoFunction
          CFI (cfiPicker102) Picker
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_76:
        RET
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond103 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function UI_UpdateLcd
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_44
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-4
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function UI_UpdateLcd
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_45
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-4
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function UI_UpdateLcd
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_101
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-4
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function uiProcessIdentifyTimeChange
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_102
          CFI (cfiCond107) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond107) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond107) CFA_SP SP+-9
          CFI Block cfiPicker108 Using cfiCommon1
          CFI (cfiPicker108) NoFunction
          CFI (cfiPicker108) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiPicker108

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond109 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function UI_UpdateLcd
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function UI_UpdateLcd
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        RET
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond113 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function UI_UpdateLcd
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV       R2,#uiInstallCodeAddr & 0xff
        MOV       R3,#(uiInstallCodeAddr >> 8) & 0xff
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_80:
        RET
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function uiCreateChannelMaskString
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function UI_UpdateLcd
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function UI_UpdateLcd
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_38
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-4
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function UI_UpdateLcd
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_39
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-4
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function UI_UpdateLcd
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_36
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-4
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function UI_UpdateLcd
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_37
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-4
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function UI_UpdateLcd
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_34
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-4
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function UI_UpdateLcd
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_35
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        RET
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function UI_UpdateLcd
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV       R2,#(uiInstallCode + 8) & 0xff
        MOV       R3,#((uiInstallCode + 8) >> 8) & 0xff
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_81:
        RET
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function UI_UpdateLcd
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_38
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function UI_UpdateLcd
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_39
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-4
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function UI_UpdateLcd
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_36
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function UI_UpdateLcd
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_37
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function UI_UpdateLcd
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_34
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function UI_UpdateLcd
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_35
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-4
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        LCALL     `??uiArrayToString::?relay`; Banked call to: uiArrayToString
        MOV       A,#0x1
        RET
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function UI_UpdateLcd
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiPicker138 Using cfiCommon1
          CFI (cfiPicker138) NoFunction
          CFI (cfiPicker138) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV       R2,#uiInstallCode & 0xff
        MOV       R3,#(uiInstallCode >> 8) & 0xff
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_82:
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiPicker138

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond139 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 80)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function UI_UpdateLcd
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 80)
          CFI Block cfiPicker141 Using cfiCommon1
          CFI (cfiPicker141) NoFunction
          CFI (cfiPicker141) Picker
        MOV       DPTR,#uiLcdAutoUpdateEvent
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV       DPTR,#uiAppTaskId
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiPicker141

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond142 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function UI_UpdateLcd
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker144 Using cfiCommon1
          CFI (cfiPicker144) NoFunction
          CFI (cfiPicker144) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_113:
        RET
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiPicker144

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond145 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function UI_UpdateLcd
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_31
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-4
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function UI_UpdateLcd
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_25
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-4
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function UI_UpdateLcd
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_26
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-4
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function UI_UpdateLcd
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_109
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-4
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function UI_UpdateLcd
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_110
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-4
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function UI_UpdateLcd
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_111
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-4
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker152 Using cfiCommon1
          CFI (cfiPicker152) NoFunction
          CFI (cfiPicker152) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x10
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiPicker152

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond153 Using cfiCommon0
          CFI Function uiActionConfigureEnables
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function UI_UpdateLcd
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function UI_UpdateLcd
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker156 Using cfiCommon1
          CFI (cfiPicker156) NoFunction
          CFI (cfiPicker156) Picker
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_136:
        MOV       ?V1,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiPicker156

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond157 Using cfiCommon0
          CFI Function uiActionMenuJump
          CFI Conditional ??CrossCallReturnLabel_134
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function uiActionProcessConfigurePanId
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function uiActionConfigureEnables
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_27
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-4
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function UI_UpdateLcd
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_28
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function UI_UpdateLcd
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_29
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-4
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function UI_UpdateLcd
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_132
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-4
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function UI_UpdateLcd
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_127
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-6
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function UI_UpdateLcd
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_128
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-6
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function UI_UpdateLcd
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_129
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-6
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function UI_UpdateLcd
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_130
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-6
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function UI_UpdateLcd
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_131
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-6
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker168 Using cfiCommon1
          CFI (cfiPicker168) NoFunction
          CFI (cfiPicker168) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiPicker168

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond169 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function UI_UpdateLcd
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker171 Using cfiCommon1
          CFI (cfiPicker171) NoFunction
          CFI (cfiPicker171) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_112:
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiPicker171

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond172 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function UI_UpdateLcd
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function UI_UpdateLcd
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function UI_UpdateLcd
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-2
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker176 Using cfiCommon1
          CFI (cfiPicker176) NoFunction
          CFI (cfiPicker176) Picker
        MOVX      A,@DPTR
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_139:
        RET
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiPicker176

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond177 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_138
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function UI_UpdateLcd
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_21
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-4
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function UI_UpdateLcd
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_22
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-4
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function UI_UpdateLcd
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_23
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-4
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function UI_UpdateLcd
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_24
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-4
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker182 Using cfiCommon1
          CFI (cfiPicker182) NoFunction
          CFI (cfiPicker182) Picker
        MOV       R2,A
        CLR       A
        MOV       R3,A
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiPicker182
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiCond183 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_140
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function UI_UpdateLcd
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_127
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-4
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function UI_UpdateLcd
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_128
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-4
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function UI_UpdateLcd
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_129
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-4
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function UI_UpdateLcd
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_130
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-4
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function UI_UpdateLcd
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_131
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-4
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function UI_UpdateLcd
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function UI_UpdateLcd
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_21
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-4
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function UI_UpdateLcd
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_22
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-4
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function UI_UpdateLcd
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_23
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-4
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function UI_UpdateLcd
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_24
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-4
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker194 Using cfiCommon1
          CFI (cfiPicker194) NoFunction
          CFI (cfiPicker194) Picker
        MOV       R4,A
        MOV       R5,A
        LCALL     `??uiUintToString::?relay`; Banked call to: uiUintToString
        MOV       A,#0x5
        RET
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiPicker194

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond195 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_101
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function uiProcessIdentifyTimeChange
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond196) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond196) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond196) CFA_SP SP+-7
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        MOV       DPTR,#pUiIdentifyTimeAttribute
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_75:
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function uiActionAppSecificMenu
          CFI Conditional ??CrossCallReturnLabel_96
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function UI_UpdateComissioningStatus
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond199) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond199) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond199) CFA_SP SP+-7
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function UI_UpdateComissioningStatus
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond200) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond200) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond200) CFA_SP SP+-7
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function UI_UpdateLcd
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function UI_UpdateLcd
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function UI_UpdateLcd
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function uiProcessIdentifyTimeChange
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond204) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond204) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond204) CFA_SP SP+-7
          CFI Block cfiPicker205 Using cfiCommon1
          CFI (cfiPicker205) NoFunction
          CFI (cfiPicker205) Picker
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_108:
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiPicker205

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond206 Using cfiCommon0
          CFI Function UI_MainStateMachine
          CFI Conditional ??CrossCallReturnLabel_103
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function UI_UpdateLcd
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function UI_UpdateLcd
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function UI_UpdateLcd
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_101
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-4
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function uiProcessIdentifyTimeChange
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_102
          CFI (cfiCond210) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond210) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond210) CFA_SP SP+-9
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function uiActionAppSecificMenu
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_96
          CFI (cfiCond211) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond211) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond211) CFA_SP SP+-9
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function UI_UpdateComissioningStatus
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_97
          CFI (cfiCond212) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond212) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond212) CFA_SP SP+-9
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function UI_UpdateComissioningStatus
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_98
          CFI (cfiCond213) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond213) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond213) CFA_SP SP+-9
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function UI_UpdateLcd
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_99
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-4
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function UI_UpdateLcd
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_100
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-4
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function UI_UpdateLcd
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_54
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-4
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function UI_Init
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_55
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-4
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function UI_Init
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_56
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-4
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function UI_Init
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_57
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-4
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function UI_UpdateLcd
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_52
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-4
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function UI_Init
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_53
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-4
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker222 Using cfiCommon1
          CFI (cfiPicker222) NoFunction
          CFI (cfiPicker222) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiPicker222

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond223 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_109
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function UI_UpdateLcd
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-2
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker225 Using cfiCommon1
          CFI (cfiPicker225) NoFunction
          CFI (cfiPicker225) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiPicker225
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiCond226 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_111
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function UI_UpdateLcd
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function UI_UpdateLcd
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-2
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker229 Using cfiCommon1
          CFI (cfiPicker229) NoFunction
          CFI (cfiPicker229) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_114:
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiPicker229

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond230 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_125
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function UI_UpdateLcd
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker232 Using cfiCommon1
          CFI (cfiPicker232) NoFunction
          CFI (cfiPicker232) Picker
        MOVX      A,@DPTR
        ADD       A,#0x6
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiPicker232
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond233 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_115
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function UI_UpdateLcd
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function UI_UpdateLcd
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-2
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function UI_UpdateLcd
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-2
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function UI_UpdateLcd
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-2
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function UI_UpdateLcd
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-2
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function UI_UpdateLcd
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+-2
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function UI_UpdateLcd
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-2
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function UI_UpdateLcd
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-2
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function UI_UpdateLcd
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-2
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function UI_UpdateLcd
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond243) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond243) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond243) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-2
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function UI_UpdateLcd
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-2
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker245 Using cfiCommon1
          CFI (cfiPicker245) NoFunction
          CFI (cfiPicker245) Picker
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       ?V1,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiPicker245

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond246 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_127
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function UI_UpdateLcd
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond247) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond247) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond247) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-2
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker248 Using cfiCommon1
          CFI (cfiPicker248) NoFunction
          CFI (cfiPicker248) Picker
        MOV       R1,#0x10
        MOV       DPTR,#zgConfigPANID
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiPicker248
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond249 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_129
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function UI_UpdateLcd
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond250) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond250) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond250) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-2
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function UI_UpdateLcd
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function UI_UpdateLcd
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond252) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-2
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function UI_UpdateLcd
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond253) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond253) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond253) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-2
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker254 Using cfiCommon1
          CFI (cfiPicker254) NoFunction
          CFI (cfiPicker254) Picker
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_133:
        LCALL     ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_141:
        RET
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiPicker254

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond255 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_132
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond256 Using cfiCommon0
          CFI (cfiCond256) Function UI_UpdateLcd
          CFI (cfiCond256) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_127
          CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond256) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond256) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond256) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond256) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond256) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond256) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond256) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond256) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond256) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond256) CFA_SP SP+-4
          CFI (cfiCond256) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond257 Using cfiCommon0
          CFI (cfiCond257) Function UI_UpdateLcd
          CFI (cfiCond257) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_128
          CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond257) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond257) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond257) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond257) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond257) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond257) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond257) CFA_SP SP+-4
          CFI (cfiCond257) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond258 Using cfiCommon0
          CFI (cfiCond258) Function UI_UpdateLcd
          CFI (cfiCond258) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_129
          CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond258) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond258) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond258) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond258) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond258) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond258) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond258) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond258) CFA_SP SP+-4
          CFI (cfiCond258) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function UI_UpdateLcd
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_130
          CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond259) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond259) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond259) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond259) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond259) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond259) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond259) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond259) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond259) CFA_SP SP+-4
          CFI (cfiCond259) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function UI_UpdateLcd
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_131
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond260) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond260) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond260) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond260) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond260) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-4
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker261 Using cfiCommon1
          CFI (cfiPicker261) NoFunction
          CFI (cfiPicker261) Picker
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_137:
        MOV       R2,?V0
        MOV       R3,A
        CLR       A
        RET
          CFI EndBlock cfiCond255
          CFI EndBlock cfiCond256
          CFI EndBlock cfiCond257
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiPicker261

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond262 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function UI_UpdateLcd
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond263) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond263) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond263) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond263) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond263) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond263) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond263) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond263) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond263) CFA_SP SP+-2
          CFI (cfiCond263) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function UI_UpdateLcd
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond264) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond264) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond264) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond264) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond264) CFA_SP SP+-2
          CFI (cfiCond264) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function UI_UpdateLcd
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond265) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond265) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond265) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-2
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function UI_UpdateLcd
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond266) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond266) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond266) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond266) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond266) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-2
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond267 Using cfiCommon0
          CFI (cfiCond267) Function UI_UpdateLcd
          CFI (cfiCond267) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond267) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond267) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond267) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond267) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond267) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond267) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond267) CFA_SP SP+-2
          CFI (cfiCond267) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond268 Using cfiCommon0
          CFI (cfiCond268) Function UI_UpdateLcd
          CFI (cfiCond268) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond268) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond268) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond268) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond268) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond268) CFA_SP SP+-2
          CFI (cfiCond268) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function UI_UpdateLcd
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond269) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond269) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond269) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond269) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond269) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond269) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond269) CFA_SP SP+-2
          CFI (cfiCond269) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function UI_UpdateLcd
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond270) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond270) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond270) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond270) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond270) CFA_SP SP+-2
          CFI (cfiCond270) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond271 Using cfiCommon0
          CFI (cfiCond271) Function UI_UpdateLcd
          CFI (cfiCond271) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond271) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond271) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond271) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond271) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond271) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond271) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond271) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond271) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond271) CFA_SP SP+-2
          CFI (cfiCond271) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond272 Using cfiCommon0
          CFI (cfiCond272) Function UI_UpdateLcd
          CFI (cfiCond272) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond272) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond272) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond272) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond272) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond272) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond272) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond272) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond272) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond272) CFA_SP SP+-2
          CFI (cfiCond272) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker273 Using cfiCommon1
          CFI (cfiPicker273) NoFunction
          CFI (cfiPicker273) Picker
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiCond267
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiCond271
          CFI EndBlock cfiCond272
          CFI EndBlock cfiPicker273

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond274 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_149
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function UI_UpdateLcd
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond275) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond275) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond275) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond275) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond275) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond275) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond275) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond275) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond275) CFA_SP SP+-2
          CFI (cfiCond275) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker276 Using cfiCommon1
          CFI (cfiPicker276) NoFunction
          CFI (cfiPicker276) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiPicker276
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond277 Using cfiCommon0
          CFI Function uiActionAppSecificMenu
          CFI Conditional ??CrossCallReturnLabel_142
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function UI_UpdateLcd
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond278) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond278) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond278) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond278) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond278) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond278) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+-2
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function UI_UpdateLcd
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond279) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond279) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond279) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond279) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond279) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-2
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function UI_Init
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-2
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function UI_Init
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-2
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function UI_Init
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-2
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function UI_Init
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond283) CFA_SP SP+-2
          CFI (cfiCond283) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function UI_UpdateLcd
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond284) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond284) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond284) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond284) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond284) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond284) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond284) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond284) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond284) CFA_SP SP+-2
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function UI_UpdateLcd
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond285) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond285) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond285) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-2
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker286 Using cfiCommon1
          CFI (cfiPicker286) NoFunction
          CFI (cfiPicker286) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiPicker286

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond287 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function UI_UpdateLcd
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond288) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond288) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond288) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond288) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-2
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function UI_UpdateLcd
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond289) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond289) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond289) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond289) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-2
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker290 Using cfiCommon1
          CFI (cfiPicker290) NoFunction
          CFI (cfiPicker290) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiPicker290

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond291 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function UI_UpdateLcd
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond292) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond292) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond292) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond292) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond292) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+-2
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond293 Using cfiCommon0
          CFI (cfiCond293) Function UI_UpdateLcd
          CFI (cfiCond293) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond293) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond293) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond293) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond293) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond293) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond293) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond293) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond293) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond293) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond293) CFA_SP SP+-2
          CFI (cfiCond293) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function UI_UpdateLcd
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond294) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond294) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond294) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond294) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond294) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond294) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond294) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond294) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond294) CFA_SP SP+-2
          CFI (cfiCond294) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker295 Using cfiCommon1
          CFI (cfiPicker295) NoFunction
          CFI (cfiPicker295) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function uiCreateChannelMaskString
        ; Setup parameters for call to function uiCreateChannelMaskString
        ; Setup parameters for call to function uiCreateChannelMaskString
        ; Setup parameters for call to function uiCreateChannelMaskString
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiPicker295
// 1769 
// 1770 /*********************************************************************
// 1771  * @fn          uiProcessPermitJoin
// 1772  *
// 1773  * @brief       Update the Network-Joining status LED
// 1774  *
// 1775  * @param       duration - The time left for joining, or 0 if the device is closed for joining
// 1776  *
// 1777  * @return      none
// 1778  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1779 static void *uiProcessPermitJoin( void *duration )
uiProcessPermitJoin:
          CFI Block cfiBlock296 Using cfiCommon0
          CFI Function uiProcessPermitJoin
        CODE
// 1780 {
        FUNCALL uiProcessPermitJoin, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uiProcessPermitJoin, UI_UpdateLcd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1781   if (*(uint8 *)duration > 0)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       DPTR,#uiNwkOpenState
        JZ        ??uiProcessPermitJoin_0
// 1782   {
// 1783     uiNwkOpenState |= NWK_OPEN_FOR_JOINING;
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.0
        SJMP      ??uiProcessPermitJoin_1
// 1784   }
// 1785   else
// 1786   {
// 1787     uiNwkOpenState &= ~NWK_OPEN_FOR_JOINING;
??uiProcessPermitJoin_0:
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.0
??uiProcessPermitJoin_1:
        MOVX      @DPTR,A
// 1788   }
// 1789 
// 1790   HalLedBlink ( UI_LED_NETWORK_OPEN_STATE, 0, uiNetworkOpenStateLedDutyCycle[uiNwkOpenState], HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#uiNetworkOpenStateLedDutyCycle & 0xff
        ADD       A,R0
        MOV       DPL,A
        CLR       A
        ADDC      A,#(uiNetworkOpenStateLedDutyCycle >> 8) & 0xff
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       R2,#0x0
        MOV       R1,#0x8
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
// 1791   
// 1792   UI_UpdateLcd();
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
// 1793   
// 1794   return ( NULL );
        MOV       R2,#0x0
        MOV       R3,#0x0
        LJMP      ?Subroutine2 & 0xFFFF
// 1795 }
          CFI EndBlock cfiBlock296
// 1796 
// 1797 /*********************************************************************
// 1798  * @fn          UI_Init
// 1799  *
// 1800  * @brief       Initialize the user-interface module.
// 1801  *              This function must be called by the application during its initializatin.
// 1802  *
// 1803  * @param       app_task_id_value - the task-id of the application task
// 1804  *              lcd_auto_update_event_value - the event mask (single bit) for using as the lcd-auto-update event.
// 1805  *              key_auto_repeat_event_value - the event mask (single bit) for using as the key-auto-repeat event. 
// 1806  *              ui_IdentifyTimeAttribute_value - a pointer to the identify attribute's value.
// 1807  *              app_title_value - a pointer to a string, holding the title of the sample app.
// 1808  *              _uiAppUpdateLcd - a pointer to a fuction to update the LCD when displaying the application-
// 1809  *                specific screens.
// 1810  *              _uiAppStatesMain - a pointer to the application-specific state-table.
// 1811  *
// 1812  * @return      none
// 1813  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1814 void UI_Init(uint8 app_task_id_value, uint16 lcd_auto_update_event_value, uint16 key_auto_repeat_event_value, uint16 * ui_IdentifyTimeAttribute_value, char * app_title_value, uiAppUpdateLcd_t _uiAppUpdateLcd, const uiState_t _uiAppStatesMain[])
UI_Init:
          CFI Block cfiBlock297 Using cfiCommon0
          CFI Function UI_Init
        CODE
// 1815 {
        FUNCALL UI_Init, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_Init, bdb_RegisterIdentifyTimeChangeCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_Init, bdb_RegisterBindNotificationCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_Init, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
// 1816   uiAppTaskId = app_task_id_value;
        MOV       DPTR,#uiAppTaskId
        MOVX      @DPTR,A
// 1817   uiLcdAutoUpdateEvent = lcd_auto_update_event_value;
        MOV       DPTR,#uiLcdAutoUpdateEvent
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1818   pUiIdentifyTimeAttribute = ui_IdentifyTimeAttribute_value;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV       DPTR,#pUiIdentifyTimeAttribute
        LCALL     ??Subroutine53_0 & 0xFFFF
// 1819   uiAppTitleStr = app_title_value;
??CrossCallReturnLabel_145:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV       DPTR,#uiAppTitleStr
        LCALL     ??Subroutine53_0 & 0xFFFF
// 1820   uiAppUpdateLcd = _uiAppUpdateLcd;
??CrossCallReturnLabel_146:
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV       DPTR,#uiAppUpdateLcd
        LCALL     ??Subroutine53_0 & 0xFFFF
// 1821   uiAppStatesMain = _uiAppStatesMain;
??CrossCallReturnLabel_147:
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL     ??Subroutine53_0 & 0xFFFF
// 1822 #ifdef BDB_TL_TARGET
// 1823   uiKeyAutoRepeatEvent = key_auto_repeat_event_value;
// 1824 #endif
// 1825 
// 1826   ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &uiProcessPermitJoin);
??CrossCallReturnLabel_148:
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??uiProcessPermitJoin::?relay` & 0xff
        MOV       R3,#(`??uiProcessPermitJoin::?relay` >> 8) & 0xff
        MOV       R1,#0x7
        LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
// 1827   
// 1828   bdb_RegisterIdentifyTimeChangeCB( uiProcessIdentifyTimeChange );
        ; Setup parameters for call to function bdb_RegisterIdentifyTimeChangeCB
        MOV       R2,#`??uiProcessIdentifyTimeChange::?relay` & 0xff
        MOV       R3,#(`??uiProcessIdentifyTimeChange::?relay` >> 8) & 0xff
        LCALL     `??bdb_RegisterIdentifyTimeChangeCB::?relay`; Banked call to: bdb_RegisterIdentifyTimeChangeCB
// 1829   bdb_RegisterBindNotificationCB( uiProcessBindNotification );
        ; Setup parameters for call to function bdb_RegisterBindNotificationCB
        MOV       R2,#`??uiProcessBindNotification::?relay` & 0xff
        MOV       R3,#(`??uiProcessBindNotification::?relay` >> 8) & 0xff
        LCALL     `??bdb_RegisterBindNotificationCB::?relay`; Banked call to: bdb_RegisterBindNotificationCB
// 1830   
// 1831 #ifdef BDB_TL_TARGET
// 1832   bdb_RegisterTouchlinkTargetEnableCB( uiProcessTouchlinkTargetEnable );
// 1833 #endif
// 1834 
// 1835   bdb_StartCommissioning(BDB_COMMISSIONING_REJOIN_EXISTING_NETWORK_ON_STARTUP);
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0x0
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
// 1836 }
        LJMP      ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock297

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond298 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond299 Using cfiCommon0
          CFI (cfiCond299) Function UI_Init
          CFI (cfiCond299) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond299) CFA_SP SP+-2
          CFI (cfiCond299) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond300 Using cfiCommon0
          CFI (cfiCond300) Function UI_Init
          CFI (cfiCond300) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond300) CFA_SP SP+-2
          CFI (cfiCond300) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function UI_Init
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+-2
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker302 Using cfiCommon1
          CFI (cfiPicker302) NoFunction
          CFI (cfiPicker302) Picker
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_107:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond298
          CFI EndBlock cfiCond299
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiPicker302

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond303 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function UI_Init
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond304) CFA_SP SP+-2
          CFI (cfiCond304) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker305 Using cfiCommon1
          CFI (cfiPicker305) NoFunction
          CFI (cfiPicker305) Picker
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_106:
        MOV       R1,A
        MOV       DPTR,#uiAppStatesMain
        RET
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiPicker305
// 1837 
// 1838 /*********************************************************************
// 1839  * @fn      uiProcessTouchlinkTargetEnable
// 1840  *
// 1841  * @brief   Uopdate the UI when the touchlink target functionality is enabled or disabled
// 1842  *
// 1843  * @param   enable - the current state of the touchlink target (0 - disabled; 1 - enabled)
// 1844  *
// 1845  * @return  none
// 1846  */
// 1847 #ifdef BDB_TL_TARGET
// 1848 static void uiProcessTouchlinkTargetEnable( uint8 enable )
// 1849 {
// 1850   if ( enable )
// 1851   {
// 1852     uiNwkOpenState |= NWK_OPEN_TOUCHLINK_AS_TARGET;
// 1853   }
// 1854   else
// 1855   {
// 1856     uiNwkOpenState &= ~NWK_OPEN_TOUCHLINK_AS_TARGET;
// 1857   }
// 1858 
// 1859   HalLedBlink ( UI_LED_NETWORK_OPEN_STATE, 0, uiNetworkOpenStateLedDutyCycle[uiNwkOpenState], HAL_LED_DEFAULT_FLASH_TIME );
// 1860 
// 1861   UI_UpdateLcd();
// 1862 }
// 1863 #endif
// 1864 
// 1865 /*********************************************************************
// 1866  * @fn      uiProcessIdentifyTimeChange
// 1867  *
// 1868  * @brief   Uopdate the UI when the identify time attribute's value has changed
// 1869  *
// 1870  * @param   endpoint - the endpoints which had its identify time attribute changed
// 1871  *
// 1872  * @return  none
// 1873  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1874 static void uiProcessIdentifyTimeChange( uint8 endpoint )
uiProcessIdentifyTimeChange:
          CFI Block cfiBlock306 Using cfiCommon0
          CFI Function uiProcessIdentifyTimeChange
        CODE
// 1875 {
        FUNCALL uiProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uiProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1876   if ( *pUiIdentifyTimeAttribute > 0 )
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_102:
        JZ        ??uiProcessIdentifyTimeChange_0
// 1877   {
// 1878     HalLedBlink ( UI_LED_IDENTIFY, 0xFF, UI_LED_IDENTIFY_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOV       R3,#0x32
        MOV       R2,#-0x1
        MOV       R1,#0x4
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP      ??uiProcessIdentifyTimeChange_1
// 1879   }
// 1880   else
// 1881   {
// 1882     HalLedSet ( UI_LED_IDENTIFY, HAL_LED_MODE_OFF );
??uiProcessIdentifyTimeChange_0:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x4
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1883   }
// 1884 }
??uiProcessIdentifyTimeChange_1:
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock306
// 1885 
// 1886 /*********************************************************************
// 1887  * @fn      uiProcessBindNotification
// 1888  *
// 1889  * @brief   Uopdate the UI when a bind is added
// 1890  *
// 1891  * @param   data - information about the new binding entry
// 1892  *
// 1893  * @return  none
// 1894  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1895 static void uiProcessBindNotification( bdbBindNotificationData_t *data )
uiProcessBindNotification:
          CFI Block cfiBlock307 Using cfiCommon0
          CFI Function uiProcessBindNotification
        CODE
// 1896 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1897   //note: 'data' argument contains information about the new binding, which can be useful for the user's application
// 1898 
// 1899   if (FBMatchesFound < 255)
        MOV       DPTR,#FBMatchesFound
        MOVX      A,@DPTR
        CPL       A
        JZ        ??uiProcessBindNotification_0
// 1900   {
// 1901     FBMatchesFound++;
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
// 1902   }
// 1903 }
??uiProcessBindNotification_0:
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock307
// 1904 
// 1905 /*********************************************************************
// 1906  * @fn      UI_DeviceStateUpdated
// 1907  *
// 1908  * @brief   Uopdate the UI when the device state has changed
// 1909  *
// 1910  * @param   NwkState - the new network-state of the device
// 1911  *
// 1912  * @return  none
// 1913  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1914 void UI_DeviceStateUpdated(devStates_t NwkState)
UI_DeviceStateUpdated:
          CFI Block cfiBlock308 Using cfiCommon0
          CFI Function UI_DeviceStateUpdated
        CODE
// 1915 {
        FUNCALL UI_DeviceStateUpdated, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_DeviceStateUpdated, UI_UpdateLcd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
// 1916   uint8 LedDutyCycle;
// 1917 
// 1918   uiNwkStateShadow = NwkState;
        MOV       DPTR,#uiNwkStateShadow
        MOVX      @DPTR,A
// 1919 
// 1920   switch (NwkState)
        ADD       A,#-0x6
        JZ        ??UI_DeviceStateUpdated_0
        DEC       A
        JZ        ??UI_DeviceStateUpdated_1
        ADD       A,#-0x2
        JNZ       ??UI_DeviceStateUpdated_2
// 1921   {
// 1922     case DEV_ZB_COORD:
// 1923       LedDutyCycle = UI_LED_COORDINATOR_DUTY_CYCLE;
        MOV       R3,#0x4b
// 1924       break;
        SJMP      ??UI_DeviceStateUpdated_3
// 1925     case DEV_ROUTER:
// 1926       LedDutyCycle = UI_LED_ROUTER_DUTY_CYCLE;
??UI_DeviceStateUpdated_1:
        MOV       R3,#0x5f
// 1927       break;
        SJMP      ??UI_DeviceStateUpdated_3
// 1928     case DEV_END_DEVICE:
// 1929       LedDutyCycle = UI_LED_END_DEVICE_DUTY_CYCLE;
??UI_DeviceStateUpdated_0:
        MOV       R3,#0x64
// 1930       break;
        SJMP      ??UI_DeviceStateUpdated_3
// 1931     default:
// 1932       LedDutyCycle = 0;
??UI_DeviceStateUpdated_2:
        MOV       R3,#0x0
// 1933       break;
// 1934   }
// 1935   
// 1936   HalLedBlink ( UI_LED_DEVICE_STATE, 0, LedDutyCycle, UI_LED_DEVICE_STATE_FLASH_TIME );
??UI_DeviceStateUpdated_3:
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x60
        MOV       R5,#0xf
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
// 1937 
// 1938   UI_UpdateLcd();
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
// 1939 }
        LJMP      ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock308

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiLcdCursorLine>`:
        DATA8
        DB 255

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiSelectedBdbComissioningMod`:
        DATA8
        DB 14

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiAddInstallCodeLastStatus>`:
        DATA8
        DB 255

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiCommissioningStateStr>`:
        DATA16
        DW `?<Constant "--">`

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiInstallCode>`:
        DATA8
        DB 131
        DB 254
        DB 211
        DB 64
        DB 122
        DB 147
        DB 151
        DB 35
        DB 165
        DB 198
        DB 57
        DB 178
        DB 105
        DB 22
        DB 213
        DB 5
        DB 195
        DB 181

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiInstallCodeAddr>`:
        DATA8
        DB 231
        DB 252
        DB 14
        DB 4
        DB 0
        DB 75
        DB 18
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiStates>`:
        DATA16
        DW gui_states_main

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiNetworkOpenStateLedDutyCyc`:
        DATA8
        DB 0
        DB 25
        DB 75
        DB 100

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiUintToString::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiUintToString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiArrayToString::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiArrayToString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiCreateChannelMaskString::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiCreateChannelMaskString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionMenuJump::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionMenuJump

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionStartComissioning::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionStartComissioning

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionSetInstallCode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionSetInstallCode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionAppSecificMenu::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionAppSecificMenu

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UI_ActionBackFromAppMenu::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UI_ActionBackFromAppMenu

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionProcessConfigureChannels::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionProcessConfigureChannels

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionProcessConfigurePanId::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionProcessConfigurePanId

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionProcessPrepareInstallCode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionProcessPrepareInstallCode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionConfigureEnables::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionConfigureEnables

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionResetToFactoryNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionResetToFactoryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UI_MainStateMachine::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UI_MainStateMachine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UI_UpdateComissioningStatus::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UI_UpdateComissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UI_UpdateLcd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UI_UpdateLcd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiProcessPermitJoin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiProcessPermitJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UI_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UI_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiProcessIdentifyTimeChange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiProcessBindNotification::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiProcessBindNotification

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UI_DeviceStateUpdated::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UI_DeviceStateUpdated

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "--">`:
        DB "--"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EXST">`:
        DB "EXST"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "NF">`:
        DB "NF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "FORM">`:
        DB "FORM"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "NS">`:
        DB "NS"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "JOIN">`:
        DB "JOIN"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "FB">`:
        DB "FB"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "IN">`:
        DB "IN"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<     BACK     >">`:
        DB "<     BACK     >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ENABLED">`:
        DB "ENABLED"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "DISABLED">`:
        DB "DISABLED"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<FINDNG+BINDNG >">`:
        DB "<FINDNG+BINDNG >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<NWK FORMATION >">`:
        DB "<NWK FORMATION >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "< NWK STEERING >">`:
        DB "< NWK STEERING >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<  CONFIGURE   >">`:
        DB "<  CONFIGURE   >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Resetting,">`:
        DB "Resetting,"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Please wait...">`:
        DB "Please wait..."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "< RESET TO FN  >">`:
        DB "< RESET TO FN  >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "hold OK for help">`:
        DB "hold OK for help"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<     HELP     >">`:
        DB "<     HELP     >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\033 \\032 to move     ">`:
        DB "\033 \032 to move     "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\030 \\031 change value">`:
        DB "\030 \031 change value"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OK to execute   ">`:
        DB "OK to execute   "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Please wait...  ">`:
        DB "Please wait...  "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "xx              ">`:
        DB "xx              "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "NotOnNwk">`:
        DB "NotOnNwk"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Open">`:
        DB "Open"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CLOSED">`:
        DB "CLOSED"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Id000 Srch000/00">`:
        DB "Id000 Srch000/00"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<  COMMISSION  >">`:
        DB "<  COMMISSION  >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<ADD INSTL CODE>">`:
        DB "<ADD INSTL CODE>"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<SET INSTL CODE>">`:
        DB "<SET INSTL CODE>"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<SET I.C. ADDR >">`:
        DB "<SET I.C. ADDR >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Last status:">`:
        DB "Last status:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "---">`:
        DB "---"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SUCCESS">`:
        DB "SUCCESS"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ERROR (0x  )    ">`:
        DB "ERROR (0x  )    "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<APLY INST CODE>">`:
        DB "<APLY INST CODE>"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "       I.C. ADDR">`:
        DB "       I.C. ADDR"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "       INST CODE">`:
        DB "       INST CODE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<   APP MENU   >">`:
        DB "<   APP MENU   >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "1234567890123456">`:
        DB "1234567890123456"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<PRI CHANL MASK>">`:
        DB "<PRI CHANL MASK>"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<SEC CHANL MASK>">`:
        DB "<SEC CHANL MASK>"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " PRI CHANL MASK ">`:
        DB " PRI CHANL MASK "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " SEC CHANL MASK ">`:
        DB " SEC CHANL MASK "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "    0xFFFF (any)">`:
        DB "    0xFFFF (any)"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "    0x          ">`:
        DB "    0x          "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<    PAN ID    >">`:
        DB "<    PAN ID    >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "     PAN ID     ">`:
        DB "     PAN ID     "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "nxxxx cxx axxxx ">`:
        DB "nxxxx cxx axxxx "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "          <INFO>">`:
        DB "          <INFO>"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZC">`:
        DB "ZC"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZR DIST">`:
        DB "ZR DIST"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZR CENT">`:
        DB "ZR CENT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZED p">`:
        DB "ZED p"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZC (   )">`:
        DB "ZC (   )"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_fa:
        DD 250

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1f4:
        DD 500

        END
// 1940 
// 
// 5 252 bytes in segment BANKED_CODE
//   126 bytes in segment BANK_RELAYS
//    37 bytes in segment XDATA_I
//    37 bytes in segment XDATA_ID
//   883 bytes in segment XDATA_ROM_C
//    29 bytes in segment XDATA_Z
// 
//   163 bytes of CODE     memory
//   875 bytes of CONST    memory (+ 8 bytes shared)
// 5 252 bytes of HUGECODE memory
//    66 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
