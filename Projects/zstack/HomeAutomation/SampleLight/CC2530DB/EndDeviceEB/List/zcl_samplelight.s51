///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              20/Apr/2021  00:42:46
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    Command line       =  
//        -f C:\users\slavko\Temp\EW662e.tmp ("C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c"
//        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
//        NV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK
//        -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
//        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -lC
//        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\zcl_samplelight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplelight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclSampleLight_BasicResetCB::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyCB::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zclSampleLight_Init::?relay`
        FUNCTION `??zclSampleLight_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_OnOffCB::?relay`,0203H
        FUNCTION `??zclSampleLight_ProcessIdentifyTimeChange::?re`,0203H
        PUBLIC `??zclSampleLight_event_loop::?relay`
        FUNCTION `??zclSampleLight_event_loop::?relay`,0203H
        PUBWEAK __Constant_3e8
        FUNCTION zclSampleLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_IdentifyQueryRspCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclSampleLight_Init
        FUNCTION zclSampleLight_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleLight_OnOffCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleLight_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC zclSampleLight_TaskID
        PUBLIC zclSampleLight_event_loop
        FUNCTION zclSampleLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
`??ZDP_EndDeviceBindReq::?relay` SYMBOL "?relay", ZDP_EndDeviceBindReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclSampleLight_ResetAttributesToDefaultValues SYMBOL "zclSampleLight_ResetAttributesToDefaultValues"
??zclSampleLight_ResetAttributesToDefaultValues SYMBOL "?relay", zclSampleLight_ResetAttributesToDefaultValues
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zclSampleLight_Init SYMBOL "zclSampleLight_Init"
`??zclSampleLight_Init::?relay` SYMBOL "?relay", zclSampleLight_Init
zclSampleLight_event_loop SYMBOL "zclSampleLight_event_loop"
`??zclSampleLight_event_loop::?relay` SYMBOL "?relay", zclSampleLight_event_loop

        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDP_EndDeviceBindReq::?relay`
        FUNCTION `??ZDP_EndDeviceBindReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN ??zclSampleLight_ResetAttributesToDefaultValues
        FUNCTION ??zclSampleLight_ResetAttributesToDefaultValues,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_Attrs
        EXTERN zclSampleLight_IdentifyTime
        EXTERN zclSampleLight_OnOff
        EXTERN zclSampleLight_ResetAttributesToDefaultValues
        FUNCTION zclSampleLight_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_SimpleDesc
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample light application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee Light, based on Z-Stack 3.0. It can be configured as an
//   43   On/Off light or as a dimmable light, by undefining or defining ZCL_LEVEL_CTRL, respectively.
//   44 
//   45   This application is based on the common sample-application user interface. Please see the main
//   46   comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
//   47   this sample applicetion.
//   48   
//   49   Application-specific UI peripherals being used:
//   50 
//   51   - LEDs:
//   52     LED1 reflect the current light state (On / Off accordingly).
//   53 
//   54   Application-specific menu system:
//   55 
//   56     <TOGGLE LIGHT> Toggle the local light and display its status and level
//   57       Press OK to toggle the local light on and off.
//   58       This screen shows the following information
//   59         Line1: (only populated if ZCL_LEVEL_CTRL is defined)
//   60           LEVEL XXX - xxx is the current level of the light if the light state is ON, or the target level
//   61             of the light when the light state is off. The target level is the level that the light will be
//   62             set to when it is switched from off to on using the on or the toggle commands.
//   63         Line2:
//   64           LIGHT OFF / ON: shows the current state of the light.
//   65       Note when ZCL_LEVEL_CTRL is enabled:
//   66         - If the light state is ON and the light level is X, and then the light receives the OFF or TOGGLE 
//   67           commands: The level will decrease gradually until it reaches 1, and only then the light state will
//   68           be changed to OFF. The level then will be restored to X, with the state staying OFF. At this stage
//   69           the light is not lighting, and the level represent the target level for the next ON or TOGGLE 
//   70           commands.
//   71         - If the light state is OFF and the light level is X, and then the light receives the ON or TOGGLE
//   72           commands; The level will be set to 1, the light state will be set to ON, and then the level will
//   73           increase gradually until it reaches level X.
//   74         - Any level-setting command will affect the level directly, and may also affect the on/off state,
//   75           depending on the command's arguments.       
//   76 
//   77 *********************************************************************/
//   78 
//   79 /*********************************************************************
//   80  * INCLUDES
//   81  */
//   82 #include "ZComDef.h"
//   83 #include "OSAL.h"
//   84 #include "AF.h"
//   85 #include "ZDApp.h"
//   86 #include "ZDObject.h"
//   87 #include "MT_SYS.h"
//   88 
//   89 #include "nwk_util.h"
//   90 
//   91 #include "zcl.h"
//   92 #include "zcl_general.h"
//   93 #include "zcl_ha.h"
//   94 #include "zcl_diagnostic.h"
//   95 
//   96 #include "zcl_samplelight.h"
//   97    
//   98 #include "bdb.h"
//   99 #include "bdb_interface.h"
//  100 
//  101  //GP_UPDATE
//  102 #include "gp_interface.h"
//  103    
//  104 #include "onboard.h"
//  105 
//  106 /* HAL */
//  107 #include "hal_lcd.h"
//  108 #include "hal_led.h"
//  109 #include "hal_key.h"
//  110 
//  111 #include "NLMEDE.h"
//  112 
//  113 // Added to include TouchLink initiator functionality 
//  114 #if defined ( BDB_TL_INITIATOR )
//  115   #include "bdb_touchlink_initiator.h"
//  116 #endif // BDB_TL_INITIATOR
//  117 
//  118 #if defined ( BDB_TL_TARGET )
//  119   #include "bdb_touchlink_target.h"
//  120 #endif // BDB_TL_TARGET
//  121 
//  122 #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
//  123   #include "bdb_touchlink.h"
//  124 #endif
//  125 
//  126 #include "zcl_sampleapps_ui.h"
//  127 
//  128 /*********************************************************************
//  129  * MACROS
//  130  */
//  131 //#define UI_STATE_TOGGLE_LIGHT 1 //UI_STATE_BACK_FROM_APP_MENU is item #0, so app item numbers should start from 1
//  132 //
//  133 //#define APP_TITLE "TI Sample Light"
//  134 
//  135 /*********************************************************************
//  136  * TYPEDEFS
//  137  */
//  138 
//  139 /*********************************************************************
//  140  * GLOBAL VARIABLES
//  141  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  142 byte zclSampleLight_TaskID;
zclSampleLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  143 //uint8 zclSampleLightSeqNum;
//  144 
//  145 /*********************************************************************
//  146  * GLOBAL FUNCTIONS
//  147  */
//  148 
//  149 /*********************************************************************
//  150  * LOCAL VARIABLES
//  151  */
//  152 //afAddrType_t zclSampleLight_DstAddr;
//  153 
//  154 #define ZCLSAMPLELIGHT_BINDINGLIST       2

        RSEG XDATA_I:XDATA:NOROOT(0)
//  155 static cId_t bindingInClusters[ZCLSAMPLELIGHT_BINDINGLIST] =
bindingInClusters:
        DATA32
        DS 4
        REQUIRE `?<Initializer for bindingInClusters>`
        REQUIRE __INIT_XDATA_I
//  156 {
//  157   ZCL_CLUSTER_ID_GEN_ON_OFF,
//  158   ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  159 };
//  160 
//  161 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  162 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 7
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  163 {
//  164   20,                                 // Test endpoint
//  165   0,
//  166   &zclSampleLight_TaskID,
//  167   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  168   (afNetworkLatencyReq_t)0            // No Network Latency req
//  169 };
//  170 
//  171 //#ifdef ZCL_LEVEL_CTRL
//  172 //uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
//  173 //uint8 zclSampleLight_NewLevel;        // new level when done moving
//  174 //uint8 zclSampleLight_LevelChangeCmd; // current level change was triggered by an on/off command
//  175 //bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
//  176 //int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  177 //int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  178 //uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  179 //#endif
//  180 
//  181 /*********************************************************************
//  182  * LOCAL FUNCTIONS
//  183  */
//  184 static void zclSampleLight_HandleKeys( byte shift, byte keys );
//  185 static void zclSampleLight_BasicResetCB( void );
//  186 static void zclSampleLight_OnOffCB( uint8 cmd );
//  187 
//  188 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
//  189 static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  190 static void zclSampleLight_ProcessIdentifyTimeChange( void );
//  191 
//  192 ////GP_UPDATE
//  193 //#if (ZG_BUILD_RTR_TYPE)
//  194 //static void gp_CommissioningMode(bool isEntering);
//  195 //static uint8 gp_ChangeChannelReq(void);
//  196 //#endif
//  197 
//  198 
//  199 //static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
//  200 
//  201 
//  202 //#ifdef ZCL_LEVEL_CTRL
//  203 //static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  204 //static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
//  205 //static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
//  206 //static void zclSampleLight_LevelControlStopCB( void );
//  207 //static void zclSampleLight_DefaultMove( uint8 OnOff );
//  208 //static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
//  209 //static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
//  210 //static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  211 //static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  212 //static void zclSampleLight_AdjustLightLevel( void );
//  213 //#endif
//  214 
//  215 // Functions to process ZCL Foundation incoming Command/Response messages
//  216 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  217 #ifdef ZCL_READ
//  218 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  219 #endif
//  220 #ifdef ZCL_WRITE
//  221 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  222 #endif
//  223 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  224 #ifdef ZCL_DISCOVER
//  225 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  226 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  227 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  228 #endif
//  229 
//  230 //static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
//  231 //
//  232 //void zclSampleLight_UiActionToggleLight(uint16 keys);
//  233 //void zclSampleLight_UiUpdateLcd(uint8 uiCurrentState, char * line[3]);
//  234 //void zclSampleLight_UpdateLedState(void);
//  235 
//  236 /*********************************************************************
//  237  * CONSTANTS
//  238  */
//  239 //const uiState_t zclSampleLight_UiStatesMain[] = 
//  240 //{
//  241 //  /*  UI_STATE_BACK_FROM_APP_MENU  */   {UI_STATE_DEFAULT_MOVE,       UI_STATE_TOGGLE_LIGHT,  UI_KEY_SW_5_PRESSED, &UI_ActionBackFromAppMenu}, //do not change this line, except for the second item, which should point to the last entry in this menu
//  242 //  /*  UI_STATE_TOGGLE_LIGHT        */   {UI_STATE_BACK_FROM_APP_MENU, UI_STATE_DEFAULT_MOVE,  UI_KEY_SW_5_PRESSED, &zclSampleLight_UiActionToggleLight},
//  243 //};
//  244 //
//  245 //#define LEVEL_CHANGED_BY_LEVEL_CMD  0
//  246 //#define LEVEL_CHANGED_BY_ON_CMD     1
//  247 //#define LEVEL_CHANGED_BY_OFF_CMD    2
//  248 
//  249 /*********************************************************************
//  250  * STATUS STRINGS
//  251  */
//  252 //#ifdef LCD_SUPPORTED
//  253 //  const char sLightOn[]      = "   LIGHT ON     ";
//  254 //  const char sLightOff[]     = "   LIGHT OFF    ";
//  255 //  #ifdef ZCL_LEVEL_CTRL
//  256 //    char sLightLevel[]        = "   LEVEL ###    "; // displays level 1-254
//  257 //  #endif
//  258 //#endif
//  259 
//  260 /*********************************************************************
//  261  * REFERENCED EXTERNALS
//  262  */
//  263 //extern int16 zdpExternalStateTaskID;
//  264 
//  265 /*********************************************************************
//  266  * ZCL General Profile Callback table
//  267  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  268 static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
zclSampleLight_CmdCallbacks:
        DATA8
        DS 32
        REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  269 {
//  270   zclSampleLight_BasicResetCB,         		   	// Basic Cluster Reset command
//  271   zclSampleLight_IdentifyCB,                                  	// Identify Trigger Effect command
//  272   zclSampleLight_IdentifyQueryRspCB,			// Identify Query Response command
//  273   zclSampleLight_OnOffCB,                 			// On/Off cluster commands
//  274   NULL,                                   					// On/Off cluster enhanced command On with Recall Global Scene
//  275   NULL,                                   					// On/Off cluster enhanced command On with Timed Off
//  276 #ifdef ZCL_LEVEL_CTRL
//  277   NULL, 		// Level Control Move to Level command
//  278   NULL,      		// Level Control Move command
//  279   NULL,        		// Level Control Step command
//  280   NULL,        		// Level Control Stop command
//  281 #endif
//  282 #ifdef ZCL_GROUPS
//  283   NULL,                                   // Group Response commands
//  284 #endif
//  285 #ifdef ZCL_SCENES
//  286   NULL,                                  // Scene Store Request command
//  287   NULL,                                  // Scene Recall Request command
//  288   NULL,                                  // Scene Response command
//  289 #endif
//  290 #ifdef ZCL_ALARMS
//  291   NULL,                                  // Alarm (Response) commands
//  292 #endif
//  293 #ifdef SE_UK_EXT
//  294   NULL,                                  // Get Event Log command
//  295   NULL,                                  // Publish Event Log command
//  296 #endif
//  297   NULL,                                  // RSSI Location command
//  298   NULL                                   // RSSI Location Response command
//  299 };
//  300 
//  301 /*********************************************************************
//  302  * @fn          zclSampleLight_Init
//  303  *
//  304  * @brief       Initialization function for the zclGeneral layer.
//  305  *
//  306  * @param       none
//  307  *
//  308  * @return      none
//  309  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  310 void zclSampleLight_Init( byte task_id )
zclSampleLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleLight_Init
        CODE
//  311 {
        FUNCALL zclSampleLight_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
//  312   zclSampleLight_TaskID = task_id;
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      @DPTR,A
//  313 
//  314   // Set destination address to indirect
//  315 //  zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
//  316 //  zclSampleLight_DstAddr.endPoint = 0;
//  317 //  zclSampleLight_DstAddr.addr.shortAddr = 0;
//  318 
//  319   // Register the Simple Descriptor for this application
//  320   bdb_RegisterSimpleDescriptor( &zclSampleLight_SimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclSampleLight_SimpleDesc & 0xff
        MOV       R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  321 
//  322   
//  323    // This app is part of the Home Automation Profile
//  324 //  zcl_Init( &zclSampleLight_SimpleDesc );
//  325   // Register the ZCL General Cluster Library callback functions
//  326   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV       R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  327 
//  328   // Register the application's attribute list
//  329 //  zclSampleLight_ResetAttributesToDefaultValues();
//  330   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, SAMPLELIGHT_MAX_ATTRIBUTES, zclSampleLight_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclSampleLight_Attrs & 0xff
        MOV       R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV       R2,#0xc
        MOV       R1,#0x0
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  331 
//  332 //#ifdef ZCL_LEVEL_CTRL
//  333 //  zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
//  334 //#endif
//  335 
//  336   // Register the Application to receive the unprocessed Foundation command/response messages
//  337   zcl_registerForMsg( zclSampleLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  338 
//  339 //#ifdef ZCL_DISCOVER
//  340 //  // Register the application's command list
//  341 //  zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
//  342 //#endif
//  343 
//  344   // Register low voltage NV memory protection application callback
//  345 //  RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
//  346 
//  347   // Register for all key events - This app will handle all key events
//  348   RegisterForKeys( zclSampleLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  349   
//  350 //  bdb_RegisterCommissioningStatusCB( zclSampleLight_ProcessCommissioningStatus );
//  351   
//  352   // Register for a test endpoint
//  353   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV       R2,#sampleLight_TestEp & 0xff
        MOV       R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  354 
//  355 //#ifdef ZCL_DIAGNOSTIC
//  356 //  // Register the application's callback function to read/write attribute data.
//  357 //  // This is only required when the attribute data format is unknown to ZCL.
//  358 //  zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  359 //
//  360 //  if ( zclDiagnostic_InitStats() == ZSuccess )
//  361 //  {
//  362 //    // Here the user could start the timer to save Diagnostics to NV
//  363 //  }
//  364 //#endif
//  365 //  
//  366 ////GP_UPDATE  
//  367 //#if (ZG_BUILD_RTR_TYPE)  
//  368 //  gp_RegisterCommissioningModeCB(gp_CommissioningMode);
//  369 //  gp_RegisterGPChangeChannelReqCB(gp_ChangeChannelReq);
//  370 //#endif
//  371 //  
//  372 //  zdpExternalStateTaskID = zclSampleLight_TaskID;
//  373 //
//  374 //  UI_Init(zclSampleLight_TaskID, SAMPLEAPP_LCD_AUTO_UPDATE_EVT, SAMPLEAPP_KEY_AUTO_REPEAT_EVT, &zclSampleLight_IdentifyTime, APP_TITLE, &zclSampleLight_UiUpdateLcd, zclSampleLight_UiStatesMain);
//  375 //
//  376 //  UI_UpdateLcd();
//  377 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  378 
//  379 /*********************************************************************
//  380  * @fn          zclSample_event_loop
//  381  *
//  382  * @brief       Event Loop Processor for zclGeneral.
//  383  *
//  384  * @param       none
//  385  *
//  386  * @return      none
//  387  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  388 uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
zclSampleLight_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
        CODE
//  389 {
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V0,R2
        MOV       ?V1,R3
//  390   afIncomingMSGPacket_t *MSGpkt;
//  391 
//  392   (void)task_id;  // Intentionally unreferenced parameter
//  393 
//  394   if ( events & SYS_EVENT_MSG )
        MOV       A,R3
        ANL       A,#0x80
        JZ        $+5
        LJMP      ??zclSampleLight_event_loop_0 & 0xFFFF
//  395   {
//  396     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
//  397     {
//  398       switch ( MSGpkt->hdr.event )
//  399       {
//  400         case ZCL_INCOMING_MSG:
//  401           // Incoming ZCL Foundation command/response messages
//  402           zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  403           break;
//  404 
//  405         case KEY_CHANGE:
//  406           zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  407           break;
//  408 
//  409 //        case ZDO_STATE_CHANGE:
//  410 //          UI_DeviceStateUpdated((devStates_t)(MSGpkt->hdr.status));
//  411 //          break;
//  412 
//  413         default:
//  414           break;
//  415       }
//  416 
//  417       // Release the memory
//  418       osal_msg_deallocate( (uint8 *)MSGpkt );
//  419     }
//  420 
//  421     // return unprocessed events
//  422     return (events ^ SYS_EVENT_MSG);
//  423   }
//  424     
//  425   if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??zclSampleLight_event_loop_1 & 0xFFFF
//  426   {
//  427 	  if ( zclSampleLight_IdentifyTime > 0 ) 
        MOV       DPTR,#zclSampleLight_IdentifyTime
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??zclSampleLight_event_loop_2
//  428 	  {
//  429 		  zclSampleLight_IdentifyTime--;
        MOV       DPTR,#zclSampleLight_IdentifyTime
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOVX      @DPTR,A
//  430 	  }
//  431 	  zclSampleLight_ProcessIdentifyTimeChange();
??zclSampleLight_event_loop_2:
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL     `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  432 	  return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        MOV       A,?V0
        XRL       A,#0x1
        MOV       R2,A
        MOV       R3,?V1
        LJMP      ??zclSampleLight_event_loop_3 & 0xFFFF
//  433   }
??zclSampleLight_event_loop_4:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JNC       ??zclSampleLight_event_loop_5
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V2,#bindingInClusters & 0xff
        MOV       ?V3,#(bindingInClusters >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       ?V2,#0x2
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V2,#0x4
        MOV       ?V3,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R1,#0x0
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
??zclSampleLight_event_loop_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
        MOV       A,R2
        ORL       A,R7
        JZ        ??zclSampleLight_event_loop_6
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x34
        JZ        ??zclSampleLight_event_loop_7
        ADD       A,#0x74
        JNZ       $+5
        LJMP      ??zclSampleLight_event_loop_4 & 0xFFFF
        SJMP      ??zclSampleLight_event_loop_5
??zclSampleLight_event_loop_7:
        MOV       A,R2
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclSampleLight_event_loop_8
        ADD       A,#-0x3
        JNZ       ??zclSampleLight_event_loop_9
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclSampleLight_event_loop_9
        INC       R0
        SJMP      ??CrossCallReturnLabel_0
??zclSampleLight_event_loop_8:
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP      ??zclSampleLight_event_loop_10
??zclSampleLight_event_loop_11:
        INC       R0
??zclSampleLight_event_loop_10:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JC        ??zclSampleLight_event_loop_11
??zclSampleLight_event_loop_9:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleLight_event_loop_5
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclSampleLight_event_loop_5
??zclSampleLight_event_loop_6:
        MOV       R2,?V0
        MOV       A,?V1
        XRL       A,#0x80
        MOV       R3,A
        SJMP      ??zclSampleLight_event_loop_3
//  434   
//  435 
//  436 //#ifdef ZCL_LEVEL_CTRL
//  437 //  if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
//  438 //  {
//  439 //    zclSampleLight_AdjustLightLevel();
//  440 //    return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
//  441 //  }
//  442 //#endif
//  443 //
//  444 //#if ZG_BUILD_ENDDEVICE_TYPE    
//  445 //  if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
//  446 //  {
//  447 //    bdb_ZedAttemptRecoverNwk();
//  448 //    return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
//  449 //  }
//  450 //#endif
//  451 //
//  452 //  if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
//  453 //  {
//  454 //    UI_UpdateLcd();
//  455 //    return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
//  456 //  }
//  457 //
//  458 //  if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
//  459 //  {
//  460 //    UI_MainStateMachine(UI_KEY_AUTO_PRESSED);
//  461 //    return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
//  462 //  }
//  463 
//  464   // Discard unknown events
//  465   return 0;
??zclSampleLight_event_loop_1:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclSampleLight_event_loop_3:
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  466 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zclSampleLight_event_loop
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOV       R0,#0x0
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//  467 
//  468 
//  469 /*********************************************************************
//  470  * @fn      zclSampleLight_HandleKeys
//  471  *
//  472  * @brief   Handles all key events for this device.
//  473  *
//  474  * @param   shift - true if in shift/alt.
//  475  * @param   keys - bit field for key events. Valid entries:
//  476  *                 HAL_KEY_SW_5
//  477  *                 HAL_KEY_SW_4
//  478  *                 HAL_KEY_SW_2
//  479  *                 HAL_KEY_SW_1
//  480  *		   HAL_KEY_SW_6 -- Button S1 if available
//  481 *		   HAL_KEY_SW_7 -- Button S2 if available
//  482  *
//  483  * @return  none
//  484  */
//  485 static void zclSampleLight_HandleKeys( byte shift, byte keys )
//  486 {
//  487 //  UI_MainStateMachine(keys);
//  488 	
//  489   zAddrType_t dstAddr;
//  490   
//  491   (void)shift;  // Intentionally unreferenced parameter
//  492 
//  493   if ( keys & HAL_KEY_SW_6 )
//  494   {
//  495     // Initiate an End Device Bind Request, this bind request will
//  496     // only use a cluster list that is important to binding.
//  497     dstAddr.addrMode = afAddr16Bit;
//  498     dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
//  499     ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  500                            SAMPLELIGHT_ENDPOINT,
//  501                            ZCL_HA_PROFILE_ID,
//  502                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  503                            0, NULL,   // No Outgoing clusters to bind
//  504                            TRUE );
//  505   }
//  506 
//  507   if ( keys & HAL_KEY_SW_3 )
//  508   {
//  509   }
//  510 
//  511   if ( keys & HAL_KEY_SW_4 )
//  512   {
//  513   }
//  514 }
//  515 
//  516 
//  517 /*********************************************************************
//  518  * @fn      zclSampleLight_ProcessIdentifyTimeChange
//  519  *
//  520  * @brief   Called to process any change to the IdentifyTime attribute.
//  521  *
//  522  * @param   none
//  523  *
//  524  * @return  none
//  525  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  526 static void zclSampleLight_ProcessIdentifyTimeChange( void )
zclSampleLight_ProcessIdentifyTimeChange:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIdentifyTimeChange
        CODE
//  527 {
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  528   if ( zclSampleLight_IdentifyTime > 0 )
        MOV       DPTR,#zclSampleLight_IdentifyTime
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??zclSampleLight_ProcessIdentifyTimeChange_0
//  529   {
//  530     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
//  531     HalLedBlink ( HAL_LED_3, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOV       R3,#0x5
        MOV       R2,#-0x1
        MOV       R1,#0x4
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP      ??zclSampleLight_ProcessIdentifyTimeChange_1
//  532   }
//  533   else
//  534   {
//  535     if ( zclSampleLight_OnOff ) {
??zclSampleLight_ProcessIdentifyTimeChange_0:
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        JZ        ??zclSampleLight_ProcessIdentifyTimeChange_2
//  536 	    HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        SJMP      ??zclSampleLight_ProcessIdentifyTimeChange_3
//  537     }
//  538     else {
//  539 	    HalLedSet ( HAL_LED_3, HAL_LED_MODE_OFF );
??zclSampleLight_ProcessIdentifyTimeChange_2:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
??zclSampleLight_ProcessIdentifyTimeChange_3:
        MOV       R1,#0x4
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  540     }
//  541     osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleLight_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  542   }
//  543 }
??zclSampleLight_ProcessIdentifyTimeChange_1:
          CFI EndBlock cfiBlock6
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock7
//  544 
//  545 
//  546 
//  547 
//  548 ////GP_UPDATE
//  549 //#if (ZG_BUILD_RTR_TYPE)
//  550 /*********************************************************************
//  551  * @fn      gp_CommissioningMode
//  552  *
//  553  * @brief   Callback that notifies the application that gp Proxy is entering 
//  554  *          into commissioning mode
//  555  *
//  556  * @param   isEntering - 
//  557  *
//  558  * @return  
//  559  */
//  560 static void gp_CommissioningMode(bool isEntering)
//  561 {
//  562   if(isEntering)
//  563   {
//  564     //Led on indicating enter commissioning mode
//  565   }
//  566   else
//  567   {
//  568     //Led off indicating enter commissioning mode
//  569   }
//  570 }
//  571 
//  572 
//  573 
//  574 //GP_UPDATE
//  575 /*********************************************************************
//  576  * @fn      gp_ChangeChannelReq
//  577  *
//  578  * @brief   Callback function to notify the application about a GP commissioning 
//  579  * request that will change the current channel for at most 
//  580  * gpBirectionalCommissioningChangeChannelTimeout ms
//  581  *
//  582  * @param   channel - Channel in which the commissioning will take place
//  583  *
//  584  * @return  TRUE to allow change channel, FALSE to do not allow
//  585  */
//  586 static uint8 gp_ChangeChannelReq(void)
//  587 {
//  588   bool allowChangeChannel = TRUE;
//  589   
//  590   //Check application state to decide if allow change channel or not
//  591   
//  592   return allowChangeChannel;
//  593 }
//  594 
//  595 //#endif
//  596 
//  597 
//  598 
//  599 
//  600 
//  601 ///*********************************************************************
//  602 // * @fn      zclSampleLight_ProcessCommissioningStatus
//  603 // *
//  604 // * @brief   Callback in which the status of the commissioning process are reported
//  605 // *
//  606 // * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
//  607 // *
//  608 // * @return  none
//  609 // */
//  610 //static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
//  611 //{
//  612 //  switch(bdbCommissioningModeMsg->bdbCommissioningMode)
//  613 //  {
//  614 //    case BDB_COMMISSIONING_FORMATION:
//  615 //      if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  616 //      {
//  617 //        //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
//  618 //        bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
//  619 //      }
//  620 //      else
//  621 //      {
//  622 //        //Want to try other channels?
//  623 //        //try with bdb_setChannelAttribute
//  624 //      }
//  625 //    break;
//  626 //    case BDB_COMMISSIONING_NWK_STEERING:
//  627 //      if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  628 //      {
//  629 //        //YOUR JOB:
//  630 //        //We are on the nwk, what now?
//  631 //      }
//  632 //      else
//  633 //      {
//  634 //        //See the possible errors for nwk steering procedure
//  635 //        //No suitable networks found
//  636 //        //Want to try other channels?
//  637 //        //try with bdb_setChannelAttribute
//  638 //      }
//  639 //    break;
//  640 //    case BDB_COMMISSIONING_FINDING_BINDING:
//  641 //      if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  642 //      {
//  643 //        //YOUR JOB:
//  644 //      }
//  645 //      else
//  646 //      {
//  647 //        //YOUR JOB:
//  648 //        //retry?, wait for user interaction?
//  649 //      }
//  650 //    break;
//  651 //    case BDB_COMMISSIONING_INITIALIZATION:
//  652 //      //Initialization notification can only be successful. Failure on initialization 
//  653 //      //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
//  654 //      
//  655 //      //YOUR JOB:
//  656 //      //We are on a network, what now?
//  657 //      
//  658 //    break;
//  659 //#if ZG_BUILD_ENDDEVICE_TYPE    
//  660 //    case BDB_COMMISSIONING_PARENT_LOST:
//  661 //      if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
//  662 //      {
//  663 //        //We did recover from losing parent
//  664 //      }
//  665 //      else
//  666 //      {
//  667 //        //Parent not found, attempt to rejoin again after a fixed delay
//  668 //        osal_start_timerEx(zclSampleLight_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
//  669 //      }
//  670 //    break;
//  671 //#endif 
//  672 //  }
//  673 //  
//  674 //  UI_UpdateComissioningStatus(bdbCommissioningModeMsg);
//  675 //}
//  676 
//  677 
//  678 
//  679 
//  680 /*********************************************************************
//  681  * @fn      zclSampleLight_BasicResetCB
//  682  *
//  683  * @brief   Callback from the ZCL General Cluster Library
//  684  *          to set all the Basic Cluster attributes to default values.
//  685  *
//  686  * @param   none
//  687  *
//  688  * @return  none
//  689  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  690 static void zclSampleLight_BasicResetCB( void )
zclSampleLight_BasicResetCB:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function zclSampleLight_BasicResetCB
        CODE
//  691 {
        FUNCALL zclSampleLight_BasicResetCB, zclSampleLight_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  692   //Reset every attribute in all supported cluster to their default value.
//  693 
//  694   zclSampleLight_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
        LCALL     ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
//  695 
//  696 //  zclSampleLight_UpdateLedState();
//  697 //
//  698 //  // update the display
//  699 //  UI_UpdateLcd( ); 
//  700 }
        SJMP      ?Subroutine1
          CFI EndBlock cfiBlock8
//  701 
//  702 
//  703 
//  704 
//  705 /*********************************************************************
//  706  * @fn      zclSampleLight_IdentifyCB
//  707  *
//  708  * @brief   Callback from the ZCL General Cluster Library when
//  709  *          it received an Identity Command for this application.
//  710  *
//  711  * @param   srcAddr - source address and endpoint of the response message
//  712  * @param   identifyTime - the number of seconds to identify yourself
//  713  *
//  714  * @return  none
//  715  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  716 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
zclSampleLight_IdentifyCB:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
        CODE
//  717 {
        FUNCALL zclSampleLight_IdentifyCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  718   zclSampleLight_IdentifyTime = pCmd->identifyTime;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#zclSampleLight_IdentifyTime
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  719   zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL     `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  720 }
        SJMP      ?Subroutine1
          CFI EndBlock cfiBlock9
//  721 
//  722 
//  723 
//  724 /*********************************************************************
//  725  * @fn      zclSampleLight_IdentifyQueryRspCB
//  726  *
//  727  * @brief   Callback from the ZCL General Cluster Library when
//  728  *          it received an Identity Query Response Command for this application.
//  729  *
//  730  * @param   srcAddr - requestor's address
//  731  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  732  *
//  733  * @return  none
//  734  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  735 static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zclSampleLight_IdentifyQueryRspCB:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyQueryRspCB
        CODE
//  736 {
        ; Saved register size: 0
        ; Auto size: 0
//  737   // Query Response (with timeout value)
//  738   (void)pRsp;
//  739 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock10
//  740 
//  741 
//  742 
//  743 /*********************************************************************
//  744  * @fn      zclSampleLight_OnOffCB
//  745  *
//  746  * @brief   Callback from the ZCL General Cluster Library when
//  747  *          it received an On/Off Command for this application.
//  748  *
//  749  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  750  *
//  751  * @return  none
//  752  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  753 static void zclSampleLight_OnOffCB( uint8 cmd )
zclSampleLight_OnOffCB:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
        CODE
//  754 {
        FUNCALL zclSampleLight_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  755   // Turn on the light
//  756   if ( cmd == COMMAND_ON )
        MOV       A,#0x1
        XRL       A,R6
        JZ        ??zclSampleLight_OnOffCB_0
//  757     zclSampleLight_OnOff = LIGHT_ON;
//  758 
//  759   // Turn off the light
//  760   else if ( cmd == COMMAND_OFF )
        MOV       A,R1
        JZ        ??zclSampleLight_OnOffCB_1
//  761     zclSampleLight_OnOff = LIGHT_OFF;
//  762 
//  763   // Toggle the light
//  764   else
//  765   {
//  766     if ( zclSampleLight_OnOff == LIGHT_OFF )
        MOV       DPTR,#zclSampleLight_OnOff
        MOVX      A,@DPTR
        JNZ       ??zclSampleLight_OnOffCB_1
//  767       zclSampleLight_OnOff = LIGHT_ON;
??zclSampleLight_OnOffCB_0:
        MOV       DPTR,#zclSampleLight_OnOff
        MOV       A,#0x1
        SJMP      ??zclSampleLight_OnOffCB_2
//  768     else
//  769       zclSampleLight_OnOff = LIGHT_OFF;
??zclSampleLight_OnOffCB_1:
        MOV       DPTR,#zclSampleLight_OnOff
        CLR       A
??zclSampleLight_OnOffCB_2:
        MOVX      @DPTR,A
//  770   }
//  771 
//  772   // In this sample app, we use LED4 to simulate the Light
//  773   if ( zclSampleLight_OnOff == LIGHT_ON )
//  774     HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  775   else
//  776     HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,A
        MOV       R1,#0x8
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  777 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock11

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bindingInClusters>`:
        DATA16
        DW 6
        DW 8

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 20
        DB 0
        DATA16
        DW zclSampleLight_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_CmdCallbacks>`:
        DATA16
        DW `??zclSampleLight_BasicResetCB::?relay`
        DW `??zclSampleLight_IdentifyCB::?relay`
        DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
        DW `??zclSampleLight_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessIdentifyTimeChange::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_OnOffCB

        END
//  778 
//  779 //#ifdef ZCL_LEVEL_CTRL
//  780 ///*********************************************************************
//  781 // * @fn      zclSampleLight_TimeRateHelper
//  782 // *
//  783 // * @brief   Calculate time based on rate, and startup level state machine
//  784 // *
//  785 // * @param   newLevel - new level for current level
//  786 // *
//  787 // * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
//  788 // */
//  789 //static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
//  790 //{
//  791 //  uint32 diff;
//  792 //  uint32 newLevel32;
//  793 //
//  794 //  // remember current and new level
//  795 //  zclSampleLight_NewLevel = newLevel;
//  796 //  zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
//  797 //
//  798 //  // calculate diff
//  799 //  newLevel32 = (uint32)1000 * newLevel;
//  800 //  if ( zclSampleLight_LevelCurrentLevel > newLevel )
//  801 //  {
//  802 //    diff = zclSampleLight_CurrentLevel32 - newLevel32;
//  803 //    zclSampleLight_NewLevelUp = FALSE;  // moving down
//  804 //  }
//  805 //  else
//  806 //  {
//  807 //    diff = newLevel32 - zclSampleLight_CurrentLevel32;
//  808 //    zclSampleLight_NewLevelUp = TRUE;   // moving up
//  809 //  }
//  810 //
//  811 //  return ( diff );
//  812 //}
//  813 //#ifdef ZCL_LEVEL_CTRL
//  814 
//  815 ///*********************************************************************
//  816 // * @fn      zclSampleLight_MoveBasedOnRate
//  817 // *
//  818 // * @brief   Calculate time based on rate, and startup level state machine
//  819 // *
//  820 // * @param   newLevel - new level for current level
//  821 // * @param   rate16   - fixed point rate (e.g. 16.123)
//  822 // *
//  823 // * @return  none
//  824 // */
//  825 //static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
//  826 //{
//  827 //  uint32 diff;
//  828 //
//  829 //  // determine how much time (in 10ths of seconds) based on the difference and rate
//  830 //  zclSampleLight_Rate32 = rate;
//  831 //  diff = zclSampleLight_TimeRateHelper( newLevel );
//  832 //  zclSampleLight_LevelRemainingTime = diff / rate;
//  833 //  if ( !zclSampleLight_LevelRemainingTime )
//  834 //  {
//  835 //    zclSampleLight_LevelRemainingTime = 1;
//  836 //  }
//  837 //
//  838 //  osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
//  839 //}
//  840 
//  841 
//  842 
//  843 
//  844 
//  845 
//  846 ///*********************************************************************
//  847 // * @fn      zclSampleLight_MoveBasedOnTime
//  848 // *
//  849 // * @brief   Calculate rate based on time, and startup level state machine
//  850 // *
//  851 // * @param   newLevel  - new level for current level
//  852 // * @param   time      - in 10ths of seconds
//  853 // *
//  854 // * @return  none
//  855 // */
//  856 //static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
//  857 //{
//  858 //  uint16 diff;
//  859 //
//  860 //  // determine rate (in units) based on difference and time
//  861 //  diff = zclSampleLight_TimeRateHelper( newLevel );
//  862 //  zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
//  863 //  zclSampleLight_Rate32 = diff / time;
//  864 //
//  865 //  osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
//  866 //}
//  867 
//  868 
//  869 
//  870 
//  871 
//  872 
//  873 
//  874 ///*********************************************************************
//  875 // * @fn      zclSampleLight_GetTime
//  876 // *
//  877 // * @brief   Determine amount of time that MoveXXX will take to complete.
//  878 // *
//  879 // * @param   level = new level to move to
//  880 // *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
//  881 // *
//  882 // * @return  none
//  883 // */
//  884 //static uint16 zclSampleLight_GetTime( uint8 newLevel, uint16 time )
//  885 //{
//  886 //  // there is a hiearchy of the amount of time to use for transistioning
//  887 //  // check each one in turn. If none of defaults are set, then use fastest
//  888 //  // time possible.
//  889 //  if ( time == 0xFFFF )
//  890 //  {
//  891 //    // use On or Off Transition Time if set (not 0xffff)
//  892 //    if ( zclSampleLight_LevelCurrentLevel > newLevel )
//  893 //    {
//  894 //      time = zclSampleLight_LevelOffTransitionTime;
//  895 //    }
//  896 //    else
//  897 //    {
//  898 //      time = zclSampleLight_LevelOnTransitionTime;
//  899 //    }
//  900 //
//  901 //    // else use OnOffTransitionTime if set (not 0xffff)
//  902 //    if ( time == 0xFFFF )
//  903 //    {
//  904 //      time = zclSampleLight_LevelOnOffTransitionTime;
//  905 //    }
//  906 //
//  907 //    // else as fast as possible
//  908 //    if ( time == 0xFFFF )
//  909 //    {
//  910 //      time = 1;
//  911 //    }
//  912 //  }
//  913 //
//  914 //  if ( time == 0 )
//  915 //  {
//  916 //    time = 1; // as fast as possible
//  917 //  }
//  918 //
//  919 //  return ( time );
//  920 //}
//  921 
//  922 
//  923 
//  924 
//  925 
//  926 ///*********************************************************************
//  927 // * @fn      zclSampleLight_DefaultMove
//  928 // *
//  929 // * @brief   We were turned on/off. Use default time to move to on or off.
//  930 // *
//  931 // * @param   zclSampleLight_OnOff - must be set prior to calling this function.
//  932 // *
//  933 // * @return  none
//  934 // */
//  935 //static void zclSampleLight_DefaultMove( uint8 OnOff )
//  936 //{
//  937 //  uint8  newLevel;
//  938 //  uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
//  939 //  uint16 time;
//  940 //
//  941 //  // if moving to on position, move to on level
//  942 //  if ( OnOff )
//  943 //  {
//  944 //    if (zclSampleLight_OnOff == LIGHT_OFF)
//  945 //    {
//  946 //      zclSampleLight_LevelCurrentLevel = ATTR_LEVEL_MIN_LEVEL;
//  947 //    }
//  948 //    
//  949 //    if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
//  950 //    {
//  951 //      // The last Level (before going OFF) should be used)
//  952 //      newLevel = zclSampleLight_LevelLastLevel;
//  953 //    }
//  954 //    else
//  955 //    {
//  956 //      newLevel = zclSampleLight_LevelOnLevel;
//  957 //    }
//  958 //
//  959 //    time = zclSampleLight_LevelOnTransitionTime;
//  960 //
//  961 //  }
//  962 //  else
//  963 //  {
//  964 //    newLevel = ATTR_LEVEL_MIN_LEVEL;
//  965 //
//  966 //    time = zclSampleLight_LevelOffTransitionTime;
//  967 //  }
//  968 //
//  969 //  // else use OnOffTransitionTime if set (not 0xffff)
//  970 //  if ( time == 0xFFFF )
//  971 //  {
//  972 //    time = zclSampleLight_LevelOnOffTransitionTime;
//  973 //  }
//  974 //
//  975 //  // else as fast as possible
//  976 //  if ( time == 0xFFFF )
//  977 //  {
//  978 //    time = 1;
//  979 //  }
//  980 //
//  981 //  // calculate rate based on time (int 10ths) for full transition (1-254)
//  982 //  rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
//  983 //
//  984 //  // start up state machine.
//  985 //  zclSampleLight_WithOnOff = TRUE;
//  986 //  zclSampleLight_MoveBasedOnRate( newLevel, rate );
//  987 //}
//  988 
//  989 
//  990 
//  991 
//  992 
//  993 ///*********************************************************************
//  994 // * @fn      zclSampleLight_AdjustLightLevel
//  995 // *
//  996 // * @brief   Called each 10th of a second while state machine running
//  997 // *
//  998 // * @param   none
//  999 // *
// 1000 // * @return  none
// 1001 // */
// 1002 //static void zclSampleLight_AdjustLightLevel( void )
// 1003 //{
// 1004 //  // one tick (10th of a second) less
// 1005 //  if ( zclSampleLight_LevelRemainingTime )
// 1006 //  {
// 1007 //    --zclSampleLight_LevelRemainingTime;
// 1008 //  }
// 1009 //
// 1010 //  // no time left, done
// 1011 //  if ( zclSampleLight_LevelRemainingTime == 0)
// 1012 //  {
// 1013 //    zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
// 1014 //  }
// 1015 //
// 1016 //  // still time left, keep increment/decrementing
// 1017 //  else
// 1018 //  {
// 1019 //    if ( zclSampleLight_NewLevelUp )
// 1020 //    {
// 1021 //      zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
// 1022 //    }
// 1023 //    else
// 1024 //    {
// 1025 //      zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
// 1026 //    }
// 1027 //    zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
// 1028 //  }
// 1029 //
// 1030 //  if (( zclSampleLight_LevelChangeCmd == LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
// 1031 //  {
// 1032 //    zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
// 1033 //  }
// 1034 //
// 1035 //  // also affect on/off
// 1036 //  if ( zclSampleLight_WithOnOff )
// 1037 //  {
// 1038 //    if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
// 1039 //    {
// 1040 //      zclSampleLight_OnOff = LIGHT_ON;
// 1041 //    }
// 1042 //    else
// 1043 //    {
// 1044 //      if (zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_ON_CMD)
// 1045 //      {
// 1046 //        zclSampleLight_OnOff = LIGHT_OFF;
// 1047 //      }
// 1048 //      else
// 1049 //      {
// 1050 //        zclSampleLight_OnOff = LIGHT_ON;
// 1051 //      }
// 1052 //      
// 1053 //      if (( zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
// 1054 //      {
// 1055 //        zclSampleLight_LevelCurrentLevel = zclSampleLight_LevelLastLevel;
// 1056 //      }
// 1057 //    }
// 1058 //  }
// 1059 //
// 1060 //  zclSampleLight_UpdateLedState();
// 1061 //  
// 1062 //  // display light level as we go
// 1063 //  UI_UpdateLcd( );
// 1064 //
// 1065 //  // keep ticking away
// 1066 //  if ( zclSampleLight_LevelRemainingTime )
// 1067 //  {
// 1068 //    osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1069 //  }
// 1070 //}
// 1071 
// 1072 
// 1073 
// 1074 
// 1075 //
// 1076 ///*********************************************************************
// 1077 // * @fn      zclSampleLight_LevelControlMoveToLevelCB
// 1078 // *
// 1079 // * @brief   Callback from the ZCL General Cluster Library when
// 1080 // *          it received a LevelControlMoveToLevel Command for this application.
// 1081 // *
// 1082 // * @param   pCmd - ZigBee command parameters
// 1083 // *
// 1084 // * @return  none
// 1085 // */
// 1086 //static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
// 1087 //{
// 1088 //  zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
// 1089 //
// 1090 //  zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1091 //  zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
// 1092 //}
// 1093 
// 1094 
// 1095 
// 1096 
// 1097 
// 1098 
// 1099 ///*********************************************************************
// 1100 // * @fn      zclSampleLight_LevelControlMoveCB
// 1101 // *
// 1102 // * @brief   Callback from the ZCL General Cluster Library when
// 1103 // *          it received a LevelControlMove Command for this application.
// 1104 // *
// 1105 // * @param   pCmd - ZigBee command parameters
// 1106 // *
// 1107 // * @return  none
// 1108 // */
// 1109 //static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
// 1110 //{
// 1111 //  uint8 newLevel;
// 1112 //  uint32 rate;
// 1113 //
// 1114 //  // convert rate from units per second to units per tick (10ths of seconds)
// 1115 //  // and move at that right up or down
// 1116 //  zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1117 //
// 1118 //  if ( pCmd->moveMode == LEVEL_MOVE_UP )
// 1119 //  {
// 1120 //    newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
// 1121 //  }
// 1122 //  else
// 1123 //  {
// 1124 //    newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
// 1125 //  }
// 1126 //
// 1127 //  zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
// 1128 //
// 1129 //  rate = (uint32)100 * pCmd->rate;
// 1130 //  zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1131 //}
// 1132 
// 1133 
// 1134 
// 1135 
// 1136 
// 1137 
// 1138 
// 1139 ///*********************************************************************
// 1140 // * @fn      zclSampleLight_LevelControlStepCB
// 1141 // *
// 1142 // * @brief   Callback from the ZCL General Cluster Library when
// 1143 // *          it received an On/Off Command for this application.
// 1144 // *
// 1145 // * @param   pCmd - ZigBee command parameters
// 1146 // *
// 1147 // * @return  none
// 1148 // */
// 1149 //static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
// 1150 //{
// 1151 //  uint8 newLevel;
// 1152 //
// 1153 //  // determine new level, but don't exceed boundaries
// 1154 //  if ( pCmd->stepMode == LEVEL_MOVE_UP )
// 1155 //  {
// 1156 //    if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
// 1157 //    {
// 1158 //      newLevel = ATTR_LEVEL_MAX_LEVEL;
// 1159 //    }
// 1160 //    else
// 1161 //    {
// 1162 //      newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
// 1163 //    }
// 1164 //  }
// 1165 //  else
// 1166 //  {
// 1167 //    if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
// 1168 //    {
// 1169 //      newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1170 //    }
// 1171 //    else
// 1172 //    {
// 1173 //      newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
// 1174 //    }
// 1175 //  }
// 1176 //  
// 1177 //  zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
// 1178 //
// 1179 //  // move to the new level
// 1180 //  zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1181 //  zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
// 1182 //}
// 1183 
// 1184 
// 1185 
// 1186 
// 1187 //
// 1188 ///*********************************************************************
// 1189 // * @fn      zclSampleLight_LevelControlStopCB
// 1190 // *
// 1191 // * @brief   Callback from the ZCL General Cluster Library when
// 1192 // *          it received an Level Control Stop Command for this application.
// 1193 // *
// 1194 // * @param   pCmd - ZigBee command parameters
// 1195 // *
// 1196 // * @return  none
// 1197 // */
// 1198 //static void zclSampleLight_LevelControlStopCB( void )
// 1199 //{
// 1200 //  // stop immediately
// 1201 //  osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
// 1202 //  zclSampleLight_LevelRemainingTime = 0;
// 1203 //}
// 1204 //#endif
// 1205 
// 1206 
// 1207 
// 1208 
// 1209 ///*********************************************************************
// 1210 // * @fn      zclSampleApp_BatteryWarningCB
// 1211 // *
// 1212 // * @brief   Called to handle battery-low situation.
// 1213 // *
// 1214 // * @param   voltLevel - level of severity
// 1215 // *
// 1216 // * @return  none
// 1217 // */
// 1218 //void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
// 1219 //{
// 1220 //  if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
// 1221 //  {
// 1222 //    // Send warning message to the gateway and blink LED
// 1223 //  }
// 1224 //  else if ( voltLevel == VOLT_LEVEL_BAD )
// 1225 //  {
// 1226 //    // Shut down the system
// 1227 //  }
// 1228 //}
// 1229 
// 1230 
// 1231 
// 1232 
// 1233 
// 1234 /******************************************************************************
// 1235  *
// 1236  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1237  *
// 1238  *****************************************************************************/
// 1239 
// 1240 /*********************************************************************
// 1241  * @fn      zclSampleLight_ProcessIncomingMsg
// 1242  *
// 1243  * @brief   Process ZCL Foundation incoming message
// 1244  *
// 1245  * @param   pInMsg - pointer to the received message
// 1246  *
// 1247  * @return  none
// 1248  */
// 1249 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
// 1250 {
// 1251   switch ( pInMsg->zclHdr.commandID )
// 1252   {
// 1253 #ifdef ZCL_READ
// 1254     case ZCL_CMD_READ_RSP:
// 1255       zclSampleLight_ProcessInReadRspCmd( pInMsg );
// 1256       break;
// 1257 #endif
// 1258 #ifdef ZCL_WRITE
// 1259     case ZCL_CMD_WRITE_RSP:
// 1260       zclSampleLight_ProcessInWriteRspCmd( pInMsg );
// 1261       break;
// 1262 #endif
// 1263 #ifdef ZCL_REPORT
// 1264     case ZCL_CMD_CONFIG_REPORT:
// 1265     	break;
// 1266     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1267     	break;
// 1268     case ZCL_CMD_READ_REPORT_CFG:
// 1269     	break;
// 1270     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1271     	break;
// 1272     case ZCL_CMD_REPORT:
// 1273       //bdb_ProcessIncomingReportingMsg( pInMsg );
// 1274       break;
// 1275 
// 1276     case ZCL_CMD_DEFAULT_RSP:
// 1277       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1278       break;
// 1279 #endif  
// 1280     case ZCL_CMD_DEFAULT_RSP:
// 1281       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1282       break;
// 1283 //#ifdef ZCL_DISCOVER     
// 1284 //    case ZCL_CMD_DISCOVER_RSP:
// 1285 //      zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1286 //      break;
// 1287 
// 1288 
// 1289 //    case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1290 //      zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1291 //      break;
// 1292 //
// 1293 //    case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1294 //      zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1295 //      break;
// 1296 //
// 1297 //    case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1298 //      zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
// 1299 //      break;
// 1300 //
// 1301 //    case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1302 //      zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1303 //      break;
// 1304 //#endif
// 1305     default:
// 1306       break;
// 1307   }
// 1308 
// 1309   if ( pInMsg->attrCmd )
// 1310     osal_mem_free( pInMsg->attrCmd );
// 1311 }
// 1312 
// 1313 #ifdef ZCL_READ
// 1314 /*********************************************************************
// 1315  * @fn      zclSampleLight_ProcessInReadRspCmd
// 1316  *
// 1317  * @brief   Process the "Profile" Read Response Command
// 1318  *
// 1319  * @param   pInMsg - incoming message to process
// 1320  *
// 1321  * @return  none
// 1322  */
// 1323 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1324 {
// 1325   zclReadRspCmd_t *readRspCmd;
// 1326   uint8 i;
// 1327 
// 1328   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1329   for (i = 0; i < readRspCmd->numAttr; i++)
// 1330   {
// 1331     // Notify the originator of the results of the original read attributes
// 1332     // attempt and, for each successfull request, the value of the requested
// 1333     // attribute
// 1334   }
// 1335 
// 1336   return ( TRUE );
// 1337 }
// 1338 #endif // ZCL_READ
// 1339 
// 1340 
// 1341 
// 1342 
// 1343 
// 1344 #ifdef ZCL_WRITE
// 1345 /*********************************************************************
// 1346  * @fn      zclSampleLight_ProcessInWriteRspCmd
// 1347  *
// 1348  * @brief   Process the "Profile" Write Response Command
// 1349  *
// 1350  * @param   pInMsg - incoming message to process
// 1351  *
// 1352  * @return  none
// 1353  */
// 1354 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1355 {
// 1356   zclWriteRspCmd_t *writeRspCmd;
// 1357   uint8 i;
// 1358 
// 1359   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1360   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1361   {
// 1362     // Notify the device of the results of the its original write attributes
// 1363     // command.
// 1364   }
// 1365 
// 1366   return ( TRUE );
// 1367 }
// 1368 #endif // ZCL_WRITE
// 1369 
// 1370 
// 1371 
// 1372 
// 1373 
// 1374 
// 1375 
// 1376 /*********************************************************************
// 1377  * @fn      zclSampleLight_ProcessInDefaultRspCmd
// 1378  *
// 1379  * @brief   Process the "Profile" Default Response Command
// 1380  *
// 1381  * @param   pInMsg - incoming message to process
// 1382  *
// 1383  * @return  none
// 1384  */
// 1385 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1386 {
// 1387   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1388 
// 1389   // Device is notified of the Default Response command.
// 1390   (void)pInMsg;
// 1391 
// 1392   return ( TRUE );
// 1393 }
// 1394 
// 1395 
// 1396 
// 1397 
// 1398 
// 1399 #ifdef ZCL_DISCOVER
// 1400 /*********************************************************************
// 1401  * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
// 1402  *
// 1403  * @brief   Process the Discover Commands Response Command
// 1404  *
// 1405  * @param   pInMsg - incoming message to process
// 1406  *
// 1407  * @return  none
// 1408  */
// 1409 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1410 {
// 1411   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1412   uint8 i;
// 1413 
// 1414   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1415   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1416   {
// 1417     // Device is notified of the result of its attribute discovery command.
// 1418   }
// 1419 
// 1420   return ( TRUE );
// 1421 }
// 1422 #endif // ZCL_DISCOVER
// 1423 
// 1424 
// 1425 
// 1426 
// 1427 
// 1428 ///*********************************************************************
// 1429 // * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
// 1430 // *
// 1431 // * @brief   Process the "Profile" Discover Attributes Response Command
// 1432 // *
// 1433 // * @param   pInMsg - incoming message to process
// 1434 // *
// 1435 // * @return  none
// 1436 // */
// 1437 //static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1438 //{
// 1439 //  zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1440 //  uint8 i;
// 1441 //
// 1442 //  discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1443 //  for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1444 //  {
// 1445 //    // Device is notified of the result of its attribute discovery command.
// 1446 //  }
// 1447 //
// 1448 //  return ( TRUE );
// 1449 //}
// 1450 
// 1451 
// 1452 
// 1453 
// 1454 
// 1455 
// 1456 ///*********************************************************************
// 1457 // * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
// 1458 // *
// 1459 // * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1460 // *
// 1461 // * @param   pInMsg - incoming message to process
// 1462 // *
// 1463 // * @return  none
// 1464 // */
// 1465 //static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1466 //{
// 1467 //  zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1468 //  uint8 i;
// 1469 //
// 1470 //  discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1471 //  for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1472 //  {
// 1473 //    // Device is notified of the result of its attribute discovery command.
// 1474 //  }
// 1475 //
// 1476 //  return ( TRUE );
// 1477 //}
// 1478 //#endif // ZCL_DISCOVER
// 1479 //
// 1480 //void zclSampleLight_UiActionToggleLight(uint16 keys)
// 1481 //{
// 1482 //  zclSampleLight_OnOffCB(COMMAND_TOGGLE);
// 1483 //}
// 1484 //
// 1485 //void zclSampleLight_UpdateLedState(void)
// 1486 //{
// 1487 //  // set the LED1 based on light (on or off)
// 1488 //  if ( zclSampleLight_OnOff == LIGHT_ON )
// 1489 //  {
// 1490 //    HalLedSet ( UI_LED_APP, HAL_LED_MODE_ON );
// 1491 //  }
// 1492 //  else
// 1493 //  {
// 1494 //    HalLedSet ( UI_LED_APP, HAL_LED_MODE_OFF );
// 1495 //  }
// 1496 //}
// 1497 
// 1498 
// 1499 
// 1500 
// 1501 //void zclSampleLight_UiUpdateLcd(uint8 UiState, char * line[3])
// 1502 //{
// 1503 //#ifdef LCD_SUPPORTED
// 1504 //#ifdef ZCL_LEVEL_CTRL
// 1505 //  zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[9] );
// 1506 //  line[0] = (char *)sLightLevel;
// 1507 //#endif // ZCL_LEVEL_CTRL
// 1508 //  line[1] = (char *)(zclSampleLight_OnOff ? sLightOn : sLightOff);
// 1509 //  line[2] = "< TOGGLE LIGHT >";
// 1510 //#endif
// 1511 //}
// 1512 
// 1513 /****************************************************************************
// 1514 ****************************************************************************/
// 1515 
// 1516 
// 
// 562 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//  43 bytes in segment XDATA_I
//  43 bytes in segment XDATA_ID
//   4 bytes in segment XDATA_ROM_C
//   1 byte  in segment XDATA_Z
// 
//  85 bytes of CODE     memory
//   0 bytes of CONST    memory (+ 4 bytes shared)
// 562 bytes of HUGECODE memory
//  44 bytes of XDATA    memory
//
//Errors: none
//Warnings: 5
