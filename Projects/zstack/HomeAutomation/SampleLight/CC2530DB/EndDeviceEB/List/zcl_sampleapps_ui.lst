###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               20/Apr/2021  00:42:47
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\Source\zcl_sampleapps_ui.c
#    Command line       =  
#        -f C:\users\slavko\Temp\EW6503.tmp ("C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\Source\zcl_sampleapps_ui.c" -D
#        BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE
#        -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -lC "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\zcl_sampleapps_ui.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj\zcl_sampleapps_ui.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\Source\zcl_sampleapps_ui.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampleapps_ui.c
      3            Revised:        $Date: 2016-8-1 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Z-Stack Sample Application User Interface.
      8          
      9          
     10            Copyright 2006-2016 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This file implements the user interface that is common to most of the Z-Stack sample applications.
     43          
     44            The sample applications are intended for the following platforms:
     45            - CC2530EM+SmartRF05
     46            - CC2538EM+SmartRF06
     47          
     48            The UI peripherals being used:
     49          
     50            - LCD based menu system:
     51              only using 3 lines of 16 characters each, for compatibility accross platforms.
     52          
     53            - Switches: 
     54              Using 4 directional switches and one selection switch. On SmartRF05, these are implemented by
     55              the joystick.
     56          
     57              - The switches have the following functionality, where applicable:
     58                - Left/Right: depending on the menu screen, these are used for either:
     59                  - move to the previous/next menu screen
     60                  - move to the previous/next digit/sub-item within a menu screen
     61                - Up/Down: change the value of the currently selected item
     62                - Ok (Select): execute the operation associated with the current menu screeen
     63          
     64            - LEDs:
     65              LED1 is used differently by the individual applications.
     66              the 3 other LEDs are common accross all the applications, and function as follows:
     67          
     68              - LED2: device state and type
     69                - Off: not connected to network
     70                - Constantly on: connected to the network as an end device
     71                - Blinking, 4 seconds period, 95% duty cycle: connected to the network as a router
     72                - Blinking, 4 seconds period, 75% duty cycle: connected to the network as a coordinator
     73          
     74              - LED3: identify status
     75                - Off: device is not identifying
     76                - Blinking, 1 second period, 50% duty cycle: device is identifying
     77          
     78              - LED4: open for joining status
     79                - Off: other devices cannot join through this device
     80                - Blinking, 1 second period, 25% duty cycle: other devices can join using standard comissioning
     81                - Blinking, 1 second period, 75% duty cycle: other devices can join using touchlink (i.e
     82                  touchlink is enabled on the current device as a target)
     83                - On: device can join using either standard comissioning or touchlink
     84          
     85            The menu system:
     86          
     87              <HELP> Wellcome screen
     88                Displays the sample application name.
     89                Press and hold [OK] to show a simple help screen.
     90                
     91                Help screen
     92                Release [OK] to go back to the welcome screen.
     93                
     94              <CONFIGURE> Configuration sub-menu
     95                Press [OK] to display the configuration sub-menu
     96                
     97                <ADD INSTL CODE> install code sub-menu
     98                  Press [OK] to display the install code sub-menu
     99                  
    100                  <SET INSTL CODE> set install code
    101                    Press [OK] to to edit the install code
    102                    
    103                    Install code editing screen
    104                      Press [LEFT] / [RIGHT] to select a digit
    105                      Press [UP] / [DOWN] to change the selected digit
    106                      press [OK] to to go back to the higher menu level
    107                      
    108                  <SET I.C. ADDR> set install code address (coordinator only)
    109                    Press [OK] to to edit the install code address
    110          
    111                    Install code address editing screen
    112                      Press [LEFT] / [RIGHT] to select a digit
    113                      Press [UP] / [DOWN] to change the selected digit
    114                      press [OK] to to go back to the higher menu level
    115                      
    116                  <APLY INST CODE> apply install code
    117                    Press [OK] to apply the address+Install-Code pair (coordinator) or the Install-Code (Routers and End-Devices)
    118                    This menu screen also displays the status of the last apply-install-code operation
    119          
    120                  <BACK> go back to higher menu level
    121                    press [OK] to to go back to the higher menu level
    122                  
    123                <T.L. TRGT TIME> Set the touchlink enable duration
    124                  Press and hold [UP] / [DOWN] to increase / decrease the displayed time. The longer the press, the faster
    125                  the change. 
    126                  The maximum duration is 86400 seconds. Increasing it above this value will display '(forever)' - 
    127                  in this setting, the touchlink target will stay active once started and untill manually stopped.
    128                  The minimum duration is 1 second. Decreasing it below this value sets tohchlink target to always disabled.
    129                  This menu item is only available if BDB_TL_TARGET is defined.
    130          
    131                <T.L. STEALING> enable/disable touchlink stealing
    132                  Press [OK] to toggle (enable/disable) touchlink stealing.
    133                  When stealing is enabled, a touchlink target may be 'stolen' by another device acting as a touchlink 
    134                  initiator, which will take it out of its existing network and add it to another network.
    135                  This menu item is only available if BDB_TL_TARGET is defined.
    136          
    137                <T.L. INITIATOR> enable/disable touchlink initiator
    138                  Press [OK] to toggle (enable/disable) touchlink initiator.
    139                  When enabled, touchlink initiator functionality will be executed as part of the commissioning procedure.
    140                  This menu item is only available if BDB_TL_INITIATOR is defined.
    141          
    142                <NWK FORMATION> enable/disable network formation for when cannot connect to an existing network
    143                  Press [OK] to toggle (enable/disable) network formation.
    144                  When enabled, network formation will be executed as part of the commissioning procedure, unless 
    145                  the device has already joined a network.
    146          
    147                <NWK STEERING> enable/disable attempting to connect to an existing network
    148                  Press [OK] to toggle (enable/disable) network steering.
    149                  When enabled, network steering will be executed as part of the commissioning procedure, so the
    150                  device will try to join an existing network, and will open the network for joining of other devices
    151                  once it is joined.
    152          
    153                <FINDNG+BINDNG> enable/disable finding and binding
    154                  Press [OK] to toggle (enable/disable) finding and binding (F&B).
    155                  When enabled, finding and binding will be executed as part of the commissioning procedure, so the
    156                  device will either start identifying, look for matchng devices that are currently identifying, or 
    157                  both (depending of whether it is a F&B target, initiator, or both).
    158                
    159                <PRI CHANL MASK> set the primary channel mask
    160                  Press [OK] to edit the primary channel list
    161          
    162                  Primary channel list editing screen
    163                    Press [LEFT] / [RIGHT] to select a channel (from channel 11 to channel 26)
    164                    Press [UP] / [DOWN] to enable / disable the selected channel, accordingly.
    165                    press [OK] to to go back to the higher menu level
    166          
    167                <SEC CHANL MASK> set the secondary channel mask
    168                  Press [OK] to edit the secondary channel list
    169                  
    170                  Secondary channel list editing screen
    171                    Press [LEFT] / [RIGHT] to select a channel (from channel 11 to channel 26)
    172                    Press [UP] / [DOWN] to enable / disable the selected channel, accordingly
    173                    press [OK] to to go back to the higher menu level
    174                  
    175                <PAN ID> set the PAN ID
    176                  Press [OK] to edit the PAN ID to create / connect to
    177                  
    178                  PAN ID editing screen
    179                    Press [LEFT] / [RIGHT] to select the digit to edit
    180                    Press [UP] / [DOWN] to change the selected digit
    181                    press [OK] to to go back to the higher menu level
    182                  
    183                <BACK> go back to higher menu level
    184                  press [OK] to to go back to the higher menu level
    185                
    186              <COMMISSION> start comissionin
    187                Press [OK] to start the commissioning procedure. (Note: this is disabled if a previous comissioning is
    188                already on-going).
    189                This procedure will execute the following methods, depending on whether they are enabled or disabled
    190                in the respective configuration item):
    191                  - Touchlink (as Touchlink Initiator)
    192                  - Network Steering
    193                  - Network Formation
    194                  - Finding and Binding
    195                This screen shows the following information
    196                  Line1:
    197                    Current commissioning method being executed:
    198                      TL: Touchlink
    199                      NS: Network Steering
    200                      NF: Network Formation
    201                      FB: Finding And Binding
    202                      PL: Parent Lost (for end devices only)
    203                      -- - idle (commissioning not currently active)
    204                    Network status
    205                      NotOnNwk - not currently connected to a network
    206                      FORM - network was formed by the current device during the latest execution of the NF method
    207                      JOIN - the current device joined an existing network during the latest execution of the NS method
    208                      TCHL - the current device joined a network using touchlink 
    209                      EXST - the device was already connected to a network when the commissioning was started
    210                    Joining permission state (not showing on end devices):
    211                      CLOSED - the current device is closed for joining of other devices
    212                      OpenXXX - the current device is open for joining of other devices, and will close in XXX seconds
    213                  Line2:
    214                    IdXXX - The device is identifying (if XXX > 0), and will stop identifying in XXX seconds.
    215                    SrchXXX/YY - The device is currently performing F&B as an Initiator (if XXX > 0), and will stop in
    216                      XXX seconds. YY is the number of matching endpoints that were foind, for which bindings were 
    217                      successfully created or already existed.
    218                  
    219              <T.L. TARGET> start touchlink target
    220                Press [OK] to start / stop touchlink target functionality.
    221                When not active, pressing [OK] will start touchlink target for the duration defined by the respective
    222                configuration item.
    223                When active, pressing OK will immidiately stop touchlink target functionality.
    224                This menu item is only available if BDB_TL_TARGET is defined.
    225          
    226              <APP MENU> application-specific sub-menu
    227                Press [OK] to enter the application-specific sub-menu.
    228                See the main comment in the specific application c file for more details.
    229                
    230              <INFO> device and network information
    231                This screen has no operation related to it. It shows the following information:
    232                  Line1:
    233                    Device IEEE address
    234                  Line2: (only meaningful when the device is on a network)
    235                    nXXXX - the Network pan-id
    236                    cXX - the Channel the network is active on
    237                    aXXXX - the short Address of the device
    238                  Line3:
    239                    XXX (YYY) - the device is not connected to a network.
    240                      XXX is either ZR, ZC or ZED, depending on the build configuration.
    241                      YYY is the network-state value (see definition of devStates_t in ZDApp.h).
    242                    ZC - the device is connected to a network as a coordinator.
    243                    ZR CENT - the device is connected to a centralized network as a router.
    244                    ZR DIST - the device is connected to a distributed network as a router.
    245                    ZED pXXXX - the device is connected to a network as an end device. Parent address is XXXX.
    246          
    247              <RESET TO FN> reset the device to factory-new
    248                Press [OK] to reset the device to factory-new. The device will disconnect from the network, and 
    249                all configurations and network information will be deleted.
    250          
    251          *********************************************************************/
    252          
    253          #ifdef LEGACY_LCD_DEBUG
    254          #error Please disable LEGACY_LCD_DEBUG.
    255          #endif
    256          
    257          #if (BDB_INSTALL_CODE_USE!=BDB_INSTALL_CODE_USE_IC_CRC)
    258          #warning Install-Code functionality is disabled. To enable, make sure BDB_INSTALL_CODE_USE==BDB_INSTALL_CODE_USE_IC_CRC
    259          #endif
    260          
    261          /*********************************************************************
    262           * INCLUDES
    263           */
    264          #include "hal_types.h"
    265          #include "hal_key.h"
    266          #include "bdb_interface.h"
    267          #include "hal_lcd.h"
    268          #include "hal_led.h"
    269          #include "zcl.h"
    270          #include "zdapp.h"
    271          #include "zcl_sampleapps_ui.h"
    272          
    273          #ifdef BDB_TL_TARGET
    274            #include "bdb_touchlink_target.h"
    275          #endif
    276          
    277          
    278          /*********************************************************************
    279           * CONSTANT-MACROS AND ENUMERATIONS
    280           */
    281          enum
    282          {
    283            UI_STATE_DEFAULT = 0,
    284            UI_STATE_CONFIGURE,
    285            UI_STATE_COMMISSION,
    286          #ifdef BDB_TL_TARGET
    287            UI_STATE_TOGGLE_TL_TARGET,
    288          #endif
    289            UI_STATE_APP_SPECIFIC_MENU,
    290            UI_STATE_INFO,
    291            UI_STATE_RESET_TO_FACTORY_NEW,
    292            UI_STATE_STATE_HELP,
    293            UI_STATE_SET_INST_CODE,
    294          #ifdef BDB_TL_TARGET
    295            UI_STATE_TOUCHLINK_TARGET,
    296            UI_STATE_TOUCHLINK_STEALING,
    297          #endif
    298          #ifdef BDB_TL_INITIATOR
    299            UI_STATE_TOUCHLINK_INITIATOR,
    300          #endif
    301            UI_STATE_NETWORK_FORMATION,
    302            UI_STATE_NETWORK_STEERING,
    303            UI_STATE_FINDING_AND_BINDING,
    304            UI_STATE_SET_PRI_CHANEL_MASK_0,
    305            UI_STATE_SET_SEC_CHANEL_MASK_0,
    306            UI_STATE_SET_PAN_ID_0,
    307            UI_STATE_BACK_FROM_CONFIGURE,
    308            UI_STATE_SET_PRI_CHANEL_MASK_1,
    309            UI_STATE_SET_SEC_CHANEL_MASK_1,
    310            UI_STATE_SET_PAN_ID_1,
    311            UI_STATE_SET_INST_CODE_0,
    312          #if (ZG_BUILD_COORDINATOR_TYPE)
    313            UI_STATE_SET_INST_CODE_ADDR_0,
    314          #endif
    315            UI_STATE_SET_INST_CODE_DONE,
    316            UI_STATE_BACK_FROM_INSTALL_CODE,
    317            UI_STATE_SET_INST_CODE_1,
    318          #if (ZG_BUILD_COORDINATOR_TYPE)
    319            UI_STATE_SET_INST_CODE_ADDR_1,
    320          #endif
    321          };
    322          
    323          #define DEFAULT_COMISSIONING_MODE (BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_FINDING_BINDING)
    324          
    325          #define TOUCHLINK_TIMEOUT_INCREMENTS_INITIAL 1000
    326          #define TOUCHLINK_TIMEOUT_INCREMENTS_MAX 10000000
    327          
    328          #define DEFAULT_TOUCHLINK_TARGET_TIMEOUT 30000
    329          
    330          #define LCD_CURSOR_UPDATE_INTERVAL 500
    331          
    332          #define LCD_AUTO_REFRESH_INTERVAL_ON_COMISSIONING_SCREEN 250
    333          
    334          #define LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN 1000
    335          #define LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN_END 50
    336          
    337          #define LCD_LINE_LENGTH 16
    338          
    339          #define STATUS_UNKNOWN 0xFF
    340          
    341          #define LCD_CURSOR_CHAR ' '
    342          
    343          #define UI_INSTALL_CODE_DEFAULT {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5} //This install code produces the key: 66B6900981E1EE3CA4206B6B861C02BB
    344          #define UI_INSTALL_CODE_ADDR_DEFAULT {0xE7,0xFC,0x0E,0x04,0x00,0x4B,0x12,0x00}
    345          
    346          
    347          #ifdef HAL_BOARD_CC2538
    348          #define UI_LCD_LINE_1 HAL_LCD_LINE_3
    349          #define UI_LCD_LINE_2 HAL_LCD_LINE_4
    350          #define UI_LCD_LINE_3 HAL_LCD_LINE_5
    351          
    352          #define LCD_CC2538_PREFIX_COUNT 3
    353          #else
    354          #define UI_LCD_LINE_1 HAL_LCD_LINE_1
    355          #define UI_LCD_LINE_2 HAL_LCD_LINE_2
    356          #define UI_LCD_LINE_3 HAL_LCD_LINE_3
    357          
    358          #define LCD_CC2538_PREFIX_COUNT 0
    359          #endif
    360          
    361          #define UI_LED_IDENTIFY_DUTY_CYCLE    50
    362          
    363          #define UI_LED_COORDINATOR_DUTY_CYCLE 75
    364          #define UI_LED_ROUTER_DUTY_CYCLE      95
    365          #define UI_LED_END_DEVICE_DUTY_CYCLE 100
    366          
    367          #define UI_LED_DEVICE_STATE_FLASH_TIME 4000
    368          
    369          #define UI_LED_DEVICE_STATE       HAL_LED_2
    370          #define UI_LED_IDENTIFY           HAL_LED_3
    371          #define UI_LED_NETWORK_OPEN_STATE HAL_LED_4
    372          
    373          #define NWK_OPEN_FOR_JOINING 0x1
    374          #define NWK_OPEN_TOUCHLINK_AS_TARGET 0x2
    375          
    376          /*********************************************************************
    377           * TYPEDEFS
    378           */
    379             
    380          /*********************************************************************
    381          * LOCAL FUNCTIONS DECLARATIONS
    382          */
    383          static void uiUintToString(uint32 value, char * str, uint8 base, uint8 num_of_digists, bool pad0, bool reverse);
    384          static void uiArrayToString(uint8 * buf, char * str, uint8 num_of_digists, bool big_endian);
    385          static void uiCreateChannelMaskString(uint32 channel_mask, char * str);
    386          
    387          
    388          #ifdef BDB_TL_TARGET
    389          static void uiActionToggleTlTarget(uint16 keys);
    390          #endif
    391          static void uiActionStartComissioning(uint16 keys);
    392          static void uiActionSetInstallCode(uint16 keys);
    393          static void uiActionResetToFactoryNew(uint16 keys);
    394          static void uiActionConfigureEnables(uint16 keys);
    395          static void uiActionMenuJump(uint16 keys);
    396          static void uiActionProcessConfigureChannels(uint16 keys);
    397          static void uiActionProcessConfigurePanId(uint16 keys);
    398          static void uiActionProcessPrepareInstallCode(uint16 keys);
    399          static void uiActionAppSecificMenu(uint16 keys);
    400          
    401          static void *uiProcessPermitJoin( void *duration );
    402          
    403          static void uiProcessIdentifyTimeChange( uint8 endpoint );
    404          
    405          static void uiProcessBindNotification( bdbBindNotificationData_t *data );
    406          
    407          #ifdef BDB_TL_TARGET
    408          static void uiProcessTouchlinkTargetEnable( uint8 enable );
    409          #endif
    410          
    411          /*********************************************************************
    412           * CONSTANTS
    413           */

   \                                 In  segment XDATA_ROM_C, align 1
    414          static const uiState_t gui_states_main[] = 
   \                     gui_states_main:
   \   000000   FE           DB 254
   \   000001   05           DB 5
   \   000002   0400         DW 4
   \   000004   ....         DW `??uiActionMenuJump::?relay`
   \   000006   FE           DB 254
   \   000007   FE           DB 254
   \   000008   0400         DW 4
   \   00000A   ....         DW `??uiActionMenuJump::?relay`
   \   00000C   FE           DB 254
   \   00000D   FE           DB 254
   \   00000E   0400         DW 4
   \   000010   ....         DW `??uiActionStartComissioning::?relay`
   \   000012   FE           DB 254
   \   000013   FE           DB 254
   \   000014   0400         DW 4
   \   000016   ....         DW `??uiActionAppSecificMenu::?relay`
   \   000018   FE           DB 254
   \   000019   FE           DB 254
   \   00001A   0000         DW 0
   \   00001C   0000         DW 0H
   \   00001E   00           DB 0
   \   00001F   FE           DB 254
   \   000020   0400         DW 4
   \   000022   ....         DW `??uiActionResetToFactoryNew::?relay`
   \   000024   FF           DB 255
   \   000025   FF           DB 255
   \   000026   0004         DW 1024
   \   000028   ....         DW `??uiActionMenuJump::?relay`
   \   00002A   FE           DB 254
   \   00002B   0E           DB 14
   \   00002C   0400         DW 4
   \   00002E   ....         DW `??uiActionMenuJump::?relay`
   \   000030   FE           DB 254
   \   000031   FE           DB 254
   \   000032   0400         DW 4
   \   000034   ....         DW `??uiActionConfigureEnables::?relay`
   \   000036   FE           DB 254
   \   000037   FE           DB 254
   \   000038   0400         DW 4
   \   00003A   ....         DW `??uiActionConfigureEnables::?relay`
   \   00003C   FE           DB 254
   \   00003D   FE           DB 254
   \   00003E   0400         DW 4
   \   000040   ....         DW `??uiActionConfigureEnables::?relay`
   \   000042   FE           DB 254
   \   000043   FE           DB 254
   \   000044   0400         DW 4
   \   000046   ....         DW `??uiActionMenuJump::?relay`
   \   000048   FE           DB 254
   \   000049   FE           DB 254
   \   00004A   0400         DW 4
   \   00004C   ....         DW `??uiActionMenuJump::?relay`
   \   00004E   FE           DB 254
   \   00004F   FE           DB 254
   \   000050   0400         DW 4
   \   000052   ....         DW `??uiActionMenuJump::?relay`
   \   000054   07           DB 7
   \   000055   FE           DB 254
   \   000056   0400         DW 4
   \   000058   ....         DW `??uiActionMenuJump::?relay`
   \   00005A   FF           DB 255
   \   00005B   FF           DB 255
   \   00005C   1F04         DW 1055
   \   00005E   ....         DW `??uiActionProcessConfigureChannels::?relay`
   \   000060   FF           DB 255
   \   000061   FF           DB 255
   \   000062   1F04         DW 1055
   \   000064   ....         DW `??uiActionProcessConfigureChannels::?relay`
   \   000066   FF           DB 255
   \   000067   FF           DB 255
   \   000068   1F04         DW 1055
   \   00006A   ....         DW `??uiActionProcessConfigurePanId::?relay`
   \   00006C   FE           DB 254
   \   00006D   14           DB 20
   \   00006E   0400         DW 4
   \   000070   ....         DW `??uiActionMenuJump::?relay`
   \   000072   FE           DB 254
   \   000073   FE           DB 254
   \   000074   0400         DW 4
   \   000076   ....         DW `??uiActionSetInstallCode::?relay`
   \   000078   12           DB 18
   \   000079   FE           DB 254
   \   00007A   0400         DW 4
   \   00007C   ....         DW `??uiActionMenuJump::?relay`
   \   00007E   FF           DB 255
   \   00007F   FF           DB 255
   \   000080   1F04         DW 1055
   \   000082   ....         DW `??uiActionProcessPrepareInstallCode::?relay`
    415          {
    416            /*  UI_STATE_DEFAULT                */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_RESET_TO_FACTORY_NEW,    UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    417            /*  UI_STATE_CONFIGURE              */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    418            /*  UI_STATE_COMMISSION             */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionStartComissioning},
    419          #ifdef BDB_TL_TARGET
    420            /*  UI_STATE_TOGGLE_TL_TARGET       */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionToggleTlTarget},
    421          #endif
    422            /*  UI_STATE_APP_SPECIFIC_MENU      */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionAppSecificMenu},
    423            /*  UI_STATE_INFO                   */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            0, NULL},
    424            /*  UI_STATE_RESET_TO_FACTORY_NEW   */ {UI_STATE_DEFAULT,               UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionResetToFactoryNew},
    425          
    426            /*  UI_STATE_STATE_HELP             */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_5_RELEASED,&uiActionMenuJump},
    427          
    428            /*  UI_STATE_SET_INST_CODE          */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_BACK_FROM_CONFIGURE,     UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    429          #ifdef BDB_TL_TARGET
    430            /*  UI_STATE_TOUCHLINK_TARGET       */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_1_RELEASED | UI_KEY_SW_3_RELEASED, &uiActionConfigureEnables},
    431            /*  UI_STATE_TOUCHLINK_STEALING     */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
    432          #endif
    433          #ifdef BDB_TL_INITIATOR
    434            /*  UI_STATE_TOUCHLINK_INITIATOR    */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
    435          #endif
    436            /*  UI_STATE_NETWORK_FORMATION      */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
    437            /*  UI_STATE_NETWORK_STEERING       */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
    438            /*  UI_STATE_FINDING_AND_BINDING    */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
    439            /*  UI_STATE_SET_PRI_CHANEL_MASK_0  */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    440            /*  UI_STATE_SET_SEC_CHANEL_MASK_0  */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    441            /*  UI_STATE_SET_PAN_ID_0           */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    442            /*  UI_STATE_BACK_FROM_CONFIGURE    */ {UI_STATE_SET_INST_CODE,         UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    443          
    444            /*  UI_STATE_SET_PRI_CHANEL_MASK_1  */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessConfigureChannels},
    445            /*  UI_STATE_SET_SEC_CHANEL_MASK_1  */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessConfigureChannels},
    446            /*  UI_STATE_SET_PAN_ID_1           */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessConfigurePanId},
    447          
    448            /*  UI_STATE_SET_INST_CODE_0        */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_BACK_FROM_INSTALL_CODE,  UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    449          #if (ZG_BUILD_COORDINATOR_TYPE)
    450            /*  UI_STATE_SET_INST_CODE_ADDR_0   */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    451          #endif  
    452            /*  UI_STATE_SET_INST_CODE_DONE     */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionSetInstallCode},
    453            /*  UI_STATE_BACK_FROM_INSTALL_CODE */ {UI_STATE_SET_INST_CODE_0,       UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    454          
    455            /*  UI_STATE_SET_INST_CODE_1        */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessPrepareInstallCode},
    456          #if (ZG_BUILD_COORDINATOR_TYPE)
    457            /*  UI_STATE_SET_INST_CODE_ADDR_1   */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessPrepareInstallCode},
    458          #endif
    459          };
    460          
    461          /*********************************************************************
    462           * GLOBAL VARIABLES
    463           */
    464          
    465          /*********************************************************************
    466           * GLOBAL FUNCTIONS
    467           */
    468          
    469          /*********************************************************************
    470           * EXTERNAL REFERENCES
    471           */
    472          extern uint8 aExtendedAddress[];
    473          
    474          /*********************************************************************
    475           * LOCAL VARIABLES
    476           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    477          static uint8 uiAppTaskId;
   \                     uiAppTaskId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    478          static uint16 uiLcdAutoUpdateEvent;
   \                     uiLcdAutoUpdateEvent:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    479          static uint16 * pUiIdentifyTimeAttribute;
   \                     pUiIdentifyTimeAttribute:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    480          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    481          static uiAppUpdateLcd_t uiAppUpdateLcd;
   \                     uiAppUpdateLcd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    482          static const uiState_t * uiAppStatesMain = NULL;
   \                     uiAppStatesMain:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    483          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    484          static uint8 FBMatchesFound = 0;
   \                     FBMatchesFound:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    485          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    486          static int uiCurrentState = UI_STATE_DEFAULT;
   \                     uiCurrentState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    487          static bool uiCommissioningIsInitializing = FALSE;
   \                     uiCommissioningIsInitializing:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    488          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    489          static uint8 uiLcdCursorLine = 0xFF;
   \                     uiLcdCursorLine:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for uiLcdCursorLine>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    490          static uint8 uiLcdCursorCol;
   \                     uiLcdCursorCol:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    491          static uint8 uiLcdCursorState;
   \                     uiLcdCursorState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    492          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    493          static uint8 uiSelectedBdbComissioningModes = DEFAULT_COMISSIONING_MODE;
   \                     uiSelectedBdbComissioningModes:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for uiSelectedBdbComissioningMod`
   \   000001                REQUIRE __INIT_XDATA_I
    494          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    495          static ZStatus_t uiAddInstallCodeLastStatus = STATUS_UNKNOWN;
   \                     uiAddInstallCodeLastStatus:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for uiAddInstallCodeLastStatus>`
   \   000001                REQUIRE __INIT_XDATA_I
    496          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    497          static char * uiCommissioningStateStr = "--";
   \                     uiCommissioningStateStr:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for uiCommissioningStateStr>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    498          static char * uiCommissioningNetworkConnrctionStr = NULL;
   \                     uiCommissioningNetworkConnrctionStr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    499          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    500          static bool uiComissioningIsActive = FALSE;
   \                     uiComissioningIsActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    501          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    502          static bool uiResetInitiated = FALSE;
   \                     uiResetInitiated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    503          
    504          #ifdef BDB_TL_TARGET
    505          static uint16 uiKeyAutoRepeatEvent;
    506          static uint32 uiLcdAutoUpdateInterval;
    507          
    508          static uint16 uiAutoKeyRepeatDelay = 500;
    509          static uint32 uiAutoKeyRepeatCount = 0;
    510          
    511          static uint32 uiTouchlinkTargetTimeout = DEFAULT_TOUCHLINK_TARGET_TIMEOUT;
    512          #endif
    513          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    514          static uint8 uiInstallCode[] = UI_INSTALL_CODE_DEFAULT;
   \                     uiInstallCode:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for uiInstallCode>`
   \   000012                REQUIRE __INIT_XDATA_I
    515          #if (ZG_BUILD_COORDINATOR_TYPE)
    516          static uint8 uiInstallCodeAddr[Z_EXTADDR_LEN] = UI_INSTALL_CODE_ADDR_DEFAULT;
    517          #endif
    518          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    519          static const uiState_t * uiStates = gui_states_main;
   \                     uiStates:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for uiStates>`
   \   000002                REQUIRE __INIT_XDATA_I
    520          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    521          static char * uiAppTitleStr;
   \                     uiAppTitleStr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    522          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    523          static uint8 uiNetworkOpenStateLedDutyCycle[] = {0, 25, 75, 100}; //25% = open for joining; 75% = touchlink target; 100% = both;
   \                     uiNetworkOpenStateLedDutyCycle:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for uiNetworkOpenStateLedDutyCyc`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    524          static uint8 uiNwkOpenState = 0x00;
   \                     uiNwkOpenState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    525          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    526          static devStates_t uiNwkStateShadow = DEV_HOLD;
   \                     uiNwkStateShadow:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    527          
    528          /*********************************************************************
    529           * LOCAL UTILITY FUNCTIONS
    530           */
    531          
    532          /*********************************************************************
    533           * @fn          uiUintToString
    534           *
    535           * @brief       format an integer into a string buffer.
    536           *
    537           * @param       value - 32bit unsigned int value to be formatted
    538           *              str - pointer to a buffer to store the formatted bnumber
    539           *              base - base represenation of the value. currently only tested base 10 and 16
    540           *              num_of_digists - number of digits to include in the formatted string
    541           *              pad0 - should be set to TRUE to pad the number with leading 0's as required
    542           *              reverse - should be set to TRUE to reverse the output string
    543           *
    544           * @return      none
    545           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    546          static void uiUintToString (uint32 value, char * str, uint8 base, uint8 num_of_digists, bool pad0, bool reverse)
   \                     uiUintToString:
    547          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V4,R2
   \   000014   8B..         MOV       ?V5,R3
   \   000016   8C..         MOV       ?V6,R4
   \   000018   8D..         MOV       ?V7,R5
    548            int i;
    549            uint8 index;
    550            
    551            for (i = 0; i < num_of_digists; i++)
   \   00001A   7A00         MOV       R2,#0x0
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   F5..         MOV       ?V8,A
   \   000020   E4           CLR       A
   \   000021   F5..         MOV       ?V9,A
   \   000023   F5..         MOV       ?V10,A
   \   000025   F5..         MOV       ?V11,A
   \   000027   741B         MOV       A,#0x1b
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FC           MOV       R4,A
   \   00002E   741C         MOV       A,#0x1c
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FE           MOV       R6,A
   \   000035   741D         MOV       A,#0x1d
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FD           MOV       R5,A
   \   00003C   8005         SJMP      ??uiUintToString_0
   \                     ??uiUintToString_1:
   \   00003E   0A           INC       R2
   \   00003F   EA           MOV       A,R2
   \   000040   7001         JNZ       ??uiUintToString_0
   \   000042   0B           INC       R3
   \                     ??uiUintToString_0:
   \   000043   EC           MOV       A,R4
   \   000044   F8           MOV       R0,A
   \   000045   C3           CLR       C
   \   000046   EA           MOV       A,R2
   \   000047   98           SUBB      A,R0
   \   000048   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00004B   5069         JNC       ??uiUintToString_2
    552            {
    553              index = (reverse ? i : num_of_digists - 1 - i);
   \   00004D   ED           MOV       A,R5
   \   00004E   6003         JZ        ??uiUintToString_3
   \   000050   EA           MOV       A,R2
   \   000051   8007         SJMP      ??uiUintToString_4
   \                     ??uiUintToString_3:
   \   000053   EA           MOV       A,R2
   \   000054   F8           MOV       R0,A
   \   000055   74FF         MOV       A,#-0x1
   \   000057   2C           ADD       A,R4
   \   000058   C3           CLR       C
   \   000059   98           SUBB      A,R0
   \                     ??uiUintToString_4:
   \   00005A   FF           MOV       R7,A
    554              str[index] = '0' + (value % base);
   \   00005B   85....       MOV       ?V12,?V8
   \   00005E   85....       MOV       ?V13,?V9
   \   000061   85....       MOV       ?V14,?V10
   \   000064   85....       MOV       ?V15,?V11
   \   000067   85....       MOV       ?V0,?V4
   \   00006A   85....       MOV       ?V1,?V5
   \   00006D   85....       MOV       ?V2,?V6
   \   000070   85....       MOV       ?V3,?V7
   \   000073   78..         MOV       R0,#?V0
   \   000075   79..         MOV       R1,#?V12
   \   000077   12....       LCALL     ?UL_DIV_MOD
   \   00007A   E5..         MOV       A,?V12
   \   00007C   2430         ADD       A,#0x30
   \   00007E   F5..         MOV       ?V0,A
   \   000080   EF           MOV       A,R7
   \   000081   F8           MOV       R0,A
   \   000082   7419         MOV       A,#0x19
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00008A   E5..         MOV       A,?V0
   \   00008C   F0           MOVX      @DPTR,A
    555              if (str[index] > '9')
   \   00008D   C3           CLR       C
   \   00008E   943A         SUBB      A,#0x3a
   \   000090   4004         JC        ??uiUintToString_5
    556              {
    557                str[index] += 'A' - '0' - 10;
   \   000092   E0           MOVX      A,@DPTR
   \   000093   2407         ADD       A,#0x7
   \   000095   F0           MOVX      @DPTR,A
    558              }
    559              value /= base;
   \                     ??uiUintToString_5:
   \   000096   85....       MOV       ?V0,?V8
   \   000099   85....       MOV       ?V1,?V9
   \   00009C   85....       MOV       ?V2,?V10
   \   00009F   85....       MOV       ?V3,?V11
   \   0000A2   78..         MOV       R0,#?V4
   \   0000A4   79..         MOV       R1,#?V0
   \   0000A6   12....       LCALL     ?UL_DIV_MOD
    560              if ((!pad0) && (value == 0))
   \   0000A9   EE           MOV       A,R6
   \   0000AA   7092         JNZ       ??uiUintToString_1
   \   0000AC   E5..         MOV       A,?V4
   \   0000AE   45..         ORL       A,?V5
   \   0000B0   45..         ORL       A,?V6
   \   0000B2   45..         ORL       A,?V7
   \   0000B4   7088         JNZ       ??uiUintToString_1
    561              {
    562                break;
    563              }
    564            }
    565          }
   \                     ??uiUintToString_2:
   \   0000B6   7401         MOV       A,#0x1
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BB   7F10         MOV       R7,#0x10
   \   0000BD   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EB           MOV       A,R3
   \   000001                REQUIRE ??Subroutine39_0
   \   000001                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   9400         SUBB      A,#0x0
   \   000002   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000004   65D0         XRL       A,PSW
   \   000006   33           RLC       A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   8882         MOV       DPL,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET
    566          
    567          /*********************************************************************
    568           * @fn          uiArrayToString
    569           *
    570           * @brief       format a memory buffer into a string buffer in hex representation.
    571           *
    572           * @param       buf - pointer to a bufer to be formatted
    573           *              str - pointer to a buffer to store the formatted string
    574           *              num_of_digists - number of digits to include in the formatted string
    575           *              big_endian - whether the memory content should be represented as big or little endian
    576           *
    577           * @return      none
    578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          static void uiArrayToString (uint8 * buf, char * str, uint8 num_of_digists, bool big_endian)
   \                     uiArrayToString:
    580          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V5,R1
    581            int i;
    582            uint8 stringIndex;
    583            uint8 value;
    584            
    585            for (i = 0; i < num_of_digists; i++)
   \   00000F   7C00         MOV       R4,#0x0
   \   000011   7D00         MOV       R5,#0x0
   \   000013   7412         MOV       A,#0x12
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V6,A
   \   00001B   8042         SJMP      ??uiArrayToString_0
    586            {
    587              stringIndex = (big_endian ? i : num_of_digists - 1 - i);
    588              if(big_endian)
    589              {
    590                value = (buf[i / 2] >> (4 * (!(i % 2)))) & 0x0F;
    591              }
    592              else
    593              {
    594                value = (buf[i / 2] >> (4 * (i % 2))) & 0x0F;
   \                     ??uiArrayToString_1:
   \   00001D   EC           MOV       A,R4
   \   00001E   F8           MOV       R0,A
   \   00001F   ED           MOV       A,R5
   \   000020   F9           MOV       R1,A
   \   000021   7A02         MOV       R2,#0x2
   \   000023   7B00         MOV       R3,#0x0
   \   000025   12....       LCALL     ?S_DIV_MOD
   \   000028   12....       LCALL     ?Subroutine29 & 0xFFFF
    595              }
   \                     ??CrossCallReturnLabel_61:
   \   00002B   F5..         MOV       ?V8,A
   \   00002D   75..00       MOV       ?V9,#0x0
   \   000030   EA           MOV       A,R2
   \   000031   33           RLC       A
   \   000032   33           RLC       A
   \   000033   54FC         ANL       A,#0xfc
   \   000035   78..         MOV       R0,#?V8
   \   000037   12....       LCALL     ?SS_SHR
   \   00003A   E5..         MOV       A,?V8
   \                     ??uiArrayToString_2:
   \   00003C   540F         ANL       A,#0xf
   \   00003E   F8           MOV       R0,A
    596              str[stringIndex] = '0' + value;
   \   00003F   7430         MOV       A,#0x30
   \   000041   28           ADD       A,R0
   \   000042   F8           MOV       R0,A
   \   000043   AA..         MOV       R2,?V4
   \   000045   E5..         MOV       A,?V0
   \   000047   2A           ADD       A,R2
   \   000048   F582         MOV       DPL,A
   \   00004A   E4           CLR       A
   \   00004B   35..         ADDC      A,?V1
   \   00004D   F583         MOV       DPH,A
   \   00004F   E8           MOV       A,R0
   \   000050   F0           MOVX      @DPTR,A
    597              if (str[stringIndex] > '9')
   \   000051   C3           CLR       C
   \   000052   943A         SUBB      A,#0x3a
   \   000054   4004         JC        ??uiArrayToString_3
    598              {
    599                str[stringIndex] += 'A' - '0' - 10;
   \   000056   E0           MOVX      A,@DPTR
   \   000057   2407         ADD       A,#0x7
   \   000059   F0           MOVX      @DPTR,A
    600              }
   \                     ??uiArrayToString_3:
   \   00005A   0C           INC       R4
   \   00005B   EC           MOV       A,R4
   \   00005C   7001         JNZ       ??uiArrayToString_0
   \   00005E   0D           INC       R5
   \                     ??uiArrayToString_0:
   \   00005F   A8..         MOV       R0,?V5
   \   000061   C3           CLR       C
   \   000062   EC           MOV       A,R4
   \   000063   98           SUBB      A,R0
   \   000064   ED           MOV       A,R5
   \   000065   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000068   5047         JNC       ??uiArrayToString_4
   \   00006A   E5..         MOV       A,?V6
   \   00006C   6003         JZ        ??uiArrayToString_5
   \   00006E   EC           MOV       A,R4
   \   00006F   8008         SJMP      ??uiArrayToString_6
   \                     ??uiArrayToString_5:
   \   000071   EC           MOV       A,R4
   \   000072   F8           MOV       R0,A
   \   000073   74FF         MOV       A,#-0x1
   \   000075   25..         ADD       A,?V5
   \   000077   C3           CLR       C
   \   000078   98           SUBB      A,R0
   \                     ??uiArrayToString_6:
   \   000079   F5..         MOV       ?V4,A
   \   00007B   EC           MOV       A,R4
   \   00007C   F8           MOV       R0,A
   \   00007D   ED           MOV       A,R5
   \   00007E   F9           MOV       R1,A
   \   00007F   7A02         MOV       R2,#0x2
   \   000081   7B00         MOV       R3,#0x0
   \   000083   12....       LCALL     ?S_DIV_MOD
   \   000086   E5..         MOV       A,?V6
   \   000088   6093         JZ        ??uiArrayToString_1
   \   00008A   EA           MOV       A,R2
   \   00008B   4B           ORL       A,R3
   \   00008C   7005         JNZ       ??uiArrayToString_7
   \   00008E   75..04       MOV       ?V2,#0x4
   \   000091   8003         SJMP      ??uiArrayToString_8
   \                     ??uiArrayToString_7:
   \   000093   75..00       MOV       ?V2,#0x0
   \                     ??uiArrayToString_8:
   \   000096   EC           MOV       A,R4
   \   000097   F8           MOV       R0,A
   \   000098   ED           MOV       A,R5
   \   000099   F9           MOV       R1,A
   \   00009A   7A02         MOV       R2,#0x2
   \   00009C   7B00         MOV       R3,#0x0
   \   00009E   12....       LCALL     ?S_DIV_MOD
   \   0000A1   12....       LCALL     ?Subroutine29 & 0xFFFF
    601            }
   \                     ??CrossCallReturnLabel_62:
   \   0000A4   A8..         MOV       R0,?V2
   \   0000A6   B80002       CJNE      R0,#0x0,??uiArrayToString_9
   \   0000A9   8091         SJMP      ??uiArrayToString_2
   \                     ??uiArrayToString_9:
   \   0000AB   C3           CLR       C
   \   0000AC   13           RRC       A
   \   0000AD   D8FC         DJNZ      R0,??uiArrayToString_9
   \   0000AF   808B         SJMP      ??uiArrayToString_2
    602          }
   \                     ??uiArrayToString_4:
   \   0000B1                REQUIRE ?Subroutine0
   \   0000B1                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   89..         MOV       ?V9,R1
   \   000002   EE           MOV       A,R6
   \   000003   28           ADD       A,R0
   \   000004   F582         MOV       DPL,A
   \   000006   EF           MOV       A,R7
   \   000007   35..         ADDC      A,?V9
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET
    603          
    604          /*********************************************************************
    605           * @fn          uiCreateChannelMaskString
    606           *
    607           * @brief       format a channel mask into a string bugger
    608           *
    609           * @param       channel_mask - bitmask of the enabled / disabled channels (bits 11-26 represent the
    610           *                respective channels)
    611           *              str - pointer to a buffer to store the formatted string
    612           *
    613           * @return      none
    614           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    615          static void uiCreateChannelMaskString(uint32 channel_mask, char * str)
   \                     uiCreateChannelMaskString:
    616          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
    617            int i;
    618            uint32 mask = 0x00000800;
   \   000012   75..00       MOV       ?V0,#0x0
   \   000015   75..08       MOV       ?V1,#0x8
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   75..00       MOV       ?V3,#0x0
    619            
    620            for (i = 0; i < 16; i++)
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \   000022   7415         MOV       A,#0x15
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    621            {
    622              str[i] = channel_mask & mask ? '*' : '-';
   \                     ??CrossCallReturnLabel_84:
   \   00002A   85....       MOV       ?V8,?V4
   \   00002D   85....       MOV       ?V9,?V5
   \   000030   85....       MOV       ?V10,?V6
   \   000033   85....       MOV       ?V11,?V7
   \   000036   78..         MOV       R0,#?V8
   \   000038   79..         MOV       R1,#?V0
   \   00003A   12....       LCALL     ?L_AND
   \   00003D   E5..         MOV       A,?V8
   \   00003F   45..         ORL       A,?V9
   \   000041   45..         ORL       A,?V10
   \   000043   45..         ORL       A,?V11
   \   000045   85..82       MOV       DPL,?XSP + 0
   \   000048   85..83       MOV       DPH,?XSP + 1
   \   00004B   6004         JZ        ??uiCreateChannelMaskString_0
   \   00004D   742A         MOV       A,#0x2a
   \   00004F   8002         SJMP      ??uiCreateChannelMaskString_1
   \                     ??uiCreateChannelMaskString_0:
   \   000051   742D         MOV       A,#0x2d
   \                     ??uiCreateChannelMaskString_1:
   \   000053   F0           MOVX      @DPTR,A
   \   000054   E0           MOVX      A,@DPTR
   \   000055   C0E0         PUSH      A
   \   000057   EC           MOV       A,R4
   \   000058   2A           ADD       A,R2
   \   000059   F582         MOV       DPL,A
   \   00005B   ED           MOV       A,R5
   \   00005C   3B           ADDC      A,R3
   \   00005D   F583         MOV       DPH,A
   \   00005F   D0E0         POP       A
   \   000061   F0           MOVX      @DPTR,A
    623              mask <<= 1;
   \   000062   7401         MOV       A,#0x1
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?L_SHL
    624            }
   \   000069   0A           INC       R2
   \   00006A   EA           MOV       A,R2
   \   00006B   7001         JNZ       ??uiCreateChannelMaskString_2
   \   00006D   0B           INC       R3
   \                     ??uiCreateChannelMaskString_2:
   \   00006E   C3           CLR       C
   \   00006F   9410         SUBB      A,#0x10
   \   000071   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000074   40B4         JC        ??CrossCallReturnLabel_84
    625            
    626            str[16] = 0;
   \   000076   EC           MOV       A,R4
   \   000077   2410         ADD       A,#0x10
   \   000079   F582         MOV       DPL,A
   \   00007B   E4           CLR       A
   \   00007C   3D           ADDC      A,R5
   \   00007D   F583         MOV       DPH,A
   \   00007F   E4           CLR       A
   \   000080   F0           MOVX      @DPTR,A
    627          }
   \   000081   04           INC       A
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   7F0C         MOV       R7,#0xc
   \   000087   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET
    628          
    629          
    630          /*********************************************************************
    631           * LOCAL FUNCTIONS
    632           */
    633          
    634          /*********************************************************************
    635           * @fn          uiActionMenuJump
    636           *
    637           * @brief       State-machine action for jumping to another state
    638           *
    639           * @param       keys - the keypress code that triggered the call to this function
    640           *
    641           * @return      none
    642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    643          static void uiActionMenuJump(uint16 keys)
   \                     uiActionMenuJump:
    644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    645            switch (uiCurrentState)
   \   000005   90....       MOV       DPTR,#uiCurrentState
   \   000008   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00000B   7069         JNZ       ??uiActionMenuJump_0
   \   00000D   E5..         MOV       A,?V0
   \   00000F   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for uiActionMenuJump>_0`:
   \   000012   00           DB        0
   \   000013   0A           DB        10
   \   000014   00           DB        0
   \   000015   ....         DW        ??uiActionMenuJump_1
   \   000017   01           DB        1
   \   000018   ....         DW        ??uiActionMenuJump_2
   \   00001A   06           DB        6
   \   00001B   ....         DW        ??uiActionMenuJump_3
   \   00001D   07           DB        7
   \   00001E   ....         DW        ??uiActionMenuJump_4
   \   000020   0B           DB        11
   \   000021   ....         DW        ??uiActionMenuJump_5
   \   000023   0C           DB        12
   \   000024   ....         DW        ??uiActionMenuJump_6
   \   000026   0D           DB        13
   \   000027   ....         DW        ??uiActionMenuJump_7
   \   000029   0E           DB        14
   \   00002A   ....         DW        ??uiActionMenuJump_8
   \   00002C   12           DB        18
   \   00002D   ....         DW        ??uiActionMenuJump_9
   \   00002F   14           DB        20
   \   000030   ....         DW        ??uiActionMenuJump_2
   \   000032   ....         DW        ??uiActionMenuJump_0
    646            {
    647              case UI_STATE_DEFAULT:
    648                uiCurrentState = UI_STATE_STATE_HELP;
   \                     ??uiActionMenuJump_1:
   \   000034   90....       MOV       DPTR,#uiCurrentState
   \   000037   7406         MOV       A,#0x6
   \   000039   8037         SJMP      ??uiActionMenuJump_10
    649                break;
    650              case UI_STATE_STATE_HELP:
    651                uiCurrentState = UI_STATE_DEFAULT;
   \                     ??uiActionMenuJump_3:
   \   00003B   90....       MOV       DPTR,#uiCurrentState
   \   00003E   E4           CLR       A
   \   00003F   F0           MOVX      @DPTR,A
   \   000040   A3           INC       DPTR
   \   000041   8032         SJMP      ??uiActionMenuJump_11
    652                break;
    653              case UI_STATE_CONFIGURE:
    654                uiCurrentState = UI_STATE_SET_INST_CODE;
    655                break;
    656              case UI_STATE_BACK_FROM_CONFIGURE:
    657                uiCurrentState = UI_STATE_CONFIGURE;
   \                     ??uiActionMenuJump_8:
   \   000043   90....       MOV       DPTR,#uiCurrentState
   \   000046   7401         MOV       A,#0x1
   \   000048   8028         SJMP      ??uiActionMenuJump_10
    658                break;
    659              case UI_STATE_SET_PRI_CHANEL_MASK_0:
    660                uiCurrentState = UI_STATE_SET_PRI_CHANEL_MASK_1;
   \                     ??uiActionMenuJump_5:
   \   00004A   90....       MOV       DPTR,#uiCurrentState
   \   00004D   740F         MOV       A,#0xf
   \   00004F   8021         SJMP      ??uiActionMenuJump_10
    661                break;
    662              case UI_STATE_SET_SEC_CHANEL_MASK_0:
    663                uiCurrentState = UI_STATE_SET_SEC_CHANEL_MASK_1;
   \                     ??uiActionMenuJump_6:
   \   000051   90....       MOV       DPTR,#uiCurrentState
   \   000054   7410         MOV       A,#0x10
   \   000056   801A         SJMP      ??uiActionMenuJump_10
    664                break;
    665              case UI_STATE_SET_PAN_ID_0:
    666                uiCurrentState = UI_STATE_SET_PAN_ID_1;
   \                     ??uiActionMenuJump_7:
   \   000058   90....       MOV       DPTR,#uiCurrentState
   \   00005B   7411         MOV       A,#0x11
   \   00005D   8013         SJMP      ??uiActionMenuJump_10
    667                break;
    668              case UI_STATE_SET_INST_CODE:
    669                uiCurrentState = UI_STATE_SET_INST_CODE_0;
   \                     ??uiActionMenuJump_4:
   \   00005F   90....       MOV       DPTR,#uiCurrentState
   \   000062   7412         MOV       A,#0x12
   \   000064   800C         SJMP      ??uiActionMenuJump_10
    670                break;
    671              case UI_STATE_SET_INST_CODE_0:
    672                uiCurrentState = UI_STATE_SET_INST_CODE_1;
   \                     ??uiActionMenuJump_9:
   \   000066   90....       MOV       DPTR,#uiCurrentState
   \   000069   7415         MOV       A,#0x15
   \   00006B   8005         SJMP      ??uiActionMenuJump_10
    673                break;
    674          #if (ZG_BUILD_COORDINATOR_TYPE)
    675              case UI_STATE_SET_INST_CODE_ADDR_0:
    676                uiCurrentState = UI_STATE_SET_INST_CODE_ADDR_1;
    677                break;
    678          #endif
    679              case UI_STATE_BACK_FROM_INSTALL_CODE:
    680                uiCurrentState = UI_STATE_SET_INST_CODE;
   \                     ??uiActionMenuJump_2:
   \   00006D   90....       MOV       DPTR,#uiCurrentState
   \   000070   7407         MOV       A,#0x7
   \                     ??uiActionMenuJump_10:
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   E4           CLR       A
   \                     ??uiActionMenuJump_11:
   \   000075   F0           MOVX      @DPTR,A
    681                break;
    682            }
    683          }
   \                     ??uiActionMenuJump_0:
   \   000076                REQUIRE ?Subroutine1
   \   000076                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
    684          
    685          /*********************************************************************
    686           * @fn          uiActionStartComissioning
    687           *
    688           * @brief       State-machine action for starting comissioning
    689           *
    690           * @param       keys - the keypress code that triggered the call to this function
    691           *
    692           * @return      none
    693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          static void uiActionStartComissioning(uint16 keys)
   \                     uiActionStartComissioning:
    695          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    696            if ((!uiComissioningIsActive) && (uiSelectedBdbComissioningModes != 0))
   \   000004   90....       MOV       DPTR,#uiComissioningIsActive
   \   000007   E0           MOVX      A,@DPTR
   \   000008   703D         JNZ       ??uiActionStartComissioning_0
   \   00000A   90....       MOV       DPTR,#uiSelectedBdbComissioningModes
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6037         JZ        ??uiActionStartComissioning_0
    697            {
    698              uiComissioningIsActive = TRUE;
   \   000010   90....       MOV       DPTR,#uiComissioningIsActive
   \   000013   7401         MOV       A,#0x1
   \   000015   F0           MOVX      @DPTR,A
    699          
    700              FBMatchesFound = 0;
   \   000016   90....       MOV       DPTR,#FBMatchesFound
   \   000019   E4           CLR       A
   \   00001A   F0           MOVX      @DPTR,A
    701              
    702              //update LCD now, since bdb_StartCommissioning() is blocking for a few seconds,
    703              // and we want to give a prompt response to the user
    704              uiCommissioningIsInitializing = TRUE;
   \   00001B   90....       MOV       DPTR,#uiCommissioningIsInitializing
   \   00001E   04           INC       A
   \   00001F   F0           MOVX      @DPTR,A
    705              UI_UpdateLcd();
   \   000020                ; Setup parameters for call to function UI_UpdateLcd
   \   000020   12....       LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
    706          
    707              //if already on the network - mark it as 'existing connection'
    708              if ((uiNwkStateShadow == DEV_END_DEVICE) || (uiNwkStateShadow == DEV_ZB_COORD) || (uiNwkStateShadow == DEV_ROUTER))
   \   000023   90....       MOV       DPTR,#uiNwkStateShadow
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6406         XRL       A,#0x6
   \   000029   600A         JZ        ??uiActionStartComissioning_1
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6409         XRL       A,#0x9
   \   00002E   6005         JZ        ??uiActionStartComissioning_1
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6407         XRL       A,#0x7
   \   000033   700A         JNZ       ??uiActionStartComissioning_2
    709              {
    710                uiCommissioningNetworkConnrctionStr = "EXST";
   \                     ??uiActionStartComissioning_1:
   \   000035   90....       MOV       DPTR,#uiCommissioningNetworkConnrctionStr
   \   000038   74..         MOV       A,#`?<Constant "EXST">` & 0xff
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   74..         MOV       A,#(`?<Constant "EXST">` >> 8) & 0xff
   \   00003E   F0           MOVX      @DPTR,A
    711              }
    712              
    713              bdb_StartCommissioning(uiSelectedBdbComissioningModes);
   \                     ??uiActionStartComissioning_2:
   \   00003F                ; Setup parameters for call to function bdb_StartCommissioning
   \   00003F   90....       MOV       DPTR,#uiSelectedBdbComissioningModes
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F9           MOV       R1,A
   \   000044   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    714            }
    715          }
   \                     ??uiActionStartComissioning_0:
   \   000047   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    716          
    717          /*********************************************************************
    718           * @fn          uiActionSetInstallCode
    719           *
    720           * @brief       State-machine action for setting the install code
    721           *
    722           * @param       keys - the keypress code that triggered the call to this function
    723           *
    724           * @return      none
    725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    726          static void uiActionSetInstallCode(uint16 keys)
   \                     uiActionSetInstallCode:
    727          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    728            uint16 crc = bdb_GenerateInstallCodeCRC(uiInstallCode);
   \   000005                ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
   \   000005   12....       LCALL     ?Subroutine27 & 0xFFFF
    729            uiInstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
    730            uiInstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
    731          
    732          #if (ZG_BUILD_COORDINATOR_TYPE)
    733            if (ZG_DEVICE_COORDINATOR_TYPE)
    734            {  
    735              uiAddInstallCodeLastStatus = bdb_addInstallCode(uiInstallCode, uiInstallCodeAddr);
    736            }
    737            else
    738            {
    739              uiAddInstallCodeLastStatus = bdb_setActiveCentralizedLinkKey(zstack_UseInstallCode, uiInstallCode);
    740            }
    741          #else
    742            uiAddInstallCodeLastStatus = bdb_setActiveCentralizedLinkKey(zstack_UseInstallCode, uiInstallCode);
   \                     ??CrossCallReturnLabel_58:
   \   000008                ; Setup parameters for call to function bdb_setActiveCentralizedLinkKey
   \   000008   7A..         MOV       R2,#uiInstallCode & 0xff
   \   00000A   7B..         MOV       R3,#(uiInstallCode >> 8) & 0xff
   \   00000C   7901         MOV       R1,#0x1
   \   00000E   12....       LCALL     `??bdb_setActiveCentralizedLinkKey::?relay`; Banked call to: bdb_setActiveCentralizedLinkKey
   \   000011   E9           MOV       A,R1
   \   000012   90....       MOV       DPTR,#uiAddInstallCodeLastStatus
   \   000015   F0           MOVX      @DPTR,A
    743          #endif
    744          }
   \   000016   80..         SJMP      ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   7A..         MOV       R2,#uiInstallCode & 0xff
   \   000002   7B..         MOV       R3,#(uiInstallCode >> 8) & 0xff
   \   000004   12....       LCALL     `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
   \   000007   EA           MOV       A,R2
   \   000008   90....       MOV       DPTR,#uiInstallCode + 16
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   EB           MOV       A,R3
   \   00000D   A3           INC       DPTR
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   22           RET
    745          
    746          /*********************************************************************
    747           * @fn          uiActionAppSecificMenu
    748           *
    749           * @brief       State-machine action for executing the application-specific sub-menus
    750           *
    751           * @param       keys - the keypress code that triggered the call to this function
    752           *
    753           * @return      none
    754           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    755          void uiActionAppSecificMenu(uint16 keys)
   \                     uiActionAppSecificMenu:
    756          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    757            if (uiAppStatesMain != NULL)
   \   000004   90....       MOV       DPTR,#uiAppStatesMain
   \   000007   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00000A   600F         JZ        ??uiActionAppSecificMenu_0
    758            {
    759              uiStates = uiAppStatesMain;
   \   00000C   90....       MOV       DPTR,#uiStates
   \   00000F   12....       LCALL     ??Subroutine47_0 & 0xFFFF
    760              uiCurrentState = 1; //do not start from 0, which is the 'back' menu item
   \                     ??CrossCallReturnLabel_126:
   \   000012   90....       MOV       DPTR,#uiCurrentState
   \   000015   7401         MOV       A,#0x1
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   E4           CLR       A
   \   00001A   F0           MOVX      @DPTR,A
    761            }
    762          }
   \                     ??uiActionAppSecificMenu_0:
   \   00001B   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    763          
    764          /*********************************************************************
    765           * @fn          UI_ActionBackFromAppMenu
    766           *
    767           * @brief       Application state-machine action for returning to the common menu
    768           *
    769           * @param       keys - the keypress code that triggered the call to this function
    770           *
    771           * @return      none
    772           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    773          void UI_ActionBackFromAppMenu(uint16 keys)
   \                     UI_ActionBackFromAppMenu:
    774          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    775            uiStates = gui_states_main;
   \   000004   90....       MOV       DPTR,#uiStates
   \   000007   74..         MOV       A,#gui_states_main & 0xff
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   74..         MOV       A,#(gui_states_main >> 8) & 0xff
   \   00000D   F0           MOVX      @DPTR,A
    776            uiCurrentState = UI_STATE_APP_SPECIFIC_MENU;
   \   00000E   90....       MOV       DPTR,#uiCurrentState
   \   000011   7403         MOV       A,#0x3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   E4           CLR       A
   \   000016   F0           MOVX      @DPTR,A
    777          }
   \   000017   02....       LJMP      ?Subroutine2 & 0xFFFF
    778          
    779          #ifdef BDB_TL_TARGET
    780          /*********************************************************************
    781           * @fn          uiActionToggleTlTarget
    782           *
    783           * @brief       State-machine action for toggling touchlink-target functionality
    784           *
    785           * @param       keys - the keypress code that triggered the call to this function
    786           *
    787           * @return      none
    788           */
    789          void uiActionToggleTlTarget(uint16 keys)
    790          {
    791            if (!touchLinkTargetEnabled)
    792            {
    793              if (uiTouchlinkTargetTimeout > 0)
    794              {
    795                touchLinkTarget_EnableCommissioning( uiTouchlinkTargetTimeout );
    796                uiLcdAutoUpdateInterval = LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN;
    797              }
    798            }
    799            else
    800            {
    801              touchLinkTarget_DisableCommissioning();
    802              uiLcdAutoUpdateInterval = LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN_END;
    803            }
    804          }
    805          #endif
    806          
    807          /*********************************************************************
    808           * @fn          uiActionProcessConfigureChannels
    809           *
    810           * @brief       State-machine action for configuring channel masks
    811           *
    812           * @param       keys - the keypress code that triggered the call to this function
    813           *
    814           * @return      none
    815           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    816          static void uiActionProcessConfigureChannels(uint16 keys)
   \                     uiActionProcessConfigureChannels:
    817          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    818            uint32 * channelMask;
    819            
    820            uiLcdCursorLine = 1;
   \   000005   90....       MOV       DPTR,#uiLcdCursorLine
   \   000008   7401         MOV       A,#0x1
   \   00000A   F0           MOVX      @DPTR,A
    821            uiLcdCursorState = 0;
   \   00000B   90....       MOV       DPTR,#uiLcdCursorState
   \   00000E   E4           CLR       A
   \   00000F   F0           MOVX      @DPTR,A
    822          
    823            if (uiCurrentState == UI_STATE_SET_PRI_CHANEL_MASK_1)
   \   000010   90....       MOV       DPTR,#uiCurrentState
   \   000013   E0           MOVX      A,@DPTR
   \   000014   640F         XRL       A,#0xf
   \   000016   7002         JNZ       ??uiActionProcessConfigureChannels_0
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \                     ??uiActionProcessConfigureChannels_0:
   \   00001A   7006         JNZ       ??uiActionProcessConfigureChannels_1
    824            {
    825              channelMask = &bdbAttributes.bdbPrimaryChannelSet;
   \   00001C   7C..         MOV       R4,#(bdbAttributes + 4) & 0xff
   \   00001E   7D..         MOV       R5,#((bdbAttributes + 4) >> 8) & 0xff
   \   000020   8004         SJMP      ??uiActionProcessConfigureChannels_2
    826            }
    827            else
    828            {
    829              channelMask = &bdbAttributes.bdbSecondaryChannelSet;
   \                     ??uiActionProcessConfigureChannels_1:
   \   000022   7C..         MOV       R4,#bdbAttributes & 0xff
   \   000024   7D..         MOV       R5,#(bdbAttributes >> 8) & 0xff
    830            }
    831          
    832            if (keys & UI_KEY_SW_5_RELEASED)
   \                     ??uiActionProcessConfigureChannels_2:
   \   000026   EB           MOV       A,R3
   \   000027   5404         ANL       A,#0x4
   \   000029   6005         JZ        ??uiActionProcessConfigureChannels_3
    833            {
    834              uiLcdCursorCol = 0;
   \   00002B   90....       MOV       DPTR,#uiLcdCursorCol
   \   00002E   E4           CLR       A
   \   00002F   F0           MOVX      @DPTR,A
    835            }
    836            
    837            if (keys & UI_KEY_SW_1_PRESSED)
   \                     ??uiActionProcessConfigureChannels_3:
   \   000030   75..00       MOV       ?V0,#0x0
   \   000033   75..08       MOV       ?V1,#0x8
   \   000036   75..00       MOV       ?V2,#0x0
   \   000039   75..00       MOV       ?V3,#0x0
   \   00003C   90....       MOV       DPTR,#uiLcdCursorCol
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?L_SHL
   \   000045   EA           MOV       A,R2
   \   000046   A2E0         MOV       C,0xE0 /* A   */.0
   \   000048   500B         JNC       ??uiActionProcessConfigureChannels_4
    838            {
    839              *channelMask |= ((uint32)0x00000800 << uiLcdCursorCol);
   \   00004A   8C82         MOV       DPL,R4
   \   00004C   8D83         MOV       DPH,R5
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?L_IOR_TO_X
    840              uiLcdCursorState = 1;
   \   000053   8012         SJMP      ??uiActionProcessConfigureChannels_5
    841            }
    842            else if (keys & UI_KEY_SW_3_PRESSED)
   \                     ??uiActionProcessConfigureChannels_4:
   \   000055   5410         ANL       A,#0x10
   \   000057   6015         JZ        ??uiActionProcessConfigureChannels_6
    843            {
    844              *channelMask &= ~(((uint32)0x00000800 << uiLcdCursorCol));
   \   000059   78..         MOV       R0,#?V0
   \   00005B   12....       LCALL     ?L_NOT
   \   00005E   8C82         MOV       DPL,R4
   \   000060   8D83         MOV       DPH,R5
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?L_AND_TO_X
    845              uiLcdCursorState = 1;
   \                     ??uiActionProcessConfigureChannels_5:
   \   000067   90....       MOV       DPTR,#uiLcdCursorState
   \   00006A   7401         MOV       A,#0x1
   \   00006C   803E         SJMP      ??CrossCallReturnLabel_0
    846            }
    847            else if (keys & UI_KEY_SW_2_PRESSED)
   \                     ??uiActionProcessConfigureChannels_6:
   \   00006E   EA           MOV       A,R2
   \   00006F   5402         ANL       A,#0x2
   \   000071   600D         JZ        ??uiActionProcessConfigureChannels_7
    848            {
    849              if (uiLcdCursorCol < 15)
   \   000073   E0           MOVX      A,@DPTR
   \   000074   C3           CLR       C
   \   000075   940F         SUBB      A,#0xf
   \   000077   5004         JNC       ??uiActionProcessConfigureChannels_8
    850              {
    851                uiLcdCursorCol++;
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   04           INC       A
   \   00007B   802F         SJMP      ??CrossCallReturnLabel_0
    852              }
    853              else
    854              {
    855                uiLcdCursorCol = 0;
   \                     ??uiActionProcessConfigureChannels_8:
   \   00007D   E4           CLR       A
   \   00007E   802C         SJMP      ??CrossCallReturnLabel_0
    856              }
    857            }
    858            else if (keys & UI_KEY_SW_4_PRESSED)
   \                     ??uiActionProcessConfigureChannels_7:
   \   000080   EA           MOV       A,R2
   \   000081   5408         ANL       A,#0x8
   \   000083   600A         JZ        ??uiActionProcessConfigureChannels_9
    859            {
    860              if (uiLcdCursorCol > 0)
   \   000085   E0           MOVX      A,@DPTR
   \   000086   6003         JZ        ??uiActionProcessConfigureChannels_10
    861              {
    862                uiLcdCursorCol--;
   \   000088   14           DEC       A
   \   000089   8021         SJMP      ??CrossCallReturnLabel_0
    863              }
    864              else
    865              {
    866                uiLcdCursorCol = 15;
   \                     ??uiActionProcessConfigureChannels_10:
   \   00008B   740F         MOV       A,#0xf
   \   00008D   801D         SJMP      ??CrossCallReturnLabel_0
    867              }
    868            }
    869            else if (keys & UI_KEY_SW_5_PRESSED)
   \                     ??uiActionProcessConfigureChannels_9:
   \   00008F   EA           MOV       A,R2
   \   000090   5404         ANL       A,#0x4
   \   000092   6019         JZ        ??uiActionProcessConfigureChannels_11
    870            {
    871              if (uiCurrentState == UI_STATE_SET_PRI_CHANEL_MASK_1)
   \   000094   90....       MOV       DPTR,#uiCurrentState
   \   000097   E0           MOVX      A,@DPTR
   \   000098   640F         XRL       A,#0xf
   \   00009A   7002         JNZ       ??uiActionProcessConfigureChannels_12
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \                     ??uiActionProcessConfigureChannels_12:
   \   00009E   90....       MOV       DPTR,#uiCurrentState
   \   0000A1   7004         JNZ       ??uiActionProcessConfigureChannels_13
    872              {
    873                uiCurrentState = UI_STATE_SET_PRI_CHANEL_MASK_0;
   \   0000A3   740B         MOV       A,#0xb
   \   0000A5   8002         SJMP      ??uiActionProcessConfigureChannels_14
    874              }
    875              else
    876              {
    877                uiCurrentState = UI_STATE_SET_SEC_CHANEL_MASK_0;
   \                     ??uiActionProcessConfigureChannels_13:
   \   0000A7   740C         MOV       A,#0xc
    878              }
    879              
    880              uiLcdCursorLine = 0xFF;
    881            }
   \                     ??uiActionProcessConfigureChannels_14:
   \   0000A9   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000AC   F0           MOVX      @DPTR,A
    882          }
   \                     ??uiActionProcessConfigureChannels_11:
   \   0000AD                REQUIRE ?Subroutine3
   \   0000AD                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   90....       MOV       DPTR,#uiLcdCursorLine
   \   000007   74FF         MOV       A,#-0x1
   \   000009   22           RET
    883          
    884          /*********************************************************************
    885           * @fn          uiActionProcessConfigurePanId
    886           *
    887           * @brief       State-machine action for configuring the PAN ID
    888           *
    889           * @param       keys - the keypress code that triggered the call to this function
    890           *
    891           * @return      none
    892           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    893          static void uiActionProcessConfigurePanId(uint16 keys)
   \                     uiActionProcessConfigurePanId:
    894          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    895            uint8 shift;
    896            uint8 digit;
    897            
    898            uiLcdCursorLine = 0;
   \   000005   90....       MOV       DPTR,#uiLcdCursorLine
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
    899            uiLcdCursorState = 0;
   \   00000A   90....       MOV       DPTR,#uiLcdCursorState
   \   00000D   F0           MOVX      @DPTR,A
    900            
    901            if (keys & UI_KEY_SW_5_RELEASED)
   \   00000E   EB           MOV       A,R3
   \   00000F   5404         ANL       A,#0x4
   \   000011   6006         JZ        ??uiActionProcessConfigurePanId_0
    902            {
    903              uiLcdCursorCol = 6;
   \   000013   90....       MOV       DPTR,#uiLcdCursorCol
   \   000016   7406         MOV       A,#0x6
   \   000018   F0           MOVX      @DPTR,A
    904            }
    905          
    906            if ((keys & UI_KEY_SW_1_PRESSED) || (keys & UI_KEY_SW_3_PRESSED))
   \                     ??uiActionProcessConfigurePanId_0:
   \   000019   EA           MOV       A,R2
   \   00001A   5411         ANL       A,#0x11
   \   00001C   7003         JNZ       $+5
   \   00001E   02....       LJMP      ??uiActionProcessConfigurePanId_1 & 0xFFFF
    907            {
    908              shift = 4 * (9 - uiLcdCursorCol);
   \   000021   90....       MOV       DPTR,#uiLcdCursorCol
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   7409         MOV       A,#0x9
   \   000028   C3           CLR       C
   \   000029   98           SUBB      A,R0
   \   00002A   33           RLC       A
   \   00002B   33           RLC       A
   \   00002C   54FC         ANL       A,#0xfc
   \   00002E   FC           MOV       R4,A
    909              digit = (zgConfigPANID >> shift) & 0xF;
   \   00002F   90....       MOV       DPTR,#zgConfigPANID
   \   000032   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000035   F5..         MOV       ?V1,A
   \   000037   EC           MOV       A,R4
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?US_SHR
   \   00003D   E5..         MOV       A,?V0
   \   00003F   540F         ANL       A,#0xf
   \   000041   F9           MOV       R1,A
    910              if (keys & UI_KEY_SW_1_PRESSED)
   \   000042   EA           MOV       A,R2
   \   000043   A2E0         MOV       C,0xE0 /* A   */.0
   \   000045   500D         JNC       ??uiActionProcessConfigurePanId_2
    911              {
    912                if (digit < 15)
   \   000047   E9           MOV       A,R1
   \   000048   C3           CLR       C
   \   000049   940F         SUBB      A,#0xf
   \   00004B   5003         JNC       ??uiActionProcessConfigurePanId_3
    913                {
    914                  digit++;
   \   00004D   09           INC       R1
   \   00004E   8010         SJMP      ??uiActionProcessConfigurePanId_4
    915                }
    916                else
    917                {
    918                  digit = 0;
   \                     ??uiActionProcessConfigurePanId_3:
   \   000050   7900         MOV       R1,#0x0
   \   000052   800C         SJMP      ??uiActionProcessConfigurePanId_4
    919                }
    920              }
    921              else if (keys & UI_KEY_SW_3_PRESSED)
   \                     ??uiActionProcessConfigurePanId_2:
   \   000054   5410         ANL       A,#0x10
   \   000056   6008         JZ        ??uiActionProcessConfigurePanId_4
    922              {
    923                if (digit > 0)
   \   000058   E9           MOV       A,R1
   \   000059   6003         JZ        ??uiActionProcessConfigurePanId_5
    924                {
    925                  digit--;
   \   00005B   19           DEC       R1
   \   00005C   8002         SJMP      ??uiActionProcessConfigurePanId_4
    926                }
    927                else
    928                {
    929                  digit = 15;
   \                     ??uiActionProcessConfigurePanId_5:
   \   00005E   790F         MOV       R1,#0xf
    930                }
    931              }
    932          
    933              zgConfigPANID &= ~((uint32)0xF << shift);
    934              zgConfigPANID |= (uint32)digit << shift;
   \                     ??uiActionProcessConfigurePanId_4:
   \   000060   75..0F       MOV       ?V0,#0xf
   \   000063   75..00       MOV       ?V1,#0x0
   \   000066   75..00       MOV       ?V2,#0x0
   \   000069   75..00       MOV       ?V3,#0x0
   \   00006C   EC           MOV       A,R4
   \   00006D   78..         MOV       R0,#?V0
   \   00006F   12....       LCALL     ?L_SHL
   \   000072   E5..         MOV       A,?V0
   \   000074   F4           CPL       A
   \   000075   FA           MOV       R2,A
   \   000076   E5..         MOV       A,?V1
   \   000078   F4           CPL       A
   \   000079   FB           MOV       R3,A
   \   00007A   90....       MOV       DPTR,#zgConfigPANID
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   5A           ANL       A,R2
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   5B           ANL       A,R3
   \   000083   F0           MOVX      @DPTR,A
   \   000084   89..         MOV       ?V0,R1
   \   000086   E4           CLR       A
   \   000087   F5..         MOV       ?V1,A
   \   000089   F5..         MOV       ?V2,A
   \   00008B   F5..         MOV       ?V3,A
   \   00008D   EC           MOV       A,R4
   \   00008E   78..         MOV       R0,#?V0
   \   000090   12....       LCALL     ?L_SHL
   \   000093   90....       MOV       DPTR,#zgConfigPANID
   \   000096   E0           MOVX      A,@DPTR
   \   000097   45..         ORL       A,?V0
   \   000099   F0           MOVX      @DPTR,A
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   45..         ORL       A,?V1
   \   00009E   F0           MOVX      @DPTR,A
    935              uiLcdCursorState = 1;
   \   00009F   90....       MOV       DPTR,#uiLcdCursorState
   \   0000A2   7401         MOV       A,#0x1
   \   0000A4   805C         SJMP      ??CrossCallReturnLabel_1
    936            }
    937            else if (keys & UI_KEY_SW_2_PRESSED)
   \                     ??uiActionProcessConfigurePanId_1:
   \   0000A6   EA           MOV       A,R2
   \   0000A7   5402         ANL       A,#0x2
   \   0000A9   600D         JZ        ??uiActionProcessConfigurePanId_6
    938            {
    939              if (uiLcdCursorCol < 9)
   \   0000AB   90....       MOV       DPTR,#uiLcdCursorCol
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   C3           CLR       C
   \   0000B0   9409         SUBB      A,#0x9
   \   0000B2   504F         JNC       ??uiActionProcessConfigurePanId_7
    940              {
    941                uiLcdCursorCol++;
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   04           INC       A
   \   0000B6   804A         SJMP      ??CrossCallReturnLabel_1
    942              }
    943            }
    944            else if (keys & UI_KEY_SW_4_PRESSED)
   \                     ??uiActionProcessConfigurePanId_6:
   \   0000B8   EA           MOV       A,R2
   \   0000B9   5408         ANL       A,#0x8
   \   0000BB   600D         JZ        ??uiActionProcessConfigurePanId_8
    945            {
    946              if (uiLcdCursorCol > 6)
   \   0000BD   90....       MOV       DPTR,#uiLcdCursorCol
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   C3           CLR       C
   \   0000C2   9407         SUBB      A,#0x7
   \   0000C4   403D         JC        ??uiActionProcessConfigurePanId_7
    947              {
    948                uiLcdCursorCol--;
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   14           DEC       A
   \   0000C8   8038         SJMP      ??CrossCallReturnLabel_1
    949              }
    950            }
    951            else if (keys & UI_KEY_SW_5_PRESSED)
   \                     ??uiActionProcessConfigurePanId_8:
   \   0000CA   EA           MOV       A,R2
   \   0000CB   5404         ANL       A,#0x4
   \   0000CD   6034         JZ        ??uiActionProcessConfigurePanId_7
    952            {
    953              osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &zgConfigPANID); //todo: check and display result of osal_nv_write()
   \   0000CF                ; Setup parameters for call to function osal_nv_item_len
   \   0000CF   7A83         MOV       R2,#-0x7d
   \   0000D1   7B00         MOV       R3,#0x0
   \   0000D3   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   0000D6   8A..         MOV       ?V0,R2
   \   0000D8   8B..         MOV       ?V1,R3
   \   0000DA                ; Setup parameters for call to function osal_nv_write
   \   0000DA   75....       MOV       ?V2,#zgConfigPANID & 0xff
   \   0000DD   75....       MOV       ?V3,#(zgConfigPANID >> 8) & 0xff
   \   0000E0   78..         MOV       R0,#?V2
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E5   78..         MOV       R0,#?V0
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EA   7C00         MOV       R4,#0x0
   \   0000EC   7D00         MOV       R5,#0x0
   \   0000EE   7A83         MOV       R2,#-0x7d
   \   0000F0   7B00         MOV       R3,#0x0
   \   0000F2   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000F5   7404         MOV       A,#0x4
   \   0000F7   12....       LCALL     ?DEALLOC_XSTACK8
    954          
    955              uiCurrentState = UI_STATE_SET_PAN_ID_0;
   \   0000FA   90....       MOV       DPTR,#uiCurrentState
   \   0000FD   740D         MOV       A,#0xd
   \   0000FF   12....       LCALL     ?Subroutine5 & 0xFFFF
    956              
    957              uiLcdCursorLine = 0xFF;
    958            }
   \                     ??CrossCallReturnLabel_1:
   \   000102   F0           MOVX      @DPTR,A
    959          }
   \                     ??uiActionProcessConfigurePanId_7:
   \   000103   02....       LJMP      ?Subroutine3 & 0xFFFF
    960          
    961          /*********************************************************************
    962           * @fn          uiActionProcessPrepareInstallCode
    963           *
    964           * @brief       State-machine action for editing the install-code and the install-code address
    965           *
    966           * @param       keys - the keypress code that triggered the call to this function
    967           *
    968           * @return      none
    969           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    970          static void uiActionProcessPrepareInstallCode(uint16 keys)
   \                     uiActionProcessPrepareInstallCode:
    971          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    972            static uint8 * pCurrentModifiedField;
    973            static uint8 CurrentModifiedFieldLen;
    974            static bool CurrentModifiedFieldIsBigEndian;
    975            
    976            static uint8 index;
    977          
    978            uint8 shift;
    979            uint8 digit;
    980            uint8 bufIndex;
    981            uint16 crc;
    982          
    983            uiLcdCursorState = 0;
   \   000007   90....       MOV       DPTR,#uiLcdCursorState
   \   00000A   E4           CLR       A
   \   00000B   F0           MOVX      @DPTR,A
    984            
    985            if (keys & UI_KEY_SW_5_RELEASED)
   \   00000C   EB           MOV       A,R3
   \   00000D   5404         ANL       A,#0x4
   \   00000F   601E         JZ        ??CrossCallReturnLabel_59
    986            {
    987              index = 0;
   \   000011   90....       MOV       DPTR,#??index
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
    988              
    989          #if (ZG_BUILD_COORDINATOR_TYPE)
    990              if (uiCurrentState == UI_STATE_SET_INST_CODE_ADDR_1)
    991              {
    992                pCurrentModifiedField = uiInstallCodeAddr;
    993                CurrentModifiedFieldLen = sizeof(uiInstallCodeAddr);
    994                CurrentModifiedFieldIsBigEndian = FALSE;
    995              }
    996              else
    997          #endif
    998              {
    999                pCurrentModifiedField = uiInstallCode;
   \   000016   90....       MOV       DPTR,#??pCurrentModifiedField
   \   000019   74..         MOV       A,#uiInstallCode & 0xff
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   74..         MOV       A,#(uiInstallCode >> 8) & 0xff
   \   00001F   F0           MOVX      @DPTR,A
   1000                CurrentModifiedFieldLen = INSTALL_CODE_LEN;
   \   000020   90....       MOV       DPTR,#??CurrentModifiedFieldLen
   \   000023   7410         MOV       A,#0x10
   \   000025   F0           MOVX      @DPTR,A
   1001                CurrentModifiedFieldIsBigEndian = TRUE;
   \   000026   90....       MOV       DPTR,#??CurrentModifiedFieldIsBigEndian
   \   000029   7401         MOV       A,#0x1
   \   00002B   F0           MOVX      @DPTR,A
   1002          
   1003                crc = bdb_GenerateInstallCodeCRC(uiInstallCode);
   \   00002C                ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
   \   00002C   12....       LCALL     ?Subroutine27 & 0xFFFF
   1004                uiInstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
   1005                uiInstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
   1006              }
   1007            }
   1008          
   1009            if ((keys & UI_KEY_SW_1_PRESSED) || (keys & UI_KEY_SW_3_PRESSED))
   \                     ??CrossCallReturnLabel_59:
   \   00002F   90....       MOV       DPTR,#??index
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FA           MOV       R2,A
   \   000034   EE           MOV       A,R6
   \   000035   5411         ANL       A,#0x11
   \   000037   FC           MOV       R4,A
   \   000038   7003         JNZ       $+5
   \   00003A   02....       LJMP      ??uiActionProcessPrepareInstallCode_0 & 0xFFFF
   1010            {
   1011              if(pCurrentModifiedField == uiInstallCode)
   \   00003D   EA           MOV       A,R2
   \   00003E   2401         ADD       A,#0x1
   \   000040   F5..         MOV       ?V0,A
   \   000042   E4           CLR       A
   \   000043   3400         ADDC      A,#0x0
   \   000045   F5..         MOV       ?V1,A
   \   000047   90....       MOV       DPTR,#??pCurrentModifiedField
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   64..         XRL       A,#uiInstallCode & 0xff
   \   00004D   7004         JNZ       ??uiActionProcessPrepareInstallCode_1
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   64..         XRL       A,#(uiInstallCode >> 8) & 0xff
   \                     ??uiActionProcessPrepareInstallCode_1:
   \   000053   90....       MOV       DPTR,#??CurrentModifiedFieldIsBigEndian
   \   000056   7005         JNZ       ??uiActionProcessPrepareInstallCode_2
   1012              {
   1013                shift = 4 * ((CurrentModifiedFieldIsBigEndian ? (index + 1) : index ) % 2);
   \   000058   E0           MOVX      A,@DPTR
   \   000059   6005         JZ        ??uiActionProcessPrepareInstallCode_3
   \   00005B   8009         SJMP      ??uiActionProcessPrepareInstallCode_4
   1014              }
   1015              else
   1016              {
   1017                shift = 4 * ((CurrentModifiedFieldIsBigEndian ? index : (index + 1)) % 2);
   \                     ??uiActionProcessPrepareInstallCode_2:
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   6006         JZ        ??uiActionProcessPrepareInstallCode_4
   \                     ??uiActionProcessPrepareInstallCode_3:
   \   000060   EA           MOV       A,R2
   \   000061   F8           MOV       R0,A
   \   000062   7900         MOV       R1,#0x0
   \   000064   8004         SJMP      ??uiActionProcessPrepareInstallCode_5
   \                     ??uiActionProcessPrepareInstallCode_4:
   \   000066   A8..         MOV       R0,?V0
   \   000068   A9..         MOV       R1,?V1
   \                     ??uiActionProcessPrepareInstallCode_5:
   \   00006A   7A02         MOV       R2,#0x2
   \   00006C   7B00         MOV       R3,#0x0
   \   00006E   12....       LCALL     ?S_DIV_MOD
   \   000071   EA           MOV       A,R2
   \   000072   33           RLC       A
   \   000073   33           RLC       A
   \   000074   54FC         ANL       A,#0xfc
   \   000076   FA           MOV       R2,A
   1018              }
   1019              bufIndex = (CurrentModifiedFieldIsBigEndian ? (index / 2) : (CurrentModifiedFieldLen - 1 - (index / 2)));
   \   000077   90....       MOV       DPTR,#??index
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   C3           CLR       C
   \   00007C   13           RRC       A
   \   00007D   F8           MOV       R0,A
   \   00007E   90....       MOV       DPTR,#??CurrentModifiedFieldIsBigEndian
   \   000081   E0           MOVX      A,@DPTR
   \   000082   6004         JZ        ??uiActionProcessPrepareInstallCode_6
   \   000084   88..         MOV       ?V0,R0
   \   000086   8009         SJMP      ??uiActionProcessPrepareInstallCode_7
   \                     ??uiActionProcessPrepareInstallCode_6:
   \   000088   90....       MOV       DPTR,#??CurrentModifiedFieldLen
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   14           DEC       A
   \   00008D   C3           CLR       C
   \   00008E   98           SUBB      A,R0
   \   00008F   F5..         MOV       ?V0,A
   1020              digit = (pCurrentModifiedField[bufIndex] >> shift) & 0xF;
   \                     ??uiActionProcessPrepareInstallCode_7:
   \   000091   A8..         MOV       R0,?V0
   \   000093   90....       MOV       DPTR,#??pCurrentModifiedField
   \   000096   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   FB           MOV       R3,A
   \   00009B   F5..         MOV       ?V2,A
   \   00009D   75..00       MOV       ?V3,#0x0
   \   0000A0   EA           MOV       A,R2
   \   0000A1   78..         MOV       R0,#?V2
   \   0000A3   12....       LCALL     ?SS_SHR
   \   0000A6   E5..         MOV       A,?V2
   \   0000A8   540F         ANL       A,#0xf
   \   0000AA   F8           MOV       R0,A
   1021          
   1022              if (keys & UI_KEY_SW_1_PRESSED)
   \   0000AB   EE           MOV       A,R6
   \   0000AC   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000AE   500D         JNC       ??uiActionProcessPrepareInstallCode_8
   1023              {
   1024                if (digit < 15)
   \   0000B0   E8           MOV       A,R0
   \   0000B1   C3           CLR       C
   \   0000B2   940F         SUBB      A,#0xf
   \   0000B4   5003         JNC       ??uiActionProcessPrepareInstallCode_9
   1025                {
   1026                  digit++;
   \   0000B6   08           INC       R0
   \   0000B7   8010         SJMP      ??uiActionProcessPrepareInstallCode_10
   1027                }
   1028                else
   1029                {
   1030                  digit = 0;
   \                     ??uiActionProcessPrepareInstallCode_9:
   \   0000B9   7800         MOV       R0,#0x0
   \   0000BB   800C         SJMP      ??uiActionProcessPrepareInstallCode_10
   1031                }
   1032              }
   1033              else if (keys & UI_KEY_SW_3_PRESSED)
   \                     ??uiActionProcessPrepareInstallCode_8:
   \   0000BD   5410         ANL       A,#0x10
   \   0000BF   6008         JZ        ??uiActionProcessPrepareInstallCode_10
   1034              {
   1035                if (digit > 0)
   \   0000C1   E8           MOV       A,R0
   \   0000C2   6003         JZ        ??uiActionProcessPrepareInstallCode_11
   1036                {
   1037                  digit--;
   \   0000C4   18           DEC       R0
   \   0000C5   8002         SJMP      ??uiActionProcessPrepareInstallCode_10
   1038                }
   1039                else
   1040                {
   1041                  digit = 15;
   \                     ??uiActionProcessPrepareInstallCode_11:
   \   0000C7   780F         MOV       R0,#0xf
   1042                }
   1043              }
   1044              
   1045              pCurrentModifiedField[bufIndex] &= ~((uint32)0xF << shift);
   1046              pCurrentModifiedField[bufIndex] |= (uint32)digit << shift;
   \                     ??uiActionProcessPrepareInstallCode_10:
   \   0000C9   88..         MOV       ?V4,R0
   \   0000CB   E4           CLR       A
   \   0000CC   F5..         MOV       ?V5,A
   \   0000CE   F5..         MOV       ?V6,A
   \   0000D0   F5..         MOV       ?V7,A
   \   0000D2   EA           MOV       A,R2
   \   0000D3   78..         MOV       R0,#?V4
   \   0000D5   12....       LCALL     ?L_SHL
   \   0000D8   A9..         MOV       R1,?V4
   \   0000DA   75..0F       MOV       ?V4,#0xf
   \   0000DD   F5..         MOV       ?V5,A
   \   0000DF   F5..         MOV       ?V6,A
   \   0000E1   F5..         MOV       ?V7,A
   \   0000E3   EA           MOV       A,R2
   \   0000E4   78..         MOV       R0,#?V4
   \   0000E6   12....       LCALL     ?L_SHL
   \   0000E9   E5..         MOV       A,?V4
   \   0000EB   F4           CPL       A
   \   0000EC   5B           ANL       A,R3
   \   0000ED   49           ORL       A,R1
   \   0000EE   F0           MOVX      @DPTR,A
   1047              uiLcdCursorState = 1;
   \   0000EF   90....       MOV       DPTR,#uiLcdCursorState
   \   0000F2   7401         MOV       A,#0x1
   \   0000F4   8042         SJMP      ??uiActionProcessPrepareInstallCode_12
   1048            }
   1049            else if (keys & UI_KEY_SW_2_PRESSED)
   \                     ??uiActionProcessPrepareInstallCode_0:
   \   0000F6   EE           MOV       A,R6
   \   0000F7   5402         ANL       A,#0x2
   \   0000F9   6028         JZ        ??uiActionProcessPrepareInstallCode_13
   1050            {
   1051              if (index < CurrentModifiedFieldLen * 2 - 1)
   \   0000FB   90....       MOV       DPTR,#??CurrentModifiedFieldLen
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   25E0         ADD       A,0xE0 /* A   */
   \   000101   F8           MOV       R0,A
   \   000102   E4           CLR       A
   \   000103   33           RLC       A
   \   000104   F9           MOV       R1,A
   \   000105   E8           MOV       A,R0
   \   000106   24FF         ADD       A,#-0x1
   \   000108   18           DEC       R0
   \   000109   E9           MOV       A,R1
   \   00010A   34FF         ADDC      A,#-0x1
   \   00010C   F9           MOV       R1,A
   \   00010D   C3           CLR       C
   \   00010E   EA           MOV       A,R2
   \   00010F   98           SUBB      A,R0
   \   000110   E4           CLR       A
   \   000111   99           SUBB      A,R1
   \   000112   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000114   65D0         XRL       A,PSW
   \   000116   33           RLC       A
   \   000117   90....       MOV       DPTR,#??index
   \   00011A   5004         JNC       ??uiActionProcessPrepareInstallCode_14
   1052              {
   1053                index++;
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   04           INC       A
   \   00011E   8018         SJMP      ??uiActionProcessPrepareInstallCode_12
   1054              }
   1055              else
   1056              {
   1057                index = 0;
   \                     ??uiActionProcessPrepareInstallCode_14:
   \   000120   E4           CLR       A
   \   000121   8015         SJMP      ??uiActionProcessPrepareInstallCode_12
   1058              }
   1059            }
   1060            else if (keys & UI_KEY_SW_4_PRESSED)
   \                     ??uiActionProcessPrepareInstallCode_13:
   \   000123   EE           MOV       A,R6
   \   000124   5408         ANL       A,#0x8
   \   000126   6011         JZ        ??uiActionProcessPrepareInstallCode_15
   1061            {
   1062              if (index > 0)
   \   000128   E0           MOVX      A,@DPTR
   \   000129   6003         JZ        ??uiActionProcessPrepareInstallCode_16
   1063              {
   1064                index --;
   \   00012B   14           DEC       A
   \   00012C   800A         SJMP      ??uiActionProcessPrepareInstallCode_12
   1065              }
   1066              else
   1067              {
   1068                index = (CurrentModifiedFieldLen * 2 - 1);
   \                     ??uiActionProcessPrepareInstallCode_16:
   \   00012E   90....       MOV       DPTR,#??CurrentModifiedFieldLen
   \   000131   E0           MOVX      A,@DPTR
   \   000132   C3           CLR       C
   \   000133   33           RLC       A
   \   000134   14           DEC       A
   \   000135   90....       MOV       DPTR,#??index
   \                     ??uiActionProcessPrepareInstallCode_12:
   \   000138   F0           MOVX      @DPTR,A
   1069              }
   1070            }
   1071            
   1072            uiLcdCursorLine = index / LCD_LINE_LENGTH;
   \                     ??uiActionProcessPrepareInstallCode_15:
   \   000139   90....       MOV       DPTR,#??index
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   C4           SWAP      A
   \   00013E   540F         ANL       A,#0xf
   \   000140   90....       MOV       DPTR,#uiLcdCursorLine
   \   000143   F0           MOVX      @DPTR,A
   1073            uiLcdCursorCol = index % LCD_LINE_LENGTH;
   \   000144   90....       MOV       DPTR,#??index
   \   000147   E0           MOVX      A,@DPTR
   \   000148   540F         ANL       A,#0xf
   \   00014A   90....       MOV       DPTR,#uiLcdCursorCol
   \   00014D   F0           MOVX      @DPTR,A
   1074          
   1075            if ((uiCurrentState == UI_STATE_SET_INST_CODE_1) && ((keys & UI_KEY_SW_1_PRESSED) || (keys & UI_KEY_SW_3_PRESSED)))
   \   00014E   90....       MOV       DPTR,#uiCurrentState
   \   000151   E0           MOVX      A,@DPTR
   \   000152   6415         XRL       A,#0x15
   \   000154   7002         JNZ       ??uiActionProcessPrepareInstallCode_17
   \   000156   A3           INC       DPTR
   \   000157   E0           MOVX      A,@DPTR
   \                     ??uiActionProcessPrepareInstallCode_17:
   \   000158   7006         JNZ       ??CrossCallReturnLabel_60
   \   00015A   EC           MOV       A,R4
   \   00015B   6003         JZ        ??CrossCallReturnLabel_60
   1076            {
   1077              crc = bdb_GenerateInstallCodeCRC(uiInstallCode);
   \   00015D                ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
   \   00015D   12....       LCALL     ?Subroutine27 & 0xFFFF
   1078              uiInstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
   1079              uiInstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
   1080            }
   1081          
   1082            if (keys & UI_KEY_SW_5_PRESSED)
   \                     ??CrossCallReturnLabel_60:
   \   000160   EE           MOV       A,R6
   \   000161   5404         ANL       A,#0x4
   \   000163   6009         JZ        ??uiActionProcessPrepareInstallCode_18
   1083            {
   1084          #if (ZG_BUILD_COORDINATOR_TYPE)
   1085              if (uiCurrentState == UI_STATE_SET_INST_CODE_ADDR_1)
   1086              {
   1087                uiCurrentState = UI_STATE_SET_INST_CODE_ADDR_0;
   1088              }
   1089              else
   1090          #endif
   1091              {
   1092                uiCurrentState = UI_STATE_SET_INST_CODE_0;
   \   000165   90....       MOV       DPTR,#uiCurrentState
   \   000168   7412         MOV       A,#0x12
   \   00016A   12....       LCALL     ?Subroutine5 & 0xFFFF
   1093              }
   1094              
   1095              uiLcdCursorLine = 0xFF;
   1096            }
   \                     ??CrossCallReturnLabel_2:
   \   00016D   F0           MOVX      @DPTR,A
   1097          }
   \                     ??uiActionProcessPrepareInstallCode_18:
   \   00016E   7F08         MOV       R7,#0x8
   \   000170   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??pCurrentModifiedField:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??CurrentModifiedFieldLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??CurrentModifiedFieldIsBigEndian:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??index:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   1098          
   1099          /*********************************************************************
   1100           * @fn          uiActionConfigureEnables
   1101           *
   1102           * @brief       State-machine action for toggling various configurations on and off
   1103           *
   1104           * @param       keys - the keypress code that triggered the call to this function
   1105           *
   1106           * @return      none
   1107           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1108          static void uiActionConfigureEnables(uint16 keys)
   \                     uiActionConfigureEnables:
   1109          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1110          #if defined ( BDB_TL_TARGET )
   1111            static uint32 TouchlinkTimeoutIncements = TOUCHLINK_TIMEOUT_INCREMENTS_INITIAL;
   1112          #endif
   1113          
   1114            switch (uiCurrentState)
   \   000005   90....       MOV       DPTR,#uiCurrentState
   \   000008   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00000B   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for uiActionConfigureEnables>_0`:
   \   00000E   0800         DW        8
   \   000010   02           DB        2
   \   000011   ....         DW        ??uiActionConfigureEnables_0
   \   000013   ....         DW        ??uiActionConfigureEnables_1
   \   000015   ....         DW        ??uiActionConfigureEnables_2
   \   000017   ....         DW        ??uiActionConfigureEnables_3
   1115            {
   1116          #ifdef BDB_TL_TARGET
   1117              case UI_STATE_TOUCHLINK_TARGET:
   1118                if (keys & UI_KEY_SW_1_PRESSED)
   1119                {
   1120                  if (uiTouchlinkTargetTimeout < TOUCHLINK_TARGET_PERPETUAL - TouchlinkTimeoutIncements)
   1121                  {
   1122                    uiTouchlinkTargetTimeout += TouchlinkTimeoutIncements;
   1123                  }
   1124                  else
   1125                  {
   1126                    uiTouchlinkTargetTimeout = TOUCHLINK_TARGET_PERPETUAL;
   1127                  }
   1128                }
   1129                else if ((keys & UI_KEY_SW_3_PRESSED) && (uiTouchlinkTargetTimeout >= TouchlinkTimeoutIncements))
   1130                {
   1131                  if ((uiTouchlinkTargetTimeout % TouchlinkTimeoutIncements) != 0)
   1132                  {
   1133                    uiTouchlinkTargetTimeout -= uiTouchlinkTargetTimeout % TouchlinkTimeoutIncements;
   1134                  }
   1135                  else
   1136                  {
   1137                    uiTouchlinkTargetTimeout -= TouchlinkTimeoutIncements;
   1138                  }
   1139                }
   1140          
   1141                if ((keys & (UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED)) && ((uiTouchlinkTargetTimeout > 0) && (uiTouchlinkTargetTimeout < TOUCHLINK_TARGET_PERPETUAL)))
   1142                {
   1143                  osal_start_timerEx(uiAppTaskId, uiKeyAutoRepeatEvent, uiAutoKeyRepeatDelay);
   1144                  uiAutoKeyRepeatDelay = 100;
   1145                  if (TouchlinkTimeoutIncements < TOUCHLINK_TIMEOUT_INCREMENTS_MAX)
   1146                  {
   1147                    uiAutoKeyRepeatCount++;
   1148                    if (uiAutoKeyRepeatCount == 3)
   1149                    {
   1150                      uiAutoKeyRepeatCount = 0;
   1151                      TouchlinkTimeoutIncements *= 2;
   1152                    }
   1153                  }
   1154                }
   1155                else
   1156                {
   1157                  osal_stop_timerEx(uiAppTaskId, uiKeyAutoRepeatEvent);
   1158                  uiAutoKeyRepeatDelay = 500;
   1159                  uiAutoKeyRepeatCount = 0;
   1160                  TouchlinkTimeoutIncements = 1000;
   1161                }
   1162                break;
   1163              case UI_STATE_TOUCHLINK_STEALING:
   1164                bdb_TouchlinkSetAllowStealing( ! bdb_TouchlinkGetAllowStealing() );
   1165                break;
   1166          #endif
   1167          #ifdef BDB_TL_INITIATOR
   1168              case UI_STATE_TOUCHLINK_INITIATOR:
   1169                uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_INITIATOR_TL;
   1170                break;
   1171          #endif
   1172              case UI_STATE_NETWORK_FORMATION:
   1173                uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_NWK_FORMATION;
   \                     ??uiActionConfigureEnables_1:
   \   000019   90....       MOV       DPTR,#uiSelectedBdbComissioningModes
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6404         XRL       A,#0x4
   \   00001F   800E         SJMP      ??uiActionConfigureEnables_4
   1174                break;
   1175              case UI_STATE_NETWORK_STEERING:
   1176                uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_NWK_STEERING;
   \                     ??uiActionConfigureEnables_2:
   \   000021   90....       MOV       DPTR,#uiSelectedBdbComissioningModes
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6402         XRL       A,#0x2
   \   000027   8006         SJMP      ??uiActionConfigureEnables_4
   1177                break;
   1178              case UI_STATE_FINDING_AND_BINDING:
   1179                uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_FINDING_BINDING;
   \                     ??uiActionConfigureEnables_3:
   \   000029   90....       MOV       DPTR,#uiSelectedBdbComissioningModes
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6408         XRL       A,#0x8
   \                     ??uiActionConfigureEnables_4:
   \   00002F   F0           MOVX      @DPTR,A
   1180                break;
   1181            }
   1182          }
   \                     ??uiActionConfigureEnables_0:
   \   000030   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   F5..         MOV       ?V1,A
   \   000005   78..         MOV       R0,#?V0
   \   000007   22           RET
   1183          
   1184          /*********************************************************************
   1185           * @fn          uiActionResetToFactoryNew
   1186           *
   1187           * @brief       State-machine action for resetting the device to factory new
   1188           *
   1189           * @param       keys - the keypress code that triggered the call to this function
   1190           *
   1191           * @return      none
   1192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1193          static void uiActionResetToFactoryNew(uint16 keys)
   \                     uiActionResetToFactoryNew:
   1194          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1195            uiResetInitiated = TRUE;
   \   000004   90....       MOV       DPTR,#uiResetInitiated
   \   000007   7401         MOV       A,#0x1
   \   000009   F0           MOVX      @DPTR,A
   1196            bdb_resetLocalAction();
   \   00000A                ; Setup parameters for call to function bdb_resetLocalAction
   \   00000A   12....       LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
   1197          }
   \   00000D   02....       LJMP      ?Subroutine2 & 0xFFFF
   1198            
   1199          /*********************************************************************
   1200           * @fn          UI_MainStateMachine
   1201           *
   1202           * @brief       This is the main UI state machine engine.
   1203           *              This function should be called from the application's key handler, and also from its event-loop
   1204           *              for processing the key-repress event.
   1205           *
   1206           * @param       current_keys - a bitmask of the keys that are currently pressed, or 0xFFFF when this function
   1207           *              is invoked to handle key auto-repeat.
   1208           *
   1209           * @return      none
   1210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1211          void UI_MainStateMachine( uint16 current_keys ) //argument is uint16 to allow 8 bits for the keys (for future use), and another unique value to mark a re-press of the previous keys.
   \                     UI_MainStateMachine:
   1212          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1213            static byte PrevKeys = 0; //holds the keys that were pressed during the previous time this function was called. (Does not hold the keys that were released.)
   1214          
   1215            uint8 SavedLcdCursorLine = uiLcdCursorLine;
   \   000005   90....       MOV       DPTR,#uiLcdCursorLine
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V0,A
   1216            bool LcdUpdateIsRequired = FALSE;
   1217            uint16 keys; //will hold the bitmask of the currently pressed keys at the lower 8 bits, and the keys that have just been released at the higher 8 bits.
   1218          
   1219            if (uiResetInitiated)
   \   00000B   90....       MOV       DPTR,#uiResetInitiated
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6003         JZ        $+5
   \   000011   02....       LJMP      ??UI_MainStateMachine_0 & 0xFFFF
   1220            {
   1221              return;
   1222            }
   1223            
   1224            if (current_keys == UI_KEY_AUTO_PRESSED)
   \   000014   90....       MOV       DPTR,#??PrevKeys
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   \   000019   74FF         MOV       A,#-0x1
   \   00001B   6A           XRL       A,R2
   \   00001C   7003         JNZ       ??UI_MainStateMachine_1
   \   00001E   74FF         MOV       A,#-0x1
   \   000020   6B           XRL       A,R3
   \                     ??UI_MainStateMachine_1:
   \   000021   7006         JNZ       ??UI_MainStateMachine_2
   1225            {
   1226              keys = PrevKeys;
   \   000023   E8           MOV       A,R0
   \   000024   FE           MOV       R6,A
   \   000025   7F00         MOV       R7,#0x0
   \   000027   8009         SJMP      ??UI_MainStateMachine_3
   1227            }
   1228            else
   1229            {
   1230              keys = (current_keys | (((PrevKeys ^ current_keys) & PrevKeys) << 8));
   \                     ??UI_MainStateMachine_2:
   \   000029   E8           MOV       A,R0
   \   00002A   6A           XRL       A,R2
   \   00002B   58           ANL       A,R0
   \   00002C   F9           MOV       R1,A
   \   00002D   EA           MOV       A,R2
   \   00002E   FE           MOV       R6,A
   \   00002F   EB           MOV       A,R3
   \   000030   49           ORL       A,R1
   \   000031   FF           MOV       R7,A
   1231            }
   1232            
   1233            uiLcdCursorLine = 0xFF;
   \                     ??UI_MainStateMachine_3:
   \   000032   90....       MOV       DPTR,#uiLcdCursorLine
   \   000035   74FF         MOV       A,#-0x1
   \   000037   F0           MOVX      @DPTR,A
   1234          
   1235            if ((keys & UI_KEY_SW_2_PRESSED) && (uiStates[uiCurrentState].next_state != UI_STATE_UNCHANGED))
   \   000038   90....       MOV       DPTR,#uiCurrentState
   \   00003B   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00003E   E8           MOV       A,R0
   \   00003F   75F006       MOV       B,#0x6
   \   000042   A4           MUL       AB
   \   000043   F8           MOV       R0,A
   \   000044   AAF0         MOV       R2,B
   \   000046   75F006       MOV       B,#0x6
   \   000049   E9           MOV       A,R1
   \   00004A   A4           MUL       AB
   \   00004B   2A           ADD       A,R2
   \   00004C   F9           MOV       R1,A
   \   00004D   90....       MOV       DPTR,#uiStates
   \   000050   E0           MOVX      A,@DPTR
   \   000051   28           ADD       A,R0
   \   000052   F8           MOV       R0,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   39           ADDC      A,R1
   \   000056   F9           MOV       R1,A
   \   000057   EE           MOV       A,R6
   \   000058   5402         ANL       A,#0x2
   \   00005A   601D         JZ        ??UI_MainStateMachine_4
   \   00005C   8882         MOV       DPL,R0
   \   00005E   8983         MOV       DPH,R1
   \   000060   E0           MOVX      A,@DPTR
   \   000061   FA           MOV       R2,A
   \   000062   74FF         MOV       A,#-0x1
   \   000064   6A           XRL       A,R2
   \   000065   6012         JZ        ??UI_MainStateMachine_4
   1236            {
   1237              if (uiStates[uiCurrentState].next_state == UI_STATE_DEFAULT_MOVE)
   \   000067   74FE         MOV       A,#-0x2
   \   000069   6A           XRL       A,R2
   \   00006A   7030         JNZ       ??UI_MainStateMachine_5
   1238              {
   1239                uiCurrentState++;
   \   00006C   90....       MOV       DPTR,#uiCurrentState
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   2401         ADD       A,#0x1
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   3400         ADDC      A,#0x0
   \   000077   802A         SJMP      ??UI_MainStateMachine_6
   1240              }
   1241              else
   1242              {
   1243                uiCurrentState = uiStates[uiCurrentState].next_state;
   1244              }
   1245              
   1246              LcdUpdateIsRequired = TRUE;
   1247            }
   1248            else if ((keys & UI_KEY_SW_4_PRESSED) && (uiStates[uiCurrentState].prev_state != UI_STATE_UNCHANGED))
   \                     ??UI_MainStateMachine_4:
   \   000079   EE           MOV       A,R6
   \   00007A   5408         ANL       A,#0x8
   \   00007C   602B         JZ        ??UI_MainStateMachine_7
   \   00007E   8882         MOV       DPL,R0
   \   000080   8983         MOV       DPH,R1
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   FA           MOV       R2,A
   \   000085   74FF         MOV       A,#-0x1
   \   000087   6A           XRL       A,R2
   \   000088   601F         JZ        ??UI_MainStateMachine_7
   1249            {
   1250              if (uiStates[uiCurrentState].prev_state == UI_STATE_DEFAULT_MOVE)
   \   00008A   74FE         MOV       A,#-0x2
   \   00008C   6A           XRL       A,R2
   \   00008D   700D         JNZ       ??UI_MainStateMachine_5
   1251              {
   1252                uiCurrentState--;
   \   00008F   90....       MOV       DPTR,#uiCurrentState
   \   000092   E0           MOVX      A,@DPTR
   \   000093   24FF         ADD       A,#-0x1
   \   000095   F0           MOVX      @DPTR,A
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   34FF         ADDC      A,#-0x1
   \   00009A   8007         SJMP      ??UI_MainStateMachine_6
   1253              }
   1254              else
   1255              {
   1256                uiCurrentState = uiStates[uiCurrentState].prev_state;
   \                     ??UI_MainStateMachine_5:
   \   00009C   EA           MOV       A,R2
   \   00009D   90....       MOV       DPTR,#uiCurrentState
   \   0000A0   F0           MOVX      @DPTR,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   E4           CLR       A
   \                     ??UI_MainStateMachine_6:
   \   0000A3   F0           MOVX      @DPTR,A
   1257              }
   1258              
   1259              LcdUpdateIsRequired = TRUE;
   1260            }
   1261            else if ((keys & uiStates[uiCurrentState].keys_mask) && (uiStates[uiCurrentState].state_func != NULL))
   1262            {
   1263              uiStates[uiCurrentState].state_func(keys);
   1264              
   1265              LcdUpdateIsRequired = TRUE;
   1266            }
   1267          
   1268            if (LcdUpdateIsRequired)
   1269            {
   1270              UI_UpdateLcd();
   \                     ??UI_MainStateMachine_8:
   \   0000A4                ; Setup parameters for call to function UI_UpdateLcd
   \   0000A4   12....       LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
   \   0000A7   8035         SJMP      ??UI_MainStateMachine_9
   1271            }
   \                     ??UI_MainStateMachine_7:
   \   0000A9   8882         MOV       DPL,R0
   \   0000AB   8983         MOV       DPH,R1
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   5E           ANL       A,R6
   \   0000B1   FA           MOV       R2,A
   \   0000B2   A3           INC       DPTR
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   5F           ANL       A,R7
   \   0000B5   FB           MOV       R3,A
   \   0000B6   EA           MOV       A,R2
   \   0000B7   4B           ORL       A,R3
   \   0000B8   601E         JZ        ??UI_MainStateMachine_10
   \   0000BA   8882         MOV       DPL,R0
   \   0000BC   8983         MOV       DPH,R1
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000C5   8882         MOV       DPL,R0
   \   0000C7   F583         MOV       DPH,A
   \   0000C9   E582         MOV       A,DPL
   \   0000CB   4583         ORL       A,DPH
   \   0000CD   6009         JZ        ??UI_MainStateMachine_10
   \   0000CF                ; Setup parameters for indirect call
   \   0000CF   EE           MOV       A,R6
   \   0000D0   FA           MOV       R2,A
   \   0000D1   EF           MOV       A,R7
   \   0000D2   FB           MOV       R3,A
   \   0000D3   12....       LCALL     ?CALL_IND
   \   0000D6   80CC         SJMP      ??UI_MainStateMachine_8
   1272            else
   1273            {
   1274              uiLcdCursorLine = SavedLcdCursorLine;
   \                     ??UI_MainStateMachine_10:
   \   0000D8   E5..         MOV       A,?V0
   \   0000DA   90....       MOV       DPTR,#uiLcdCursorLine
   \   0000DD   F0           MOVX      @DPTR,A
   1275            }
   1276          
   1277            PrevKeys = keys & 0xFF; //only remember the keys that are currently pressed. Released keys are irrelevant. the 0xFF is not needed, since the target is uint8, but it is there just so it is clear that this assignment of uint16 into uint8 is intentional.
   \                     ??UI_MainStateMachine_9:
   \   0000DE   EE           MOV       A,R6
   \   0000DF   90....       MOV       DPTR,#??PrevKeys
   \   0000E2   F0           MOVX      @DPTR,A
   1278          }
   \                     ??UI_MainStateMachine_0:
   \   0000E3                REQUIRE ?Subroutine4
   \   0000E3                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??PrevKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   1279          
   1280          /*********************************************************************
   1281           * @fn          UI_UpdateComissioningStatus
   1282           *
   1283           * @brief       Update the comissioning status to be displayed when the respective menu-screen is selected.
   1284           *              This function should be called from the application, from within the function registered to
   1285           *              be notified about these events.
   1286           *
   1287           * @param       bdbCommissioningModeMsg - comissioning mode and state information
   1288           *
   1289           * @return      none
   1290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1291          void UI_UpdateComissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     UI_UpdateComissioningStatus:
   1292          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1293            uiCommissioningIsInitializing = FALSE;
   \   000004   90....       MOV       DPTR,#uiCommissioningIsInitializing
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   1294            
   1295            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000009   78..         MOV       R0,#`?<Constant "--">` & 0xff
   \   00000B   79..         MOV       R1,#(`?<Constant "--">` >> 8) & 0xff
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   8B83         MOV       DPH,R3
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6060         JZ        ??UI_UpdateComissioningStatus_0
   \   000015   14           DEC       A
   \   000016   602F         JZ        ??UI_UpdateComissioningStatus_1
   \   000018   14           DEC       A
   \   000019   6009         JZ        ??UI_UpdateComissioningStatus_2
   \   00001B   14           DEC       A
   \   00001C   604C         JZ        ??UI_UpdateComissioningStatus_3
   \   00001E   24FE         ADD       A,#-0x2
   \   000020   605E         JZ        ??UI_UpdateComissioningStatus_4
   \   000022   8076         SJMP      ??UI_UpdateComissioningStatus_5
   1296            {
   1297              case BDB_COMMISSIONING_FORMATION:
   1298                uiCommissioningStateStr = "NF";
   \                     ??UI_UpdateComissioningStatus_2:
   \   000024   90....       MOV       DPTR,#uiCommissioningStateStr
   \   000027   74..         MOV       A,#`?<Constant "NF">` & 0xff
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   74..         MOV       A,#(`?<Constant "NF">` >> 8) & 0xff
   \   00002D   F0           MOVX      @DPTR,A
   1299                if ((bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) && (uiCommissioningNetworkConnrctionStr == NULL))
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   E0           MOVX      A,@DPTR
   \   000033   7065         JNZ       ??UI_UpdateComissioningStatus_5
   \   000035   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000038   EC           MOV       A,R4
   \   000039   4D           ORL       A,R5
   \   00003A   7067         JNZ       ??UI_UpdateComissioningStatus_6
   1300                {
   1301                  uiCommissioningNetworkConnrctionStr = "FORM";
   \   00003C   90....       MOV       DPTR,#uiCommissioningNetworkConnrctionStr
   \   00003F   74..         MOV       A,#`?<Constant "FORM">` & 0xff
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   74..         MOV       A,#(`?<Constant "FORM">` >> 8) & 0xff
   \   000045   8049         SJMP      ??UI_UpdateComissioningStatus_7
   1302                }
   1303                break;
   1304              case BDB_COMMISSIONING_NWK_STEERING:
   1305                uiCommissioningStateStr = "NS";
   \                     ??UI_UpdateComissioningStatus_1:
   \   000047   90....       MOV       DPTR,#uiCommissioningStateStr
   \   00004A   74..         MOV       A,#`?<Constant "NS">` & 0xff
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   74..         MOV       A,#(`?<Constant "NS">` >> 8) & 0xff
   \   000050   F0           MOVX      @DPTR,A
   1306                if ((bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) && (uiCommissioningNetworkConnrctionStr == NULL))
   \   000051   8A82         MOV       DPL,R2
   \   000053   8B83         MOV       DPH,R3
   \   000055   E0           MOVX      A,@DPTR
   \   000056   7042         JNZ       ??UI_UpdateComissioningStatus_5
   \   000058   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00005B   EC           MOV       A,R4
   \   00005C   4D           ORL       A,R5
   \   00005D   7044         JNZ       ??UI_UpdateComissioningStatus_6
   1307                {
   1308                  uiCommissioningNetworkConnrctionStr = "JOIN";
   \   00005F   90....       MOV       DPTR,#uiCommissioningNetworkConnrctionStr
   \   000062   74..         MOV       A,#`?<Constant "JOIN">` & 0xff
   \   000064   F0           MOVX      @DPTR,A
   \   000065   A3           INC       DPTR
   \   000066   74..         MOV       A,#(`?<Constant "JOIN">` >> 8) & 0xff
   \   000068   8026         SJMP      ??UI_UpdateComissioningStatus_7
   1309                }
   1310                break;
   1311              case BDB_COMMISSIONING_FINDING_BINDING:
   1312                uiCommissioningStateStr = "FB";
   \                     ??UI_UpdateComissioningStatus_3:
   \   00006A   90....       MOV       DPTR,#uiCommissioningStateStr
   \   00006D   74..         MOV       A,#`?<Constant "FB">` & 0xff
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   A3           INC       DPTR
   \   000071   74..         MOV       A,#(`?<Constant "FB">` >> 8) & 0xff
   \   000073   8024         SJMP      ??UI_UpdateComissioningStatus_8
   1313                break;
   1314              case BDB_COMMISSIONING_INITIALIZATION:
   1315                uiCommissioningStateStr = "IN";
   \                     ??UI_UpdateComissioningStatus_0:
   \   000075   90....       MOV       DPTR,#uiCommissioningStateStr
   \   000078   74..         MOV       A,#`?<Constant "IN">` & 0xff
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   A3           INC       DPTR
   \   00007C   74..         MOV       A,#(`?<Constant "IN">` >> 8) & 0xff
   \   00007E   8019         SJMP      ??UI_UpdateComissioningStatus_8
   1316                break;
   1317          #if ZG_BUILD_ENDDEVICE_TYPE    
   1318              case BDB_COMMISSIONING_PARENT_LOST:
   1319                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
   \                     ??UI_UpdateComissioningStatus_4:
   \   000080   8A82         MOV       DPL,R2
   \   000082   8B83         MOV       DPH,R3
   \   000084   E0           MOVX      A,@DPTR
   \   000085   640D         XRL       A,#0xd
   \   000087   90....       MOV       DPTR,#uiCommissioningStateStr
   \   00008A   7007         JNZ       ??UI_UpdateComissioningStatus_9
   1320                {
   1321                  uiCommissioningStateStr = "--";
   \   00008C   E8           MOV       A,R0
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   A3           INC       DPTR
   \   00008F   E9           MOV       A,R1
   \                     ??UI_UpdateComissioningStatus_7:
   \   000090   F0           MOVX      @DPTR,A
   \   000091   8010         SJMP      ??UI_UpdateComissioningStatus_6
   1322                }
   1323                else
   1324                {
   1325                  uiCommissioningStateStr = "PL";
   \                     ??UI_UpdateComissioningStatus_9:
   \   000093   74..         MOV       A,#`?<Constant "PL">` & 0xff
   \   000095   F0           MOVX      @DPTR,A
   \   000096   A3           INC       DPTR
   \   000097   74..         MOV       A,#(`?<Constant "PL">` >> 8) & 0xff
   \                     ??UI_UpdateComissioningStatus_8:
   \   000099   F0           MOVX      @DPTR,A
   1326                }
   1327                break;
   1328          #endif
   1329          #if BDB_TOUCHLINK_CAPABILITY_ENABLED
   1330              case BDB_COMMISSIONING_TOUCHLINK:
   1331                uiCommissioningStateStr = "TL";
   1332                if ((bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) && (uiCommissioningNetworkConnrctionStr == NULL))
   1333                {
   1334                  uiCommissioningNetworkConnrctionStr = "TCHL";
   1335                }
   1336                break;
   1337          #endif
   1338            }
   1339          
   1340            if ((bdbCommissioningModeMsg->bdbCommissioningStatus != BDB_COMMISSIONING_IN_PROGRESS) && (bdbCommissioningModeMsg->bdbRemainingCommissioningModes == 0))
   \                     ??UI_UpdateComissioningStatus_5:
   \   00009A   8A82         MOV       DPL,R2
   \   00009C   8B83         MOV       DPH,R3
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   6401         XRL       A,#0x1
   \   0000A1   6014         JZ        ??UI_UpdateComissioningStatus_10
   \                     ??UI_UpdateComissioningStatus_6:
   \   0000A3   8A82         MOV       DPL,R2
   \   0000A5   8B83         MOV       DPH,R3
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   700B         JNZ       ??UI_UpdateComissioningStatus_10
   1341            {
   1342              uiCommissioningStateStr = "--";
   \   0000AC   90....       MOV       DPTR,#uiCommissioningStateStr
   \   0000AF   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   1343          
   1344              uiComissioningIsActive = FALSE;
   \                     ??CrossCallReturnLabel_127:
   \   0000B2   90....       MOV       DPTR,#uiComissioningIsActive
   \   0000B5   E4           CLR       A
   \   0000B6   F0           MOVX      @DPTR,A
   1345            }
   1346            
   1347            UI_UpdateLcd();
   \                     ??UI_UpdateComissioningStatus_10:
   \   0000B7                ; Setup parameters for call to function UI_UpdateLcd
   \   0000B7   12....       LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
   1348          }
   \   0000BA                REQUIRE ?Subroutine2
   \   0000BA                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   90....       MOV       DPTR,#uiCommissioningNetworkConnrctionStr
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0
   1349          
   1350          
   1351          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
   1352          
   1353          
   1354          /*********************************************************************
   1355           * @fn          UI_UpdateLcd
   1356           *
   1357           * @brief       Update the LCD display.
   1358           *              This function should be called by the application when handling the display-auto-refresh event, and
   1359           *              also whenevet an action that may change the information being displayed is executed.
   1360           *
   1361           * @param       none
   1362           *
   1363           * @return      none
   1364           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1365          void UI_UpdateLcd( void )
   \                     UI_UpdateLcd:
   1366          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 58
   \   000005   74C6         MOV       A,#-0x3a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1367            char * line[3];
   1368            char LineBuf[3][LCD_CC2538_PREFIX_COUNT + LCD_LINE_LENGTH + 1];
   1369            uint8 i;
   1370            uint8 *xad;
   1371            bool LcdAutoRefreshRequired = FALSE;
   \   00000A   7E00         MOV       R6,#0x0
   1372            uint8 FBRemainingTimeLeft;
   1373            uint8 PermitJoinDuration;
   1374            
   1375            LineBuf[0][LCD_CC2538_PREFIX_COUNT] = 0;
   \   00000C   7407         MOV       A,#0x7
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   E4           CLR       A
   \   000012   F0           MOVX      @DPTR,A
   1376            LineBuf[1][LCD_CC2538_PREFIX_COUNT] = 0;
   \   000013   7418         MOV       A,#0x18
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
   1377            LineBuf[2][LCD_CC2538_PREFIX_COUNT] = 0;
   \   00001A   7429         MOV       A,#0x29
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E4           CLR       A
   \   000020   F0           MOVX      @DPTR,A
   1378            line[0] = LineBuf[0] + LCD_CC2538_PREFIX_COUNT;
   \   000021   7407         MOV       A,#0x7
   \   000023   12....       LCALL     ?XSTACK_DISP100_8
   \   000026   12....       LCALL     ?Subroutine8 & 0xFFFF
   1379            line[1] = LineBuf[1] + LCD_CC2538_PREFIX_COUNT;
   \                     ??CrossCallReturnLabel_134:
   \   000029   7418         MOV       A,#0x18
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   A882         MOV       R0,DPL
   \   000030   A983         MOV       R1,DPH
   \   000032   7402         MOV       A,#0x2
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   1380            line[2] = LineBuf[2] + LCD_CC2538_PREFIX_COUNT;
   \                     ??CrossCallReturnLabel_128:
   \   00003A   7429         MOV       A,#0x29
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   A882         MOV       R0,DPL
   \   000041   A983         MOV       R1,DPH
   \   000043   7404         MOV       A,#0x4
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   1381          
   1382          #ifdef HAL_BOARD_CC2538
   1383            for (i = 0; i < LCD_CC2538_PREFIX_COUNT; i++)
   1384            {
   1385              LineBuf[0][i] = ' ';
   1386              LineBuf[1][i] = ' ';
   1387              LineBuf[2][i] = ' ';
   1388            }
   1389          #endif
   1390          
   1391            osal_stop_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent);
   \                     ??CrossCallReturnLabel_129:
   \   00004B                ; Setup parameters for call to function osal_stop_timerEx
   \   00004B   90....       MOV       DPTR,#uiLcdAutoUpdateEvent
   \   00004E   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000051   90....       MOV       DPTR,#uiAppTaskId
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1392          
   1393            if (uiStates == uiAppStatesMain)
   \   000059   90....       MOV       DPTR,#uiStates
   \   00005C   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   68           XRL       A,R0
   \   000061   7003         JNZ       ??UI_UpdateLcd_0
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   69           XRL       A,R1
   \                     ??UI_UpdateLcd_0:
   \   000066   7020         JNZ       ??UI_UpdateLcd_1
   1394            {
   1395              if (uiCurrentState == UI_STATE_BACK_FROM_APP_MENU)
   \   000068   90....       MOV       DPTR,#uiCurrentState
   \   00006B   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00006E   7003         JNZ       $+5
   \   000070   02....       LJMP      ??UI_UpdateLcd_2 & 0xFFFF
   1396              {
   1397                line[2] = "<     BACK     >";
   1398              }
   1399              else
   1400              {
   1401                uiAppUpdateLcd(uiCurrentState, line);
   \   000073                ; Setup parameters for indirect call
   \   000073   AA..         MOV       R2,?XSP + 0
   \   000075   AB..         MOV       R3,?XSP + 1
   \   000077   90....       MOV       DPTR,#uiCurrentState
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F9           MOV       R1,A
   \   00007C   90....       MOV       DPTR,#uiAppUpdateLcd
   \   00007F   12....       LCALL     ?Subroutine21 & 0xFFFF
   1402              }
   1403            }
   \                     ??CrossCallReturnLabel_42:
   \   000082   12....       LCALL     ?CALL_IND
   \   000085   02....       LJMP      ??UI_UpdateLcd_3 & 0xFFFF
   1404            else
   1405            {
   1406              switch (uiCurrentState)
   \                     ??UI_UpdateLcd_1:
   \   000088   7A..         MOV       R2,#`?<Constant "1234567890123456">` & 0xff
   \   00008A   7B..         MOV       R3,#(`?<Constant "1234567890123456">` >> 8) & 0xff
   \   00008C   75....       MOV       ?V4,#`?<Constant "    0x          ">` & 0xff
   \   00008F   75....       MOV       ?V5,#(`?<Constant "    0x          ">` >> 8) & 0xff
   \   000092   8E..         MOV       ?V6,R6
   \   000094   75....       MOV       ?V0,#`?<Constant "    0xFFFF (any)">` & 0xff
   \   000097   75....       MOV       ?V1,#(`?<Constant "    0xFFFF (any)">` >> 8) & 0xff
   \   00009A   8E..         MOV       ?V2,R6
   \   00009C   90....       MOV       DPTR,#uiCurrentState
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F5..         MOV       ?V8,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F5..         MOV       ?V9,A
   \   0000A6   78..         MOV       R0,#?V8
   \   0000A8   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for UI_UpdateLcd>_0`:
   \   0000AB   0000         DW        0
   \   0000AD   15           DB        21
   \   0000AE   ....         DW        ??UI_UpdateLcd_3
   \   0000B0   ....         DW        ??UI_UpdateLcd_4
   \   0000B2   ....         DW        ??UI_UpdateLcd_5
   \   0000B4   ....         DW        ??UI_UpdateLcd_6
   \   0000B6   ....         DW        ??UI_UpdateLcd_7
   \   0000B8   ....         DW        ??UI_UpdateLcd_8
   \   0000BA   ....         DW        ??UI_UpdateLcd_9
   \   0000BC   ....         DW        ??UI_UpdateLcd_10
   \   0000BE   ....         DW        ??UI_UpdateLcd_11
   \   0000C0   ....         DW        ??UI_UpdateLcd_12
   \   0000C2   ....         DW        ??UI_UpdateLcd_13
   \   0000C4   ....         DW        ??UI_UpdateLcd_14
   \   0000C6   ....         DW        ??UI_UpdateLcd_15
   \   0000C8   ....         DW        ??UI_UpdateLcd_16
   \   0000CA   ....         DW        ??UI_UpdateLcd_17
   \   0000CC   ....         DW        ??UI_UpdateLcd_2
   \   0000CE   ....         DW        ??UI_UpdateLcd_18
   \   0000D0   ....         DW        ??UI_UpdateLcd_19
   \   0000D2   ....         DW        ??UI_UpdateLcd_20
   \   0000D4   ....         DW        ??UI_UpdateLcd_21
   \   0000D6   ....         DW        ??UI_UpdateLcd_22
   \   0000D8   ....         DW        ??UI_UpdateLcd_2
   \   0000DA   ....         DW        ??UI_UpdateLcd_23
   1407              {
   1408                case UI_STATE_FINDING_AND_BINDING:
   1409                  line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_FINDING_BINDING ? "ENABLED" : "DISABLED";
   \                     ??UI_UpdateLcd_14:
   \   0000DC   90....       MOV       DPTR,#uiSelectedBdbComissioningModes
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000E2   5006         JNC       ??UI_UpdateLcd_24
   \   0000E4   78..         MOV       R0,#`?<Constant "ENABLED">` & 0xff
   \   0000E6   79..         MOV       R1,#(`?<Constant "ENABLED">` >> 8) & 0xff
   \   0000E8   8004         SJMP      ??UI_UpdateLcd_25
   \                     ??UI_UpdateLcd_24:
   \   0000EA   78..         MOV       R0,#`?<Constant "DISABLED">` & 0xff
   \   0000EC   79..         MOV       R1,#(`?<Constant "DISABLED">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_25:
   \   0000EE   7402         MOV       A,#0x2
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   12....       LCALL     ?Subroutine7 & 0xFFFF
   1410                  line[2] = "<FINDNG+BINDNG >";
   \                     ??CrossCallReturnLabel_7:
   \   0000F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F9   74..         MOV       A,#`?<Constant "<FINDNG+BINDNG >">` & 0xff
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   74..         MOV       A,#(`?<Constant "<FINDNG+BINDNG >">` >> 8) & 0xff
   \   0000FF   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1411                  break;
   1412                case UI_STATE_BACK_FROM_CONFIGURE:
   1413                  line[2] = "<     BACK     >";
   1414                  break;
   1415                case UI_STATE_BACK_FROM_INSTALL_CODE:
   1416                  line[2] = "<     BACK     >";
   \                     ??UI_UpdateLcd_2:
   \   000102   7404         MOV       A,#0x4
   \   000104   12....       LCALL     ?XSTACK_DISP0_8
   \   000107   74..         MOV       A,#`?<Constant "<     BACK     >">` & 0xff
   \   000109   F0           MOVX      @DPTR,A
   \   00010A   A3           INC       DPTR
   \   00010B   74..         MOV       A,#(`?<Constant "<     BACK     >">` >> 8) & 0xff
   \   00010D   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1417                  break;
   1418                case UI_STATE_NETWORK_FORMATION:
   1419                  line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_NWK_FORMATION ? "ENABLED" : "DISABLED";
   \                     ??UI_UpdateLcd_12:
   \   000110   90....       MOV       DPTR,#uiSelectedBdbComissioningModes
   \   000113   E0           MOVX      A,@DPTR
   \   000114   A2E2         MOV       C,0xE0 /* A   */.2
   \   000116   5006         JNC       ??UI_UpdateLcd_27
   \   000118   78..         MOV       R0,#`?<Constant "ENABLED">` & 0xff
   \   00011A   79..         MOV       R1,#(`?<Constant "ENABLED">` >> 8) & 0xff
   \   00011C   8004         SJMP      ??UI_UpdateLcd_28
   \                     ??UI_UpdateLcd_27:
   \   00011E   78..         MOV       R0,#`?<Constant "DISABLED">` & 0xff
   \   000120   79..         MOV       R1,#(`?<Constant "DISABLED">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_28:
   \   000122   7402         MOV       A,#0x2
   \   000124   12....       LCALL     ?XSTACK_DISP0_8
   \   000127   12....       LCALL     ?Subroutine7 & 0xFFFF
   1420                  line[2] = "<NWK FORMATION >";
   \                     ??CrossCallReturnLabel_8:
   \   00012A   12....       LCALL     ?XSTACK_DISP0_8
   \   00012D   74..         MOV       A,#`?<Constant "<NWK FORMATION >">` & 0xff
   \   00012F   F0           MOVX      @DPTR,A
   \   000130   A3           INC       DPTR
   \   000131   74..         MOV       A,#(`?<Constant "<NWK FORMATION >">` >> 8) & 0xff
   \   000133   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1421                  break;
   1422                case UI_STATE_NETWORK_STEERING:
   1423                  line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_NWK_STEERING ? "ENABLED" : "DISABLED";
   \                     ??UI_UpdateLcd_13:
   \   000136   90....       MOV       DPTR,#uiSelectedBdbComissioningModes
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   A2E1         MOV       C,0xE0 /* A   */.1
   \   00013C   5006         JNC       ??UI_UpdateLcd_29
   \   00013E   78..         MOV       R0,#`?<Constant "ENABLED">` & 0xff
   \   000140   79..         MOV       R1,#(`?<Constant "ENABLED">` >> 8) & 0xff
   \   000142   8004         SJMP      ??UI_UpdateLcd_30
   \                     ??UI_UpdateLcd_29:
   \   000144   78..         MOV       R0,#`?<Constant "DISABLED">` & 0xff
   \   000146   79..         MOV       R1,#(`?<Constant "DISABLED">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_30:
   \   000148   7402         MOV       A,#0x2
   \   00014A   12....       LCALL     ?XSTACK_DISP0_8
   \   00014D   12....       LCALL     ?Subroutine7 & 0xFFFF
   1424                  line[2] = "< NWK STEERING >";
   \                     ??CrossCallReturnLabel_9:
   \   000150   12....       LCALL     ?XSTACK_DISP0_8
   \   000153   74..         MOV       A,#`?<Constant "< NWK STEERING >">` & 0xff
   \   000155   F0           MOVX      @DPTR,A
   \   000156   A3           INC       DPTR
   \   000157   74..         MOV       A,#(`?<Constant "< NWK STEERING >">` >> 8) & 0xff
   \   000159   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1425                  break;
   1426          #ifdef BDB_TL_TARGET
   1427                case UI_STATE_TOGGLE_TL_TARGET:
   1428                  {
   1429                    uint32 temp_u32;
   1430          
   1431                    temp_u32 = touchLinkTarget_GetTimer();
   1432                    if (temp_u32 == 0)
   1433                    {
   1434                      line[1] = "DISABLED        ";
   1435                    }
   1436                    else if (temp_u32 == TOUCHLINK_TARGET_PERPETUAL)
   1437                    {
   1438                      line[1] = "ENABLED FOREVER ";
   1439                    }
   1440                    else
   1441                    {
   1442                      uiConstStrCpy(line[1], "ENABLED (     s)");
   1443                      uiUintToString( temp_u32 / 1000 + ((temp_u32 % 1000) > 0 ? 1 : 0), line[1] + 9, 10, 5, FALSE, FALSE); //note: timeouts longer than 65535 seconds will not display correctly
   1444                      osal_start_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent, uiLcdAutoUpdateInterval);
   1445                    }
   1446                  }
   1447                  line[2] = "< T.L. TARGET  >";
   1448                  break;
   1449                case UI_STATE_TOUCHLINK_TARGET:
   1450                  if (uiTouchlinkTargetTimeout == 0)
   1451                  {
   1452                    line[1] = "DISABLED        ";
   1453                  }
   1454                  else if (uiTouchlinkTargetTimeout == TOUCHLINK_TARGET_PERPETUAL)
   1455                  {
   1456                    line[1] = "Enable (forever)";
   1457                  }
   1458                  else
   1459                  {
   1460                    uiConstStrCpy(line[1], "Enable For     s");
   1461                    uiUintToString( uiTouchlinkTargetTimeout / 1000 + ((uiTouchlinkTargetTimeout % 1000) > 0 ? 1 : 0), line[1] + 10, 10, 5, FALSE, FALSE); //note: timeouts longer than 65535 seconds will not display correctly
   1462                    line[1][16] = 0;
   1463                  }
   1464                  line[2] = "<T.L. TRGT TIME>";
   1465                  break;
   1466                case UI_STATE_TOUCHLINK_STEALING:
   1467                  line[1] = bdb_TouchlinkGetAllowStealing() ? "ENABLED" : "DISABLED";
   1468                  line[2] = "<T.L. STEALING >";
   1469                  break;
   1470          #endif
   1471          #ifdef BDB_TL_INITIATOR
   1472                case UI_STATE_TOUCHLINK_INITIATOR:
   1473                  line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_INITIATOR_TL ? "ENABLED" : "DISABLED";
   1474                  line[2] = "<T.L. INITIATOR>";
   1475                  break;
   1476          #endif
   1477                case UI_STATE_CONFIGURE:
   1478                  line[2] = "<  CONFIGURE   >";
   \                     ??UI_UpdateLcd_5:
   \   00015C   7404         MOV       A,#0x4
   \   00015E   12....       LCALL     ?XSTACK_DISP0_8
   \   000161   74..         MOV       A,#`?<Constant "<  CONFIGURE   >">` & 0xff
   \   000163   F0           MOVX      @DPTR,A
   \   000164   A3           INC       DPTR
   \   000165   74..         MOV       A,#(`?<Constant "<  CONFIGURE   >">` >> 8) & 0xff
   \   000167   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1479                  break;
   1480                case UI_STATE_RESET_TO_FACTORY_NEW:
   1481                  if (uiResetInitiated)
   \                     ??UI_UpdateLcd_9:
   \   00016A   90....       MOV       DPTR,#uiResetInitiated
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   601B         JZ        ??UI_UpdateLcd_31
   1482                  {
   1483                    line[0] = "Resetting,";
   \   000170   85..82       MOV       DPL,?XSP + 0
   \   000173   85..83       MOV       DPH,?XSP + 1
   \   000176   74..         MOV       A,#`?<Constant "Resetting,">` & 0xff
   \   000178   F0           MOVX      @DPTR,A
   \   000179   A3           INC       DPTR
   \   00017A   74..         MOV       A,#(`?<Constant "Resetting,">` >> 8) & 0xff
   \   00017C   F0           MOVX      @DPTR,A
   1484                    line[1] = "Please wait...";
   \   00017D   7402         MOV       A,#0x2
   \   00017F   12....       LCALL     ?XSTACK_DISP0_8
   \   000182   74..         MOV       A,#`?<Constant "Please wait...">` & 0xff
   \   000184   F0           MOVX      @DPTR,A
   \   000185   A3           INC       DPTR
   \   000186   74..         MOV       A,#(`?<Constant "Please wait...">` >> 8) & 0xff
   \   000188   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1485                  }
   1486                  else
   1487                  {
   1488                    line[2] = "< RESET TO FN  >";
   \                     ??UI_UpdateLcd_31:
   \   00018B   7404         MOV       A,#0x4
   \   00018D   12....       LCALL     ?XSTACK_DISP0_8
   \   000190   74..         MOV       A,#`?<Constant "< RESET TO FN  >">` & 0xff
   \   000192   F0           MOVX      @DPTR,A
   \   000193   A3           INC       DPTR
   \   000194   74..         MOV       A,#(`?<Constant "< RESET TO FN  >">` >> 8) & 0xff
   \   000196   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1489                  }
   1490                  break;
   1491                case UI_STATE_DEFAULT:
   1492                  line[0] = uiAppTitleStr;
   \                     ??UI_UpdateLcd_4:
   \   000199   90....       MOV       DPTR,#uiAppTitleStr
   \   00019C   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00019F   12....       LCALL     ?Subroutine8 & 0xFFFF
   1493                  line[1] = "hold OK for help";
   \                     ??CrossCallReturnLabel_135:
   \   0001A2   7402         MOV       A,#0x2
   \   0001A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A7   74..         MOV       A,#`?<Constant "hold OK for help">` & 0xff
   \   0001A9   F0           MOVX      @DPTR,A
   \   0001AA   A3           INC       DPTR
   \   0001AB   74..         MOV       A,#(`?<Constant "hold OK for help">` >> 8) & 0xff
   \   0001AD   F0           MOVX      @DPTR,A
   1494                  line[2] = "<     HELP     >";
   \   0001AE   7404         MOV       A,#0x4
   \   0001B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B3   74..         MOV       A,#`?<Constant "<     HELP     >">` & 0xff
   \   0001B5   F0           MOVX      @DPTR,A
   \   0001B6   A3           INC       DPTR
   \   0001B7   74..         MOV       A,#(`?<Constant "<     HELP     >">` >> 8) & 0xff
   \   0001B9   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1495                  break;
   1496                case UI_STATE_STATE_HELP:
   1497          #ifdef HAL_BOARD_CC2538
   1498                  line[0] = "< > to move     ";
   1499                  line[1] = "^ v change value";
   1500          #else
   1501                  line[0] = "\x1B \x1A to move     ";
   \                     ??UI_UpdateLcd_10:
   \   0001BC   85..82       MOV       DPL,?XSP + 0
   \   0001BF   85..83       MOV       DPH,?XSP + 1
   \   0001C2   74..         MOV       A,#`?<Constant "\\033 \\032 to move     ">` & 0xff
   \   0001C4   F0           MOVX      @DPTR,A
   \   0001C5   A3           INC       DPTR
   \   0001C6   74..         MOV       A,#(`?<Constant "\\033 \\032 to move     ">` >> 8) & 0xff
   \   0001C8   F0           MOVX      @DPTR,A
   1502                  line[1] = "\x18 \x19 change value";
   \   0001C9   7402         MOV       A,#0x2
   \   0001CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CE   74..         MOV       A,#`?<Constant "\\030 \\031 change value">` & 0xff
   \   0001D0   F0           MOVX      @DPTR,A
   \   0001D1   A3           INC       DPTR
   \   0001D2   74..         MOV       A,#(`?<Constant "\\030 \\031 change value">` >> 8) & 0xff
   \   0001D4   F0           MOVX      @DPTR,A
   1503          #endif        
   1504                  line[2] = "OK to execute   ";
   \   0001D5   7404         MOV       A,#0x4
   \   0001D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DA   74..         MOV       A,#`?<Constant "OK to execute   ">` & 0xff
   \   0001DC   F0           MOVX      @DPTR,A
   \   0001DD   A3           INC       DPTR
   \   0001DE   74..         MOV       A,#(`?<Constant "OK to execute   ">` >> 8) & 0xff
   \   0001E0   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1505                  break;
   1506                case UI_STATE_COMMISSION:
   1507                  if (uiCommissioningIsInitializing)
   \                     ??UI_UpdateLcd_6:
   \   0001E3   90....       MOV       DPTR,#uiCommissioningIsInitializing
   \   0001E6   E0           MOVX      A,@DPTR
   \   0001E7   601A         JZ        ??UI_UpdateLcd_32
   1508                  {
   1509                    uiConstStrCpy(line[0], "Please wait...  ");
   \   0001E9                ; Setup parameters for call to function osal_memcpy
   \   0001E9   75....       MOV       ?V0,#`?<Constant "Please wait...  ">` & 0xff
   \   0001EC   75....       MOV       ?V1,#(`?<Constant "Please wait...  ">` >> 8) & 0xff
   \   0001EF   78..         MOV       R0,#?V0
   \   0001F1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001F4   7C11         MOV       R4,#0x11
   \   0001F6   7D00         MOV       R5,#0x0
   \   0001F8   7403         MOV       A,#0x3
   \   0001FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FD   12....       LCALL     ?Subroutine24 & 0xFFFF
   1510                  }
   \                     ??CrossCallReturnLabel_48:
   \   000200   02....       LJMP      ??UI_UpdateLcd_33 & 0xFFFF
   1511                  else
   1512                  {
   1513                    uiConstStrCpy(line[0], "xx              "); // TL/NF/NS/FB/-- TCHL/FORM/JOIN count/CLOSE
   \                     ??UI_UpdateLcd_32:
   \   000203                ; Setup parameters for call to function osal_memcpy
   \   000203   75....       MOV       ?V0,#`?<Constant "xx              ">` & 0xff
   \   000206   75....       MOV       ?V1,#(`?<Constant "xx              ">` >> 8) & 0xff
   \   000209   78..         MOV       R0,#?V0
   \   00020B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00020E   7C11         MOV       R4,#0x11
   \   000210   7D00         MOV       R5,#0x0
   \   000212   7403         MOV       A,#0x3
   \   000214   12....       LCALL     ?XSTACK_DISP0_8
   \   000217   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00021A   12....       LCALL     ?DEALLOC_XSTACK8
   1514          
   1515                    osal_memcpy(line[0] + 0, uiCommissioningStateStr, 2);
   \   00021D                ; Setup parameters for call to function osal_memcpy
   \   00021D   90....       MOV       DPTR,#uiCommissioningStateStr
   \   000220   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000223   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000226   7C02         MOV       R4,#0x2
   \   000228   7D00         MOV       R5,#0x0
   \   00022A   7403         MOV       A,#0x3
   \   00022C   12....       LCALL     ?XSTACK_DISP0_8
   \   00022F   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000232   12....       LCALL     ?DEALLOC_XSTACK8
   1516          
   1517                    if ((uiNwkStateShadow != DEV_END_DEVICE) && (uiNwkStateShadow != DEV_ZB_COORD) && (uiNwkStateShadow != DEV_ROUTER))
   \   000235   85..82       MOV       DPL,?XSP + 0
   \   000238   85..83       MOV       DPH,?XSP + 1
   \   00023B   E0           MOVX      A,@DPTR
   \   00023C   2403         ADD       A,#0x3
   \   00023E   FA           MOV       R2,A
   \   00023F   A3           INC       DPTR
   \   000240   E0           MOVX      A,@DPTR
   \   000241   3400         ADDC      A,#0x0
   \   000243   FB           MOV       R3,A
   \   000244   90....       MOV       DPTR,#uiNwkStateShadow
   \   000247   E0           MOVX      A,@DPTR
   \   000248   6406         XRL       A,#0x6
   \   00024A   601A         JZ        ??UI_UpdateLcd_34
   \   00024C   E0           MOVX      A,@DPTR
   \   00024D   6409         XRL       A,#0x9
   \   00024F   6015         JZ        ??UI_UpdateLcd_34
   \   000251   E0           MOVX      A,@DPTR
   \   000252   6407         XRL       A,#0x7
   \   000254   6010         JZ        ??UI_UpdateLcd_34
   1518                    {
   1519                      uiConstStrOver(line[0] + 3, "NotOnNwk");
   \   000256                ; Setup parameters for call to function osal_memcpy
   \   000256   75....       MOV       ?V0,#`?<Constant "NotOnNwk">` & 0xff
   \   000259   75....       MOV       ?V1,#(`?<Constant "NotOnNwk">` >> 8) & 0xff
   \   00025C   78..         MOV       R0,#?V0
   \   00025E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000261   7C08         MOV       R4,#0x8
   \   000263   02....       LJMP      ??UI_UpdateLcd_35 & 0xFFFF
   1520                    }
   1521                    else
   1522                    {
   1523                      if (uiCommissioningNetworkConnrctionStr != NULL)
   \                     ??UI_UpdateLcd_34:
   \   000266   90....       MOV       DPTR,#uiCommissioningNetworkConnrctionStr
   \   000269   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00026C   6024         JZ        ??UI_UpdateLcd_36
   1524                      {
   1525                        osal_memcpy(line[0] + 3, uiCommissioningNetworkConnrctionStr, 4);
   \   00026E                ; Setup parameters for call to function osal_memcpy
   \   00026E   90....       MOV       DPTR,#uiCommissioningNetworkConnrctionStr
   \   000271   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000274   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000277   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00027A   12....       LCALL     ?DEALLOC_XSTACK8
   1526                        line[0][7] = ' ';
   \   00027D   85..82       MOV       DPL,?XSP + 0
   \   000280   85..83       MOV       DPH,?XSP + 1
   \   000283   12....       LCALL     ?Subroutine36 & 0xFFFF
   1527                      }
   \                     ??CrossCallReturnLabel_94:
   \   000286   C8           XCH       A,R0
   \   000287   2407         ADD       A,#0x7
   \   000289   F582         MOV       DPL,A
   \   00028B   E4           CLR       A
   \   00028C   38           ADDC      A,R0
   \   00028D   F583         MOV       DPH,A
   \   00028F   7420         MOV       A,#0x20
   \   000291   F0           MOVX      @DPTR,A
   1528          
   1529                      if ((uiNwkStateShadow == DEV_ZB_COORD) || (uiNwkStateShadow == DEV_ROUTER))
   \                     ??UI_UpdateLcd_36:
   \   000292   90....       MOV       DPTR,#uiNwkStateShadow
   \   000295   E0           MOVX      A,@DPTR
   \   000296   6409         XRL       A,#0x9
   \   000298   6005         JZ        ??UI_UpdateLcd_37
   \   00029A   E0           MOVX      A,@DPTR
   \   00029B   6407         XRL       A,#0x7
   \   00029D   706F         JNZ       ??UI_UpdateLcd_38
   1530                      {
   1531                        PermitJoinDuration = NLME_GetRemainingPermitJoiningDuration();
   \                     ??UI_UpdateLcd_37:
   \   00029F                ; Setup parameters for call to function NLME_GetRemainingPermitJoiningDuration
   \   00029F   12....       LCALL     `??NLME_GetRemainingPermitJoiningDuration::?rela`; Banked call to: NLME_GetRemainingPermitJoiningDuration
   \   0002A2   E9           MOV       A,R1
   \   0002A3   FF           MOV       R7,A
   1532                        
   1533                        if (PermitJoinDuration > 0)
   \   0002A4   85..82       MOV       DPL,?XSP + 0
   \   0002A7   85..83       MOV       DPH,?XSP + 1
   \   0002AA   E0           MOVX      A,@DPTR
   \   0002AB   2408         ADD       A,#0x8
   \   0002AD   FA           MOV       R2,A
   \   0002AE   A3           INC       DPTR
   \   0002AF   E0           MOVX      A,@DPTR
   \   0002B0   3400         ADDC      A,#0x0
   \   0002B2   FB           MOV       R3,A
   \   0002B3   E9           MOV       A,R1
   \   0002B4   6043         JZ        ??UI_UpdateLcd_39
   1534                        {
   1535                          uiConstStrOver(line[0] + 8, "Open");
   \   0002B6                ; Setup parameters for call to function osal_memcpy
   \   0002B6   75....       MOV       ?V0,#`?<Constant "Open">` & 0xff
   \   0002B9   75....       MOV       ?V1,#(`?<Constant "Open">` >> 8) & 0xff
   \   0002BC   78..         MOV       R0,#?V0
   \   0002BE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002C1   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0002C4   12....       LCALL     ?DEALLOC_XSTACK8
   1536                          uiUintToString(PermitJoinDuration, line[0] + 12, 10, 3, TRUE, FALSE);
   \   0002C7                ; Setup parameters for call to function uiUintToString
   \   0002C7   8E..         MOV       ?V0,R6
   \   0002C9   78..         MOV       R0,#?V0
   \   0002CB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002CE   75..01       MOV       ?V0,#0x1
   \   0002D1   78..         MOV       R0,#?V0
   \   0002D3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002D6   75..03       MOV       ?V0,#0x3
   \   0002D9   78..         MOV       R0,#?V0
   \   0002DB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002DE   7403         MOV       A,#0x3
   \   0002E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E3   E0           MOVX      A,@DPTR
   \   0002E4   240C         ADD       A,#0xc
   \   0002E6   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0002E9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002EC   790A         MOV       R1,#0xa
   \   0002EE   EF           MOV       A,R7
   \   0002EF   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0002F2   12....       LCALL     ?DEALLOC_XSTACK8
   1537                          LcdAutoRefreshRequired = TRUE;
   \   0002F5   7E01         MOV       R6,#0x1
   \   0002F7   8015         SJMP      ??UI_UpdateLcd_38
   1538                        }
   1539                        else
   1540                        {
   1541                          uiConstStrOver(line[0] + 8, "CLOSED");
   \                     ??UI_UpdateLcd_39:
   \   0002F9                ; Setup parameters for call to function osal_memcpy
   \   0002F9   75....       MOV       ?V0,#`?<Constant "CLOSED">` & 0xff
   \   0002FC   75....       MOV       ?V1,#(`?<Constant "CLOSED">` >> 8) & 0xff
   \   0002FF   78..         MOV       R0,#?V0
   \   000301   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000304   7C06         MOV       R4,#0x6
   \                     ??UI_UpdateLcd_35:
   \   000306   7D00         MOV       R5,#0x0
   \                     ??UI_UpdateLcd_33:
   \   000308   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00030B   12....       LCALL     ?DEALLOC_XSTACK8
   1542                        }
   1543                      }
   1544                     }
   1545                  }
   1546                  
   1547                  uiConstStrCpy(line[1], "Id000 Srch000/00"); // IDENTIFYING, SEARCHING   - IDFYcnt SRCHcnt
   \                     ??UI_UpdateLcd_38:
   \   00030E                ; Setup parameters for call to function osal_memcpy
   \   00030E   75....       MOV       ?V0,#`?<Constant "Id000 Srch000/00">` & 0xff
   \   000311   75....       MOV       ?V1,#(`?<Constant "Id000 Srch000/00">` >> 8) & 0xff
   \   000314   78..         MOV       R0,#?V0
   \   000316   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000319   7C11         MOV       R4,#0x11
   \   00031B   7D00         MOV       R5,#0x0
   \   00031D   7405         MOV       A,#0x5
   \   00031F   12....       LCALL     ?XSTACK_DISP0_8
   \   000322   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000325   12....       LCALL     ?DEALLOC_XSTACK8
   1548          
   1549                  uiUintToString(*pUiIdentifyTimeAttribute, line[1] + 2, 10, 3, TRUE, FALSE);
   \   000328                ; Setup parameters for call to function uiUintToString
   \   000328   75..00       MOV       ?V0,#0x0
   \   00032B   78..         MOV       R0,#?V0
   \   00032D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000330   75..01       MOV       ?V0,#0x1
   \   000333   78..         MOV       R0,#?V0
   \   000335   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000338   75..03       MOV       ?V0,#0x3
   \   00033B   78..         MOV       R0,#?V0
   \   00033D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000340   7405         MOV       A,#0x5
   \   000342   12....       LCALL     ?XSTACK_DISP0_8
   \   000345   E0           MOVX      A,@DPTR
   \   000346   2402         ADD       A,#0x2
   \   000348   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00034B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00034E   790A         MOV       R1,#0xa
   \   000350   90....       MOV       DPTR,#pUiIdentifyTimeAttribute
   \   000353   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000356   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000359   12....       LCALL     ?DEALLOC_XSTACK8
   1550                  bdb_GetFBInitiatorStatus(&FBRemainingTimeLeft, NULL);
   \   00035C                ; Setup parameters for call to function bdb_GetFBInitiatorStatus
   \   00035C   7C00         MOV       R4,#0x0
   \   00035E   7D00         MOV       R5,#0x0
   \   000360   7406         MOV       A,#0x6
   \   000362   12....       LCALL     ?XSTACK_DISP101_8
   \   000365   12....       LCALL     `??bdb_GetFBInitiatorStatus::?relay`; Banked call to: bdb_GetFBInitiatorStatus
   1551                  uiUintToString(FBRemainingTimeLeft, line[1] + 10, 10, 3, TRUE, FALSE);
   \   000368                ; Setup parameters for call to function uiUintToString
   \   000368   75..00       MOV       ?V0,#0x0
   \   00036B   78..         MOV       R0,#?V0
   \   00036D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000370   75..01       MOV       ?V0,#0x1
   \   000373   78..         MOV       R0,#?V0
   \   000375   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000378   75..03       MOV       ?V0,#0x3
   \   00037B   78..         MOV       R0,#?V0
   \   00037D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000380   7405         MOV       A,#0x5
   \   000382   12....       LCALL     ?XSTACK_DISP0_8
   \   000385   E0           MOVX      A,@DPTR
   \   000386   240A         ADD       A,#0xa
   \   000388   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00038B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00038E   790A         MOV       R1,#0xa
   \   000390   740B         MOV       A,#0xb
   \   000392   12....       LCALL     ?XSTACK_DISP0_8
   \   000395   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000398   12....       LCALL     ?DEALLOC_XSTACK8
   1552                  uiUintToString(FBMatchesFound, line[1] + 14, 10, 2, TRUE, FALSE);
   \   00039B                ; Setup parameters for call to function uiUintToString
   \   00039B   75..00       MOV       ?V0,#0x0
   \   00039E   78..         MOV       R0,#?V0
   \   0003A0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003A3   75..01       MOV       ?V0,#0x1
   \   0003A6   78..         MOV       R0,#?V0
   \   0003A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003AB   75..02       MOV       ?V0,#0x2
   \   0003AE   78..         MOV       R0,#?V0
   \   0003B0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003B3   7405         MOV       A,#0x5
   \   0003B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B8   E0           MOVX      A,@DPTR
   \   0003B9   240E         ADD       A,#0xe
   \   0003BB   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0003BE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003C1   790A         MOV       R1,#0xa
   \   0003C3   90....       MOV       DPTR,#FBMatchesFound
   \   0003C6   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0003C9   12....       LCALL     ?DEALLOC_XSTACK8
   1553          
   1554                  if ((*pUiIdentifyTimeAttribute > 0) || (FBRemainingTimeLeft > 0) || (uiCommissioningStateStr != "--"))
   \   0003CC   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0003CF   701D         JNZ       ??UI_UpdateLcd_40
   \   0003D1   7406         MOV       A,#0x6
   \   0003D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D6   E0           MOVX      A,@DPTR
   \   0003D7   7015         JNZ       ??UI_UpdateLcd_40
   \   0003D9   90....       MOV       DPTR,#uiCommissioningStateStr
   \   0003DC   E0           MOVX      A,@DPTR
   \   0003DD   64..         XRL       A,#`?<Constant "--">` & 0xff
   \   0003DF   7004         JNZ       ??UI_UpdateLcd_41
   \   0003E1   A3           INC       DPTR
   \   0003E2   E0           MOVX      A,@DPTR
   \   0003E3   64..         XRL       A,#(`?<Constant "--">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_41:
   \   0003E5   7007         JNZ       ??UI_UpdateLcd_40
   \   0003E7   EE           MOV       A,R6
   \   0003E8   A2E0         MOV       C,0xE0 /* A   */.0
   \   0003EA   92F0         MOV       B.0,C
   \   0003EC   8002         SJMP      ??UI_UpdateLcd_42
   1555                  {
   1556                    LcdAutoRefreshRequired = TRUE;
   \                     ??UI_UpdateLcd_40:
   \   0003EE   D2F0         SETB      B.0
   1557                  }
   1558          
   1559                  line[2] = "<  COMMISSION  >";
   \                     ??UI_UpdateLcd_42:
   \   0003F0   7404         MOV       A,#0x4
   \   0003F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0003F5   74..         MOV       A,#`?<Constant "<  COMMISSION  >">` & 0xff
   \   0003F7   F0           MOVX      @DPTR,A
   \   0003F8   A3           INC       DPTR
   \   0003F9   74..         MOV       A,#(`?<Constant "<  COMMISSION  >">` >> 8) & 0xff
   \   0003FB   F0           MOVX      @DPTR,A
   1560                  
   1561                  if (LcdAutoRefreshRequired)
   \   0003FC   A2F0         MOV       C,B.0
   \   0003FE   4003         JC        $+5
   \   000400   02....       LJMP      ??UI_UpdateLcd_3 & 0xFFFF
   1562                  {
   1563                    osal_start_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent, LCD_AUTO_REFRESH_INTERVAL_ON_COMISSIONING_SCREEN);
   \   000403                ; Setup parameters for call to function osal_start_timerEx
   \   000403   90....       MOV       DPTR,#__Constant_fa
   \   000406   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000409   12....       LCALL     ?Subroutine17 & 0xFFFF
   1564                  }
   \                     ??CrossCallReturnLabel_33:
   \   00040C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00040F   02....       LJMP      ??UI_UpdateLcd_3 & 0xFFFF
   1565                  break;
   1566                case UI_STATE_SET_INST_CODE:
   1567                  line[2] = "<ADD INSTL CODE>";
   \                     ??UI_UpdateLcd_11:
   \   000412   7404         MOV       A,#0x4
   \   000414   12....       LCALL     ?XSTACK_DISP0_8
   \   000417   74..         MOV       A,#`?<Constant "<ADD INSTL CODE>">` & 0xff
   \   000419   F0           MOVX      @DPTR,A
   \   00041A   A3           INC       DPTR
   \   00041B   74..         MOV       A,#(`?<Constant "<ADD INSTL CODE>">` >> 8) & 0xff
   \   00041D   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1568                  break;
   1569                case UI_STATE_SET_INST_CODE_0:
   1570                  uiArrayToString(uiInstallCode, line[0], 16, TRUE); 
   \                     ??UI_UpdateLcd_21:
   \   000420                ; Setup parameters for call to function uiArrayToString
   \   000420   75..01       MOV       ?V0,#0x1
   \   000423   78..         MOV       R0,#?V0
   \   000425   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000428   7910         MOV       R1,#0x10
   \   00042A   7401         MOV       A,#0x1
   \   00042C   12....       LCALL     ?XSTACK_DISP0_8
   \   00042F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000432   12....       LCALL     ?DEALLOC_XSTACK8
   1571                  uiArrayToString(uiInstallCode + 8, line[1], 16, TRUE); 
   \   000435                ; Setup parameters for call to function uiArrayToString
   \   000435   78..         MOV       R0,#?V0
   \   000437   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00043A   7910         MOV       R1,#0x10
   \   00043C   7403         MOV       A,#0x3
   \   00043E   12....       LCALL     ?XSTACK_DISP0_8
   \   000441   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000444   12....       LCALL     ?DEALLOC_XSTACK8
   1572                  line[0][16] = 0;
   \   000447   12....       LCALL     ?Subroutine14 & 0xFFFF
   1573                  line[1][16] = 0;
   \                     ??CrossCallReturnLabel_25:
   \   00044A   12....       LCALL     ?XSTACK_DISP0_8
   \   00044D   12....       LCALL     ?Subroutine15 & 0xFFFF
   1574                  line[2] = "<SET INSTL CODE>";
   \                     ??CrossCallReturnLabel_27:
   \   000450   7404         MOV       A,#0x4
   \   000452   12....       LCALL     ?XSTACK_DISP0_8
   \   000455   74..         MOV       A,#`?<Constant "<SET INSTL CODE>">` & 0xff
   \   000457   F0           MOVX      @DPTR,A
   \   000458   A3           INC       DPTR
   \   000459   74..         MOV       A,#(`?<Constant "<SET INSTL CODE>">` >> 8) & 0xff
   \   00045B   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1575                  break;
   1576          #if (ZG_BUILD_COORDINATOR_TYPE)
   1577                case UI_STATE_SET_INST_CODE_ADDR_0:
   1578                  uiArrayToString(uiInstallCodeAddr, line[0],16, FALSE); 
   1579                  line[0][16] = 0;
   1580                  line[2] = "<SET I.C. ADDR >";
   1581                  break;
   1582          #endif
   1583                case UI_STATE_SET_INST_CODE_DONE:
   1584                  line[0] = "Last status:";
   \                     ??UI_UpdateLcd_22:
   \   00045E   85..82       MOV       DPL,?XSP + 0
   \   000461   85..83       MOV       DPH,?XSP + 1
   \   000464   74..         MOV       A,#`?<Constant "Last status:">` & 0xff
   \   000466   F0           MOVX      @DPTR,A
   \   000467   A3           INC       DPTR
   \   000468   74..         MOV       A,#(`?<Constant "Last status:">` >> 8) & 0xff
   \   00046A   F0           MOVX      @DPTR,A
   1585                  
   1586                  switch (uiAddInstallCodeLastStatus)
   \   00046B   90....       MOV       DPTR,#uiAddInstallCodeLastStatus
   \   00046E   E0           MOVX      A,@DPTR
   \   00046F   6010         JZ        ??UI_UpdateLcd_43
   \   000471   04           INC       A
   \   000472   701B         JNZ       ??UI_UpdateLcd_44
   1587                  {
   1588                    case STATUS_UNKNOWN:
   1589                      line[1] = "---";
   \   000474   7402         MOV       A,#0x2
   \   000476   12....       LCALL     ?XSTACK_DISP0_8
   \   000479   74..         MOV       A,#`?<Constant "---">` & 0xff
   \   00047B   F0           MOVX      @DPTR,A
   \   00047C   A3           INC       DPTR
   \   00047D   74..         MOV       A,#(`?<Constant "---">` >> 8) & 0xff
   \   00047F   800B         SJMP      ??UI_UpdateLcd_45
   1590                      break;
   1591                    case ZSuccess:
   1592                      line[1] = "SUCCESS";
   \                     ??UI_UpdateLcd_43:
   \   000481   7402         MOV       A,#0x2
   \   000483   12....       LCALL     ?XSTACK_DISP0_8
   \   000486   74..         MOV       A,#`?<Constant "SUCCESS">` & 0xff
   \   000488   F0           MOVX      @DPTR,A
   \   000489   A3           INC       DPTR
   \   00048A   74..         MOV       A,#(`?<Constant "SUCCESS">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_45:
   \   00048C   F0           MOVX      @DPTR,A
   1593                      break;
   \   00048D   804A         SJMP      ??UI_UpdateLcd_46
   1594                    default:
   1595                      uiConstStrCpy(line[1], "ERROR (0x  )    ");
   \                     ??UI_UpdateLcd_44:
   \   00048F                ; Setup parameters for call to function osal_memcpy
   \   00048F   75....       MOV       ?V0,#`?<Constant "ERROR (0x  )    ">` & 0xff
   \   000492   75....       MOV       ?V1,#(`?<Constant "ERROR (0x  )    ">` >> 8) & 0xff
   \   000495   78..         MOV       R0,#?V0
   \   000497   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00049A   7C11         MOV       R4,#0x11
   \   00049C   7D00         MOV       R5,#0x0
   \   00049E   7405         MOV       A,#0x5
   \   0004A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0004A3   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0004A6   12....       LCALL     ?DEALLOC_XSTACK8
   1596                      uiUintToString( uiAddInstallCodeLastStatus, line[1] + 9, 16, 2, TRUE, FALSE);
   \   0004A9                ; Setup parameters for call to function uiUintToString
   \   0004A9   8E..         MOV       ?V0,R6
   \   0004AB   78..         MOV       R0,#?V0
   \   0004AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004B0   75..01       MOV       ?V0,#0x1
   \   0004B3   78..         MOV       R0,#?V0
   \   0004B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004B8   75..02       MOV       ?V0,#0x2
   \   0004BB   78..         MOV       R0,#?V0
   \   0004BD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004C0   7405         MOV       A,#0x5
   \   0004C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0004C5   E0           MOVX      A,@DPTR
   \   0004C6   2409         ADD       A,#0x9
   \   0004C8   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0004CB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004CE   7910         MOV       R1,#0x10
   \   0004D0   90....       MOV       DPTR,#uiAddInstallCodeLastStatus
   \   0004D3   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0004D6   12....       LCALL     ?DEALLOC_XSTACK8
   1597                      break;
   1598                  }
   1599                  line[2] = "<APLY INST CODE>";
   \                     ??UI_UpdateLcd_46:
   \   0004D9   7404         MOV       A,#0x4
   \   0004DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0004DE   74..         MOV       A,#`?<Constant "<APLY INST CODE>">` & 0xff
   \   0004E0   F0           MOVX      @DPTR,A
   \   0004E1   A3           INC       DPTR
   \   0004E2   74..         MOV       A,#(`?<Constant "<APLY INST CODE>">` >> 8) & 0xff
   \   0004E4   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1600                  break;
   1601          #if (ZG_BUILD_COORDINATOR_TYPE)
   1602                case UI_STATE_SET_INST_CODE_ADDR_1:
   1603                  uiArrayToString(uiInstallCodeAddr, line[0],16, FALSE); 
   1604                  line[0][16] = 0;
   1605                  line[2] = "       I.C. ADDR";
   1606                  break;
   1607          #endif
   1608                case UI_STATE_SET_INST_CODE_1:
   1609                  uiArrayToString(uiInstallCode, line[0], 16, TRUE); 
   \                     ??UI_UpdateLcd_23:
   \   0004E7                ; Setup parameters for call to function uiArrayToString
   \   0004E7   75..01       MOV       ?V0,#0x1
   \   0004EA   78..         MOV       R0,#?V0
   \   0004EC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004EF   7910         MOV       R1,#0x10
   \   0004F1   7401         MOV       A,#0x1
   \   0004F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0004F6   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0004F9   12....       LCALL     ?DEALLOC_XSTACK8
   1610                  uiArrayToString(uiInstallCode + 8, line[1], 16, TRUE); 
   \   0004FC                ; Setup parameters for call to function uiArrayToString
   \   0004FC   78..         MOV       R0,#?V0
   \   0004FE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000501   7910         MOV       R1,#0x10
   \   000503   7403         MOV       A,#0x3
   \   000505   12....       LCALL     ?XSTACK_DISP0_8
   \   000508   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00050B   12....       LCALL     ?DEALLOC_XSTACK8
   1611                  line[0][16] = 0;
   \   00050E   12....       LCALL     ?Subroutine14 & 0xFFFF
   1612                  line[1][16] = 0;
   \                     ??CrossCallReturnLabel_26:
   \   000511   12....       LCALL     ?XSTACK_DISP0_8
   \   000514   12....       LCALL     ?Subroutine15 & 0xFFFF
   1613                  uiConstStrCpy(line[2], "       INST CODE");
   \                     ??CrossCallReturnLabel_28:
   \   000517                ; Setup parameters for call to function osal_memcpy
   \   000517   75....       MOV       ?V0,#`?<Constant "       INST CODE">` & 0xff
   \   00051A   75....       MOV       ?V1,#(`?<Constant "       INST CODE">` >> 8) & 0xff
   \   00051D   78..         MOV       R0,#?V0
   \   00051F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000522   7C11         MOV       R4,#0x11
   \   000524   7D00         MOV       R5,#0x0
   \   000526   7407         MOV       A,#0x7
   \   000528   12....       LCALL     ?XSTACK_DISP0_8
   \   00052B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00052E   12....       LCALL     ?DEALLOC_XSTACK8
   1614                  uiArrayToString( uiInstallCode + 16, line[2], 4, TRUE);
   \   000531                ; Setup parameters for call to function uiArrayToString
   \   000531   75..01       MOV       ?V0,#0x1
   \   000534   78..         MOV       R0,#?V0
   \   000536   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000539   7904         MOV       R1,#0x4
   \   00053B   7405         MOV       A,#0x5
   \   00053D   12....       LCALL     ?XSTACK_DISP0_8
   \   000540   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000543   7A..         MOV       R2,#(uiInstallCode + 16) & 0xff
   \   000545   7B..         MOV       R3,#((uiInstallCode + 16) >> 8) & 0xff
   \   000547   12....       LCALL     `??uiArrayToString::?relay`; Banked call to: uiArrayToString
   \   00054A   7401         MOV       A,#0x1
   \   00054C   12....       LCALL     ?DEALLOC_XSTACK8
   1615                  break;
   \   00054F   02....       LJMP      ??UI_UpdateLcd_3 & 0xFFFF
   1616                case UI_STATE_APP_SPECIFIC_MENU:
   1617                  line[2] = "<   APP MENU   >";
   \                     ??UI_UpdateLcd_7:
   \   000552   7404         MOV       A,#0x4
   \   000554   12....       LCALL     ?XSTACK_DISP0_8
   \   000557   74..         MOV       A,#`?<Constant "<   APP MENU   >">` & 0xff
   \   000559   F0           MOVX      @DPTR,A
   \   00055A   A3           INC       DPTR
   \   00055B   74..         MOV       A,#(`?<Constant "<   APP MENU   >">` >> 8) & 0xff
   \   00055D   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1618                  break;
   1619                case UI_STATE_SET_PRI_CHANEL_MASK_0:
   1620                  line[0] = "1234567890123456";
   \                     ??UI_UpdateLcd_15:
   \   000560   12....       LCALL     ?Subroutine6 & 0xFFFF
   1621                  uiCreateChannelMaskString(bdbAttributes.bdbPrimaryChannelSet, line[1]);
   \                     ??CrossCallReturnLabel_3:
   \   000563   12....       LCALL     ?XSTACK_DISP0_8
   \   000566   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000569   90....       MOV       DPTR,#bdbAttributes + 4
   \   00056C   12....       LCALL     ?XLOAD_R2345
   \   00056F   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000572   12....       LCALL     ?DEALLOC_XSTACK8
   1622                  line[2] = "<PRI CHANL MASK>";
   \   000575   7404         MOV       A,#0x4
   \   000577   12....       LCALL     ?XSTACK_DISP0_8
   \   00057A   74..         MOV       A,#`?<Constant "<PRI CHANL MASK>">` & 0xff
   \   00057C   F0           MOVX      @DPTR,A
   \   00057D   A3           INC       DPTR
   \   00057E   74..         MOV       A,#(`?<Constant "<PRI CHANL MASK>">` >> 8) & 0xff
   \   000580   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1623                  break;
   1624                case UI_STATE_SET_SEC_CHANEL_MASK_0:
   1625                  line[0] = "1234567890123456";
   \                     ??UI_UpdateLcd_16:
   \   000583   12....       LCALL     ?Subroutine6 & 0xFFFF
   1626                  uiCreateChannelMaskString(bdbAttributes.bdbSecondaryChannelSet, line[1]);
   \                     ??CrossCallReturnLabel_4:
   \   000586   12....       LCALL     ?XSTACK_DISP0_8
   \   000589   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00058C   90....       MOV       DPTR,#bdbAttributes
   \   00058F   12....       LCALL     ?XLOAD_R2345
   \   000592   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000595   12....       LCALL     ?DEALLOC_XSTACK8
   1627                  line[2] = "<SEC CHANL MASK>";
   \   000598   7404         MOV       A,#0x4
   \   00059A   12....       LCALL     ?XSTACK_DISP0_8
   \   00059D   74..         MOV       A,#`?<Constant "<SEC CHANL MASK>">` & 0xff
   \   00059F   F0           MOVX      @DPTR,A
   \   0005A0   A3           INC       DPTR
   \   0005A1   74..         MOV       A,#(`?<Constant "<SEC CHANL MASK>">` >> 8) & 0xff
   \   0005A3   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1628                  break;
   1629                case UI_STATE_SET_PRI_CHANEL_MASK_1:
   1630                  line[0] = "1234567890123456";
   \                     ??UI_UpdateLcd_18:
   \   0005A6   12....       LCALL     ?Subroutine6 & 0xFFFF
   1631                  uiCreateChannelMaskString(bdbAttributes.bdbPrimaryChannelSet, line[1]);
   \                     ??CrossCallReturnLabel_5:
   \   0005A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0005AC   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0005AF   90....       MOV       DPTR,#bdbAttributes + 4
   \   0005B2   12....       LCALL     ?XLOAD_R2345
   \   0005B5   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0005B8   12....       LCALL     ?DEALLOC_XSTACK8
   1632                  line[2] = " PRI CHANL MASK ";
   \   0005BB   7404         MOV       A,#0x4
   \   0005BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0005C0   74..         MOV       A,#`?<Constant " PRI CHANL MASK ">` & 0xff
   \   0005C2   F0           MOVX      @DPTR,A
   \   0005C3   A3           INC       DPTR
   \   0005C4   74..         MOV       A,#(`?<Constant " PRI CHANL MASK ">` >> 8) & 0xff
   \   0005C6   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1633                  break;
   1634                case UI_STATE_SET_SEC_CHANEL_MASK_1:
   1635                  line[0] = "1234567890123456";
   \                     ??UI_UpdateLcd_19:
   \   0005C9   12....       LCALL     ?Subroutine6 & 0xFFFF
   1636                  uiCreateChannelMaskString(bdbAttributes.bdbSecondaryChannelSet, line[1]);
   \                     ??CrossCallReturnLabel_6:
   \   0005CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0005CF   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0005D2   90....       MOV       DPTR,#bdbAttributes
   \   0005D5   12....       LCALL     ?XLOAD_R2345
   \   0005D8   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0005DB   12....       LCALL     ?DEALLOC_XSTACK8
   1637                  line[2] = " SEC CHANL MASK ";
   \   0005DE   7404         MOV       A,#0x4
   \   0005E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0005E3   74..         MOV       A,#`?<Constant " SEC CHANL MASK ">` & 0xff
   \   0005E5   F0           MOVX      @DPTR,A
   \   0005E6   A3           INC       DPTR
   \   0005E7   74..         MOV       A,#(`?<Constant " SEC CHANL MASK ">` >> 8) & 0xff
   \   0005E9   02....       LJMP      ??UI_UpdateLcd_26 & 0xFFFF
   1638                  break;
   1639                case UI_STATE_SET_PAN_ID_0:
   1640                  if (zgConfigPANID == 0xFFFF)
   \                     ??UI_UpdateLcd_17:
   \   0005EC   90....       MOV       DPTR,#zgConfigPANID
   \   0005EF   E0           MOVX      A,@DPTR
   \   0005F0   F4           CPL       A
   \   0005F1   7003         JNZ       ??UI_UpdateLcd_47
   \   0005F3   A3           INC       DPTR
   \   0005F4   E0           MOVX      A,@DPTR
   \   0005F5   F4           CPL       A
   \                     ??UI_UpdateLcd_47:
   \   0005F6   7016         JNZ       ??UI_UpdateLcd_48
   1641                  {
   1642                    uiConstStrCpy(line[0], "    0xFFFF (any)");
   \   0005F8                ; Setup parameters for call to function osal_memcpy
   \   0005F8   78..         MOV       R0,#?V0
   \   0005FA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0005FD   7C11         MOV       R4,#0x11
   \   0005FF   7D00         MOV       R5,#0x0
   \   000601   7403         MOV       A,#0x3
   \   000603   12....       LCALL     ?XSTACK_DISP0_8
   \   000606   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000609   12....       LCALL     ?DEALLOC_XSTACK8
   \   00060C   803C         SJMP      ??UI_UpdateLcd_49
   1643                  }
   1644                  else
   1645                  {
   1646                    uiConstStrCpy(line[0], "    0x          ");
   \                     ??UI_UpdateLcd_48:
   \   00060E                ; Setup parameters for call to function osal_memcpy
   \   00060E   78..         MOV       R0,#?V4
   \   000610   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000613   7C11         MOV       R4,#0x11
   \   000615   7D00         MOV       R5,#0x0
   \   000617   7403         MOV       A,#0x3
   \   000619   12....       LCALL     ?XSTACK_DISP0_8
   \   00061C   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00061F   12....       LCALL     ?DEALLOC_XSTACK8
   1647                    uiUintToString( zgConfigPANID, line[0] + 6, 16, 4, TRUE, FALSE);
   \   000622                ; Setup parameters for call to function uiUintToString
   \   000622   8E..         MOV       ?V0,R6
   \   000624   78..         MOV       R0,#?V0
   \   000626   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000629   75..01       MOV       ?V0,#0x1
   \   00062C   78..         MOV       R0,#?V0
   \   00062E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000631   75..04       MOV       ?V0,#0x4
   \   000634   78..         MOV       R0,#?V0
   \   000636   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000639   7403         MOV       A,#0x3
   \   00063B   12....       LCALL     ?XSTACK_DISP0_8
   \   00063E   12....       LCALL     ?Subroutine11 & 0xFFFF
   1648                  }
   \                     ??CrossCallReturnLabel_109:
   \   000641   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000644   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000647   12....       LCALL     ?DEALLOC_XSTACK8
   1649                  line[2] = "<    PAN ID    >";
   \                     ??UI_UpdateLcd_49:
   \   00064A   7404         MOV       A,#0x4
   \   00064C   12....       LCALL     ?XSTACK_DISP0_8
   \   00064F   74..         MOV       A,#`?<Constant "<    PAN ID    >">` & 0xff
   \   000651   F0           MOVX      @DPTR,A
   \   000652   A3           INC       DPTR
   \   000653   74..         MOV       A,#(`?<Constant "<    PAN ID    >">` >> 8) & 0xff
   \   000655   8069         SJMP      ??UI_UpdateLcd_26
   1650                  break;
   1651                case UI_STATE_SET_PAN_ID_1:
   1652                  if (zgConfigPANID == 0xFFFF)
   \                     ??UI_UpdateLcd_20:
   \   000657   90....       MOV       DPTR,#zgConfigPANID
   \   00065A   E0           MOVX      A,@DPTR
   \   00065B   F4           CPL       A
   \   00065C   7003         JNZ       ??UI_UpdateLcd_50
   \   00065E   A3           INC       DPTR
   \   00065F   E0           MOVX      A,@DPTR
   \   000660   F4           CPL       A
   \                     ??UI_UpdateLcd_50:
   \   000661   7016         JNZ       ??UI_UpdateLcd_51
   1653                  {
   1654                    uiConstStrCpy(line[0], "    0xFFFF (any)");
   \   000663                ; Setup parameters for call to function osal_memcpy
   \   000663   78..         MOV       R0,#?V0
   \   000665   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000668   7C11         MOV       R4,#0x11
   \   00066A   7D00         MOV       R5,#0x0
   \   00066C   7403         MOV       A,#0x3
   \   00066E   12....       LCALL     ?XSTACK_DISP0_8
   \   000671   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000674   12....       LCALL     ?DEALLOC_XSTACK8
   \   000677   803C         SJMP      ??UI_UpdateLcd_52
   1655                  }
   1656                  else
   1657                  {
   1658                    uiConstStrCpy(line[0], "    0x          ");
   \                     ??UI_UpdateLcd_51:
   \   000679                ; Setup parameters for call to function osal_memcpy
   \   000679   78..         MOV       R0,#?V4
   \   00067B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00067E   7C11         MOV       R4,#0x11
   \   000680   7D00         MOV       R5,#0x0
   \   000682   7403         MOV       A,#0x3
   \   000684   12....       LCALL     ?XSTACK_DISP0_8
   \   000687   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00068A   12....       LCALL     ?DEALLOC_XSTACK8
   1659                    uiUintToString( zgConfigPANID, line[0] + 6, 16, 4, TRUE, FALSE);
   \   00068D                ; Setup parameters for call to function uiUintToString
   \   00068D   8E..         MOV       ?V0,R6
   \   00068F   78..         MOV       R0,#?V0
   \   000691   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000694   75..01       MOV       ?V0,#0x1
   \   000697   78..         MOV       R0,#?V0
   \   000699   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00069C   75..04       MOV       ?V0,#0x4
   \   00069F   78..         MOV       R0,#?V0
   \   0006A1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0006A4   7403         MOV       A,#0x3
   \   0006A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0006A9   12....       LCALL     ?Subroutine11 & 0xFFFF
   1660                  }
   \                     ??CrossCallReturnLabel_110:
   \   0006AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0006AF   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0006B2   12....       LCALL     ?DEALLOC_XSTACK8
   1661                  line[2] = "     PAN ID     ";
   \                     ??UI_UpdateLcd_52:
   \   0006B5   7404         MOV       A,#0x4
   \   0006B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0006BA   74..         MOV       A,#`?<Constant "     PAN ID     ">` & 0xff
   \   0006BC   F0           MOVX      @DPTR,A
   \   0006BD   A3           INC       DPTR
   \   0006BE   74..         MOV       A,#(`?<Constant "     PAN ID     ">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_26:
   \   0006C0   F0           MOVX      @DPTR,A
   1662                  break;
   \   0006C1   02....       LJMP      ??UI_UpdateLcd_3 & 0xFFFF
   1663                case UI_STATE_INFO:
   1664                  // Display the extended address.
   1665                  xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
   \                     ??UI_UpdateLcd_8:
   \   0006C4   78..         MOV       R0,#(aExtendedAddress + 7) & 0xff
   \   0006C6   79..         MOV       R1,#((aExtendedAddress + 7) >> 8) & 0xff
   1666                  
   1667                  for (i = 0; i < Z_EXTADDR_LEN * 2; xad--)
   \   0006C8   7A00         MOV       R2,#0x0
   1668                  {
   1669                    uint8 ch;
   1670                    ch = (*xad >> 4) & 0x0F;
   \                     ??UI_UpdateLcd_53:
   \   0006CA   8882         MOV       DPL,R0
   \   0006CC   8983         MOV       DPH,R1
   \   0006CE   E0           MOVX      A,@DPTR
   \   0006CF   C4           SWAP      A
   \   0006D0   540F         ANL       A,#0xf
   \   0006D2   FC           MOV       R4,A
   1671                    line[0][i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   0006D3   EA           MOV       A,R2
   \   0006D4   FE           MOV       R6,A
   \   0006D5   7401         MOV       A,#0x1
   \   0006D7   2E           ADD       A,R6
   \   0006D8   FA           MOV       R2,A
   \   0006D9   EC           MOV       A,R4
   \   0006DA   C3           CLR       C
   \   0006DB   940A         SUBB      A,#0xa
   \   0006DD   5004         JNC       ??UI_UpdateLcd_54
   \   0006DF   7B30         MOV       R3,#0x30
   \   0006E1   8002         SJMP      ??UI_UpdateLcd_55
   \                     ??UI_UpdateLcd_54:
   \   0006E3   7B37         MOV       R3,#0x37
   \                     ??UI_UpdateLcd_55:
   \   0006E5   EC           MOV       A,R4
   \   0006E6   2B           ADD       A,R3
   \   0006E7   C0E0         PUSH      A
   \   0006E9   85..82       MOV       DPL,?XSP + 0
   \   0006EC   85..83       MOV       DPH,?XSP + 1
   \   0006EF   E0           MOVX      A,@DPTR
   \   0006F0   2E           ADD       A,R6
   \   0006F1   FB           MOV       R3,A
   \   0006F2   A3           INC       DPTR
   \   0006F3   E0           MOVX      A,@DPTR
   \   0006F4   3400         ADDC      A,#0x0
   \   0006F6   8B82         MOV       DPL,R3
   \   0006F8   F583         MOV       DPH,A
   \   0006FA   D0E0         POP       A
   \   0006FC   F0           MOVX      @DPTR,A
   1672                    ch = *xad & 0x0F;
   \   0006FD   8882         MOV       DPL,R0
   \   0006FF   8983         MOV       DPH,R1
   \   000701   E0           MOVX      A,@DPTR
   \   000702   540F         ANL       A,#0xf
   \   000704   FC           MOV       R4,A
   1673                    line[0][i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   000705   EA           MOV       A,R2
   \   000706   FF           MOV       R7,A
   \   000707   7401         MOV       A,#0x1
   \   000709   2A           ADD       A,R2
   \   00070A   FA           MOV       R2,A
   \   00070B   EC           MOV       A,R4
   \   00070C   C3           CLR       C
   \   00070D   940A         SUBB      A,#0xa
   \   00070F   5004         JNC       ??UI_UpdateLcd_56
   \   000711   7B30         MOV       R3,#0x30
   \   000713   8002         SJMP      ??UI_UpdateLcd_57
   \                     ??UI_UpdateLcd_56:
   \   000715   7B37         MOV       R3,#0x37
   \                     ??UI_UpdateLcd_57:
   \   000717   EC           MOV       A,R4
   \   000718   2B           ADD       A,R3
   \   000719   C0E0         PUSH      A
   \   00071B   85..82       MOV       DPL,?XSP + 0
   \   00071E   85..83       MOV       DPH,?XSP + 1
   \   000721   E0           MOVX      A,@DPTR
   \   000722   2F           ADD       A,R7
   \   000723   FB           MOV       R3,A
   \   000724   A3           INC       DPTR
   \   000725   E0           MOVX      A,@DPTR
   \   000726   3400         ADDC      A,#0x0
   \   000728   8B82         MOV       DPL,R3
   \   00072A   F583         MOV       DPH,A
   \   00072C   D0E0         POP       A
   \   00072E   F0           MOVX      @DPTR,A
   1674                  }
   \   00072F   E8           MOV       A,R0
   \   000730   24FF         ADD       A,#-0x1
   \   000732   18           DEC       R0
   \   000733   E9           MOV       A,R1
   \   000734   34FF         ADDC      A,#-0x1
   \   000736   F9           MOV       R1,A
   \   000737   EA           MOV       A,R2
   \   000738   C3           CLR       C
   \   000739   9410         SUBB      A,#0x10
   \   00073B   408D         JC        ??UI_UpdateLcd_53
   1675                  
   1676                  line[0][Z_EXTADDR_LEN*2] = '\0';
   \   00073D   85..82       MOV       DPL,?XSP + 0
   \   000740   85..83       MOV       DPH,?XSP + 1
   \   000743   12....       LCALL     ?Subroutine15 & 0xFFFF
   1677          
   1678                  uiConstStrCpy( line[1], "nxxxx cxx axxxx ");
   \                     ??CrossCallReturnLabel_29:
   \   000746                ; Setup parameters for call to function osal_memcpy
   \   000746   75....       MOV       ?V0,#`?<Constant "nxxxx cxx axxxx ">` & 0xff
   \   000749   75....       MOV       ?V1,#(`?<Constant "nxxxx cxx axxxx ">` >> 8) & 0xff
   \   00074C   78..         MOV       R0,#?V0
   \   00074E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000751   7C11         MOV       R4,#0x11
   \   000753   7D00         MOV       R5,#0x0
   \   000755   7405         MOV       A,#0x5
   \   000757   12....       LCALL     ?XSTACK_DISP0_8
   \   00075A   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00075D   12....       LCALL     ?DEALLOC_XSTACK8
   1679          
   1680                  uiUintToString( _NIB.nwkPanId, line[1] + 1 , 16, 4, TRUE, FALSE);
   \   000760                ; Setup parameters for call to function uiUintToString
   \   000760   75..00       MOV       ?V0,#0x0
   \   000763   78..         MOV       R0,#?V0
   \   000765   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000768   75..01       MOV       ?V0,#0x1
   \   00076B   78..         MOV       R0,#?V0
   \   00076D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000770   75..04       MOV       ?V0,#0x4
   \   000773   78..         MOV       R0,#?V0
   \   000775   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000778   7405         MOV       A,#0x5
   \   00077A   12....       LCALL     ?XSTACK_DISP0_8
   \   00077D   E0           MOVX      A,@DPTR
   \   00077E   2401         ADD       A,#0x1
   \   000780   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000783   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000786   7910         MOV       R1,#0x10
   \   000788   90....       MOV       DPTR,#_NIB + 33
   \   00078B   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00078E   12....       LCALL     ?DEALLOC_XSTACK8
   1681                  line[1][5] = ' ';
   \   000791   7402         MOV       A,#0x2
   \   000793   12....       LCALL     ?XSTACK_DISP0_8
   \   000796   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000799   A3           INC       DPTR
   \   00079A   A3           INC       DPTR
   \   00079B   A3           INC       DPTR
   \   00079C   A3           INC       DPTR
   \   00079D   A3           INC       DPTR
   \   00079E   7420         MOV       A,#0x20
   \   0007A0   F0           MOVX      @DPTR,A
   1682                  
   1683                  uiUintToString( _NIB.nwkLogicalChannel, (void *)(line[1] + 7), 10, 2, TRUE, FALSE );
   \   0007A1                ; Setup parameters for call to function uiUintToString
   \   0007A1   75..00       MOV       ?V0,#0x0
   \   0007A4   78..         MOV       R0,#?V0
   \   0007A6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0007A9   75..01       MOV       ?V0,#0x1
   \   0007AC   78..         MOV       R0,#?V0
   \   0007AE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0007B1   75..02       MOV       ?V0,#0x2
   \   0007B4   78..         MOV       R0,#?V0
   \   0007B6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0007B9   7405         MOV       A,#0x5
   \   0007BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0007BE   E0           MOVX      A,@DPTR
   \   0007BF   2407         ADD       A,#0x7
   \   0007C1   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0007C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0007C7   790A         MOV       R1,#0xa
   \   0007C9   90....       MOV       DPTR,#_NIB + 22
   \   0007CC   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0007CF   12....       LCALL     ?DEALLOC_XSTACK8
   1684                  line[1][9] = ' ';
   \   0007D2   7402         MOV       A,#0x2
   \   0007D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0007D7   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0007DA   C8           XCH       A,R0
   \   0007DB   2409         ADD       A,#0x9
   \   0007DD   F582         MOV       DPL,A
   \   0007DF   E4           CLR       A
   \   0007E0   38           ADDC      A,R0
   \   0007E1   F583         MOV       DPH,A
   \   0007E3   7420         MOV       A,#0x20
   \   0007E5   F0           MOVX      @DPTR,A
   1685                  
   1686                  uiUintToString( _NIB.nwkDevAddress, line[1] + 11, 16, 4, TRUE, FALSE );
   \   0007E6                ; Setup parameters for call to function uiUintToString
   \   0007E6   75..00       MOV       ?V0,#0x0
   \   0007E9   78..         MOV       R0,#?V0
   \   0007EB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0007EE   75..01       MOV       ?V0,#0x1
   \   0007F1   78..         MOV       R0,#?V0
   \   0007F3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0007F6   75..04       MOV       ?V0,#0x4
   \   0007F9   78..         MOV       R0,#?V0
   \   0007FB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0007FE   7405         MOV       A,#0x5
   \   000800   12....       LCALL     ?XSTACK_DISP0_8
   \   000803   E0           MOVX      A,@DPTR
   \   000804   240B         ADD       A,#0xb
   \   000806   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000809   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00080C   7910         MOV       R1,#0x10
   \   00080E   90....       MOV       DPTR,#_NIB + 20
   \   000811   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000814   12....       LCALL     ?DEALLOC_XSTACK8
   1687          
   1688                  uiConstStrCpy(line[2], "          <INFO>");
   \   000817                ; Setup parameters for call to function osal_memcpy
   \   000817   75....       MOV       ?V0,#`?<Constant "          <INFO>">` & 0xff
   \   00081A   75....       MOV       ?V1,#(`?<Constant "          <INFO>">` >> 8) & 0xff
   \   00081D   78..         MOV       R0,#?V0
   \   00081F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000822   7C11         MOV       R4,#0x11
   \   000824   7D00         MOV       R5,#0x0
   \   000826   7407         MOV       A,#0x7
   \   000828   12....       LCALL     ?XSTACK_DISP0_8
   \   00082B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00082E   12....       LCALL     ?DEALLOC_XSTACK8
   1689                  switch (uiNwkStateShadow)
   \   000831   7404         MOV       A,#0x4
   \   000833   12....       LCALL     ?XSTACK_DISP0_8
   \   000836   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000839   90....       MOV       DPTR,#uiNwkStateShadow
   \   00083C   E0           MOVX      A,@DPTR
   \   00083D   24FA         ADD       A,#-0x6
   \   00083F   6048         JZ        ??UI_UpdateLcd_58
   \   000841   14           DEC       A
   \   000842   6018         JZ        ??UI_UpdateLcd_59
   \   000844   24FE         ADD       A,#-0x2
   \   000846   6003         JZ        $+5
   \   000848   02....       LJMP      ??UI_UpdateLcd_60 & 0xFFFF
   1690                  {
   1691                    case DEV_ZB_COORD:
   1692                      uiConstStrOver(line[2], "ZC");
   \   00084B                ; Setup parameters for call to function osal_memcpy
   \   00084B   75....       MOV       ?V0,#`?<Constant "ZC">` & 0xff
   \   00084E   75....       MOV       ?V1,#(`?<Constant "ZC">` >> 8) & 0xff
   \   000851   78..         MOV       R0,#?V0
   \   000853   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000856   7C02         MOV       R4,#0x2
   \   000858   7D00         MOV       R5,#0x0
   \   00085A   8024         SJMP      ??CrossCallReturnLabel_50
   1693                      break;
   1694                    case DEV_ROUTER:
   1695                      if (APSME_IsDistributedSecurity())
   \                     ??UI_UpdateLcd_59:
   \   00085C                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00085C   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   00085F   E9           MOV       A,R1
   \   000860   6008         JZ        ??UI_UpdateLcd_61
   1696                      {
   1697                        uiConstStrOver(line[2], "ZR DIST");
   \   000862                ; Setup parameters for call to function osal_memcpy
   \   000862   75....       MOV       ?V0,#`?<Constant "ZR DIST">` & 0xff
   \   000865   75....       MOV       ?V1,#(`?<Constant "ZR DIST">` >> 8) & 0xff
   \   000868   8006         SJMP      ??UI_UpdateLcd_62
   1698                      }
   1699                      else
   1700                      {
   1701                        uiConstStrOver(line[2], "ZR CENT");
   \                     ??UI_UpdateLcd_61:
   \   00086A                ; Setup parameters for call to function osal_memcpy
   \   00086A   75....       MOV       ?V0,#`?<Constant "ZR CENT">` & 0xff
   \   00086D   75....       MOV       ?V1,#(`?<Constant "ZR CENT">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_62:
   \   000870   78..         MOV       R0,#?V0
   \   000872   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000875   7C07         MOV       R4,#0x7
   \   000877   7D00         MOV       R5,#0x0
   \   000879   EC           MOV       A,R4
   \   00087A   12....       LCALL     ?XSTACK_DISP0_8
   \   00087D   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000880   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000883   12....       LCALL     ?DEALLOC_XSTACK8
   \   000886   02....       LJMP      ??UI_UpdateLcd_3 & 0xFFFF
   1702                      }
   1703                      break;
   1704                    case DEV_END_DEVICE:
   1705                      uiConstStrOver(line[2], "ZED p");
   \                     ??UI_UpdateLcd_58:
   \   000889                ; Setup parameters for call to function osal_memcpy
   \   000889   75....       MOV       ?V0,#`?<Constant "ZED p">` & 0xff
   \   00088C   75....       MOV       ?V1,#(`?<Constant "ZED p">` >> 8) & 0xff
   \   00088F   78..         MOV       R0,#?V0
   \   000891   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000894   7C05         MOV       R4,#0x5
   \   000896   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000899   12....       LCALL     ?DEALLOC_XSTACK8
   1706                      uiUintToString( _NIB.nwkCoordAddress, line[2] + 5, 16, 4, TRUE, FALSE );
   \   00089C                ; Setup parameters for call to function uiUintToString
   \   00089C   75..00       MOV       ?V0,#0x0
   \   00089F   78..         MOV       R0,#?V0
   \   0008A1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0008A4   75..01       MOV       ?V0,#0x1
   \   0008A7   78..         MOV       R0,#?V0
   \   0008A9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0008AC   75..04       MOV       ?V0,#0x4
   \   0008AF   78..         MOV       R0,#?V0
   \   0008B1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0008B4   7407         MOV       A,#0x7
   \   0008B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0008B9   E0           MOVX      A,@DPTR
   \   0008BA   2405         ADD       A,#0x5
   \   0008BC   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0008BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0008C2   7910         MOV       R1,#0x10
   \   0008C4   90....       MOV       DPTR,#_NIB + 23
   \   0008C7   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0008CA   8042         SJMP      ??UI_UpdateLcd_63
   1707                      break;
   1708                    default:
   1709          #if ZG_BUILD_COORDINATOR_TYPE
   1710                      uiConstStrOver(line[2], "ZC (   )");
   1711                      uiUintToString( uiNwkStateShadow, line[2] + 4, 10, 3, TRUE, FALSE );
   1712          #elif ZG_BUILD_RTRONLY_TYPE
   1713                      uiConstStrOver(line[2], "ZR (   )");
   1714                      uiUintToString( uiNwkStateShadow, line[2] + 4, 10, 3, TRUE, FALSE );
   1715          #elif ZG_BUILD_ENDDEVICE_TYPE
   1716                      uiConstStrOver(line[2], "ZED (   )");
   \                     ??UI_UpdateLcd_60:
   \   0008CC                ; Setup parameters for call to function osal_memcpy
   \   0008CC   75....       MOV       ?V0,#`?<Constant "ZED (   )">` & 0xff
   \   0008CF   75....       MOV       ?V1,#(`?<Constant "ZED (   )">` >> 8) & 0xff
   \   0008D2   78..         MOV       R0,#?V0
   \   0008D4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0008D7   7C09         MOV       R4,#0x9
   \   0008D9   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0008DC   12....       LCALL     ?DEALLOC_XSTACK8
   1717                      uiUintToString( uiNwkStateShadow, line[2] + 5, 10, 3, TRUE, FALSE );
   \   0008DF                ; Setup parameters for call to function uiUintToString
   \   0008DF   75..00       MOV       ?V0,#0x0
   \   0008E2   78..         MOV       R0,#?V0
   \   0008E4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0008E7   75..01       MOV       ?V0,#0x1
   \   0008EA   78..         MOV       R0,#?V0
   \   0008EC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0008EF   75..03       MOV       ?V0,#0x3
   \   0008F2   78..         MOV       R0,#?V0
   \   0008F4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0008F7   7407         MOV       A,#0x7
   \   0008F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0008FC   E0           MOVX      A,@DPTR
   \   0008FD   2405         ADD       A,#0x5
   \   0008FF   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000902   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000905   790A         MOV       R1,#0xa
   \   000907   90....       MOV       DPTR,#uiNwkStateShadow
   \   00090A   E0           MOVX      A,@DPTR
   \   00090B   FA           MOV       R2,A
   \   00090C   E4           CLR       A
   \   00090D   FB           MOV       R3,A
   \                     ??UI_UpdateLcd_63:
   \   00090E   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000911   12....       LCALL     ?DEALLOC_XSTACK8
   1718          #else
   1719                      uiConstStrOver(line[2], "(   )");
   1720                      uiUintToString( uiNwkStateShadow, line[2] + 1, 10, 3, TRUE, FALSE );
   1721          #endif
   1722                      break;
   1723                  }
   1724                  
   1725                  break;
   1726                default:
   1727                  break;
   1728              }
   1729            }
   1730          
   1731            if (uiLcdCursorLine != 0xFF)
   \                     ??UI_UpdateLcd_3:
   \   000914   90....       MOV       DPTR,#uiLcdCursorLine
   \   000917   E0           MOVX      A,@DPTR
   \   000918   F4           CPL       A
   \   000919   6046         JZ        ??UI_UpdateLcd_64
   1732            {
   1733              if (uiLcdCursorState == 0)
   \   00091B   90....       MOV       DPTR,#uiLcdCursorState
   \   00091E   E0           MOVX      A,@DPTR
   \   00091F   702D         JNZ       ??UI_UpdateLcd_65
   1734              {
   1735                line[uiLcdCursorLine][uiLcdCursorCol] = LCD_CURSOR_CHAR; //note: the cursor must point to a writeable memory location, i.e. not const
   \   000921   90....       MOV       DPTR,#uiLcdCursorCol
   \   000924   E0           MOVX      A,@DPTR
   \   000925   FA           MOV       R2,A
   \   000926   90....       MOV       DPTR,#uiLcdCursorLine
   \   000929   E0           MOVX      A,@DPTR
   \   00092A   25E0         ADD       A,0xE0 /* A   */
   \   00092C   F8           MOV       R0,A
   \   00092D   E4           CLR       A
   \   00092E   33           RLC       A
   \   00092F   F9           MOV       R1,A
   \   000930   85..82       MOV       DPL,?XSP + 0
   \   000933   85..83       MOV       DPH,?XSP + 1
   \   000936   E582         MOV       A,DPL
   \   000938   28           ADD       A,R0
   \   000939   F582         MOV       DPL,A
   \   00093B   E583         MOV       A,DPH
   \   00093D   39           ADDC      A,R1
   \   00093E   F583         MOV       DPH,A
   \   000940   E0           MOVX      A,@DPTR
   \   000941   2A           ADD       A,R2
   \   000942   F8           MOV       R0,A
   \   000943   A3           INC       DPTR
   \   000944   E0           MOVX      A,@DPTR
   \   000945   3400         ADDC      A,#0x0
   \   000947   8882         MOV       DPL,R0
   \   000949   F583         MOV       DPH,A
   \   00094B   7420         MOV       A,#0x20
   \   00094D   F0           MOVX      @DPTR,A
   1736              }
   1737              uiLcdCursorState ^= 1;
   \                     ??UI_UpdateLcd_65:
   \   00094E   90....       MOV       DPTR,#uiLcdCursorState
   \   000951   E0           MOVX      A,@DPTR
   \   000952   6401         XRL       A,#0x1
   \   000954   F0           MOVX      @DPTR,A
   1738              
   1739              osal_start_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent, LCD_CURSOR_UPDATE_INTERVAL);
   \   000955                ; Setup parameters for call to function osal_start_timerEx
   \   000955   90....       MOV       DPTR,#__Constant_1f4
   \   000958   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00095B   12....       LCALL     ?Subroutine17 & 0xFFFF
   1740            }
   \                     ??CrossCallReturnLabel_34:
   \   00095E   12....       LCALL     ?DEALLOC_XSTACK8
   1741          
   1742          #ifdef HAL_BOARD_CC2538
   1743            for (i = 0; i < 3; i++)
   1744            {
   1745              if (line[i] != LineBuf[i] + LCD_CC2538_PREFIX_COUNT)
   1746              {
   1747                osal_memcpy(LineBuf[i] + LCD_CC2538_PREFIX_COUNT, line[i], LCD_LINE_LENGTH + 1);
   1748              }
   1749              
   1750              line[i] = LineBuf[i];
   1751            }
   1752          #endif
   1753            
   1754          #ifdef LCD_SUPPORTED
   1755            HalLcd_HW_Clear();
   \                     ??UI_UpdateLcd_64:
   \   000961                ; Setup parameters for call to function HalLcd_HW_Clear
   \   000961   12....       LCALL     `??HalLcd_HW_Clear::?relay`; Banked call to: HalLcd_HW_Clear
   1756            HalLcdWriteString( line[0], UI_LCD_LINE_1 );
   \   000964                ; Setup parameters for call to function HalLcdWriteString
   \   000964   7901         MOV       R1,#0x1
   \   000966   85..82       MOV       DPL,?XSP + 0
   \   000969   85..83       MOV       DPH,?XSP + 1
   \   00096C   12....       LCALL     ?Subroutine20 & 0xFFFF
   1757            HalLcdWriteString( line[1], UI_LCD_LINE_2 );
   \                     ??CrossCallReturnLabel_39:
   \   00096F                ; Setup parameters for call to function HalLcdWriteString
   \   00096F   7902         MOV       R1,#0x2
   \   000971   E9           MOV       A,R1
   \   000972   12....       LCALL     ?XSTACK_DISP0_8
   \   000975   12....       LCALL     ?Subroutine20 & 0xFFFF
   1758            HalLcdWriteString( line[2], UI_LCD_LINE_3 );
   \                     ??CrossCallReturnLabel_40:
   \   000978                ; Setup parameters for call to function HalLcdWriteString
   \   000978   7903         MOV       R1,#0x3
   \   00097A   7404         MOV       A,#0x4
   \   00097C   12....       LCALL     ?XSTACK_DISP0_8
   \   00097F   12....       LCALL     ?Subroutine20 & 0xFFFF
   1759          
   1760          #ifdef DEBUG_LCD_REFRESH
   1761            {
   1762              static bool toggle=TRUE;
   1763              HalLcd_HW_WriteChar(3,15,(toggle = !toggle) ? '>' : ' ');
   1764            }
   1765          #endif
   1766          
   1767          #endif
   1768          }
   \                     ??CrossCallReturnLabel_41:
   \   000982   743A         MOV       A,#0x3a
   \   000984   12....       LCALL     ?DEALLOC_XSTACK8
   \   000987   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     `??uiCreateChannelMaskString::?relay`; Banked call to: uiCreateChannelMaskString
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   7C04         MOV       R4,#0x4
   \   000002                REQUIRE ??Subroutine40_0
   \   000002                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   7D00         MOV       R5,#0x0
   \   000002                REQUIRE ??Subroutine41_0
   \   000002                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   7A..         MOV       R2,#(uiInstallCode + 8) & 0xff
   \   000007   7B..         MOV       R3,#((uiInstallCode + 8) >> 8) & 0xff
   \   000009   12....       LCALL     `??uiArrayToString::?relay`; Banked call to: uiArrayToString
   \   00000C   7401         MOV       A,#0x1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   7A..         MOV       R2,#uiInstallCode & 0xff
   \   000007   7B..         MOV       R3,#(uiInstallCode >> 8) & 0xff
   \   000009   12....       LCALL     `??uiArrayToString::?relay`; Banked call to: uiArrayToString
   \   00000C   7401         MOV       A,#0x1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV       DPTR,#uiLcdAutoUpdateEvent
   \   000003   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000006   90....       MOV       DPTR,#uiAppTaskId
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00000E   7404         MOV       A,#0x4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   2410         ADD       A,#0x10
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   38           ADDC      A,R0
   \   00000B   F583         MOV       DPH,A
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000009   7402         MOV       A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV       DPTR,#pUiIdentifyTimeAttribute
   \   000003   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000006                REQUIRE ??Subroutine43_0
   \   000006                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   FB           MOV       R3,A
   \   000003                REQUIRE ??Subroutine44_0
   \   000003                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   FC           MOV       R4,A
   \   000001   FD           MOV       R5,A
   \   000002   12....       LCALL     `??uiUintToString::?relay`; Banked call to: uiUintToString
   \   000005   7405         MOV       A,#0x5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F5..         MOV       ?V0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   3400         ADDC      A,#0x0
   \   000006   F5..         MOV       ?V1,A
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7910         MOV       R1,#0x10
   \   000002   90....       MOV       DPTR,#zgConfigPANID
   \   000005                REQUIRE ??Subroutine46_0
   \   000005                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   AA..         MOV       R2,?V0
   \   000005   FB           MOV       R3,A
   \   000006   E4           CLR       A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000006   7403         MOV       A,#0x3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine47_0
   \   000006                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   EA           MOV       A,R2
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   EB           MOV       A,R3
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B                ; Setup parameters for call to function uiCreateChannelMaskString
   \   00000B                ; Setup parameters for call to function uiCreateChannelMaskString
   \   00000B                ; Setup parameters for call to function uiCreateChannelMaskString
   \   00000B                ; Setup parameters for call to function uiCreateChannelMaskString
   \   00000B   7402         MOV       A,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   F9           MOV       R1,A
   \   000004   90....       MOV       DPTR,#uiAppStatesMain
   \   000007   22           RET
   1769          
   1770          /*********************************************************************
   1771           * @fn          uiProcessPermitJoin
   1772           *
   1773           * @brief       Update the Network-Joining status LED
   1774           *
   1775           * @param       duration - The time left for joining, or 0 if the device is closed for joining
   1776           *
   1777           * @return      none
   1778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1779          static void *uiProcessPermitJoin( void *duration )
   \                     uiProcessPermitJoin:
   1780          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1781            if (*(uint8 *)duration > 0)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   90....       MOV       DPTR,#uiNwkOpenState
   \   00000C   6005         JZ        ??uiProcessPermitJoin_0
   1782            {
   1783              uiNwkOpenState |= NWK_OPEN_FOR_JOINING;
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   D2E0         SETB      0xE0 /* A   */.0
   \   000011   8003         SJMP      ??uiProcessPermitJoin_1
   1784            }
   1785            else
   1786            {
   1787              uiNwkOpenState &= ~NWK_OPEN_FOR_JOINING;
   \                     ??uiProcessPermitJoin_0:
   \   000013   E0           MOVX      A,@DPTR
   \   000014   C2E0         CLR       0xE0 /* A   */.0
   \                     ??uiProcessPermitJoin_1:
   \   000016   F0           MOVX      @DPTR,A
   1788            }
   1789          
   1790            HalLedBlink ( UI_LED_NETWORK_OPEN_STATE, 0, uiNetworkOpenStateLedDutyCycle[uiNwkOpenState], HAL_LED_DEFAULT_FLASH_TIME );
   \   000017                ; Setup parameters for call to function HalLedBlink
   \   000017   7CE8         MOV       R4,#-0x18
   \   000019   7D03         MOV       R5,#0x3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   74..         MOV       A,#uiNetworkOpenStateLedDutyCycle & 0xff
   \   00001F   28           ADD       A,R0
   \   000020   F582         MOV       DPL,A
   \   000022   E4           CLR       A
   \   000023   34..         ADDC      A,#(uiNetworkOpenStateLedDutyCycle >> 8) & 0xff
   \   000025   F583         MOV       DPH,A
   \   000027   E0           MOVX      A,@DPTR
   \   000028   FB           MOV       R3,A
   \   000029   7A00         MOV       R2,#0x0
   \   00002B   7908         MOV       R1,#0x8
   \   00002D   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   1791            
   1792            UI_UpdateLcd();
   \   000030                ; Setup parameters for call to function UI_UpdateLcd
   \   000030   12....       LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
   1793            
   1794            return ( NULL );
   \   000033   7A00         MOV       R2,#0x0
   \   000035   7B00         MOV       R3,#0x0
   \   000037   02....       LJMP      ?Subroutine2 & 0xFFFF
   1795          }
   1796          
   1797          /*********************************************************************
   1798           * @fn          UI_Init
   1799           *
   1800           * @brief       Initialize the user-interface module.
   1801           *              This function must be called by the application during its initializatin.
   1802           *
   1803           * @param       app_task_id_value - the task-id of the application task
   1804           *              lcd_auto_update_event_value - the event mask (single bit) for using as the lcd-auto-update event.
   1805           *              key_auto_repeat_event_value - the event mask (single bit) for using as the key-auto-repeat event. 
   1806           *              ui_IdentifyTimeAttribute_value - a pointer to the identify attribute's value.
   1807           *              app_title_value - a pointer to a string, holding the title of the sample app.
   1808           *              _uiAppUpdateLcd - a pointer to a fuction to update the LCD when displaying the application-
   1809           *                specific screens.
   1810           *              _uiAppStatesMain - a pointer to the application-specific state-table.
   1811           *
   1812           * @return      none
   1813           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1814          void UI_Init(uint8 app_task_id_value, uint16 lcd_auto_update_event_value, uint16 key_auto_repeat_event_value, uint16 * ui_IdentifyTimeAttribute_value, char * app_title_value, uiAppUpdateLcd_t _uiAppUpdateLcd, const uiState_t _uiAppStatesMain[])
   \                     UI_Init:
   1815          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   1816            uiAppTaskId = app_task_id_value;
   \   000006   90....       MOV       DPTR,#uiAppTaskId
   \   000009   F0           MOVX      @DPTR,A
   1817            uiLcdAutoUpdateEvent = lcd_auto_update_event_value;
   \   00000A   90....       MOV       DPTR,#uiLcdAutoUpdateEvent
   \   00000D   EA           MOV       A,R2
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   EB           MOV       A,R3
   \   000011   F0           MOVX      @DPTR,A
   1818            pUiIdentifyTimeAttribute = ui_IdentifyTimeAttribute_value;
   \   000012   7409         MOV       A,#0x9
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00001A   90....       MOV       DPTR,#pUiIdentifyTimeAttribute
   \   00001D   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   1819            uiAppTitleStr = app_title_value;
   \                     ??CrossCallReturnLabel_130:
   \   000020   740B         MOV       A,#0xb
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000028   90....       MOV       DPTR,#uiAppTitleStr
   \   00002B   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   1820            uiAppUpdateLcd = _uiAppUpdateLcd;
   \                     ??CrossCallReturnLabel_131:
   \   00002E   740D         MOV       A,#0xd
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000036   90....       MOV       DPTR,#uiAppUpdateLcd
   \   000039   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   1821            uiAppStatesMain = _uiAppStatesMain;
   \                     ??CrossCallReturnLabel_132:
   \   00003C   740F         MOV       A,#0xf
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000044   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   1822          #ifdef BDB_TL_TARGET
   1823            uiKeyAutoRepeatEvent = key_auto_repeat_event_value;
   1824          #endif
   1825          
   1826            ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &uiProcessPermitJoin);
   \                     ??CrossCallReturnLabel_133:
   \   000047                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000047   7A..         MOV       R2,#`??uiProcessPermitJoin::?relay` & 0xff
   \   000049   7B..         MOV       R3,#(`??uiProcessPermitJoin::?relay` >> 8) & 0xff
   \   00004B   7907         MOV       R1,#0x7
   \   00004D   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1827            
   1828            bdb_RegisterIdentifyTimeChangeCB( uiProcessIdentifyTimeChange );
   \   000050                ; Setup parameters for call to function bdb_RegisterIdentifyTimeChangeCB
   \   000050   7A..         MOV       R2,#`??uiProcessIdentifyTimeChange::?relay` & 0xff
   \   000052   7B..         MOV       R3,#(`??uiProcessIdentifyTimeChange::?relay` >> 8) & 0xff
   \   000054   12....       LCALL     `??bdb_RegisterIdentifyTimeChangeCB::?relay`; Banked call to: bdb_RegisterIdentifyTimeChangeCB
   1829            bdb_RegisterBindNotificationCB( uiProcessBindNotification );
   \   000057                ; Setup parameters for call to function bdb_RegisterBindNotificationCB
   \   000057   7A..         MOV       R2,#`??uiProcessBindNotification::?relay` & 0xff
   \   000059   7B..         MOV       R3,#(`??uiProcessBindNotification::?relay` >> 8) & 0xff
   \   00005B   12....       LCALL     `??bdb_RegisterBindNotificationCB::?relay`; Banked call to: bdb_RegisterBindNotificationCB
   1830            
   1831          #ifdef BDB_TL_TARGET
   1832            bdb_RegisterTouchlinkTargetEnableCB( uiProcessTouchlinkTargetEnable );
   1833          #endif
   1834          
   1835            bdb_StartCommissioning(BDB_COMMISSIONING_REJOIN_EXISTING_NETWORK_ON_STARTUP);
   \   00005E                ; Setup parameters for call to function bdb_StartCommissioning
   \   00005E   7900         MOV       R1,#0x0
   \   000060   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   1836          }
   \   000063   02....       LJMP      ?Subroutine4 & 0xFFFF
   1837          
   1838          /*********************************************************************
   1839           * @fn      uiProcessTouchlinkTargetEnable
   1840           *
   1841           * @brief   Uopdate the UI when the touchlink target functionality is enabled or disabled
   1842           *
   1843           * @param   enable - the current state of the touchlink target (0 - disabled; 1 - enabled)
   1844           *
   1845           * @return  none
   1846           */
   1847          #ifdef BDB_TL_TARGET
   1848          static void uiProcessTouchlinkTargetEnable( uint8 enable )
   1849          {
   1850            if ( enable )
   1851            {
   1852              uiNwkOpenState |= NWK_OPEN_TOUCHLINK_AS_TARGET;
   1853            }
   1854            else
   1855            {
   1856              uiNwkOpenState &= ~NWK_OPEN_TOUCHLINK_AS_TARGET;
   1857            }
   1858          
   1859            HalLedBlink ( UI_LED_NETWORK_OPEN_STATE, 0, uiNetworkOpenStateLedDutyCycle[uiNwkOpenState], HAL_LED_DEFAULT_FLASH_TIME );
   1860          
   1861            UI_UpdateLcd();
   1862          }
   1863          #endif
   1864          
   1865          /*********************************************************************
   1866           * @fn      uiProcessIdentifyTimeChange
   1867           *
   1868           * @brief   Uopdate the UI when the identify time attribute's value has changed
   1869           *
   1870           * @param   endpoint - the endpoints which had its identify time attribute changed
   1871           *
   1872           * @return  none
   1873           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1874          static void uiProcessIdentifyTimeChange( uint8 endpoint )
   \                     uiProcessIdentifyTimeChange:
   1875          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1876            if ( *pUiIdentifyTimeAttribute > 0 )
   \   000004   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000007   600F         JZ        ??uiProcessIdentifyTimeChange_0
   1877            {
   1878              HalLedBlink ( UI_LED_IDENTIFY, 0xFF, UI_LED_IDENTIFY_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000009                ; Setup parameters for call to function HalLedBlink
   \   000009   7CE8         MOV       R4,#-0x18
   \   00000B   7D03         MOV       R5,#0x3
   \   00000D   7B32         MOV       R3,#0x32
   \   00000F   7AFF         MOV       R2,#-0x1
   \   000011   7904         MOV       R1,#0x4
   \   000013   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   000016   8007         SJMP      ??uiProcessIdentifyTimeChange_1
   1879            }
   1880            else
   1881            {
   1882              HalLedSet ( UI_LED_IDENTIFY, HAL_LED_MODE_OFF );
   \                     ??uiProcessIdentifyTimeChange_0:
   \   000018                ; Setup parameters for call to function HalLedSet
   \   000018   7A00         MOV       R2,#0x0
   \   00001A   7904         MOV       R1,#0x4
   \   00001C   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1883            }
   1884          }
   \                     ??uiProcessIdentifyTimeChange_1:
   \   00001F   02....       LJMP      ?Subroutine2 & 0xFFFF
   1885          
   1886          /*********************************************************************
   1887           * @fn      uiProcessBindNotification
   1888           *
   1889           * @brief   Uopdate the UI when a bind is added
   1890           *
   1891           * @param   data - information about the new binding entry
   1892           *
   1893           * @return  none
   1894           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1895          static void uiProcessBindNotification( bdbBindNotificationData_t *data )
   \                     uiProcessBindNotification:
   1896          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1897            //note: 'data' argument contains information about the new binding, which can be useful for the user's application
   1898          
   1899            if (FBMatchesFound < 255)
   \   000004   90....       MOV       DPTR,#FBMatchesFound
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F4           CPL       A
   \   000009   6003         JZ        ??uiProcessBindNotification_0
   1900            {
   1901              FBMatchesFound++;
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   04           INC       A
   \   00000D   F0           MOVX      @DPTR,A
   1902            }
   1903          }
   \                     ??uiProcessBindNotification_0:
   \   00000E   02....       LJMP      ?Subroutine2 & 0xFFFF
   1904          
   1905          /*********************************************************************
   1906           * @fn      UI_DeviceStateUpdated
   1907           *
   1908           * @brief   Uopdate the UI when the device state has changed
   1909           *
   1910           * @param   NwkState - the new network-state of the device
   1911           *
   1912           * @return  none
   1913           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1914          void UI_DeviceStateUpdated(devStates_t NwkState)
   \                     UI_DeviceStateUpdated:
   1915          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   1916            uint8 LedDutyCycle;
   1917          
   1918            uiNwkStateShadow = NwkState;
   \   000006   90....       MOV       DPTR,#uiNwkStateShadow
   \   000009   F0           MOVX      @DPTR,A
   1919          
   1920            switch (NwkState)
   \   00000A   24FA         ADD       A,#-0x6
   \   00000C   600F         JZ        ??UI_DeviceStateUpdated_0
   \   00000E   14           DEC       A
   \   00000F   6008         JZ        ??UI_DeviceStateUpdated_1
   \   000011   24FE         ADD       A,#-0x2
   \   000013   700C         JNZ       ??UI_DeviceStateUpdated_2
   1921            {
   1922              case DEV_ZB_COORD:
   1923                LedDutyCycle = UI_LED_COORDINATOR_DUTY_CYCLE;
   \   000015   7B4B         MOV       R3,#0x4b
   1924                break;
   \   000017   800A         SJMP      ??UI_DeviceStateUpdated_3
   1925              case DEV_ROUTER:
   1926                LedDutyCycle = UI_LED_ROUTER_DUTY_CYCLE;
   \                     ??UI_DeviceStateUpdated_1:
   \   000019   7B5F         MOV       R3,#0x5f
   1927                break;
   \   00001B   8006         SJMP      ??UI_DeviceStateUpdated_3
   1928              case DEV_END_DEVICE:
   1929                LedDutyCycle = UI_LED_END_DEVICE_DUTY_CYCLE;
   \                     ??UI_DeviceStateUpdated_0:
   \   00001D   7B64         MOV       R3,#0x64
   1930                break;
   \   00001F   8002         SJMP      ??UI_DeviceStateUpdated_3
   1931              default:
   1932                LedDutyCycle = 0;
   \                     ??UI_DeviceStateUpdated_2:
   \   000021   7B00         MOV       R3,#0x0
   1933                break;
   1934            }
   1935            
   1936            HalLedBlink ( UI_LED_DEVICE_STATE, 0, LedDutyCycle, UI_LED_DEVICE_STATE_FLASH_TIME );
   \                     ??UI_DeviceStateUpdated_3:
   \   000023                ; Setup parameters for call to function HalLedBlink
   \   000023   7CA0         MOV       R4,#-0x60
   \   000025   7D0F         MOV       R5,#0xf
   \   000027   7A00         MOV       R2,#0x0
   \   000029   7902         MOV       R1,#0x2
   \   00002B   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   1937          
   1938            UI_UpdateLcd();
   \   00002E                ; Setup parameters for call to function UI_UpdateLcd
   \   00002E   12....       LCALL     `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
   1939          }
   \   000031   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiLcdCursorLine>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiSelectedBdbComissioningMod`:
   \   000000   0E           DB 14

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiAddInstallCodeLastStatus>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiCommissioningStateStr>`:
   \   000000   ....         DW `?<Constant "--">`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiInstallCode>`:
   \   000000   83           DB 131
   \   000001   FE           DB 254
   \   000002   D3           DB 211
   \   000003   40           DB 64
   \   000004   7A           DB 122
   \   000005   93           DB 147
   \   000006   97           DB 151
   \   000007   23           DB 35
   \   000008   A5           DB 165
   \   000009   C6           DB 198
   \   00000A   39           DB 57
   \   00000B   B2           DB 178
   \   00000C   69           DB 105
   \   00000D   16           DB 22
   \   00000E   D5           DB 213
   \   00000F   05           DB 5
   \   000010   C3           DB 195
   \   000011   B5           DB 181

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiStates>`:
   \   000000   ....         DW gui_states_main

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiNetworkOpenStateLedDutyCyc`:
   \   000000   00           DB 0
   \   000001   19           DB 25
   \   000002   4B           DB 75
   \   000003   64           DB 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "--">`:
   \   000000   2D2D00       DB "--"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EXST">`:
   \   000000   45585354     DB "EXST"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NF">`:
   \   000000   4E4600       DB "NF"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FORM">`:
   \   000000   464F524D     DB "FORM"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NS">`:
   \   000000   4E5300       DB "NS"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "JOIN">`:
   \   000000   4A4F494E     DB "JOIN"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FB">`:
   \   000000   464200       DB "FB"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IN">`:
   \   000000   494E00       DB "IN"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PL">`:
   \   000000   504C00       DB "PL"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<     BACK     >">`:
   \   000000   3C202020     DB "<     BACK     >"
   \            20204241
   \            434B2020
   \            2020203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ENABLED">`:
   \   000000   454E4142     DB "ENABLED"
   \            4C454400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DISABLED">`:
   \   000000   44495341     DB "DISABLED"
   \            424C4544
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<FINDNG+BINDNG >">`:
   \   000000   3C46494E     DB "<FINDNG+BINDNG >"
   \            444E472B
   \            42494E44
   \            4E47203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<NWK FORMATION >">`:
   \   000000   3C4E574B     DB "<NWK FORMATION >"
   \            20464F52
   \            4D415449
   \            4F4E203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "< NWK STEERING >">`:
   \   000000   3C204E57     DB "< NWK STEERING >"
   \            4B205354
   \            45455249
   \            4E47203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<  CONFIGURE   >">`:
   \   000000   3C202043     DB "<  CONFIGURE   >"
   \            4F4E4649
   \            47555245
   \            2020203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Resetting,">`:
   \   000000   52657365     DB "Resetting,"
   \            7474696E
   \            672C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Please wait...">`:
   \   000000   506C6561     DB "Please wait..."
   \            73652077
   \            6169742E
   \            2E2E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "< RESET TO FN  >">`:
   \   000000   3C205245     DB "< RESET TO FN  >"
   \            53455420
   \            544F2046
   \            4E20203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "hold OK for help">`:
   \   000000   686F6C64     DB "hold OK for help"
   \            204F4B20
   \            666F7220
   \            68656C70
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<     HELP     >">`:
   \   000000   3C202020     DB "<     HELP     >"
   \            20204845
   \            4C502020
   \            2020203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\033 \\032 to move     ">`:
   \   000000   1B201A20     DB "\033 \032 to move     "
   \            746F206D
   \            6F766520
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\030 \\031 change value">`:
   \   000000   18201920     DB "\030 \031 change value"
   \            6368616E
   \            67652076
   \            616C7565
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK to execute   ">`:
   \   000000   4F4B2074     DB "OK to execute   "
   \            6F206578
   \            65637574
   \            65202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Please wait...  ">`:
   \   000000   506C6561     DB "Please wait...  "
   \            73652077
   \            6169742E
   \            2E2E2020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "xx              ">`:
   \   000000   78782020     DB "xx              "
   \            20202020
   \            20202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NotOnNwk">`:
   \   000000   4E6F744F     DB "NotOnNwk"
   \            6E4E776B
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Open">`:
   \   000000   4F70656E     DB "Open"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CLOSED">`:
   \   000000   434C4F53     DB "CLOSED"
   \            454400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Id000 Srch000/00">`:
   \   000000   49643030     DB "Id000 Srch000/00"
   \            30205372
   \            63683030
   \            302F3030
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<  COMMISSION  >">`:
   \   000000   3C202043     DB "<  COMMISSION  >"
   \            4F4D4D49
   \            5353494F
   \            4E20203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<ADD INSTL CODE>">`:
   \   000000   3C414444     DB "<ADD INSTL CODE>"
   \            20494E53
   \            544C2043
   \            4F44453E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<SET INSTL CODE>">`:
   \   000000   3C534554     DB "<SET INSTL CODE>"
   \            20494E53
   \            544C2043
   \            4F44453E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Last status:">`:
   \   000000   4C617374     DB "Last status:"
   \            20737461
   \            7475733A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "---">`:
   \   000000   2D2D2D00     DB "---"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SUCCESS">`:
   \   000000   53554343     DB "SUCCESS"
   \            45535300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR (0x  )    ">`:
   \   000000   4552524F     DB "ERROR (0x  )    "
   \            52202830
   \            78202029
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<APLY INST CODE>">`:
   \   000000   3C41504C     DB "<APLY INST CODE>"
   \            5920494E
   \            53542043
   \            4F44453E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "       INST CODE">`:
   \   000000   20202020     DB "       INST CODE"
   \            20202049
   \            4E535420
   \            434F4445
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<   APP MENU   >">`:
   \   000000   3C202020     DB "<   APP MENU   >"
   \            41505020
   \            4D454E55
   \            2020203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "1234567890123456">`:
   \   000000   31323334     DB "1234567890123456"
   \            35363738
   \            39303132
   \            33343536
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<PRI CHANL MASK>">`:
   \   000000   3C505249     DB "<PRI CHANL MASK>"
   \            20434841
   \            4E4C204D
   \            41534B3E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<SEC CHANL MASK>">`:
   \   000000   3C534543     DB "<SEC CHANL MASK>"
   \            20434841
   \            4E4C204D
   \            41534B3E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " PRI CHANL MASK ">`:
   \   000000   20505249     DB " PRI CHANL MASK "
   \            20434841
   \            4E4C204D
   \            41534B20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " SEC CHANL MASK ">`:
   \   000000   20534543     DB " SEC CHANL MASK "
   \            20434841
   \            4E4C204D
   \            41534B20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "    0xFFFF (any)">`:
   \   000000   20202020     DB "    0xFFFF (any)"
   \            30784646
   \            46462028
   \            616E7929
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "    0x          ">`:
   \   000000   20202020     DB "    0x          "
   \            30782020
   \            20202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<    PAN ID    >">`:
   \   000000   3C202020     DB "<    PAN ID    >"
   \            2050414E
   \            20494420
   \            2020203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "     PAN ID     ">`:
   \   000000   20202020     DB "     PAN ID     "
   \            2050414E
   \            20494420
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "nxxxx cxx axxxx ">`:
   \   000000   6E787878     DB "nxxxx cxx axxxx "
   \            78206378
   \            78206178
   \            78787820
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "          <INFO>">`:
   \   000000   20202020     DB "          <INFO>"
   \            20202020
   \            20203C49
   \            4E464F3E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZC">`:
   \   000000   5A4300       DB "ZC"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZR DIST">`:
   \   000000   5A522044     DB "ZR DIST"
   \            49535400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZR CENT">`:
   \   000000   5A522043     DB "ZR CENT"
   \            454E5400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZED p">`:
   \   000000   5A454420     DB "ZED p"
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZED (   )">`:
   \   000000   5A454420     DB "ZED (   )"
   \            28202020
   \            2900    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fa:
   \   000000   FA000000     DD 250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500
   1940          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   UI_ActionBackFromAppMenu
      0      9   UI_DeviceStateUpdated
        0      9   -> HalLedBlink
        0      9   -> UI_UpdateLcd
      0     17   UI_Init
        0      9   -> ZDO_RegisterForZdoCB
        0      9   -> bdb_RegisterBindNotificationCB
        0      9   -> bdb_RegisterIdentifyTimeChangeCB
        0      9   -> bdb_StartCommissioning
      0      9   UI_MainStateMachine
        0      9   -> UI_UpdateLcd
      2      0   UI_UpdateComissioningStatus
        2      0   -> UI_UpdateLcd
      1     90   UI_UpdateLcd
        0     76   -> APSME_IsDistributedSecurity
        0     76   -> HalLcdWriteString
        0     76   -> HalLcd_HW_Clear
        0     76   -> NLME_GetRemainingPermitJoiningDuration
        0     76   -> bdb_GetFBInitiatorStatus
        0     79   -> osal_memcpy
        0     80   -> osal_start_timerEx
        0     76   -> osal_stop_timerEx
        0     77   -> uiArrayToString
        0     78   -> uiCreateChannelMaskString
        0     81   -> uiUintToString
      2      0   uiActionAppSecificMenu
      0     10   uiActionConfigureEnables
      0     10   uiActionMenuJump
      0     12   uiActionProcessConfigureChannels
      0     16   uiActionProcessConfigurePanId
        0     12   -> osal_nv_item_len
        0     16   -> osal_nv_write
      1     16   uiActionProcessPrepareInstallCode
        0     16   -> bdb_GenerateInstallCodeCRC
      2      0   uiActionResetToFactoryNew
        2      0   -> bdb_resetLocalAction
      0     10   uiActionSetInstallCode
        0     10   -> bdb_GenerateInstallCodeCRC
        0     10   -> bdb_setActiveCentralizedLinkKey
      2      0   uiActionStartComissioning
        2      0   -> UI_UpdateLcd
        2      0   -> bdb_StartCommissioning
      1     95   uiArrayToString
      1     99   uiCreateChannelMaskString
      2      0   uiProcessBindNotification
      2      0   uiProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      0   -> HalLedSet
      2      0   uiProcessPermitJoin
        2      0   -> HalLedBlink
        2      0   -> UI_UpdateLcd
      1    106   uiUintToString


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "          <INFO>">
      17  ?<Constant "       INST CODE">
      17  ?<Constant "     PAN ID     ">
      17  ?<Constant "    0x          ">
      17  ?<Constant "    0xFFFF (any)">
      17  ?<Constant " PRI CHANL MASK ">
      17  ?<Constant " SEC CHANL MASK ">
       3  ?<Constant "--">
       4  ?<Constant "---">
      17  ?<Constant "1234567890123456">
      17  ?<Constant "<     BACK     >">
      17  ?<Constant "<     HELP     >">
      17  ?<Constant "<    PAN ID    >">
      17  ?<Constant "<   APP MENU   >">
      17  ?<Constant "<  COMMISSION  >">
      17  ?<Constant "<  CONFIGURE   >">
      17  ?<Constant "< NWK STEERING >">
      17  ?<Constant "< RESET TO FN  >">
      17  ?<Constant "<ADD INSTL CODE>">
      17  ?<Constant "<APLY INST CODE>">
      17  ?<Constant "<FINDNG+BINDNG >">
      17  ?<Constant "<NWK FORMATION >">
      17  ?<Constant "<PRI CHANL MASK>">
      17  ?<Constant "<SEC CHANL MASK>">
      17  ?<Constant "<SET INSTL CODE>">
       7  ?<Constant "CLOSED">
       9  ?<Constant "DISABLED">
       8  ?<Constant "ENABLED">
      17  ?<Constant "ERROR (0x  )    ">
       5  ?<Constant "EXST">
       3  ?<Constant "FB">
       5  ?<Constant "FORM">
       3  ?<Constant "IN">
      17  ?<Constant "Id000 Srch000/00">
       5  ?<Constant "JOIN">
      13  ?<Constant "Last status:">
       3  ?<Constant "NF">
       3  ?<Constant "NS">
       9  ?<Constant "NotOnNwk">
      17  ?<Constant "OK to execute   ">
       5  ?<Constant "Open">
       3  ?<Constant "PL">
      17  ?<Constant "Please wait...  ">
      15  ?<Constant "Please wait...">
      11  ?<Constant "Resetting,">
       8  ?<Constant "SUCCESS">
       3  ?<Constant "ZC">
      10  ?<Constant "ZED (   )">
       6  ?<Constant "ZED p">
       8  ?<Constant "ZR CENT">
       8  ?<Constant "ZR DIST">
      17  ?<Constant "\030 \031 change value">
      17  ?<Constant "\033 \032 to move     ">
      17  ?<Constant "hold OK for help">
      17  ?<Constant "nxxxx cxx axxxx ">
      17  ?<Constant "xx              ">
       1  ?<Initializer for uiAddInstallCodeLastStatus>
       2  ?<Initializer for uiCommissioningStateStr>
      18  ?<Initializer for uiInstallCode>
       1  ?<Initializer for uiLcdCursorLine>
       4  ?<Initializer for uiNetworkOpenStateLedDutyCyc
       1  ?<Initializer for uiSelectedBdbComissioningMod
       2  ?<Initializer for uiStates>
       8  ??Subroutine39_0
       2  ??Subroutine40_0
       6  ??Subroutine41_0
       6  ??Subroutine42_0
       7  ??Subroutine43_0
       8  ??Subroutine44_0
      11  ??Subroutine45_0
       7  ??Subroutine46_0
       6  ??Subroutine47_0
       5  ?Subroutine0
       5  ?Subroutine1
       5  ?Subroutine10
       3  ?Subroutine11
       5  ?Subroutine12
       6  ?Subroutine13
      12  ?Subroutine14
       4  ?Subroutine15
       8  ?Subroutine16
      17  ?Subroutine17
      15  ?Subroutine18
      15  ?Subroutine19
       7  ?Subroutine2
       7  ?Subroutine20
       4  ?Subroutine21
      12  ?Subroutine22
       3  ?Subroutine23
       4  ?Subroutine24
       8  ?Subroutine25
       5  ?Subroutine26
      16  ?Subroutine27
       1  ?Subroutine28
      13  ?Subroutine29
       5  ?Subroutine3
       2  ?Subroutine30
       6  ?Subroutine31
      16  ?Subroutine32
       8  ?Subroutine33
       6  ?Subroutine34
       9  ?Subroutine35
       5  ?Subroutine36
       3  ?Subroutine37
       6  ?Subroutine38
       5  ?Subroutine4
      10  ?Subroutine5
      14  ?Subroutine6
       8  ?Subroutine7
       6  ?Subroutine8
       9  ?Subroutine9
       1  CurrentModifiedFieldIsBigEndian
       1  CurrentModifiedFieldLen
       1  FBMatchesFound
       1  PrevKeys
      26  UI_ActionBackFromAppMenu
      52  UI_DeviceStateUpdated
     102  UI_Init
     227  UI_MainStateMachine
     186  UI_UpdateComissioningStatus
    2442  UI_UpdateLcd
       4  __Constant_1f4
       4  __Constant_fa
     132  gui_states_main
       1  index
       2  pCurrentModifiedField
       2  pUiIdentifyTimeAttribute
      30  uiActionAppSecificMenu
      51  uiActionConfigureEnables
     118  uiActionMenuJump
     173  uiActionProcessConfigureChannels
     262  uiActionProcessConfigurePanId
     371  uiActionProcessPrepareInstallCode
      16  uiActionResetToFactoryNew
      24  uiActionSetInstallCode
      74  uiActionStartComissioning
       1  uiAddInstallCodeLastStatus
       2  uiAppStatesMain
       1  uiAppTaskId
       2  uiAppTitleStr
       2  uiAppUpdateLcd
     177  uiArrayToString
       1  uiComissioningIsActive
       1  uiCommissioningIsInitializing
       2  uiCommissioningNetworkConnrctionStr
       2  uiCommissioningStateStr
     138  uiCreateChannelMaskString
       2  uiCurrentState
      18  uiInstallCode
       2  uiLcdAutoUpdateEvent
       1  uiLcdCursorCol
       1  uiLcdCursorLine
       1  uiLcdCursorState
       4  uiNetworkOpenStateLedDutyCycle
       1  uiNwkOpenState
       1  uiNwkStateShadow
      17  uiProcessBindNotification
      34  uiProcessIdentifyTimeChange
      58  uiProcessPermitJoin
       1  uiResetInitiated
       1  uiSelectedBdbComissioningModes
       2  uiStates
     192  uiUintToString
     126  -- Other

 
 5 129 bytes in segment BANKED_CODE
   126 bytes in segment BANK_RELAYS
    29 bytes in segment XDATA_I
    29 bytes in segment XDATA_ID
   841 bytes in segment XDATA_ROM_C
    29 bytes in segment XDATA_Z
 
   155 bytes of CODE     memory
   833 bytes of CONST    memory (+ 8 bytes shared)
 5 129 bytes of HUGECODE memory
    58 bytes of XDATA    memory

Errors: none
Warnings: none
