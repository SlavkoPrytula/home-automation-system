///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              19/Apr/2021  17:31:14
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Components\stack\zdo\ZDApp.c
//    Command line       =  
//        -f C:\users\slavko\Temp\EW2950.tmp ("C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Components\stack\zdo\ZDApp.c" -D BDB_REPORTING -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D
//        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
//        -D ZCL_SCENES -D ZCL_GROUPS -D ZCL_LEVEL_CTRL -lC "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\ZDApp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V3
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??AddrMgrWriteNVRequest::?relay`
        FUNCTION `??AddrMgrWriteNVRequest::?relay`,0203H
        PUBLIC `??ZDAppCheckForHoldKey::?relay`
        FUNCTION `??ZDAppCheckForHoldKey::?relay`,0203H
        PUBLIC `??ZDAppDetermineDeviceType::?relay`
        FUNCTION `??ZDAppDetermineDeviceType::?relay`,0203H
        PUBLIC `??ZDApp_AnnounceNewAddress::?relay`
        FUNCTION `??ZDApp_AnnounceNewAddress::?relay`,0203H
        PUBLIC `??ZDApp_ChangeMatchDescRespPermission::?relay`
        FUNCTION `??ZDApp_ChangeMatchDescRespPermission::?relay`,0203H
        PUBLIC `??ZDApp_ChangeState::?relay`
        FUNCTION `??ZDApp_ChangeState::?relay`,0203H
        PUBLIC `??ZDApp_CoordStartPANIDConflictCB::?relay`
        FUNCTION `??ZDApp_CoordStartPANIDConflictCB::?relay`,0203H
        PUBLIC `??ZDApp_DeviceAuthEvt::?relay`
        FUNCTION `??ZDApp_DeviceAuthEvt::?relay`,0203H
        PUBLIC `??ZDApp_DeviceConfigured::?relay`
        FUNCTION `??ZDApp_DeviceConfigured::?relay`,0203H
        PUBLIC `??ZDApp_ForceConcentratorChange::?relay`
        FUNCTION `??ZDApp_ForceConcentratorChange::?relay`,0203H
        PUBLIC `??ZDApp_InMsgCB::?relay`
        FUNCTION `??ZDApp_InMsgCB::?relay`,0203H
        PUBLIC `??ZDApp_Init::?relay`
        FUNCTION `??ZDApp_Init::?relay`,0203H
        PUBLIC `??ZDApp_InitUserDesc::?relay`
        FUNCTION `??ZDApp_InitUserDesc::?relay`,0203H
        PUBLIC `??ZDApp_InitZdoCBFunc::?relay`
        FUNCTION `??ZDApp_InitZdoCBFunc::?relay`,0203H
        PUBLIC `??ZDApp_JoinReq::?relay`
        FUNCTION `??ZDApp_JoinReq::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlBypass::?relay`
        FUNCTION `??ZDApp_LeaveCtrlBypass::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlInit::?relay`
        FUNCTION `??ZDApp_LeaveCtrlInit::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlReset::?relay`
        FUNCTION `??ZDApp_LeaveCtrlReset::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlSet::?relay`
        FUNCTION `??ZDApp_LeaveCtrlSet::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlStartup::?relay`
        FUNCTION `??ZDApp_LeaveCtrlStartup::?relay`,0203H
        PUBLIC `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,0203H
        PUBLIC `??ZDApp_LeaveUpdate::?relay`
        FUNCTION `??ZDApp_LeaveUpdate::?relay`,0203H
        PUBLIC `??ZDApp_NVUpdate::?relay`
        FUNCTION `??ZDApp_NVUpdate::?relay`,0203H
        PUBLIC `??ZDApp_NetworkDiscoveryReq::?relay`
        FUNCTION `??ZDApp_NetworkDiscoveryReq::?relay`,0203H
        PUBLIC `??ZDApp_NetworkInit::?relay`
        FUNCTION `??ZDApp_NetworkInit::?relay`,0203H
        PUBLIC `??ZDApp_NetworkStartEvt::?relay`
        FUNCTION `??ZDApp_NetworkStartEvt::?relay`,0203H
        PUBLIC `??ZDApp_NodeProfileSync::?relay`
        FUNCTION `??ZDApp_NodeProfileSync::?relay`,0203H
        PUBLIC `??ZDApp_NwkDescListProcessing::?relay`
        FUNCTION `??ZDApp_NwkDescListProcessing::?relay`,0203H
        PUBLIC `??ZDApp_NwkStateUpdateCB::?relay`
        FUNCTION `??ZDApp_NwkStateUpdateCB::?relay`,0203H
        PUBLIC `??ZDApp_ProcessMsgCBs::?relay`
        FUNCTION `??ZDApp_ProcessMsgCBs::?relay`,0203H
        PUBLIC `??ZDApp_ProcessNetworkJoin::?relay`
        FUNCTION `??ZDApp_ProcessNetworkJoin::?relay`,0203H
        PUBLIC `??ZDApp_ProcessOSALMsg::?relay`
        FUNCTION `??ZDApp_ProcessOSALMsg::?relay`,0203H
        PUBLIC `??ZDApp_ProcessSecEvent::?relay`
        FUNCTION `??ZDApp_ProcessSecEvent::?relay`,0203H
        PUBLIC `??ZDApp_ProcessSecMsg::?relay`
        FUNCTION `??ZDApp_ProcessSecMsg::?relay`,0203H
        PUBLIC `??ZDApp_ReadNetworkRestoreState::?relay`
        FUNCTION `??ZDApp_ReadNetworkRestoreState::?relay`,0203H
        PUBLIC `??ZDApp_RegisterCBs::?relay`
        FUNCTION `??ZDApp_RegisterCBs::?relay`,0203H
        PUBLIC `??ZDApp_ResetNwkKey::?relay`
        FUNCTION `??ZDApp_ResetNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_ResetTimerCancel::?relay`
        FUNCTION `??ZDApp_ResetTimerCancel::?relay`,0203H
        PUBLIC `??ZDApp_ResetTimerStart::?relay`
        FUNCTION `??ZDApp_ResetTimerStart::?relay`,0203H
        PUBLIC `??ZDApp_RestoreNetworkState::?relay`
        FUNCTION `??ZDApp_RestoreNetworkState::?relay`,0203H
        PUBLIC `??ZDApp_RestoreNwkKey::?relay`
        FUNCTION `??ZDApp_RestoreNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_RestoreNwkSecMaterial::?relay`
        FUNCTION `??ZDApp_RestoreNwkSecMaterial::?relay`,0203H
        PUBLIC `??ZDApp_SaveNetworkStateEvt::?relay`
        FUNCTION `??ZDApp_SaveNetworkStateEvt::?relay`,0203H
        PUBLIC `??ZDApp_SaveNwkKey::?relay`
        FUNCTION `??ZDApp_SaveNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_SecInit::?relay`
        FUNCTION `??ZDApp_SecInit::?relay`,0203H
        PUBLIC `??ZDApp_SendEventMsg::?relay`
        FUNCTION `??ZDApp_SendEventMsg::?relay`,0203H
        PUBLIC `??ZDApp_SendMsg::?relay`
        FUNCTION `??ZDApp_SendMsg::?relay`,0203H
        PUBLIC `??ZDApp_SendParentAnnce::?relay`
        FUNCTION `??ZDApp_SendParentAnnce::?relay`,0203H
        PUBLIC `??ZDApp_SetParentAnnceTimer::?relay`
        FUNCTION `??ZDApp_SetParentAnnceTimer::?relay`,0203H
        PUBLIC `??ZDApp_SetRejoinBackoffDuration::?relay`
        FUNCTION `??ZDApp_SetRejoinBackoffDuration::?relay`,0203H
        PUBLIC `??ZDApp_SetRejoinScanDuration::?relay`
        FUNCTION `??ZDApp_SetRejoinScanDuration::?relay`,0203H
        PUBLIC `??ZDApp_StartJoiningCycle::?relay`
        FUNCTION `??ZDApp_StartJoiningCycle::?relay`,0203H
        PUBLIC `??ZDApp_StopJoiningCycle::?relay`
        FUNCTION `??ZDApp_StopJoiningCycle::?relay`,0203H
        PUBLIC `??ZDApp_StoreNwkSecMaterial::?relay`
        FUNCTION `??ZDApp_StoreNwkSecMaterial::?relay`,0203H
        PUBLIC `??ZDApp_event_loop::?relay`
        FUNCTION `??ZDApp_event_loop::?relay`,0203H
        PUBLIC `??ZDOInitDeviceEx::?relay`
        FUNCTION `??ZDOInitDeviceEx::?relay`,0203H
        PUBLIC `??ZDO_AddrChangeIndicationCB::?relay`
        FUNCTION `??ZDO_AddrChangeIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_ConcentratorIndicationCB::?relay`
        FUNCTION `??ZDO_ConcentratorIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_DeregisterForZdoCB::?relay`
        FUNCTION `??ZDO_DeregisterForZdoCB::?relay`,0203H
        PUBLIC `??ZDO_JoinConfirmCB::?relay`
        FUNCTION `??ZDO_JoinConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_JoinIndicationCB::?relay`
        FUNCTION `??ZDO_JoinIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_LeaveCnf::?relay`
        FUNCTION `??ZDO_LeaveCnf::?relay`,0203H
        PUBLIC `??ZDO_LeaveInd::?relay`
        FUNCTION `??ZDO_LeaveInd::?relay`,0203H
        PUBLIC `??ZDO_ManytoOneFailureIndicationCB::?relay`
        FUNCTION `??ZDO_ManytoOneFailureIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkDiscoveryConfirmCB::?relay`
        FUNCTION `??ZDO_NetworkDiscoveryConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkFormationConfirmCB::?relay`
        FUNCTION `??ZDO_NetworkFormationConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkStatusCB::?relay`
        FUNCTION `??ZDO_NetworkStatusCB::?relay`,0203H
        PUBLIC `??ZDO_PermitJoinCB::?relay`
        FUNCTION `??ZDO_PermitJoinCB::?relay`,0203H
        PUBLIC `??ZDO_PollConfirmCB::?relay`
        FUNCTION `??ZDO_PollConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_RegisterForZdoCB::?relay`
        FUNCTION `??ZDO_RegisterForZdoCB::?relay`,0203H
        PUBLIC `??ZDO_SrcRtgIndCB::?relay`
        FUNCTION `??ZDO_SrcRtgIndCB::?relay`,0203H
        PUBLIC `??ZDO_StartRouterConfirmCB::?relay`
        FUNCTION `??ZDO_StartRouterConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_SyncIndicationCB::?relay`
        FUNCTION `??ZDO_SyncIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_UpdateDeviceIndication::?relay`
        FUNCTION `??ZDO_UpdateDeviceIndication::?relay`,0203H
        PUBLIC `??ZDO_beaconNotifyIndCB::?relay`
        FUNCTION `??ZDO_beaconNotifyIndCB::?relay`,0203H
        PUBLIC AddrMgrWriteNVRequest
        FUNCTION AddrMgrWriteNVRequest,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC FrameCounterUpdated
        PUBLIC MatchRsps
        PUBLIC ZDAppCheckForHoldKey
        FUNCTION ZDAppCheckForHoldKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppDetermineDeviceType
        FUNCTION ZDAppDetermineDeviceType,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppNwkAddr
        PUBLIC ZDAppTaskID
        PUBLIC ZDApp_AnnounceNewAddress
        FUNCTION ZDApp_AnnounceNewAddress,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDApp_AutoFindMode_epDesc
        PUBLIC ZDApp_ChangeMatchDescRespPermission
        FUNCTION ZDApp_ChangeMatchDescRespPermission,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_ChangeState
        FUNCTION ZDApp_ChangeState,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_CoordStartPANIDConflictCB
        FUNCTION ZDApp_CoordStartPANIDConflictCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_DeviceAuthEvt
        FUNCTION ZDApp_DeviceAuthEvt,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_DeviceConfigured
        FUNCTION ZDApp_DeviceConfigured,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_ForceConcentratorChange
        FUNCTION ZDApp_ForceConcentratorChange,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_Init
        FUNCTION ZDApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_InitUserDesc
        FUNCTION ZDApp_InitUserDesc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_InitZdoCBFunc
        FUNCTION ZDApp_InitZdoCBFunc,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_JoinReq
        FUNCTION ZDApp_JoinReq,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_LeaveCtrl
        PUBLIC ZDApp_LeaveCtrlBypass
        FUNCTION ZDApp_LeaveCtrlBypass,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveCtrlInit
        FUNCTION ZDApp_LeaveCtrlInit,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlReset
        FUNCTION ZDApp_LeaveCtrlReset,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlSet
        FUNCTION ZDApp_LeaveCtrlSet,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlStartup
        FUNCTION ZDApp_LeaveCtrlStartup,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDApp_LeaveUpdate
        FUNCTION ZDApp_LeaveUpdate,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NetworkDiscoveryReq
        FUNCTION ZDApp_NetworkDiscoveryReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_NetworkStartEvt
        FUNCTION ZDApp_NetworkStartEvt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NewDeviceList
        PUBLIC ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_NwkDescListProcessing
        FUNCTION ZDApp_NwkDescListProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessMsgCBs
        FUNCTION ZDApp_ProcessMsgCBs,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_ProcessNetworkJoin
        FUNCTION ZDApp_ProcessNetworkJoin,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDApp_ProcessOSALMsg
        FUNCTION ZDApp_ProcessOSALMsg,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDApp_ProcessSecEvent
        FUNCTION ZDApp_ProcessSecEvent,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_ProcessSecMsg
        FUNCTION ZDApp_ProcessSecMsg,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RegisterCBs
        FUNCTION ZDApp_RegisterCBs,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetNwkKey
        FUNCTION ZDApp_ResetNwkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_ResetTimerCancel
        FUNCTION ZDApp_ResetTimerCancel,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_RestoreNetworkState
        FUNCTION ZDApp_RestoreNetworkState,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ZDApp_RestoreNwkSecMaterial
        FUNCTION ZDApp_RestoreNwkSecMaterial,0a1203H
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_SaveNetworkStateEvt
        FUNCTION ZDApp_SaveNetworkStateEvt,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_SaveNwkKey
        FUNCTION ZDApp_SaveNwkKey,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ZDApp_SavedPollRate
        PUBLIC ZDApp_SecInit
        FUNCTION ZDApp_SecInit,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDApp_SendEventMsg
        FUNCTION ZDApp_SendEventMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_SendMsg
        FUNCTION ZDApp_SendMsg,0a1203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDApp_SendParentAnnce
        FUNCTION ZDApp_SendParentAnnce,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDApp_SetParentAnnceTimer
        FUNCTION ZDApp_SetParentAnnceTimer,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_SetRejoinBackoffDuration
        FUNCTION ZDApp_SetRejoinBackoffDuration,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_SetRejoinScanDuration
        FUNCTION ZDApp_SetRejoinScanDuration,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_StartJoiningCycle
        FUNCTION ZDApp_StartJoiningCycle,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopJoiningCycle
        FUNCTION ZDApp_StopJoiningCycle,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StoreNwkSecMaterial
        FUNCTION ZDApp_StoreNwkSecMaterial,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_epDesc
        PUBLIC ZDApp_event_loop
        FUNCTION ZDApp_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDOInitDeviceEx
        FUNCTION ZDOInitDeviceEx,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDO_AddrChangeIndicationCB
        FUNCTION ZDO_AddrChangeIndicationCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_ConcentratorIndicationCB
        FUNCTION ZDO_ConcentratorIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_DeregisterForZdoCB
        FUNCTION ZDO_DeregisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_JoinConfirmCB
        FUNCTION ZDO_JoinConfirmCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDO_JoinIndicationCB
        FUNCTION ZDO_JoinIndicationCB,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDO_LeaveCnf
        FUNCTION ZDO_LeaveCnf,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDO_LeaveInd
        FUNCTION ZDO_LeaveInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ManytoOneFailureIndicationCB
        FUNCTION ZDO_ManytoOneFailureIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_NetworkDiscoveryConfirmCB
        FUNCTION ZDO_NetworkDiscoveryConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 3, STACK
        PUBLIC ZDO_NetworkFormationConfirmCB
        FUNCTION ZDO_NetworkFormationConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDO_NetworkStatusCB
        FUNCTION ZDO_NetworkStatusCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_PermitJoinCB
        FUNCTION ZDO_PermitJoinCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC ZDO_PollConfirmCB
        FUNCTION ZDO_PollConfirmCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SrcRtgIndCB
        FUNCTION ZDO_SrcRtgIndCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_StartRouterConfirmCB
        FUNCTION ZDO_StartRouterConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_SyncIndicationCB
        FUNCTION ZDO_SyncIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_UpdateDeviceIndication
        FUNCTION ZDO_UpdateDeviceIndication,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UseExtendedPANID
        PUBLIC ZDO_beaconNotifyIndCB
        FUNCTION ZDO_beaconNotifyIndCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_258
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_4e2
        PUBWEAK __Constant_64
        PUBLIC _tmpRejoinState
        PUBLIC continueJoining
        PUBLIC devStartMode
        PUBLIC devState
        PUBLIC nwkStatus
        PUBLIC prevDevState
        PUBLIC retryCnt
        PUBLIC runtimeChannel
        PUBLIC zdappMgmtNwkDiscReqInProgress
        PUBLIC zdappMgmtNwkDiscRspAddr
        PUBLIC zdappMgmtNwkDiscRspTransSeq
        PUBLIC zdappMgmtNwkDiscStartIndex
        PUBLIC zdappMgmtSavedNwkState
        PUBLIC zdoCBFunc
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_HoldDataRequests SYMBOL "APSME_HoldDataRequests"
`??APSME_HoldDataRequests::?relay` SYMBOL "?relay", APSME_HoldDataRequests
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
AssocMakeListOfRfdChild SYMBOL "AssocMakeListOfRfdChild"
`??AssocMakeListOfRfdChild::?relay` SYMBOL "?relay", AssocMakeListOfRfdChild
HalKeyRead          SYMBOL "HalKeyRead"
`??HalKeyRead::?relay` SYMBOL "?relay", HalKeyRead
NLME_GetCoordExtAddr SYMBOL "NLME_GetCoordExtAddr"
`??NLME_GetCoordExtAddr::?relay` SYMBOL "?relay", NLME_GetCoordExtAddr
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
`??NLME_GetCoordShortAddr::?relay` SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetEnergyThreshold SYMBOL "NLME_GetEnergyThreshold"
`??NLME_GetEnergyThreshold::?relay` SYMBOL "?relay", NLME_GetEnergyThreshold
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_InitNV         SYMBOL "NLME_InitNV"
`??NLME_InitNV::?relay` SYMBOL "?relay", NLME_InitNV
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
`??NLME_JoinRequest::?relay` SYMBOL "?relay", NLME_JoinRequest
NLME_LeaveRsp       SYMBOL "NLME_LeaveRsp"
`??NLME_LeaveRsp::?relay` SYMBOL "?relay", NLME_LeaveRsp
NLME_NetworkDiscoveryRequest SYMBOL "NLME_NetworkDiscoveryRequest"
`??NLME_NetworkDiscoveryRequest::?relay` SYMBOL "?relay", NLME_NetworkDiscoveryRequest
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
`??NLME_NwkDiscTerm::?relay` SYMBOL "?relay", NLME_NwkDiscTerm
NLME_RestoreFromNV  SYMBOL "NLME_RestoreFromNV"
`??NLME_RestoreFromNV::?relay` SYMBOL "?relay", NLME_RestoreFromNV
NLME_SendEndDevTimeoutReq SYMBOL "NLME_SendEndDevTimeoutReq"
`??NLME_SendEndDevTimeoutReq::?relay` SYMBOL "?relay", NLME_SendEndDevTimeoutReq
NLME_SetAssocFlags  SYMBOL "NLME_SetAssocFlags"
`??NLME_SetAssocFlags::?relay` SYMBOL "?relay", NLME_SetAssocFlags
NLME_SetBroadcastFilter SYMBOL "NLME_SetBroadcastFilter"
`??NLME_SetBroadcastFilter::?relay` SYMBOL "?relay", NLME_SetBroadcastFilter
NLME_SetDefaultNV   SYMBOL "NLME_SetDefaultNV"
`??NLME_SetDefaultNV::?relay` SYMBOL "?relay", NLME_SetDefaultNV
NLME_SetEnergyThreshold SYMBOL "NLME_SetEnergyThreshold"
`??NLME_SetEnergyThreshold::?relay` SYMBOL "?relay", NLME_SetEnergyThreshold
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
`??NLME_SetPollRate::?relay` SYMBOL "?relay", NLME_SetPollRate
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
`??NLME_SetQueuedPollRate::?relay` SYMBOL "?relay", NLME_SetQueuedPollRate
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
`??NLME_SetResponseRate::?relay` SYMBOL "?relay", NLME_SetResponseRate
NLME_SetUpdateID    SYMBOL "NLME_SetUpdateID"
`??NLME_SetUpdateID::?relay` SYMBOL "?relay", NLME_SetUpdateID
NLME_UpdateNV       SYMBOL "NLME_UpdateNV"
`??NLME_UpdateNV::?relay` SYMBOL "?relay", NLME_UpdateNV
RTG_MTORouteReq     SYMBOL "RTG_MTORouteReq"
`??RTG_MTORouteReq::?relay` SYMBOL "?relay", RTG_MTORouteReq
RTG_RemoveRtgEntry  SYMBOL "RTG_RemoveRtgEntry"
`??RTG_RemoveRtgEntry::?relay` SYMBOL "?relay", RTG_RemoveRtgEntry
SSP_ReadNwkActiveKey SYMBOL "SSP_ReadNwkActiveKey"
`??SSP_ReadNwkActiveKey::?relay` SYMBOL "?relay", SSP_ReadNwkActiveKey
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
`??SSP_SwitchNwkKey::?relay` SYMBOL "?relay", SSP_SwitchNwkKey
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
`??SSP_UpdateNwkKey::?relay` SYMBOL "?relay", SSP_UpdateNwkKey
ZDConfig_InitDescriptors SYMBOL "ZDConfig_InitDescriptors"
`??ZDConfig_InitDescriptors::?relay` SYMBOL "?relay", ZDConfig_InitDescriptors
ZDO_Init            SYMBOL "ZDO_Init"
`??ZDO_Init::?relay` SYMBOL "?relay", ZDO_Init
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
`??ZDO_ParseAddrRsp::?relay` SYMBOL "?relay", ZDO_ParseAddrRsp
ZDO_ParseBindUnbindReq SYMBOL "ZDO_ParseBindUnbindReq"
`??ZDO_ParseBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ParseBindUnbindReq
ZDO_ProcessBindUnbindReq SYMBOL "ZDO_ProcessBindUnbindReq"
`??ZDO_ProcessBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ProcessBindUnbindReq
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_StartDevice     SYMBOL "ZDO_StartDevice"
`??ZDO_StartDevice::?relay` SYMBOL "?relay", ZDO_StartDevice
ZDO_UpdateAddrManager SYMBOL "ZDO_UpdateAddrManager"
`??ZDO_UpdateAddrManager::?relay` SYMBOL "?relay", ZDO_UpdateAddrManager
ZDO_UpdateNwkStatus SYMBOL "ZDO_UpdateNwkStatus"
`??ZDO_UpdateNwkStatus::?relay` SYMBOL "?relay", ZDO_UpdateNwkStatus
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
`??ZDP_DeviceAnnce::?relay` SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
`??ZDP_GenericRsp::?relay` SYMBOL "?relay", ZDP_GenericRsp
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
`??ZDP_IncomingData::?relay` SYMBOL "?relay", ZDP_IncomingData
ZDP_ParentAnnce     SYMBOL "ZDP_ParentAnnce"
`??ZDP_ParentAnnce::?relay` SYMBOL "?relay", ZDP_ParentAnnce
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
`??ZDSecMgrAddrClear::?relay` SYMBOL "?relay", ZDSecMgrAddrClear
ZDSecMgrClearNVKeyValues SYMBOL "ZDSecMgrClearNVKeyValues"
`??ZDSecMgrClearNVKeyValues::?relay` SYMBOL "?relay", ZDSecMgrClearNVKeyValues
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
`??ZDSecMgrDeviceRemoveByExtAddr::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrGenerateRndKey SYMBOL "ZDSecMgrGenerateRndKey"
`??ZDSecMgrGenerateRndKey::?relay` SYMBOL "?relay", ZDSecMgrGenerateRndKey
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
`??ZDSecMgrInit::?relay` SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrReadKeyFromNv SYMBOL "ZDSecMgrReadKeyFromNv"
`??ZDSecMgrReadKeyFromNv::?relay` SYMBOL "?relay", ZDSecMgrReadKeyFromNv
ZDSecMgrSaveApsLinkKey SYMBOL "ZDSecMgrSaveApsLinkKey"
`??ZDSecMgrSaveApsLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveApsLinkKey
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
`??ZDSecMgrSaveTCLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
`??ZDSecMgrSwitchKeyInd::?relay` SYMBOL "?relay", ZDSecMgrSwitchKeyInd
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
`??ZDSecMgrTransportKeyInd::?relay` SYMBOL "?relay", ZDSecMgrTransportKeyInd
ZDSecMgrUpdateTCAddress SYMBOL "ZDSecMgrUpdateTCAddress"
`??ZDSecMgrUpdateTCAddress::?relay` SYMBOL "?relay", ZDSecMgrUpdateTCAddress
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
afSetMatch          SYMBOL "afSetMatch"
`??afSetMatch::?relay` SYMBOL "?relay", afSetMatch
bdb_isDeviceNonFactoryNew SYMBOL "bdb_isDeviceNonFactoryNew"
`??bdb_isDeviceNonFactoryNew::?relay` SYMBOL "?relay", bdb_isDeviceNonFactoryNew
bdb_nwkAssocAttemt  SYMBOL "bdb_nwkAssocAttemt"
`??bdb_nwkAssocAttemt::?relay` SYMBOL "?relay", bdb_nwkAssocAttemt
bdb_nwkDiscoveryAttempt SYMBOL "bdb_nwkDiscoveryAttempt"
`??bdb_nwkDiscoveryAttempt::?relay` SYMBOL "?relay", bdb_nwkDiscoveryAttempt
bdb_nwkFormationAttempt SYMBOL "bdb_nwkFormationAttempt"
`??bdb_nwkFormationAttempt::?relay` SYMBOL "?relay", bdb_nwkFormationAttempt
bdb_parentLost      SYMBOL "bdb_parentLost"
`??bdb_parentLost::?relay` SYMBOL "?relay", bdb_parentLost
bdb_rejoinNwk       SYMBOL "bdb_rejoinNwk"
`??bdb_rejoinNwk::?relay` SYMBOL "?relay", bdb_rejoinNwk
bdb_reportCommissioningState SYMBOL "bdb_reportCommissioningState"
`??bdb_reportCommissioningState::?relay` SYMBOL "?relay", bdb_reportCommissioningState
bdb_setFN           SYMBOL "bdb_setFN"
`??bdb_setFN::?relay` SYMBOL "?relay", bdb_setFN
bdb_setNodeIsOnANetwork SYMBOL "bdb_setNodeIsOnANetwork"
`??bdb_setNodeIsOnANetwork::?relay` SYMBOL "?relay", bdb_setNodeIsOnANetwork
nwkNeighborFindEmptySlot SYMBOL "nwkNeighborFindEmptySlot"
`??nwkNeighborFindEmptySlot::?relay` SYMBOL "?relay", nwkNeighborFindEmptySlot
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
`??nwkNeighborInitTable::?relay` SYMBOL "?relay", nwkNeighborInitTable
nwkNeighborRemove   SYMBOL "nwkNeighborRemove"
`??nwkNeighborRemove::?relay` SYMBOL "?relay", nwkNeighborRemove
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
`??nwk_ExtPANIDValid::?relay` SYMBOL "?relay", nwk_ExtPANIDValid
nwk_desc_list_free  SYMBOL "nwk_desc_list_free"
`??nwk_desc_list_free::?relay` SYMBOL "?relay", nwk_desc_list_free
nwk_getNwkDescList  SYMBOL "nwk_getNwkDescList"
`??nwk_getNwkDescList::?relay` SYMBOL "?relay", nwk_getNwkDescList
osal_clear_event    SYMBOL "osal_clear_event"
`??osal_clear_event::?relay` SYMBOL "?relay", osal_clear_event
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_pwrmgr_device  SYMBOL "osal_pwrmgr_device"
`??osal_pwrmgr_device::?relay` SYMBOL "?relay", osal_pwrmgr_device
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
zgInitItems         SYMBOL "zgInitItems"
`??zgInitItems::?relay` SYMBOL "?relay", zgInitItems
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
`??zgReadStartupOptions::?relay` SYMBOL "?relay", zgReadStartupOptions
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
AddrMgrWriteNVRequest SYMBOL "AddrMgrWriteNVRequest"
`??AddrMgrWriteNVRequest::?relay` SYMBOL "?relay", AddrMgrWriteNVRequest
ZDAppCheckForHoldKey SYMBOL "ZDAppCheckForHoldKey"
`??ZDAppCheckForHoldKey::?relay` SYMBOL "?relay", ZDAppCheckForHoldKey
ZDAppDetermineDeviceType SYMBOL "ZDAppDetermineDeviceType"
`??ZDAppDetermineDeviceType::?relay` SYMBOL "?relay", ZDAppDetermineDeviceType
ZDApp_AnnounceNewAddress SYMBOL "ZDApp_AnnounceNewAddress"
`??ZDApp_AnnounceNewAddress::?relay` SYMBOL "?relay", ZDApp_AnnounceNewAddress
ZDApp_ChangeMatchDescRespPermission SYMBOL "ZDApp_ChangeMatchDescRespPermission"
`??ZDApp_ChangeMatchDescRespPermission::?relay` SYMBOL "?relay", ZDApp_ChangeMatchDescRespPermission
ZDApp_ChangeState   SYMBOL "ZDApp_ChangeState"
`??ZDApp_ChangeState::?relay` SYMBOL "?relay", ZDApp_ChangeState
ZDApp_CoordStartPANIDConflictCB SYMBOL "ZDApp_CoordStartPANIDConflictCB"
`??ZDApp_CoordStartPANIDConflictCB::?relay` SYMBOL "?relay", ZDApp_CoordStartPANIDConflictCB
ZDApp_DeviceAuthEvt SYMBOL "ZDApp_DeviceAuthEvt"
`??ZDApp_DeviceAuthEvt::?relay` SYMBOL "?relay", ZDApp_DeviceAuthEvt
ZDApp_DeviceConfigured SYMBOL "ZDApp_DeviceConfigured"
`??ZDApp_DeviceConfigured::?relay` SYMBOL "?relay", ZDApp_DeviceConfigured
ZDApp_ForceConcentratorChange SYMBOL "ZDApp_ForceConcentratorChange"
`??ZDApp_ForceConcentratorChange::?relay` SYMBOL "?relay", ZDApp_ForceConcentratorChange
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
`??ZDApp_InMsgCB::?relay` SYMBOL "?relay", ZDApp_InMsgCB
ZDApp_Init          SYMBOL "ZDApp_Init"
`??ZDApp_Init::?relay` SYMBOL "?relay", ZDApp_Init
ZDApp_InitUserDesc  SYMBOL "ZDApp_InitUserDesc"
`??ZDApp_InitUserDesc::?relay` SYMBOL "?relay", ZDApp_InitUserDesc
ZDApp_InitZdoCBFunc SYMBOL "ZDApp_InitZdoCBFunc"
`??ZDApp_InitZdoCBFunc::?relay` SYMBOL "?relay", ZDApp_InitZdoCBFunc
ZDApp_JoinReq       SYMBOL "ZDApp_JoinReq"
`??ZDApp_JoinReq::?relay` SYMBOL "?relay", ZDApp_JoinReq
ZDApp_LeaveCtrlBypass SYMBOL "ZDApp_LeaveCtrlBypass"
`??ZDApp_LeaveCtrlBypass::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlBypass
ZDApp_LeaveCtrlInit SYMBOL "ZDApp_LeaveCtrlInit"
`??ZDApp_LeaveCtrlInit::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlInit
ZDApp_LeaveCtrlReset SYMBOL "ZDApp_LeaveCtrlReset"
`??ZDApp_LeaveCtrlReset::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlReset
ZDApp_LeaveCtrlSet  SYMBOL "ZDApp_LeaveCtrlSet"
`??ZDApp_LeaveCtrlSet::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlSet
ZDApp_LeaveCtrlStartup SYMBOL "ZDApp_LeaveCtrlStartup"
`??ZDApp_LeaveCtrlStartup::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlStartup
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDApp_LeaveUpdate   SYMBOL "ZDApp_LeaveUpdate"
`??ZDApp_LeaveUpdate::?relay` SYMBOL "?relay", ZDApp_LeaveUpdate
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
`??ZDApp_NVUpdate::?relay` SYMBOL "?relay", ZDApp_NVUpdate
ZDApp_NetworkDiscoveryReq SYMBOL "ZDApp_NetworkDiscoveryReq"
`??ZDApp_NetworkDiscoveryReq::?relay` SYMBOL "?relay", ZDApp_NetworkDiscoveryReq
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
`??ZDApp_NetworkInit::?relay` SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NetworkStartEvt SYMBOL "ZDApp_NetworkStartEvt"
`??ZDApp_NetworkStartEvt::?relay` SYMBOL "?relay", ZDApp_NetworkStartEvt
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
`??ZDApp_NodeProfileSync::?relay` SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_NwkDescListProcessing SYMBOL "ZDApp_NwkDescListProcessing"
`??ZDApp_NwkDescListProcessing::?relay` SYMBOL "?relay", ZDApp_NwkDescListProcessing
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
`??ZDApp_NwkStateUpdateCB::?relay` SYMBOL "?relay", ZDApp_NwkStateUpdateCB
ZDApp_ProcessMsgCBs SYMBOL "ZDApp_ProcessMsgCBs"
`??ZDApp_ProcessMsgCBs::?relay` SYMBOL "?relay", ZDApp_ProcessMsgCBs
ZDApp_ProcessNetworkJoin SYMBOL "ZDApp_ProcessNetworkJoin"
`??ZDApp_ProcessNetworkJoin::?relay` SYMBOL "?relay", ZDApp_ProcessNetworkJoin
ZDApp_ProcessOSALMsg SYMBOL "ZDApp_ProcessOSALMsg"
`??ZDApp_ProcessOSALMsg::?relay` SYMBOL "?relay", ZDApp_ProcessOSALMsg
ZDApp_ProcessSecEvent SYMBOL "ZDApp_ProcessSecEvent"
`??ZDApp_ProcessSecEvent::?relay` SYMBOL "?relay", ZDApp_ProcessSecEvent
ZDApp_ProcessSecMsg SYMBOL "ZDApp_ProcessSecMsg"
`??ZDApp_ProcessSecMsg::?relay` SYMBOL "?relay", ZDApp_ProcessSecMsg
ZDApp_ReadNetworkRestoreState SYMBOL "ZDApp_ReadNetworkRestoreState"
`??ZDApp_ReadNetworkRestoreState::?relay` SYMBOL "?relay", ZDApp_ReadNetworkRestoreState
ZDApp_RegisterCBs   SYMBOL "ZDApp_RegisterCBs"
`??ZDApp_RegisterCBs::?relay` SYMBOL "?relay", ZDApp_RegisterCBs
ZDApp_ResetNwkKey   SYMBOL "ZDApp_ResetNwkKey"
`??ZDApp_ResetNwkKey::?relay` SYMBOL "?relay", ZDApp_ResetNwkKey
ZDApp_ResetTimerCancel SYMBOL "ZDApp_ResetTimerCancel"
`??ZDApp_ResetTimerCancel::?relay` SYMBOL "?relay", ZDApp_ResetTimerCancel
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
`??ZDApp_ResetTimerStart::?relay` SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNetworkState SYMBOL "ZDApp_RestoreNetworkState"
`??ZDApp_RestoreNetworkState::?relay` SYMBOL "?relay", ZDApp_RestoreNetworkState
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
`??ZDApp_RestoreNwkKey::?relay` SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_RestoreNwkSecMaterial SYMBOL "ZDApp_RestoreNwkSecMaterial"
`??ZDApp_RestoreNwkSecMaterial::?relay` SYMBOL "?relay", ZDApp_RestoreNwkSecMaterial
ZDApp_SaveNetworkStateEvt SYMBOL "ZDApp_SaveNetworkStateEvt"
`??ZDApp_SaveNetworkStateEvt::?relay` SYMBOL "?relay", ZDApp_SaveNetworkStateEvt
ZDApp_SaveNwkKey    SYMBOL "ZDApp_SaveNwkKey"
`??ZDApp_SaveNwkKey::?relay` SYMBOL "?relay", ZDApp_SaveNwkKey
ZDApp_SecInit       SYMBOL "ZDApp_SecInit"
`??ZDApp_SecInit::?relay` SYMBOL "?relay", ZDApp_SecInit
ZDApp_SendEventMsg  SYMBOL "ZDApp_SendEventMsg"
`??ZDApp_SendEventMsg::?relay` SYMBOL "?relay", ZDApp_SendEventMsg
ZDApp_SendMsg       SYMBOL "ZDApp_SendMsg"
`??ZDApp_SendMsg::?relay` SYMBOL "?relay", ZDApp_SendMsg
ZDApp_SendParentAnnce SYMBOL "ZDApp_SendParentAnnce"
`??ZDApp_SendParentAnnce::?relay` SYMBOL "?relay", ZDApp_SendParentAnnce
ZDApp_SetParentAnnceTimer SYMBOL "ZDApp_SetParentAnnceTimer"
`??ZDApp_SetParentAnnceTimer::?relay` SYMBOL "?relay", ZDApp_SetParentAnnceTimer
ZDApp_SetRejoinBackoffDuration SYMBOL "ZDApp_SetRejoinBackoffDuration"
`??ZDApp_SetRejoinBackoffDuration::?relay` SYMBOL "?relay", ZDApp_SetRejoinBackoffDuration
ZDApp_SetRejoinScanDuration SYMBOL "ZDApp_SetRejoinScanDuration"
`??ZDApp_SetRejoinScanDuration::?relay` SYMBOL "?relay", ZDApp_SetRejoinScanDuration
ZDApp_StartJoiningCycle SYMBOL "ZDApp_StartJoiningCycle"
`??ZDApp_StartJoiningCycle::?relay` SYMBOL "?relay", ZDApp_StartJoiningCycle
ZDApp_StopJoiningCycle SYMBOL "ZDApp_StopJoiningCycle"
`??ZDApp_StopJoiningCycle::?relay` SYMBOL "?relay", ZDApp_StopJoiningCycle
ZDApp_StoreNwkSecMaterial SYMBOL "ZDApp_StoreNwkSecMaterial"
`??ZDApp_StoreNwkSecMaterial::?relay` SYMBOL "?relay", ZDApp_StoreNwkSecMaterial
ZDApp_event_loop    SYMBOL "ZDApp_event_loop"
`??ZDApp_event_loop::?relay` SYMBOL "?relay", ZDApp_event_loop
ZDOInitDeviceEx     SYMBOL "ZDOInitDeviceEx"
`??ZDOInitDeviceEx::?relay` SYMBOL "?relay", ZDOInitDeviceEx
ZDO_AddrChangeIndicationCB SYMBOL "ZDO_AddrChangeIndicationCB"
`??ZDO_AddrChangeIndicationCB::?relay` SYMBOL "?relay", ZDO_AddrChangeIndicationCB
ZDO_ConcentratorIndicationCB SYMBOL "ZDO_ConcentratorIndicationCB"
`??ZDO_ConcentratorIndicationCB::?relay` SYMBOL "?relay", ZDO_ConcentratorIndicationCB
ZDO_DeregisterForZdoCB SYMBOL "ZDO_DeregisterForZdoCB"
`??ZDO_DeregisterForZdoCB::?relay` SYMBOL "?relay", ZDO_DeregisterForZdoCB
ZDO_JoinConfirmCB   SYMBOL "ZDO_JoinConfirmCB"
`??ZDO_JoinConfirmCB::?relay` SYMBOL "?relay", ZDO_JoinConfirmCB
ZDO_JoinIndicationCB SYMBOL "ZDO_JoinIndicationCB"
`??ZDO_JoinIndicationCB::?relay` SYMBOL "?relay", ZDO_JoinIndicationCB
ZDO_LeaveCnf        SYMBOL "ZDO_LeaveCnf"
`??ZDO_LeaveCnf::?relay` SYMBOL "?relay", ZDO_LeaveCnf
ZDO_LeaveInd        SYMBOL "ZDO_LeaveInd"
`??ZDO_LeaveInd::?relay` SYMBOL "?relay", ZDO_LeaveInd
ZDO_ManytoOneFailureIndicationCB SYMBOL "ZDO_ManytoOneFailureIndicationCB"
`??ZDO_ManytoOneFailureIndicationCB::?relay` SYMBOL "?relay", ZDO_ManytoOneFailureIndicationCB
ZDO_NetworkDiscoveryConfirmCB SYMBOL "ZDO_NetworkDiscoveryConfirmCB"
`??ZDO_NetworkDiscoveryConfirmCB::?relay` SYMBOL "?relay", ZDO_NetworkDiscoveryConfirmCB
ZDO_NetworkFormationConfirmCB SYMBOL "ZDO_NetworkFormationConfirmCB"
`??ZDO_NetworkFormationConfirmCB::?relay` SYMBOL "?relay", ZDO_NetworkFormationConfirmCB
ZDO_NetworkStatusCB SYMBOL "ZDO_NetworkStatusCB"
`??ZDO_NetworkStatusCB::?relay` SYMBOL "?relay", ZDO_NetworkStatusCB
ZDO_PermitJoinCB    SYMBOL "ZDO_PermitJoinCB"
`??ZDO_PermitJoinCB::?relay` SYMBOL "?relay", ZDO_PermitJoinCB
ZDO_PollConfirmCB   SYMBOL "ZDO_PollConfirmCB"
`??ZDO_PollConfirmCB::?relay` SYMBOL "?relay", ZDO_PollConfirmCB
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
`??ZDO_RegisterForZdoCB::?relay` SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_SrcRtgIndCB     SYMBOL "ZDO_SrcRtgIndCB"
`??ZDO_SrcRtgIndCB::?relay` SYMBOL "?relay", ZDO_SrcRtgIndCB
ZDO_StartRouterConfirmCB SYMBOL "ZDO_StartRouterConfirmCB"
`??ZDO_StartRouterConfirmCB::?relay` SYMBOL "?relay", ZDO_StartRouterConfirmCB
ZDO_SyncIndicationCB SYMBOL "ZDO_SyncIndicationCB"
`??ZDO_SyncIndicationCB::?relay` SYMBOL "?relay", ZDO_SyncIndicationCB
ZDO_UpdateDeviceIndication SYMBOL "ZDO_UpdateDeviceIndication"
`??ZDO_UpdateDeviceIndication::?relay` SYMBOL "?relay", ZDO_UpdateDeviceIndication
ZDO_beaconNotifyIndCB SYMBOL "ZDO_beaconNotifyIndCB"
`??ZDO_beaconNotifyIndCB::?relay` SYMBOL "?relay", ZDO_beaconNotifyIndCB

        EXTERN `??APSME_HoldDataRequests::?relay`
        FUNCTION `??APSME_HoldDataRequests::?relay`,00H
        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??AssocMakeListOfRfdChild::?relay`
        FUNCTION `??AssocMakeListOfRfdChild::?relay`,00H
        EXTERN `??HalKeyRead::?relay`
        FUNCTION `??HalKeyRead::?relay`,00H
        EXTERN `??NLME_GetCoordExtAddr::?relay`
        FUNCTION `??NLME_GetCoordExtAddr::?relay`,00H
        EXTERN `??NLME_GetCoordShortAddr::?relay`
        FUNCTION `??NLME_GetCoordShortAddr::?relay`,00H
        EXTERN `??NLME_GetEnergyThreshold::?relay`
        FUNCTION `??NLME_GetEnergyThreshold::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_InitNV::?relay`
        FUNCTION `??NLME_InitNV::?relay`,00H
        EXTERN `??NLME_JoinRequest::?relay`
        FUNCTION `??NLME_JoinRequest::?relay`,00H
        EXTERN `??NLME_LeaveRsp::?relay`
        FUNCTION `??NLME_LeaveRsp::?relay`,00H
        EXTERN `??NLME_NetworkDiscoveryRequest::?relay`
        FUNCTION `??NLME_NetworkDiscoveryRequest::?relay`,00H
        EXTERN `??NLME_NwkDiscTerm::?relay`
        FUNCTION `??NLME_NwkDiscTerm::?relay`,00H
        EXTERN `??NLME_RestoreFromNV::?relay`
        FUNCTION `??NLME_RestoreFromNV::?relay`,00H
        EXTERN `??NLME_SendEndDevTimeoutReq::?relay`
        FUNCTION `??NLME_SendEndDevTimeoutReq::?relay`,00H
        EXTERN `??NLME_SetAssocFlags::?relay`
        FUNCTION `??NLME_SetAssocFlags::?relay`,00H
        EXTERN `??NLME_SetBroadcastFilter::?relay`
        FUNCTION `??NLME_SetBroadcastFilter::?relay`,00H
        EXTERN `??NLME_SetDefaultNV::?relay`
        FUNCTION `??NLME_SetDefaultNV::?relay`,00H
        EXTERN `??NLME_SetEnergyThreshold::?relay`
        FUNCTION `??NLME_SetEnergyThreshold::?relay`,00H
        EXTERN `??NLME_SetPollRate::?relay`
        FUNCTION `??NLME_SetPollRate::?relay`,00H
        EXTERN `??NLME_SetQueuedPollRate::?relay`
        FUNCTION `??NLME_SetQueuedPollRate::?relay`,00H
        EXTERN `??NLME_SetResponseRate::?relay`
        FUNCTION `??NLME_SetResponseRate::?relay`,00H
        EXTERN `??NLME_SetUpdateID::?relay`
        FUNCTION `??NLME_SetUpdateID::?relay`,00H
        EXTERN `??NLME_UpdateNV::?relay`
        FUNCTION `??NLME_UpdateNV::?relay`,00H
        EXTERN `??RTG_MTORouteReq::?relay`
        FUNCTION `??RTG_MTORouteReq::?relay`,00H
        EXTERN `??RTG_RemoveRtgEntry::?relay`
        FUNCTION `??RTG_RemoveRtgEntry::?relay`,00H
        EXTERN `??SSP_ReadNwkActiveKey::?relay`
        FUNCTION `??SSP_ReadNwkActiveKey::?relay`,00H
        EXTERN `??SSP_SwitchNwkKey::?relay`
        FUNCTION `??SSP_SwitchNwkKey::?relay`,00H
        EXTERN `??SSP_UpdateNwkKey::?relay`
        FUNCTION `??SSP_UpdateNwkKey::?relay`,00H
        EXTERN `??ZDConfig_InitDescriptors::?relay`
        FUNCTION `??ZDConfig_InitDescriptors::?relay`,00H
        EXTERN `??ZDO_Init::?relay`
        FUNCTION `??ZDO_Init::?relay`,00H
        EXTERN `??ZDO_ParseAddrRsp::?relay`
        FUNCTION `??ZDO_ParseAddrRsp::?relay`,00H
        EXTERN `??ZDO_ParseBindUnbindReq::?relay`
        FUNCTION `??ZDO_ParseBindUnbindReq::?relay`,00H
        EXTERN `??ZDO_ProcessBindUnbindReq::?relay`
        FUNCTION `??ZDO_ProcessBindUnbindReq::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDO_StartDevice::?relay`
        FUNCTION `??ZDO_StartDevice::?relay`,00H
        EXTERN `??ZDO_UpdateAddrManager::?relay`
        FUNCTION `??ZDO_UpdateAddrManager::?relay`,00H
        EXTERN `??ZDO_UpdateNwkStatus::?relay`
        FUNCTION `??ZDO_UpdateNwkStatus::?relay`,00H
        EXTERN `??ZDP_DeviceAnnce::?relay`
        FUNCTION `??ZDP_DeviceAnnce::?relay`,00H
        EXTERN `??ZDP_GenericRsp::?relay`
        FUNCTION `??ZDP_GenericRsp::?relay`,00H
        EXTERN `??ZDP_IncomingData::?relay`
        FUNCTION `??ZDP_IncomingData::?relay`,00H
        EXTERN `??ZDP_ParentAnnce::?relay`
        FUNCTION `??ZDP_ParentAnnce::?relay`,00H
        EXTERN `??ZDSecMgrAddrClear::?relay`
        FUNCTION `??ZDSecMgrAddrClear::?relay`,00H
        EXTERN `??ZDSecMgrClearNVKeyValues::?relay`
        FUNCTION `??ZDSecMgrClearNVKeyValues::?relay`,00H
        EXTERN `??ZDSecMgrDeviceRemoveByExtAddr::?relay`
        FUNCTION `??ZDSecMgrDeviceRemoveByExtAddr::?relay`,00H
        EXTERN `??ZDSecMgrGenerateRndKey::?relay`
        FUNCTION `??ZDSecMgrGenerateRndKey::?relay`,00H
        EXTERN `??ZDSecMgrInit::?relay`
        FUNCTION `??ZDSecMgrInit::?relay`,00H
        EXTERN `??ZDSecMgrReadKeyFromNv::?relay`
        FUNCTION `??ZDSecMgrReadKeyFromNv::?relay`,00H
        EXTERN `??ZDSecMgrSaveApsLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveApsLinkKey::?relay`,00H
        EXTERN `??ZDSecMgrSaveTCLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveTCLinkKey::?relay`,00H
        EXTERN `??ZDSecMgrSwitchKeyInd::?relay`
        FUNCTION `??ZDSecMgrSwitchKeyInd::?relay`,00H
        EXTERN `??ZDSecMgrTransportKeyInd::?relay`
        FUNCTION `??ZDSecMgrTransportKeyInd::?relay`,00H
        EXTERN `??ZDSecMgrUpdateTCAddress::?relay`
        FUNCTION `??ZDSecMgrUpdateTCAddress::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??afSetMatch::?relay`
        FUNCTION `??afSetMatch::?relay`,00H
        EXTERN `??bdb_isDeviceNonFactoryNew::?relay`
        FUNCTION `??bdb_isDeviceNonFactoryNew::?relay`,00H
        EXTERN `??bdb_nwkAssocAttemt::?relay`
        FUNCTION `??bdb_nwkAssocAttemt::?relay`,00H
        EXTERN `??bdb_nwkDiscoveryAttempt::?relay`
        FUNCTION `??bdb_nwkDiscoveryAttempt::?relay`,00H
        EXTERN `??bdb_nwkFormationAttempt::?relay`
        FUNCTION `??bdb_nwkFormationAttempt::?relay`,00H
        EXTERN `??bdb_parentLost::?relay`
        FUNCTION `??bdb_parentLost::?relay`,00H
        EXTERN `??bdb_rejoinNwk::?relay`
        FUNCTION `??bdb_rejoinNwk::?relay`,00H
        EXTERN `??bdb_reportCommissioningState::?relay`
        FUNCTION `??bdb_reportCommissioningState::?relay`,00H
        EXTERN `??bdb_setFN::?relay`
        FUNCTION `??bdb_setFN::?relay`,00H
        EXTERN `??bdb_setNodeIsOnANetwork::?relay`
        FUNCTION `??bdb_setNodeIsOnANetwork::?relay`,00H
        EXTERN `??nwkNeighborFindEmptySlot::?relay`
        FUNCTION `??nwkNeighborFindEmptySlot::?relay`,00H
        EXTERN `??nwkNeighborInitTable::?relay`
        FUNCTION `??nwkNeighborInitTable::?relay`,00H
        EXTERN `??nwkNeighborRemove::?relay`
        FUNCTION `??nwkNeighborRemove::?relay`,00H
        EXTERN `??nwk_ExtPANIDValid::?relay`
        FUNCTION `??nwk_ExtPANIDValid::?relay`,00H
        EXTERN `??nwk_desc_list_free::?relay`
        FUNCTION `??nwk_desc_list_free::?relay`,00H
        EXTERN `??nwk_getNwkDescList::?relay`
        FUNCTION `??nwk_getNwkDescList::?relay`,00H
        EXTERN `??osal_clear_event::?relay`
        FUNCTION `??osal_clear_event::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_pwrmgr_device::?relay`
        FUNCTION `??osal_pwrmgr_device::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN `??zgInitItems::?relay`
        FUNCTION `??zgInitItems::?relay`,00H
        EXTERN `??zgReadStartupOptions::?relay`
        FUNCTION `??zgReadStartupOptions::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN AIB_apsUseExtendedPANID
        EXTERN AIB_apsUseInsecureJoin
        EXTERN APSME_HoldDataRequests
        FUNCTION APSME_HoldDataRequests,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMakeListOfRfdChild
        FUNCTION AssocMakeListOfRfdChild,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalKeyRead
        FUNCTION HalKeyRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordExtAddr
        FUNCTION NLME_GetCoordExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetEnergyThreshold
        FUNCTION NLME_GetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_InitNV
        FUNCTION NLME_InitNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveRsp
        FUNCTION NLME_LeaveRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NetworkDiscoveryRequest
        FUNCTION NLME_NetworkDiscoveryRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RestoreFromNV
        FUNCTION NLME_RestoreFromNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SendEndDevTimeoutReq
        FUNCTION NLME_SendEndDevTimeoutReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetAssocFlags
        FUNCTION NLME_SetAssocFlags,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetBroadcastFilter
        FUNCTION NLME_SetBroadcastFilter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetDefaultNV
        FUNCTION NLME_SetDefaultNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetEnergyThreshold
        FUNCTION NLME_SetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetUpdateID
        FUNCTION NLME_SetUpdateID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_UpdateNV
        FUNCTION NLME_UpdateNV,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NWK_TaskID
        EXTERN NwkDescList
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_MTORouteReq
        FUNCTION RTG_MTORouteReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_RemoveRtgEntry
        FUNCTION RTG_RemoveRtgEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_ReadNwkActiveKey
        FUNCTION SSP_ReadNwkActiveKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDConfig_InitDescriptors
        FUNCTION ZDConfig_InitDescriptors,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN ZDO_Init
        FUNCTION ZDO_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseBindUnbindReq
        FUNCTION ZDO_ParseBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ProcessBindUnbindReq
        FUNCTION ZDO_ProcessBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateAddrManager
        FUNCTION ZDO_UpdateAddrManager,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_ParentAnnce
        FUNCTION ZDP_ParentAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_TransID
        EXTERN ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrClearNVKeyValues
        FUNCTION ZDSecMgrClearNVKeyValues,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrGenerateRndKey
        FUNCTION ZDSecMgrGenerateRndKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrReadKeyFromNv
        FUNCTION ZDSecMgrReadKeyFromNv,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSaveApsLinkKey
        FUNCTION ZDSecMgrSaveApsLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrUpdateTCAddress
        FUNCTION ZDSecMgrUpdateTCAddress,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN aExtendedAddress
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdbCommissioningProcedureState
        EXTERN bdb_isDeviceNonFactoryNew
        FUNCTION bdb_isDeviceNonFactoryNew,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_nwkAssocAttemt
        FUNCTION bdb_nwkAssocAttemt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_nwkDiscoveryAttempt
        FUNCTION bdb_nwkDiscoveryAttempt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_nwkFormationAttempt
        FUNCTION bdb_nwkFormationAttempt,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_parentLost
        FUNCTION bdb_parentLost,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_rejoinNwk
        FUNCTION bdb_rejoinNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_reportCommissioningState
        FUNCTION bdb_reportCommissioningState,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setFN
        FUNCTION bdb_setFN,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setNodeIsOnANetwork
        FUNCTION bdb_setNodeIsOnANetwork,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN epList
        EXTERN gLINK_DOWN_TRIGGER
        EXTERN gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        EXTERN gMIN_TREE_LQI
        EXTERN nwkFrameCounter
        EXTERN nwkFrameCounterChanges
        EXTERN nwkNeighborFindEmptySlot
        FUNCTION nwkNeighborFindEmptySlot,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborRemove
        FUNCTION nwkNeighborRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_desc_list_free
        FUNCTION nwk_desc_list_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNwkDescList
        FUNCTION nwk_getNwkDescList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_clear_event
        FUNCTION osal_clear_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_isbufset
        FUNCTION osal_isbufset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pbindRemoveDev
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN savedQueuedPollRate
        EXTERN savedResponseRate
        EXTERN zgChildAgingEnable
        EXTERN zgConcentratorDiscoveryTime
        EXTERN zgConcentratorEnable
        EXTERN zgConfigPANID
        EXTERN zgDefaultChannelList
        EXTERN zgDefaultRejoinBackoff
        EXTERN zgDefaultRejoinScan
        EXTERN zgDeviceLogicalType
        EXTERN zgEndDeviceConfiguration
        EXTERN zgEndDeviceTimeoutValue
        EXTERN zgInitItems
        FUNCTION zgInitItems,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgPollRate
        EXTERN zgPreConfigKeys
        EXTERN zgQueuedPollRate
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgRejoinPollRate
        EXTERN zgResponsePollRate
        EXTERN zgSecurityMode
        EXTERN zgStackProfile
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Components\stack\zdo\ZDApp.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDApp.c
//    3   Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
//    4   Revision:       $Revision: 44520 $
//    5 
//    6   Description:    This file contains the interface to the Zigbee Device Application. This is the
//    7                   Application part that the user can change. This also contains the Task functions.
//    8 
//    9 
//   10   Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License"). You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product. Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 
//   45 #include "ZComDef.h"
//   46 #include "ZMAC.h"
//   47 #include "OSAL.h"
//   48 #include "OSAL_Tasks.h"
//   49 #include "OSAL_PwrMgr.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AF.h"
//   52 #include "APSMEDE.h"
//   53 #include "NLMEDE.h"
//   54 #include "AddrMgr.h"
//   55 #include "ZDProfile.h"
//   56 #include "ZDObject.h"
//   57 #include "ZDConfig.h"
//   58 #include "ZDSecMgr.h"
//   59 #include "ZDApp.h"
//   60 #include "DebugTrace.h"
//   61 #include "nwk_util.h"
//   62 #include "OnBoard.h"
//   63 #include "ZGlobals.h"
//   64 #include "ZDNwkMgr.h"
//   65 #include "rtg.h"
//   66    
//   67 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//   68 #include "gp_common.h"
//   69 #endif
//   70    
//   71 #include "bdb.h"
//   72 #include "bdb_interface.h"
//   73 
//   74 #include "ssp.h"
//   75 
//   76 /* HAL */
//   77 #include "hal_led.h"
//   78 #include "hal_lcd.h"
//   79 #include "hal_key.h"
//   80 
//   81 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   82   #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
//   83 #endif
//   84 
//   85 /*********************************************************************
//   86  * CONSTANTS
//   87  */
//   88 
//   89 #if !defined( NWK_START_DELAY )
//   90   #define NWK_START_DELAY             100   // in milliseconds
//   91 #endif
//   92 
//   93 #if !defined( LEAVE_RESET_DELAY )
//   94   #define LEAVE_RESET_DELAY           5000  // in milliseconds
//   95 #endif
//   96 
//   97 #if !defined( EXTENDED_JOINING_RANDOM_MASK )
//   98   #define EXTENDED_JOINING_RANDOM_MASK 0x007F
//   99 #endif
//  100 
//  101 #if !defined( BEACON_REQUEST_DELAY )
//  102   #define BEACON_REQUEST_DELAY        100   // in milliseconds
//  103 #endif
//  104 
//  105 #if !defined( BEACON_REQ_DELAY_MASK )
//  106   #define BEACON_REQ_DELAY_MASK       0x007F
//  107 #endif
//  108 
//  109 #define MAX_RESUME_RETRY            3
//  110 
//  111 #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
//  112 
//  113 // Beacon Order Settings (see NLMEDE.h)
//  114 #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
//  115 #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
//  116 
//  117 // Leave control bits
//  118 #define ZDAPP_LEAVE_CTRL_INIT 0
//  119 #define ZDAPP_LEAVE_CTRL_SET  1
//  120 #define ZDAPP_LEAVE_CTRL_RA   2
//  121 
//  122 // Address Manager Stub Implementation
//  123 #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
//  124 
//  125 
//  126 #if !defined ZDO_NV_SAVE_RFDs
//  127 #define ZDO_NV_SAVE_RFDs  TRUE
//  128 #endif
//  129 
//  130 // Delay time before updating NWK NV data to force fewer writes during high activity.
//  131 #if ZDO_NV_SAVE_RFDs
//  132 #define ZDAPP_UPDATE_NWK_NV_TIME 700
//  133 #else
//  134 #define ZDAPP_UPDATE_NWK_NV_TIME 65000
//  135 #endif
//  136 
//  137 // Timeout value to process New Devices
//  138 #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
//  139 
//  140 
//  141 //ZDP_BIND_SKIP_VALIDATION, redefined as ZDP_BIND_VALIDATION
//  142 #if defined ( ZDP_BIND_VALIDATION )
//  143 #if !defined MAX_PENDING_BIND_REQ
//  144 #define MAX_PENDING_BIND_REQ 3
//  145 #endif
//  146 #endif
//  147 
//  148 #ifdef LEGACY_ZDO_LEDS
//  149 #define zdoHalLedSet HalLedSet
//  150 #else
//  151 #define zdoHalLedSet(...)
//  152 #endif
//  153 
//  154 /******************************************************************************
//  155  * TYPEDEFS
//  156  */
//  157 typedef struct
//  158 {
//  159   void   *next;
//  160   uint16 shortAddr;
//  161   uint16 timeDelta;
//  162 } ZDAppNewDevice_t;
//  163 
//  164 /*********************************************************************
//  165  * GLOBAL VARIABLES
//  166  */
//  167 
//  168 #if defined( LCD_SUPPORTED )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169   uint8 MatchRsps = 0;
MatchRsps:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  170 #endif
//  171 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  172 zAddrType_t ZDAppNwkAddr;
ZDAppNwkAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  173 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  174 uint8 zdappMgmtNwkDiscRspTransSeq;
zdappMgmtNwkDiscRspTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  175 uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
zdappMgmtNwkDiscReqInProgress:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  176 zAddrType_t zdappMgmtNwkDiscRspAddr;
zdappMgmtNwkDiscRspAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  177 uint8 zdappMgmtNwkDiscStartIndex;
zdappMgmtNwkDiscStartIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 uint8 zdappMgmtSavedNwkState;
zdappMgmtSavedNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  179 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  180 uint8 continueJoining = TRUE;
continueJoining:
        DATA8
        DS 1
        REQUIRE `?<Initializer for continueJoining>`
        REQUIRE __INIT_XDATA_I
//  181 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  182 uint8  _tmpRejoinState;
_tmpRejoinState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  183 
//  184 // The extended PanID used in ZDO layer for rejoin.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  185 uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
ZDO_UseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  186 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  187 pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
zdoCBFunc:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  188 
//  189 #if defined ( ZDP_BIND_VALIDATION )
//  190 ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
//  191 #endif
//  192 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  193 uint32 runtimeChannel;
runtimeChannel:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  194 uint8 FrameCounterUpdated = FALSE;
FrameCounterUpdated:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  195 /*********************************************************************
//  196  * EXTERNAL VARIABLES
//  197  */
//  198 
//  199 extern bool    requestNewTrustCenterLinkKey;
//  200 extern uint32  requestLinkKeyTimeout;
//  201 extern CONST   uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
//  202 /*********************************************************************
//  203  * EXTERNAL FUNCTIONS
//  204  */
//  205 
//  206 /*********************************************************************
//  207  * LOCAL FUNCTIONS
//  208  */
//  209 void ZDApp_NetworkStartEvt( void );
//  210 void ZDApp_DeviceAuthEvt( void );
//  211 void ZDApp_SaveNetworkStateEvt( void );
//  212 
//  213 uint8 ZDApp_ReadNetworkRestoreState( void );
//  214 uint8 ZDApp_RestoreNetworkState( void );
//  215 void ZDAppDetermineDeviceType( void );
//  216 void ZDApp_InitUserDesc( void );
//  217 void ZDAppCheckForHoldKey( void );
//  218 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
//  219 void ZDApp_ProcessNetworkJoin( void );
//  220 void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
//  221 uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
//  222 networkDesc_t* ZDApp_NwkDescListProcessing(void);
//  223 
//  224 void ZDApp_SecInit( uint8 state );
//  225 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
//  226 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
//  227 
//  228 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
//  229 
//  230 void ZDApp_ResetTimerStart( uint16 delay );
//  231 void ZDApp_ResetTimerCancel( void );
//  232 void ZDApp_LeaveCtrlInit( void );
//  233 void ZDApp_LeaveCtrlSet( uint8 ra );
//  234 uint8 ZDApp_LeaveCtrlBypass( void );
//  235 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
//  236 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr, uint8 removeChildren, uint8 rejoin );
//  237 void ZDApp_NodeProfileSync( uint8 stackProfile );
//  238 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  239 void ZDApp_RegisterCBs( void );
//  240 void ZDApp_InitZdoCBFunc(void);
//  241 #if defined ( ZDP_BIND_VALIDATION )
//  242 void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
//  243 void ZDApp_InitPendingBind( void );
//  244 void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
//  245 void ZDApp_AgeOutPendingBindEntry( void );
//  246 #endif
//  247 
//  248 void ZDApp_SetParentAnnceTimer( void );
//  249 void ZDApp_StoreNwkSecMaterial(void);
//  250 
//  251 /*********************************************************************
//  252  * LOCAL VARIABLES
//  253  */
//  254 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  255 uint8 ZDAppTaskID;
ZDAppTaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  256 uint8 nwkStatus;
nwkStatus:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  257 endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
ZDApp_AutoFindMode_epDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  258 uint8 ZDApp_LeaveCtrl;
ZDApp_LeaveCtrl:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  259 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  260 devStates_t devState = DEV_HOLD;
devState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  261 
//  262 // previous rejoin state

        RSEG XDATA_I:XDATA:NOROOT(0)
//  263   devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
prevDevState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for prevDevState>`
        REQUIRE __INIT_XDATA_I
//  264 
//  265 #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  266   devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
devStartMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  267   //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
//  268                         // to parent. Set to make the device do an Orphan scan.
//  269 #else
//  270   // Set the default to coodinator
//  271   devStartModes_t devStartMode = MODE_HARD;
//  272 #endif
//  273 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  274 uint8 retryCnt = 0;
retryCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  275 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  276 endPointDesc_t ZDApp_epDesc =
ZDApp_epDesc:
        DATA8
        DS 7
        REQUIRE `?<Initializer for ZDApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//  277 {
//  278   ZDO_EP,
//  279   0,
//  280   &ZDAppTaskID,
//  281   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
//  282   (afNetworkLatencyReq_t)0            // No Network Latency req
//  283 };
//  284 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  285 uint32 ZDApp_SavedPollRate = POLL_RATE;
ZDApp_SavedPollRate:
        DATA32
        DS 4
        REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
        REQUIRE __INIT_XDATA_I
//  286 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  287 ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
ZDApp_NewDeviceList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  288 
//  289 /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  290 static uint8 zdappHoldKeys;
zdappHoldKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  291 
//  292 /*********************************************************************
//  293  * @fn      ZDApp_Init
//  294  *
//  295  * @brief   ZDApp Initialization function.
//  296  *
//  297  * @param   task_id - ZDApp Task ID
//  298  *
//  299  * @return  None
//  300  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  301 void ZDApp_Init( uint8 task_id )
ZDApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDApp_Init
        CODE
//  302 {
        FUNCALL ZDApp_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDO_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitZdoCBFunc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_RegisterCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
//  303   // Save the task ID
//  304   ZDAppTaskID = task_id;
        MOV       DPTR,#ZDAppTaskID
        MOVX      @DPTR,A
//  305 
//  306   // Initialize the ZDO global device short address storage
//  307   ZDAppNwkAddr.addrMode = Addr16Bit;
        MOV       DPTR,#ZDAppNwkAddr + 8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  308   ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV       DPTR,#ZDAppNwkAddr
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
//  309   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
//  310 
//  311   // Initialize ZDO items and setup the device - type of device to create.
//  312   ZDO_Init();
        ; Setup parameters for call to function ZDO_Init
        LCALL     `??ZDO_Init::?relay`; Banked call to: ZDO_Init
//  313 
//  314   // Register the endpoint description with the AF
//  315   // This task doesn't have a Simple description, but we still need
//  316   // to register the endpoint.
//  317   afRegister( (endPointDesc_t *)&ZDApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV       R2,#ZDApp_epDesc & 0xff
        MOV       R3,#(ZDApp_epDesc >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  318 
//  319 #if defined( ZDO_USERDESC_RESPONSE )
//  320   ZDApp_InitUserDesc();
//  321 #endif // ZDO_USERDESC_RESPONSE
//  322 
//  323   // Initialize the ZDO callback function pointers zdoCBFunc[]
//  324   ZDApp_InitZdoCBFunc();
        ; Setup parameters for call to function ZDApp_InitZdoCBFunc
        LCALL     `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
//  325 
//  326   ZDApp_RegisterCBs();
        ; Setup parameters for call to function ZDApp_RegisterCBs
        LCALL     `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
//  327 
//  328 #if defined ( ZDP_BIND_VALIDATION )
//  329 #if defined ( REFLECTOR )
//  330   ZDApp_InitPendingBind();
//  331 #endif
//  332 #endif
//  333 } /* ZDApp_Init() */
        LJMP      ??Subroutine48_0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  334 
//  335 /*********************************************************************
//  336  * @fn          ZDApp_SecInit
//  337  *
//  338  * @brief       ZDApp initialize security.
//  339  *
//  340  * @param       state - device initialization state
//  341  *
//  342  * @return      none
//  343  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  344 void ZDApp_SecInit( uint8 state )
ZDApp_SecInit:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDApp_SecInit
        CODE
//  345 {
        FUNCALL ZDApp_SecInit, ZDSecMgrInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, ZDSecMgrReadKeyFromNv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V0,R1
//  346   uint8 zgPreConfigKey[SEC_KEY_LEN];
//  347 
//  348   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  349   {
//  350     // Set the Trust Center bit
//  351     ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
//  352   }
//  353 
//  354   // Initialize ZigBee Device Security Manager
//  355   ZDSecMgrInit(state);
        ; Setup parameters for call to function ZDSecMgrInit
        LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
//  356 
//  357   if ( ZG_SECURE_ENABLED )
//  358   {
//  359     if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
        MOV       A,?V0
        JZ        ??ZDApp_SecInit_0
//  360     {
//  361       if( _NIB.nwkKeyLoaded == FALSE )
        MOV       DPTR,#_NIB + 61
        MOVX      A,@DPTR
        JNZ       ??ZDApp_SecInit_0
//  362       {
//  363         if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
//  364              ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
        MOV       DPTR,#zgSecurityMode
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_SecInit_0
        MOV       DPTR,#zgPreConfigKeys
        MOVX      A,@DPTR
        JZ        ??ZDApp_SecInit_0
//  365         {
//  366             ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
        ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R2,#0x62
        MOV       R3,#0x0
        LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
//  367             SSP_UpdateNwkKey( zgPreConfigKey, 0);
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
//  368             SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV       R1,#0x0
        LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
//  369 
//  370             // clear local copy of key
//  371             osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  372         }
//  373       }
//  374     }
//  375 
//  376     // clean the new devices list when Security module is initialized
//  377     if ( ZDApp_NewDeviceList != NULL )
??ZDApp_SecInit_0:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_107:
        JZ        ??ZDApp_SecInit_1
//  378     {
//  379       ZDAppNewDevice_t *pNewDeviceNext;
//  380 
//  381       while ( ZDApp_NewDeviceList )
//  382       {
//  383         pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
??ZDApp_SecInit_2:
        MOV       DPTR,#ZDApp_NewDeviceList
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  384         osal_mem_free( ZDApp_NewDeviceList );
        ; Setup parameters for call to function osal_mem_free
        MOV       DPTR,#ZDApp_NewDeviceList
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  385         ZDApp_NewDeviceList = pNewDeviceNext;
        MOV       A,R7
        MOV       R1,A
        MOV       DPTR,#ZDApp_NewDeviceList
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  386       }
        MOV       A,R6
        ORL       A,R1
        JNZ       ??ZDApp_SecInit_2
//  387     }
//  388   }
//  389 }
??ZDApp_SecInit_1:
        MOV       A,#0x10
        LJMP      ??Subroutine47_0 & 0xFFFF
          CFI EndBlock cfiBlock1
//  390 
//  391 /*********************************************************************
//  392  * @fn      ZDApp_event_loop()
//  393  *
//  394  * @brief   Main event loop for Zigbee device objects task. This function
//  395  *          should be called at periodic intervals.
//  396  *
//  397  * @param   task_id - Task ID
//  398  * @param   events  - Bitmap of events
//  399  *
//  400  * @return  none
//  401  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  402 UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
ZDApp_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ZDApp_event_loop
        CODE
//  403 {
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_StartDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_StartJoiningCycle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_StopJoiningCycle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_UpdateNwkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_SaveNetworkStateEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessSecEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  404   uint8 *msg_ptr;
//  405 
//  406   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??ZDApp_event_loop_0
//  407   {
//  408     while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
//  409     {
//  410       ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
//  411 
//  412       // Release the memory
//  413       osal_msg_deallocate( msg_ptr );
//  414     }
//  415 
//  416     // Return unprocessed events
//  417     return (events ^ SYS_EVENT_MSG);
//  418   }
//  419 
//  420   if ( events & ZDO_NETWORK_INIT )
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??ZDApp_event_loop_1
//  421   {
//  422     // Initialize apps and start the network
//  423     ZDApp_ChangeState( DEV_INIT );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x1
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  424 
//  425     ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
//  426                      DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
        ; Setup parameters for call to function ZDO_StartDevice
        MOV       R4,#0xf
        MOV       R3,#0xf
        MOV       DPTR,#devStartMode
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R1,A
        LCALL     `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
//  427 
//  428     // Return unprocessed events
//  429     return (events ^ ZDO_NETWORK_INIT);
        MOV       A,R6
        XRL       A,#0x1
        LJMP      ??ZDApp_event_loop_2 & 0xFFFF
//  430   }
??ZDApp_event_loop_3:
        ; Setup parameters for call to function ZDApp_ProcessOSALMsg
        LCALL     `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??ZDApp_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JNZ       ??ZDApp_event_loop_3
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        LJMP      ??ZDApp_event_loop_4 & 0xFFFF
//  431 
//  432   if ( ZSTACK_ROUTER_BUILD )
//  433   {
//  434     if ( events & ZDO_NETWORK_START )
//  435     {
//  436       ZDApp_NetworkStartEvt();
//  437 
//  438       // Return unprocessed events
//  439       return (events ^ ZDO_NETWORK_START);
//  440     }
//  441 
//  442     if ( events & ZDO_ROUTER_START )
//  443     {
//  444       if ( nwkStatus == ZSuccess )
//  445       {
//  446         if ( devState == DEV_END_DEVICE )
//  447         {
//  448           ZDApp_ChangeState( DEV_ROUTER );
//  449         }
//  450 
//  451         osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
//  452 
//  453         if ( zgChildAgingEnable == TRUE )
//  454         {
//  455           // Once the device has changed its state to a ROUTER set the timer to send
//  456           // Parent annce
//  457           ZDApp_SetParentAnnceTimer();
//  458         }
//  459       }
//  460       else
//  461       {
//  462         // remain as end device
//  463       }
//  464       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
//  465 
//  466       // Return unprocessed events
//  467       return (events ^ ZDO_ROUTER_START);
//  468     }
//  469 
//  470     if ( events & ZDO_PARENT_ANNCE_EVT )
//  471     {
//  472       ZDApp_SendParentAnnce();
//  473 
//  474       // Return unprocessed events
//  475       return (events ^ ZDO_PARENT_ANNCE_EVT);
//  476     }
//  477   }
//  478 
//  479   if ( ZSTACK_END_DEVICE_BUILD )
//  480   {
//  481     if ( events & ZDO_VOLTAGE_CHECK )
//  482     {
//  483       nwkPollCount = 0;
//  484       OnBoard_CheckVoltage();
//  485 
//  486       return (events ^ ZDO_VOLTAGE_CHECK);
//  487     }
//  488   }
//  489 
//  490   if( events & ZDO_REJOIN_BACKOFF )
??ZDApp_event_loop_1:
        MOV       A,R3
        ANL       A,#0x20
        JZ        ??ZDApp_event_loop_5
//  491   {
//  492     if( devState == DEV_NWK_BACKOFF )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0xc
        JNZ       ??ZDApp_event_loop_6
//  493     {
//  494       ZDApp_ChangeState(DEV_NWK_DISC);
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x2
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  495       // Restart scan for rejoin
//  496       ZDApp_StartJoiningCycle();
        ; Setup parameters for call to function ZDApp_StartJoiningCycle
        LCALL     `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
//  497       osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#zgDefaultRejoinScan
        SJMP      ??ZDApp_event_loop_7
//  498     }
//  499     else
//  500     {
//  501       // Rejoin backoff, silent period
//  502       ZDApp_ChangeState(DEV_NWK_BACKOFF);
??ZDApp_event_loop_6:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0xc
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  503       ZDApp_StopJoiningCycle();
        ; Setup parameters for call to function ZDApp_StopJoiningCycle
        LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
//  504       osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#zgDefaultRejoinBackoff
??ZDApp_event_loop_7:
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R2,#0x0
        MOV       R3,#0x20
//  505     }
        LCALL     ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_86:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  506 
//  507     return ( events ^ ZDO_REJOIN_BACKOFF);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x20
        SJMP      ??ZDApp_event_loop_4
//  508   }
//  509 
//  510   if ( events & ZDO_STATE_CHANGE_EVT )
??ZDApp_event_loop_5:
        MOV       A,R2
        ANL       A,#0x10
        JZ        ??ZDApp_event_loop_8
//  511   {
//  512     ZDO_UpdateNwkStatus( devState );
        ; Setup parameters for call to function ZDO_UpdateNwkStatus
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
//  513 
//  514     // At start up, do one MTO route discovery if the device is a concentrator
//  515     if ( zgConcentratorEnable == TRUE )
        MOV       DPTR,#zgConcentratorEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_event_loop_9
//  516     {
//  517       // Start next event
//  518       osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_64
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#NWK_TaskID
        LCALL     ??Subroutine59_0 & 0xFFFF
//  519     }
??CrossCallReturnLabel_87:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  520 
//  521     // Return unprocessed events
//  522     return (events ^ ZDO_STATE_CHANGE_EVT);
??ZDApp_event_loop_9:
        MOV       A,R6
        XRL       A,#0x10
??ZDApp_event_loop_2:
        MOV       R2,A
        MOV       A,R7
        SJMP      ??ZDApp_event_loop_4
//  523   }
//  524 
//  525   if ( events & ZDO_COMMAND_CNF )
??ZDApp_event_loop_8:
        MOV       A,R2
        ANL       A,#0x8
        JZ        ??ZDApp_event_loop_10
//  526   {
//  527     // User defined logic
//  528 
//  529     // Return unprocessed events
//  530     return (events ^ ZDO_COMMAND_CNF);
        MOV       A,R2
        XRL       A,#0x8
        MOV       R2,A
        SJMP      ??ZDApp_event_loop_11
//  531   }
//  532 
//  533   if ( events & ZDO_NWK_UPDATE_NV )
??ZDApp_event_loop_10:
        MOV       A,R3
        ANL       A,#0x1
        JZ        ??ZDApp_event_loop_12
//  534   {
//  535     // Save only in valid state
//  536     if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
        MOV       DPTR,#_NIB + 35
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x8
        XRL       A,R0
        JZ        ??ZDApp_event_loop_13
        MOV       A,#0x4
        XRL       A,R0
        JNZ       ??ZDApp_event_loop_14
//  537     {
//  538       ZDApp_SaveNetworkStateEvt();
??ZDApp_event_loop_13:
        ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
        LCALL     `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
//  539     }
//  540 
//  541     // Return unprocessed events
//  542     return (events ^ ZDO_NWK_UPDATE_NV);
??ZDApp_event_loop_14:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x1
??ZDApp_event_loop_4:
        MOV       R3,A
        SJMP      ??ZDApp_event_loop_11
//  543   }
//  544 
//  545   if ( events & ZDO_DEVICE_RESET )
??ZDApp_event_loop_12:
        MOV       A,R2
        ANL       A,#0x4
        JZ        ??ZDApp_event_loop_15
//  546   {
//  547 #ifdef ZBA_FALLBACK_NWKKEY
//  548     if ( devState == DEV_END_DEVICE_UNAUTH )
//  549     {
//  550       ZDSecMgrFallbackNwkKey();
//  551     }
//  552     else
//  553 #endif
//  554     {
//  555       // Set the NV startup option to force a "new" join.
//  556       zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE | ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  557 
//  558       // The device has been in the UNAUTH state, so reset
//  559       // Note: there will be no return from this call
//  560       SystemResetSoft();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL     Onboard_soft_reset & 0xFFFF
//  561     }
//  562   }
//  563 
//  564 #if defined ( ZDP_BIND_VALIDATION )
//  565   if ( events & ZDO_PENDING_BIND_REQ_EVT )
//  566   {
//  567 #if defined ( REFLECTOR )
//  568     ZDApp_AgeOutPendingBindEntry();
//  569 #endif
//  570     // Return unprocessed events
//  571     return (events ^ ZDO_PENDING_BIND_REQ_EVT);
//  572   }
//  573 #endif
//  574 
//  575   if ( ZG_SECURE_ENABLED )
//  576   {
//  577     return ( ZDApp_ProcessSecEvent( task_id, events ) );
??ZDApp_event_loop_15:
        ; Setup parameters for call to function ZDApp_ProcessSecEvent
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V2
        LCALL     `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
//  578   }
??ZDApp_event_loop_11:
          CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  579   else
//  580   {
//  581     // Discard or make more handlers
//  582     return 0;
//  583   }
//  584 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  585 
//  586 /*********************************************************************
//  587  * @fn      ZDApp_ProcessSecEvent()
//  588  *
//  589  * @brief   Process incoming security events.
//  590  *
//  591  * @param   task_id - Task ID
//  592  * @param   events  - Bitmap of events
//  593  *
//  594  * @return  none
//  595  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  596 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
ZDApp_ProcessSecEvent:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
        CODE
//  597 {
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_StoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_DeviceAuthEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrSaveApsLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrSaveTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  598   (void)task_id;  // Intentionally unreferenced parameter
//  599 
//  600   if ( ZSTACK_ROUTER_BUILD )
//  601   {
//  602     if ( events & ZDO_NEW_DEVICE )
//  603     {
//  604       // process the new device event
//  605       if ( ZDApp_NewDeviceList )
//  606       {
//  607         ZDAppNewDevice_t *pNewDevice;
//  608         uint16 timeDelta;
//  609 
//  610         (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
//  611 
//  612         pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
//  613         osal_mem_free( ZDApp_NewDeviceList );
//  614         ZDApp_NewDeviceList = pNewDevice;
//  615 
//  616         if ( pNewDevice )
//  617         {
//  618           timeDelta = pNewDevice->timeDelta;
//  619           pNewDevice = pNewDevice->next;
//  620 
//  621           while ( pNewDevice )
//  622           {
//  623             pNewDevice->timeDelta -= timeDelta;
//  624             pNewDevice = pNewDevice->next;
//  625           }
//  626 
//  627           osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
//  628         }
//  629       }
//  630 
//  631       // Return unprocessed events
//  632       return (events ^ ZDO_NEW_DEVICE);
//  633     }
//  634   }
//  635 
//  636   if ( events & ZDO_DEVICE_AUTH )
        MOV       A,R2
        ANL       A,#0x80
        JZ        ??ZDApp_ProcessSecEvent_0
//  637   {
//  638     ZDApp_StoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
        LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
//  639     
//  640     ZDApp_DeviceAuthEvt();
        ; Setup parameters for call to function ZDApp_DeviceAuthEvt
        LCALL     `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
//  641 
//  642     bdb_setNodeIsOnANetwork(TRUE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x1
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  643     
//  644     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x3
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  645 
//  646     // Return unprocessed events
//  647     return (events ^ ZDO_DEVICE_AUTH);
        MOV       A,R6
        XRL       A,#0x80
        MOV       R2,A
        MOV       A,R7
        SJMP      ??ZDApp_ProcessSecEvent_1
//  648   }
//  649 
//  650   if ( events & ZDO_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_0:
        MOV       A,R3
        ANL       A,#0x2
        JZ        ??ZDApp_ProcessSecEvent_2
//  651   {
//  652     ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
//  653 
//  654     // Return unprocessed events
//  655     return (events ^ ZDO_FRAMECOUNTER_CHANGE);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x2
        SJMP      ??ZDApp_ProcessSecEvent_1
//  656   }
//  657 
//  658   if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_2:
        MOV       A,R3
        ANL       A,#0x8
        JZ        ??ZDApp_ProcessSecEvent_3
//  659   {
//  660 #if defined (NV_RESTORE)
//  661     ZDSecMgrSaveApsLinkKey();
        ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
        LCALL     `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
//  662 #endif // (NV_RESTORE)
//  663 
//  664     // Return unprocessed events
//  665     return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x8
        SJMP      ??ZDApp_ProcessSecEvent_1
//  666   }
//  667 
//  668   if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_3:
        MOV       A,R3
        ANL       A,#0x4
        JZ        ??ZDApp_ProcessSecEvent_4
//  669   {
//  670     ZDSecMgrSaveTCLinkKey();
        ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
        LCALL     `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
//  671 
//  672     // Return unprocessed events
//  673     return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x4
??ZDApp_ProcessSecEvent_1:
        MOV       R3,A
        SJMP      ??ZDApp_ProcessSecEvent_5
//  674   }
//  675 
//  676   // Discard or make more handlers
//  677   return 0;
??ZDApp_ProcessSecEvent_4:
        MOV       R2,#0x0
        MOV       R3,#0x0
??ZDApp_ProcessSecEvent_5:
        LJMP      ??Subroutine48_0 & 0xFFFF
//  678 }
          CFI EndBlock cfiBlock4
//  679 
//  680 /*********************************************************************
//  681  * Application Functions
//  682  */
//  683 
//  684 /*********************************************************************
//  685  * @fn      ZDOInitDevice
//  686  *
//  687  * @brief   Start the device in the network.  This function will read
//  688  *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
//  689  *   restore the network state of the device.
//  690  *
//  691  * @param   startDelay - timeDelay to start device (in milliseconds).
//  692  *                       There is a jitter added to this delay:
//  693  *                       ((NWK_START_DELAY + startDelay)
//  694  *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
//  695  *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
//  696  *                       this function will hold the network init. Application
//  697  *                       can start the device.
//  698  * #@param  mode       - ZDO_INITDEV_CENTRALIZED or ZDO_INITDEV_DISTRIBUTED to specify
//  699  *                       which mode should the device start with (only has effect on 
//  700  *                       Router devices)
//  701  *
//  702  * NOTE:    If the application would like to force a "new" join, the
//  703  *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  704  *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
//  705  *          this function. "new" join means to not restore the network
//  706  *          state of the device. Use zgWriteStartupOptions() to set these
//  707  *          options.
//  708  *
//  709  * @return
//  710  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  711  *          restored.
//  712  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
//  713  *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
//  714  *          it could mean that there was no network state to restore.
//  715  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  716 uint8 ZDOInitDeviceEx( uint16 startDelay, uint8 mode)
ZDOInitDeviceEx:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ZDOInitDeviceEx
        CODE
//  717 {
        FUNCALL ZDOInitDeviceEx, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDConfig_InitDescriptors
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, NLME_InitNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, NLME_SetDefaultNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDSecMgrClearNVKeyValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDAppDetermineDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, NLME_SetUpdateID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDSecMgrUpdateTCAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_ReadNetworkRestoreState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_RestoreNetworkState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDSecMgrUpdateTCAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_SecInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_LeaveCtrlInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       ?V1,R1
//  718   uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        MOV       ?V0,#0x1
//  719   uint16 extendedDelay = 0;
        MOV       R6,#0x0
        MOV       R7,#0x0
//  720   
//  721   if ( devState == DEV_HOLD )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        JNZ       ??ZDOInitDeviceEx_0
//  722   {
//  723     byte temp = FALSE;
        CLR       A
        MOVX      @DPTR,A
//  724     // Initialize the RAM items table, in case an NV item has been updated.
//  725     zgInitItems( FALSE );
        ; Setup parameters for call to function zgInitItems
        MOV       R1,A
        LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
//  726     
//  727     //Turn off the radio
//  728     ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
        SJMP      ??ZDOInitDeviceEx_1
//  729   }
//  730   else
//  731   {
//  732     byte temp = TRUE;
??ZDOInitDeviceEx_0:
        MOV       A,#0x1
        MOVX      @DPTR,A
//  733     //Turn on the radio
//  734     ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
??ZDOInitDeviceEx_1:
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
//  735   }
//  736 
//  737   ZDConfig_InitDescriptors();
        ; Setup parameters for call to function ZDConfig_InitDescriptors
        LCALL     `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
//  738   //devtag.071807.todo - fix this temporary solution
//  739   _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 14
        MOVX      @DPTR,A
//  740 
//  741 #if defined ( NV_RESTORE )
//  742   // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
//  743   // while booting to skip past NV Restore.
//  744   if ( zdappHoldKeys == SW_BYPASS_NV )
        MOV       DPTR,#zdappHoldKeys
        MOVX      A,@DPTR
        XRL       A,#0x4
        JNZ       ??ZDOInitDeviceEx_2
//  745   {
//  746     zdappHoldKeys = 0;   // Only once
        CLR       A
        MOVX      @DPTR,A
//  747     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  748   }
//  749   else
//  750   {
//  751 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
//  752     if ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
//  753     {
//  754       networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
//  755     }
//  756     else
//  757     {
//  758       // Determine if NV should be restored
//  759       networkStateNV = ZDApp_ReadNetworkRestoreState();
//  760     }
//  761 #else
//  762     // Determine if NV should be restored
//  763     networkStateNV = ZDApp_ReadNetworkRestoreState();
//  764 #endif
//  765   }
//  766 
//  767   if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  768   {
//  769     networkStateNV = ZDApp_RestoreNetworkState();
//  770 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
//  771     if ( ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL ) && ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE ) )
//  772     {
//  773       networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
//  774     }
//  775 #endif
//  776     runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
//  777   }
//  778   else
//  779   {
//  780     // Wipe out the network state in NV
//  781     NLME_InitNV();
??ZDOInitDeviceEx_3:
        ; Setup parameters for call to function NLME_InitNV
        LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
//  782     NLME_SetDefaultNV();
        ; Setup parameters for call to function NLME_SetDefaultNV
        LCALL     `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
//  783     // clear NWK key values
//  784     ZDSecMgrClearNVKeyValues();
        ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
        LCALL     `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
//  785   }
//  786 #endif
//  787 
//  788   if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
??ZDOInitDeviceEx_4:
        MOV       A,#0x1
        XRL       A,?V0
        JZ        $+5
        LJMP      ??ZDOInitDeviceEx_5 & 0xFFFF
//  789   {
//  790     ZDAppDetermineDeviceType();
        ; Setup parameters for call to function ZDAppDetermineDeviceType
        LCALL     `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
//  791 
//  792     // Only delay if joining network - not restoring network state
//  793     extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
//  794               + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        MOV       A,R2
        ANL       A,#0x7f
        MOV       R0,A
        MOV       A,?V2
        ADD       A,R0
        MOV       R0,A
        CLR       A
        ADDC      A,?V3
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0x64
        MOV       R6,A
        CLR       A
        ADDC      A,R1
        MOV       R7,A
//  795 
//  796     runtimeChannel = zgDefaultChannelList;
        MOV       DPTR,#zgDefaultChannelList
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#runtimeChannel
        LCALL     ?XSTORE_R0123
//  797     
//  798     // Set the NV startup option to force a "new" join.
//  799     zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x2
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  800     
//  801 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  802     gp_ProxyTblInit( TRUE );
//  803 #elif defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  804     uint16 i;
//  805     uint8 status;
//  806     uint8 emptyEntry[] = {0xFF, 0xFF, /* Options 16-bit bitmap */  \ 
//  807                          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /*GPD ID Unsigned 32-bit integer/ IEEE address */  \ 
//  808                          0x00, /* Endpoint Unsigned 8-bit integer */  \ 
//  809                          0xFF, 0xFF, /* GPD Assigned Alias Unsigned 16-bit integer */  \ 
//  810                          0xFF, /* Security Options 8-bit bitmap */  \ 
//  811                          0xFF, 0xFF, 0xFF, 0xFF, /* GPD security frame counter Unsigned 32-bit Integer */  \ 
//  812                          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* GPD key Security key */  \ 
//  813                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Lightweight sink address list sequence of octets */  \ 
//  814                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \ 
//  815                          0x00, /* Free group entries flag */  \ 
//  816                          0x00, 0x00, 0x00, 0x00, /* Sink group list sequence of octets */  \ 
//  817                          0x00, 0x00, 0x00, 0x00,  \ 
//  818                          0x00, /* Groupcast radius Unsigned 8-bit integer */  \ 
//  819                          0x00 /* Search Counter Unsigned 8-bit integer */  \ 
//  820                          };
//  821     for( i = ZCD_NV_PROXY_TABLE_START; i <= ZCD_NV_PROXY_TABLE_END; i++ )
//  822     {
//  823       status = osal_nv_write( ( ZCD_NV_PROXY_TABLE_START + i ), 0,
//  824                                           sizeof(emptyEntry), &emptyEntry );
//  825       
//  826       if( status != SUCCESS )
//  827       {
//  828         break;
//  829       }
//  830     }
//  831 #endif
//  832 
//  833     _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV       DPTR,#_NIB + 20
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
//  834     _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
        MOV       DPTR,#_NIB + 23
        DEC       A
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
//  835     _NIB.nwkPanId = 0xFFFF;
        MOV       DPTR,#_NIB + 33
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  836     osal_memset(_NIB.extendedPANID, 0, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,#(_NIB + 53) & 0xff
        MOV       R3,#((_NIB + 53) >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  837     NLME_SetUpdateID( 0 );
        ; Setup parameters for call to function NLME_SetUpdateID
        MOV       R1,#0x0
        LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
//  838     
//  839     if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDOInitDeviceEx_6
//  840     {
//  841       if(1 == mode)
        MOV       A,#0x1
        XRL       A,?V1
        JNZ       ??ZDOInitDeviceEx_7
//  842       {
//  843         //Update TC address as distributed network (TC none)
//  844         ZDSecMgrUpdateTCAddress(0);
        ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??ZDOInitDeviceEx_8
//  845       }
??ZDOInitDeviceEx_2:
        ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
        LCALL     `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
        MOV       A,R1
        MOV       ?V0,A
        JZ        $+5
        LJMP      ??ZDOInitDeviceEx_3 & 0xFFFF
        ; Setup parameters for call to function ZDApp_RestoreNetworkState
        LCALL     `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
        MOV       A,R1
        MOV       ?V0,A
        MOV       ?V4,#0x1
        MOV       ?V5,R6
        MOV       ?V6,R6
        MOV       ?V7,R6
        MOV       DPTR,#_NIB + 22
        MOVX      A,@DPTR
        MOV       R0,#?V4
        LCALL     ?L_SHL
        MOV       DPTR,#runtimeChannel
        MOV       A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V5
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V7
        MOVX      @DPTR,A
        LJMP      ??ZDOInitDeviceEx_4 & 0xFFFF
//  846       else
//  847       {
//  848         // Centralized mode
//  849         uint8 tmp[Z_EXTADDR_LEN];
//  850         osal_memset(tmp,0x00,Z_EXTADDR_LEN);
??ZDOInitDeviceEx_7:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  851         ZDSecMgrUpdateTCAddress(tmp);
        ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
??ZDOInitDeviceEx_8:
        LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
//  852       }
//  853     }
//  854 
//  855     // Update NIB in NV
//  856     osal_nv_write( ZCD_NV_NIB, 0, sizeof( nwkIB_t ), &_NIB );
??ZDOInitDeviceEx_6:
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V4,#_NIB & 0xff
        MOV       ?V5,#(_NIB >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       ?V4,#0x6e
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x21
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
//  857 
//  858     // Reset the NV startup option to resume from NV by clearing
//  859     // the "New" join option.
//  860     zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x2
        MOV       R1,#0x0
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  861   
//  862   }
//  863 
//  864   // Initialize the security for type of device
//  865   ZDApp_SecInit( networkStateNV );
??ZDOInitDeviceEx_5:
        ; Setup parameters for call to function ZDApp_SecInit
        MOV       R1,?V0
        LCALL     `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
//  866 
//  867   if( ZDO_INIT_HOLD_NWK_START != startDelay )
        MOV       A,#-0x1
        XRL       A,?V2
        JNZ       ??ZDOInitDeviceEx_9
        MOV       A,#-0x1
        XRL       A,?V3
??ZDOInitDeviceEx_9:
        JZ        ??ZDOInitDeviceEx_10
//  868   {
//  869     devState = DEV_INIT;    // Remove the Hold state
        MOV       DPTR,#devState
        MOV       A,#0x1
        MOVX      @DPTR,A
//  870 
//  871     // Initialize leave control logic
//  872     ZDApp_LeaveCtrlInit();
        ; Setup parameters for call to function ZDApp_LeaveCtrlInit
        LCALL     `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
//  873 
//  874     // Trigger the network start
//  875     ZDApp_NetworkInit( extendedDelay );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
//  876   }
//  877 
//  878   // set broadcast address mask to support broadcast filtering
//  879   NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
??ZDOInitDeviceEx_10:
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
//  880 
//  881   return ( networkStateNV );
        MOV       R1,?V0
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock5
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  882 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function ZDApp_SaveNwkKey
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function ZDApp_ResetNwkKey
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7e
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function ZDOInitDeviceEx
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function ZDApp_LeaveCtrlSet
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function ZDApp_LeaveCtrlReset
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function ZDApp_SaveNwkKey
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function ZDApp_ResetNwkKey
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function ZDApp_StoreNwkSecMaterial
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function ZDApp_SaveNwkKey
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function ZDApp_RestoreNwkSecMaterial
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function ZDOInitDeviceEx
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function ZDApp_LeaveCtrlSet
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function ZDApp_LeaveCtrlReset
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function ZDApp_SaveNwkKey
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function ZDApp_ResetNwkKey
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24
//  883 
//  884 /*********************************************************************
//  885  * @fn      ZDApp_ReadNetworkRestoreState
//  886  *
//  887  * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
//  888  *          or not to restore the network state.
//  889  *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  890  *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
//  891  *
//  892  * @param   none
//  893  *
//  894  * @return  ZDO_INITDEV_NEW_NETWORK_STATE
//  895  *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
//  896  *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
//  897  *          ZCD_NV_STARTUP_OPTION
//  898  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  899 uint8 ZDApp_ReadNetworkRestoreState( void )
ZDApp_ReadNetworkRestoreState:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function ZDApp_ReadNetworkRestoreState
        CODE
//  900 {
        FUNCALL ZDApp_ReadNetworkRestoreState, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ReadNetworkRestoreState, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  901   uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
        MOV       R6,#0x0
//  902 
//  903   // Look for the New Network State option.
//  904   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
        MOV       A,R1
        MOV       R0,A
        MOV       C,0xE0 /* A   */.1
        JNC       ??ZDApp_ReadNetworkRestoreState_0
//  905   {
//  906     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        MOV       R6,#0x1
//  907     bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  908   }
//  909 
//  910   return ( networkStateNV );
??ZDApp_ReadNetworkRestoreState_0:
        MOV       A,R6
        MOV       R1,A
        LJMP      ??Subroutine48_0 & 0xFFFF
//  911 }
          CFI EndBlock cfiBlock25
//  912 
//  913 /*********************************************************************
//  914  * @fn      ZDAppDetermineDeviceType()
//  915  *
//  916  * @brief   Determines the type of device to start.
//  917  *
//  918  *          Looks at zgDeviceLogicalType and determines what type of
//  919  *          device to start.  The types are:
//  920  *            ZG_DEVICETYPE_COORDINATOR
//  921  *            ZG_DEVICETYPE_ROUTER
//  922  *            ZG_DEVICETYPE_ENDDEVICE
//  923  *
//  924  * @param   none
//  925  *
//  926  * @return  none
//  927  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  928 void ZDAppDetermineDeviceType( void )
ZDAppDetermineDeviceType:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function ZDAppDetermineDeviceType
        CODE
//  929 {
        FUNCALL ZDAppDetermineDeviceType, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  930   if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JNZ       ??ZDAppDetermineDeviceType_0
//  931   {
//  932     devStartMode = MODE_HARD;     // Start as a coordinator
        MOV       DPTR,#devStartMode
        MOV       A,#0x2
        MOVX      @DPTR,A
//  933     ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0xf8
        SJMP      ??ZDAppDetermineDeviceType_1
//  934   }
//  935   else
//  936   {
//  937     if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
??ZDAppDetermineDeviceType_0:
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0xf8
        MOV       R0,A
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDAppDetermineDeviceType_2
//  938       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
        MOV       A,#0x1
        SJMP      ??ZDAppDetermineDeviceType_3
//  939     else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
??ZDAppDetermineDeviceType_2:
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDAppDetermineDeviceType_4
//  940       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV       A,#0x2
??ZDAppDetermineDeviceType_3:
        ORL       A,R0
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      @DPTR,A
//  941 
//  942     // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
//  943     // The device shall do rejoin the network. Otherwise, do normal join
//  944     if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
??ZDAppDetermineDeviceType_4:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV       R2,#AIB_apsUseExtendedPANID & 0xff
        MOV       R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
        LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV       A,R1
        MOV       DPTR,#devStartMode
        JNZ       ??ZDAppDetermineDeviceType_5
//  945     {
//  946       devStartMode = MODE_JOIN;     // Assume joining
        CLR       A
        SJMP      ??ZDAppDetermineDeviceType_1
//  947     }
//  948     else
//  949     {
//  950       devStartMode = MODE_REJOIN;
??ZDAppDetermineDeviceType_5:
        MOV       A,#0x3
        MOVX      @DPTR,A
//  951       prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
        MOV       DPTR,#prevDevState
        INC       A
??ZDAppDetermineDeviceType_1:
        MOVX      @DPTR,A
//  952     }
//  953   }
//  954 }
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock26
//  955 
//  956 /*********************************************************************
//  957  * @fn      ZDApp_NetworkStartEvt()
//  958  *
//  959  * @brief   Process the Network Start Event
//  960  *
//  961  * @param   none
//  962  *
//  963  * @return  none
//  964  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  965 void ZDApp_NetworkStartEvt( void )
ZDApp_NetworkStartEvt:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function ZDApp_NetworkStartEvt
        CODE
//  966 {
        FUNCALL ZDApp_NetworkStartEvt, AddrMgrWriteNVRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, ZDApp_ChangeState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, bdb_nwkFormationAttempt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, ZDApp_StoreNwkSecMaterial
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, ZDApp_SetParentAnnceTimer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_pwrmgr_device
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_SetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, bdb_nwkFormationAttempt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  967   if ( nwkStatus == ZSuccess )
        MOV       DPTR,#nwkStatus
        MOVX      A,@DPTR
        JNZ       ??ZDApp_NetworkStartEvt_0
//  968   {
//  969     // Successfully started a ZigBee network
//  970     if ( devState == DEV_COORD_STARTING )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x8
        JNZ       ??ZDApp_NetworkStartEvt_1
//  971     {
//  972       //save NIB to NV before child joins if NV_RESTORE is defined
//  973       ZDApp_NwkWriteNVRequest();
        ; Setup parameters for call to function AddrMgrWriteNVRequest
        LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
//  974       ZDApp_ChangeState( DEV_ZB_COORD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x9
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  975       
//  976       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FORMATION)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x5
        JNZ       ??ZDApp_NetworkStartEvt_2
//  977       {
//  978         bdb_nwkFormationAttempt(TRUE);
        ; Setup parameters for call to function bdb_nwkFormationAttempt
        MOV       R1,#0x1
        LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
//  979         ZDApp_StoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
        LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
        SJMP      ??ZDApp_NetworkStartEvt_3
//  980       }
//  981       else if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION)
??ZDApp_NetworkStartEvt_2:
        MOVX      A,@DPTR
        XRL       A,#0x7
        JNZ       ??ZDApp_NetworkStartEvt_3
//  982       {
//  983         bdb_reportCommissioningState(BDB_INITIALIZATION,TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x7
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  984       }
//  985 
//  986       if ( zgChildAgingEnable == TRUE )
??ZDApp_NetworkStartEvt_3:
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??CrossCallReturnLabel_118
//  987       {
//  988         // Once the device has changed its state to a COORDINATOR set the timer to send
//  989         // Parent annce
//  990         ZDApp_SetParentAnnceTimer();
        ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
        LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
        SJMP      ??CrossCallReturnLabel_118
//  991       }
//  992     }
//  993     else
//  994     {
//  995       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_NetworkStartEvt_1:
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine15 & 0xFFFF
//  996     }
//  997 
//  998     osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??CrossCallReturnLabel_118:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV       R1,#0x0
        LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
        SJMP      ??ZDApp_NetworkStartEvt_4
//  999   }
// 1000   else
// 1001   {
// 1002     // Try again with a higher energy threshold
// 1003     if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
??ZDApp_NetworkStartEvt_0:
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
        MOV       A,R1
        MOV       R1,#0x0
        ADD       A,#0x10
        JNC       ??ZDApp_NetworkStartEvt_5
        INC       R1
??ZDApp_NetworkStartEvt_5:
        CLR       C
        SUBB      A,#-0x1
        MOV       A,R1
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JNC       ??ZDApp_NetworkStartEvt_6
// 1004     {
// 1005       NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
        MOV       A,R1
        MOV       R0,A
        ; Setup parameters for call to function NLME_SetEnergyThreshold
        MOV       A,#0x10
        ADD       A,R1
        MOV       R1,A
        LCALL     `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
// 1006       osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x1
        LCALL     ??Subroutine70_0 & 0xFFFF
// 1007     }
??CrossCallReturnLabel_123:
        SJMP      ??ZDApp_NetworkStartEvt_4
// 1008     else
// 1009     {
// 1010       bdb_nwkFormationAttempt(FALSE);
??ZDApp_NetworkStartEvt_6:
        ; Setup parameters for call to function bdb_nwkFormationAttempt
        MOV       R1,#0x0
        LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
// 1011     }
// 1012   }
// 1013 }
??ZDApp_NetworkStartEvt_4:
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock27
// 1014 
// 1015 /*********************************************************************
// 1016  * @fn      ZDApp_DeviceAuthEvt()
// 1017  *
// 1018  * @brief   Process the Device Authentic Event
// 1019  *
// 1020  * @param   none
// 1021  *
// 1022  * @return  none
// 1023  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1024 void ZDApp_DeviceAuthEvt( void )
ZDApp_DeviceAuthEvt:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
        CODE
// 1025 {
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ResetTimerCancel
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ChangeState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_SetPollRate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1026   // received authentication from trust center
// 1027   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x5
        JNZ       ??ZDApp_DeviceAuthEvt_0
// 1028   {
// 1029     // Stop the reset timer so it doesn't reset
// 1030     ZDApp_ResetTimerCancel();
        ; Setup parameters for call to function ZDApp_ResetTimerCancel
        LCALL     `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
// 1031 
// 1032     ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1033 
// 1034     // Set the Power Manager Device
// 1035 #if defined ( POWER_SAVING )
// 1036     osal_pwrmgr_device( PWRMGR_BATTERY );
// 1037 #endif
// 1038 
// 1039     if ( ZSTACK_ROUTER_BUILD )
// 1040     {
// 1041       if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
// 1042       {
// 1043         // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1044         NLME_StartRouterRequest( 0, 0, false );
// 1045       }
// 1046     }
// 1047 
// 1048     // Notify to save info into NV
// 1049     ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 1050 
// 1051     // Save off the security
// 1052     ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
// 1053 
// 1054     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1055 
// 1056     if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
// 1057         || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
// 1058           && (zgChildAgingEnable == TRUE) ) )
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??ZDApp_DeviceAuthEvt_1
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_DeviceAuthEvt_2
// 1059     {
// 1060       NLME_SetPollRate( ZDApp_SavedPollRate );
??ZDApp_DeviceAuthEvt_1:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#ZDApp_SavedPollRate
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
        SJMP      ??ZDApp_DeviceAuthEvt_2
// 1061     }
// 1062   }
// 1063   else
// 1064   {
// 1065     ZDApp_NVUpdate();
??ZDApp_DeviceAuthEvt_0:
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 1066   }
// 1067 }
??ZDApp_DeviceAuthEvt_2:
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock28
// 1068 
// 1069 /*********************************************************************
// 1070  * @fn      ZDApp_SaveNetworkStateEvt()
// 1071  *
// 1072  * @brief   Process the Save the Network State Event
// 1073  *
// 1074  * @param   none
// 1075  *
// 1076  * @return  none
// 1077  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1078 void ZDApp_SaveNetworkStateEvt( void )
ZDApp_SaveNetworkStateEvt:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function ZDApp_SaveNetworkStateEvt
        CODE
// 1079 {
        FUNCALL ZDApp_SaveNetworkStateEvt, NLME_UpdateNV
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNetworkStateEvt, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1080 #if defined ( NV_RESTORE )
// 1081  #if defined ( NV_TURN_OFF_RADIO )
// 1082   // Turn off the radio's receiver during an NV update
// 1083   uint8 RxOnIdle;
// 1084   uint8 x = false;
// 1085   ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
// 1086   ZMacSetReq( ZMacRxOnIdle, &x );
// 1087  #endif
// 1088 
// 1089   // Update the Network State in NV
// 1090   NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
// 1091                  NWK_NV_DEVICELIST_ENABLE |
// 1092                  NWK_NV_BINDING_ENABLE    |
// 1093                  NWK_NV_ADDRMGR_ENABLE );
        ; Setup parameters for call to function NLME_UpdateNV
        MOV       R1,#0xf
        LCALL     `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
// 1094 
// 1095   // Reset the NV startup option to resume from NV by
// 1096   // clearing the "New" join option.
// 1097   zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x2
        MOV       R1,#0x0
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
// 1098 
// 1099  #if defined ( NV_TURN_OFF_RADIO )
// 1100   ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
// 1101  #endif
// 1102 #endif // NV_RESTORE
// 1103 }
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock29
// 1104 
// 1105 #if defined ( NV_RESTORE )
// 1106 /*********************************************************************
// 1107  * @fn      ZDApp_RestoreNetworkState()
// 1108  *
// 1109  * @brief   This function will restore the network state of the
// 1110  *          device if the network state is stored in NV.
// 1111  *
// 1112  * @param   none
// 1113  *
// 1114  * @return
// 1115  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
// 1116  *          restored.
// 1117  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
// 1118  *          This could mean that zgStartupOption said to not restore, or
// 1119  *          it could mean that there was no network state to restore.
// 1120  *
// 1121  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1122 uint8 ZDApp_RestoreNetworkState( void )
ZDApp_RestoreNetworkState:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function ZDApp_RestoreNetworkState
        CODE
// 1123 {
        FUNCALL ZDApp_RestoreNetworkState, NLME_InitNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_RestoreFromNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1124   uint8 nvStat;
// 1125 
// 1126   // Initialize NWK NV items
// 1127   nvStat = NLME_InitNV();
        ; Setup parameters for call to function NLME_InitNV
        LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
        MOV       A,R1
        MOV       R6,A
// 1128 
// 1129   if ( nvStat == SUCCESS )
        JNZ       ??ZDApp_RestoreNetworkState_0
// 1130   {
// 1131     if ( NLME_RestoreFromNV() )
        ; Setup parameters for call to function NLME_RestoreFromNV
        LCALL     `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
        MOV       A,R1
        JZ        ??ZDApp_RestoreNetworkState_1
// 1132     {
// 1133       // Are we a coordinator
// 1134       ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       DPTR,#ZDAppNwkAddr
        LCALL     ??Subroutine72_0 & 0xFFFF
// 1135       if ( ZDAppNwkAddr.addr.shortAddr == 0 )
??CrossCallReturnLabel_129:
        MOV       R1,A
        MOV       A,R2
        ORL       A,R1
        JNZ       ??ZDApp_RestoreNetworkState_2
// 1136       {
// 1137         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0xf8
        MOVX      @DPTR,A
// 1138       }
// 1139       if(ZG_DEVICE_ENDDEVICE_TYPE) 
// 1140       {
// 1141         devStartMode = MODE_REJOIN;
??ZDApp_RestoreNetworkState_2:
        MOV       DPTR,#devStartMode
        MOV       A,#0x3
        MOVX      @DPTR,A
// 1142         _NIB.nwkState = NWK_INIT;
        MOV       DPTR,#_NIB + 35
        CLR       A
        LCALL     ?Subroutine9 & 0xFFFF
// 1143       }
// 1144       else
// 1145       {
// 1146         devStartMode = MODE_RESUME;
// 1147       }
// 1148       osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
// 1149     }
??CrossCallReturnLabel_0:
        SJMP      ??ZDApp_RestoreNetworkState_3
// 1150     else
// 1151       nvStat = NV_ITEM_UNINIT;
??ZDApp_RestoreNetworkState_1:
        MOV       R6,#0x9
// 1152 
// 1153     if ( ZG_SECURE_ENABLED )
// 1154     {
// 1155       nwkFrameCounterChanges = 0;
??ZDApp_RestoreNetworkState_3:
        MOV       DPTR,#nwkFrameCounterChanges
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1156 
// 1157       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1158       {
// 1159         ZDApp_RestoreNwkKey( TRUE );
// 1160       }
// 1161     }
// 1162 
// 1163     // The default for RxOnWhenIdle is true for Routers and false for end devices
// 1164     // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
// 1165     // other than default.
// 1166   }
// 1167 
// 1168   if ( nvStat == ZSUCCESS )
??ZDApp_RestoreNetworkState_0:
        MOV       A,R6
        JNZ       ??ZDApp_RestoreNetworkState_4
// 1169     return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
        MOV       R1,#0x0
        SJMP      ??ZDApp_RestoreNetworkState_5
// 1170   else
// 1171     return ( ZDO_INITDEV_NEW_NETWORK_STATE );
??ZDApp_RestoreNetworkState_4:
        MOV       R1,#0x1
??ZDApp_RestoreNetworkState_5:
        SJMP      ??Subroutine48_0
// 1172 }
          CFI EndBlock cfiBlock30

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x5
          CFI EndBlock cfiBlock31
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock32
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock33
// 1173 #endif // NV_RESTORE
// 1174 
// 1175 /*********************************************************************
// 1176  * @fn      ZDApp_InitUserDesc()
// 1177  *
// 1178  * @brief   Initialize the User Descriptor, the descriptor is read from NV
// 1179  *          when needed.  If you want to initialize the User descriptor to
// 1180  *          something other than all zero, do it here.
// 1181  *
// 1182  * @param   none
// 1183  *
// 1184  * @return  none
// 1185  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1186 void ZDApp_InitUserDesc( void )
ZDApp_InitUserDesc:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
        CODE
// 1187 {
        FUNCALL ZDApp_InitUserDesc, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV       A,#-0x11
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1188   UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
// 1189 
// 1190   // Initialize the User Descriptor, the descriptor is read from NV
// 1191   // when needed.  If you want to initialize the User descriptor to something
// 1192   // other than all zero, do it here.
// 1193   osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x11
        LCALL     ?Subroutine29 & 0xFFFF
// 1194   if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
// 1195          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
??CrossCallReturnLabel_30:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R2,#-0x7f
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        JNZ       ??ZDApp_InitUserDesc_0
// 1196   {
// 1197     if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
// 1198          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0x11
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7f
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        JNZ       ??ZDApp_InitUserDesc_0
// 1199     {
// 1200       if ( ZDO_DefaultUserDescriptor.len != 0 )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JZ        ??ZDApp_InitUserDesc_0
// 1201       {
// 1202         ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.4
        MOVX      @DPTR,A
// 1203       }
// 1204     }
// 1205   }
// 1206 }
??ZDApp_InitUserDesc_0:
        MOV       A,#0x11
        LJMP      ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock34
// 1207 
// 1208 /*********************************************************************
// 1209  * @fn      ZDAppCheckForHoldKey()
// 1210  *
// 1211  * @brief   Check for key to set the device into Hold Auto Start
// 1212  *
// 1213  * @param   none
// 1214  *
// 1215  * @return  none
// 1216  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1217 void ZDAppCheckForHoldKey( void )
ZDAppCheckForHoldKey:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function ZDAppCheckForHoldKey
        CODE
// 1218 {
        FUNCALL ZDAppCheckForHoldKey, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1219 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
// 1220 
// 1221   // Get Keypad directly to see if a HOLD is needed
// 1222   zdappHoldKeys = HalKeyRead();
        ; Setup parameters for call to function HalKeyRead
        LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
        MOV       A,R1
        MOV       DPTR,#zdappHoldKeys
        MOVX      @DPTR,A
// 1223 
// 1224   // Hold down the SW_BYPASS_START key (see OnBoard.h)
// 1225   // while booting to avoid starting up the device.
// 1226   if ( zdappHoldKeys == SW_BYPASS_START )
        XRL       A,#0x1
        JNZ       ??ZDAppCheckForHoldKey_0
// 1227   {
// 1228     // Change the device state to HOLD on start up
// 1229     devState = DEV_HOLD;
        MOV       DPTR,#devState
        CLR       A
        MOVX      @DPTR,A
// 1230   }
// 1231 #endif // HAL_KEY
// 1232 }
??ZDAppCheckForHoldKey_0:
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock35
// 1233 
// 1234 /*********************************************************************
// 1235  * @fn      ZDApp_ProcessOSALMsg()
// 1236  *
// 1237  * @brief   Process the incoming task message.
// 1238  *
// 1239  * @param   msgPtr - message to process
// 1240  *
// 1241  * @return  none
// 1242  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1243 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessOSALMsg:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
        CODE
// 1244 {
        FUNCALL ZDApp_ProcessOSALMsg, ZDP_IncomingData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessMsgCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, bdb_isDeviceNonFactoryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, bdb_rejoinNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, bdb_parentLost
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, bdb_nwkDiscoveryAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, bdb_nwkDiscoveryAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessNetworkJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessSecMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1245   // Data Confirmation message fields
// 1246   uint8 sentEP;       // This should always be 0
// 1247   uint8 sentStatus;
// 1248   afDataConfirm_t *afDataConfirm;
// 1249 
// 1250 
// 1251   switch ( msgPtr->event )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        DEC       A
        JZ        ??ZDApp_ProcessOSALMsg_0
        DEC       A
        JZ        ??ZDApp_ProcessOSALMsg_1
        ADD       A,#-0x18
        JZ        ??ZDApp_ProcessOSALMsg_2
        ADD       A,#0x47
        JZ        ??ZDApp_ProcessOSALMsg_3
        ADD       A,#-0x2a
        JZ        ??ZDApp_ProcessOSALMsg_4
        SJMP      ??ZDApp_ProcessOSALMsg_5
// 1252   {
// 1253     // Incoming ZDO Message
// 1254     case AF_INCOMING_MSG_CMD:
// 1255       ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
??ZDApp_ProcessOSALMsg_2:
        ; Setup parameters for call to function ZDP_IncomingData
        LCALL     `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
// 1256       break;
        SJMP      ??ZDApp_ProcessOSALMsg_4
// 1257 
// 1258     case ZDO_CB_MSG:
// 1259       ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
??ZDApp_ProcessOSALMsg_3:
        ; Setup parameters for call to function ZDApp_ProcessMsgCBs
        LCALL     `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
// 1260       break;
        SJMP      ??ZDApp_ProcessOSALMsg_4
// 1261 
// 1262     case AF_DATA_CONFIRM_CMD:
// 1263       // This message is received as a confirmation of a data packet sent.
// 1264       // The status is of ZStatus_t type [defined in NLMEDE.h]
// 1265       // The message fields are defined in AF.h
// 1266       afDataConfirm = (afDataConfirm_t *)msgPtr;
// 1267       sentEP = afDataConfirm->endpoint;
// 1268       sentStatus = afDataConfirm->hdr.status;
// 1269 
// 1270       // Action taken when confirmation is received.
// 1271 #if defined ( ZIGBEE_FREQ_AGILITY )
// 1272       if ( pZDNwkMgr_ProcessDataConfirm )
// 1273         pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
// 1274 #endif
// 1275       (void)sentEP;
// 1276       (void)sentStatus;
// 1277       break;
// 1278 
// 1279     case ZDO_NWK_DISC_CNF:
// 1280       if (devState != DEV_NWK_DISC)
??ZDApp_ProcessOSALMsg_0:
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_ProcessOSALMsg_4
// 1281       {
// 1282         break;
// 1283       }
// 1284       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDApp_ProcessOSALMsg_6
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_ProcessOSALMsg_4
// 1285       {
// 1286         //Rejoin or resume
// 1287         if(bdb_isDeviceNonFactoryNew()) 
??ZDApp_ProcessOSALMsg_6:
        ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
        LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
        MOV       A,R1
        JZ        ??ZDApp_ProcessOSALMsg_7
// 1288         {
// 1289           if(bdb_rejoinNwk() == ZSuccess)
        ; Setup parameters for call to function bdb_rejoinNwk
        LCALL     `??bdb_rejoinNwk::?relay`; Banked call to: bdb_rejoinNwk
        MOV       A,R1
        JZ        ??ZDApp_ProcessOSALMsg_4
// 1290           {
// 1291             return;
// 1292           }
// 1293 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1294           else
// 1295           {
// 1296             if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1297             {
// 1298               bdb_parentLost();
        ; Setup parameters for call to function bdb_parentLost
        LCALL     `??bdb_parentLost::?relay`; Banked call to: bdb_parentLost
// 1299               return;
        SJMP      ??ZDApp_ProcessOSALMsg_4
// 1300             }
// 1301           }
// 1302 #endif
// 1303         }
// 1304         
// 1305         if(nwk_getNwkDescList())
??ZDApp_ProcessOSALMsg_7:
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDApp_ProcessOSALMsg_8
// 1306         {
// 1307           bdb_nwkDiscoveryAttempt(TRUE);
        ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
        MOV       R1,#0x1
        SJMP      ??ZDApp_ProcessOSALMsg_9
// 1308         }
// 1309         else
// 1310         {
// 1311           bdb_nwkDiscoveryAttempt(FALSE);
??ZDApp_ProcessOSALMsg_8:
        ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
        MOV       R1,#0x0
??ZDApp_ProcessOSALMsg_9:
        LCALL     `??bdb_nwkDiscoveryAttempt::?relay`; Banked call to: bdb_nwkDiscoveryAttempt
        SJMP      ??ZDApp_ProcessOSALMsg_4
// 1312         }
// 1313       }
// 1314     break;
// 1315 
// 1316     case ZDO_NWK_JOIN_IND:
// 1317       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessOSALMsg_1:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDApp_ProcessOSALMsg_10
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_ProcessOSALMsg_4
// 1318       {
// 1319         if((bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION) || (bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST))
??ZDApp_ProcessOSALMsg_10:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??ZDApp_ProcessOSALMsg_11
        MOVX      A,@DPTR
        XRL       A,#0x8
        JNZ       ??ZDApp_ProcessOSALMsg_12
// 1320         {
// 1321           if(nwkStatus == ZSuccess)
??ZDApp_ProcessOSALMsg_11:
        MOV       DPTR,#nwkStatus
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessOSALMsg_12
// 1322           {
// 1323             bdb_reportCommissioningState(bdbCommissioningProcedureState.bdbCommissioningState,TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1324           }
// 1325         }
// 1326         ZDApp_ProcessNetworkJoin();
??ZDApp_ProcessOSALMsg_12:
        ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
        LCALL     `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
        SJMP      ??ZDApp_ProcessOSALMsg_4
// 1327       }
// 1328       break;
// 1329 
// 1330     default:
// 1331       if ( ZG_SECURE_ENABLED )
// 1332         ZDApp_ProcessSecMsg( msgPtr );
??ZDApp_ProcessOSALMsg_5:
        ; Setup parameters for call to function ZDApp_ProcessSecMsg
        LCALL     `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
// 1333       break;
// 1334   }
// 1335 
// 1336 }
??ZDApp_ProcessOSALMsg_4:
        SJMP      ??Subroutine50_0
          CFI EndBlock cfiBlock36

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
        MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7b
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_55:
          CFI EndBlock cfiBlock37
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock38
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock39
// 1337 
// 1338 /*********************************************************************
// 1339  * @fn      ZDApp_ProcessMsgCBs()
// 1340  *
// 1341  * @brief   Process response messages
// 1342  *
// 1343  * @param   none
// 1344  *
// 1345  * @return  none
// 1346  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1347 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
ZDApp_ProcessMsgCBs:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
        CODE
// 1348 {
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_UpdateAddrManager
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ProcessBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV       A,#-0x15
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        LCALL     ?Subroutine33 & 0xFFFF
// 1349   switch ( inMsg->clusterID )
??CrossCallReturnLabel_34:
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        33
        DATA
        DATA16
        DATA
        DATA16
        DW        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32768
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_2
        CODE
// 1350   {
// 1351 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1352     case NWK_addr_rsp:
// 1353     case IEEE_addr_rsp:
// 1354       {
// 1355         ZDO_NwkIEEEAddrResp_t *pAddrRsp;
// 1356 
// 1357         pAddrRsp = ZDO_ParseAddrRsp( inMsg );
??ZDApp_ProcessMsgCBs_1:
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R7,?V1
// 1358         if ( pAddrRsp )
        MOV       A,R2
        ORL       A,R7
        JZ        ??ZDApp_ProcessMsgCBs_2
// 1359         {
// 1360           if ( pAddrRsp->status == ZSuccess )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessMsgCBs_3
// 1361           {
// 1362             ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDO_UpdateAddrManager
        MOV       A,R2
        ADD       A,#0x3
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        INC       DPTR
        LCALL     ?Subroutine21 & 0xFFFF
// 1363           }
??CrossCallReturnLabel_20:
        LCALL     `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
// 1364 
// 1365 #if defined ( ZDP_BIND_VALIDATION )
// 1366           // look for pending bind entry for NWK_addr_rsp Only
// 1367           if ( inMsg->clusterID == NWK_addr_rsp )
// 1368           {
// 1369 #if defined ( REFLECTOR )
// 1370             ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
// 1371 #endif
// 1372           }
// 1373 #endif
// 1374 
// 1375           osal_mem_free( pAddrRsp );
??ZDApp_ProcessMsgCBs_3:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??ZDApp_ProcessMsgCBs_2
// 1376         }
// 1377       }
// 1378       break;
// 1379 #endif
// 1380 
// 1381 #if defined ( REFLECTOR )
// 1382     case Bind_req:
// 1383     case Unbind_req:
// 1384       {
// 1385         ZDO_BindUnbindReq_t bindReq;
// 1386         ZDO_ParseBindUnbindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_0:
        ; Setup parameters for call to function ZDO_ParseBindUnbindReq
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        LCALL     `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
// 1387         ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
        ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
// 1388       }
// 1389       break;
// 1390 #endif
// 1391 
// 1392 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1393     case Bind_rsp:
// 1394     case Unbind_rsp:
// 1395       if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
// 1396       {
// 1397         ZDMatchSendState(
// 1398              (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
// 1399              ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
// 1400       }
// 1401       break;
// 1402 
// 1403     case End_Device_Bind_req:
// 1404 #ifdef ZDO_ENDDEVICEBIND_RESPONSE
// 1405       if (ZG_DEVICE_COORDINATOR_TYPE)
// 1406       {
// 1407         ZDEndDeviceBind_t bindReq;
// 1408         ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
// 1409         ZDO_MatchEndDeviceBind( &bindReq );
// 1410 
// 1411         // Freeing the cluster lists - if allocated.
// 1412         if ( bindReq.numInClusters )
// 1413           osal_mem_free( bindReq.inClusters );
// 1414         if ( bindReq.numOutClusters )
// 1415           osal_mem_free( bindReq.outClusters );
// 1416       }
// 1417 #endif
// 1418       break;
// 1419 #endif
// 1420   }
// 1421 }
??ZDApp_ProcessMsgCBs_2:
          CFI EndBlock cfiBlock40
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 31)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x15
        SJMP      ??Subroutine49_0
          CFI EndBlock cfiBlock41
// 1422 
// 1423 /*********************************************************************
// 1424  * @fn      ZDApp_RegisterCBs()
// 1425  *
// 1426  * @brief   Process response messages
// 1427  *
// 1428  * @param   none
// 1429  *
// 1430  * @return  none
// 1431  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1432 void ZDApp_RegisterCBs( void )
ZDApp_RegisterCBs:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function ZDApp_RegisterCBs
        CODE
// 1433 {
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1434 #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1435   ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x1
        LCALL     ?Subroutine24 & 0xFFFF
// 1436 #endif
// 1437 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
// 1438   ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
??CrossCallReturnLabel_59:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x0
        LCALL     ?Subroutine24 & 0xFFFF
// 1439 #endif
// 1440 #if ZG_BUILD_COORDINATOR_TYPE
// 1441   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
// 1442   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
// 1443 #ifdef ZDO_ENDDEVICEBIND_RESPONSE
// 1444   ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
// 1445 #endif
// 1446 #endif
// 1447 #if defined ( REFLECTOR )
// 1448   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
??CrossCallReturnLabel_60:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x21
        MOV       R3,#0x0
        LCALL     ??Subroutine51_0 & 0xFFFF
// 1449   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
??CrossCallReturnLabel_61:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x22
        MOV       R3,#0x0
        LCALL     ??Subroutine51_0 & 0xFFFF
// 1450 #endif
// 1451 }
??CrossCallReturnLabel_62:
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock42

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function ZDApp_RegisterCBs
          CFI Conditional ??CrossCallReturnLabel_59
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function ZDApp_RegisterCBs
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond44) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond44) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond44) CFA_SP SP+-7
          CFI Block cfiPicker45 Using cfiCommon1
          CFI (cfiPicker45) NoFunction
          CFI (cfiPicker45) Picker
        MOV       R3,#-0x80
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiPicker45
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond46 Using cfiCommon0
          CFI Function ZDApp_RegisterCBs
          CFI Conditional ??CrossCallReturnLabel_61
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function ZDApp_RegisterCBs
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond47) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond47) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond47) CFA_SP SP+-7
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function ZDApp_RegisterCBs
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond48) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond48) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond48) CFA_SP SP+-7
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function ZDApp_RegisterCBs
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond49) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond49) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond49) CFA_SP SP+-7
          CFI Block cfiPicker50 Using cfiCommon1
          CFI (cfiPicker50) NoFunction
          CFI (cfiPicker50) Picker
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
        RET
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiPicker50
// 1452 
// 1453 /*********************************************************************
// 1454  * @fn      ZDApp_ProcessSecMsg()
// 1455  *
// 1456  * @brief   Process the incoming security message.
// 1457  *
// 1458  * @param   msgPtr - message to process
// 1459  *
// 1460  * @return  none
// 1461  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1462 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessSecMsg:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function ZDApp_ProcessSecMsg
        CODE
// 1463 {
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrTransportKeyInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrSwitchKeyInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1464   switch ( msgPtr->event )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x4
        JZ        ??ZDApp_ProcessSecMsg_0
        ADD       A,#-0x4
        JZ        ??ZDApp_ProcessSecMsg_1
        SJMP      ??ZDApp_ProcessSecMsg_2
// 1465   {
// 1466     case ZDO_TRANSPORT_KEY_IND:
// 1467       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessSecMsg_0:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDApp_ProcessSecMsg_3
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_ProcessSecMsg_2
// 1468       {
// 1469         ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_3:
        ; Setup parameters for call to function ZDSecMgrTransportKeyInd
        LCALL     `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
        SJMP      ??ZDApp_ProcessSecMsg_2
// 1470       }
// 1471       break;
// 1472 
// 1473     case ZDO_UPDATE_DEVICE_IND:
// 1474       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1475       {
// 1476         ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
// 1477         
// 1478         // Look at GP proxy table for posible conflict with GPD alias NwkAddr
// 1479 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
// 1480         ZDO_DeviceAnnce_t devAnnce;
// 1481         uint32 timeout;
// 1482         uint8 invalidAddr;
// 1483         uint8 sameAnnce;
// 1484         uint8 invalidIEEE[Z_EXTADDR_LEN] = {0xFF};
// 1485         
// 1486         osal_memcpy( devAnnce.extAddr, ((ZDO_UpdateDeviceInd_t*)msgPtr)->devExtAddr, Z_EXTADDR_LEN );
// 1487         devAnnce.nwkAddr = ((ZDO_UpdateDeviceInd_t*)msgPtr)->devAddr;
// 1488         
// 1489         timeout = osal_get_timeoutEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
// 1490         invalidAddr = osal_memcmp( devAnnce.extAddr, invalidIEEE, Z_EXTADDR_LEN );
// 1491         sameAnnce = osal_memcmp( &devAnnce, &GP_aliasConflictAnnce, sizeof( ZDO_DeviceAnnce_t ) );
// 1492         
// 1493         // Check GP proxy table to update the entry if necesary
// 1494         if( timeout && ( invalidAddr && sameAnnce ) )
// 1495         {
// 1496           osal_stop_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
// 1497         }
// 1498         else if(GP_CheckAnnouncedDeviceGCB != NULL)
// 1499         {
// 1500           GP_CheckAnnouncedDeviceGCB( devAnnce.extAddr, devAnnce.nwkAddr );       
// 1501         }
// 1502 #endif
// 1503       }
// 1504       break;
// 1505 
// 1506     case ZDO_REMOVE_DEVICE_IND:
// 1507       if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
// 1508       {
// 1509         ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
// 1510       }
// 1511       break;
// 1512 
// 1513     case ZDO_REQUEST_KEY_IND:
// 1514       if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
// 1515       {
// 1516         if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1517         {
// 1518           ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
// 1519         }
// 1520       }
// 1521       break;
// 1522     case ZDO_VERIFY_KEY_IND:
// 1523 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1524       if(ZG_DEVICE_COORDINATOR_TYPE)
// 1525       {
// 1526         if( ((ZDO_VerifyKeyInd_t*)msgPtr)->verifyKeyStatus == ZSuccess)
// 1527         {
// 1528           bdb_TCjoiningDeviceComplete( ((ZDO_VerifyKeyInd_t*)msgPtr)->extAddr );
// 1529         }
// 1530       }
// 1531   
// 1532       ZDSecMgrVerifyKeyInd( (ZDO_VerifyKeyInd_t*)msgPtr );
// 1533 #endif
// 1534       break;
// 1535 
// 1536     case ZDO_SWITCH_KEY_IND:
// 1537       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessSecMsg_1:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDApp_ProcessSecMsg_4
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_ProcessSecMsg_2
// 1538       {
// 1539         ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_4:
        ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
        LCALL     `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
// 1540       }
// 1541       break;
// 1542 
// 1543     default:
// 1544       // Unsupported messages
// 1545       break;
// 1546   }
// 1547 }
??ZDApp_ProcessSecMsg_2:
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock51
// 1548 
// 1549 /*********************************************************************
// 1550  * @fn      ZDApp_ProcessNetworkJoin()
// 1551  *
// 1552  * @brief
// 1553  *
// 1554  *   Save off the Network key information.
// 1555  *
// 1556  * @param   none
// 1557  *
// 1558  * @return  none
// 1559  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1560 void ZDApp_ProcessNetworkJoin( void )
ZDApp_ProcessNetworkJoin:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
        CODE
// 1561 {
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, bdb_nwkAssocAttemt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, bdb_nwkAssocAttemt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1562   if ( (devState == DEV_NWK_JOINING) ||
// 1563       ((devState == DEV_NWK_ORPHAN)  &&
// 1564        (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x3
        JZ        ??ZDApp_ProcessNetworkJoin_0
        MOVX      A,@DPTR
        XRL       A,#0xa
        JNZ       ??ZDApp_ProcessNetworkJoin_1
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0x7
        XRL       A,#0x1
        JNZ       ??ZDApp_ProcessNetworkJoin_2
// 1565   {
// 1566     // Result of a Join attempt by this device.
// 1567     if ( nwkStatus == ZSuccess )
??ZDApp_ProcessNetworkJoin_0:
        MOV       DPTR,#nwkStatus
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessNetworkJoin_3
// 1568     {
// 1569       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine15 & 0xFFFF
// 1570 
// 1571 #if defined ( POWER_SAVING )
// 1572       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1573 #endif
// 1574 
// 1575       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
??CrossCallReturnLabel_119:
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x1
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        JNZ       ??ZDApp_ProcessNetworkJoin_4
// 1576       {
// 1577         if ( ZSTACK_END_DEVICE_BUILD )
// 1578         {
// 1579           NLME_SetPollRate( zgRejoinPollRate );
        ; Setup parameters for call to function NLME_SetPollRate
        LCALL     ?Subroutine18 & 0xFFFF
// 1580         }
// 1581         // wait for auth from trust center
// 1582         ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
// 1583         
// 1584         bdb_nwkAssocAttemt(TRUE);
??CrossCallReturnLabel_12:
        ; Setup parameters for call to function bdb_nwkAssocAttemt
        MOV       R1,#0x1
        SJMP      ??ZDApp_ProcessNetworkJoin_5
// 1585       }
// 1586       else
// 1587       {
// 1588         if ( ZSTACK_ROUTER_BUILD )
// 1589         {
// 1590           if ( devState == DEV_NWK_ORPHAN
// 1591             && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
// 1592           {
// 1593             // Change NIB state to router for restore
// 1594             _NIB.nwkState = NWK_ROUTER;
// 1595           }
// 1596         }
// 1597 
// 1598         if ( devState == DEV_NWK_JOINING )
??ZDApp_ProcessNetworkJoin_4:
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??ZDApp_ProcessNetworkJoin_6
// 1599         {
// 1600           ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1601           if( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_ProcessNetworkJoin_6
// 1602           {
// 1603             bdb_setNodeIsOnANetwork(TRUE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x1
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 1604             bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x2
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1605           }
// 1606         }
// 1607 
// 1608         ZDApp_ChangeState( DEV_END_DEVICE );
??ZDApp_ProcessNetworkJoin_6:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1609 
// 1610         if ( ZSTACK_ROUTER_BUILD )
        LJMP      ??CrossCallReturnLabel_120 & 0xFFFF
// 1611         {
// 1612           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1613           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
// 1614           {
// 1615             NLME_StartRouterRequest( 0, 0, false );
// 1616           }
// 1617         }
// 1618       }
// 1619     }
// 1620     else
// 1621     {
// 1622 
// 1623       bdb_nwkAssocAttemt(FALSE);
??ZDApp_ProcessNetworkJoin_3:
        ; Setup parameters for call to function bdb_nwkAssocAttemt
        MOV       R1,#0x0
??ZDApp_ProcessNetworkJoin_5:
        LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
        LJMP      ??CrossCallReturnLabel_120 & 0xFFFF
// 1624     }
// 1625   }
// 1626   else if ( devState == DEV_NWK_ORPHAN ||
// 1627             devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
// 1628             devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
// 1629             devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
// 1630             devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
??ZDApp_ProcessNetworkJoin_1:
        MOVX      A,@DPTR
        XRL       A,#0x4
        JZ        ??ZDApp_ProcessNetworkJoin_2
        MOVX      A,@DPTR
        XRL       A,#0xe
        JZ        ??ZDApp_ProcessNetworkJoin_2
        MOVX      A,@DPTR
        XRL       A,#0xf
        JZ        ??ZDApp_ProcessNetworkJoin_2
        MOVX      A,@DPTR
        XRL       A,#0xd
        JZ        $+5
        LJMP      ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
// 1631   {
// 1632     // results of an orphaning attempt by this device
// 1633     if (nwkStatus == ZSuccess)
??ZDApp_ProcessNetworkJoin_2:
        MOV       DPTR,#nwkStatus
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessNetworkJoin_8
// 1634     {
// 1635       //When the device has successfully rejoined then reset retryCnt
// 1636       retryCnt = 0;
        MOV       DPTR,#retryCnt
        CLR       A
        MOVX      @DPTR,A
// 1637 
// 1638       // Verify NWK key is available before sending Device_annce
// 1639       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x1
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        JNZ       ??ZDApp_ProcessNetworkJoin_9
// 1640       {
// 1641         if ( ZSTACK_END_DEVICE_BUILD )
// 1642         {
// 1643           NLME_SetPollRate( zgRejoinPollRate );
        ; Setup parameters for call to function NLME_SetPollRate
        LCALL     ?Subroutine18 & 0xFFFF
// 1644         }
// 1645         // wait for auth from trust center
// 1646         ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
// 1647 
// 1648         // Start the reset timer for MAX UNAUTH time
// 1649         ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
??CrossCallReturnLabel_13:
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV       R2,#0x10
        MOV       R3,#0x27
        LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
        LJMP      ??CrossCallReturnLabel_120 & 0xFFFF
// 1650       }
// 1651       else
// 1652       {
// 1653         ZDApp_ChangeState( DEV_END_DEVICE );
??ZDApp_ProcessNetworkJoin_9:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1654 
// 1655         osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x20
        LCALL     ?Subroutine26 & 0xFFFF
// 1656 
// 1657         // setup Power Manager Device
// 1658 #if defined ( POWER_SAVING )
// 1659         osal_pwrmgr_device( PWRMGR_BATTERY );
// 1660 #endif
// 1661 
// 1662         // The receiver is on, turn network layer polling off.
// 1663         if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
??CrossCallReturnLabel_63:
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??ZDApp_ProcessNetworkJoin_10
// 1664         {
// 1665           // if Child Table Management process is not enabled
// 1666           if ( zgChildAgingEnable == FALSE )
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessNetworkJoin_10
// 1667           {
// 1668             NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1669             NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 1670             NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
// 1671           }
// 1672         }
// 1673 
// 1674         if ( ZSTACK_ROUTER_BUILD )
// 1675         {
// 1676           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1677           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
// 1678           {
// 1679             NLME_StartRouterRequest( 0, 0, false );
// 1680           }
// 1681         }
// 1682 
// 1683         ZDApp_AnnounceNewAddress();
??ZDApp_ProcessNetworkJoin_10:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
        SJMP      ??CrossCallReturnLabel_120
// 1684       }
// 1685     }
// 1686     else
// 1687     {
// 1688       if ( devStartMode == MODE_RESUME )
??ZDApp_ProcessNetworkJoin_8:
        MOV       DPTR,#devStartMode
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_ProcessNetworkJoin_11
// 1689       {
// 1690         if ( ++retryCnt <= MAX_RESUME_RETRY )
        MOV       DPTR,#retryCnt
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
        CLR       C
        SUBB      A,#0x4
        JNC       ??ZDApp_ProcessNetworkJoin_12
// 1691         {
// 1692           if ( _NIB.nwkPanId == 0xFFFF )
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??ZDApp_ProcessNetworkJoin_13
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDApp_ProcessNetworkJoin_13:
        JZ        ??ZDApp_ProcessNetworkJoin_14
// 1693             devStartMode = MODE_JOIN;
// 1694           else
// 1695           {
// 1696             devStartMode = MODE_REJOIN;
        MOV       DPTR,#devStartMode
        MOV       A,#0x3
        MOVX      @DPTR,A
// 1697             _tmpRejoinState = true;
        MOV       DPTR,#_tmpRejoinState
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1698             prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
        MOV       DPTR,#prevDevState
        MOV       A,#0x4
        SJMP      ??ZDApp_ProcessNetworkJoin_15
// 1699           }
// 1700         }
// 1701         // Do a normal join to the network after certain times of rejoin retries
// 1702         else if( AIB_apsUseInsecureJoin == true )
??ZDApp_ProcessNetworkJoin_12:
        MOV       DPTR,#AIB_apsUseInsecureJoin
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_ProcessNetworkJoin_16
// 1703         {
// 1704           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_14:
        MOV       DPTR,#devStartMode
        SJMP      ??ZDApp_ProcessNetworkJoin_17
// 1705         }
// 1706       }
// 1707       else if(devStartMode == MODE_REJOIN)
??ZDApp_ProcessNetworkJoin_11:
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??ZDApp_ProcessNetworkJoin_16
// 1708       {
// 1709         if ( ZSTACK_END_DEVICE_BUILD )
// 1710         {
// 1711           devStartMode = MODE_REJOIN;
// 1712           _tmpRejoinState = true;
        MOV       DPTR,#_tmpRejoinState
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1713           _NIB.nwkState = NWK_INIT;
        MOV       DPTR,#_NIB + 35
??ZDApp_ProcessNetworkJoin_17:
        CLR       A
??ZDApp_ProcessNetworkJoin_15:
        MOVX      @DPTR,A
// 1714         }
// 1715       }
// 1716 
// 1717       // Clear the neighbor Table and network discovery tables.
// 1718       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_16:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 1719       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 1720 
// 1721       if ( ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
// 1722         || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
// 1723           && (zgChildAgingEnable == TRUE) ) ) && (devStartMode == MODE_REJOIN) )
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??ZDApp_ProcessNetworkJoin_18
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??CrossCallReturnLabel_120
??ZDApp_ProcessNetworkJoin_18:
        MOV       DPTR,#devStartMode
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??CrossCallReturnLabel_120
// 1724       {
// 1725         NLME_SetPollRate( zgRejoinPollRate );
        ; Setup parameters for call to function NLME_SetPollRate
        LCALL     ?Subroutine40 & 0xFFFF
// 1726       }
// 1727     }
// 1728   }
??CrossCallReturnLabel_44:
        SJMP      ??CrossCallReturnLabel_120
// 1729 #if defined ( ZIGBEEPRO )
// 1730   else if ( devState != DEV_HOLD )
??ZDApp_ProcessNetworkJoin_7:
        MOVX      A,@DPTR
        JZ        ??CrossCallReturnLabel_120
// 1731   {
// 1732     #ifdef APP_TP2
// 1733       if(devState == DEV_END_DEVICE_UNAUTH )
// 1734       {
// 1735         return;
// 1736       }
// 1737     #endif
// 1738 	  
// 1739     // Assume from address conflict
// 1740 
// 1741     // Notify the network
// 1742     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1743 
// 1744     // Notify apps
// 1745     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine15 & 0xFFFF
// 1746   }
// 1747 #endif
// 1748 }
??CrossCallReturnLabel_120:
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock52

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function ZDApp_ResetTimerCancel
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond54) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond54) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond54) CFA_SP SP+-7
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        MOV       DPTR,#ZDAppTaskID
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function ZDApp_ForceConcentratorChange
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function ZDApp_ResetTimerCancel
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond58) CFA_SP SP+-7
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_45:
        ; Setup parameters for call to function ZDApp_ChangeState
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x5
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
        RET
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_12
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_13
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        MOV       DPTR,#zgRejoinPollRate
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,?V0
        MOV       R3,A
        CLR       A
        MOV       R4,A
        MOV       R5,A
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66
// 1749 
// 1750 /******************************************************************************
// 1751  * @fn          ZDApp_StoreNwkSecMaterial
// 1752  *
// 1753  * @brief       Stores new entries in the NwkSecMaterial
// 1754  *
// 1755  * @param       none
// 1756  *
// 1757  * @return      none
// 1758  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1759 void ZDApp_StoreNwkSecMaterial(void)
ZDApp_StoreNwkSecMaterial:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function ZDApp_StoreNwkSecMaterial
        CODE
// 1760 {
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_isbufset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1761   nwkSecMaterialDesc_t nwkSecMaterialDesc;
// 1762   uint8 i;
// 1763   uint8 emptyEntryIndexOffset = gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
// 1764   
// 1765   //Search if we do have security material for this network
// 1766   for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
        MOV       R6,#0x0
        MOV       ?V0,#(_NIB + 53) & 0xff
        MOV       ?V1,#((_NIB + 53) >> 8) & 0xff
        MOV       ?V2,R6
        SJMP      ??ZDApp_StoreNwkSecMaterial_0
??ZDApp_StoreNwkSecMaterial_1:
        INC       R6
??ZDApp_StoreNwkSecMaterial_0:
        MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??ZDApp_StoreNwkSecMaterial_2 & 0xFFFF
// 1767   {
// 1768     osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V4,#0xc
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x75
        MOV       R2,A
        CLR       A
        ADDC      A,#0x0
        MOV       R3,A
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1769     {
// 1770       if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
        LCALL     ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        JNZ       ??ZDApp_StoreNwkSecMaterial_2
// 1771       {
// 1772         break;
// 1773       }
// 1774       if(osal_isbufset(nwkSecMaterialDesc.extendedPanID,0,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_isbufset
        MOV       R4,#0x8
        MOV       R1,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        MOV       A,R1
        JZ        ??ZDApp_StoreNwkSecMaterial_1
// 1775       {
// 1776         emptyEntryIndexOffset = i;
        MOV       A,R6
        MOV       R7,A
// 1777         break;
// 1778       }
// 1779     }
// 1780   }
// 1781   
// 1782   //ExtPanID not found and found an empty entry, save the extended PANID
// 1783   if(emptyEntryIndexOffset < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES)
// 1784   {
// 1785     osal_memcpy(nwkSecMaterialDesc.extendedPanID, _NIB.extendedPANID, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1786     nwkSecMaterialDesc.FrameCounter = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine10 & 0xFFFF
// 1787     osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + emptyEntryIndexOffset,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
// 1788   }
??CrossCallReturnLabel_2:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0xc
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R7
        ADD       A,#0x75
        MOV       R2,A
        CLR       A
        ADDC      A,#0x0
        MOV       R3,A
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1789 
// 1790 }
??ZDApp_StoreNwkSecMaterial_2:
        LJMP      ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock67
// 1791 
// 1792 
// 1793 /*********************************************************************
// 1794  * @fn      ZDApp_SaveNwkKey()
// 1795  *
// 1796  * @brief   Save off the Network key information.
// 1797  *
// 1798  * @param   none
// 1799  *
// 1800  * @return  none
// 1801  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1802 void ZDApp_SaveNwkKey( void )
ZDApp_SaveNwkKey:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function ZDApp_SaveNwkKey
        CODE
// 1803 {
        FUNCALL ZDApp_SaveNwkKey, SSP_ReadNwkActiveKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 33
        MOV       A,#-0x21
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 1804   nwkActiveKeyItems keyItems;
// 1805   nwkSecMaterialDesc_t nwkSecMaterialDesc;
// 1806   uint8 found = 0;
// 1807   uint8 i;
// 1808   
// 1809   SSP_ReadNwkActiveKey( &keyItems );
        ; Setup parameters for call to function SSP_ReadNwkActiveKey
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
// 1810 
// 1811   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1812                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       ?V0,#0x15
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 1813   
// 1814   //Search for the security material to update its framecounter
// 1815   for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
        MOV       ?V0,#0x0
        SJMP      ??ZDApp_SaveNwkKey_0
??ZDApp_SaveNwkKey_1:
        INC       ?V0
??ZDApp_SaveNwkKey_0:
        MOV       R6,?V0
        MOV       R7,#0x0
        MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JNC       ??ZDApp_SaveNwkKey_2
// 1816   {
// 1817     osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        MOV       A,R6
        ADD       A,#0x75
        MOV       R6,A
        JNC       ??ZDApp_SaveNwkKey_3
        INC       R7
??ZDApp_SaveNwkKey_3:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       ?V2,#0xc
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 1818     {
// 1819       if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 51)
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       A,R1
        JZ        ??ZDApp_SaveNwkKey_1
// 1820       {
// 1821         nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?XLOAD_R0123
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?XSTORE_R0123
// 1822         found = TRUE;
// 1823         //update the framecounter associated to this ExtPanID
// 1824         osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       ?V0,#0xc
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        SJMP      ??ZDApp_SaveNwkKey_4
          CFI CFA_XSP16 add(XSP16, 48)
// 1825         break;
// 1826       }
// 1827     }
// 1828   }
// 1829   
// 1830   //If not found, then use the generic
// 1831   if(!found)
// 1832   {
// 1833     osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
??ZDApp_SaveNwkKey_2:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#-0x1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1834     nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?XLOAD_R0123
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?XSTORE_R0123
// 1835     //update the framecounter associated to this ExtPanID
// 1836     osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       ?V0,#0xc
        MOV       ?V1,R7
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x74
        MOV       R2,A
        CLR       A
        ADDC      A,#0x0
??ZDApp_SaveNwkKey_4:
        MOV       R3,A
// 1837   }
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 1838   
// 1839   
// 1840   nwkFrameCounterChanges = 0;
        MOV       DPTR,#nwkFrameCounterChanges
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1841   
// 1842   // Clear copy in RAM before return.
// 1843   osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x15
        MOV       R5,A
        MOV       R1,A
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1844 
// 1845 }
        MOV       A,#0x21
        SJMP      ??Subroutine55_0
          CFI EndBlock cfiBlock68

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function ZDApp_SaveNwkKey
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function ZDApp_RestoreNwkSecMaterial
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#(_NIB + 53) & 0xff
        MOV       R2,#((_NIB + 53) >> 8) & 0xff
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function ZDApp_RestoreNwkKey
          CFI Conditional ??CrossCallReturnLabel_68
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function ZDApp_SaveNwkKey
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function ZDApp_RestoreNwkSecMaterial
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiCond76 Using cfiCommon0
          CFI Function ZDApp_StoreNwkSecMaterial
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function ZDApp_RestoreNwkKey
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function ZDApp_SaveNwkKey
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function ZDApp_RestoreNwkSecMaterial
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker80 Using cfiCommon1
          CFI (cfiPicker80) NoFunction
          CFI (cfiPicker80) Picker
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiPicker80

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock81 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0xc
          CFI EndBlock cfiBlock81
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 48)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Valid
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock82
// 1846 
// 1847 /*********************************************************************
// 1848  * @fn      ZDApp_ForceConcentratorChange()
// 1849  *
// 1850  * @brief   Force a network concentrator change by resetting
// 1851  *          zgConcentratorEnable and zgConcentratorDiscoveryTime
// 1852  *          from NV and set nwk event.
// 1853  *
// 1854  * @param   none
// 1855  *
// 1856  * @return  none
// 1857  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1858 void ZDApp_ForceConcentratorChange( void )
ZDApp_ForceConcentratorChange:
          CFI Block cfiBlock83 Using cfiCommon0
          CFI Function ZDApp_ForceConcentratorChange
        CODE
// 1859 {
        FUNCALL ZDApp_ForceConcentratorChange, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1860   osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V0,#zgConcentratorEnable & 0xff
        MOV       ?V1,#(zgConcentratorEnable >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x32
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1861   osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V0,#zgConcentratorDiscoveryTime & 0xff
        MOV       ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x33
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_72:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1862 
// 1863   if ( zgConcentratorEnable == TRUE )
        MOV       DPTR,#zgConcentratorEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_ForceConcentratorChange_0
// 1864   {
// 1865     // Start next event
// 1866     osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_64
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#NWK_TaskID
        LCALL     ??Subroutine59_0 & 0xFFFF
// 1867   }
??CrossCallReturnLabel_88:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        SJMP      ??CrossCallReturnLabel_65
// 1868   else
// 1869   {
// 1870     // Stop the next event
// 1871     osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
??ZDApp_ForceConcentratorChange_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#NWK_TaskID
        LCALL     ??Subroutine52_0 & 0xFFFF
// 1872   }
// 1873 }
??CrossCallReturnLabel_65:
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock83

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function ZDApp_RestoreNwkKey
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function ZDApp_LeaveCtrlInit
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function ZDApp_DeviceConfigured
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function ZDApp_StoreNwkSecMaterial
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function ZDApp_SaveNwkKey
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function ZDApp_RestoreNwkSecMaterial
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function ZDApp_InitUserDesc
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function ZDApp_RestoreNwkKey
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function ZDApp_LeaveCtrlInit
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function ZDApp_DeviceConfigured
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker100 Using cfiCommon1
          CFI (cfiPicker100) NoFunction
          CFI (cfiPicker100) Picker
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiPicker100
// 1874 
// 1875 /*********************************************************************
// 1876  * @fn      ZDApp_ResetNwkKey()
// 1877  *
// 1878  * @brief   Reset the Network key information in NV.
// 1879  *
// 1880  * @param   none
// 1881  *
// 1882  * @return  none
// 1883  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1884 void ZDApp_ResetNwkKey( void )
ZDApp_ResetNwkKey:
          CFI Block cfiBlock101 Using cfiCommon0
          CFI Function ZDApp_ResetNwkKey
        CODE
// 1885 {
        FUNCALL ZDApp_ResetNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV       A,#-0x15
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1886   nwkActiveKeyItems keyItems;
// 1887 
// 1888   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x15
        LCALL     ?Subroutine29 & 0xFFFF
// 1889   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1890                 (void *)&keyItems );
??CrossCallReturnLabel_31:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       ?V0,#0x15
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1891 }
        LJMP      ?Subroutine7 & 0xFFFF
          CFI EndBlock cfiBlock101

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function ZDApp_ResetNwkKey
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104
// 1892 
// 1893 /*********************************************************************
// 1894  * @fn      ZDApp_RestoreNwkSecMaterial()
// 1895  *
// 1896  * @brief   Restore the network frame counter associated to this ExtPanID and 
// 1897  *          increment it if found. This can only happens once per reset
// 1898  *
// 1899  * @param   none
// 1900  *
// 1901  * @return  none
// 1902  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1903 void ZDApp_RestoreNwkSecMaterial(void)
ZDApp_RestoreNwkSecMaterial:
          CFI Block cfiBlock105 Using cfiCommon0
          CFI Function ZDApp_RestoreNwkSecMaterial
        CODE
// 1904 {
        FUNCALL ZDApp_RestoreNwkSecMaterial, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkSecMaterial, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkSecMaterial, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1905   uint8 Found = FALSE;
// 1906   uint8 i;
// 1907   nwkSecMaterialDesc_t nwkSecMaterialDesc;
// 1908   uint8 UpdateFrameCounter = FALSE;
// 1909 
// 1910   //Search if we do have security material for this network
// 1911   for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
        MOV       ?V0,#0x0
        SJMP      ??ZDApp_RestoreNwkSecMaterial_0
// 1912   {
// 1913     osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
??ZDApp_RestoreNwkSecMaterial_1:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V2,#0xc
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1914     {
// 1915       if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        LCALL     ?Subroutine35 & 0xFFFF
// 1916       {
// 1917         UpdateFrameCounter = TRUE;
// 1918         Found = TRUE;
// 1919         break;
// 1920       }
// 1921     }
// 1922   }    
??CrossCallReturnLabel_67:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        JNZ       ??ZDApp_RestoreNwkSecMaterial_2
        INC       ?V0
??ZDApp_RestoreNwkSecMaterial_0:
        MOV       A,?V0
        ADD       A,#0x75
        MOV       R6,A
        CLR       A
        ADDC      A,#0x0
        MOV       R7,A
        MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,?V0
        SUBB      A,R0
        JC        ??ZDApp_RestoreNwkSecMaterial_1
// 1923   //Check if we do have frame counter stored in the generic
// 1924   if(!Found)
// 1925   {
// 1926     //The last entry readed has the Generic item, thefore, no need to read it again
// 1927     if(nwkSecMaterialDesc.FrameCounter)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??ZDApp_RestoreNwkSecMaterial_3
??ZDApp_RestoreNwkSecMaterial_2:
        MOV       DPTR,#FrameCounterUpdated
        MOVX      A,@DPTR
        JNZ       ??ZDApp_RestoreNwkSecMaterial_3
// 1928     {
// 1929       UpdateFrameCounter = TRUE;
// 1930     }
// 1931   }  
// 1932 
// 1933   if(UpdateFrameCounter && (!FrameCounterUpdated))
// 1934   {
// 1935     FrameCounterUpdated = TRUE;
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1936     
// 1937     // Increment the frame counter stored in NV
// 1938     nwkSecMaterialDesc.FrameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
// 1939                               NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
        MOV       DPTR,#__Constant_4e2
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       R0,#?V0
        LCALL     ?L_ADD_TO_X
// 1940     
// 1941     nwkFrameCounter = nwkSecMaterialDesc.FrameCounter;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#nwkFrameCounter
        LCALL     ?XSTORE_R0123
// 1942     
// 1943     osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0xc
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1944     
// 1945     nwkFrameCounterChanges = 0;
        MOV       DPTR,#nwkFrameCounterChanges
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1946   }
// 1947   return;
??ZDApp_RestoreNwkSecMaterial_3:
        LJMP      ?Subroutine5 & 0xFFFF
// 1948 }
          CFI EndBlock cfiBlock105
// 1949 
// 1950 /*********************************************************************
// 1951  * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
// 1952  *
// 1953  * @brief
// 1954  *
// 1955  *   Save off the Network key information.
// 1956  *
// 1957  * @param   incrFrmCnt - set to true if we want to increment the network
// 1958             frame counter, else set to false
// 1959  *
// 1960  * @return  true if restored from NV, false if not
// 1961  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1962 uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
ZDApp_RestoreNwkKey:
          CFI Block cfiBlock106 Using cfiCommon0
          CFI Function ZDApp_RestoreNwkKey
        CODE
// 1963 {
        FUNCALL ZDApp_RestoreNwkKey, ZDApp_RestoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 37
        MOV       A,#-0x25
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 1964   nwkActiveKeyItems keyItems;
// 1965   uint8 ret = FALSE;
        MOV       R6,#0x0
// 1966 
// 1967   ZDApp_RestoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
        LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
// 1968 
// 1969   // Restore the key information
// 1970   if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
// 1971       == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       ?V0,#0x15
        MOV       ?V1,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7e
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       A,R1
        JNZ       ??ZDApp_RestoreNwkKey_0
// 1972   {
// 1973     uint8 nullKey[SEC_KEY_LEN];
// 1974 
// 1975     // initialize default value to compare to
// 1976     osal_memset( nullKey, 0x00, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        LCALL     ?Subroutine42 & 0xFFFF
// 1977 
// 1978     // if stored key is different than default value, then a key has been established
// 1979     if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
??CrossCallReturnLabel_47:
        MOV       ?V2,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        LCALL     ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       A,R1
        JNZ       ??ZDApp_RestoreNwkKey_0
// 1980     {
// 1981       ret = TRUE;
        MOV       R6,#0x1
// 1982 
// 1983       // Clear copy in RAM before return.
// 1984       osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x15
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1985     }
// 1986   }
// 1987 
// 1988   return ( ret );
??ZDApp_RestoreNwkKey_0:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x25
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
// 1989 }
          CFI EndBlock cfiBlock106

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
          CFI Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function ZDApp_ResetNwkKey
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_31
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-4
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function ZDApp_RestoreNwkKey
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker110 Using cfiCommon1
          CFI (cfiPicker110) NoFunction
          CFI (cfiPicker110) Picker
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        RET
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiPicker110
// 1990 
// 1991 /*********************************************************************
// 1992  * @fn      ZDApp_ResetTimerStart
// 1993  *
// 1994  * @brief   Start the reset timer.
// 1995  *
// 1996  * @param   delay - delay time(ms) before reset
// 1997  *
// 1998  * @return  none
// 1999  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2000 void ZDApp_ResetTimerStart( uint16 delay )
ZDApp_ResetTimerStart:
          CFI Block cfiBlock111 Using cfiCommon0
          CFI Function ZDApp_ResetTimerStart
        CODE
// 2001 {
        FUNCALL ZDApp_ResetTimerStart, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetTimerStart, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        LCALL     ?Subroutine17 & 0xFFFF
// 2002   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
??CrossCallReturnLabel_79:
        JNZ       ??ZDApp_ResetTimerStart_0
// 2003   {
// 2004     // Start the rest timer
// 2005     osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
        ; Setup parameters for call to function osal_start_timerEx
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x4
        LCALL     ?Subroutine16 & 0xFFFF
// 2006   }
??CrossCallReturnLabel_83:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2007 }
??ZDApp_ResetTimerStart_0:
        SJMP      ??Subroutine61_0
          CFI EndBlock cfiBlock111

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond112 Using cfiCommon0
          CFI Function ZDApp_ResetTimerStart
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function ZDO_JoinIndicationCB
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker114 Using cfiCommon1
          CFI (cfiPicker114) NoFunction
          CFI (cfiPicker114) Picker
        MOV       ?V0,R2
        MOV       ?V1,R3
        ; Setup parameters for call to function osal_get_timeoutEx
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x4
        MOV       R3,#0x0
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiPicker114
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond115 Using cfiCommon0
          CFI Function AddrMgrWriteNVRequest
          CFI Conditional ??CrossCallReturnLabel_81
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function ZDApp_NwkStateUpdateCB
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond116) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond116) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond116) CFA_SP SP+-7
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function ZDApp_ResetTimerStart
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function ZDO_JoinIndicationCB
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker119 Using cfiCommon1
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        RET
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond120 Using cfiCommon0
          CFI Function ZDApp_ResetTimerStart
          CFI Conditional ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function ZDO_JoinIndicationCB
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function ZDApp_NetworkInit
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker123 Using cfiCommon1
          CFI (cfiPicker123) NoFunction
          CFI (cfiPicker123) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiPicker123
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiCond124 Using cfiCommon0
          CFI Function ZDApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function ZDApp_ResetTimerStart
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function ZDO_JoinIndicationCB
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function ZDApp_NetworkInit
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker128 Using cfiCommon1
          CFI (cfiPicker128) NoFunction
          CFI (cfiPicker128) Picker
        MOV       DPTR,#ZDAppTaskID
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiPicker128
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiCond129 Using cfiCommon0
          CFI Function ZDApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function ZDApp_event_loop
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function ZDApp_ResetTimerStart
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function ZDO_JoinIndicationCB
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function ZDApp_NetworkInit
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock136 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x4
          CFI EndBlock cfiBlock136
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiBlock137 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock137
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiBlock138 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock138
// 2008 
// 2009 /*********************************************************************
// 2010  * @fn      ZDApp_ResetTimerCancel
// 2011  *
// 2012  * @brief   Cancel the reset timer.
// 2013  *
// 2014  * @param   none
// 2015  *
// 2016  * @return  none
// 2017  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2018 void ZDApp_ResetTimerCancel( void )
ZDApp_ResetTimerCancel:
          CFI Block cfiBlock139 Using cfiCommon0
          CFI Function ZDApp_ResetTimerCancel
        CODE
// 2019 {
        FUNCALL ZDApp_ResetTimerCancel, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetTimerCancel, osal_clear_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2020   (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     ?Subroutine26 & 0xFFFF
// 2021   (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
??CrossCallReturnLabel_64:
        ; Setup parameters for call to function osal_clear_event
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
// 2022 }
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock139
// 2023 
// 2024 /*********************************************************************
// 2025  * @fn      ZDApp_LeaveCtrlInit
// 2026  *
// 2027  * @brief   Initialize the leave control logic.
// 2028  *
// 2029  * @param   none
// 2030  *
// 2031  * @return  none
// 2032  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2033 void ZDApp_LeaveCtrlInit( void )
ZDApp_LeaveCtrlInit:
          CFI Block cfiBlock140 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlInit
        CODE
// 2034 {
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2035   uint8 status;
// 2036 
// 2037 
// 2038   // Initialize control state
// 2039   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV       DPTR,#ZDApp_LeaveCtrl
        CLR       A
        MOVX      @DPTR,A
// 2040 
// 2041   status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
// 2042                               sizeof(ZDApp_LeaveCtrl),
// 2043                               &ZDApp_LeaveCtrl );
// 2044 
// 2045   if ( status == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_item_init
        MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
        MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,#-0x7b
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        JNZ       ??ZDApp_LeaveCtrlInit_0
// 2046   {
// 2047     // Read saved control
// 2048     osal_nv_read( ZCD_NV_LEAVE_CTRL,
// 2049                   0,
// 2050                   sizeof( uint8 ),
// 2051                   &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7b
        LCALL     ?Subroutine32 & 0xFFFF
// 2052   }
??CrossCallReturnLabel_74:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 2053 }
??ZDApp_LeaveCtrlInit_0:
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock140
// 2054 
// 2055 /*********************************************************************
// 2056  * @fn      ZDApp_LeaveCtrlSet
// 2057  *
// 2058  * @brief   Set the leave control logic.
// 2059  *
// 2060  * @param   ra - reassociate flag
// 2061  *
// 2062  * @return  none
// 2063  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2064 void ZDApp_LeaveCtrlSet( uint8 ra )
ZDApp_LeaveCtrlSet:
          CFI Block cfiBlock141 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlSet
        CODE
// 2065 {
        FUNCALL ZDApp_LeaveCtrlSet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2066   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
        MOV       DPTR,#ZDApp_LeaveCtrl
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2067 
// 2068   if ( ra == TRUE )
        XRL       A,R6
        JNZ       ??ZDApp_LeaveCtrlSet_0
// 2069   {
// 2070     ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2071   }
// 2072 
// 2073   // Write the leave control
// 2074   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 2075                  0,
// 2076                  sizeof( uint8 ),
// 2077                  &ZDApp_LeaveCtrl);
??ZDApp_LeaveCtrlSet_0:
        ; Setup parameters for call to function osal_nv_write
        LJMP      ?Subroutine4 & 0xFFFF
// 2078 }
          CFI EndBlock cfiBlock141
// 2079 
// 2080 /*********************************************************************
// 2081  * @fn      ZDApp_LeaveCtrlReset
// 2082  *
// 2083  * @brief   Re-initialize the leave control logic.
// 2084  *
// 2085  * @param   none
// 2086  *
// 2087  * @return  none
// 2088  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2089 void ZDApp_LeaveCtrlReset( void )
ZDApp_LeaveCtrlReset:
          CFI Block cfiBlock142 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlReset
        CODE
// 2090 {
        FUNCALL ZDApp_LeaveCtrlReset, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2091   // Set leave control to initialized state
// 2092   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV       DPTR,#ZDApp_LeaveCtrl
        CLR       A
        MOVX      @DPTR,A
// 2093 
// 2094   // Write initialized control
// 2095   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 2096                 0,
// 2097                 sizeof( uint8 ),
// 2098                 &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_write
        LJMP      ?Subroutine4 & 0xFFFF
// 2099 }
          CFI EndBlock cfiBlock142
// 2100 
// 2101 /*********************************************************************
// 2102  * @fn      ZDApp_LeaveCtrlBypass
// 2103  *
// 2104  * @brief   Check if NV restore should be skipped during a leave reset.
// 2105  *
// 2106  * @param   none
// 2107  *
// 2108  * @return  uint8 - (TRUE bypass:FALSE do not bypass)
// 2109  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2110 uint8 ZDApp_LeaveCtrlBypass( void )
ZDApp_LeaveCtrlBypass:
          CFI Block cfiBlock143 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlBypass
        CODE
// 2111 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2112   uint8 bypass;
// 2113 
// 2114   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
// 2115   {
// 2116     bypass = TRUE;
// 2117   }
// 2118   else
// 2119   {
// 2120     bypass = FALSE;
// 2121   }
// 2122 
// 2123   return bypass;
        MOV       DPTR,#ZDApp_LeaveCtrl
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        CLR       A
        RLC       A
        MOV       R1,A
        SJMP      ??Subroutine62_0
// 2124 }
          CFI EndBlock cfiBlock143
// 2125 
// 2126 /*********************************************************************
// 2127  * @fn      ZDApp_LeaveCtrlStartup
// 2128  *
// 2129  * @brief   Check for startup conditions during a leave reset.
// 2130  *
// 2131  * @param   state      - devState_t determined by leave control logic
// 2132  * @param   startDelay - startup delay
// 2133  *
// 2134  * @return  none
// 2135  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2136 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
ZDApp_LeaveCtrlStartup:
          CFI Block cfiBlock144 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlStartup
        CODE
// 2137 {
        FUNCALL ZDApp_LeaveCtrlStartup, ZDApp_LeaveCtrlReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2138   *startDelay = 0;
        MOV       DPL,R4
        MOV       DPH,R5
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2139 
// 2140   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
        MOV       DPTR,#ZDApp_LeaveCtrl
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??ZDApp_LeaveCtrlStartup_0
// 2141   {
// 2142     if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
        MOV       C,0xE0 /* A   */.1
        JNC       ??ZDApp_LeaveCtrlStartup_1
// 2143     {
// 2144       *startDelay = LEAVE_RESET_DELAY;
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,#-0x78
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x13
        SJMP      ??ZDApp_LeaveCtrlStartup_2
// 2145     }
// 2146     else
// 2147     {
// 2148       *state = DEV_HOLD;
??ZDApp_LeaveCtrlStartup_1:
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
??ZDApp_LeaveCtrlStartup_2:
        MOVX      @DPTR,A
// 2149     }
// 2150 
// 2151     // Reset leave control logic
// 2152     ZDApp_LeaveCtrlReset();
        ; Setup parameters for call to function ZDApp_LeaveCtrlReset
        LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
// 2153   }
// 2154 }
??ZDApp_LeaveCtrlStartup_0:
        SJMP      ??Subroutine62_0
          CFI EndBlock cfiBlock144

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock145 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 3)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock145
        REQUIRE ??Subroutine62_0
        ; // Fall through to label ??Subroutine62_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine62_0:
          CFI Block cfiBlock146 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock146
// 2155 
// 2156 /*********************************************************************
// 2157  * @fn      ZDApp_LeaveReset
// 2158  *
// 2159  * @brief   Setup a device reset due to a leave indication/confirm.
// 2160  *
// 2161  * @param   ra - reassociate flag
// 2162  *
// 2163  * @return  none
// 2164  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2165 void ZDApp_LeaveReset( uint8 ra )
ZDApp_LeaveReset:
          CFI Block cfiBlock147 Using cfiCommon0
          CFI Function ZDApp_LeaveReset
        CODE
// 2166 {
        FUNCALL ZDApp_LeaveReset, ZDApp_LeaveCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2167   ZDApp_LeaveCtrlSet( ra );
        ; Setup parameters for call to function ZDApp_LeaveCtrlSet
        LCALL     `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
// 2168 
// 2169   APSME_HoldDataRequests( LEAVE_RESET_DELAY);
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV       R2,#-0x78
        MOV       R3,#0x13
        LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 2170 
// 2171   if ( ZSTACK_ROUTER_BUILD )
// 2172   {
// 2173     osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
// 2174     osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
// 2175   }
// 2176 
// 2177   if (ZG_DEVICE_ENDDEVICE_TYPE)
// 2178   {
// 2179     // Save polling values to be restored after rejoin
// 2180     if ( ra == TRUE )
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??ZDApp_LeaveReset_0
// 2181     {
// 2182        ZDApp_SavedPollRate = zgPollRate;
        MOV       DPTR,#zgPollRate
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#ZDApp_SavedPollRate
        LCALL     ?XSTORE_R0123
// 2183        savedResponseRate = zgResponsePollRate;
        MOV       DPTR,#zgResponsePollRate
        LCALL     ??Subroutine69_0 & 0xFFFF
??CrossCallReturnLabel_112:
        MOV       DPTR,#savedResponseRate
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2184        savedQueuedPollRate = zgQueuedPollRate;
        MOV       DPTR,#zgQueuedPollRate
        LCALL     ??Subroutine69_0 & 0xFFFF
// 2185     }
??CrossCallReturnLabel_113:
        MOV       DPTR,#savedQueuedPollRate
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2186 
// 2187     // Disable polling
// 2188     NLME_SetPollRate(0);
??ZDApp_LeaveReset_0:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 2189     NLME_SetResponseRate(0);
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     ?Subroutine34 & 0xFFFF
// 2190     NLME_SetQueuedPollRate(0);
// 2191   }
// 2192 
// 2193   if ( ra == TRUE )
??CrossCallReturnLabel_36:
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??ZDApp_LeaveReset_1
// 2194   {
// 2195     devState = DEV_NWK_DISC;
        MOV       DPTR,#devState
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2196     devStartMode = MODE_REJOIN;
        MOV       DPTR,#devStartMode
        INC       A
        MOVX      @DPTR,A
// 2197     _tmpRejoinState = true;
        MOV       DPTR,#_tmpRejoinState
        MOV       A,#0x1
        LCALL     ?Subroutine9 & 0xFFFF
// 2198 
// 2199     // For rejoin, specify the extended PANID to look for
// 2200     osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
// 2201 
// 2202     _NIB.nwkState = NWK_DISC;
??CrossCallReturnLabel_1:
        MOV       DPTR,#_NIB + 35
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2203      NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 2204 
// 2205     ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV       A,R2
        ANL       A,#0x7f
        ADD       A,#0x64
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
        SJMP      ??ZDApp_LeaveReset_2
// 2206   }
// 2207   else
// 2208   {
// 2209     ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
??ZDApp_LeaveReset_1:
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV       R2,#-0x78
        MOV       R3,#0x13
        LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
// 2210   }
// 2211 }
??ZDApp_LeaveReset_2:
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock147

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond148 Using cfiCommon0
          CFI Function ZDApp_RestoreNetworkState
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function ZDApp_LeaveReset
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker150 Using cfiCommon1
          CFI (cfiPicker150) NoFunction
          CFI (cfiPicker150) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function sAddrExtCpy
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,#(_NIB + 53) & 0xff
        MOV       R5,#((_NIB + 53) >> 8) & 0xff
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        RET
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiPicker150
// 2212 
// 2213 /*********************************************************************
// 2214  * @fn      ZDApp_LeaveUpdate
// 2215  *
// 2216  * @brief   Update local device data related to leaving device.
// 2217  *
// 2218  * @param   nwkAddr        - NWK address of leaving device
// 2219  * @param   extAddr        - EXT address of leaving device
// 2220  * @param   removeChildren - remove children of leaving device
// 2221  * @param   rejoin         - if device will rejoin or not
// 2222  *
// 2223  * @return  none
// 2224  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2225 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
ZDApp_LeaveUpdate:
          CFI Block cfiBlock151 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
        CODE
// 2226                         uint8 removeChildren, uint8 rejoin )
// 2227 {
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrDeviceRemoveByExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, RTG_RemoveRtgEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, nwkNeighborRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, AddrMgrWriteNVRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2228   uint8 TC_ExtAddr[Z_EXTADDR_LEN];
// 2229   // Remove Apps Key for leaving device
// 2230   ZDSecMgrDeviceRemoveByExtAddr(extAddr);
        ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
        LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
// 2231 
// 2232   // Clear SECURITY bit from Address Manager
// 2233   ZDSecMgrAddrClear( extAddr );
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
// 2234 
// 2235   if ( pbindRemoveDev )
        MOV       DPTR,#pbindRemoveDev
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_102:
        JZ        ??ZDApp_LeaveUpdate_0
// 2236   {
// 2237     zAddrType_t devAddr;
// 2238 
// 2239     // Remove bind entry and all related data
// 2240     devAddr.addrMode = Addr64Bit;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2241     osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
// 2242 
// 2243     pbindRemoveDev(&devAddr);
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPTR,#pbindRemoveDev
        LCALL     ?Subroutine41 & 0xFFFF
// 2244   }
??CrossCallReturnLabel_91:
        LCALL     ?CALL_IND
// 2245 
// 2246   // Remove if child
// 2247   if ( ZSTACK_ROUTER_BUILD )
// 2248   {
// 2249     // Router shall notify the Trust Center that a child End Device or
// 2250     // a neighbor Router (within radius=1) has left the network
// 2251     APSME_UpdateDeviceReq_t req;
// 2252 
// 2253     // forward authorization to the Trust Center
// 2254     req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
// 2255     req.devAddr    = nwkAddr;
// 2256     req.devExtAddr = extAddr;
// 2257     req.status = APSME_UD_DEVICE_LEFT;
// 2258 
// 2259     if ( rejoin == FALSE )
// 2260     {
// 2261       if(!APSME_IsDistributedSecurity())
// 2262       {
// 2263         if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 2264         {
// 2265           uint8 found;
// 2266           APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
// 2267           
// 2268           APSME_SearchTCLinkKeyEntry(extAddr,&found,NULL);
// 2269           
// 2270           // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
// 2271           // un-encrypted and one APS encrypted, to make sure that it can interoperate
// 2272           // with legacy Coordinator devices which can only handle one or the other.
// 2273           if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY) && ( found == FALSE ) )
// 2274           {
// 2275             req.apsSecure = FALSE;
// 2276 
// 2277             // send and APSME_UPDATE_DEVICE request to the trust center
// 2278             APSME_UpdateDeviceReq( &req );
// 2279           }
// 2280 
// 2281           // send the message APS encrypted
// 2282           req.apsSecure = TRUE;
// 2283 
// 2284           // send and APSME_UPDATE_DEVICE request to the trust center
// 2285           APSME_UpdateDeviceReq( &req );
// 2286         }
// 2287         else
// 2288         {
// 2289           req.apsSecure = FALSE;
// 2290 
// 2291           // send and APSME_UPDATE_DEVICE request to the trust center
// 2292           APSME_UpdateDeviceReq( &req );
// 2293         }
// 2294       }
// 2295     }
// 2296 
// 2297     NLME_RemoveChild( extAddr, removeChildren );
// 2298   }
// 2299 
// 2300   // Remove Routing table related entry
// 2301   RTG_RemoveRtgEntry( nwkAddr, 0 );
??ZDApp_LeaveUpdate_0:
        ; Setup parameters for call to function RTG_RemoveRtgEntry
        MOV       R1,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
// 2302 
// 2303   // Remove entry from neighborTable
// 2304   nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
        ; Setup parameters for call to function nwkNeighborRemove
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
// 2305 
// 2306   // Schedule to save data to NV
// 2307   ZDApp_NwkWriteNVRequest();
        ; Setup parameters for call to function AddrMgrWriteNVRequest
        LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
// 2308 }
        MOV       A,#0x9
        LJMP      ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock151

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond152 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function ZDApp_SecInit
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_16
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-4
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_17
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-4
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_18
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-4
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker156 Using cfiCommon1
          CFI (cfiPicker156) NoFunction
          CFI (cfiPicker156) Picker
        MOVX      A,@DPTR
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiPicker156
        REQUIRE ??Subroutine63_0
        ; // Fall through to label ??Subroutine63_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine63_0:
          CFI Block cfiCond157 Using cfiCommon0
          CFI Function ZDO_AddrChangeIndicationCB
          CFI Conditional ??CrossCallReturnLabel_90
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function ZDApp_LeaveUpdate
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function ZDApp_SecInit
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_16
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-4
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_17
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_18
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-4
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker162 Using cfiCommon1
          CFI (cfiPicker162) NoFunction
          CFI (cfiPicker162) Picker
        MOV       R0,A
        INC       DPTR
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiPicker162
        REQUIRE ??Subroutine64_0
        ; // Fall through to label ??Subroutine64_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine64_0:
          CFI Block cfiCond163 Using cfiCommon0
          CFI Function ZDO_SrcRtgIndCB
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function ZDApp_LeaveUpdate
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function ZDApp_SecInit
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_16
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-4
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_17
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-4
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_18
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-4
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker169 Using cfiCommon1
          CFI (cfiPicker169) NoFunction
          CFI (cfiPicker169) Picker
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiPicker169
// 2309 
// 2310 /*********************************************************************
// 2311  * @fn      ZDApp_NetworkDiscoveryReq
// 2312  *
// 2313  * @brief   Request a network discovery.
// 2314  *
// 2315  * @param  scanChannels -
// 2316  * @param  scanDuration -
// 2317  *
// 2318  * @return  ZStatus_t
// 2319  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2320 ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
ZDApp_NetworkDiscoveryReq:
          CFI Block cfiBlock170 Using cfiCommon0
          CFI Function ZDApp_NetworkDiscoveryReq
        CODE
// 2321 {
        FUNCALL ZDApp_NetworkDiscoveryReq, NLME_NetworkDiscoveryRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 2322   // Setup optional filters - tbd
// 2323 
// 2324   // Request NLME network discovery
// 2325   return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
        ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
        LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
        LJMP      ??Subroutine61_0 & 0xFFFF
// 2326 }
          CFI EndBlock cfiBlock170
// 2327 
// 2328 /*********************************************************************
// 2329  * @fn      ZDApp_JoinReq
// 2330  *
// 2331  * @brief   Request the device to join a parent in a network.
// 2332  *
// 2333  * @param   channel -
// 2334  * @param   panID -
// 2335  *
// 2336  * @return  ZStatus_t
// 2337  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2338 ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
ZDApp_JoinReq:
          CFI Block cfiBlock171 Using cfiCommon0
          CFI Function ZDApp_JoinReq
        CODE
// 2339                          uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
// 2340 {
        FUNCALL ZDApp_JoinReq, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_JoinReq, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2341   // Sync up the node with the stack profile (In the case where a pro device
// 2342   // joins a non-pro network, or verse versa)
// 2343   ZDApp_NodeProfileSync( stackProfile);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
// 2344 
// 2345   // Request NLME Join Request
// 2346   return NLME_JoinRequest(extendedPanID, panID,channel,
// 2347                           ZDO_Config_Node_Descriptor.CapabilityFlags,
// 2348                           chosenParent, parentDepth);
        ; Setup parameters for call to function NLME_JoinRequest
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R1,?V2
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
        LJMP      ?Subroutine6 & 0xFFFF
// 2349 
// 2350 }
          CFI EndBlock cfiBlock171
// 2351 
// 2352 /*********************************************************************
// 2353  * @fn      ZDApp_DeviceConfigured
// 2354  *
// 2355  * @brief   Check to see if the local device is configured (i.e., part
// 2356  *          of a network).
// 2357  *
// 2358  * @param   none
// 2359  *
// 2360  * @return  TRUE if configured. FALSE, otherwise.
// 2361  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2362 uint8 ZDApp_DeviceConfigured( void )
ZDApp_DeviceConfigured:
          CFI Block cfiBlock172 Using cfiCommon0
          CFI Function ZDApp_DeviceConfigured
        CODE
// 2363 {
        FUNCALL ZDApp_DeviceConfigured, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2364   uint16 nwkAddr = INVALID_NODE_ADDR;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        LCALL     ?Subroutine10 & 0xFFFF
// 2365 
// 2366   osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
// 2367                 sizeof( uint16), &nwkAddr );
??CrossCallReturnLabel_3:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x14
        MOV       R5,#0x0
        MOV       R2,#0x21
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2368 
// 2369   // Does the NIB have anything more than default?
// 2370   return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??ZDApp_DeviceConfigured_0
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDApp_DeviceConfigured_0:
        JNZ       ??ZDApp_DeviceConfigured_1
        MOV       R1,#0x0
        SJMP      ??ZDApp_DeviceConfigured_2
??ZDApp_DeviceConfigured_1:
        MOV       R1,#0x1
??ZDApp_DeviceConfigured_2:
        MOV       A,#0x2
        LJMP      ??Subroutine49_0 & 0xFFFF
// 2371 }
          CFI EndBlock cfiBlock172

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond173 Using cfiCommon0
          CFI Function ZDApp_StoreNwkSecMaterial
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function ZDApp_DeviceConfigured
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker175 Using cfiCommon1
          CFI (cfiPicker175) NoFunction
          CFI (cfiPicker175) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiPicker175
// 2372 
// 2373 /*********************************************************************
// 2374  * CALLBACK FUNCTIONS
// 2375  */
// 2376 
// 2377 
// 2378 /*********************************************************************
// 2379  * @fn      ZDApp_SendEventMsg()
// 2380  *
// 2381  * @brief
// 2382  *
// 2383  *   Sends a Network Join message
// 2384  *
// 2385  * @param  cmd - command ID
// 2386  * @param  len - length (in bytes) of the buf field
// 2387  * @param  buf - buffer for the rest of the message.
// 2388  *
// 2389  * @return  none
// 2390  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2391 void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendEventMsg:
          CFI Block cfiBlock176 Using cfiCommon0
          CFI Function ZDApp_SendEventMsg
        CODE
// 2392 {
        FUNCALL ZDApp_SendEventMsg, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
// 2393   ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV       R3,A
        MOV       A,R1
        MOV       R2,A
        LCALL     ?Subroutine27 & 0xFFFF
// 2394 }
??CrossCallReturnLabel_27:
        LJMP      ??Subroutine48_0 & 0xFFFF
          CFI EndBlock cfiBlock176
// 2395 
// 2396 /*********************************************************************
// 2397  * @fn      ZDApp_SendMsg()
// 2398  *
// 2399  * @brief   Sends a OSAL message
// 2400  *
// 2401  * @param  taskID - Where to send the message
// 2402  * @param  cmd - command ID
// 2403  * @param  len - length (in bytes) of the buf field
// 2404  * @param  buf - buffer for the rest of the message.
// 2405  *
// 2406  * @return  none
// 2407  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2408 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendMsg:
          CFI Block cfiBlock177 Using cfiCommon0
          CFI Function ZDApp_SendMsg
        CODE
// 2409 {
        FUNCALL ZDApp_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV       A,#-0x13
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV       ?V4,R1
        MOV       ?V6,R2
        MOV       ?V5,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2410   osal_event_hdr_t *msgPtr;
// 2411 
// 2412   // Send the address to the task
// 2413   msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
        MOV       R6,?V5
        ; Setup parameters for call to function osal_msg_allocate
        MOV       A,R3
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2414   if ( msgPtr )
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDApp_SendMsg_0
// 2415   {
// 2416     if ( (len > 0) && (buf != NULL) )
        MOV       A,R6
        JZ        ??ZDApp_SendMsg_1
        MOV       A,?V2
        ORL       A,?V3
        JZ        ??ZDApp_SendMsg_1
// 2417       osal_memcpy( msgPtr, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V8,?V2
        MOV       ?V9,?V3
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R6
        MOV       R4,A
        MOV       R5,#0x0
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2418 
// 2419     msgPtr->event = cmd;
??ZDApp_SendMsg_1:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,?V6
        MOVX      @DPTR,A
// 2420     osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,?V4
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 2421   }
// 2422 }
??ZDApp_SendMsg_0:
        MOV       R7,#0xb
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock177
// 2423 
// 2424 /*********************************************************************
// 2425  * Call Back Functions from NWK  - API
// 2426  */
// 2427 
// 2428 /*********************************************************************
// 2429  * @fn          ZDO_NetworkDiscoveryConfirmCB
// 2430  *
// 2431  * @brief       This function returns a choice of PAN to join.
// 2432  *
// 2433  * @param       status - return status of the nwk discovery confirm
// 2434  *
// 2435  * @return      ZStatus_t
// 2436  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2437 ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
ZDO_NetworkDiscoveryConfirmCB:
          CFI Block cfiBlock178 Using cfiCommon0
          CFI Function ZDO_NetworkDiscoveryConfirmCB
        CODE
// 2438 {
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 3)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2439   osal_event_hdr_t msg;
// 2440 
// 2441   // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
// 2442   // Send ZDO_MGMT_NWK_DISC_RSP back
// 2443 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 2444   if ( zdappMgmtNwkDiscReqInProgress )
// 2445   {
// 2446     zdappMgmtNwkDiscReqInProgress = false;
// 2447     ZDO_FinishProcessingMgmtNwkDiscReq();
// 2448   }
// 2449   else
// 2450 #endif
// 2451   {
// 2452     // Pass the confirm to another task if it registers the callback
// 2453     // Otherwise, pass the confirm to ZDApp.
// 2454     if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc + 4
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_6:
        JZ        ??ZDO_NetworkDiscoveryConfirmCB_0
// 2455     {
// 2456       zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ?CALL_IND
        SJMP      ??CrossCallReturnLabel_28
// 2457     }
// 2458     else
// 2459     {
// 2460       // Otherwise, send scan confirm to ZDApp task to proceed
// 2461       msg.status = ZDO_SUCCESS;
??ZDO_NetworkDiscoveryConfirmCB_0:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 2462 
// 2463       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
        ; Setup parameters for call to function ZDApp_SendMsg
        INC       A
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x2
        MOV       R2,#0x1
        LCALL     ?Subroutine27 & 0xFFFF
// 2464     }
// 2465   }
// 2466   return (ZSuccess);
??CrossCallReturnLabel_28:
        MOV       R1,#0x0
        MOV       A,#0x3
        LJMP      ?Subroutine3 & 0xFFFF
// 2467 }  // ZDO_NetworkDiscoveryConfirmCB
          CFI EndBlock cfiBlock178

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond179 Using cfiCommon0
          CFI Function ZDApp_SendEventMsg
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function ZDO_NetworkDiscoveryConfirmCB
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond180) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond180) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond180) CFA_SP SP+-7
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function ZDO_JoinConfirmCB
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker182 Using cfiCommon1
          CFI (cfiPicker182) NoFunction
          CFI (cfiPicker182) Picker
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
        RET
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiPicker182
// 2468 
// 2469 /*********************************************************************
// 2470  * @fn          ZDApp_NwkDescListProcessing
// 2471  *
// 2472  * @brief       This function process the network discovery result and select
// 2473  *              a parent device to join itself.
// 2474  *
// 2475  * @param       none
// 2476  *
// 2477  * @return      ZStatus_t
// 2478  */
// 2479 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2480 networkDesc_t* ZDApp_NwkDescListProcessing(void)
ZDApp_NwkDescListProcessing:
          CFI Block cfiBlock183 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
        CODE
// 2481 {
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_desc_list_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 2482   networkDesc_t *pNwkDesc;
// 2483   uint8 i, ResultCount = 0;
        MOV       ?V1,#0x0
// 2484   uint8 stackProfile;
// 2485   uint8 stackProfilePro;
// 2486   uint8 selected;
// 2487 
// 2488   // Count the number of nwk descriptors in the list
// 2489   pNwkDesc = nwk_getNwkDescList();
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
        SJMP      ??CrossCallReturnLabel_99
// 2490   while (pNwkDesc)
// 2491   {
// 2492     ResultCount++;
??ZDApp_NwkDescListProcessing_0:
        INC       ?V1
// 2493     pNwkDesc = pNwkDesc->nextDesc;
        LCALL     ?Subroutine23 & 0xFFFF
// 2494   }
??CrossCallReturnLabel_99:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??ZDApp_NwkDescListProcessing_0
// 2495 
// 2496   // process discovery results
// 2497   stackProfilePro = FALSE;
        MOV       ?V0,#0x0
// 2498   selected = FALSE;
// 2499 
// 2500 
// 2501   for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
        MOV       ?V2,#0x0
// 2502   {
// 2503     pNwkDesc = nwk_getNwkDescList();
??ZDApp_NwkDescListProcessing_1:
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 2504     for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV       ?V3,#0x0
        SJMP      ??CrossCallReturnLabel_100
// 2505     {
// 2506        if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
// 2507       {
// 2508         // If the extended Pan ID is commissioned to a non zero value
// 2509         // Only join the Pan that has match EPID
// 2510         if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 2511           continue;
// 2512 
// 2513       }
// 2514       else if ( zgConfigPANID != 0xFFFF )
// 2515       {
// 2516         // PAN Id is preconfigured. check if it matches
// 2517         if ( pNwkDesc->panId != zgConfigPANID )
// 2518           continue;
// 2519       }
// 2520 
// 2521       if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
// 2522       {
// 2523         // check that network is allowing joining
// 2524         if ( ZSTACK_ROUTER_BUILD )
// 2525         {
// 2526           if ( stackProfilePro == FALSE )
// 2527           {
// 2528             if ( !pNwkDesc->routerCapacity )
// 2529             {
// 2530               continue;
// 2531             }
// 2532           }
// 2533           else
// 2534           {
// 2535             if ( !pNwkDesc->deviceCapacity )
// 2536             {
// 2537               continue;
// 2538             }
// 2539           }
// 2540         }
// 2541         else if ( ZSTACK_END_DEVICE_BUILD )
// 2542         {
// 2543           if ( !pNwkDesc->deviceCapacity )
// 2544           {
// 2545             continue;
// 2546           }
// 2547         }
// 2548       }
// 2549 
// 2550       // check version of zigbee protocol
// 2551       if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 2552         continue;
// 2553 
// 2554       // check version of stack profile
// 2555       if ( pNwkDesc->stackProfile != zgStackProfile  )
// 2556       {
// 2557         if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 2558             || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
??ZDApp_NwkDescListProcessing_2:
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_NwkDescListProcessing_3
        MOV       A,#0x1
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_3
// 2559         {
// 2560           stackProfilePro = TRUE;
??ZDApp_NwkDescListProcessing_4:
        MOV       ?V0,#0x1
// 2561         }
// 2562 
// 2563         if ( stackProfile == 0 )
??ZDApp_NwkDescListProcessing_3:
        MOV       A,?V2
        JZ        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
??ZDApp_NwkDescListProcessing_6:
        INC       ?V3
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV       A,?V3
        CLR       C
        SUBB      A,?V1
        JC        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDApp_NwkDescListProcessing_8
        ; Setup parameters for call to function sAddrExtCmp
        MOV       A,R6
        ADD       A,#0xb
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV       A,R1
        JNZ       ??ZDApp_NwkDescListProcessing_9
        SJMP      ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_8:
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??ZDApp_NwkDescListProcessing_10
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDApp_NwkDescListProcessing_10:
        JZ        ??ZDApp_NwkDescListProcessing_9
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_116:
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_11
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??ZDApp_NwkDescListProcessing_11:
        JNZ       ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_9:
        MOV       DPTR,#_NIB + 23
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_14:
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_12
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??ZDApp_NwkDescListProcessing_12:
        JNZ       ??ZDApp_NwkDescListProcessing_13
        MOV       A,#-0x2
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_14
        MOV       A,#-0x1
        XRL       A,R1
??ZDApp_NwkDescListProcessing_14:
        JNZ       ??ZDApp_NwkDescListProcessing_15
??ZDApp_NwkDescListProcessing_13:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_15:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#_NIB + 17
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_6
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#zgStackProfile
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        ??ZDApp_NwkDescListProcessing_5
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
        MOV       A,#0x2
        XRL       A,R0
        JZ        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
        LJMP      ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
// 2564         {
// 2565           continue;
// 2566         }
// 2567       }
// 2568 
// 2569       break;
// 2570     }
// 2571 
// 2572     if (i < ResultCount)
// 2573     {
// 2574      selected = TRUE;
// 2575       break;
// 2576     }
// 2577 
// 2578     // break if selected or stack profile pro wasn't found
// 2579     if ( (selected == TRUE) || (stackProfilePro == FALSE) )
??ZDApp_NwkDescListProcessing_7:
        MOV       A,?V0
        JZ        ??ZDApp_NwkDescListProcessing_16
// 2580     {
// 2581       break;
// 2582     }
// 2583   }
        INC       ?V2
        MOV       A,?V2
        CLR       C
        SUBB      A,#0x2
        JNC       $+5
        LJMP      ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
// 2584 
// 2585   if ( i == ResultCount )
??ZDApp_NwkDescListProcessing_16:
        MOV       A,?V1
        XRL       A,?V3
        JNZ       ??ZDApp_NwkDescListProcessing_5
// 2586   {
// 2587     nwk_desc_list_free();
        ; Setup parameters for call to function nwk_desc_list_free
        LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
// 2588     return (NULL);   // couldn't find appropriate PAN to join !
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??ZDApp_NwkDescListProcessing_17
// 2589   }
// 2590   else
// 2591   {
// 2592     return (pNwkDesc);
??ZDApp_NwkDescListProcessing_5:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
// 2593   }
??ZDApp_NwkDescListProcessing_17:
        LJMP      ?Subroutine1 & 0xFFFF
// 2594 }
          CFI EndBlock cfiBlock183
// 2595 
// 2596 /*********************************************************************
// 2597  * @fn          ZDO_NetworkFormationConfirmCB
// 2598  *
// 2599  * @brief       This function reports the results of the request to
// 2600  *              initialize a coordinator in a network.
// 2601  *
// 2602  * @param       Status - Result of NLME_NetworkFormationRequest()
// 2603  *
// 2604  * @return      none
// 2605  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2606 void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
ZDO_NetworkFormationConfirmCB:
          CFI Block cfiBlock184 Using cfiCommon0
          CFI Function ZDO_NetworkFormationConfirmCB
        CODE
// 2607 {
        FUNCALL ZDO_NetworkFormationConfirmCB, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, NLME_SetAssocFlags
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZDApp_RestoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZDSecMgrGenerateRndKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, bdb_nwkFormationAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 17
        MOV       A,#-0x11
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
// 2608   nwkStatus = (byte)Status;
        MOV       DPTR,#nwkStatus
        MOVX      @DPTR,A
// 2609 
// 2610   if ( Status == ZSUCCESS )
        JZ        $+5
        LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
// 2611   {
// 2612     bdb_setNodeIsOnANetwork(TRUE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x1
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 2613     
// 2614     if(ZG_DEVICE_COORDINATOR_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JNZ       ??ZDO_NetworkFormationConfirmCB_1
// 2615     {
// 2616       // LED on shows Coordinator started
// 2617       zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2618 
// 2619       zdoHalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
// 2620 
// 2621         #if defined ( ZBIT )
// 2622             SIM_SetColor(0xd0ffd0);
// 2623         #endif
// 2624 
// 2625       if ( devState == DEV_HOLD )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        JNZ       ??ZDO_NetworkFormationConfirmCB_2
// 2626       {
// 2627         ZDApp_ChangeState( DEV_COORD_STARTING );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x8
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 2628       }
// 2629     }
// 2630 
// 2631     if(ZG_DEVICE_RTR_TYPE)
??ZDO_NetworkFormationConfirmCB_1:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JZ        ??ZDO_NetworkFormationConfirmCB_2
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
// 2632     {
// 2633       uint8 x;
// 2634       uint8 tmpKey[SEC_KEY_LEN] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
??ZDO_NetworkFormationConfirmCB_2:
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x10
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 2635       
// 2636       if(APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JNZ       $+5
        LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
// 2637       {
// 2638         //Check if we have an extended PANID assigned
// 2639         if(nwk_ExtPANIDValid( _NIB.extendedPANID ) == false)
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV       R2,#(_NIB + 53) & 0xff
        MOV       R3,#((_NIB + 53) >> 8) & 0xff
        LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV       A,R1
        JNZ       ??ZDO_NetworkFormationConfirmCB_3
// 2640         {
// 2641           //Set the extended PANID as the extended address
// 2642           osal_cpyExtAddr( _NIB.extendedPANID, aExtendedAddress );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,#aExtendedAddress & 0xff
        MOV       R5,#(aExtendedAddress >> 8) & 0xff
        MOV       R2,#(_NIB + 53) & 0xff
        MOV       R3,#((_NIB + 53) >> 8) & 0xff
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2643         } 
// 2644         
// 2645         ZMacSetReq(MAC_SUPERFRAME_PAN_COORD,0);
??ZDO_NetworkFormationConfirmCB_3:
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#-0x10
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 2646         
// 2647         //Set the MAC address
// 2648         ZMacSetReq( ZMacShortAddress, (uint8 *)&(_NIB.nwkDevAddress) );
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,#(_NIB + 20) & 0xff
        MOV       R3,#((_NIB + 20) >> 8) & 0xff
        MOV       R1,#0x53
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 2649 
// 2650         if ( _NIB.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
// 2651           x = true;
// 2652         else
// 2653           x = false;
        MOV       DPTR,#_NIB + 14
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??ZDO_NetworkFormationConfirmCB_4
        SETB      B.0
        SJMP      ??ZDO_NetworkFormationConfirmCB_5
??ZDO_NetworkFormationConfirmCB_4:
        CLR       B.0
??ZDO_NetworkFormationConfirmCB_5:
        MOV       C,B.0
        CLR       A
        RLC       A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2654         ZMacSetReq( ZMacRxOnIdle, &x );
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 2655 
// 2656         // Change NIB state to router for restore
// 2657         _NIB.nwkState = NWK_ROUTER;
        MOV       DPTR,#_NIB + 35
        MOV       A,#0x8
        MOVX      @DPTR,A
// 2658         NLME_SetAssocFlags();
        ; Setup parameters for call to function NLME_SetAssocFlags
        LCALL     `??NLME_SetAssocFlags::?relay`; Banked call to: NLME_SetAssocFlags
// 2659 
// 2660         //Restore the nwk security material using the generic index
// 2661         ZDApp_RestoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
        LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
// 2662         
// 2663         //Be sure to store the nwk FrameCounter if
// 2664         if(nwkFrameCounter == 0)
        MOV       DPTR,#nwkFrameCounter
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JNZ       ??ZDO_NetworkFormationConfirmCB_6
// 2665         {
// 2666           nwkFrameCounter = 1;
        MOV       DPTR,#nwkFrameCounter
        MOV       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2667         }
// 2668         
// 2669         osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV | ZDO_FRAMECOUNTER_CHANGE);
??ZDO_NetworkFormationConfirmCB_6:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x0
        MOV       R3,#0x3
        LCALL     ??Subroutine71_0 & 0xFFFF
// 2670         
// 2671         ZDSecMgrGenerateRndKey(tmpKey);
??CrossCallReturnLabel_127:
        ; Setup parameters for call to function ZDSecMgrGenerateRndKey
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
// 2672          
// 2673         //Set the nwk key as the default and initialize the keySeqNum
// 2674         SSP_UpdateNwkKey( tmpKey, 0 );
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
// 2675         if ( !_NIB.nwkKeyLoaded )
        MOV       DPTR,#_NIB + 61
        MOVX      A,@DPTR
        JNZ       ??ZDO_NetworkFormationConfirmCB_7
// 2676         {
// 2677           SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV       R1,#0x0
        LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 2678         }
// 2679         
// 2680         // Clear copy in RAM after use 
// 2681         osal_memset(tmpKey,0,SEC_KEY_LEN);
??ZDO_NetworkFormationConfirmCB_7:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2682         
// 2683         //Success formation of distributed nwk
// 2684         bdb_nwkFormationAttempt(TRUE);
        ; Setup parameters for call to function bdb_nwkFormationAttempt
        MOV       R1,#0x1
        LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
// 2685       }
// 2686     }
// 2687   }
// 2688 
// 2689   else
// 2690   {
// 2691     #if defined(BLINK_LEDS)
// 2692       zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2693     #endif
// 2694   }
// 2695 
// 2696 
// 2697   osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
??ZDO_NetworkFormationConfirmCB_0:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x2
        LCALL     ??Subroutine70_0 & 0xFFFF
// 2698 }
??CrossCallReturnLabel_124:
        MOV       A,#0x11
        LJMP      ??Subroutine47_0 & 0xFFFF
          CFI EndBlock cfiBlock184
// 2699 
// 2700 /****************************************************************************
// 2701  * @fn          ZDApp_beaconIndProcessing
// 2702  *
// 2703  * @brief       This function processes the incoming beacon indication.
// 2704  *
// 2705  *              When another task (MT or App) is registered to process
// 2706  *              beacon indication themselves, this function will parse the
// 2707  *              beacon payload and pass the beacon descriptor to that task
// 2708  *              If no other tasks registered, this function will process
// 2709  *              the beacon payload and generate the network descriptor link
// 2710  *              list.
// 2711  *
// 2712  * @param
// 2713  *
// 2714  * @return      none
// 2715  *
// 2716  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2717 void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
ZDO_beaconNotifyIndCB:
          CFI Block cfiBlock185 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
        CODE
// 2718 {
        FUNCALL ZDO_beaconNotifyIndCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, bdb_isDeviceNonFactoryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2719   // Pass the beacon Indication to another task if it registers the callback
// 2720   // Otherwise, process the beacon notification here.
// 2721   if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc + 6
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_7:
        JZ        ??ZDO_beaconNotifyIndCB_0
// 2722   {
// 2723     zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
        ; Setup parameters for indirect call
        LCALL     ?CALL_IND
        LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2724   }
// 2725   else
// 2726   {
// 2727     networkDesc_t *pNwkDesc;
// 2728     networkDesc_t *pLastNwkDesc;
// 2729     uint8 found = false;
// 2730 
// 2731     // Add the network to the Network Descriptor List
// 2732     pNwkDesc = NwkDescList;
??ZDO_beaconNotifyIndCB_0:
        MOV       DPTR,#NwkDescList
        LCALL     ??Subroutine66_0 & 0xFFFF
// 2733     pLastNwkDesc = NwkDescList;
??CrossCallReturnLabel_96:
        MOV       DPTR,#NwkDescList
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,R2
        ADD       A,#0x4
        MOV       ?V6,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V7,A
        MOV       A,R2
        ADD       A,#0x2
        MOV       ?V4,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V5,A
        SJMP      ??CrossCallReturnLabel_101
// 2734     while (pNwkDesc)
// 2735     {
// 2736       if ((pNwkDesc->panId == pBeacon->panID) &&
// 2737           (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
??ZDO_beaconNotifyIndCB_2:
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_117:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDO_beaconNotifyIndCB_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??ZDO_beaconNotifyIndCB_3:
        JNZ       ??ZDO_beaconNotifyIndCB_4
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        ??ZDO_beaconNotifyIndCB_5
// 2738       {
// 2739         found = true;
// 2740         break;
// 2741       }
// 2742       pLastNwkDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_4:
        MOV       ?V2,R6
        MOV       ?V3,R7
// 2743       pNwkDesc = pNwkDesc->nextDesc;
        LCALL     ?Subroutine23 & 0xFFFF
// 2744     }
??CrossCallReturnLabel_101:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??ZDO_beaconNotifyIndCB_2
// 2745 
// 2746     // If no existing descriptor found, make a new one and add to the list
// 2747     if (found == false)
// 2748     {
// 2749       pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x16
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R6,?V8
        MOV       R7,?V9
// 2750       if ( !pNwkDesc )
        MOV       A,R2
        ORL       A,R7
        JNZ       $+5
        LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2751       {
// 2752         // Memory alloc failed, discard this beacon
// 2753         return;
// 2754       }
// 2755 
// 2756       // Clear the network descriptor
// 2757       osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x16
        MOV       R5,#0x0
        MOV       R1,#0x0
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2758 
// 2759       // Initialize the descriptor
// 2760       pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
// 2761       pNwkDesc->chosenRouterDepth = 0xFF;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
// 2762 
// 2763       // Save new entry into the descriptor list
// 2764       if ( !NwkDescList )
        MOV       DPTR,#NwkDescList
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_103:
        JNZ       ??ZDO_beaconNotifyIndCB_6
// 2765       {
// 2766         NwkDescList = pNwkDesc;
        MOV       DPTR,#NwkDescList
        SJMP      ??ZDO_beaconNotifyIndCB_7
// 2767       }
// 2768       else
// 2769       {
// 2770         pLastNwkDesc->nextDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_6:
        MOV       A,?V2
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
??ZDO_beaconNotifyIndCB_7:
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 2771       }
// 2772     }
// 2773 
// 2774     // Update the descriptor with the incoming beacon
// 2775     pNwkDesc->stackProfile   = pBeacon->stackProfile;
??ZDO_beaconNotifyIndCB_5:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_25:
        INC       DPTR
        MOVX      @DPTR,A
// 2776     pNwkDesc->version        = pBeacon->protocolVersion;
        MOV       A,?V0
        ADD       A,#0x8
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_26:
        MOVX      @DPTR,A
// 2777     pNwkDesc->logicalChannel = pBeacon->logicalChannel;
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
// 2778     pNwkDesc->panId          = pBeacon->panID;
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine72_0 & 0xFFFF
// 2779     pNwkDesc->updateId       = pBeacon->updateID;
??CrossCallReturnLabel_130:
        MOV       A,?V0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2780 
// 2781     // Save the extended PAN ID from the beacon payload only if 1.1 version network
// 2782     if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
        MOV       A,R6
        ADD       A,#0xb
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDO_beaconNotifyIndCB_8
// 2783     {
// 2784       osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,?V0
        ADD       A,#0xd
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??ZDO_beaconNotifyIndCB_9
// 2785     }
// 2786     else
// 2787     {
// 2788       osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
??ZDO_beaconNotifyIndCB_8:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#-0x1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2789     }
// 2790 
// 2791     // check if this device is a better choice to join...
// 2792     // ...dont bother checking assocPermit flag is doing a rejoin
// 2793     if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
// 2794         ( ( pBeacon->permitJoining == TRUE ) || ( bdb_isDeviceNonFactoryNew() ) ) )
??ZDO_beaconNotifyIndCB_9:
        MOV       A,?V0
        ADD       A,#0xa
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V2,R0
        MOV       ?V3,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#gMIN_TREE_LQI
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDO_beaconNotifyIndCB_10
        ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
        LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
        MOV       A,R1
        JNZ       $+5
        LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2795     {
// 2796       uint8 selected = FALSE;
??ZDO_beaconNotifyIndCB_10:
        CLR       B.0
// 2797       uint8 capacity = FALSE;
// 2798 
// 2799 #if defined ( ZIGBEEPRO )
// 2800       if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
// 2801             (pBeacon->depth < MAX_NODE_DEPTH)) ||
// 2802           ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
// 2803            (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       A,R6
        ADD       A,#0x9
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       A,R6
        ADD       A,#0xa
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       A,?V0
        ADD       A,#0xb
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        MOV       A,?V5
        CLR       C
        SUBB      A,?V4
        JNC       ??ZDO_beaconNotifyIndCB_11
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x14
        JC        ??ZDO_beaconNotifyIndCB_12
        SJMP      ??ZDO_beaconNotifyIndCB_13
??ZDO_beaconNotifyIndCB_11:
        MOV       A,?V5
        XRL       A,?V4
        JNZ       ??ZDO_beaconNotifyIndCB_13
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,?V4
        JNC       ??ZDO_beaconNotifyIndCB_13
// 2804       {
// 2805         selected = TRUE;
??ZDO_beaconNotifyIndCB_12:
        SETB      B.0
// 2806       }
// 2807 #else
// 2808       if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
// 2809       {
// 2810         selected = TRUE;
// 2811       }
// 2812 #endif
// 2813 
// 2814       if ( ZSTACK_ROUTER_BUILD )
// 2815       {
// 2816         capacity = pBeacon->routerCapacity;
// 2817       }
// 2818       else if ( ZSTACK_END_DEVICE_BUILD )
// 2819       {
// 2820         capacity = pBeacon->deviceCapacity;
// 2821       }
// 2822 
// 2823       if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
??ZDO_beaconNotifyIndCB_13:
        MOV       A,?V0
        ADD       A,#0x7
        MOV       ?V4,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V5,A
        MOV       DPL,?V4
        MOV       DPH,A
        MOVX      A,@DPTR
        JNZ       ??ZDO_beaconNotifyIndCB_14
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
        MOV       DPTR,#_NIB + 23
        MOVX      A,@DPTR
        XRL       A,?V6
        JNZ       ??ZDO_beaconNotifyIndCB_15
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V7
??ZDO_beaconNotifyIndCB_15:
        JNZ       ??ZDO_beaconNotifyIndCB_16
??ZDO_beaconNotifyIndCB_14:
        MOV       C,B.0
        JNC       ??ZDO_beaconNotifyIndCB_17
// 2824       {
// 2825         // this is the new chosen router for joining...
// 2826         pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,?V6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V7
        LCALL     ?Subroutine12 & 0xFFFF
// 2827         pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
??CrossCallReturnLabel_4:
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      @DPTR,A
// 2828         pNwkDesc->chosenRouterDepth       = pBeacon->depth;
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
// 2829       }
// 2830 
// 2831       if ( pBeacon->deviceCapacity )
??ZDO_beaconNotifyIndCB_17:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        JZ        ??ZDO_beaconNotifyIndCB_16
// 2832         pNwkDesc->deviceCapacity = 1;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2833 
// 2834       if ( pBeacon->routerCapacity )
??ZDO_beaconNotifyIndCB_16:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??ZDO_beaconNotifyIndCB_1
// 2835         pNwkDesc->routerCapacity = 1;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2836     }
// 2837   }
// 2838 }
??ZDO_beaconNotifyIndCB_1:
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock185

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond186 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker188 Using cfiCommon1
          CFI (cfiPicker188) NoFunction
          CFI (cfiPicker188) Picker
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiPicker188

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function ZDO_JoinConfirmCB
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function ZDO_JoinConfirmCB
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function ZDO_LeaveInd
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker195 Using cfiCommon1
          CFI (cfiPicker195) NoFunction
          CFI (cfiPicker195) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiPicker195
// 2839 
// 2840 /*********************************************************************
// 2841  * @fn          ZDO_StartRouterConfirmCB
// 2842  *
// 2843  * @brief       This function reports the results of the request to
// 2844  *              start functioning as a router in a network.
// 2845  *
// 2846  * @param       Status - Result of NLME_StartRouterRequest()
// 2847  *
// 2848  * @return      none
// 2849  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2850 void ZDO_StartRouterConfirmCB( ZStatus_t Status )
ZDO_StartRouterConfirmCB:
          CFI Block cfiBlock196 Using cfiCommon0
          CFI Function ZDO_StartRouterConfirmCB
        CODE
// 2851 {
        FUNCALL ZDO_StartRouterConfirmCB, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
// 2852   nwkStatus = (byte)Status;
        MOV       DPTR,#nwkStatus
        MOVX      @DPTR,A
// 2853 
// 2854   if ( Status == ZSUCCESS )
        JNZ       ??ZDO_StartRouterConfirmCB_0
// 2855   {
// 2856     // LED on shows Router started
// 2857     zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2858     zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 2859     if ( devState == DEV_HOLD )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        JNZ       ??ZDO_StartRouterConfirmCB_0
// 2860     {
// 2861       ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 2862     }
// 2863   }
// 2864 #if defined(BLINK_LEDS)
// 2865   else
// 2866   {
// 2867     zdoHalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2868   }
// 2869 #endif
// 2870 
// 2871   osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
??ZDO_StartRouterConfirmCB_0:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x20
        LCALL     ??Subroutine70_0 & 0xFFFF
// 2872 }
??CrossCallReturnLabel_125:
        LJMP      ??Subroutine48_0 & 0xFFFF
          CFI EndBlock cfiBlock196
// 2873 
// 2874 /*********************************************************************
// 2875  * @fn          ZDO_JoinConfirmCB
// 2876  *
// 2877  * @brief       This function allows the next higher layer to be notified
// 2878  *              of the results of its request to join itself or another
// 2879  *              device to a network.
// 2880  *
// 2881  * @param       Status - Result of NLME_JoinRequest()
// 2882  *
// 2883  * @return      none
// 2884  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2885 void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
ZDO_JoinConfirmCB:
          CFI Block cfiBlock197 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
        CODE
// 2886 {
        FUNCALL ZDO_JoinConfirmCB, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, nwkNeighborFindEmptySlot
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       ?V0,R1
// 2887   (void)PanId;  // remove if this parameter is used.
// 2888 
// 2889   nwkStatus = (byte)Status;
        MOV       A,R1
        MOV       DPTR,#nwkStatus
        MOVX      @DPTR,A
// 2890 
// 2891   if ( Status == ZSUCCESS )
        JZ        $+5
        LJMP      ??ZDO_JoinConfirmCB_0 & 0xFFFF
// 2892   {
// 2893     if ( ZSTACK_END_DEVICE_BUILD
// 2894       || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
// 2895     {
// 2896       neighborEntry_t *pItem;
// 2897 
// 2898       // We don't need the neighbor table entries.
// 2899       // Clear the neighbor Table to remove beacon information
// 2900       nwkNeighborInitTable();
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 2901 
// 2902       // Force a neighbor table entry for the parent
// 2903       pItem = nwkNeighborFindEmptySlot();
        ; Setup parameters for call to function nwkNeighborFindEmptySlot
        LCALL     `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
// 2904       if ( pItem != NULL )
        MOV       A,R2
        ORL       A,R7
        JZ        ??ZDO_JoinConfirmCB_1
// 2905       {
// 2906         osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x17
        MOV       R5,#0x0
        MOV       R1,#0x0
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2907         pItem->neighborAddress = _NIB.nwkCoordAddress;
        MOV       DPTR,#_NIB + 23
        LCALL     ??Subroutine69_0 & 0xFFFF
??CrossCallReturnLabel_114:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2908         osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,#(_NIB + 25) & 0xff
        MOV       R5,#((_NIB + 25) >> 8) & 0xff
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2909         pItem->panId = _NIB. nwkPanId;
        MOV       DPTR,#_NIB + 33
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_15:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2910         pItem->linkInfo.rxLqi = DEF_LQI;
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV       A,#-0x56
        MOVX      @DPTR,A
// 2911         pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
        MOV       DPTR,#gLINK_DOWN_TRIGGER
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R1,#0x0
        ADD       A,#0x1
        MOV       R0,A
        JNC       ??ZDO_JoinConfirmCB_2
        INC       R1
??ZDO_JoinConfirmCB_2:
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     ?S_DIV_MOD
        MOV       A,R6
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOV       A,R0
        MOVX      @DPTR,A
// 2912         pItem->linkInfo.txCost = DEF_LINK_COST;
        MOV       A,R6
        LCALL     ?Subroutine39 & 0xFFFF
// 2913       }
// 2914     }
??CrossCallReturnLabel_42:
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2915 
// 2916     if ( (devState == DEV_HOLD) )
??ZDO_JoinConfirmCB_1:
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        JNZ       ??ZDO_JoinConfirmCB_3
// 2917     {
// 2918       ZDApp_ChangeState( DEV_NWK_JOINING );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x3
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 2919     }
// 2920 
// 2921     if ( !ZG_SECURE_ENABLED )
// 2922     {
// 2923       // Notify to save info into NV
// 2924       ZDApp_NVUpdate();
// 2925     }
// 2926 
// 2927     NLME_SetPollRate( ZDApp_SavedPollRate );
??ZDO_JoinConfirmCB_3:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#ZDApp_SavedPollRate
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 2928   }
// 2929 
// 2930   // Pass the join confirm to higher layer if callback registered
// 2931   if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
??ZDO_JoinConfirmCB_0:
        MOV       DPTR,#zdoCBFunc + 8
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_104:
        JZ        ??ZDO_JoinConfirmCB_4
// 2932   {
// 2933     zdoJoinCnf_t joinCnf;
// 2934 
// 2935     joinCnf.status = Status;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,?V0
        MOVX      @DPTR,A
// 2936     joinCnf.deviceAddr = _NIB.nwkDevAddress;
        MOV       DPTR,#_NIB + 20
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine72_0 & 0xFFFF
// 2937     joinCnf.parentAddr = _NIB.nwkCoordAddress;
??CrossCallReturnLabel_131:
        MOV       DPTR,#_NIB + 23
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine72_0 & 0xFFFF
// 2938 
// 2939     zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
??CrossCallReturnLabel_132:
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?CALL_IND
// 2940   }
// 2941   
// 2942   // Notify ZDApp
// 2943   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
??ZDO_JoinConfirmCB_4:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R3,#0x2
        MOV       R2,#0x2
        LCALL     ?Subroutine27 & 0xFFFF
// 2944 
// 2945 }
??CrossCallReturnLabel_29:
        MOV       A,#0x5
        LJMP      ??Subroutine60_0 & 0xFFFF
          CFI EndBlock cfiBlock197

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function ZDO_LeaveCnf
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker200 Using cfiCommon1
          CFI (cfiPicker200) NoFunction
          CFI (cfiPicker200) Picker
        MOV       A,R6
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiPicker200
        REQUIRE ??Subroutine65_0
        ; // Fall through to label ??Subroutine65_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine65_0:
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function ZDApp_InMsgCB
          CFI Conditional ??CrossCallReturnLabel_93
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function ZDO_JoinConfirmCB
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function ZDO_LeaveCnf
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker204 Using cfiCommon1
          CFI (cfiPicker204) NoFunction
          CFI (cfiPicker204) Picker
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        RET
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiPicker204

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond205 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function ZDO_JoinConfirmCB
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker207 Using cfiCommon1
          CFI (cfiPicker207) NoFunction
          CFI (cfiPicker207) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiPicker207
// 2946 
// 2947 /*********************************************************************
// 2948  * @fn          ZDO_PermitJoinCB
// 2949  *
// 2950  * @brief      This function is called when there is a change in the
// 2951  *             device's permit join status.
// 2952  *
// 2953  * @param       duration - the new duration
// 2954  *
// 2955  * @return      none
// 2956  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2957 void ZDO_PermitJoinCB( uint8 duration )
ZDO_PermitJoinCB:
          CFI Block cfiBlock208 Using cfiCommon0
          CFI Function ZDO_PermitJoinCB
        CODE
// 2958 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2959   // Pass the Permit Join status to higher layer if callback registered
// 2960   if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc + 14
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_8:
        JZ        ??ZDO_PermitJoinCB_0
// 2961   {
// 2962     zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ?CALL_IND
// 2963   }
// 2964 }
??ZDO_PermitJoinCB_0:
        MOV       A,#0x1
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock208
// 2965 
// 2966 /*********************************************************************
// 2967  * @fn          ZDO_AddrChangeIndicationCB
// 2968  *
// 2969  * @brief       This function notifies the application that this
// 2970  *              device's address has changed.  Could happen in
// 2971  *              a network with stochastic addressing (PRO).
// 2972  *
// 2973  * @param       newAddr - the new address
// 2974  *
// 2975  * @return      none
// 2976  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2977 void ZDO_AddrChangeIndicationCB( uint16 newAddr )
ZDO_AddrChangeIndicationCB:
          CFI Block cfiBlock209 Using cfiCommon0
          CFI Function ZDO_AddrChangeIndicationCB
        CODE
// 2978 {
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2979   ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
// 2980   epList_t *pItem = epList;
        MOV       DPTR,#epList
        LCALL     ??Subroutine66_0 & 0xFFFF
// 2981 
// 2982   // Notify to save info into NV
// 2983   ZDApp_NVUpdate();
??CrossCallReturnLabel_97:
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 2984 
// 2985   // Notify the applications
// 2986   osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_121:
        SJMP      ??CrossCallReturnLabel_98
// 2987 
// 2988   while (pItem != NULL)
// 2989   {
// 2990     if (pItem->epDesc->endPoint != ZDO_EP)
??ZDO_AddrChangeIndicationCB_0:
        MOV       A,R6
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V2,R0
        MOV       ?V3,A
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_17:
        JZ        ??ZDO_AddrChangeIndicationCB_1
// 2991     {
// 2992       pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
// 2993       if (pZDOAddrChangeMsg != NULL)
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDO_AddrChangeIndicationCB_1
// 2994       {
// 2995         pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#-0x2a
        MOVX      @DPTR,A
// 2996         pZDOAddrChangeMsg->shortAddr = newAddr;
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        LCALL     ?Subroutine12 & 0xFFFF
// 2997         osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
// 2998       }
// 2999     }
??CrossCallReturnLabel_5:
        LCALL     ??Subroutine63_0 & 0xFFFF
??CrossCallReturnLabel_90:
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV       R1,A
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 3000     pItem = pItem->nextDesc;
??ZDO_AddrChangeIndicationCB_1:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine66_0 & 0xFFFF
// 3001   }
??CrossCallReturnLabel_98:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??ZDO_AddrChangeIndicationCB_0
// 3002 
// 3003   // Send out a device announce
// 3004   ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 3005 }
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock209

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond210 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
          CFI Conditional ??CrossCallReturnLabel_99
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond212) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond212) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond212) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-2
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker213 Using cfiCommon1
          CFI (cfiPicker213) NoFunction
          CFI (cfiPicker213) Picker
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiPicker213
        REQUIRE ??Subroutine66_0
        ; // Fall through to label ??Subroutine66_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine66_0:
          CFI Block cfiCond214 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-2
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-2
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-2
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker220 Using cfiCommon1
          CFI (cfiPicker220) NoFunction
          CFI (cfiPicker220) Picker
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        RET
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiPicker220

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond221 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker224 Using cfiCommon1
          CFI (cfiPicker224) NoFunction
          CFI (cfiPicker224) Picker
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_92:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiPicker224

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond225 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker227 Using cfiCommon1
          CFI (cfiPicker227) NoFunction
          CFI (cfiPicker227) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_msg_send
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiPicker227
// 3006 
// 3007 /*********************************************************************
// 3008  * @fn          ZDO_JoinIndicationCB
// 3009  *
// 3010  * @brief       This function allows the next higher layer of a
// 3011  *              coordinator to be notified of a remote join request.
// 3012  *
// 3013  * @param       ShortAddress - 16-bit address
// 3014  * @param       ExtendedAddress - IEEE (64-bit) address
// 3015  * @param       CapabilityFlags - Association Capability Flags
// 3016  * @param       type - of joining -
// 3017  *                          NWK_ASSOC_JOIN
// 3018  *                          NWK_ASSOC_REJOIN_UNSECURE
// 3019  *                          NWK_ASSOC_REJOIN_SECURE
// 3020  *
// 3021  * @return      ZStatus_t
// 3022  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3023 ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
ZDO_JoinIndicationCB:
          CFI Block cfiBlock228 Using cfiCommon0
          CFI Function ZDO_JoinIndicationCB
        CODE
// 3024                                 uint8 CapabilityFlags, uint8 type)
// 3025 {
        FUNCALL ZDO_JoinIndicationCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        LCALL     ?Subroutine17 & 0xFFFF
// 3026   (void)ExtendedAddress;
// 3027   //check if the device is leaving before responding to rejoin request
// 3028   if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
??CrossCallReturnLabel_80:
        JZ        ??ZDO_JoinIndicationCB_0
// 3029   {
// 3030     return ZFailure; // device leaving , hence do not allow rejoin
        MOV       R1,#0x1
        LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
// 3031   }
// 3032 
// 3033 #if ZDO_NV_SAVE_RFDs
// 3034     (void)CapabilityFlags;
// 3035 
// 3036 #else  // if !ZDO_NV_SAVE_RFDs
// 3037     if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
// 3038 #endif
// 3039     {
// 3040       ZDApp_NVUpdate();  // Notify to save info into NV.
??ZDO_JoinIndicationCB_0:
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
// 3041     }
// 3042 
// 3043     if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
// 3044     {
// 3045       if ( type == NWK_ASSOC_JOIN ||
// 3046           type == NWK_ASSOC_REJOIN_UNSECURE ||
// 3047             type == NWK_ASSOC_REJOIN_SECURE )
        JZ        ??ZDO_JoinIndicationCB_2
        MOV       A,#0x1
        XRL       A,R0
        JZ        ??ZDO_JoinIndicationCB_2
        MOV       A,#0x2
        XRL       A,R0
        JZ        $+5
        LJMP      ??ZDO_JoinIndicationCB_3 & 0xFFFF
// 3048       {
// 3049         uint16 timeToFire;
// 3050         ZDAppNewDevice_t *pNewDevice, *pDeviceList;
// 3051 
// 3052         pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
??ZDO_JoinIndicationCB_2:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x6
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
// 3053 
// 3054         if ( pNewDevice == NULL )
        MOV       A,R2
        ORL       A,R7
        JNZ       ??ZDO_JoinIndicationCB_4
// 3055         {
// 3056           // Memory alloc failed
// 3057           return ZMemError;
        MOV       R1,#0x10
        LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
// 3058         }
// 3059 
// 3060         // Add the new device to the New Device List
// 3061         if ( ZDApp_NewDeviceList == NULL )
??ZDO_JoinIndicationCB_4:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_108:
        MOV       DPTR,#ZDApp_NewDeviceList
        JNZ       ??ZDO_JoinIndicationCB_5
// 3062         {
// 3063           // The list is empty, add the first element
// 3064           ZDApp_NewDeviceList = pNewDevice;
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        SJMP      ??ZDO_JoinIndicationCB_6
// 3065         }
// 3066         else
// 3067         {
// 3068           pDeviceList = ZDApp_NewDeviceList;
??ZDO_JoinIndicationCB_5:
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??ZDO_JoinIndicationCB_7
// 3069 
// 3070           // Walk the list to last element
// 3071           while ( pDeviceList->next )
// 3072           {
// 3073             pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
??ZDO_JoinIndicationCB_8:
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
??ZDO_JoinIndicationCB_7:
        MOV       R3,A
// 3074           }
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_105:
        JNZ       ??ZDO_JoinIndicationCB_8
// 3075 
// 3076           // Add new device at the end
// 3077           pDeviceList->next = pNewDevice;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
??ZDO_JoinIndicationCB_6:
        MOVX      @DPTR,A
// 3078         }
// 3079 
// 3080         // get the remaining time of the timer
// 3081         timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       ?V4,R2
        MOV       ?V5,R3
// 3082 
// 3083         pNewDevice->next = NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3084         pNewDevice->shortAddr = ShortAddress;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
// 3085         pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
        MOV       A,#0x58
        CLR       C
        SUBB      A,?V4
        MOV       R0,A
        MOV       A,#0x2
        SUBB      A,?V5
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 3086 
// 3087         // Start the timer only if there is no pending timer
// 3088         if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
        MOV       A,#0x58
        XRL       A,R0
        JNZ       ??ZDO_JoinIndicationCB_9
        MOV       A,#0x2
        XRL       A,R1
??ZDO_JoinIndicationCB_9:
        JNZ       ??ZDO_JoinIndicationCB_3
// 3089         {
// 3090           osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_258
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x40
        LCALL     ?Subroutine16 & 0xFFFF
// 3091         }
// 3092       }
// 3093     }
??CrossCallReturnLabel_84:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 3094 
// 3095     return ZSuccess;
??ZDO_JoinIndicationCB_3:
        MOV       R1,#0x0
??ZDO_JoinIndicationCB_1:
        LJMP      ?Subroutine2 & 0xFFFF
// 3096 
// 3097 }
          CFI EndBlock cfiBlock228

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond229 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_107
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function ZDO_JoinIndicationCB
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker231 Using cfiCommon1
          CFI (cfiPicker231) NoFunction
          CFI (cfiPicker231) Picker
        MOV       DPTR,#ZDApp_NewDeviceList
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiPicker231
        REQUIRE ??Subroutine67_0
        ; // Fall through to label ??Subroutine67_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine67_0:
          CFI Block cfiCond232 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
          CFI Conditional ??CrossCallReturnLabel_102
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function ZDO_JoinConfirmCB
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function ZDO_JoinIndicationCB
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-2
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function ZDO_SrcRtgIndCB
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-2
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function ZDApp_SecInit
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-2
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function ZDO_JoinIndicationCB
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-2
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker239 Using cfiCommon1
          CFI (cfiPicker239) NoFunction
          CFI (cfiPicker239) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiPicker239
// 3098 
// 3099 /*********************************************************************
// 3100  * @fn          ZDO_ConcentratorIndicationCB
// 3101  *
// 3102  * @brief       This function allows the next higher layer of a
// 3103  *              device to be notified of existence of the concentrator.
// 3104  *
// 3105  * @param       nwkAddr - 16-bit NWK address of the concentrator
// 3106  * @param       extAddr - pointer to extended Address
// 3107  *                        NULL if not available
// 3108  * @param       pktCost - PktCost from RREQ
// 3109  *
// 3110  * @return      void
// 3111  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3112 void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
ZDO_ConcentratorIndicationCB:
          CFI Block cfiBlock240 Using cfiCommon0
          CFI Function ZDO_ConcentratorIndicationCB
        CODE
// 3113 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 3114   zdoConcentratorInd_t conInd;
// 3115 
// 3116   conInd.nwkAddr = nwkAddr;
        LCALL     ?Subroutine11 & 0xFFFF
// 3117   conInd.extAddr = extAddr;
??CrossCallReturnLabel_134:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 3118   conInd.pktCost = pktCost;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 3119 
// 3120   if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc + 2
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_9:
        JZ        ??ZDO_ConcentratorIndicationCB_0
// 3121   {
// 3122     zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ?CALL_IND
// 3123   }
// 3124 }
??ZDO_ConcentratorIndicationCB_0:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock240

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond241 Using cfiCommon0
          CFI Function ZDO_NetworkDiscoveryConfirmCB
          CFI Conditional ??CrossCallReturnLabel_6
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-2
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function ZDO_PermitJoinCB
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond243) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond243) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond243) CFA_SP SP+-7
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-2
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function ZDO_LeaveCnf
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function ZDO_LeaveInd
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-2
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker247 Using cfiCommon1
          CFI (cfiPicker247) NoFunction
          CFI (cfiPicker247) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOV       A,DPL
        ORL       A,DPH
        RET
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiPicker247
// 3125 
// 3126 /*********************************************************************
// 3127  * @fn          ZDO_LeaveCnf
// 3128  *
// 3129  * @brief       This function allows the next higher layer to be
// 3130  *              notified of the results of its request for this or
// 3131  *              a child device to leave the network.
// 3132  *
// 3133  * @param       cnf - NLME_LeaveCnf_t
// 3134  *
// 3135  * @return      none
// 3136  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3137 void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
ZDO_LeaveCnf:
          CFI Block cfiBlock248 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
        CODE
// 3138 {
        FUNCALL ZDO_LeaveCnf, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 3139   // Check for this device
// 3140   if ( osal_ExtAddrEqual( cnf->extAddr,
// 3141                           NLME_GetExtAddr() ) == TRUE )
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function sAddrExtCmp
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_95:
        LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??CrossCallReturnLabel_111
// 3142   {
// 3143     // Pass the leave confirm to higher layer if callback registered
// 3144     if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
// 3145          ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
        MOV       DPTR,#zdoCBFunc + 10
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_10:
        JZ        ??ZDO_LeaveCnf_0
        ; Setup parameters for indirect call
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ?CALL_IND
        MOV       A,R2
        ORL       A,R3
        JNZ       ??CrossCallReturnLabel_111
// 3146     {
// 3147       // Prepare to leave with reset
// 3148       ZDApp_LeaveReset( cnf->rejoin );
??ZDO_LeaveCnf_0:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV       A,R6
        LCALL     ?Subroutine44 & 0xFFFF
// 3149     }
// 3150   }
??CrossCallReturnLabel_50:
        LCALL     ??Subroutine68_0 & 0xFFFF
// 3151   else if ( ZSTACK_ROUTER_BUILD )
// 3152   {
// 3153     // Remove device address(optionally descendents) from data
// 3154     ZDApp_LeaveUpdate( cnf->dstAddr,
// 3155                        cnf->extAddr,
// 3156                        cnf->removeChildren,
// 3157                        cnf->rejoin );
// 3158   }
// 3159 }
??CrossCallReturnLabel_111:
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock248
// 3160 
// 3161 /*********************************************************************
// 3162  * @fn          ZDO_LeaveInd
// 3163  *
// 3164  * @brief       This function allows the next higher layer of a
// 3165  *              device to be notified of a remote leave request or
// 3166  *              indication.
// 3167  *
// 3168  * @param       ind - NLME_LeaveInd_t
// 3169  *
// 3170  * @return      none
// 3171  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3172 void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
ZDO_LeaveInd:
          CFI Block cfiBlock249 Using cfiCommon0
          CFI Function ZDO_LeaveInd
        CODE
// 3173 {
        FUNCALL ZDO_LeaveInd, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, bdb_setFN
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_LeaveRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 3174   uint8 leave;
// 3175 
// 3176   // NWK layer filters out illegal requests
// 3177   if ( ind->request == TRUE )
        MOV       A,R2
        ADD       A,#0xc
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V0,R0
        MOV       ?V1,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDO_LeaveInd_0
// 3178   {
// 3179     byte temp = FALSE;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 3180     
// 3181     // Only respond if we are not rejoining the network
// 3182     if ( ind->rejoin == FALSE )
        MOV       DPL,R0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        JNZ       ??ZDO_LeaveInd_1
// 3183     {
// 3184       // Notify network of leave
// 3185       NLME_LeaveRsp_t rsp;
// 3186       rsp.rejoin = ind->rejoin;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 3187 
// 3188       if ( ZSTACK_ROUTER_BUILD )
// 3189       {
// 3190         rsp.removeChildren = ind->removeChildren;
// 3191       }
// 3192       else if ( ZSTACK_END_DEVICE_BUILD )
// 3193       {
// 3194         NLME_SetResponseRate(0);
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV       R2,A
        MOV       R3,A
        LCALL     ?Subroutine34 & 0xFFFF
// 3195         NLME_SetQueuedPollRate(0);
// 3196         rsp.removeChildren = 0;
??CrossCallReturnLabel_37:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
// 3197       }
// 3198       
// 3199       bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 3200        
// 3201       NLME_LeaveRsp( &rsp );
        ; Setup parameters for call to function NLME_LeaveRsp
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
// 3202     }
// 3203 
// 3204     if ( ZSTACK_END_DEVICE_BUILD )
// 3205     {
// 3206       // Stop polling and get ready to reset
// 3207       NLME_SetPollRate( 0 );
??ZDO_LeaveInd_1:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 3208     }
// 3209 
// 3210     // Prepare to leave with reset
// 3211     ZDApp_LeaveReset( ind->rejoin );
        ; Setup parameters for call to function ZDApp_LeaveReset
        LCALL     ?Subroutine28 & 0xFFFF
// 3212     
// 3213     //Turn on the radio to avoid sending packets after sending the leave    
// 3214     ZMacSetReq(ZMacRxOnIdle, &temp);
??CrossCallReturnLabel_109:
        ; Setup parameters for call to function ZMacSetReq
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        SJMP      ??ZDO_LeaveInd_2
// 3215   }
// 3216   else
// 3217   {
// 3218     leave = FALSE;
// 3219 
// 3220     // Check if this device needs to leave as a child or descendent
// 3221     if ( ind->srcAddr == NLME_GetCoordShortAddr() )
??ZDO_LeaveInd_0:
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       A,R6
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV       A,?V2
        XRL       A,R2
        JNZ       ??ZDO_LeaveInd_3
        MOV       A,?V3
        XRL       A,R3
??ZDO_LeaveInd_3:
        JNZ       ??ZDO_LeaveInd_4
// 3222     {
// 3223       if ( ( ind->removeChildren == TRUE )   )
        MOV       A,#0x1
        XRL       A,R1
        JZ        ??ZDO_LeaveInd_5
// 3224       {
// 3225         leave = TRUE;
// 3226       }
// 3227       else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0x7
        XRL       A,#0x2
        JNZ       ??ZDO_LeaveInd_4
// 3228       {
// 3229         // old parents is leaving the network, child needs to search for a new parent
// 3230         ind->rejoin = TRUE;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3231         leave = TRUE;
// 3232       }
// 3233 
// 3234     }
// 3235     else if ( ind->removeChildren == TRUE )
// 3236     {
// 3237       // Check NWK address allocation algorithm
// 3238       //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
// 3239     }
// 3240 
// 3241     if ( leave == TRUE )
// 3242     {
// 3243       // Prepare to leave with reset
// 3244       ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_5:
        ; Setup parameters for call to function ZDApp_LeaveReset
        LCALL     ?Subroutine28 & 0xFFFF
// 3245     }
??CrossCallReturnLabel_110:
        SJMP      ??ZDO_LeaveInd_2
// 3246     else
// 3247     {
// 3248       // Remove device address(optionally descendents) from data
// 3249       ZDApp_LeaveUpdate( ind->srcAddr,
// 3250                          ind->extAddr,
// 3251                          ind->removeChildren,
// 3252                          ind->rejoin );
??ZDO_LeaveInd_4:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R6
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 3253     }
// 3254   }
// 3255 
// 3256   // Pass the leave indication to higher layer if callback registered.
// 3257   if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
??ZDO_LeaveInd_2:
        MOV       DPTR,#zdoCBFunc + 12
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_11:
        JZ        ??ZDO_LeaveInd_6
// 3258   {
// 3259     (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
        ; Setup parameters for indirect call
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ?CALL_IND
// 3260   }
// 3261 }
??ZDO_LeaveInd_6:
        MOV       A,#0x3
        LJMP      ??Subroutine60_0 & 0xFFFF
          CFI EndBlock cfiBlock249

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond250 Using cfiCommon0
          CFI Function ZDApp_LeaveReset
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function ZDO_LeaveInd
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker252 Using cfiCommon1
          CFI (cfiPicker252) NoFunction
          CFI (cfiPicker252) Picker
        LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
        RET
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiPicker252

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond253 Using cfiCommon0
          CFI Function ZDO_LeaveInd
          CFI Conditional ??CrossCallReturnLabel_109
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function ZDO_LeaveInd
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-2
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker255 Using cfiCommon1
          CFI (cfiPicker255) NoFunction
          CFI (cfiPicker255) Picker
        MOV       DPL,?V0
        MOV       DPH,?V1
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiPicker255
        REQUIRE ??Subroutine68_0
        ; // Fall through to label ??Subroutine68_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine68_0:
          CFI Block cfiCond256 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
          CFI Conditional ??CrossCallReturnLabel_111
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond257 Using cfiCommon0
          CFI (cfiCond257) Function ZDO_LeaveInd
          CFI (cfiCond257) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond257) CFA_SP SP+-2
          CFI (cfiCond257) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond258 Using cfiCommon0
          CFI (cfiCond258) Function ZDO_LeaveInd
          CFI (cfiCond258) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond258) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond258) CFA_SP SP+-2
          CFI (cfiCond258) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker259 Using cfiCommon1
          CFI (cfiPicker259) NoFunction
          CFI (cfiPicker259) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
        RET
          CFI EndBlock cfiCond256
          CFI EndBlock cfiCond257
          CFI EndBlock cfiCond258
          CFI EndBlock cfiPicker259
// 3262 
// 3263 /*********************************************************************
// 3264  * @fn          ZDO_SyncIndicationCB
// 3265  *
// 3266  * @brief       This function allows the next higher layer of a
// 3267  *              coordinator to be notified of a loss of synchronization
// 3268  *                          with the parent/child device.
// 3269  *
// 3270  * @param       type: 0 - child; 1 - parent
// 3271  *
// 3272  *
// 3273  * @return      none
// 3274  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3275 void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
ZDO_SyncIndicationCB:
          CFI Block cfiBlock260 Using cfiCommon0
          CFI Function ZDO_SyncIndicationCB
        CODE
// 3276 {
        FUNCALL ZDO_SyncIndicationCB, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SyncIndicationCB, bdb_isDeviceNonFactoryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SyncIndicationCB, bdb_nwkAssocAttemt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SyncIndicationCB, bdb_parentLost
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3277   (void)shortAddr;  // Remove this line if this parameter is used.
// 3278 
// 3279   if ( ZSTACK_END_DEVICE_BUILD
// 3280     || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
// 3281   {
// 3282     if ( type == 1 && retryCnt == 0 )
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??ZDO_SyncIndicationCB_0
        MOV       DPTR,#retryCnt
        MOVX      A,@DPTR
        JNZ       ??ZDO_SyncIndicationCB_0
// 3283     {
// 3284       // We lost contact with our parent.  Clear the neighbor Table.
// 3285       nwkNeighborInitTable();
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 3286       
// 3287       //If we are Factory new, then report fail on association
// 3288       if(!bdb_isDeviceNonFactoryNew())
        ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
        LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
        MOV       A,R1
        JNZ       ??ZDO_SyncIndicationCB_1
// 3289       {
// 3290         bdb_nwkAssocAttemt(FALSE);
        ; Setup parameters for call to function bdb_nwkAssocAttemt
        MOV       R1,#0x0
        LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
        SJMP      ??ZDO_SyncIndicationCB_0
// 3291       }
// 3292 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 3293       else
// 3294       {
// 3295         //We lost our parent
// 3296         bdb_parentLost();
??ZDO_SyncIndicationCB_1:
        ; Setup parameters for call to function bdb_parentLost
        LCALL     `??bdb_parentLost::?relay`; Banked call to: bdb_parentLost
// 3297       }
// 3298 #endif
// 3299     }
// 3300   }
// 3301 }
??ZDO_SyncIndicationCB_0:
        LJMP      ??Subroutine48_0 & 0xFFFF
          CFI EndBlock cfiBlock260
// 3302 
// 3303 /*********************************************************************
// 3304  * @fn          ZDO_ManytoOneFailureIndicationCB
// 3305  *
// 3306  * @brief       This function allows the next higher layer of a
// 3307  *              concentrator to be notified of a many-to-one route
// 3308  *              failure.
// 3309  *
// 3310  * @param       none
// 3311  *
// 3312  *
// 3313  * @return      none
// 3314  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3315 void ZDO_ManytoOneFailureIndicationCB()
ZDO_ManytoOneFailureIndicationCB:
          CFI Block cfiBlock261 Using cfiCommon0
          CFI Function ZDO_ManytoOneFailureIndicationCB
        CODE
// 3316 {
        FUNCALL ZDO_ManytoOneFailureIndicationCB, RTG_MTORouteReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3317   // By default, the concentrator automatically redo many-to-one route
// 3318   // discovery to update all many-to-one routes in the network
// 3319   // If you want anything processing other than the default,
// 3320   // please replace the following code.
// 3321 
// 3322   RTG_MTORouteReq();
        ; Setup parameters for call to function RTG_MTORouteReq
        LCALL     `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
// 3323 }
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock261
// 3324 
// 3325 /*********************************************************************
// 3326  * @fn          ZDO_PollConfirmCB
// 3327  *
// 3328  * @brief       This function allows the next higher layer to be
// 3329  *              notified of a Poll Confirm.
// 3330  *
// 3331  * @param       none
// 3332  *
// 3333  * @return      none
// 3334  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3335 void ZDO_PollConfirmCB( uint8 status )
ZDO_PollConfirmCB:
          CFI Block cfiBlock262 Using cfiCommon0
          CFI Function ZDO_PollConfirmCB
        CODE
// 3336 {
        ; Saved register size: 0
        ; Auto size: 0
// 3337   (void)status;  // Remove this line if this parameter is used.
// 3338   return;
        LJMP      ?BRET
// 3339 }
          CFI EndBlock cfiBlock262
// 3340 
// 3341 /*********************************************************************
// 3342  * @fn          ZDO_NetworkStatusCB
// 3343  *
// 3344  * @brief       Network Status Callback function
// 3345  *
// 3346  * @param       nwkDstAddr - message's destination address- used to determine
// 3347  *                           if the message was intended for this device or
// 3348  *                           a sleeping end device.
// 3349  * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
// 3350  * @param       dstAddr - the destination address related to the status code
// 3351  *
// 3352  * @return      none
// 3353  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3354 void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
ZDO_NetworkStatusCB:
          CFI Block cfiBlock263 Using cfiCommon0
          CFI Function ZDO_NetworkStatusCB
        CODE
// 3355 {
        FUNCALL ZDO_NetworkStatusCB, NLME_GetShortAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3356   (void)dstAddr;     // Remove this line if this parameter is used.
// 3357 
// 3358   if ( (nwkDstAddr == NLME_GetShortAddr())
// 3359       && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
// 3360   {
// 3361     // Routing error for dstAddr, this is informational and a Route
// 3362     // Request should happen automatically.
// 3363   }
// 3364 }
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock263
// 3365 
// 3366 /******************************************************************************
// 3367  * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
// 3368  *
// 3369  * @brief       Stub routine implemented by NHLE. NHLE should call
// 3370  *              <AddrMgrWriteNV> when appropriate.
// 3371  *
// 3372  * @param       none
// 3373  *
// 3374  * @return      none
// 3375  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3376 void ZDApp_NwkWriteNVRequest( void )
AddrMgrWriteNVRequest:
          CFI Block cfiBlock264 Using cfiCommon0
          CFI Function AddrMgrWriteNVRequest
        CODE
// 3377 {
        FUNCALL AddrMgrWriteNVRequest, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AddrMgrWriteNVRequest, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3378 #if defined ( NV_RESTORE )
// 3379   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x0
        MOV       R3,#0x1
        LCALL     ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_81:
        JNZ       ??AddrMgrWriteNVRequest_0
// 3380   {
// 3381     // Trigger to save info into NV
// 3382     ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 3383   }
// 3384 #endif
// 3385 }
??AddrMgrWriteNVRequest_0:
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock264
// 3386 
// 3387 /*********************************************************************
// 3388  * Call Back Functions from Security  - API
// 3389  */
// 3390 
// 3391  /*********************************************************************
// 3392  * @fn          ZDO_UpdateDeviceIndication
// 3393  *
// 3394  * @brief       This function notifies the "Trust Center" of a
// 3395  *              network when a device joins or leaves the network.
// 3396  *
// 3397  * @param       extAddr - pointer to 64 bit address of new device
// 3398  * @param       status  - 0 if a new device joined securely
// 3399  *                      - 1 if a new device joined un-securely
// 3400  *                      - 2 if a device left the network
// 3401  *
// 3402  * @return      true if newly joined device should be allowed to
// 3403  *                                              remain on network
// 3404  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3405 ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
ZDO_UpdateDeviceIndication:
          CFI Block cfiBlock265 Using cfiCommon0
          CFI Function ZDO_UpdateDeviceIndication
        CODE
// 3406 {
        ; Saved register size: 0
        ; Auto size: 0
// 3407   // can implement a network access policy based on the
// 3408   // IEEE address of newly joining devices...
// 3409   (void)extAddr;
// 3410   (void)status;
// 3411 
// 3412   return ZSuccess;
        MOV       R1,#0x0
        LJMP      ?BRET
// 3413 }
          CFI EndBlock cfiBlock265
// 3414 
// 3415 /*********************************************************************
// 3416  * @fn          ZDApp_InMsgCB
// 3417  *
// 3418  * @brief       This function is called to pass up any message that is
// 3419  *              not yet supported.  This allows for the developer to
// 3420  *              support features themselves..
// 3421  *
// 3422  * @return      none
// 3423  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3424 void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
ZDApp_InMsgCB:
          CFI Block cfiBlock266 Using cfiCommon0
          CFI Function ZDApp_InMsgCB
        CODE
// 3425 {
        FUNCALL ZDApp_InMsgCB, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL     ?Subroutine33 & 0xFFFF
// 3426   if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
??CrossCallReturnLabel_35:
        LCALL     ??Subroutine69_0 & 0xFFFF
??CrossCallReturnLabel_115:
        ANL       A,#0x80
        JNZ       ??ZDApp_InMsgCB_0
// 3427   {
// 3428     // Handle the response message
// 3429   }
// 3430   else
// 3431   {
// 3432     // Handle the request message by sending a generic "not supported".
// 3433     // Device Announce doesn't have a response.
// 3434     if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
        MOV       A,R2
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_39:
        JNZ       ??ZDApp_InMsgCB_0
        MOV       A,#0x13
        XRL       A,R0
        JNZ       ??ZDApp_InMsgCB_1
        MOV       A,R1
??ZDApp_InMsgCB_1:
        JZ        ??ZDApp_InMsgCB_0
// 3435     {
// 3436       ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
// 3437                       (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV       A,R0
        MOV       ?V0,A
        MOV       A,R1
        ORL       A,#0x80
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R2
        LCALL     ?Subroutine39 & 0xFFFF
// 3438     }
// 3439   }
??CrossCallReturnLabel_43:
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R4,#-0x7c
        MOV       A,R2
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_93:
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_41:
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 3440 }
??ZDApp_InMsgCB_0:
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock266

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond267 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond268 Using cfiCommon0
          CFI (cfiCond268) Function ZDApp_InMsgCB
          CFI (cfiCond268) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond268) CFA_SP SP+-2
          CFI (cfiCond268) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker269 Using cfiCommon1
          CFI (cfiPicker269) NoFunction
          CFI (cfiPicker269) Picker
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond267
          CFI EndBlock cfiCond268
          CFI EndBlock cfiPicker269

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond270 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond271 Using cfiCommon0
          CFI (cfiCond271) Function ZDApp_InMsgCB
          CFI (cfiCond271) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond271) CFA_SP SP+-2
          CFI (cfiCond271) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker272 Using cfiCommon1
          CFI (cfiPicker272) NoFunction
          CFI (cfiPicker272) Picker
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond270
          CFI EndBlock cfiCond271
          CFI EndBlock cfiPicker272

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond273 Using cfiCommon0
          CFI Function ZDO_LeaveInd
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function ZDApp_InMsgCB
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond274) CFA_SP SP+-2
          CFI (cfiCond274) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker275 Using cfiCommon1
          CFI (cfiPicker275) NoFunction
          CFI (cfiPicker275) Picker
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_51:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiPicker275

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond276 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function ZDO_LeaveInd
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_38
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+-4
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function ZDApp_InMsgCB
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_39
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+-4
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker279 Using cfiCommon1
          CFI (cfiPicker279) NoFunction
          CFI (cfiPicker279) Picker
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiPicker279

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond280 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function ZDApp_InMsgCB
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-2
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker282 Using cfiCommon1
          CFI (cfiPicker282) NoFunction
          CFI (cfiPicker282) Picker
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiPicker282

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond283 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
          CFI Conditional ??CrossCallReturnLabel_116
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond284) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond284) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond284) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond284) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond284) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond284) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond284) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond284) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond284) CFA_SP SP+-2
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker285 Using cfiCommon1
          CFI (cfiPicker285) NoFunction
          CFI (cfiPicker285) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiPicker285
        REQUIRE ??Subroutine69_0
        ; // Fall through to label ??Subroutine69_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine69_0:
          CFI Block cfiCond286 Using cfiCommon0
          CFI Function ZDApp_LeaveReset
          CFI Conditional ??CrossCallReturnLabel_112
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function ZDApp_LeaveReset
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-2
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function ZDO_JoinConfirmCB
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-2
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function ZDApp_InMsgCB
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-2
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond290) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond290) CFA_SP SP+-2
          CFI (cfiCond290) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond291) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond291) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond291) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond291) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond291) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond291) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond291) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond291) CFA_SP SP+-2
          CFI (cfiCond291) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker292 Using cfiCommon1
          CFI (cfiPicker292) NoFunction
          CFI (cfiPicker292) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiPicker292
// 3441 
// 3442 
// 3443 /*********************************************************************
// 3444  * @fn      ZDApp_ChangeMatchDescRespPermission()
// 3445  *
// 3446  * @brief   Changes the Match Descriptor Response permission.
// 3447  *
// 3448  * @param   endpoint - endpoint to allow responses
// 3449  * @param   action - true to allow responses, false to not
// 3450  *
// 3451  * @return  none
// 3452  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3453 void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
ZDApp_ChangeMatchDescRespPermission:
          CFI Block cfiBlock293 Using cfiCommon0
          CFI Function ZDApp_ChangeMatchDescRespPermission
        CODE
// 3454 {
        FUNCALL ZDApp_ChangeMatchDescRespPermission, afSetMatch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3455   // Store the action
// 3456   afSetMatch( endpoint, action );
        ; Setup parameters for call to function afSetMatch
        LCALL     `??afSetMatch::?relay`; Banked call to: afSetMatch
// 3457 }
        LJMP      ??Subroutine48_0 & 0xFFFF
          CFI EndBlock cfiBlock293
// 3458 
// 3459 /*********************************************************************
// 3460  * @fn      ZDApp_NetworkInit()
// 3461  *
// 3462  * @brief   Used to start the network joining process
// 3463  *
// 3464  * @param   delay - mSec delay to wait before starting
// 3465  *
// 3466  * @return  none
// 3467  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3468 void ZDApp_NetworkInit( uint16 delay )
ZDApp_NetworkInit:
          CFI Block cfiBlock294 Using cfiCommon0
          CFI Function ZDApp_NetworkInit
        CODE
// 3469 {
        FUNCALL ZDApp_NetworkInit, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkInit, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3470   if ( delay )
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDApp_NetworkInit_0
// 3471   {
// 3472     // Wait awhile before starting the device
// 3473     osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       ?V0,R2
        MOV       ?V1,R3
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x1
        LCALL     ?Subroutine16 & 0xFFFF
// 3474   }
??CrossCallReturnLabel_85:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP      ??CrossCallReturnLabel_126
// 3475   else
// 3476   {
// 3477     osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
??ZDApp_NetworkInit_0:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x1
        LCALL     ??Subroutine70_0 & 0xFFFF
// 3478   }
// 3479 }
??CrossCallReturnLabel_126:
        LJMP      ??Subroutine61_0 & 0xFFFF
          CFI EndBlock cfiBlock294

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond295 Using cfiCommon0
          CFI Function ZDApp_NetworkStartEvt
          CFI Conditional ??CrossCallReturnLabel_118
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond296 Using cfiCommon0
          CFI (cfiCond296) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond296) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond296) CFA_SP SP+-2
          CFI (cfiCond296) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond297 Using cfiCommon0
          CFI (cfiCond297) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond297) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond297) CFA_SP SP+-2
          CFI (cfiCond297) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-2
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond299 Using cfiCommon0
          CFI (cfiCond299) Function ZDApp_ChangeState
          CFI (cfiCond299) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond299) CFA_SP SP+-2
          CFI (cfiCond299) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker300 Using cfiCommon1
          CFI (cfiPicker300) NoFunction
          CFI (cfiPicker300) Picker
        MOV       R2,#0x10
          CFI EndBlock cfiCond295
          CFI EndBlock cfiCond296
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiCond299
          CFI EndBlock cfiPicker300
        REQUIRE ??Subroutine70_0
        ; // Fall through to label ??Subroutine70_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine70_0:
          CFI Block cfiCond301 Using cfiCommon0
          CFI Function ZDApp_NetworkStartEvt
          CFI Conditional ??CrossCallReturnLabel_123
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function ZDO_NetworkFormationConfirmCB
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond302) CFA_SP SP+-2
          CFI (cfiCond302) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond303 Using cfiCommon0
          CFI (cfiCond303) Function ZDO_StartRouterConfirmCB
          CFI (cfiCond303) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond303) CFA_SP SP+-2
          CFI (cfiCond303) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function ZDApp_NetworkInit
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond304) CFA_SP SP+-2
          CFI (cfiCond304) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond305 Using cfiCommon0
          CFI (cfiCond305) Function ZDApp_NetworkStartEvt
          CFI (cfiCond305) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond305) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond305) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond305) CFA_SP SP+-7
          CFI Block cfiCond306 Using cfiCommon0
          CFI (cfiCond306) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond306) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond306) CFA_SP SP+-2
          CFI (cfiCond306) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond307) CFA_SP SP+-2
          CFI (cfiCond307) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond308) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond308) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond308) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond308) CFA_SP SP+-2
          CFI (cfiCond308) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function ZDApp_ChangeState
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+-2
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker310 Using cfiCommon1
          CFI (cfiPicker310) NoFunction
          CFI (cfiPicker310) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiCond305
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiPicker310
        REQUIRE ??Subroutine71_0
        ; // Fall through to label ??Subroutine71_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine71_0:
          CFI Block cfiCond311 Using cfiCommon0
          CFI Function ZDO_NetworkFormationConfirmCB
          CFI Conditional ??CrossCallReturnLabel_127
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond312 Using cfiCommon0
          CFI (cfiCond312) Function ZDApp_NVUpdate
          CFI (cfiCond312) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond312) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond312) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond312) CFA_SP SP+-7
          CFI Block cfiCond313 Using cfiCommon0
          CFI (cfiCond313) Function ZDApp_NetworkStartEvt
          CFI (cfiCond313) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond313) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond313) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond313) CFA_SP SP+-7
          CFI Block cfiCond314 Using cfiCommon0
          CFI (cfiCond314) Function ZDO_NetworkFormationConfirmCB
          CFI (cfiCond314) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond314) CFA_SP SP+-2
          CFI (cfiCond314) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function ZDO_StartRouterConfirmCB
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond315) CFA_SP SP+-2
          CFI (cfiCond315) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function ZDApp_NetworkInit
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond316) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond316) CFA_SP SP+-2
          CFI (cfiCond316) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond317 Using cfiCommon0
          CFI (cfiCond317) Function ZDApp_NetworkStartEvt
          CFI (cfiCond317) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond317) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond317) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond317) CFA_SP SP+-7
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+-2
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond319) CFA_SP SP+-2
          CFI (cfiCond319) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond320 Using cfiCommon0
          CFI (cfiCond320) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond320) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond320) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond320) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond320) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond320) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond320) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond320) CFA_SP SP+-2
          CFI (cfiCond320) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function ZDApp_ChangeState
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond321) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond321) CFA_SP SP+-2
          CFI (cfiCond321) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker322 Using cfiCommon1
          CFI (cfiPicker322) NoFunction
          CFI (cfiPicker322) Picker
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        RET
          CFI EndBlock cfiCond311
          CFI EndBlock cfiCond312
          CFI EndBlock cfiCond313
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiPicker322
// 3480 
// 3481 /*********************************************************************
// 3482  * @fn      ZDApp_NwkStateUpdateCB()
// 3483  *
// 3484  * @brief   This function notifies that this device's network
// 3485  *          state info has been changed.
// 3486  *
// 3487  * @param   none
// 3488  *
// 3489  * @return  none
// 3490  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3491 void ZDApp_NwkStateUpdateCB( void )
ZDApp_NwkStateUpdateCB:
          CFI Block cfiBlock323 Using cfiCommon0
          CFI Function ZDApp_NwkStateUpdateCB
        CODE
// 3492 {
        FUNCALL ZDApp_NwkStateUpdateCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkStateUpdateCB, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3493   // Notify to save info into NV
// 3494   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x0
        MOV       R3,#0x1
        LCALL     ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_82:
        JNZ       ??ZDApp_NwkStateUpdateCB_0
// 3495   {
// 3496     // Trigger to save info into NV
// 3497     ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 3498   }
// 3499 }
??ZDApp_NwkStateUpdateCB_0:
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock323
// 3500 
// 3501 /*********************************************************************
// 3502  * @fn      ZDApp_NodeProfileSync()
// 3503  *
// 3504  * @brief   Sync node with stack profile.
// 3505  *
// 3506  * @param   stackProfile - stack profile of the network to join
// 3507  *
// 3508  * @return  none
// 3509  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3510 void ZDApp_NodeProfileSync( uint8 stackProfile )
ZDApp_NodeProfileSync:
          CFI Block cfiBlock324 Using cfiCommon0
          CFI Function ZDApp_NodeProfileSync
        CODE
// 3511 {
        FUNCALL ZDApp_NodeProfileSync, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3512   if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??ZDApp_NodeProfileSync_0
// 3513   {
// 3514     if ( stackProfile != zgStackProfile )
        MOV       DPTR,#zgStackProfile
        MOVX      A,@DPTR
        XRL       A,R6
        JZ        ??ZDApp_NodeProfileSync_0
// 3515     {
// 3516       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0xf8
        ORL       A,#0x2
        MOVX      @DPTR,A
// 3517       ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOV       A,#0xc
        MOVX      @DPTR,A
// 3518       NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV       R1,A
        LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
// 3519     }
// 3520   }
// 3521 }
??ZDApp_NodeProfileSync_0:
        LJMP      ??Subroutine48_0 & 0xFFFF
          CFI EndBlock cfiBlock324
// 3522 
// 3523 /*********************************************************************
// 3524  * @fn      ZDApp_StartJoiningCycle()
// 3525  *
// 3526  * @brief   Starts the joining cycle of a device.  This will only
// 3527  *          continue an already started (or stopped) joining cycle.
// 3528  *
// 3529  * @param   none
// 3530  *
// 3531  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3532  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3533 uint8 ZDApp_StartJoiningCycle( void )
ZDApp_StartJoiningCycle:
          CFI Block cfiBlock325 Using cfiCommon0
          CFI Function ZDApp_StartJoiningCycle
        CODE
// 3534 {
        FUNCALL ZDApp_StartJoiningCycle, ZDApp_NetworkInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3535   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDApp_StartJoiningCycle_0
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_StartJoiningCycle_1
// 3536   {
// 3537     continueJoining = TRUE;
??ZDApp_StartJoiningCycle_0:
        MOV       DPTR,#continueJoining
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3538     ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
// 3539 
// 3540     return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??ZDApp_StartJoiningCycle_2
// 3541   }
// 3542   else
// 3543     return ( FALSE );
??ZDApp_StartJoiningCycle_1:
        MOV       R1,#0x0
??ZDApp_StartJoiningCycle_2:
        LJMP      ??Subroutine62_0 & 0xFFFF
// 3544 }
          CFI EndBlock cfiBlock325
// 3545 
// 3546 /*********************************************************************
// 3547  * @fn      ZDApp_StopJoiningCycle()
// 3548  *
// 3549  * @brief   Stops the joining or rejoining process of a device.
// 3550  *
// 3551  * @param   none
// 3552  *
// 3553  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3554  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3555 uint8 ZDApp_StopJoiningCycle( void )
ZDApp_StopJoiningCycle:
          CFI Block cfiBlock326 Using cfiCommon0
          CFI Function ZDApp_StopJoiningCycle
        CODE
// 3556 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3557   if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDApp_StopJoiningCycle_0
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        ??ZDApp_StopJoiningCycle_0
        MOVX      A,@DPTR
        XRL       A,#0xc
        JNZ       ??ZDApp_StopJoiningCycle_1
// 3558   {
// 3559     continueJoining = FALSE;
??ZDApp_StopJoiningCycle_0:
        MOV       DPTR,#continueJoining
        CLR       A
        MOVX      @DPTR,A
// 3560     return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??ZDApp_StopJoiningCycle_2
// 3561   }
// 3562   else
// 3563     return ( FALSE );
??ZDApp_StopJoiningCycle_1:
        MOV       R1,#0x0
??ZDApp_StopJoiningCycle_2:
        LJMP      ??Subroutine62_0 & 0xFFFF
// 3564 }
          CFI EndBlock cfiBlock326
// 3565 
// 3566 /*********************************************************************
// 3567  * @fn      ZDApp_AnnounceNewAddress()
// 3568  *
// 3569  * @brief   Send Device Announce and hold all transmissions for
// 3570  *          new address timeout.
// 3571  *
// 3572  * @param   none
// 3573  *
// 3574  * @return  none
// 3575  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3576 void ZDApp_AnnounceNewAddress( void )
ZDApp_AnnounceNewAddress:
          CFI Block cfiBlock327 Using cfiCommon0
          CFI Function ZDApp_AnnounceNewAddress
        CODE
// 3577 {
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetCoordExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_SendEndDevTimeoutReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3578 #if defined ( ZIGBEEPRO )
// 3579   // Turn off data request hold
// 3580   APSME_HoldDataRequests( 0 );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 3581 #endif
// 3582 
// 3583   ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
// 3584                      ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        MOV       R4,A
        MOV       R5,?V1
        LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3585 
// 3586 #if defined ( ZIGBEEPRO )
// 3587   // Setup the timeout
// 3588   APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 3589 #endif
// 3590 
// 3591   if ( ZSTACK_END_DEVICE_BUILD )
// 3592   {
// 3593     if ( zgChildAgingEnable == TRUE )
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_AnnounceNewAddress_0
// 3594     {
// 3595       uint8 coordExtAddr[Z_EXTADDR_LEN];
// 3596 
// 3597       // Send the message to parent
// 3598       NLME_GetCoordExtAddr( coordExtAddr );
        ; Setup parameters for call to function NLME_GetCoordExtAddr
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
// 3599       NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
// 3600                                  zgEndDeviceTimeoutValue,
// 3601                                  zgEndDeviceConfiguration );
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        ; Setup parameters for call to function NLME_SendEndDevTimeoutReq
        MOV       DPTR,#zgEndDeviceConfiguration
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       DPTR,#zgEndDeviceTimeoutValue
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        LCALL     `??NLME_SendEndDevTimeoutReq::?relay`; Banked call to: NLME_SendEndDevTimeoutReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3602     }
// 3603   }
// 3604 }
??ZDApp_AnnounceNewAddress_0:
        MOV       A,#0x8
        LJMP      ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock327
// 3605 
// 3606 /*********************************************************************
// 3607  * @fn      ZDApp_SendParentAnnce()
// 3608  *
// 3609  * @brief   Send Parent Announce message.
// 3610  *
// 3611  * @param   none
// 3612  *
// 3613  * @return  none
// 3614  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3615 void ZDApp_SendParentAnnce( void )
ZDApp_SendParentAnnce:
          CFI Block cfiBlock328 Using cfiCommon0
          CFI Function ZDApp_SendParentAnnce
        CODE
// 3616 {
        FUNCALL ZDApp_SendParentAnnce, AssocMakeListOfRfdChild
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendParentAnnce, ZDP_ParentAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendParentAnnce, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3617   uint8 count;
// 3618   uint8 *childInfo;
// 3619 
// 3620   childInfo = AssocMakeListOfRfdChild( &count );
        ; Setup parameters for call to function AssocMakeListOfRfdChild
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
        MOV       ?V0,R2
        MOV       ?V1,R3
// 3621 
// 3622   if ( childInfo != NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDApp_SendParentAnnce_0
// 3623   {
// 3624     if ( count > 0 )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JZ        ??ZDApp_SendParentAnnce_1
// 3625     {
// 3626       zAddrType_t dstAddr;
// 3627 
// 3628       dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        MOVX      @DPTR,A
// 3629       dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3630 
// 3631       ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
        ; Setup parameters for call to function ZDP_ParentAnnce
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V2,#0x1f
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3632     }
// 3633 
// 3634     // Free the list after the message has been sent
// 3635     osal_mem_free( childInfo );
??ZDApp_SendParentAnnce_1:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3636   }
// 3637 }
??ZDApp_SendParentAnnce_0:
        MOV       A,#0xa
        LJMP      ??Subroutine60_0 & 0xFFFF
          CFI EndBlock cfiBlock328
// 3638 
// 3639 /*********************************************************************
// 3640  * @fn          ZDApp_NVUpdate
// 3641  *
// 3642  * @brief       Set the NV Update Timer.
// 3643  *
// 3644  * @param       none
// 3645  *
// 3646  * @return      none
// 3647  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3648 void ZDApp_NVUpdate( void )
ZDApp_NVUpdate:
          CFI Block cfiBlock329 Using cfiCommon0
          CFI Function ZDApp_NVUpdate
        CODE
// 3649 {
        FUNCALL ZDApp_NVUpdate, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3650 #if defined ( NV_RESTORE )
// 3651   if ( (ZSTACK_END_DEVICE_BUILD)
// 3652        || (ZSTACK_ROUTER_BUILD
// 3653            && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
// 3654   {
// 3655     // No need to wait, set the event to save the state
// 3656     osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x0
        MOV       R3,#0x1
        LCALL     ??Subroutine71_0 & 0xFFFF
// 3657   }
// 3658   else
// 3659   {
// 3660     // To allow for more changes to the network state before saving
// 3661     osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
// 3662   }
// 3663 #endif
// 3664 }
??CrossCallReturnLabel_128:
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock329
// 3665 
// 3666 /*********************************************************************
// 3667  * @fn      ZDApp_CoordStartPANIDConflictCB()
// 3668  *
// 3669  * @brief   Returns a PAN ID for the network layer to use during
// 3670  *          a coordinator start and there is another network with
// 3671  *          the intended PANID.
// 3672  *
// 3673  * @param   panid - the intended PAN ID
// 3674  *
// 3675  * @return  PANID to try
// 3676  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3677 uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
ZDApp_CoordStartPANIDConflictCB:
          CFI Block cfiBlock330 Using cfiCommon0
          CFI Function ZDApp_CoordStartPANIDConflictCB
        CODE
// 3678 {
        ; Saved register size: 0
        ; Auto size: 0
// 3679   return ( panid + 1 );
        MOV       A,R2
        ADD       A,#0x1
        INC       R2
        JNC       ??ZDApp_CoordStartPANIDConflictCB_0
        INC       R3
??ZDApp_CoordStartPANIDConflictCB_0:
        LJMP      ?BRET
// 3680 }
          CFI EndBlock cfiBlock330
// 3681 
// 3682 /*********************************************************************
// 3683  * @fn          ZDO_SrcRtgIndCB
// 3684  *
// 3685  * @brief       This function notifies the ZDO available src route record received.
// 3686  *
// 3687  * @param       srcAddr - source address of the source route
// 3688  * @param       relayCnt - number of devices in the relay list
// 3689  * @param       relayList - relay list of the source route
// 3690  *
// 3691  * @return      none
// 3692  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3693 void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
ZDO_SrcRtgIndCB:
          CFI Block cfiBlock331 Using cfiCommon0
          CFI Function ZDO_SrcRtgIndCB
        CODE
// 3694 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 3695   zdoSrcRtg_t srcRtg;
// 3696 
// 3697   srcRtg.srcAddr = srcAddr;
        LCALL     ?Subroutine11 & 0xFFFF
// 3698   srcRtg.relayCnt = relayCnt;
??CrossCallReturnLabel_135:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 3699   srcRtg.pRelayList = pRelayList;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 3700 
// 3701   if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_106:
        JZ        ??ZDO_SrcRtgIndCB_0
// 3702   {
// 3703     zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ??Subroutine64_0 & 0xFFFF
// 3704   }
??CrossCallReturnLabel_89:
        LCALL     ?CALL_IND
// 3705 }
??ZDO_SrcRtgIndCB_0:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock331
// 3706 
// 3707 /*********************************************************************
// 3708  * @fn          ZDApp_InitZdoCBFunc
// 3709  *
// 3710  * @brief       Call this function to initialize zdoCBFunc[]
// 3711  *
// 3712  * @param       none
// 3713  *
// 3714  * @return      none
// 3715  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3716 void ZDApp_InitZdoCBFunc( void )
ZDApp_InitZdoCBFunc:
          CFI Block cfiBlock332 Using cfiCommon0
          CFI Function ZDApp_InitZdoCBFunc
        CODE
// 3717 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3718   uint8 i;
// 3719 
// 3720   for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
        MOV       R2,#0x0
// 3721   {
// 3722     zdoCBFunc[i] = NULL;
??ZDApp_InitZdoCBFunc_0:
        MOV       A,R2
        ADD       A,0xE0 /* A   */
        LCALL     ?Subroutine31 & 0xFFFF
// 3723   }
??CrossCallReturnLabel_32:
        INC       R2
        MOV       A,R2
        CLR       C
        SUBB      A,#0x9
        JC        ??ZDApp_InitZdoCBFunc_0
// 3724 }
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock332
// 3725 
// 3726 /*********************************************************************
// 3727  * @fn          ZDO_RegisterForZdoCB
// 3728  *
// 3729  * @brief       Call this function to register the higher layer (for
// 3730  *              example, the Application layer or MT layer) with ZDO
// 3731  *              callbacks to get notified of some ZDO indication like
// 3732  *              existence of a concentrator or receipt of a source
// 3733  *              route record.
// 3734  *
// 3735  * @param       indID - ZDO Indication ID
// 3736  * @param       pFn   - Callback function pointer
// 3737  *
// 3738  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3739  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3740 ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
ZDO_RegisterForZdoCB:
          CFI Block cfiBlock333 Using cfiCommon0
          CFI Function ZDO_RegisterForZdoCB
        CODE
// 3741 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R1
// 3742   // Check the range of the indication ID
// 3743   if ( indID < MAX_ZDO_CB_FUNC )
        CLR       C
        SUBB      A,#0x9
        JNC       ??ZDO_RegisterForZdoCB_0
// 3744   {
// 3745     zdoCBFunc[indID] = pFn;
        MOV       A,R1
        ADD       A,R1
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL     ??Subroutine72_0 & 0xFFFF
// 3746     return ZSuccess;
??CrossCallReturnLabel_133:
        MOV       R1,#0x0
        SJMP      ??ZDO_RegisterForZdoCB_1
// 3747   }
// 3748 
// 3749   return ZInvalidParameter;
??ZDO_RegisterForZdoCB_0:
        MOV       R1,#0x2
??ZDO_RegisterForZdoCB_1:
        LJMP      ??Subroutine62_0 & 0xFFFF
// 3750 }
          CFI EndBlock cfiBlock333

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond334 Using cfiCommon0
          CFI Function ZDO_ConcentratorIndicationCB
          CFI Conditional ??CrossCallReturnLabel_134
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond335 Using cfiCommon0
          CFI (cfiCond335) Function ZDO_SrcRtgIndCB
          CFI (cfiCond335) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond335) CFA_SP SP+-2
          CFI (cfiCond335) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker336 Using cfiCommon1
          CFI (cfiPicker336) NoFunction
          CFI (cfiPicker336) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond334
          CFI EndBlock cfiCond335
          CFI EndBlock cfiPicker336
        REQUIRE ??Subroutine72_0
        ; // Fall through to label ??Subroutine72_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine72_0:
          CFI Block cfiCond337 Using cfiCommon0
          CFI Function ZDApp_RestoreNetworkState
          CFI Conditional ??CrossCallReturnLabel_129
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond338 Using cfiCommon0
          CFI (cfiCond338) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond338) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond338) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond338) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond338) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond338) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond338) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond338) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond338) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond338) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond338) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond338) CFA_SP SP+-2
          CFI (cfiCond338) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond339 Using cfiCommon0
          CFI (cfiCond339) Function ZDO_JoinConfirmCB
          CFI (cfiCond339) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond339) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond339) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond339) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond339) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond339) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond339) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond339) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond339) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond339) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond339) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond339) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond339) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond339) CFA_SP SP+-2
          CFI (cfiCond339) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond340 Using cfiCommon0
          CFI (cfiCond340) Function ZDO_JoinConfirmCB
          CFI (cfiCond340) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond340) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond340) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond340) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond340) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond340) CFA_SP SP+-2
          CFI (cfiCond340) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond341 Using cfiCommon0
          CFI (cfiCond341) Function ZDO_RegisterForZdoCB
          CFI (cfiCond341) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond341) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond341) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond341) CFA_SP SP+-7
          CFI Block cfiCond342 Using cfiCommon0
          CFI (cfiCond342) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond342) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond342) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond342) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond342) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond342) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond342) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond342) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond342) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond342) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond342) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond342) CFA_SP SP+-2
          CFI (cfiCond342) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond343 Using cfiCommon0
          CFI (cfiCond343) Function ZDO_SrcRtgIndCB
          CFI (cfiCond343) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond343) CFA_SP SP+-2
          CFI (cfiCond343) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker344 Using cfiCommon1
          CFI (cfiPicker344) NoFunction
          CFI (cfiPicker344) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond337
          CFI EndBlock cfiCond338
          CFI EndBlock cfiCond339
          CFI EndBlock cfiCond340
          CFI EndBlock cfiCond341
          CFI EndBlock cfiCond342
          CFI EndBlock cfiCond343
          CFI EndBlock cfiPicker344
// 3751 
// 3752 /*********************************************************************
// 3753  * @fn          ZDO_DeregisterForZdoCB
// 3754  *
// 3755  * @brief       Call this function to de-register the higher layer (for
// 3756  *              example, the Application layer or MT layer) with ZDO
// 3757  *              callbacks to get notified of some ZDO indication like
// 3758  *              existence of a concentrator or receipt of a source
// 3759  *              route record.
// 3760  *
// 3761  * @param       indID - ZDO Indication ID
// 3762  *
// 3763  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3764  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3765 ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
ZDO_DeregisterForZdoCB:
          CFI Block cfiBlock345 Using cfiCommon0
          CFI Function ZDO_DeregisterForZdoCB
        CODE
// 3766 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R1
// 3767   // Check the range of the indication ID
// 3768   if ( indID < MAX_ZDO_CB_FUNC )
        CLR       C
        SUBB      A,#0x9
        JNC       ??ZDO_DeregisterForZdoCB_0
// 3769   {
// 3770     zdoCBFunc[indID] = NULL;
        MOV       A,R1
        ADD       A,R1
        LCALL     ?Subroutine31 & 0xFFFF
// 3771     return ZSuccess;
??CrossCallReturnLabel_33:
        MOV       R1,A
        SJMP      ??ZDO_DeregisterForZdoCB_1
// 3772   }
// 3773 
// 3774   return ZInvalidParameter;
??ZDO_DeregisterForZdoCB_0:
        MOV       R1,#0x2
??ZDO_DeregisterForZdoCB_1:
        LJMP      ??Subroutine62_0 & 0xFFFF
// 3775 }
          CFI EndBlock cfiBlock345

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond346 Using cfiCommon0
          CFI Function ZDApp_InitZdoCBFunc
          CFI Conditional ??CrossCallReturnLabel_32
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond347 Using cfiCommon0
          CFI (cfiCond347) Function ZDO_DeregisterForZdoCB
          CFI (cfiCond347) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond347) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond347) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond347) CFA_SP SP+-7
          CFI Block cfiPicker348 Using cfiCommon1
          CFI (cfiPicker348) NoFunction
          CFI (cfiPicker348) Picker
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_49:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond346
          CFI EndBlock cfiCond347
          CFI EndBlock cfiPicker348

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond349 Using cfiCommon0
          CFI Function ZDO_RegisterForZdoCB
          CFI Conditional ??CrossCallReturnLabel_48
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond350 Using cfiCommon0
          CFI (cfiCond350) Function ZDApp_InitZdoCBFunc
          CFI (cfiCond350) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_32
          CFI (cfiCond350) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond350) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond350) CFA_SP SP+-9
          CFI Block cfiCond351 Using cfiCommon0
          CFI (cfiCond351) Function ZDO_DeregisterForZdoCB
          CFI (cfiCond351) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_33
          CFI (cfiCond351) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond351) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond351) CFA_SP SP+-9
          CFI Block cfiPicker352 Using cfiCommon1
          CFI (cfiPicker352) NoFunction
          CFI (cfiPicker352) Picker
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,#zdoCBFunc & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(zdoCBFunc >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond349
          CFI EndBlock cfiCond350
          CFI EndBlock cfiCond351
          CFI EndBlock cfiPicker352
// 3776 
// 3777 #if defined ( ZDP_BIND_VALIDATION )
// 3778 #if defined ( REFLECTOR )
// 3779 /*********************************************************************
// 3780  * @fn          ZDApp_SetPendingBindDefault
// 3781  *
// 3782  * @brief       This function initializes a specific entry of pending
// 3783  *              Bind Request.
// 3784  *
// 3785  * @param       pendBindReq - pointer to the entry in the table
// 3786  *
// 3787  * @return      none
// 3788  */
// 3789 void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
// 3790 {
// 3791   // Set it to an initial value
// 3792   osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
// 3793 
// 3794   // We are checking for age 0 for aged-out records
// 3795   pendBindReq->age = 0;
// 3796 }
// 3797 
// 3798 /*********************************************************************
// 3799  * @fn          ZDApp_InitPendingBind
// 3800  *
// 3801  * @brief       This function initializes the buffer that holds
// 3802  *              pending Bind Request messages if no valid NWK address
// 3803  *              exists in Address Manager and a Network Address Req
// 3804  *              has been sent out.
// 3805  *
// 3806  * @param       none
// 3807  *
// 3808  * @return      none
// 3809  */
// 3810 void ZDApp_InitPendingBind( void )
// 3811 {
// 3812   if ( ZDAppPendingBindReq == NULL )
// 3813   {
// 3814     if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
// 3815     {
// 3816       uint8 i;
// 3817 
// 3818       for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
// 3819       {
// 3820         // Set to default values
// 3821         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
// 3822       }
// 3823     }
// 3824   }
// 3825 }
// 3826 
// 3827 /*********************************************************************
// 3828  * @fn          ZDApp_GetEmptyPendingBindReq
// 3829  *
// 3830  * @brief       This function looks for an empty entry.
// 3831  *
// 3832  * @param       none
// 3833  *
// 3834  * @return      Pointer to entry
// 3835  */
// 3836 ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
// 3837 {
// 3838   uint8 i;
// 3839 
// 3840   if ( ZDAppPendingBindReq != NULL )
// 3841   {
// 3842     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
// 3843     {
// 3844       if ( ZDAppPendingBindReq[i].age == 0 )
// 3845       {
// 3846         return ( &ZDAppPendingBindReq[i] );
// 3847       }
// 3848     }
// 3849   }
// 3850 
// 3851   // No empty entry was found
// 3852   return NULL;
// 3853 }
// 3854 
// 3855 /*********************************************************************
// 3856  * @fn          ZDApp_ProcessPendingBindReq
// 3857  *
// 3858  * @brief       Process pending entry based on EXT address.
// 3859  *
// 3860  * @param       extAddr - of device to look up
// 3861  *
// 3862  * @return      none
// 3863  */
// 3864 void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
// 3865 {
// 3866   uint8 i;
// 3867 
// 3868   // Loop through all the pending entries for that Ext Address
// 3869   // to create Bind Entries and send Bind Rsp
// 3870   if ( ZDAppPendingBindReq != NULL )
// 3871   {
// 3872     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
// 3873     {
// 3874       if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
// 3875                         extAddr, Z_EXTADDR_LEN ) == TRUE )
// 3876       {
// 3877         uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
// 3878 
// 3879         // Add Bind entry
// 3880         if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
// 3881                                 ZDAppPendingBindReq[i].bindReq.clusterID,
// 3882                                 &(ZDAppPendingBindReq[i].bindReq.dstAddress),
// 3883                                 ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
// 3884         {
// 3885           // valid entry
// 3886           bindStat = ZDP_SUCCESS;
// 3887 
// 3888           // Notify to save info into NV
// 3889           ZDApp_NVUpdate();
// 3890         }
// 3891 
// 3892         // Send back a response message
// 3893         ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
// 3894                      bindStat, ZDAppPendingBindReq[i].securityUse );
// 3895 
// 3896         // Set the pending request entry to default values
// 3897         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
// 3898       }
// 3899     }
// 3900   }
// 3901 }
// 3902 
// 3903 /*********************************************************************
// 3904  * @fn          ZDApp_AgeOutPendingBindEntry
// 3905  *
// 3906  * @brief       Age out pending Bind Req entries.
// 3907  *
// 3908  * @param       none
// 3909  *
// 3910  * @return      none
// 3911  */
// 3912 void ZDApp_AgeOutPendingBindEntry( void )
// 3913 {
// 3914   uint8 i;
// 3915   bool entryFound = FALSE;
// 3916 
// 3917   if ( ZDAppPendingBindReq != NULL )
// 3918   {
// 3919     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
// 3920     {
// 3921       if ( ZDAppPendingBindReq[i].age > 1 )
// 3922       {
// 3923         ZDAppPendingBindReq[i].age--;
// 3924 
// 3925         entryFound = TRUE;
// 3926       }
// 3927       else if ( ZDAppPendingBindReq[i].age == 1 )
// 3928       {
// 3929         // The record has aged out and has valid data
// 3930         AddrMgrEntry_t entry;
// 3931         uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
// 3932 
// 3933         entry.user = ADDRMGR_USER_BINDING;
// 3934 
// 3935         // Remove the entry in address manager so we do not keep entries
// 3936         // with invalid addresses
// 3937         AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
// 3938 
// 3939         if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
// 3940         {
// 3941           if ( entry.nwkAddr == INVALID_NODE_ADDR )
// 3942           {
// 3943             // Release the entry that contains an invalid NWK address
// 3944             AddrMgrEntryRelease( &entry );
// 3945           }
// 3946         }
// 3947 
// 3948         // Send the Bind Response with failure status
// 3949         ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
// 3950                      &(ZDAppPendingBindReq[i].srcAddr),
// 3951                      bindStat, ZDAppPendingBindReq[i].securityUse );
// 3952 
// 3953         // Clear the record and set to default values
// 3954         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
// 3955       }
// 3956     }
// 3957   }
// 3958 
// 3959   if ( entryFound == FALSE )
// 3960   {
// 3961     osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
// 3962   }
// 3963   else
// 3964   {
// 3965     osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
// 3966                         AGE_OUT_PEND_BIND_REQ_DELAY );
// 3967   }
// 3968 }
// 3969 #endif
// 3970 #endif
// 3971 
// 3972 /*********************************************************************
// 3973  * @fn          ZDO_ChangeState
// 3974  *
// 3975  * @brief       Chance the device state
// 3976  *
// 3977  * @param       state - new state
// 3978  *
// 3979  * @return      none
// 3980  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3981 void ZDApp_ChangeState( devStates_t state )
ZDApp_ChangeState:
          CFI Block cfiBlock353 Using cfiCommon0
          CFI Function ZDApp_ChangeState
        CODE
// 3982 {
        FUNCALL ZDApp_ChangeState, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3983   if ( devState != state )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,R6
        JZ        ??CrossCallReturnLabel_122
// 3984   {
// 3985     devState = state;
        MOV       A,R1
        MOVX      @DPTR,A
// 3986     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine15 & 0xFFFF
// 3987   }
// 3988 }
??CrossCallReturnLabel_122:
        LJMP      ??Subroutine48_0 & 0xFFFF
          CFI EndBlock cfiBlock353
// 3989 
// 3990 /*********************************************************************
// 3991  * @fn      ZDApp_SetRejoinScanDuration()
// 3992  *
// 3993  * @brief   Sets scan duration for rejoin for an end device
// 3994  *
// 3995  * @param   rejoinScanDuration - milliseconds
// 3996  *
// 3997  * @return  none
// 3998  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3999 void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
ZDApp_SetRejoinScanDuration:
          CFI Block cfiBlock354 Using cfiCommon0
          CFI Function ZDApp_SetRejoinScanDuration
        CODE
// 4000 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 4001   zgDefaultRejoinScan = rejoinScanDuration;
        MOV       DPTR,#zgDefaultRejoinScan
          CFI EndBlock cfiBlock354
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8
// 4002 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiBlock355 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
        LJMP      ??Subroutine61_0 & 0xFFFF
          CFI EndBlock cfiBlock355
// 4003 
// 4004 /*********************************************************************
// 4005  * @fn      ZDApp_SetRejoinBackoffDuration()
// 4006  *
// 4007  * @brief   Sets rejoin backoff duration for rejoin for an end device
// 4008  *
// 4009  * @param   rejoinBackoffDuration - milliseconds
// 4010  *
// 4011  * @return  none
// 4012  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4013 void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
ZDApp_SetRejoinBackoffDuration:
          CFI Block cfiBlock356 Using cfiCommon0
          CFI Function ZDApp_SetRejoinBackoffDuration
        CODE
// 4014 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 4015   zgDefaultRejoinBackoff = rejoinBackoffDuration;
        MOV       DPTR,#zgDefaultRejoinBackoff
        SJMP      ?Subroutine8
// 4016 }
          CFI EndBlock cfiBlock356
// 4017 
// 4018 /*********************************************************************
// 4019  * @fn          ZDApp_SetParentAnnceTimer
// 4020  *
// 4021  * @brief       This function sets up the link status timer.
// 4022  *
// 4023  * @param       none
// 4024  *
// 4025  * @return      none
// 4026  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4027 void ZDApp_SetParentAnnceTimer( void )
ZDApp_SetParentAnnceTimer:
          CFI Block cfiBlock357 Using cfiCommon0
          CFI Function ZDApp_SetParentAnnceTimer
        CODE
// 4028 {
        FUNCALL ZDApp_SetParentAnnceTimer, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SetParentAnnceTimer, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 4029   // Parent Announce shall be sent no earlier than 10 seconds
// 4030   uint32 timeout = 10000;
// 4031 
// 4032   // Add with jitter of up to 10 seconds
// 4033   timeout += (osal_rand() & 0x2710);
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
// 4034 
// 4035   // Set timer to send the message
// 4036   osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       A,R2
        ANL       A,#0x10
        MOV       ?V0,A
        MOV       A,R3
        ANL       A,#0x27
        MOV       ?V1,A
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       DPTR,#__Constant_2710
        MOV       R0,#?V0
        LCALL     ?L_ADD_X
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        LJMP      ?Subroutine6 & 0xFFFF
// 4037 }
          CFI EndBlock cfiBlock357

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for continueJoining>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for prevDevState>`:
        DATA8
        DB 4

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_epDesc>`:
        DATA8
        DB 0
        DB 0
        DATA16
        DW ZDAppTaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_SavedPollRate>`:
        DATA32
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SecInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SecInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessSecEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessSecEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDOInitDeviceEx::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDOInitDeviceEx

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ReadNetworkRestoreState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ReadNetworkRestoreState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDAppDetermineDeviceType::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDAppDetermineDeviceType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkStartEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkStartEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_DeviceAuthEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_DeviceAuthEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SaveNetworkStateEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SaveNetworkStateEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RestoreNetworkState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RestoreNetworkState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitUserDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitUserDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDAppCheckForHoldKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDAppCheckForHoldKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessOSALMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessMsgCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RegisterCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RegisterCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessSecMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessSecMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessNetworkJoin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessNetworkJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StoreNwkSecMaterial::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StoreNwkSecMaterial

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SaveNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SaveNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ForceConcentratorChange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ForceConcentratorChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RestoreNwkSecMaterial::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RestoreNwkSecMaterial

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RestoreNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RestoreNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetTimerStart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetTimerCancel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetTimerCancel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlBypass::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlBypass

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlStartup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlStartup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkDiscoveryReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkDiscoveryReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_JoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_JoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_DeviceConfigured::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_DeviceConfigured

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendEventMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendEventMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkDiscoveryConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkDiscoveryConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NwkDescListProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NwkDescListProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkFormationConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkFormationConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_beaconNotifyIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_beaconNotifyIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_StartRouterConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_StartRouterConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_JoinConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_JoinConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_PermitJoinCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_PermitJoinCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_AddrChangeIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_AddrChangeIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_JoinIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_JoinIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ConcentratorIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ConcentratorIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_LeaveCnf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_LeaveCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_LeaveInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_LeaveInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SyncIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SyncIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ManytoOneFailureIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ManytoOneFailureIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_PollConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_PollConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkStatusCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkStatusCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AddrMgrWriteNVRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AddrMgrWriteNVRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_UpdateDeviceIndication::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_UpdateDeviceIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InMsgCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InMsgCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ChangeMatchDescRespPermission::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ChangeMatchDescRespPermission

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NwkStateUpdateCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NwkStateUpdateCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NodeProfileSync::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NodeProfileSync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StartJoiningCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StartJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StopJoiningCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StopJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_AnnounceNewAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_AnnounceNewAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendParentAnnce::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendParentAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NVUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NVUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_CoordStartPANIDConflictCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_CoordStartPANIDConflictCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SrcRtgIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SrcRtgIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitZdoCBFunc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitZdoCBFunc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_RegisterForZdoCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_RegisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_DeregisterForZdoCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_DeregisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ChangeState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ChangeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetRejoinScanDuration::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetRejoinScanDuration

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetRejoinBackoffDuration::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetRejoinBackoffDuration

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetParentAnnceTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetParentAnnceTimer

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4e2:
        DD 1250

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_258:
        DD 600

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        END
// 4038 
// 4039 /*********************************************************************
// 4040 *********************************************************************/
// 
// 7 271 bytes in segment BANKED_CODE
//   450 bytes in segment BANK_RELAYS
//    13 bytes in segment XDATA_I
//    13 bytes in segment XDATA_ID
//    36 bytes in segment XDATA_ROM_C
//    66 bytes in segment XDATA_Z
// 
//   463 bytes of CODE     memory
//    16 bytes of CONST    memory (+ 20 bytes shared)
// 7 271 bytes of HUGECODE memory
//    79 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
