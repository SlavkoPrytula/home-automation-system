###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               18/Apr/2021  01:42:06
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f C:\users\slavko\Temp\EW1274.tmp ("C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Components\stack\zdo\ZDApp.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1
#        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List\ZDApp.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj\ZDApp.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
      4            Revision:       $Revision: 44520 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66             
     67          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     68          #include "gp_common.h"
     69          #endif
     70             
     71          #include "bdb.h"
     72          #include "bdb_interface.h"
     73          
     74          #include "ssp.h"
     75          
     76          /* HAL */
     77          #include "hal_led.h"
     78          #include "hal_lcd.h"
     79          #include "hal_key.h"
     80          
     81          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     82            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     83          #endif
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          #if !defined( NWK_START_DELAY )
     90            #define NWK_START_DELAY             100   // in milliseconds
     91          #endif
     92          
     93          #if !defined( LEAVE_RESET_DELAY )
     94            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     95          #endif
     96          
     97          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     98            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     99          #endif
    100          
    101          #if !defined( BEACON_REQUEST_DELAY )
    102            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    103          #endif
    104          
    105          #if !defined( BEACON_REQ_DELAY_MASK )
    106            #define BEACON_REQ_DELAY_MASK       0x007F
    107          #endif
    108          
    109          #define MAX_RESUME_RETRY            3
    110          
    111          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    112          
    113          // Beacon Order Settings (see NLMEDE.h)
    114          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    115          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    116          
    117          // Leave control bits
    118          #define ZDAPP_LEAVE_CTRL_INIT 0
    119          #define ZDAPP_LEAVE_CTRL_SET  1
    120          #define ZDAPP_LEAVE_CTRL_RA   2
    121          
    122          // Address Manager Stub Implementation
    123          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    124          
    125          
    126          #if !defined ZDO_NV_SAVE_RFDs
    127          #define ZDO_NV_SAVE_RFDs  TRUE
    128          #endif
    129          
    130          // Delay time before updating NWK NV data to force fewer writes during high activity.
    131          #if ZDO_NV_SAVE_RFDs
    132          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    133          #else
    134          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    135          #endif
    136          
    137          // Timeout value to process New Devices
    138          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    139          
    140          
    141          //ZDP_BIND_SKIP_VALIDATION, redefined as ZDP_BIND_VALIDATION
    142          #if defined ( ZDP_BIND_VALIDATION )
    143          #if !defined MAX_PENDING_BIND_REQ
    144          #define MAX_PENDING_BIND_REQ 3
    145          #endif
    146          #endif
    147          
    148          #ifdef LEGACY_ZDO_LEDS
    149          #define zdoHalLedSet HalLedSet
    150          #else
    151          #define zdoHalLedSet(...)
    152          #endif
    153          
    154          /******************************************************************************
    155           * TYPEDEFS
    156           */
    157          typedef struct
    158          {
    159            void   *next;
    160            uint16 shortAddr;
    161            uint16 timeDelta;
    162          } ZDAppNewDevice_t;
    163          
    164          /*********************************************************************
    165           * GLOBAL VARIABLES
    166           */
    167          
    168          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          #endif
    171          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    173          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    180          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    181          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    183          
    184          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    186          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    188          
    189          #if defined ( ZDP_BIND_VALIDATION )
    190          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
    191          #endif
    192          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          uint32 runtimeChannel;
   \                     runtimeChannel:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          uint8 FrameCounterUpdated = FALSE;
   \                     FrameCounterUpdated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    195          /*********************************************************************
    196           * EXTERNAL VARIABLES
    197           */
    198          
    199          extern bool    requestNewTrustCenterLinkKey;
    200          extern uint32  requestLinkKeyTimeout;
    201          extern CONST   uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
    202          /*********************************************************************
    203           * EXTERNAL FUNCTIONS
    204           */
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          void ZDApp_NetworkStartEvt( void );
    210          void ZDApp_DeviceAuthEvt( void );
    211          void ZDApp_SaveNetworkStateEvt( void );
    212          
    213          uint8 ZDApp_ReadNetworkRestoreState( void );
    214          uint8 ZDApp_RestoreNetworkState( void );
    215          void ZDAppDetermineDeviceType( void );
    216          void ZDApp_InitUserDesc( void );
    217          void ZDAppCheckForHoldKey( void );
    218          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    219          void ZDApp_ProcessNetworkJoin( void );
    220          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    221          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    222          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    223          
    224          void ZDApp_SecInit( uint8 state );
    225          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    226          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    227          
    228          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    229          
    230          void ZDApp_ResetTimerStart( uint16 delay );
    231          void ZDApp_ResetTimerCancel( void );
    232          void ZDApp_LeaveCtrlInit( void );
    233          void ZDApp_LeaveCtrlSet( uint8 ra );
    234          uint8 ZDApp_LeaveCtrlBypass( void );
    235          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    236          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr, uint8 removeChildren, uint8 rejoin );
    237          void ZDApp_NodeProfileSync( uint8 stackProfile );
    238          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    239          void ZDApp_RegisterCBs( void );
    240          void ZDApp_InitZdoCBFunc(void);
    241          #if defined ( ZDP_BIND_VALIDATION )
    242          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    243          void ZDApp_InitPendingBind( void );
    244          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    245          void ZDApp_AgeOutPendingBindEntry( void );
    246          #endif
    247          
    248          void ZDApp_SetParentAnnceTimer( void );
    249          void ZDApp_StoreNwkSecMaterial(void);
    250          
    251          /*********************************************************************
    252           * LOCAL VARIABLES
    253           */
    254          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    255          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    256          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    257          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    259          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    260          devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    261          
    262          // previous rejoin state

   \                                 In  segment XDATA_I, align 1, keep-with-next
    263            devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \                     prevDevState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for prevDevState>`
   \   000001                REQUIRE __INIT_XDATA_I
    264          
    265          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )
    266            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
    267            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    268                                  // to parent. Set to make the device do an Orphan scan.
    269          #else
    270            // Set the default to coodinator

   \                                 In  segment XDATA_I, align 1, keep-with-next
    271            devStartModes_t devStartMode = MODE_HARD;
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devStartMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    272          #endif
    273          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    274          uint8 retryCnt = 0;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    275          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    276          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000007                REQUIRE __INIT_XDATA_I
    277          {
    278            ZDO_EP,
    279            0,
    280            &ZDAppTaskID,
    281            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    282            (afNetworkLatencyReq_t)0            // No Network Latency req
    283          };
    284          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    285          uint32 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I
    286          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    287          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    288          
    289          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    290          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    291          
    292          /*********************************************************************
    293           * @fn      ZDApp_Init
    294           *
    295           * @brief   ZDApp Initialization function.
    296           *
    297           * @param   task_id - ZDApp Task ID
    298           *
    299           * @return  None
    300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    302          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    303            // Save the task ID
    304            ZDAppTaskID = task_id;
   \   000006   90....       MOV       DPTR,#ZDAppTaskID
   \   000009   F0           MOVX      @DPTR,A
    305          
    306            // Initialize the ZDO global device short address storage
    307            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV       DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    308            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV       A,#-0x2
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   04           INC       A
   \   000018   F0           MOVX      @DPTR,A
    309            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    310          
    311            // Initialize ZDO items and setup the device - type of device to create.
    312            ZDO_Init();
   \   00001C                ; Setup parameters for call to function ZDO_Init
   \   00001C   12....       LCALL     `??ZDO_Init::?relay`; Banked call to: ZDO_Init
    313          
    314            // Register the endpoint description with the AF
    315            // This task doesn't have a Simple description, but we still need
    316            // to register the endpoint.
    317            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   00001F                ; Setup parameters for call to function afRegister
   \   00001F   7A..         MOV       R2,#ZDApp_epDesc & 0xff
   \   000021   7B..         MOV       R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000023   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    318          
    319          #if defined( ZDO_USERDESC_RESPONSE )
    320            ZDApp_InitUserDesc();
    321          #endif // ZDO_USERDESC_RESPONSE
    322          
    323            // Initialize the ZDO callback function pointers zdoCBFunc[]
    324            ZDApp_InitZdoCBFunc();
   \   000026                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   000026   12....       LCALL     `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    325          
    326            ZDApp_RegisterCBs();
   \   000029                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000029   12....       LCALL     `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    327          
    328          #if defined ( ZDP_BIND_VALIDATION )
    329          #if defined ( REFLECTOR )
    330            ZDApp_InitPendingBind();
    331          #endif
    332          #endif
    333          } /* ZDApp_Init() */
   \   00002C   02....       LJMP      ??Subroutine47_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    334          
    335          /*********************************************************************
    336           * @fn          ZDApp_SecInit
    337           *
    338           * @brief       ZDApp initialize security.
    339           *
    340           * @param       state - device initialization state
    341           *
    342           * @return      none
    343           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    344          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    345          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
    346            uint8 zgPreConfigKey[SEC_KEY_LEN];
    347          
    348            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    349            {
    350              // Set the Trust Center bit
    351              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
   \   00000C   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 8
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   4401         ORL       A,#0x1
   \   000012   F0           MOVX      @DPTR,A
    352            }
    353          
    354            // Initialize ZigBee Device Security Manager
    355            ZDSecMgrInit(state);
   \   000013                ; Setup parameters for call to function ZDSecMgrInit
   \   000013   12....       LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    356          
    357            if ( ZG_SECURE_ENABLED )
    358            {
    359              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   000016   E5..         MOV       A,?V0
   \   000018   602C         JZ        ??ZDApp_SecInit_0
    360              {
    361                if( _NIB.nwkKeyLoaded == FALSE )
   \   00001A   90....       MOV       DPTR,#_NIB + 61
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   7026         JNZ       ??ZDApp_SecInit_0
    362                {
    363                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    364                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    365                  {
    366                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000020                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000020   AC..         MOV       R4,?XSP + 0
   \   000022   AD..         MOV       R5,?XSP + 1
   \   000024   7A62         MOV       R2,#0x62
   \   000026   7B00         MOV       R3,#0x0
   \   000028   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
    367                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   00002B                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00002B   7900         MOV       R1,#0x0
   \   00002D   AA..         MOV       R2,?XSP + 0
   \   00002F   AB..         MOV       R3,?XSP + 1
   \   000031   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    368                      SSP_SwitchNwkKey( 0 );
   \   000034                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000034   7900         MOV       R1,#0x0
   \   000036   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    369          
    370                      // clear local copy of key
    371                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   000039                ; Setup parameters for call to function osal_memset
   \   000039   7C10         MOV       R4,#0x10
   \   00003B   7D00         MOV       R5,#0x0
   \   00003D   7900         MOV       R1,#0x0
   \   00003F   AA..         MOV       R2,?XSP + 0
   \   000041   AB..         MOV       R3,?XSP + 1
   \   000043   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    372                  }
    373                }
    374              }
    375          
    376              // clean the new devices list when Security module is initialized
    377              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   000046   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000049   6018         JZ        ??ZDApp_SecInit_1
    378              {
    379                ZDAppNewDevice_t *pNewDeviceNext;
    380          
    381                while ( ZDApp_NewDeviceList )
    382                {
    383                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_2:
   \   00004B   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00004E   FE           MOV       R6,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   FF           MOV       R7,A
    384                  osal_mem_free( ZDApp_NewDeviceList );
   \   000052                ; Setup parameters for call to function osal_mem_free
   \   000052   12....       LCALL     ?Subroutine20 & 0xFFFF
    385                  ZDApp_NewDeviceList = pNewDeviceNext;
   \                     ??CrossCallReturnLabel_34:
   \   000055   EF           MOV       A,R7
   \   000056   F9           MOV       R1,A
   \   000057   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00005A   EE           MOV       A,R6
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   EF           MOV       A,R7
   \   00005E   F0           MOVX      @DPTR,A
    386                }
   \   00005F   EE           MOV       A,R6
   \   000060   49           ORL       A,R1
   \   000061   70E8         JNZ       ??ZDApp_SecInit_2
    387              }
    388            }
    389          }
   \                     ??ZDApp_SecInit_1:
   \   000063   7410         MOV       A,#0x10
   \   000065   02....       LJMP      ??Subroutine46_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine47_0
   \   000003                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine66_0
   \   000003                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET
    390          
    391          /*********************************************************************
    392           * @fn      ZDApp_event_loop()
    393           *
    394           * @brief   Main event loop for Zigbee device objects task. This function
    395           *          should be called at periodic intervals.
    396           *
    397           * @param   task_id - Task ID
    398           * @param   events  - Bitmap of events
    399           *
    400           * @return  none
    401           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    402          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    403          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    404            uint8 *msg_ptr;
    405          
    406            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL       A,#0x80
   \   00000D   702D         JNZ       ??ZDApp_event_loop_0
    407            {
    408              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    409              {
    410                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    411          
    412                // Release the memory
    413                osal_msg_deallocate( msg_ptr );
    414              }
    415          
    416              // Return unprocessed events
    417              return (events ^ SYS_EVENT_MSG);
    418            }
    419          
    420            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EA           MOV       A,R2
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5040         JNC       ??ZDApp_event_loop_1
    421            {
    422              // Initialize apps and start the network
    423              ZDApp_ChangeState( DEV_INIT );
   \   000014                ; Setup parameters for call to function ZDApp_ChangeState
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    424          
    425              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    426                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000019                ; Setup parameters for call to function ZDO_StartDevice
   \   000019   7C0F         MOV       R4,#0xf
   \   00001B   7B0F         MOV       R3,#0xf
   \   00001D   90....       MOV       DPTR,#devStartMode
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FA           MOV       R2,A
   \   000022   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000025   E0           MOVX      A,@DPTR
   \   000026   5407         ANL       A,#0x7
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    427          
    428              // Return unprocessed events
    429              return (events ^ ZDO_NETWORK_INIT);
   \   00002C   EE           MOV       A,R6
   \   00002D   6401         XRL       A,#0x1
   \   00002F   02....       LJMP      ??ZDApp_event_loop_2 & 0xFFFF
    430            }
   \                     ??ZDApp_event_loop_3:
   \   000032                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000032   12....       LCALL     `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   000035                ; Setup parameters for call to function osal_msg_deallocate
   \   000035   AA..         MOV       R2,?V0
   \   000037   AB..         MOV       R3,?V1
   \   000039   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   00003C                ; Setup parameters for call to function osal_msg_receive
   \   00003C   90....       MOV       DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000044   8A..         MOV       ?V0,R2
   \   000046   8B..         MOV       ?V1,R3
   \   000048   EA           MOV       A,R2
   \   000049   4B           ORL       A,R3
   \   00004A   70E6         JNZ       ??ZDApp_event_loop_3
   \   00004C   EE           MOV       A,R6
   \   00004D   FA           MOV       R2,A
   \   00004E   EF           MOV       A,R7
   \   00004F   6480         XRL       A,#0x80
   \   000051   02....       LJMP      ??ZDApp_event_loop_4 & 0xFFFF
    431          
    432            if ( ZSTACK_ROUTER_BUILD )
    433            {
    434              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_1:
   \   000054   5402         ANL       A,#0x2
   \   000056   6009         JZ        ??ZDApp_event_loop_5
    435              {
    436                ZDApp_NetworkStartEvt();
   \   000058                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   000058   12....       LCALL     `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
    437          
    438                // Return unprocessed events
    439                return (events ^ ZDO_NETWORK_START);
   \   00005B   EE           MOV       A,R6
   \   00005C   6402         XRL       A,#0x2
   \   00005E   02....       LJMP      ??ZDApp_event_loop_2 & 0xFFFF
    440              }
    441          
    442              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_5:
   \   000061   EA           MOV       A,R2
   \   000062   5420         ANL       A,#0x20
   \   000064   602B         JZ        ??ZDApp_event_loop_6
    443              {
    444                if ( nwkStatus == ZSuccess )
   \   000066   90....       MOV       DPTR,#nwkStatus
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   701D         JNZ       ??ZDApp_event_loop_7
    445                {
    446                  if ( devState == DEV_END_DEVICE )
   \   00006C   90....       MOV       DPTR,#devState
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   6406         XRL       A,#0x6
   \   000072   7005         JNZ       ??ZDApp_event_loop_8
    447                  {
    448                    ZDApp_ChangeState( DEV_ROUTER );
   \   000074                ; Setup parameters for call to function ZDApp_ChangeState
   \   000074   7907         MOV       R1,#0x7
   \   000076   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    449                  }
    450          
    451                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_8:
   \   000079                ; Setup parameters for call to function osal_pwrmgr_device
   \   000079   7900         MOV       R1,#0x0
   \   00007B   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    452          
    453                  if ( zgChildAgingEnable == TRUE )
   \   00007E   90....       MOV       DPTR,#zgChildAgingEnable
   \   000081   E0           MOVX      A,@DPTR
   \   000082   6401         XRL       A,#0x1
   \   000084   7003         JNZ       ??ZDApp_event_loop_7
    454                  {
    455                    // Once the device has changed its state to a ROUTER set the timer to send
    456                    // Parent annce
    457                    ZDApp_SetParentAnnceTimer();
   \   000086                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000086   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
    458                  }
    459                }
    460                else
    461                {
    462                  // remain as end device
    463                }
    464                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_7:
   \   000089                ; Setup parameters for call to function osal_set_event
   \   000089   12....       LCALL     ?Subroutine16 & 0xFFFF
    465          
    466                // Return unprocessed events
    467                return (events ^ ZDO_ROUTER_START);
   \                     ??CrossCallReturnLabel_133:
   \   00008C   EE           MOV       A,R6
   \   00008D   6420         XRL       A,#0x20
   \   00008F   8074         SJMP      ??ZDApp_event_loop_2
    468              }
    469          
    470              if ( events & ZDO_PARENT_ANNCE_EVT )
   \                     ??ZDApp_event_loop_6:
   \   000091   EB           MOV       A,R3
   \   000092   5440         ANL       A,#0x40
   \   000094   600B         JZ        ??ZDApp_event_loop_9
    471              {
    472                ZDApp_SendParentAnnce();
   \   000096                ; Setup parameters for call to function ZDApp_SendParentAnnce
   \   000096   12....       LCALL     `??ZDApp_SendParentAnnce::?relay`; Banked call to: ZDApp_SendParentAnnce
    473          
    474                // Return unprocessed events
    475                return (events ^ ZDO_PARENT_ANNCE_EVT);
   \   000099   EE           MOV       A,R6
   \   00009A   FA           MOV       R2,A
   \   00009B   EF           MOV       A,R7
   \   00009C   6440         XRL       A,#0x40
   \   00009E   02....       LJMP      ??ZDApp_event_loop_4 & 0xFFFF
    476              }
    477            }
    478          
    479            if ( ZSTACK_END_DEVICE_BUILD )
    480            {
    481              if ( events & ZDO_VOLTAGE_CHECK )
    482              {
    483                nwkPollCount = 0;
    484                OnBoard_CheckVoltage();
    485          
    486                return (events ^ ZDO_VOLTAGE_CHECK);
    487              }
    488            }
    489          
    490            if( events & ZDO_REJOIN_BACKOFF )
   \                     ??ZDApp_event_loop_9:
   \   0000A1   EB           MOV       A,R3
   \   0000A2   5420         ANL       A,#0x20
   \   0000A4   6034         JZ        ??ZDApp_event_loop_10
    491            {
    492              if( devState == DEV_NWK_BACKOFF )
   \   0000A6   90....       MOV       DPTR,#devState
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   640C         XRL       A,#0xc
   \   0000AC   700D         JNZ       ??ZDApp_event_loop_11
    493              {
    494                ZDApp_ChangeState(DEV_NWK_DISC);
   \   0000AE                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000AE   7902         MOV       R1,#0x2
   \   0000B0   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    495                // Restart scan for rejoin
    496                ZDApp_StartJoiningCycle();
   \   0000B3                ; Setup parameters for call to function ZDApp_StartJoiningCycle
   \   0000B3   12....       LCALL     `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
    497                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   0000B6                ; Setup parameters for call to function osal_start_timerEx
   \   0000B6   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   0000B9   800B         SJMP      ??ZDApp_event_loop_12
    498              }
    499              else
    500              {
    501                // Rejoin backoff, silent period
    502                ZDApp_ChangeState(DEV_NWK_BACKOFF);
   \                     ??ZDApp_event_loop_11:
   \   0000BB                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000BB   790C         MOV       R1,#0xc
   \   0000BD   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    503                ZDApp_StopJoiningCycle();
   \   0000C0                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   0000C0   12....       LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
    504                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
   \   0000C3                ; Setup parameters for call to function osal_start_timerEx
   \   0000C3   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \                     ??ZDApp_event_loop_12:
   \   0000C6   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000C9   7A00         MOV       R2,#0x0
   \   0000CB   7B20         MOV       R3,#0x20
    505              }
   \   0000CD   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
    506          
    507              return ( events ^ ZDO_REJOIN_BACKOFF);
   \   0000D3   EE           MOV       A,R6
   \   0000D4   FA           MOV       R2,A
   \   0000D5   EF           MOV       A,R7
   \   0000D6   6420         XRL       A,#0x20
   \   0000D8   8056         SJMP      ??ZDApp_event_loop_4
    508            }
    509          
    510            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_10:
   \   0000DA   EA           MOV       A,R2
   \   0000DB   5410         ANL       A,#0x10
   \   0000DD   602A         JZ        ??ZDApp_event_loop_13
    511            {
    512              ZDO_UpdateNwkStatus( devState );
   \   0000DF                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   0000DF   90....       MOV       DPTR,#devState
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F9           MOV       R1,A
   \   0000E4   12....       LCALL     `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    513          
    514              // At start up, do one MTO route discovery if the device is a concentrator
    515              if ( zgConcentratorEnable == TRUE )
   \   0000E7   90....       MOV       DPTR,#zgConcentratorEnable
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   6401         XRL       A,#0x1
   \   0000ED   7013         JNZ       ??ZDApp_event_loop_14
    516              {
    517                // Start next event
    518                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000EF                ; Setup parameters for call to function osal_start_timerEx
   \   0000EF   90....       MOV       DPTR,#__Constant_64
   \   0000F2   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000F5   7A00         MOV       R2,#0x0
   \   0000F7   7B08         MOV       R3,#0x8
   \   0000F9   90....       MOV       DPTR,#NWK_TaskID
   \   0000FC   12....       LCALL     ??Subroutine59_0 & 0xFFFF
    519              }
   \                     ??CrossCallReturnLabel_85:
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
    520          
    521              // Return unprocessed events
    522              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_14:
   \   000102   EE           MOV       A,R6
   \   000103   6410         XRL       A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   000105   FA           MOV       R2,A
   \   000106   EF           MOV       A,R7
   \   000107   8027         SJMP      ??ZDApp_event_loop_4
    523            }
    524          
    525            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_13:
   \   000109   EA           MOV       A,R2
   \   00010A   5408         ANL       A,#0x8
   \   00010C   6006         JZ        ??ZDApp_event_loop_15
    526            {
    527              // User defined logic
    528          
    529              // Return unprocessed events
    530              return (events ^ ZDO_COMMAND_CNF);
   \   00010E   EA           MOV       A,R2
   \   00010F   6408         XRL       A,#0x8
   \   000111   FA           MOV       R2,A
   \   000112   8037         SJMP      ??ZDApp_event_loop_16
    531            }
    532          
    533            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_15:
   \   000114   EB           MOV       A,R3
   \   000115   5401         ANL       A,#0x1
   \   000117   601A         JZ        ??ZDApp_event_loop_17
    534            {
    535              // Save only in valid state
    536              if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
   \   000119   90....       MOV       DPTR,#_NIB + 35
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   F8           MOV       R0,A
   \   00011E   7408         MOV       A,#0x8
   \   000120   68           XRL       A,R0
   \   000121   6005         JZ        ??ZDApp_event_loop_18
   \   000123   7404         MOV       A,#0x4
   \   000125   68           XRL       A,R0
   \   000126   7003         JNZ       ??ZDApp_event_loop_19
    537              {
    538                ZDApp_SaveNetworkStateEvt();
   \                     ??ZDApp_event_loop_18:
   \   000128                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   000128   12....       LCALL     `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
    539              }
    540          
    541              // Return unprocessed events
    542              return (events ^ ZDO_NWK_UPDATE_NV);
   \                     ??ZDApp_event_loop_19:
   \   00012B   EE           MOV       A,R6
   \   00012C   FA           MOV       R2,A
   \   00012D   EF           MOV       A,R7
   \   00012E   6401         XRL       A,#0x1
   \                     ??ZDApp_event_loop_4:
   \   000130   FB           MOV       R3,A
   \   000131   8018         SJMP      ??ZDApp_event_loop_16
    543            }
    544          
    545            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_17:
   \   000133   EA           MOV       A,R2
   \   000134   5404         ANL       A,#0x4
   \   000136   600A         JZ        ??ZDApp_event_loop_20
    546            {
    547          #ifdef ZBA_FALLBACK_NWKKEY
    548              if ( devState == DEV_END_DEVICE_UNAUTH )
    549              {
    550                ZDSecMgrFallbackNwkKey();
    551              }
    552              else
    553          #endif
    554              {
    555                // Set the NV startup option to force a "new" join.
    556                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE | ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   000138                ; Setup parameters for call to function zgWriteStartupOptions
   \   000138   7A03         MOV       R2,#0x3
   \   00013A   79FF         MOV       R1,#-0x1
   \   00013C   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    557          
    558                // The device has been in the UNAUTH state, so reset
    559                // Note: there will be no return from this call
    560                SystemResetSoft();
   \   00013F                ; Setup parameters for call to function Onboard_soft_reset
   \   00013F   12....       LCALL     Onboard_soft_reset & 0xFFFF
    561              }
    562            }
    563          
    564          #if defined ( ZDP_BIND_VALIDATION )
    565            if ( events & ZDO_PENDING_BIND_REQ_EVT )
    566            {
    567          #if defined ( REFLECTOR )
    568              ZDApp_AgeOutPendingBindEntry();
    569          #endif
    570              // Return unprocessed events
    571              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
    572            }
    573          #endif
    574          
    575            if ( ZG_SECURE_ENABLED )
    576            {
    577              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_20:
   \   000142                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   000142   EE           MOV       A,R6
   \   000143   FA           MOV       R2,A
   \   000144   EF           MOV       A,R7
   \   000145   FB           MOV       R3,A
   \   000146   A9..         MOV       R1,?V2
   \   000148   12....       LCALL     `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
    578            }
   \                     ??ZDApp_event_loop_16:
   \   00014B   02....       LJMP      ?Subroutine1 & 0xFFFF
    579            else
    580            {
    581              // Discard or make more handlers
    582              return 0;
    583            }
    584          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine59_0
   \   000003                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7A10         MOV       R2,#0x10
   \   000002                REQUIRE ??Subroutine70_0
   \   000002                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine71_0
   \   000002                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000008   22           RET
    585          
    586          /*********************************************************************
    587           * @fn      ZDApp_ProcessSecEvent()
    588           *
    589           * @brief   Process incoming security events.
    590           *
    591           * @param   task_id - Task ID
    592           * @param   events  - Bitmap of events
    593           *
    594           * @return  none
    595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    597          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    598            (void)task_id;  // Intentionally unreferenced parameter
    599          
    600            if ( ZSTACK_ROUTER_BUILD )
    601            {
    602              if ( events & ZDO_NEW_DEVICE )
   \   000009   EA           MOV       A,R2
   \   00000A   5440         ANL       A,#0x40
   \   00000C   6077         JZ        ??ZDApp_ProcessSecEvent_0
    603              {
    604                // process the new device event
    605                if ( ZDApp_NewDeviceList )
   \   00000E   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000011   606D         JZ        ??ZDApp_ProcessSecEvent_1
    606                {
    607                  ZDAppNewDevice_t *pNewDevice;
    608                  uint16 timeDelta;
    609          
    610                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
   \   000013                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   000013   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00001B   12....       LCALL     `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
    611          
    612                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   00001E   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000021   F5..         MOV       ?V0,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V1,A
    613                  osal_mem_free( ZDApp_NewDeviceList );
   \   000027                ; Setup parameters for call to function osal_mem_free
   \   000027   12....       LCALL     ?Subroutine20 & 0xFFFF
    614                  ZDApp_NewDeviceList = pNewDevice;
   \                     ??CrossCallReturnLabel_35:
   \   00002A   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00002D   12....       LCALL     ??Subroutine68_0 & 0xFFFF
    615          
    616                  if ( pNewDevice )
   \                     ??CrossCallReturnLabel_124:
   \   000030   E5..         MOV       A,?V0
   \   000032   45..         ORL       A,?V1
   \   000034   604A         JZ        ??ZDApp_ProcessSecEvent_1
    617                  {
    618                    timeDelta = pNewDevice->timeDelta;
   \   000036   85..82       MOV       DPL,?V0
   \   000039   85..83       MOV       DPH,?V1
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F5..         MOV       ?V4,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F5..         MOV       ?V5,A
    619                    pNewDevice = pNewDevice->next;
   \   000047   8014         SJMP      ??ZDApp_ProcessSecEvent_2
    620          
    621                    while ( pNewDevice )
    622                    {
    623                      pNewDevice->timeDelta -= timeDelta;
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000049   85..82       MOV       DPL,?V0
   \   00004C   85..83       MOV       DPH,?V1
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   C3           CLR       C
   \   000054   E0           MOVX      A,@DPTR
   \   000055   95..         SUBB      A,?V4
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   95..         SUBB      A,?V5
   \   00005C   F0           MOVX      @DPTR,A
    624                      pNewDevice = pNewDevice->next;
   \                     ??ZDApp_ProcessSecEvent_2:
   \   00005D   85..82       MOV       DPL,?V0
   \   000060   85..83       MOV       DPH,?V1
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F5..         MOV       ?V0,A
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F5..         MOV       ?V1,A
    625                    }
   \   00006A   E5..         MOV       A,?V0
   \   00006C   45..         ORL       A,?V1
   \   00006E   70D9         JNZ       ??ZDApp_ProcessSecEvent_3
    626          
    627                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
   \   000070                ; Setup parameters for call to function osal_start_timerEx
   \   000070   E4           CLR       A
   \   000071   F5..         MOV       ?V6,A
   \   000073   F5..         MOV       ?V7,A
   \   000075   78..         MOV       R0,#?V4
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00007A   12....       LCALL     ?Subroutine14 & 0xFFFF
    628                  }
    629                }
   \                     ??CrossCallReturnLabel_79:
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
    630          
    631                // Return unprocessed events
    632                return (events ^ ZDO_NEW_DEVICE);
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000080   EE           MOV       A,R6
   \   000081   6440         XRL       A,#0x40
   \   000083   801A         SJMP      ??ZDApp_ProcessSecEvent_4
    633              }
    634            }
    635          
    636            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000085   EA           MOV       A,R2
   \   000086   5480         ANL       A,#0x80
   \   000088   6019         JZ        ??ZDApp_ProcessSecEvent_5
    637            {
    638              ZDApp_StoreNwkSecMaterial();
   \   00008A                ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
   \   00008A   12....       LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
    639              
    640              ZDApp_DeviceAuthEvt();
   \   00008D                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   00008D   12....       LCALL     `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    641          
    642              bdb_setNodeIsOnANetwork(TRUE);
   \   000090                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000090   7901         MOV       R1,#0x1
   \   000092   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    643              
    644              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, TRUE);
   \   000095                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000095   7A01         MOV       R2,#0x1
   \   000097   7903         MOV       R1,#0x3
   \   000099   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    645          
    646              // Return unprocessed events
    647              return (events ^ ZDO_DEVICE_AUTH);
   \   00009C   EE           MOV       A,R6
   \   00009D   6480         XRL       A,#0x80
   \                     ??ZDApp_ProcessSecEvent_4:
   \   00009F   FA           MOV       R2,A
   \   0000A0   EF           MOV       A,R7
   \   0000A1   802B         SJMP      ??ZDApp_ProcessSecEvent_6
    648            }
    649          
    650            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_5:
   \   0000A3   EB           MOV       A,R3
   \   0000A4   5402         ANL       A,#0x2
   \   0000A6   600A         JZ        ??ZDApp_ProcessSecEvent_7
    651            {
    652              ZDApp_SaveNwkKey();
   \   0000A8                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   0000A8   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    653          
    654              // Return unprocessed events
    655              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   0000AB   EE           MOV       A,R6
   \   0000AC   FA           MOV       R2,A
   \   0000AD   EF           MOV       A,R7
   \   0000AE   6402         XRL       A,#0x2
   \   0000B0   801C         SJMP      ??ZDApp_ProcessSecEvent_6
    656            }
    657          
    658            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_7:
   \   0000B2   EB           MOV       A,R3
   \   0000B3   5408         ANL       A,#0x8
   \   0000B5   600A         JZ        ??ZDApp_ProcessSecEvent_8
    659            {
    660          #if defined (NV_RESTORE)
    661              ZDSecMgrSaveApsLinkKey();
   \   0000B7                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   0000B7   12....       LCALL     `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
    662          #endif // (NV_RESTORE)
    663          
    664              // Return unprocessed events
    665              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   0000BA   EE           MOV       A,R6
   \   0000BB   FA           MOV       R2,A
   \   0000BC   EF           MOV       A,R7
   \   0000BD   6408         XRL       A,#0x8
   \   0000BF   800D         SJMP      ??ZDApp_ProcessSecEvent_6
    666            }
    667          
    668            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_8:
   \   0000C1   EB           MOV       A,R3
   \   0000C2   5404         ANL       A,#0x4
   \   0000C4   600B         JZ        ??ZDApp_ProcessSecEvent_9
    669            {
    670              ZDSecMgrSaveTCLinkKey();
   \   0000C6                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   0000C6   12....       LCALL     `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    671          
    672              // Return unprocessed events
    673              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   0000C9   EE           MOV       A,R6
   \   0000CA   FA           MOV       R2,A
   \   0000CB   EF           MOV       A,R7
   \   0000CC   6404         XRL       A,#0x4
   \                     ??ZDApp_ProcessSecEvent_6:
   \   0000CE   FB           MOV       R3,A
   \   0000CF   8004         SJMP      ??ZDApp_ProcessSecEvent_10
    674            }
    675          
    676            // Discard or make more handlers
    677            return 0;
   \                     ??ZDApp_ProcessSecEvent_9:
   \   0000D1   7A00         MOV       R2,#0x0
   \   0000D3   7B00         MOV       R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_10:
   \   0000D5   80..         SJMP      ??Subroutine43_0
    678          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   7A40         MOV       R2,#0x40
   \   000002                REQUIRE ??Subroutine57_0
   \   000002                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine58_0
   \   000002                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   E5..         MOV       A,?V0
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V1
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET
    679          
    680          /*********************************************************************
    681           * Application Functions
    682           */
    683          
    684          /*********************************************************************
    685           * @fn      ZDOInitDevice
    686           *
    687           * @brief   Start the device in the network.  This function will read
    688           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    689           *   restore the network state of the device.
    690           *
    691           * @param   startDelay - timeDelay to start device (in milliseconds).
    692           *                       There is a jitter added to this delay:
    693           *                       ((NWK_START_DELAY + startDelay)
    694           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    695           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    696           *                       this function will hold the network init. Application
    697           *                       can start the device.
    698           * #@param  mode       - ZDO_INITDEV_CENTRALIZED or ZDO_INITDEV_DISTRIBUTED to specify
    699           *                       which mode should the device start with (only has effect on 
    700           *                       Router devices)
    701           *
    702           * NOTE:    If the application would like to force a "new" join, the
    703           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    704           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    705           *          this function. "new" join means to not restore the network
    706           *          state of the device. Use zgWriteStartupOptions() to set these
    707           *          options.
    708           *
    709           * @return
    710           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    711           *          restored.
    712           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    713           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    714           *          it could mean that there was no network state to restore.
    715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine43_0
   \   000003                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    716          uint8 ZDOInitDeviceEx( uint16 startDelay, uint8 mode)
   \                     ZDOInitDeviceEx:
    717          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   89..         MOV       ?V1,R1
    718            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   75..01       MOV       ?V0,#0x1
    719            uint16 extendedDelay = 0;
   \   000013   7E00         MOV       R6,#0x0
   \   000015   7F00         MOV       R7,#0x0
    720            
    721            if ( devState == DEV_HOLD )
   \   000017   90....       MOV       DPTR,#devState
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   7008         JNZ       ??ZDOInitDeviceEx_0
    722            {
    723              byte temp = FALSE;
   \   000023   E4           CLR       A
   \   000024   F0           MOVX      @DPTR,A
    724              // Initialize the RAM items table, in case an NV item has been updated.
    725              zgInitItems( FALSE );
   \   000025                ; Setup parameters for call to function zgInitItems
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
    726              
    727              //Turn off the radio
    728              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   000029                ; Setup parameters for call to function ZMacSetReq
   \   000029   8003         SJMP      ??ZDOInitDeviceEx_1
    729            }
    730            else
    731            {
    732              byte temp = TRUE;
   \                     ??ZDOInitDeviceEx_0:
   \   00002B   7401         MOV       A,#0x1
   \   00002D   F0           MOVX      @DPTR,A
    733              //Turn on the radio
    734              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   00002E                ; Setup parameters for call to function ZMacSetReq
   \                     ??ZDOInitDeviceEx_1:
   \   00002E   AA..         MOV       R2,?XSP + 0
   \   000030   AB..         MOV       R3,?XSP + 1
   \   000032   7952         MOV       R1,#0x52
   \   000034   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    735            }
    736          
    737            ZDConfig_InitDescriptors();
   \   000037                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000037   12....       LCALL     `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    738            //devtag.071807.todo - fix this temporary solution
    739            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00003A   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   90....       MOV       DPTR,#_NIB + 14
   \   000041   F0           MOVX      @DPTR,A
    740          
    741          #if defined ( NV_RESTORE )
    742            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    743            // while booting to skip past NV Restore.
    744            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   000042   90....       MOV       DPTR,#zdappHoldKeys
   \   000045   E0           MOVX      A,@DPTR
   \   000046   6404         XRL       A,#0x4
   \   000048   6003         JZ        $+5
   \   00004A   02....       LJMP      ??ZDOInitDeviceEx_2 & 0xFFFF
    745            {
    746              zdappHoldKeys = 0;   // Only once
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
    747              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    748            }
    749            else
    750            {
    751          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
    752              if ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
    753              {
    754                networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
    755              }
    756              else
    757              {
    758                // Determine if NV should be restored
    759                networkStateNV = ZDApp_ReadNetworkRestoreState();
    760              }
    761          #else
    762              // Determine if NV should be restored
    763              networkStateNV = ZDApp_ReadNetworkRestoreState();
    764          #endif
    765            }
    766          
    767            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    768            {
    769              networkStateNV = ZDApp_RestoreNetworkState();
    770          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
    771              if ( ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL ) && ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE ) )
    772              {
    773                networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
    774              }
    775          #endif
    776              runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
    777            }
    778            else
    779            {
    780              // Wipe out the network state in NV
    781              NLME_InitNV();
   \                     ??ZDOInitDeviceEx_3:
   \   00004F                ; Setup parameters for call to function NLME_InitNV
   \   00004F   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
    782              NLME_SetDefaultNV();
   \   000052                ; Setup parameters for call to function NLME_SetDefaultNV
   \   000052   12....       LCALL     `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
    783              // clear NWK key values
    784              ZDSecMgrClearNVKeyValues();
   \   000055                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   000055   12....       LCALL     `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
    785            }
    786          #endif
    787          
    788            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDeviceEx_4:
   \   000058   7401         MOV       A,#0x1
   \   00005A   65..         XRL       A,?V0
   \   00005C   6003         JZ        $+5
   \   00005E   02....       LJMP      ??ZDOInitDeviceEx_5 & 0xFFFF
    789            {
    790              ZDAppDetermineDeviceType();
   \   000061                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000061   12....       LCALL     `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    791          
    792              // Only delay if joining network - not restoring network state
    793              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    794                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000064                ; Setup parameters for call to function osal_rand
   \   000064   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000067   EA           MOV       A,R2
   \   000068   547F         ANL       A,#0x7f
   \   00006A   F8           MOV       R0,A
   \   00006B   E5..         MOV       A,?V2
   \   00006D   28           ADD       A,R0
   \   00006E   F8           MOV       R0,A
   \   00006F   E4           CLR       A
   \   000070   35..         ADDC      A,?V3
   \   000072   F9           MOV       R1,A
   \   000073   E8           MOV       A,R0
   \   000074   2464         ADD       A,#0x64
   \   000076   FE           MOV       R6,A
   \   000077   E4           CLR       A
   \   000078   39           ADDC      A,R1
   \   000079   FF           MOV       R7,A
    795          
    796              runtimeChannel = zgDefaultChannelList;
   \   00007A   90....       MOV       DPTR,#zgDefaultChannelList
   \   00007D   12....       LCALL     ?XLOAD_R0123
   \   000080   90....       MOV       DPTR,#runtimeChannel
   \   000083   12....       LCALL     ?XSTORE_R0123
    797              
    798              // Set the NV startup option to force a "new" join.
    799              zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000086                ; Setup parameters for call to function zgWriteStartupOptions
   \   000086   7A02         MOV       R2,#0x2
   \   000088   79FF         MOV       R1,#-0x1
   \   00008A   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    800              
    801          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    802              gp_ProxyTblInit( TRUE );
   \   00008D                ; Setup parameters for call to function gp_ProxyTblInit
   \   00008D   7901         MOV       R1,#0x1
   \   00008F   12....       LCALL     `??gp_ProxyTblInit::?relay`; Banked call to: gp_ProxyTblInit
    803          #elif defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    804              uint16 i;
    805              uint8 status;
    806              uint8 emptyEntry[] = {0xFF, 0xFF, /* Options 16-bit bitmap */  \
    807                                   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /*GPD ID Unsigned 32-bit integer/ IEEE address */  \
    808                                   0x00, /* Endpoint Unsigned 8-bit integer */  \
    809                                   0xFF, 0xFF, /* GPD Assigned Alias Unsigned 16-bit integer */  \
    810                                   0xFF, /* Security Options 8-bit bitmap */  \
    811                                   0xFF, 0xFF, 0xFF, 0xFF, /* GPD security frame counter Unsigned 32-bit Integer */  \
    812                                   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* GPD key Security key */  \
    813                                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Lightweight sink address list sequence of octets */  \
    814                                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
    815                                   0x00, /* Free group entries flag */  \
    816                                   0x00, 0x00, 0x00, 0x00, /* Sink group list sequence of octets */  \
    817                                   0x00, 0x00, 0x00, 0x00,  \
    818                                   0x00, /* Groupcast radius Unsigned 8-bit integer */  \
    819                                   0x00 /* Search Counter Unsigned 8-bit integer */  \
    820                                   };
    821              for( i = ZCD_NV_PROXY_TABLE_START; i <= ZCD_NV_PROXY_TABLE_END; i++ )
    822              {
    823                status = osal_nv_write( ( ZCD_NV_PROXY_TABLE_START + i ), 0,
    824                                                    sizeof(emptyEntry), &emptyEntry );
    825                
    826                if( status != SUCCESS )
    827                {
    828                  break;
    829                }
    830              }
    831          #endif
    832          
    833              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   000092   90....       MOV       DPTR,#_NIB + 20
   \   000095   74FE         MOV       A,#-0x2
   \   000097   F0           MOVX      @DPTR,A
   \   000098   A3           INC       DPTR
   \   000099   04           INC       A
   \   00009A   F0           MOVX      @DPTR,A
    834              _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   00009B   90....       MOV       DPTR,#_NIB + 23
   \   00009E   14           DEC       A
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   04           INC       A
   \   0000A2   F0           MOVX      @DPTR,A
    835              _NIB.nwkPanId = 0xFFFF;
   \   0000A3   90....       MOV       DPTR,#_NIB + 33
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   F0           MOVX      @DPTR,A
    836              osal_memset(_NIB.extendedPANID, 0, Z_EXTADDR_LEN);
   \   0000A9                ; Setup parameters for call to function osal_memset
   \   0000A9   7C08         MOV       R4,#0x8
   \   0000AB   7D00         MOV       R5,#0x0
   \   0000AD   7900         MOV       R1,#0x0
   \   0000AF   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   0000B1   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   0000B3   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    837              NLME_SetUpdateID( 0 );
   \   0000B6                ; Setup parameters for call to function NLME_SetUpdateID
   \   0000B6   7900         MOV       R1,#0x0
   \   0000B8   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    838              
    839              if(ZG_DEVICE_RTRONLY_TYPE)
   \   0000BB   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   6401         XRL       A,#0x1
   \   0000C1   705A         JNZ       ??ZDOInitDeviceEx_6
    840              {
    841                if(1 == mode)
   \   0000C3   7401         MOV       A,#0x1
   \   0000C5   65..         XRL       A,?V1
   \   0000C7   703E         JNZ       ??ZDOInitDeviceEx_7
    842                {
    843                  //Update TC address as distributed network (TC none)
    844                  ZDSecMgrUpdateTCAddress(0);
   \   0000C9                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   0000C9   7A00         MOV       R2,#0x0
   \   0000CB   7B00         MOV       R3,#0x0
   \   0000CD   804B         SJMP      ??ZDOInitDeviceEx_8
    845                }
   \                     ??ZDOInitDeviceEx_2:
   \   0000CF                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   0000CF   12....       LCALL     `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   0000D2   E9           MOV       A,R1
   \   0000D3   F5..         MOV       ?V0,A
   \   0000D5   6003         JZ        $+5
   \   0000D7   02....       LJMP      ??ZDOInitDeviceEx_3 & 0xFFFF
   \   0000DA                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   0000DA   12....       LCALL     `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
   \   0000DD   E9           MOV       A,R1
   \   0000DE   F5..         MOV       ?V0,A
   \   0000E0   75..01       MOV       ?V4,#0x1
   \   0000E3   8E..         MOV       ?V5,R6
   \   0000E5   8E..         MOV       ?V6,R6
   \   0000E7   8E..         MOV       ?V7,R6
   \   0000E9   90....       MOV       DPTR,#_NIB + 22
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   78..         MOV       R0,#?V4
   \   0000EF   12....       LCALL     ?L_SHL
   \   0000F2   90....       MOV       DPTR,#runtimeChannel
   \   0000F5   E5..         MOV       A,?V4
   \   0000F7   F0           MOVX      @DPTR,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   E5..         MOV       A,?V5
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   E5..         MOV       A,?V6
   \   0000FF   F0           MOVX      @DPTR,A
   \   000100   A3           INC       DPTR
   \   000101   E5..         MOV       A,?V7
   \   000103   F0           MOVX      @DPTR,A
   \   000104   02....       LJMP      ??ZDOInitDeviceEx_4 & 0xFFFF
    846                else
    847                {
    848                  // Centralized mode
    849                  uint8 tmp[Z_EXTADDR_LEN];
    850                  osal_memset(tmp,0x00,Z_EXTADDR_LEN);
   \                     ??ZDOInitDeviceEx_7:
   \   000107                ; Setup parameters for call to function osal_memset
   \   000107   7C08         MOV       R4,#0x8
   \   000109   7D00         MOV       R5,#0x0
   \   00010B   7900         MOV       R1,#0x0
   \   00010D   7401         MOV       A,#0x1
   \   00010F   12....       LCALL     ?XSTACK_DISP101_8
   \   000112   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    851                  ZDSecMgrUpdateTCAddress(tmp);
   \   000115                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   000115   7401         MOV       A,#0x1
   \   000117   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??ZDOInitDeviceEx_8:
   \   00011A   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
    852                }
    853              }
    854          
    855              // Update NIB in NV
    856              osal_nv_write( ZCD_NV_NIB, 0, sizeof( nwkIB_t ), &_NIB );
   \                     ??ZDOInitDeviceEx_6:
   \   00011D                ; Setup parameters for call to function osal_nv_write
   \   00011D   75....       MOV       ?V4,#_NIB & 0xff
   \   000120   75....       MOV       ?V5,#(_NIB >> 8) & 0xff
   \   000123   78..         MOV       R0,#?V4
   \   000125   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000128   75..6E       MOV       ?V4,#0x6e
   \   00012B   75..00       MOV       ?V5,#0x0
   \   00012E   78..         MOV       R0,#?V4
   \   000130   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000133   7C00         MOV       R4,#0x0
   \   000135   7D00         MOV       R5,#0x0
   \   000137   7A21         MOV       R2,#0x21
   \   000139   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00013C   12....       LCALL     ?DEALLOC_XSTACK8
    857          
    858              // Reset the NV startup option to resume from NV by clearing
    859              // the "New" join option.
    860              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00013F                ; Setup parameters for call to function zgWriteStartupOptions
   \   00013F   7A02         MOV       R2,#0x2
   \   000141   7900         MOV       R1,#0x0
   \   000143   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    861            
    862            }
    863          
    864            // Initialize the security for type of device
    865            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDeviceEx_5:
   \   000146                ; Setup parameters for call to function ZDApp_SecInit
   \   000146   A9..         MOV       R1,?V0
   \   000148   12....       LCALL     `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    866          
    867            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   00014B   74FF         MOV       A,#-0x1
   \   00014D   65..         XRL       A,?V2
   \   00014F   7004         JNZ       ??ZDOInitDeviceEx_9
   \   000151   74FF         MOV       A,#-0x1
   \   000153   65..         XRL       A,?V3
   \                     ??ZDOInitDeviceEx_9:
   \   000155   6010         JZ        ??ZDOInitDeviceEx_10
    868            {
    869              devState = DEV_INIT;    // Remove the Hold state
   \   000157   90....       MOV       DPTR,#devState
   \   00015A   7401         MOV       A,#0x1
   \   00015C   F0           MOVX      @DPTR,A
    870          
    871              // Initialize leave control logic
    872              ZDApp_LeaveCtrlInit();
   \   00015D                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00015D   12....       LCALL     `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    873          
    874              // Trigger the network start
    875              ZDApp_NetworkInit( extendedDelay );
   \   000160                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000160   EE           MOV       A,R6
   \   000161   FA           MOV       R2,A
   \   000162   EF           MOV       A,R7
   \   000163   FB           MOV       R3,A
   \   000164   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    876            }
    877          
    878            // set broadcast address mask to support broadcast filtering
    879            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDeviceEx_10:
   \   000167                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000167   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   F9           MOV       R1,A
   \   00016C   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    880          
    881            return ( networkStateNV );
   \   00016F   A9..         MOV       R1,?V0
   \   000171   7409         MOV       A,#0x9
   \   000173   02....       LJMP      ?Subroutine2 & 0xFFFF
    882          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine45_0
   \   000002                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET
    883          
    884          /*********************************************************************
    885           * @fn      ZDApp_ReadNetworkRestoreState
    886           *
    887           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    888           *          or not to restore the network state.
    889           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    890           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    891           *
    892           * @param   none
    893           *
    894           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    895           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    896           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    897           *          ZCD_NV_STARTUP_OPTION
    898           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    899          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    900          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    901            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV       R6,#0x0
    902          
    903            // Look for the New Network State option.
    904            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV       A,R1
   \   00000B   F8           MOV       R0,A
   \   00000C   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000E   5007         JNC       ??ZDApp_ReadNetworkRestoreState_0
    905            {
    906              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV       R6,#0x1
    907              bdb_setNodeIsOnANetwork(FALSE);
   \   000012                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000012   7900         MOV       R1,#0x0
   \   000014   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    908            }
    909          
    910            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000017   EE           MOV       A,R6
   \   000018   F9           MOV       R1,A
   \   000019   80..         SJMP      ??Subroutine47_0
    911          }
    912          
    913          /*********************************************************************
    914           * @fn      ZDAppDetermineDeviceType()
    915           *
    916           * @brief   Determines the type of device to start.
    917           *
    918           *          Looks at zgDeviceLogicalType and determines what type of
    919           *          device to start.  The types are:
    920           *            ZG_DEVICETYPE_COORDINATOR
    921           *            ZG_DEVICETYPE_ROUTER
    922           *            ZG_DEVICETYPE_ENDDEVICE
    923           *
    924           * @param   none
    925           *
    926           * @return  none
    927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    928          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    929          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    930            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   700E         JNZ       ??ZDAppDetermineDeviceType_0
    931            {
    932              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV       DPTR,#devStartMode
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    933              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX      A,@DPTR
   \   000014   54F8         ANL       A,#0xf8
   \   000016   8036         SJMP      ??ZDAppDetermineDeviceType_1
    934            }
    935            else
    936            {
    937              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   54F8         ANL       A,#0xf8
   \   00001E   F8           MOV       R0,A
   \   00001F   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000022   E0           MOVX      A,@DPTR
   \   000023   6401         XRL       A,#0x1
   \   000025   7004         JNZ       ??ZDAppDetermineDeviceType_2
    938                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000027   7401         MOV       A,#0x1
   \   000029   8007         SJMP      ??ZDAppDetermineDeviceType_3
    939              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6402         XRL       A,#0x2
   \   00002E   7007         JNZ       ??ZDAppDetermineDeviceType_4
    940                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000030   7402         MOV       A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000032   48           ORL       A,R0
   \   000033   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000036   F0           MOVX      @DPTR,A
    941          
    942              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    943              // The device shall do rejoin the network. Otherwise, do normal join
    944              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000037                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000037   7A..         MOV       R2,#AIB_apsUseExtendedPANID & 0xff
   \   000039   7B..         MOV       R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003E   E9           MOV       A,R1
   \   00003F   90....       MOV       DPTR,#devStartMode
   \   000042   7003         JNZ       ??ZDAppDetermineDeviceType_5
    945              {
    946                devStartMode = MODE_JOIN;     // Assume joining
   \   000044   E4           CLR       A
   \   000045   8007         SJMP      ??ZDAppDetermineDeviceType_1
    947              }
    948              else
    949              {
    950                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000047   7403         MOV       A,#0x3
   \   000049   F0           MOVX      @DPTR,A
    951                prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   00004A   90....       MOV       DPTR,#prevDevState
   \   00004D   04           INC       A
   \                     ??ZDAppDetermineDeviceType_1:
   \   00004E   F0           MOVX      @DPTR,A
    952              }
    953            }
    954          }
   \   00004F   02....       LJMP      ??Subroutine60_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    955          
    956          /*********************************************************************
    957           * @fn      ZDApp_NetworkStartEvt()
    958           *
    959           * @brief   Process the Network Start Event
    960           *
    961           * @param   none
    962           *
    963           * @return  none
    964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    965          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    966          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    967            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV       DPTR,#nwkStatus
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7045         JNZ       ??ZDApp_NetworkStartEvt_0
    968            {
    969              // Successfully started a ZigBee network
    970              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6408         XRL       A,#0x8
   \   000010   7033         JNZ       ??ZDApp_NetworkStartEvt_1
    971              {
    972                //save NIB to NV before child joins if NV_RESTORE is defined
    973                ZDApp_NwkWriteNVRequest();
   \   000012                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000012   12....       LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
    974                ZDApp_ChangeState( DEV_ZB_COORD );
   \   000015                ; Setup parameters for call to function ZDApp_ChangeState
   \   000015   7909         MOV       R1,#0x9
   \   000017   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    975                
    976                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FORMATION)
   \   00001A   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   6405         XRL       A,#0x5
   \   000020   700A         JNZ       ??ZDApp_NetworkStartEvt_2
    977                {
    978                  bdb_nwkFormationAttempt(TRUE);
   \   000022                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   000022   7901         MOV       R1,#0x1
   \   000024   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
    979                  ZDApp_StoreNwkSecMaterial();
   \   000027                ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
   \   000027   12....       LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
   \   00002A   800C         SJMP      ??ZDApp_NetworkStartEvt_3
    980                }
    981                else if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION)
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6407         XRL       A,#0x7
   \   00002F   7007         JNZ       ??ZDApp_NetworkStartEvt_3
    982                {
    983                  bdb_reportCommissioningState(BDB_INITIALIZATION,TRUE);
   \   000031                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000031   7A01         MOV       R2,#0x1
   \   000033   7907         MOV       R1,#0x7
   \   000035   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    984                }
    985          
    986                if ( zgChildAgingEnable == TRUE )
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000038   90....       MOV       DPTR,#zgChildAgingEnable
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6401         XRL       A,#0x1
   \   00003E   7008         JNZ       ??CrossCallReturnLabel_134
    987                {
    988                  // Once the device has changed its state to a COORDINATOR set the timer to send
    989                  // Parent annce
    990                  ZDApp_SetParentAnnceTimer();
   \   000040                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000040   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   000043   8003         SJMP      ??CrossCallReturnLabel_134
    991                }
    992              }
    993              else
    994              {
    995                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000045                ; Setup parameters for call to function osal_set_event
   \   000045   12....       LCALL     ?Subroutine16 & 0xFFFF
    996              }
    997          
    998              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??CrossCallReturnLabel_134:
   \   000048                ; Setup parameters for call to function osal_pwrmgr_device
   \   000048   7900         MOV       R1,#0x0
   \   00004A   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   \   00004D   8030         SJMP      ??ZDApp_NetworkStartEvt_4
    999            }
   1000            else
   1001            {
   1002              // Try again with a higher energy threshold
   1003              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00004F                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00004F   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000052   E9           MOV       A,R1
   \   000053   7900         MOV       R1,#0x0
   \   000055   2410         ADD       A,#0x10
   \   000057   5001         JNC       ??ZDApp_NetworkStartEvt_5
   \   000059   09           INC       R1
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00005A   C3           CLR       C
   \   00005B   94FF         SUBB      A,#-0x1
   \   00005D   E9           MOV       A,R1
   \   00005E   9400         SUBB      A,#0x0
   \   000060   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000062   65D0         XRL       A,PSW
   \   000064   33           RLC       A
   \   000065   5013         JNC       ??ZDApp_NetworkStartEvt_6
   1004              {
   1005                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000067                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000067   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00006A   E9           MOV       A,R1
   \   00006B   F8           MOV       R0,A
   \   00006C                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   00006C   7410         MOV       A,#0x10
   \   00006E   29           ADD       A,R1
   \   00006F   F9           MOV       R1,A
   \   000070   12....       LCALL     `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
   1006                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000073                ; Setup parameters for call to function osal_set_event
   \   000073   7A01         MOV       R2,#0x1
   \   000075   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   1007              }
   \                     ??CrossCallReturnLabel_139:
   \   000078   8005         SJMP      ??ZDApp_NetworkStartEvt_4
   1008              else
   1009              {
   1010                bdb_nwkFormationAttempt(FALSE);
   \                     ??ZDApp_NetworkStartEvt_6:
   \   00007A                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   00007A   7900         MOV       R1,#0x0
   \   00007C   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
   1011              }
   1012            }
   1013          }
   \                     ??ZDApp_NetworkStartEvt_4:
   \   00007F   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   1014          
   1015          /*********************************************************************
   1016           * @fn      ZDApp_DeviceAuthEvt()
   1017           *
   1018           * @brief   Process the Device Authentic Event
   1019           *
   1020           * @param   none
   1021           *
   1022           * @return  none
   1023           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1024          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
   1025          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1026            // received authentication from trust center
   1027            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   7035         JNZ       ??ZDApp_DeviceAuthEvt_0
   1028            {
   1029              // Stop the reset timer so it doesn't reset
   1030              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL     `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
   1031          
   1032              ZDApp_ChangeState( DEV_END_DEVICE );
   \   00000F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00000F   12....       LCALL     ?Subroutine25 & 0xFFFF
   1033          
   1034              // Set the Power Manager Device
   1035          #if defined ( POWER_SAVING )
   1036              osal_pwrmgr_device( PWRMGR_BATTERY );
   1037          #endif
   1038          
   1039              if ( ZSTACK_ROUTER_BUILD )
   1040              {
   1041                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??CrossCallReturnLabel_128:
   \   000012   6009         JZ        ??ZDApp_DeviceAuthEvt_1
   1042                {
   1043                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1044                  NLME_StartRouterRequest( 0, 0, false );
   \   000014                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000014   7B00         MOV       R3,#0x0
   \   000016   7A00         MOV       R2,#0x0
   \   000018   7900         MOV       R1,#0x0
   \   00001A   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   1045                }
   1046              }
   1047          
   1048              // Notify to save info into NV
   1049              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   00001D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00001D   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1050          
   1051              // Save off the security
   1052              ZDApp_SaveNwkKey();
   \   000020                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000020   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
   1053          
   1054              ZDApp_AnnounceNewAddress();
   \   000023                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000023   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1055          
   1056              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1057                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1058                    && (zgChildAgingEnable == TRUE) ) )
   \   000026   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   A2E3         MOV       C,0xE0 /* A   */.3
   \   00002C   5008         JNC       ??ZDApp_DeviceAuthEvt_2
   \   00002E   90....       MOV       DPTR,#zgChildAgingEnable
   \   000031   E0           MOVX      A,@DPTR
   \   000032   6401         XRL       A,#0x1
   \   000034   700E         JNZ       ??ZDApp_DeviceAuthEvt_3
   1059              {
   1060                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   000036                ; Setup parameters for call to function NLME_SetPollRate
   \   000036   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000039   12....       LCALL     ?XLOAD_R2345
   \   00003C   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   00003F   8003         SJMP      ??ZDApp_DeviceAuthEvt_3
   1061              }
   1062            }
   1063            else
   1064            {
   1065              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000041                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000041   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1066            }
   1067          }
   \                     ??ZDApp_DeviceAuthEvt_3:
   \   000044   02....       LJMP      ??Subroutine60_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   7906         MOV       R1,#0x6
   \   000002   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   000005                REQUIRE ??Subroutine69_0
   \   000005                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX      A,@DPTR
   \   000004   5407         ANL       A,#0x7
   \   000006   6402         XRL       A,#0x2
   \   000008   22           RET
   1068          
   1069          /*********************************************************************
   1070           * @fn      ZDApp_SaveNetworkStateEvt()
   1071           *
   1072           * @brief   Process the Save the Network State Event
   1073           *
   1074           * @param   none
   1075           *
   1076           * @return  none
   1077           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1078          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
   1079          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1080          #if defined ( NV_RESTORE )
   1081           #if defined ( NV_TURN_OFF_RADIO )
   1082            // Turn off the radio's receiver during an NV update
   1083            uint8 RxOnIdle;
   1084            uint8 x = false;
   1085            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
   1086            ZMacSetReq( ZMacRxOnIdle, &x );
   1087           #endif
   1088          
   1089            // Update the Network State in NV
   1090            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
   1091                           NWK_NV_DEVICELIST_ENABLE |
   1092                           NWK_NV_BINDING_ENABLE    |
   1093                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV       R1,#0xf
   \   000006   12....       LCALL     `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
   1094          
   1095            // Reset the NV startup option to resume from NV by
   1096            // clearing the "New" join option.
   1097            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV       R2,#0x2
   \   00000B   7900         MOV       R1,#0x0
   \   00000D   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1098          
   1099           #if defined ( NV_TURN_OFF_RADIO )
   1100            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
   1101           #endif
   1102          #endif // NV_RESTORE
   1103          }
   \   000010   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   1104          
   1105          #if defined ( NV_RESTORE )
   1106          /*********************************************************************
   1107           * @fn      ZDApp_RestoreNetworkState()
   1108           *
   1109           * @brief   This function will restore the network state of the
   1110           *          device if the network state is stored in NV.
   1111           *
   1112           * @param   none
   1113           *
   1114           * @return
   1115           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
   1116           *          restored.
   1117           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
   1118           *          This could mean that zgStartupOption said to not restore, or
   1119           *          it could mean that there was no network state to restore.
   1120           *
   1121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1122          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
   1123          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1124            uint8 nvStat;
   1125          
   1126            // Initialize NWK NV items
   1127            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV       A,R1
   \   000009   FE           MOV       R6,A
   1128          
   1129            if ( nvStat == SUCCESS )
   \   00000A   7044         JNZ       ??ZDApp_RestoreNetworkState_0
   1130            {
   1131              if ( NLME_RestoreFromNV() )
   \   00000C                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000C   12....       LCALL     `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   00000F   E9           MOV       A,R1
   \   000010   6030         JZ        ??ZDApp_RestoreNetworkState_1
   1132              {
   1133                // Are we a coordinator
   1134                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000012                ; Setup parameters for call to function NLME_GetShortAddr
   \   000012   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000015   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000018   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   1135                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_151:
   \   00001B   F9           MOV       R1,A
   \   00001C   EA           MOV       A,R2
   \   00001D   49           ORL       A,R1
   \   00001E   7007         JNZ       ??ZDApp_RestoreNetworkState_2
   1136                {
   1137                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000020   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000023   E0           MOVX      A,@DPTR
   \   000024   54F8         ANL       A,#0xf8
   \   000026   F0           MOVX      @DPTR,A
   1138                }
   1139                if(ZG_DEVICE_ENDDEVICE_TYPE) 
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000027   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6402         XRL       A,#0x2
   \   00002D   90....       MOV       DPTR,#devStartMode
   \   000030   7009         JNZ       ??ZDApp_RestoreNetworkState_3
   1140                {
   1141                  devStartMode = MODE_REJOIN;
   \   000032   7403         MOV       A,#0x3
   \   000034   F0           MOVX      @DPTR,A
   1142                  _NIB.nwkState = NWK_INIT;
   \   000035   90....       MOV       DPTR,#_NIB + 35
   \   000038   E4           CLR       A
   \   000039   8002         SJMP      ??ZDApp_RestoreNetworkState_4
   1143                }
   1144                else
   1145                {
   1146                  devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   00003B   7401         MOV       A,#0x1
   1147                }
   1148                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1149              }
   \                     ??ZDApp_RestoreNetworkState_4:
   \   00003D   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000040   8002         SJMP      ??ZDApp_RestoreNetworkState_5
   1150              else
   1151                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000042   7E09         MOV       R6,#0x9
   1152          
   1153              if ( ZG_SECURE_ENABLED )
   1154              {
   1155                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_5:
   \   000044   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   000047   E4           CLR       A
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   F0           MOVX      @DPTR,A
   1156          
   1157                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1158                {
   1159                  ZDApp_RestoreNwkKey( TRUE );
   \   00004B                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00004B   7901         MOV       R1,#0x1
   \   00004D   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   1160                }
   1161              }
   1162          
   1163              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1164              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1165              // other than default.
   1166            }
   1167          
   1168            if ( nvStat == ZSUCCESS )
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000050   EE           MOV       A,R6
   \   000051   7004         JNZ       ??ZDApp_RestoreNetworkState_6
   1169              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   000053   7900         MOV       R1,#0x0
   \   000055   8002         SJMP      ??ZDApp_RestoreNetworkState_7
   1170            else
   1171              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_6:
   \   000057   7901         MOV       R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_7:
   \   000059   02....       LJMP      ??Subroutine47_0 & 0xFFFF
   1172          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
   1173          #endif // NV_RESTORE
   1174          
   1175          /*********************************************************************
   1176           * @fn      ZDApp_InitUserDesc()
   1177           *
   1178           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1179           *          when needed.  If you want to initialize the User descriptor to
   1180           *          something other than all zero, do it here.
   1181           *
   1182           * @param   none
   1183           *
   1184           * @return  none
   1185           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1186          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1187          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1188            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1189          
   1190            // Initialize the User Descriptor, the descriptor is read from NV
   1191            // when needed.  If you want to initialize the User descriptor to something
   1192            // other than all zero, do it here.
   1193            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV       R4,#0x11
   \   00000C   12....       LCALL     ?Subroutine30 & 0xFFFF
   1194            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1195                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_20:
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV       R4,#0x11
   \   000014   7D00         MOV       R5,#0x0
   \   000016   7A81         MOV       R2,#-0x7f
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001D   7402         MOV       A,#0x2
   \   00001F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000022   E9           MOV       A,R1
   \   000023   702F         JNZ       ??ZDApp_InitUserDesc_0
   1196            {
   1197              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1198                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV       ?V0,#0x11
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV       R4,#0x0
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7A81         MOV       R2,#-0x7f
   \   00003B   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   7010         JNZ       ??ZDApp_InitUserDesc_0
   1199              {
   1200                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   6007         JZ        ??ZDApp_InitUserDesc_0
   1201                {
   1202                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00004D   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000050   E0           MOVX      A,@DPTR
   \   000051   D2E4         SETB      0xE0 /* A   */.4
   \   000053   F0           MOVX      @DPTR,A
   1203                }
   1204              }
   1205            }
   1206          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000054   7411         MOV       A,#0x11
   \   000056   02....       LJMP      ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine53_0
   \   000002                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   7900         MOV       R1,#0x0
   \   000004   AA..         MOV       R2,?XSP + 0
   \   000006   AB..         MOV       R3,?XSP + 1
   \   000008   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   00000B                ; Setup parameters for call to function osal_nv_item_init
   \   00000B                ; Setup parameters for call to function osal_nv_write
   \   00000B                ; Setup parameters for call to function osal_memcmp
   \   00000B   A8..         MOV       R0,?XSP + 0
   \   00000D   A9..         MOV       R1,?XSP + 1
   \   00000F   88..         MOV       ?V0,R0
   \   000011   89..         MOV       ?V1,R1
   \   000013   22           RET
   1207          
   1208          /*********************************************************************
   1209           * @fn      ZDAppCheckForHoldKey()
   1210           *
   1211           * @brief   Check for key to set the device into Hold Auto Start
   1212           *
   1213           * @param   none
   1214           *
   1215           * @return  none
   1216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1217          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1218          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1219          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1220          
   1221            // Get Keypad directly to see if a HOLD is needed
   1222            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV       A,R1
   \   000008   90....       MOV       DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX      @DPTR,A
   1223          
   1224            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1225            // while booting to avoid starting up the device.
   1226            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   6401         XRL       A,#0x1
   \   00000E   7005         JNZ       ??ZDAppCheckForHoldKey_0
   1227            {
   1228              // Change the device state to HOLD on start up
   1229              devState = DEV_HOLD;
   \   000010   90....       MOV       DPTR,#devState
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   1230            }
   1231          #endif // HAL_KEY
   1232          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000015   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   1233          
   1234          /*********************************************************************
   1235           * @fn      ZDApp_ProcessOSALMsg()
   1236           *
   1237           * @brief   Process the incoming task message.
   1238           *
   1239           * @param   msgPtr - message to process
   1240           *
   1241           * @return  none
   1242           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1243          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1244          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1245            // Data Confirmation message fields
   1246            uint8 sentEP;       // This should always be 0
   1247            uint8 sentStatus;
   1248            afDataConfirm_t *afDataConfirm;
   1249          
   1250          
   1251            switch ( msgPtr->event )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   14           DEC       A
   \   00000A   602E         JZ        ??ZDApp_ProcessOSALMsg_0
   \   00000C   14           DEC       A
   \   00000D   602B         JZ        ??ZDApp_ProcessOSALMsg_0
   \   00000F   24E8         ADD       A,#-0x18
   \   000011   600A         JZ        ??ZDApp_ProcessOSALMsg_1
   \   000013   2447         ADD       A,#0x47
   \   000015   600B         JZ        ??ZDApp_ProcessOSALMsg_2
   \   000017   24D6         ADD       A,#-0x2a
   \   000019   600C         JZ        ??ZDApp_ProcessOSALMsg_3
   \   00001B   801A         SJMP      ??ZDApp_ProcessOSALMsg_4
   1252            {
   1253              // Incoming ZDO Message
   1254              case AF_INCOMING_MSG_CMD:
   1255                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   00001D                ; Setup parameters for call to function ZDP_IncomingData
   \   00001D   12....       LCALL     `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1256                break;
   \   000020   8018         SJMP      ??ZDApp_ProcessOSALMsg_0
   1257          
   1258              case ZDO_CB_MSG:
   1259                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000022                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000022   12....       LCALL     `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1260                break;
   \   000025   8013         SJMP      ??ZDApp_ProcessOSALMsg_0
   1261          
   1262              case AF_DATA_CONFIRM_CMD:
   1263                // This message is received as a confirmation of a data packet sent.
   1264                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1265                // The message fields are defined in AF.h
   1266                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1267                sentEP = afDataConfirm->endpoint;
   1268                sentStatus = afDataConfirm->hdr.status;
   1269          
   1270                // Action taken when confirmation is received.
   1271          #if defined ( ZIGBEE_FREQ_AGILITY )
   1272                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000027   90....       MOV       DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00002A   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00002D   600B         JZ        ??ZDApp_ProcessOSALMsg_0
   1273                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   00002F                ; Setup parameters for indirect call
   \   00002F   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000032   12....       LCALL     ?CALL_IND
   \   000035   8003         SJMP      ??ZDApp_ProcessOSALMsg_0
   1274          #endif
   1275                (void)sentEP;
   1276                (void)sentStatus;
   1277                break;
   1278          
   1279              case ZDO_NWK_DISC_CNF:
   1280                if (devState != DEV_NWK_DISC)
   1281                {
   1282                  break;
   1283                }
   1284                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1285                {
   1286                  //Rejoin or resume
   1287                  if(bdb_isDeviceNonFactoryNew()) 
   1288                  {
   1289                    if(bdb_rejoinNwk() == ZSuccess)
   1290                    {
   1291                      return;
   1292                    }
   1293          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1294                    else
   1295                    {
   1296                      if(ZG_DEVICE_ENDDEVICE_TYPE)
   1297                      {
   1298                        bdb_parentLost();
   1299                        return;
   1300                      }
   1301                    }
   1302          #endif
   1303                  }
   1304                  
   1305                  if(nwk_getNwkDescList())
   1306                  {
   1307                    bdb_nwkDiscoveryAttempt(TRUE);
   1308                  }
   1309                  else
   1310                  {
   1311                    bdb_nwkDiscoveryAttempt(FALSE);
   1312                  }
   1313                }
   1314              break;
   1315          
   1316              case ZDO_NWK_JOIN_IND:
   1317                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1318                {
   1319                  if((bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION) || (bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST))
   1320                  {
   1321                    if(nwkStatus == ZSuccess)
   1322                    {
   1323                      bdb_reportCommissioningState(bdbCommissioningProcedureState.bdbCommissioningState,TRUE);
   1324                    }
   1325                  }
   1326                  ZDApp_ProcessNetworkJoin();
   1327                }
   1328                break;
   1329          
   1330              default:
   1331                if ( ZG_SECURE_ENABLED )
   1332                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000037                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   000037   12....       LCALL     `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1333                break;
   1334            }
   1335          
   1336          }
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00003A   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   1337          
   1338          /*********************************************************************
   1339           * @fn      ZDApp_ProcessMsgCBs()
   1340           *
   1341           * @brief   Process response messages
   1342           *
   1343           * @param   none
   1344           *
   1345           * @return  none
   1346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1347          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1348          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV       A,#-0x2c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1349            switch ( inMsg->clusterID )
   \   00000E   EA           MOV       A,R2
   \   00000F   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000012   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000015   8A..         MOV       ?V0,R2
   \   000017   F5..         MOV       ?V1,A
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   00001E   0300         DW        3
   \   000020   2100         DW        33
   \   000022   2200         DW        34
   \   000024   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000026   0080         DW        32768
   \   000028   0180         DW        32769
   \   00002A   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   00002C   2180         DW        32801
   \   00002E   2280         DW        32802
   \   000030   ....         DW        ??ZDApp_ProcessMsgCBs_2
   \   000032   0100         DW        1
   \   000034   2000         DW        32
   \   000036   ....         DW        ??ZDApp_ProcessMsgCBs_3
   \   000038   ....         DW        ??ZDApp_ProcessMsgCBs_4
   1350            {
   1351          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1352              case NWK_addr_rsp:
   1353              case IEEE_addr_rsp:
   1354                {
   1355                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1356          
   1357                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000041   8A..         MOV       ?V0,R2
   \   000043   8B..         MOV       ?V1,R3
   \   000045   AF..         MOV       R7,?V1
   1358                  if ( pAddrRsp )
   \   000047   EA           MOV       A,R2
   \   000048   4F           ORL       A,R7
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1359                  {
   1360                    if ( pAddrRsp->status == ZSuccess )
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   E0           MOVX      A,@DPTR
   \   000053   700E         JNZ       ??ZDApp_ProcessMsgCBs_5
   1361                    {
   1362                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000055                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000055   EA           MOV       A,R2
   \   000056   2403         ADD       A,#0x3
   \   000058   FC           MOV       R4,A
   \   000059   E4           CLR       A
   \   00005A   3F           ADDC      A,R7
   \   00005B   FD           MOV       R5,A
   \   00005C   A3           INC       DPTR
   \   00005D   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1363                    }
   \                     ??CrossCallReturnLabel_101:
   \   000060   12....       LCALL     `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1364          
   1365          #if defined ( ZDP_BIND_VALIDATION )
   1366                    // look for pending bind entry for NWK_addr_rsp Only
   1367                    if ( inMsg->clusterID == NWK_addr_rsp )
   1368                    {
   1369          #if defined ( REFLECTOR )
   1370                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   1371          #endif
   1372                    }
   1373          #endif
   1374          
   1375                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000063                ; Setup parameters for call to function osal_mem_free
   \   000063   AA..         MOV       R2,?V0
   \   000065   EF           MOV       A,R7
   \   000066   8075         SJMP      ??ZDApp_ProcessMsgCBs_6
   1376                  }
   1377                }
   1378                break;
   1379          #endif
   1380          
   1381          #if defined ( REFLECTOR )
   1382              case Bind_req:
   1383              case Unbind_req:
   1384                {
   1385                  ZDO_BindUnbindReq_t bindReq;
   1386                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000068                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000068   7417         MOV       A,#0x17
   \   00006A   12....       LCALL     ?XSTACK_DISP102_8
   \   00006D   EE           MOV       A,R6
   \   00006E   FA           MOV       R2,A
   \   00006F   EF           MOV       A,R7
   \   000070   FB           MOV       R3,A
   \   000071   12....       LCALL     `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1387                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000074                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000074   7417         MOV       A,#0x17
   \   000076   12....       LCALL     ?XSTACK_DISP102_8
   \   000079   EE           MOV       A,R6
   \   00007A   FA           MOV       R2,A
   \   00007B   EF           MOV       A,R7
   \   00007C   FB           MOV       R3,A
   \   00007D   12....       LCALL     `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1388                }
   1389                break;
   \   000080   805F         SJMP      ??ZDApp_ProcessMsgCBs_4
   1390          #endif
   1391          
   1392          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1393              case Bind_rsp:
   1394              case Unbind_rsp:
   1395                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000082   90....       MOV       DPTR,#matchED
   \   000085   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000088   6057         JZ        ??ZDApp_ProcessMsgCBs_4
   1396                {
   1397                  ZDMatchSendState(
   1398                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1399                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   \   00008A   7421         MOV       A,#0x21
   \   00008C   6A           XRL       A,R2
   \   00008D   7003         JNZ       ??ZDApp_ProcessMsgCBs_7
   \   00008F   7480         MOV       A,#-0x80
   \   000091   6B           XRL       A,R3
   \                     ??ZDApp_ProcessMsgCBs_7:
   \   000092   7004         JNZ       ??ZDApp_ProcessMsgCBs_8
   \   000094   7903         MOV       R1,#0x3
   \   000096   8002         SJMP      ??ZDApp_ProcessMsgCBs_9
   \                     ??ZDApp_ProcessMsgCBs_8:
   \   000098   7902         MOV       R1,#0x2
   \                     ??ZDApp_ProcessMsgCBs_9:
   \   00009A                ; Setup parameters for call to function ZDMatchSendState
   \   00009A   12....       LCALL     ?Subroutine35 & 0xFFFF
   1400                }
   \                     ??CrossCallReturnLabel_24:
   \   00009D   FB           MOV       R3,A
   \   00009E   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000A1   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000A4   FA           MOV       R2,A
   \   0000A5   12....       LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   0000A8   8037         SJMP      ??ZDApp_ProcessMsgCBs_4
   1401                break;
   1402          
   1403              case End_Device_Bind_req:
   1404          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   1405                if (ZG_DEVICE_COORDINATOR_TYPE)
   1406                {
   1407                  ZDEndDeviceBind_t bindReq;
   1408                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   0000AA                ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
   \   0000AA   AC..         MOV       R4,?XSP + 0
   \   0000AC   AD..         MOV       R5,?XSP + 1
   \   0000AE   EE           MOV       A,R6
   \   0000AF   FA           MOV       R2,A
   \   0000B0   EF           MOV       A,R7
   \   0000B1   FB           MOV       R3,A
   \   0000B2   12....       LCALL     `??ZDO_ParseEndDeviceBindReq::?relay`; Banked call to: ZDO_ParseEndDeviceBindReq
   1409                  ZDO_MatchEndDeviceBind( &bindReq );
   \   0000B5                ; Setup parameters for call to function ZDO_MatchEndDeviceBind
   \   0000B5   AA..         MOV       R2,?XSP + 0
   \   0000B7   AB..         MOV       R3,?XSP + 1
   \   0000B9   12....       LCALL     `??ZDO_MatchEndDeviceBind::?relay`; Banked call to: ZDO_MatchEndDeviceBind
   1410          
   1411                  // Freeing the cluster lists - if allocated.
   1412                  if ( bindReq.numInClusters )
   \   0000BC   7411         MOV       A,#0x11
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   6008         JZ        ??CrossCallReturnLabel_36
   1413                    osal_mem_free( bindReq.inClusters );
   \   0000C4                ; Setup parameters for call to function osal_mem_free
   \   0000C4   7412         MOV       A,#0x12
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   1414                  if ( bindReq.numOutClusters )
   \                     ??CrossCallReturnLabel_36:
   \   0000CC   7414         MOV       A,#0x14
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   600D         JZ        ??ZDApp_ProcessMsgCBs_4
   1415                    osal_mem_free( bindReq.outClusters );
   \   0000D4                ; Setup parameters for call to function osal_mem_free
   \   0000D4   7415         MOV       A,#0x15
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   FA           MOV       R2,A
   \   0000DB   A3           INC       DPTR
   \   0000DC   E0           MOVX      A,@DPTR
   \                     ??ZDApp_ProcessMsgCBs_6:
   \   0000DD   FB           MOV       R3,A
   \   0000DE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1416                }
   1417          #endif
   1418                break;
   1419          #endif
   1420            }
   1421          }
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   0000E1   742C         MOV       A,#0x2c
   \   0000E3   02....       LJMP      ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   EE           MOV       A,R6
   \   000001   2413         ADD       A,#0x13
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   240C         ADD       A,#0xc
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   EE           MOV       A,R6
   \   000001   240F         ADD       A,#0xf
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET
   1422          
   1423          /*********************************************************************
   1424           * @fn      ZDApp_RegisterCBs()
   1425           *
   1426           * @brief   Process response messages
   1427           *
   1428           * @param   none
   1429           *
   1430           * @return  none
   1431           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1432          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1433          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1434          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1435            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV       R2,#0x1
   \   000006   12....       LCALL     ?Subroutine18 & 0xFFFF
   1436          #endif
   1437          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1438            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_49:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   12....       LCALL     ?Subroutine18 & 0xFFFF
   1439          #endif
   1440          #if ZG_BUILD_COORDINATOR_TYPE
   1441            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   \                     ??CrossCallReturnLabel_50:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV       R2,#0x21
   \   000010   12....       LCALL     ?Subroutine18 & 0xFFFF
   1442            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   \                     ??CrossCallReturnLabel_51:
   \   000013                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000013   7A22         MOV       R2,#0x22
   \   000015   12....       LCALL     ?Subroutine18 & 0xFFFF
   1443          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   1444            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   \                     ??CrossCallReturnLabel_52:
   \   000018                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000018   7A20         MOV       R2,#0x20
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   1445          #endif
   1446          #endif
   1447          #if defined ( REFLECTOR )
   1448            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_53:
   \   00001F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001F   7A21         MOV       R2,#0x21
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   1449            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_54:
   \   000026                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000026   7A22         MOV       R2,#0x22
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   1450          #endif
   1451          }
   \                     ??CrossCallReturnLabel_55:
   \   00002D   02....       LJMP      ??Subroutine60_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7B80         MOV       R3,#-0x80
   \   000002                REQUIRE ??Subroutine48_0
   \   000002                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000008   22           RET
   1452          
   1453          /*********************************************************************
   1454           * @fn      ZDApp_ProcessSecMsg()
   1455           *
   1456           * @brief   Process the incoming security message.
   1457           *
   1458           * @param   msgPtr - message to process
   1459           *
   1460           * @return  none
   1461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1462          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1463          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1464            switch ( msgPtr->event )
   \   00000E   8A82         MOV       DPL,R2
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   24FB         ADD       A,#-0x5
   \   000015   6011         JZ        ??ZDApp_ProcessSecMsg_0
   \   000017   24FE         ADD       A,#-0x2
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??ZDApp_ProcessSecMsg_1 & 0xFFFF
   \   00001E   24FE         ADD       A,#-0x2
   \   000020   7003         JNZ       $+5
   \   000022   02....       LJMP      ??ZDApp_ProcessSecMsg_2 & 0xFFFF
   \   000025   02....       LJMP      ??ZDApp_ProcessSecMsg_3 & 0xFFFF
   1465            {
   1466              case ZDO_TRANSPORT_KEY_IND:
   1467                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1468                {
   1469                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   1470                }
   1471                break;
   1472          
   1473              case ZDO_UPDATE_DEVICE_IND:
   1474                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1475                {
   1476                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000028                ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
   \   000028   12....       LCALL     `??ZDSecMgrUpdateDeviceInd::?relay`; Banked call to: ZDSecMgrUpdateDeviceInd
   1477                  
   1478                  // Look at GP proxy table for posible conflict with GPD alias NwkAddr
   1479          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   1480                  ZDO_DeviceAnnce_t devAnnce;
   1481                  uint32 timeout;
   1482                  uint8 invalidAddr;
   1483                  uint8 sameAnnce;
   1484                  uint8 invalidIEEE[Z_EXTADDR_LEN] = {0xFF};
   \   00002B   90....       MOV       DPTR,#`?<Constant {255, 0, 0, 0, 0, 0, 0, 0}>`
   \   00002E   740B         MOV       A,#0xb
   \   000030   12....       LCALL     ?XSTACK_DISP102_8
   \   000033   7408         MOV       A,#0x8
   \   000035   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1485                  
   1486                  osal_memcpy( devAnnce.extAddr, ((ZDO_UpdateDeviceInd_t*)msgPtr)->devExtAddr, Z_EXTADDR_LEN );
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   EE           MOV       A,R6
   \   000039   2404         ADD       A,#0x4
   \   00003B   F5..         MOV       ?V0,A
   \   00003D   E4           CLR       A
   \   00003E   3F           ADDC      A,R7
   \   00003F   F5..         MOV       ?V1,A
   \   000041   75..00       MOV       ?V2,#0x0
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000049   7C08         MOV       R4,#0x8
   \   00004B   7D00         MOV       R5,#0x0
   \   00004D   7405         MOV       A,#0x5
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   1487                  devAnnce.nwkAddr = ((ZDO_UpdateDeviceInd_t*)msgPtr)->devAddr;
   \   000058   EE           MOV       A,R6
   \   000059   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   E8           MOV       A,R0
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   E9           MOV       A,R1
   \   000066   F0           MOVX      @DPTR,A
   1488                  
   1489                  timeout = osal_get_timeoutEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
   \   000067                ; Setup parameters for call to function osal_get_timeoutEx
   \   000067   7A10         MOV       R2,#0x10
   \   000069   7B00         MOV       R3,#0x0
   \   00006B   90....       MOV       DPTR,#gp_TaskID
   \   00006E   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000071   8C..         MOV       ?V6,R4
   \   000073   8D..         MOV       ?V7,R5
   1490                  invalidAddr = osal_memcmp( devAnnce.extAddr, invalidIEEE, Z_EXTADDR_LEN );
   \   000075                ; Setup parameters for call to function osal_memcmp
   \   000075   740B         MOV       A,#0xb
   \   000077   12....       LCALL     ?XSTACK_DISP100_8
   \   00007A   88..         MOV       ?V0,R0
   \   00007C   89..         MOV       ?V1,R1
   \   00007E   78..         MOV       R0,#?V0
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000083   7C08         MOV       R4,#0x8
   \   000085   7D00         MOV       R5,#0x0
   \   000087   7405         MOV       A,#0x5
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00008F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000092   E9           MOV       A,R1
   \   000093   FE           MOV       R6,A
   1491                  sameAnnce = osal_memcmp( &devAnnce, &GP_aliasConflictAnnce, sizeof( ZDO_DeviceAnnce_t ) );
   \   000094                ; Setup parameters for call to function osal_memcmp
   \   000094   75....       MOV       ?V0,#GP_aliasConflictAnnce & 0xff
   \   000097   75....       MOV       ?V1,#(GP_aliasConflictAnnce >> 8) & 0xff
   \   00009A   78..         MOV       R0,#?V0
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009F   7C0B         MOV       R4,#0xb
   \   0000A1   7D00         MOV       R5,#0x0
   \   0000A3   7403         MOV       A,#0x3
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV       A,R1
   \   0000AF   F8           MOV       R0,A
   1492                  
   1493                  // Check GP proxy table to update the entry if necesary
   1494                  if( timeout && ( invalidAddr && sameAnnce ) )
   \   0000B0   E5..         MOV       A,?V4
   \   0000B2   45..         ORL       A,?V5
   \   0000B4   45..         ORL       A,?V6
   \   0000B6   45..         ORL       A,?V7
   \   0000B8   6012         JZ        ??ZDApp_ProcessSecMsg_4
   \   0000BA   EE           MOV       A,R6
   \   0000BB   600F         JZ        ??ZDApp_ProcessSecMsg_4
   \   0000BD   E9           MOV       A,R1
   \   0000BE   600C         JZ        ??ZDApp_ProcessSecMsg_4
   1495                  {
   1496                    osal_stop_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
   \   0000C0                ; Setup parameters for call to function osal_stop_timerEx
   \   0000C0   7A10         MOV       R2,#0x10
   \   0000C2   7B00         MOV       R3,#0x0
   \   0000C4   90....       MOV       DPTR,#gp_TaskID
   \   0000C7   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   1497                  }
   \                     ??CrossCallReturnLabel_89:
   \   0000CA   8049         SJMP      ??ZDApp_ProcessSecMsg_3
   1498                  else if(GP_CheckAnnouncedDeviceGCB != NULL)
   \                     ??ZDApp_ProcessSecMsg_4:
   \   0000CC   90....       MOV       DPTR,#GP_CheckAnnouncedDeviceGCB
   \   0000CF   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0000D2   6041         JZ        ??ZDApp_ProcessSecMsg_3
   1499                  {
   1500                    GP_CheckAnnouncedDeviceGCB( devAnnce.extAddr, devAnnce.nwkAddr );       
   \   0000D4                ; Setup parameters for indirect call
   \   0000D4   85..82       MOV       DPL,?XSP + 0
   \   0000D7   85..83       MOV       DPH,?XSP + 1
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   FC           MOV       R4,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   FD           MOV       R5,A
   \   0000DF   7402         MOV       A,#0x2
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   AA82         MOV       R2,DPL
   \   0000E6   AB83         MOV       R3,DPH
   \   0000E8   90....       MOV       DPTR,#GP_CheckAnnouncedDeviceGCB + 1
   \   0000EB   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   1501                  }
   1502          #endif
   1503                }
   \                     ??CrossCallReturnLabel_147:
   \   0000EE   12....       LCALL     ?CALL_IND
   \   0000F1   8022         SJMP      ??ZDApp_ProcessSecMsg_3
   1504                break;
   1505          
   1506              case ZDO_REMOVE_DEVICE_IND:
   1507                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1508                {
   1509                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1510                }
   1511                break;
   1512          
   1513              case ZDO_REQUEST_KEY_IND:
   1514                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1515                {
   1516                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1517                  {
   1518                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_1:
   \   0000F3                ; Setup parameters for call to function ZDSecMgrRequestKeyInd
   \   0000F3   12....       LCALL     `??ZDSecMgrRequestKeyInd::?relay`; Banked call to: ZDSecMgrRequestKeyInd
   1519                  }
   1520                }
   1521                break;
   \   0000F6   801D         SJMP      ??ZDApp_ProcessSecMsg_3
   1522              case ZDO_VERIFY_KEY_IND:
   1523          #if (ZG_BUILD_COORDINATOR_TYPE)
   1524                if(ZG_DEVICE_COORDINATOR_TYPE)
   1525                {
   1526                  if( ((ZDO_VerifyKeyInd_t*)msgPtr)->verifyKeyStatus == ZSuccess)
   \                     ??ZDApp_ProcessSecMsg_2:
   \   0000F8   EA           MOV       A,R2
   \   0000F9   241D         ADD       A,#0x1d
   \   0000FB   F582         MOV       DPL,A
   \   0000FD   E4           CLR       A
   \   0000FE   3F           ADDC      A,R7
   \   0000FF   F583         MOV       DPH,A
   \   000101   E0           MOVX      A,@DPTR
   \   000102   700A         JNZ       ??ZDApp_ProcessSecMsg_5
   1527                  {
   1528                    bdb_TCjoiningDeviceComplete( ((ZDO_VerifyKeyInd_t*)msgPtr)->extAddr );
   \   000104                ; Setup parameters for call to function bdb_TCjoiningDeviceComplete
   \   000104   EA           MOV       A,R2
   \   000105   2405         ADD       A,#0x5
   \   000107   FA           MOV       R2,A
   \   000108   E4           CLR       A
   \   000109   3F           ADDC      A,R7
   \   00010A   FB           MOV       R3,A
   \   00010B   12....       LCALL     `??bdb_TCjoiningDeviceComplete::?relay`; Banked call to: bdb_TCjoiningDeviceComplete
   1529                  }
   1530                }
   1531            
   1532                ZDSecMgrVerifyKeyInd( (ZDO_VerifyKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_5:
   \   00010E                ; Setup parameters for call to function ZDSecMgrVerifyKeyInd
   \   00010E   EE           MOV       A,R6
   \   00010F   FA           MOV       R2,A
   \   000110   EF           MOV       A,R7
   \   000111   FB           MOV       R3,A
   \   000112   12....       LCALL     `??ZDSecMgrVerifyKeyInd::?relay`; Banked call to: ZDSecMgrVerifyKeyInd
   1533          #endif
   1534                break;
   1535          
   1536              case ZDO_SWITCH_KEY_IND:
   1537                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1538                {
   1539                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   1540                }
   1541                break;
   1542          
   1543              default:
   1544                // Unsupported messages
   1545                break;
   1546            }
   1547          }
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000115   7413         MOV       A,#0x13
   \   000117   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine49_0
   \   000004                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   A982         MOV       R1,DPL
   \   000002   AA83         MOV       R2,DPH
   \   000004                REQUIRE ??Subroutine54_0
   \   000004                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine55_0
   \   000002                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003                REQUIRE ??Subroutine64_0
   \   000003                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   22           RET
   1548          
   1549          /*********************************************************************
   1550           * @fn      ZDApp_ProcessNetworkJoin()
   1551           *
   1552           * @brief
   1553           *
   1554           *   Save off the Network key information.
   1555           *
   1556           * @param   none
   1557           *
   1558           * @return  none
   1559           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1560          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1561          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1562            if ( (devState == DEV_NWK_JOINING) ||
   1563                ((devState == DEV_NWK_ORPHAN)  &&
   1564                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   000005   90....       MOV       DPTR,#devState
   \   000008   E0           MOVX      A,@DPTR
   \   000009   6403         XRL       A,#0x3
   \   00000B   600F         JZ        ??ZDApp_ProcessNetworkJoin_0
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   640A         XRL       A,#0xa
   \   000010   7071         JNZ       ??ZDApp_ProcessNetworkJoin_1
   \   000012   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000015   E0           MOVX      A,@DPTR
   \   000016   5407         ANL       A,#0x7
   \   000018   6401         XRL       A,#0x1
   \   00001A   707E         JNZ       ??ZDApp_ProcessNetworkJoin_2
   1565            {
   1566              // Result of a Join attempt by this device.
   1567              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   00001C   90....       MOV       DPTR,#nwkStatus
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   7059         JNZ       ??ZDApp_ProcessNetworkJoin_3
   1568              {
   1569                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000022                ; Setup parameters for call to function osal_set_event
   \   000022   12....       LCALL     ?Subroutine16 & 0xFFFF
   1570          
   1571          #if defined ( POWER_SAVING )
   1572                osal_pwrmgr_device( PWRMGR_BATTERY );
   1573          #endif
   1574          
   1575                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \                     ??CrossCallReturnLabel_135:
   \   000025                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000025   7901         MOV       R1,#0x1
   \   000027   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00002A   E9           MOV       A,R1
   \   00002B   7009         JNZ       ??ZDApp_ProcessNetworkJoin_4
   1576                {
   1577                  if ( ZSTACK_END_DEVICE_BUILD )
   1578                  {
   1579                    NLME_SetPollRate( zgRejoinPollRate );
   1580                  }
   1581                  // wait for auth from trust center
   1582                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \   00002D                ; Setup parameters for call to function ZDApp_ChangeState
   \   00002D   7905         MOV       R1,#0x5
   \   00002F   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1583                  
   1584                  bdb_nwkAssocAttemt(TRUE);
   \   000032                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   000032   7901         MOV       R1,#0x1
   \   000034   8047         SJMP      ??ZDApp_ProcessNetworkJoin_5
   1585                }
   1586                else
   1587                {
   1588                  if ( ZSTACK_ROUTER_BUILD )
   1589                  {
   1590                    if ( devState == DEV_NWK_ORPHAN
   1591                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000036   90....       MOV       DPTR,#devState
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   640A         XRL       A,#0xa
   \   00003C   700D         JNZ       ??ZDApp_ProcessNetworkJoin_6
   \   00003E   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000041   6024         JZ        ??ZDApp_ProcessNetworkJoin_7
   1592                    {
   1593                      // Change NIB state to router for restore
   1594                      _NIB.nwkState = NWK_ROUTER;
   \   000043   90....       MOV       DPTR,#_NIB + 35
   \   000046   7408         MOV       A,#0x8
   \   000048   F0           MOVX      @DPTR,A
   \   000049   801C         SJMP      ??ZDApp_ProcessNetworkJoin_7
   1595                    }
   1596                  }
   1597          
   1598                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   6403         XRL       A,#0x3
   \   00004E   7017         JNZ       ??ZDApp_ProcessNetworkJoin_7
   1599                  {
   1600                    ZDApp_AnnounceNewAddress();
   \   000050                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000050   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1601                    if( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
   \   000053   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000056   E0           MOVX      A,@DPTR
   \   000057   6402         XRL       A,#0x2
   \   000059   700C         JNZ       ??ZDApp_ProcessNetworkJoin_7
   1602                    {
   1603                      bdb_setNodeIsOnANetwork(TRUE);
   \   00005B                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   00005B   7901         MOV       R1,#0x1
   \   00005D   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1604                      bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
   \   000060                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000060   7A01         MOV       R2,#0x1
   \   000062   7902         MOV       R1,#0x2
   \   000064   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1605                    }
   1606                  }
   1607          
   1608                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   000067                ; Setup parameters for call to function ZDApp_ChangeState
   \   000067   12....       LCALL     ?Subroutine25 & 0xFFFF
   1609          
   1610                  if ( ZSTACK_ROUTER_BUILD )
   1611                  {
   1612                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1613                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??CrossCallReturnLabel_129:
   \   00006A   7003         JNZ       $+5
   \   00006C   02....       LJMP      ??CrossCallReturnLabel_136 & 0xFFFF
   1614                    {
   1615                      NLME_StartRouterRequest( 0, 0, false );
   \   00006F                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00006F   7B00         MOV       R3,#0x0
   \   000071   7A00         MOV       R2,#0x0
   \   000073   7900         MOV       R1,#0x0
   \   000075   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   000078   02....       LJMP      ??CrossCallReturnLabel_136 & 0xFFFF
   1616                    }
   1617                  }
   1618                }
   1619              }
   1620              else
   1621              {
   1622          
   1623                bdb_nwkAssocAttemt(FALSE);
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   00007B                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   00007B   7900         MOV       R1,#0x0
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00007D   12....       LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   \   000080   02....       LJMP      ??CrossCallReturnLabel_136 & 0xFFFF
   1624              }
   1625            }
   1626            else if ( devState == DEV_NWK_ORPHAN ||
   1627                      devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
   1628                      devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
   1629                      devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
   1630                      devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   000083   E0           MOVX      A,@DPTR
   \   000084   6404         XRL       A,#0x4
   \   000086   6012         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   000088   E0           MOVX      A,@DPTR
   \   000089   640E         XRL       A,#0xe
   \   00008B   600D         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   640F         XRL       A,#0xf
   \   000090   6008         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   000092   E0           MOVX      A,@DPTR
   \   000093   640D         XRL       A,#0xd
   \   000095   6003         JZ        $+5
   \   000097   02....       LJMP      ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
   1631            {
   1632              // results of an orphaning attempt by this device
   1633              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   00009A   90....       MOV       DPTR,#nwkStatus
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   7060         JNZ       ??ZDApp_ProcessNetworkJoin_9
   1634              {
   1635                //When the device has successfully rejoined then reset retryCnt
   1636                retryCnt = 0;
   \   0000A0   90....       MOV       DPTR,#retryCnt
   \   0000A3   E4           CLR       A
   \   0000A4   F0           MOVX      @DPTR,A
   1637          
   1638                // Verify NWK key is available before sending Device_annce
   1639                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   0000A5                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0000A5   7901         MOV       R1,#0x1
   \   0000A7   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0000AA   E9           MOV       A,R1
   \   0000AB   700F         JNZ       ??ZDApp_ProcessNetworkJoin_10
   1640                {
   1641                  if ( ZSTACK_END_DEVICE_BUILD )
   1642                  {
   1643                    NLME_SetPollRate( zgRejoinPollRate );
   1644                  }
   1645                  // wait for auth from trust center
   1646                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \   0000AD                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000AD   7905         MOV       R1,#0x5
   \   0000AF   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1647          
   1648                  // Start the reset timer for MAX UNAUTH time
   1649                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   0000B2                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   0000B2   7A10         MOV       R2,#0x10
   \   0000B4   7B27         MOV       R3,#0x27
   \   0000B6   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   0000B9   02....       LJMP      ??CrossCallReturnLabel_136 & 0xFFFF
   1650                }
   1651                else
   1652                {
   1653                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000BC                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000BC   7906         MOV       R1,#0x6
   \   0000BE   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1654          
   1655                  osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
   \   0000C1                ; Setup parameters for call to function osal_stop_timerEx
   \   0000C1   7A00         MOV       R2,#0x0
   \   0000C3   7B20         MOV       R3,#0x20
   \   0000C5   12....       LCALL     ?Subroutine24 & 0xFFFF
   1656          
   1657                  // setup Power Manager Device
   1658          #if defined ( POWER_SAVING )
   1659                  osal_pwrmgr_device( PWRMGR_BATTERY );
   1660          #endif
   1661          
   1662                  // The receiver is on, turn network layer polling off.
   1663                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_87:
   \   0000C8   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000CE   501D         JNC       ??ZDApp_ProcessNetworkJoin_11
   1664                  {
   1665                    // if Child Table Management process is not enabled
   1666                    if ( zgChildAgingEnable == FALSE )
   \   0000D0   90....       MOV       DPTR,#zgChildAgingEnable
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   7017         JNZ       ??ZDApp_ProcessNetworkJoin_11
   1667                    {
   1668                      NLME_SetPollRate( 0 );
   \   0000D6                ; Setup parameters for call to function NLME_SetPollRate
   \   0000D6   90....       MOV       DPTR,#__Constant_0
   \   0000D9   12....       LCALL     ?XLOAD_R2345
   \   0000DC   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1669                      NLME_SetQueuedPollRate( 0 );
   \   0000DF                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0000DF   7A00         MOV       R2,#0x0
   \   0000E1   7B00         MOV       R3,#0x0
   \   0000E3   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1670                      NLME_SetResponseRate( 0 );
   \   0000E6                ; Setup parameters for call to function NLME_SetResponseRate
   \   0000E6   7A00         MOV       R2,#0x0
   \   0000E8   7B00         MOV       R3,#0x0
   \   0000EA   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1671                    }
   1672                  }
   1673          
   1674                  if ( ZSTACK_ROUTER_BUILD )
   1675                  {
   1676                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1677                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000ED   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0000F0   6009         JZ        ??ZDApp_ProcessNetworkJoin_12
   1678                    {
   1679                      NLME_StartRouterRequest( 0, 0, false );
   \   0000F2                ; Setup parameters for call to function NLME_StartRouterRequest
   \   0000F2   7B00         MOV       R3,#0x0
   \   0000F4   7A00         MOV       R2,#0x0
   \   0000F6   7900         MOV       R1,#0x0
   \   0000F8   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   1680                    }
   1681                  }
   1682          
   1683                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000FB                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0000FB   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   0000FE   8079         SJMP      ??CrossCallReturnLabel_136
   1684                }
   1685              }
   1686              else
   1687              {
   1688                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000100   90....       MOV       DPTR,#devStartMode
   \   000103   E0           MOVX      A,@DPTR
   \   000104   6401         XRL       A,#0x1
   \   000106   7037         JNZ       ??ZDApp_ProcessNetworkJoin_13
   1689                {
   1690                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000108   90....       MOV       DPTR,#retryCnt
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   04           INC       A
   \   00010D   F0           MOVX      @DPTR,A
   \   00010E   C3           CLR       C
   \   00010F   9404         SUBB      A,#0x4
   \   000111   501F         JNC       ??ZDApp_ProcessNetworkJoin_14
   1691                  {
   1692                    if ( _NIB.nwkPanId == 0xFFFF )
   \   000113   90....       MOV       DPTR,#_NIB + 33
   \   000116   E0           MOVX      A,@DPTR
   \   000117   F4           CPL       A
   \   000118   7003         JNZ       ??ZDApp_ProcessNetworkJoin_15
   \   00011A   A3           INC       DPTR
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   00011D   601B         JZ        ??ZDApp_ProcessNetworkJoin_16
   1693                      devStartMode = MODE_JOIN;
   1694                    else
   1695                    {
   1696                      devStartMode = MODE_REJOIN;
   \   00011F   90....       MOV       DPTR,#devStartMode
   \   000122   7403         MOV       A,#0x3
   \   000124   F0           MOVX      @DPTR,A
   1697                      _tmpRejoinState = true;
   \   000125   90....       MOV       DPTR,#_tmpRejoinState
   \   000128   7401         MOV       A,#0x1
   \   00012A   F0           MOVX      @DPTR,A
   1698                      prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   00012B   90....       MOV       DPTR,#prevDevState
   \   00012E   7404         MOV       A,#0x4
   \   000130   800C         SJMP      ??ZDApp_ProcessNetworkJoin_17
   1699                    }
   1700                  }
   1701                  // Do a normal join to the network after certain times of rejoin retries
   1702                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   000132   90....       MOV       DPTR,#AIB_apsUseInsecureJoin
   \   000135   E0           MOVX      A,@DPTR
   \   000136   6401         XRL       A,#0x1
   \   000138   7005         JNZ       ??ZDApp_ProcessNetworkJoin_13
   1703                  {
   1704                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   00013A   90....       MOV       DPTR,#devStartMode
   \   00013D   E4           CLR       A
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   00013E   F0           MOVX      @DPTR,A
   1705                  }
   1706                }
   1707                else if(devStartMode == MODE_REJOIN)
   1708                {
   1709                  if ( ZSTACK_END_DEVICE_BUILD )
   1710                  {
   1711                    devStartMode = MODE_REJOIN;
   1712                    _tmpRejoinState = true;
   1713                    _NIB.nwkState = NWK_INIT;
   1714                  }
   1715                }
   1716          
   1717                // Clear the neighbor Table and network discovery tables.
   1718                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   00013F                ; Setup parameters for call to function nwkNeighborInitTable
   \   00013F   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1719                NLME_NwkDiscTerm();
   \   000142                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000142   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1720          
   1721                if ( ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1722                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1723                    && (zgChildAgingEnable == TRUE) ) ) && (devStartMode == MODE_REJOIN) )
   \   000145   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000148   E0           MOVX      A,@DPTR
   \   000149   A2E3         MOV       C,0xE0 /* A   */.3
   \   00014B   5008         JNC       ??ZDApp_ProcessNetworkJoin_18
   \   00014D   90....       MOV       DPTR,#zgChildAgingEnable
   \   000150   E0           MOVX      A,@DPTR
   \   000151   6401         XRL       A,#0x1
   \   000153   7024         JNZ       ??CrossCallReturnLabel_136
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   000155   90....       MOV       DPTR,#devStartMode
   \   000158   E0           MOVX      A,@DPTR
   \   000159   6403         XRL       A,#0x3
   \   00015B   701C         JNZ       ??CrossCallReturnLabel_136
   1724                {
   1725                  NLME_SetPollRate( zgRejoinPollRate );
   \   00015D                ; Setup parameters for call to function NLME_SetPollRate
   \   00015D   90....       MOV       DPTR,#zgRejoinPollRate
   \   000160   E0           MOVX      A,@DPTR
   \   000161   F5..         MOV       ?V0,A
   \   000163   A3           INC       DPTR
   \   000164   E0           MOVX      A,@DPTR
   \   000165   AA..         MOV       R2,?V0
   \   000167   FB           MOV       R3,A
   \   000168   E4           CLR       A
   \   000169   FC           MOV       R4,A
   \   00016A   FD           MOV       R5,A
   \   00016B   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   00016E   8009         SJMP      ??CrossCallReturnLabel_136
   1726                }
   1727              }
   1728            }
   1729          #if defined ( ZIGBEEPRO )
   1730            else if ( devState != DEV_HOLD )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000170   E0           MOVX      A,@DPTR
   \   000171   6006         JZ        ??CrossCallReturnLabel_136
   1731            {
   1732              #ifdef APP_TP2
   1733                if(devState == DEV_END_DEVICE_UNAUTH )
   1734                {
   1735                  return;
   1736                }
   1737              #endif
   1738          	  
   1739              // Assume from address conflict
   1740          
   1741              // Notify the network
   1742              ZDApp_AnnounceNewAddress();
   \   000173                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000173   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1743          
   1744              // Notify apps
   1745              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000176                ; Setup parameters for call to function osal_set_event
   \   000176   12....       LCALL     ?Subroutine16 & 0xFFFF
   1746            }
   1747          #endif
   1748          }
   \                     ??CrossCallReturnLabel_136:
   \   000179   80..         SJMP      ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0
   1749          
   1750          /******************************************************************************
   1751           * @fn          ZDApp_StoreNwkSecMaterial
   1752           *
   1753           * @brief       Stores new entries in the NwkSecMaterial
   1754           *
   1755           * @param       none
   1756           *
   1757           * @return      none
   1758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1759          void ZDApp_StoreNwkSecMaterial(void)
   \                     ZDApp_StoreNwkSecMaterial:
   1760          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1761            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1762            uint8 i;
   1763            uint8 emptyEntryIndexOffset = gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
   1764            
   1765            //Search if we do have security material for this network
   1766            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   75....       MOV       ?V0,#(_NIB + 53) & 0xff
   \   00000F   75....       MOV       ?V1,#((_NIB + 53) >> 8) & 0xff
   \   000012   8E..         MOV       ?V2,R6
   \   000014   8001         SJMP      ??ZDApp_StoreNwkSecMaterial_0
   \                     ??ZDApp_StoreNwkSecMaterial_1:
   \   000016   0E           INC       R6
   \                     ??ZDApp_StoreNwkSecMaterial_0:
   \   000017   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00001A   E4           CLR       A
   \   00001B   93           MOVC      A,@A+DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   EE           MOV       A,R6
   \   00001E   C3           CLR       C
   \   00001F   98           SUBB      A,R0
   \   000020   4003         JC        $+5
   \   000022   02....       LJMP      ??ZDApp_StoreNwkSecMaterial_2 & 0xFFFF
   1767            {
   1768              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   A8..         MOV       R0,?XSP + 0
   \   000027   A9..         MOV       R1,?XSP + 1
   \   000029   88..         MOV       ?V4,R0
   \   00002B   89..         MOV       ?V5,R1
   \   00002D   78..         MOV       R0,#?V4
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..0C       MOV       ?V4,#0xc
   \   000035   75..00       MOV       ?V5,#0x0
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   EE           MOV       A,R6
   \   000042   2475         ADD       A,#0x75
   \   000044   FA           MOV       R2,A
   \   000045   E4           CLR       A
   \   000046   3400         ADDC      A,#0x0
   \   000048   FB           MOV       R3,A
   \   000049   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   1769              {
   1770                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   00004F                ; Setup parameters for call to function osal_memcmp
   \   00004F   7404         MOV       A,#0x4
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   A982         MOV       R1,DPL
   \   000056   AA83         MOV       R2,DPH
   \   000058   89..         MOV       ?V4,R1
   \   00005A   8A..         MOV       ?V5,R2
   \   00005C   75..00       MOV       ?V6,#0x0
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   7C08         MOV       R4,#0x8
   \   000066   7D00         MOV       R5,#0x0
   \   000068   A9..         MOV       R1,?V0
   \   00006A   AA..         MOV       R2,?V1
   \   00006C   AB..         MOV       R3,?V2
   \   00006E   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074   E9           MOV       A,R1
   \   000075   7059         JNZ       ??ZDApp_StoreNwkSecMaterial_2
   1771                {
   1772                  break;
   1773                }
   1774                if(osal_isbufset(nwkSecMaterialDesc.extendedPanID,0,Z_EXTADDR_LEN))
   \   000077                ; Setup parameters for call to function osal_isbufset
   \   000077   7C08         MOV       R4,#0x8
   \   000079   7900         MOV       R1,#0x0
   \   00007B   7404         MOV       A,#0x4
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   AA82         MOV       R2,DPL
   \   000082   AB83         MOV       R3,DPH
   \   000084   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   000087   E9           MOV       A,R1
   \   000088   608C         JZ        ??ZDApp_StoreNwkSecMaterial_1
   1775                {
   1776                  emptyEntryIndexOffset = i;
   \   00008A   EE           MOV       A,R6
   \   00008B   FF           MOV       R7,A
   1777                  break;
   1778                }
   1779              }
   1780            }
   1781            
   1782            //ExtPanID not found and found an empty entry, save the extended PANID
   1783            if(emptyEntryIndexOffset < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES)
   1784            {
   1785              osal_memcpy(nwkSecMaterialDesc.extendedPanID, _NIB.extendedPANID, Z_EXTADDR_LEN);
   \   00008C                ; Setup parameters for call to function osal_memcpy
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000091   7C08         MOV       R4,#0x8
   \   000093   7D00         MOV       R5,#0x0
   \   000095   7407         MOV       A,#0x7
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   1786              nwkSecMaterialDesc.FrameCounter = 0;
   \   0000A0   85..82       MOV       DPL,?XSP + 0
   \   0000A3   85..83       MOV       DPH,?XSP + 1
   \   0000A6   E4           CLR       A
   \   0000A7   F0           MOVX      @DPTR,A
   \   0000A8   A3           INC       DPTR
   \   0000A9   F0           MOVX      @DPTR,A
   \   0000AA   A3           INC       DPTR
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   12....       LCALL     ?Subroutine9 & 0xFFFF
   1787              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + emptyEntryIndexOffset,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   1788            }
   \                     ??CrossCallReturnLabel_2:
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B3   75..0C       MOV       ?V0,#0xc
   \   0000B6   75..00       MOV       ?V1,#0x0
   \   0000B9   78..         MOV       R0,#?V0
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   7C00         MOV       R4,#0x0
   \   0000C0   7D00         MOV       R5,#0x0
   \   0000C2   EF           MOV       A,R7
   \   0000C3   2475         ADD       A,#0x75
   \   0000C5   FA           MOV       R2,A
   \   0000C6   E4           CLR       A
   \   0000C7   3400         ADDC      A,#0x0
   \   0000C9   FB           MOV       R3,A
   \   0000CA   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
   1789          
   1790          }
   \                     ??ZDApp_StoreNwkSecMaterial_2:
   \   0000D0   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   740C         MOV       A,#0xc
   \   000002                REQUIRE ??Subroutine52_0
   \   000002                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
   1791          
   1792          
   1793          /*********************************************************************
   1794           * @fn      ZDApp_SaveNwkKey()
   1795           *
   1796           * @brief   Save off the Network key information.
   1797           *
   1798           * @param   none
   1799           *
   1800           * @return  none
   1801           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A82         MOV       R2,#-0x7e
   \   000006                REQUIRE ??Subroutine44_0
   \   000006                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1802          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1803          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1804            nwkActiveKeyItems keyItems;
   1805            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1806            uint8 found = 0;
   1807            uint8 i;
   1808            
   1809            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   740C         MOV       A,#0xc
   \   00000C   12....       LCALL     ?XSTACK_DISP101_8
   \   00000F   12....       LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1810          
   1811            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1812                          (void *)&keyItems );
   \   000012                ; Setup parameters for call to function osal_nv_write
   \   000012   740C         MOV       A,#0xc
   \   000014   12....       LCALL     ?XSTACK_DISP100_8
   \   000017   88..         MOV       ?V0,R0
   \   000019   89..         MOV       ?V1,R1
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   75..15       MOV       ?V0,#0x15
   \   000023   75..00       MOV       ?V1,#0x0
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   1813            
   1814            //Search for the security material to update its framecounter
   1815            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   000031   75..00       MOV       ?V0,#0x0
   \   000034   8002         SJMP      ??ZDApp_SaveNwkKey_0
   \                     ??ZDApp_SaveNwkKey_1:
   \   000036   05..         INC       ?V0
   \                     ??ZDApp_SaveNwkKey_0:
   \   000038   AE..         MOV       R6,?V0
   \   00003A   7F00         MOV       R7,#0x0
   \   00003C   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00003F   E4           CLR       A
   \   000040   93           MOVC      A,@A+DPTR
   \   000041   F8           MOV       R0,A
   \   000042   EE           MOV       A,R6
   \   000043   C3           CLR       C
   \   000044   98           SUBB      A,R0
   \   000045   4003         JC        $+5
   \   000047   02....       LJMP      ??ZDApp_SaveNwkKey_2 & 0xFFFF
   1816            {
   1817              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   00004A   EE           MOV       A,R6
   \   00004B   2475         ADD       A,#0x75
   \   00004D   FE           MOV       R6,A
   \   00004E   5001         JNC       ??ZDApp_SaveNwkKey_3
   \   000050   0F           INC       R7
   \                     ??ZDApp_SaveNwkKey_3:
   \   000051                ; Setup parameters for call to function osal_nv_read
   \   000051   A8..         MOV       R0,?XSP + 0
   \   000053   A9..         MOV       R1,?XSP + 1
   \   000055   88..         MOV       ?V2,R0
   \   000057   89..         MOV       ?V3,R1
   \   000059   78..         MOV       R0,#?V2
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   75..0C       MOV       ?V2,#0xc
   \   000061   75..00       MOV       ?V3,#0x0
   \   000064   78..         MOV       R0,#?V2
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   7C00         MOV       R4,#0x0
   \   00006B   7D00         MOV       R5,#0x0
   \   00006D   EE           MOV       A,R6
   \   00006E   FA           MOV       R2,A
   \   00006F   EF           MOV       A,R7
   \   000070   FB           MOV       R3,A
   \   000071   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   1818              {
   1819                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   000077                ; Setup parameters for call to function osal_memcmp
   \   000077   7404         MOV       A,#0x4
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   A982         MOV       R1,DPL
   \   00007E   AA83         MOV       R2,DPH
   \   000080   89..         MOV       ?V4,R1
   \   000082   8A..         MOV       ?V5,R2
   \   000084   75..00       MOV       ?V6,#0x0
   \   000087   78..         MOV       R0,#?V4
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008C   7C08         MOV       R4,#0x8
   \   00008E   7D00         MOV       R5,#0x0
   \   000090   79..         MOV       R1,#(_NIB + 53) & 0xff
   \   000092   7A..         MOV       R2,#((_NIB + 53) >> 8) & 0xff
   \   000094   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000097   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009A   E9           MOV       A,R1
   \   00009B   6099         JZ        ??ZDApp_SaveNwkKey_1
   1820                {
   1821                  nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
   \   00009D   741D         MOV       A,#0x1d
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ?XLOAD_R0123
   \   0000A5   85..82       MOV       DPL,?XSP + 0
   \   0000A8   85..83       MOV       DPH,?XSP + 1
   \   0000AB   12....       LCALL     ?XSTORE_R0123
   1822                  found = TRUE;
   1823                  //update the framecounter associated to this ExtPanID
   1824                  osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000AE                ; Setup parameters for call to function osal_nv_write
   \   0000AE   A8..         MOV       R0,?XSP + 0
   \   0000B0   A9..         MOV       R1,?XSP + 1
   \   0000B2   88..         MOV       ?V0,R0
   \   0000B4   89..         MOV       ?V1,R1
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   75..0C       MOV       ?V0,#0xc
   \   0000BE   75..00       MOV       ?V1,#0x0
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   7C00         MOV       R4,#0x0
   \   0000C8   7D00         MOV       R5,#0x0
   \   0000CA   EE           MOV       A,R6
   \   0000CB   FA           MOV       R2,A
   \   0000CC   EF           MOV       A,R7
   \   0000CD   8045         SJMP      ??ZDApp_SaveNwkKey_4
   1825                  break;
   1826                }
   1827              }
   1828            }
   1829            
   1830            //If not found, then use the generic
   1831            if(!found)
   1832            {
   1833              osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
   \                     ??ZDApp_SaveNwkKey_2:
   \   0000CF                ; Setup parameters for call to function osal_memset
   \   0000CF   7C08         MOV       R4,#0x8
   \   0000D1   7D00         MOV       R5,#0x0
   \   0000D3   79FF         MOV       R1,#-0x1
   \   0000D5   7404         MOV       A,#0x4
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   AA82         MOV       R2,DPL
   \   0000DC   AB83         MOV       R3,DPH
   \   0000DE   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1834              nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
   \   0000E1   741D         MOV       A,#0x1d
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   12....       LCALL     ?XLOAD_R0123
   \   0000E9   85..82       MOV       DPL,?XSP + 0
   \   0000EC   85..83       MOV       DPH,?XSP + 1
   \   0000EF   12....       LCALL     ?XSTORE_R0123
   1835              //update the framecounter associated to this ExtPanID
   1836              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000F2                ; Setup parameters for call to function osal_nv_write
   \   0000F2   A8..         MOV       R0,?XSP + 0
   \   0000F4   A9..         MOV       R1,?XSP + 1
   \   0000F6   88..         MOV       ?V0,R0
   \   0000F8   89..         MOV       ?V1,R1
   \   0000FA   78..         MOV       R0,#?V0
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FF   75..0C       MOV       ?V0,#0xc
   \   000102   8F..         MOV       ?V1,R7
   \   000104   78..         MOV       R0,#?V0
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000109   7C00         MOV       R4,#0x0
   \   00010B   7D00         MOV       R5,#0x0
   \   00010D   EE           MOV       A,R6
   \   00010E   2474         ADD       A,#0x74
   \   000110   FA           MOV       R2,A
   \   000111   E4           CLR       A
   \   000112   3400         ADDC      A,#0x0
   \                     ??ZDApp_SaveNwkKey_4:
   \   000114   FB           MOV       R3,A
   1837            }
   \   000115   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000118   12....       LCALL     ?DEALLOC_XSTACK8
   1838            
   1839            
   1840            nwkFrameCounterChanges = 0;
   \   00011B   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   00011E   E4           CLR       A
   \   00011F   F0           MOVX      @DPTR,A
   \   000120   A3           INC       DPTR
   \   000121   F0           MOVX      @DPTR,A
   1841            
   1842            // Clear copy in RAM before return.
   1843            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000122                ; Setup parameters for call to function osal_memset
   \   000122   7C15         MOV       R4,#0x15
   \   000124   FD           MOV       R5,A
   \   000125   F9           MOV       R1,A
   \   000126   740C         MOV       A,#0xc
   \   000128   12....       LCALL     ?XSTACK_DISP101_8
   \   00012B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1844          
   1845          }
   \   00012E   7421         MOV       A,#0x21
   \   000130   80..         SJMP      ??Subroutine52_0
   1846          
   1847          /*********************************************************************
   1848           * @fn      ZDApp_ForceConcentratorChange()
   1849           *
   1850           * @brief   Force a network concentrator change by resetting
   1851           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1852           *          from NV and set nwk event.
   1853           *
   1854           * @param   none
   1855           *
   1856           * @return  none
   1857           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1858          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1859          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1860            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV       ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV       ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV       ?V0,#0x1
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV       R4,#0x0
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   7A32         MOV       R2,#0x32
   \   000021   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000024   12....       LCALL     ?DEALLOC_XSTACK8
   1861            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   000027                ; Setup parameters for call to function osal_nv_read
   \   000027   75....       MOV       ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002A   75....       MOV       ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..01       MOV       ?V0,#0x1
   \   000035   75..00       MOV       ?V1,#0x0
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7A33         MOV       R2,#0x33
   \   000043   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   1862          
   1863            if ( zgConcentratorEnable == TRUE )
   \   000049   90....       MOV       DPTR,#zgConcentratorEnable
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   6401         XRL       A,#0x1
   \   00004F   7015         JNZ       ??ZDApp_ForceConcentratorChange_0
   1864            {
   1865              // Start next event
   1866              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000051                ; Setup parameters for call to function osal_start_timerEx
   \   000051   90....       MOV       DPTR,#__Constant_64
   \   000054   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000057   7A00         MOV       R2,#0x0
   \   000059   7B08         MOV       R3,#0x8
   \   00005B   90....       MOV       DPTR,#NWK_TaskID
   \   00005E   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   1867            }
   \                     ??CrossCallReturnLabel_86:
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   \   000064   800A         SJMP      ??CrossCallReturnLabel_90
   1868            else
   1869            {
   1870              // Stop the next event
   1871              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000066                ; Setup parameters for call to function osal_stop_timerEx
   \   000066   7A00         MOV       R2,#0x0
   \   000068   7B08         MOV       R3,#0x8
   \   00006A   90....       MOV       DPTR,#NWK_TaskID
   \   00006D   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   1872            }
   1873          }
   \                     ??CrossCallReturnLabel_90:
   \   000070   02....       LJMP      ??Subroutine51_0 & 0xFFFF
   1874          
   1875          /*********************************************************************
   1876           * @fn      ZDApp_ResetNwkKey()
   1877           *
   1878           * @brief   Reset the Network key information in NV.
   1879           *
   1880           * @param   none
   1881           *
   1882           * @return  none
   1883           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1884          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1885          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1886            nwkActiveKeyItems keyItems;
   1887          
   1888            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   12....       LCALL     ?Subroutine30 & 0xFFFF
   1889            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1890                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_21:
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV       ?V0,#0x15
   \   000015   75..00       MOV       ?V1,#0x0
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000020   12....       LCALL     ?DEALLOC_XSTACK8
   1891          }
   \   000023   7415         MOV       A,#0x15
   \   000025   02....       LJMP      ??Subroutine50_0 & 0xFFFF
   1892          
   1893          /*********************************************************************
   1894           * @fn      ZDApp_RestoreNwkSecMaterial()
   1895           *
   1896           * @brief   Restore the network frame counter associated to this ExtPanID and 
   1897           *          increment it if found. This can only happens once per reset
   1898           *
   1899           * @param   none
   1900           *
   1901           * @return  none
   1902           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1903          void ZDApp_RestoreNwkSecMaterial(void)
   \                     ZDApp_RestoreNwkSecMaterial:
   1904          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1905            uint8 Found = FALSE;
   1906            uint8 i;
   1907            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1908            uint8 UpdateFrameCounter = FALSE;
   1909          
   1910            //Search if we do have security material for this network
   1911            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00000A   75..00       MOV       ?V0,#0x0
   \   00000D   804E         SJMP      ??ZDApp_RestoreNwkSecMaterial_0
   1912            {
   1913              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \                     ??ZDApp_RestoreNwkSecMaterial_1:
   \   00000F                ; Setup parameters for call to function osal_nv_read
   \   00000F   A8..         MOV       R0,?XSP + 0
   \   000011   A9..         MOV       R1,?XSP + 1
   \   000013   88..         MOV       ?V2,R0
   \   000015   89..         MOV       ?V3,R1
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   75..0C       MOV       ?V2,#0xc
   \   00001F   75..00       MOV       ?V3,#0x0
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000032   12....       LCALL     ?DEALLOC_XSTACK8
   1914              {
   1915                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   000035                ; Setup parameters for call to function osal_memcmp
   \   000035   7404         MOV       A,#0x4
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   A982         MOV       R1,DPL
   \   00003C   AA83         MOV       R2,DPH
   \   00003E   89..         MOV       ?V4,R1
   \   000040   8A..         MOV       ?V5,R2
   \   000042   75..00       MOV       ?V6,#0x0
   \   000045   78..         MOV       R0,#?V4
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004A   7C08         MOV       R4,#0x8
   \   00004C   7D00         MOV       R5,#0x0
   \   00004E   79..         MOV       R1,#(_NIB + 53) & 0xff
   \   000050   7A..         MOV       R2,#((_NIB + 53) >> 8) & 0xff
   \   000052   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   1916                {
   1917                  UpdateFrameCounter = TRUE;
   1918                  Found = TRUE;
   1919                  break;
   1920                }
   1921              }
   1922            }    
   \                     ??CrossCallReturnLabel_73:
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   \   000058   E9           MOV       A,R1
   \   000059   7025         JNZ       ??ZDApp_RestoreNwkSecMaterial_2
   \   00005B   05..         INC       ?V0
   \                     ??ZDApp_RestoreNwkSecMaterial_0:
   \   00005D   E5..         MOV       A,?V0
   \   00005F   2475         ADD       A,#0x75
   \   000061   FE           MOV       R6,A
   \   000062   E4           CLR       A
   \   000063   3400         ADDC      A,#0x0
   \   000065   FF           MOV       R7,A
   \   000066   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   000069   E4           CLR       A
   \   00006A   93           MOVC      A,@A+DPTR
   \   00006B   F8           MOV       R0,A
   \   00006C   E5..         MOV       A,?V0
   \   00006E   98           SUBB      A,R0
   \   00006F   409E         JC        ??ZDApp_RestoreNwkSecMaterial_1
   1923            //Check if we do have frame counter stored in the generic
   1924            if(!Found)
   1925            {
   1926              //The last entry readed has the Generic item, thefore, no need to read it again
   1927              if(nwkSecMaterialDesc.FrameCounter)
   \   000071   85..82       MOV       DPL,?XSP + 0
   \   000074   85..83       MOV       DPH,?XSP + 1
   \   000077   12....       LCALL     ?XLOAD_R0123
   \   00007A   E8           MOV       A,R0
   \   00007B   49           ORL       A,R1
   \   00007C   4A           ORL       A,R2
   \   00007D   4B           ORL       A,R3
   \   00007E   6058         JZ        ??ZDApp_RestoreNwkSecMaterial_3
   \                     ??ZDApp_RestoreNwkSecMaterial_2:
   \   000080   90....       MOV       DPTR,#FrameCounterUpdated
   \   000083   E0           MOVX      A,@DPTR
   \   000084   7052         JNZ       ??ZDApp_RestoreNwkSecMaterial_3
   1928              {
   1929                UpdateFrameCounter = TRUE;
   1930              }
   1931            }  
   1932          
   1933            if(UpdateFrameCounter && (!FrameCounterUpdated))
   1934            {
   1935              FrameCounterUpdated = TRUE;
   \   000086   7401         MOV       A,#0x1
   \   000088   F0           MOVX      @DPTR,A
   1936              
   1937              // Increment the frame counter stored in NV
   1938              nwkSecMaterialDesc.FrameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1939                                        NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000089   90....       MOV       DPTR,#__Constant_4e2
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?L_MOV_X
   \   000091   85..82       MOV       DPL,?XSP + 0
   \   000094   85..83       MOV       DPH,?XSP + 1
   \   000097   78..         MOV       R0,#?V0
   \   000099   12....       LCALL     ?L_ADD_TO_X
   1940              
   1941              nwkFrameCounter = nwkSecMaterialDesc.FrameCounter;
   \   00009C   85..82       MOV       DPL,?XSP + 0
   \   00009F   85..83       MOV       DPH,?XSP + 1
   \   0000A2   12....       LCALL     ?XLOAD_R0123
   \   0000A5   90....       MOV       DPTR,#nwkFrameCounter
   \   0000A8   12....       LCALL     ?XSTORE_R0123
   1942              
   1943              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000AB                ; Setup parameters for call to function osal_nv_write
   \   0000AB   A8..         MOV       R0,?XSP + 0
   \   0000AD   A9..         MOV       R1,?XSP + 1
   \   0000AF   88..         MOV       ?V0,R0
   \   0000B1   89..         MOV       ?V1,R1
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B8   75..0C       MOV       ?V0,#0xc
   \   0000BB   75..00       MOV       ?V1,#0x0
   \   0000BE   78..         MOV       R0,#?V0
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C3   7C00         MOV       R4,#0x0
   \   0000C5   7D00         MOV       R5,#0x0
   \   0000C7   EE           MOV       A,R6
   \   0000C8   FA           MOV       R2,A
   \   0000C9   EF           MOV       A,R7
   \   0000CA   FB           MOV       R3,A
   \   0000CB   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000CE   12....       LCALL     ?DEALLOC_XSTACK8
   1944              
   1945              nwkFrameCounterChanges = 0;
   \   0000D1   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   0000D4   E4           CLR       A
   \   0000D5   F0           MOVX      @DPTR,A
   \   0000D6   A3           INC       DPTR
   \   0000D7   F0           MOVX      @DPTR,A
   1946            }
   1947            return;
   \                     ??ZDApp_RestoreNwkSecMaterial_3:
   \   0000D8   02....       LJMP      ?Subroutine5 & 0xFFFF
   1948          }
   1949          
   1950          /*********************************************************************
   1951           * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
   1952           *
   1953           * @brief
   1954           *
   1955           *   Save off the Network key information.
   1956           *
   1957           * @param   incrFrmCnt - set to true if we want to increment the network
   1958                      frame counter, else set to false
   1959           *
   1960           * @return  true if restored from NV, false if not
   1961           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1962          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
   \                     ZDApp_RestoreNwkKey:
   1963          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV       A,#-0x25
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1964            nwkActiveKeyItems keyItems;
   1965            uint8 ret = FALSE;
   \   00000A   7E00         MOV       R6,#0x0
   1966          
   1967            ZDApp_RestoreNwkSecMaterial();
   \   00000C                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   00000C   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   1968          
   1969            // Restore the key information
   1970            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1971                == ZSUCCESS )
   \   00000F                ; Setup parameters for call to function osal_nv_read
   \   00000F   7410         MOV       A,#0x10
   \   000011   12....       LCALL     ?XSTACK_DISP100_8
   \   000014   88..         MOV       ?V0,R0
   \   000016   89..         MOV       ?V1,R1
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV       ?V0,#0x15
   \   000020   8E..         MOV       ?V1,R6
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   7A82         MOV       R2,#-0x7e
   \   00002D   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   \   000033   E9           MOV       A,R1
   \   000034   702E         JNZ       ??ZDApp_RestoreNwkKey_0
   1972            {
   1973              uint8 nullKey[SEC_KEY_LEN];
   1974          
   1975              // initialize default value to compare to
   1976              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   000036                ; Setup parameters for call to function osal_memset
   \   000036   7C10         MOV       R4,#0x10
   \   000038   12....       LCALL     ?Subroutine38 & 0xFFFF
   1977          
   1978              // if stored key is different than default value, then a key has been established
   1979              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \                     ??CrossCallReturnLabel_29:
   \   00003B   8E..         MOV       ?V2,R6
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000042   7C10         MOV       R4,#0x10
   \   000044   7D00         MOV       R5,#0x0
   \   000046   7414         MOV       A,#0x14
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000051   E9           MOV       A,R1
   \   000052   7010         JNZ       ??ZDApp_RestoreNwkKey_0
   1980              {
   1981                ret = TRUE;
   \   000054   7E01         MOV       R6,#0x1
   1982          
   1983                // Clear copy in RAM before return.
   1984                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000056                ; Setup parameters for call to function osal_memset
   \   000056   7C15         MOV       R4,#0x15
   \   000058   7D00         MOV       R5,#0x0
   \   00005A   7900         MOV       R1,#0x0
   \   00005C   7410         MOV       A,#0x10
   \   00005E   12....       LCALL     ?XSTACK_DISP101_8
   \   000061   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1985              }
   1986            }
   1987          
   1988            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000064   EE           MOV       A,R6
   \   000065   F9           MOV       R1,A
   \   000066   7425         MOV       A,#0x25
   \   000068   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006B   7F03         MOV       R7,#0x3
   \   00006D   02....       LJMP      ?BANKED_LEAVE_XDATA
   1989          }
   1990          
   1991          /*********************************************************************
   1992           * @fn      ZDApp_ResetTimerStart
   1993           *
   1994           * @brief   Start the reset timer.
   1995           *
   1996           * @param   delay - delay time(ms) before reset
   1997           *
   1998           * @return  none
   1999           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2000          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   2001          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine17 & 0xFFFF
   2002            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \                     ??CrossCallReturnLabel_75:
   \   000008   7012         JNZ       ??ZDApp_ResetTimerStart_0
   2003            {
   2004              // Start the rest timer
   2005              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00000A                ; Setup parameters for call to function osal_start_timerEx
   \   00000A   E4           CLR       A
   \   00000B   F5..         MOV       ?V2,A
   \   00000D   F5..         MOV       ?V3,A
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000014   7A04         MOV       R2,#0x4
   \   000016   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   2006            }
   \                     ??CrossCallReturnLabel_81:
   \   000019   12....       LCALL     ?DEALLOC_XSTACK8
   2007          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   00001C   02....       LJMP      ??Subroutine63_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A04         MOV       R2,#0x4
   \   000006   7B00         MOV       R3,#0x0
   \   000008                REQUIRE ??Subroutine56_0
   \   000008                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000008   EA           MOV       A,R2
   \   000009   4B           ORL       A,R3
   \   00000A   4C           ORL       A,R4
   \   00000B   4D           ORL       A,R5
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2008          
   2009          /*********************************************************************
   2010           * @fn      ZDApp_ResetTimerCancel
   2011           *
   2012           * @brief   Cancel the reset timer.
   2013           *
   2014           * @param   none
   2015           *
   2016           * @return  none
   2017           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2018          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   2019          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2020            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV       R2,#0x4
   \   000006   7B00         MOV       R3,#0x0
   \   000008   12....       LCALL     ?Subroutine24 & 0xFFFF
   2021            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \                     ??CrossCallReturnLabel_88:
   \   00000B                ; Setup parameters for call to function osal_clear_event
   \   00000B   7A04         MOV       R2,#0x4
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   90....       MOV       DPTR,#ZDAppTaskID
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   2022          }
   \   000017   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   2023          
   2024          /*********************************************************************
   2025           * @fn      ZDApp_LeaveCtrlInit
   2026           *
   2027           * @brief   Initialize the leave control logic.
   2028           *
   2029           * @param   none
   2030           *
   2031           * @return  none
   2032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2033          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   2034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2035            uint8 status;
   2036          
   2037          
   2038            // Initialize control state
   2039            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   2040          
   2041            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   2042                                        sizeof(ZDApp_LeaveCtrl),
   2043                                        &ZDApp_LeaveCtrl );
   2044          
   2045            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV       R4,#0x1
   \   000017   7D00         MOV       R5,#0x0
   \   000019   7A85         MOV       R2,#-0x7b
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   \   000025   E9           MOV       A,R1
   \   000026   701C         JNZ       ??ZDApp_LeaveCtrlInit_0
   2046            {
   2047              // Read saved control
   2048              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   2049                            0,
   2050                            sizeof( uint8 ),
   2051                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV       ?V0,#0x1
   \   000030   75..00       MOV       ?V1,#0x0
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV       R4,#0x0
   \   00003A   7D00         MOV       R5,#0x0
   \   00003C   7A85         MOV       R2,#-0x7b
   \   00003E   12....       LCALL     ?Subroutine31 & 0xFFFF
   2052            }
   \                     ??CrossCallReturnLabel_64:
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   2053          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000044   02....       LJMP      ??Subroutine51_0 & 0xFFFF
   2054          
   2055          /*********************************************************************
   2056           * @fn      ZDApp_LeaveCtrlSet
   2057           *
   2058           * @brief   Set the leave control logic.
   2059           *
   2060           * @param   ra - reassociate flag
   2061           *
   2062           * @return  none
   2063           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV       R0,#?V0
   \   000008   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV       ?V0,#0x1
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV       R4,#0x0
   \   000018   7D00         MOV       R5,#0x0
   \   00001A   7A85         MOV       R2,#-0x7b
   \   00001C   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00001F                REQUIRE ??Subroutine50_0
   \   00001F                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2064          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   2065          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2066            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV       A,#0x1
   \   00000C   F0           MOVX      @DPTR,A
   2067          
   2068            if ( ra == TRUE )
   \   00000D   6E           XRL       A,R6
   \   00000E   7003         JNZ       ??ZDApp_LeaveCtrlSet_0
   2069            {
   2070              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV       A,#0x3
   \   000012   F0           MOVX      @DPTR,A
   2071            }
   2072          
   2073            // Write the leave control
   2074            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   2075                           0,
   2076                           sizeof( uint8 ),
   2077                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP      ?Subroutine4 & 0xFFFF
   2078          }
   2079          
   2080          /*********************************************************************
   2081           * @fn      ZDApp_LeaveCtrlReset
   2082           *
   2083           * @brief   Re-initialize the leave control logic.
   2084           *
   2085           * @param   none
   2086           *
   2087           * @return  none
   2088           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2089          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   2090          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2091            // Set leave control to initialized state
   2092            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   2093          
   2094            // Write initialized control
   2095            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   2096                          0,
   2097                          sizeof( uint8 ),
   2098                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP      ?Subroutine4 & 0xFFFF
   2099          }
   2100          
   2101          /*********************************************************************
   2102           * @fn      ZDApp_LeaveCtrlBypass
   2103           *
   2104           * @brief   Check if NV restore should be skipped during a leave reset.
   2105           *
   2106           * @param   none
   2107           *
   2108           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   2109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2110          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   2111          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2112            uint8 bypass;
   2113          
   2114            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   2115            {
   2116              bypass = TRUE;
   2117            }
   2118            else
   2119            {
   2120              bypass = FALSE;
   2121            }
   2122          
   2123            return bypass;
   \   000004   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   F9           MOV       R1,A
   \   00000D   80..         SJMP      ??Subroutine60_0
   2124          }
   2125          
   2126          /*********************************************************************
   2127           * @fn      ZDApp_LeaveCtrlStartup
   2128           *
   2129           * @brief   Check for startup conditions during a leave reset.
   2130           *
   2131           * @param   state      - devState_t determined by leave control logic
   2132           * @param   startDelay - startup delay
   2133           *
   2134           * @return  none
   2135           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2136          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   2137          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2138            *startDelay = 0;
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   F0           MOVX      @DPTR,A
   2139          
   2140            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5019         JNC       ??ZDApp_LeaveCtrlStartup_0
   2141            {
   2142              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV       C,0xE0 /* A   */.1
   \   000016   500C         JNC       ??ZDApp_LeaveCtrlStartup_1
   2143              {
   2144                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   7488         MOV       A,#-0x78
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   7413         MOV       A,#0x13
   \   000022   8005         SJMP      ??ZDApp_LeaveCtrlStartup_2
   2145              }
   2146              else
   2147              {
   2148                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   E4           CLR       A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX      @DPTR,A
   2149              }
   2150          
   2151              // Reset leave control logic
   2152              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   2153            }
   2154          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP      ??Subroutine60_0
   2155          
   2156          /*********************************************************************
   2157           * @fn      ZDApp_LeaveReset
   2158           *
   2159           * @brief   Setup a device reset due to a leave indication/confirm.
   2160           *
   2161           * @param   ra - reassociate flag
   2162           *
   2163           * @return  none
   2164           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2165          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   2166          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2167            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   12....       LCALL     `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   2168          
   2169            APSME_HoldDataRequests( LEAVE_RESET_DELAY);
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A88         MOV       R2,#-0x78
   \   00000C   7B13         MOV       R3,#0x13
   \   00000E   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2170          
   2171            if ( ZSTACK_ROUTER_BUILD )
   2172            {
   2173              osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
   \   000011                ; Setup parameters for call to function osal_stop_timerEx
   \   000011   7A00         MOV       R2,#0x0
   \   000013   7B01         MOV       R3,#0x1
   \   000015   90....       MOV       DPTR,#NWK_TaskID
   \   000018   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   2174              osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
   \                     ??CrossCallReturnLabel_91:
   \   00001B                ; Setup parameters for call to function osal_clear_event
   \   00001B   7A00         MOV       R2,#0x0
   \   00001D   7B01         MOV       R3,#0x1
   \   00001F   90....       MOV       DPTR,#NWK_TaskID
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   2175            }
   2176          
   2177            if (ZG_DEVICE_ENDDEVICE_TYPE)
   \   000027   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6402         XRL       A,#0x2
   \   00002D   7044         JNZ       ??ZDApp_LeaveReset_0
   2178            {
   2179              // Save polling values to be restored after rejoin
   2180              if ( ra == TRUE )
   \   00002F   7401         MOV       A,#0x1
   \   000031   6E           XRL       A,R6
   \   000032   7028         JNZ       ??ZDApp_LeaveReset_1
   2181              {
   2182                 ZDApp_SavedPollRate = zgPollRate;
   \   000034   90....       MOV       DPTR,#zgPollRate
   \   000037   12....       LCALL     ?XLOAD_R0123
   \   00003A   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   00003D   12....       LCALL     ?XSTORE_R0123
   2183                 savedResponseRate = zgResponsePollRate;
   \   000040   90....       MOV       DPTR,#zgResponsePollRate
   \   000043   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000046   90....       MOV       DPTR,#savedResponseRate
   \   000049   E8           MOV       A,R0
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   E9           MOV       A,R1
   \   00004D   F0           MOVX      @DPTR,A
   2184                 savedQueuedPollRate = zgQueuedPollRate;
   \   00004E   90....       MOV       DPTR,#zgQueuedPollRate
   \   000051   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   2185              }
   \                     ??CrossCallReturnLabel_93:
   \   000054   90....       MOV       DPTR,#savedQueuedPollRate
   \   000057   E8           MOV       A,R0
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   E9           MOV       A,R1
   \   00005B   F0           MOVX      @DPTR,A
   2186          
   2187              // Disable polling
   2188              NLME_SetPollRate(0);
   \                     ??ZDApp_LeaveReset_1:
   \   00005C                ; Setup parameters for call to function NLME_SetPollRate
   \   00005C   90....       MOV       DPTR,#__Constant_0
   \   00005F   12....       LCALL     ?XLOAD_R2345
   \   000062   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2189              NLME_SetResponseRate(0);
   \   000065                ; Setup parameters for call to function NLME_SetResponseRate
   \   000065   7A00         MOV       R2,#0x0
   \   000067   7B00         MOV       R3,#0x0
   \   000069   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   2190              NLME_SetQueuedPollRate(0);
   \   00006C                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00006C   7A00         MOV       R2,#0x0
   \   00006E   7B00         MOV       R3,#0x0
   \   000070   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   2191            }
   2192          
   2193            if ( ra == TRUE )
   \                     ??ZDApp_LeaveReset_0:
   \   000073   7401         MOV       A,#0x1
   \   000075   6E           XRL       A,R6
   \   000076   702C         JNZ       ??ZDApp_LeaveReset_2
   2194            {
   2195              devState = DEV_NWK_DISC;
   \   000078   90....       MOV       DPTR,#devState
   \   00007B   7402         MOV       A,#0x2
   \   00007D   F0           MOVX      @DPTR,A
   2196              devStartMode = MODE_REJOIN;
   \   00007E   90....       MOV       DPTR,#devStartMode
   \   000081   04           INC       A
   \   000082   F0           MOVX      @DPTR,A
   2197              _tmpRejoinState = true;
   \   000083   90....       MOV       DPTR,#_tmpRejoinState
   \   000086   7401         MOV       A,#0x1
   \   000088   12....       LCALL     ?Subroutine8 & 0xFFFF
   2198          
   2199              // For rejoin, specify the extended PANID to look for
   2200              osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   2201          
   2202              _NIB.nwkState = NWK_DISC;
   \                     ??CrossCallReturnLabel_1:
   \   00008B   90....       MOV       DPTR,#_NIB + 35
   \   00008E   7402         MOV       A,#0x2
   \   000090   F0           MOVX      @DPTR,A
   2203               NLME_NwkDiscTerm();
   \   000091                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000091   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   2204          
   2205              ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
   \   000094                ; Setup parameters for call to function osal_rand
   \   000094   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000097                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000097   EA           MOV       A,R2
   \   000098   547F         ANL       A,#0x7f
   \   00009A   2464         ADD       A,#0x64
   \   00009C   FA           MOV       R2,A
   \   00009D   7B00         MOV       R3,#0x0
   \   00009F   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   0000A2   8007         SJMP      ??ZDApp_LeaveReset_3
   2206            }
   2207            else
   2208            {
   2209              ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \                     ??ZDApp_LeaveReset_2:
   \   0000A4                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   0000A4   7A88         MOV       R2,#-0x78
   \   0000A6   7B13         MOV       R3,#0x13
   \   0000A8   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   2210            }
   2211          }
   \                     ??ZDApp_LeaveReset_3:
   \   0000AB   02....       LJMP      ??Subroutine51_0 & 0xFFFF
   2212          
   2213          /*********************************************************************
   2214           * @fn      ZDApp_LeaveUpdate
   2215           *
   2216           * @brief   Update local device data related to leaving device.
   2217           *
   2218           * @param   nwkAddr        - NWK address of leaving device
   2219           * @param   extAddr        - EXT address of leaving device
   2220           * @param   removeChildren - remove children of leaving device
   2221           * @param   rejoin         - if device will rejoin or not
   2222           *
   2223           * @return  none
   2224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2225          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   2226                                  uint8 removeChildren, uint8 rejoin )
   2227          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV       A,#-0x1a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V2,R1
   2228            uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   2229            // Remove Apps Key for leaving device
   2230            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000014                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000014   EC           MOV       A,R4
   \   000015   FA           MOV       R2,A
   \   000016   ED           MOV       A,R5
   \   000017   FB           MOV       R3,A
   \   000018   12....       LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   2231          
   2232            // Clear SECURITY bit from Address Manager
   2233            ZDSecMgrAddrClear( extAddr );
   \   00001B                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00001B   EE           MOV       A,R6
   \   00001C   FA           MOV       R2,A
   \   00001D   EF           MOV       A,R7
   \   00001E   FB           MOV       R3,A
   \   00001F   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   2234          
   2235            if ( pbindRemoveDev )
   \   000022   90....       MOV       DPTR,#pbindRemoveDev
   \   000025   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000028   6031         JZ        ??ZDApp_LeaveUpdate_0
   2236            {
   2237              zAddrType_t devAddr;
   2238          
   2239              // Remove bind entry and all related data
   2240              devAddr.addrMode = Addr64Bit;
   \   00002A   7411         MOV       A,#0x11
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   7403         MOV       A,#0x3
   \   000031   F0           MOVX      @DPTR,A
   2241              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   8E..         MOV       ?V4,R6
   \   000034   8F..         MOV       ?V5,R7
   \   000036   75..00       MOV       ?V6,#0x0
   \   000039   78..         MOV       R0,#?V4
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003E   7C08         MOV       R4,#0x8
   \   000040   7D00         MOV       R5,#0x0
   \   000042   740C         MOV       A,#0xc
   \   000044   12....       LCALL     ?XSTACK_DISP101_8
   \   000047   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   2242          
   2243              pbindRemoveDev(&devAddr);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   7409         MOV       A,#0x9
   \   00004F   12....       LCALL     ?XSTACK_DISP101_8
   \   000052   90....       MOV       DPTR,#pbindRemoveDev
   \   000055   12....       LCALL     ?Subroutine22 & 0xFFFF
   2244            }
   \                     ??CrossCallReturnLabel_149:
   \   000058   12....       LCALL     ?CALL_IND
   2245          
   2246            // Remove if child
   2247            if ( ZSTACK_ROUTER_BUILD )
   2248            {
   2249              // Router shall notify the Trust Center that a child End Device or
   2250              // a neighbor Router (within radius=1) has left the network
   2251              APSME_UpdateDeviceReq_t req;
   2252          
   2253              // forward authorization to the Trust Center
   2254              req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \                     ??ZDApp_LeaveUpdate_0:
   \   00005B   7401         MOV       A,#0x1
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   E4           CLR       A
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   F0           MOVX      @DPTR,A
   2255              req.devAddr    = nwkAddr;
   \   000064   7403         MOV       A,#0x3
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   2256              req.devExtAddr = extAddr;
   \                     ??CrossCallReturnLabel_125:
   \   00006C   7405         MOV       A,#0x5
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   EE           MOV       A,R6
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   EF           MOV       A,R7
   \   000075   F0           MOVX      @DPTR,A
   2257              req.status = APSME_UD_DEVICE_LEFT;
   \   000076   7407         MOV       A,#0x7
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   7402         MOV       A,#0x2
   \   00007D   F0           MOVX      @DPTR,A
   2258          
   2259              if ( rejoin == FALSE )
   \   00007E   7429         MOV       A,#0x29
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   E0           MOVX      A,@DPTR
   \   000084   705C         JNZ       ??ZDApp_LeaveUpdate_1
   2260              {
   2261                if(!APSME_IsDistributedSecurity())
   \   000086                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000086   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000089   E9           MOV       A,R1
   \   00008A   7056         JNZ       ??ZDApp_LeaveUpdate_1
   2262                {
   2263                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2264                  {
   2265                    uint8 found;
   2266                    APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   \   00008C                ; Setup parameters for call to function APSME_GetRequest
   \   00008C   7412         MOV       A,#0x12
   \   00008E   12....       LCALL     ?XSTACK_DISP102_8
   \   000091   7A00         MOV       R2,#0x0
   \   000093   7B00         MOV       R3,#0x0
   \   000095   79AB         MOV       R1,#-0x55
   \   000097   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   2267                    
   2268                    APSME_SearchTCLinkKeyEntry(extAddr,&found,NULL);
   \   00009A                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   00009A   E4           CLR       A
   \   00009B   F5..         MOV       ?V4,A
   \   00009D   F5..         MOV       ?V5,A
   \   00009F   78..         MOV       R0,#?V4
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   7402         MOV       A,#0x2
   \   0000A6   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A9   EE           MOV       A,R6
   \   0000AA   FA           MOV       R2,A
   \   0000AB   EF           MOV       A,R7
   \   0000AC   FB           MOV       R3,A
   \   0000AD   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   0000B0   7402         MOV       A,#0x2
   \   0000B2   12....       LCALL     ?DEALLOC_XSTACK8
   2269                    
   2270                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   2271                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   2272                    // with legacy Coordinator devices which can only handle one or the other.
   2273                    if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY) && ( found == FALSE ) )
   \   0000B5   90....       MOV       DPTR,#zgApsLinkKeyType
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   6401         XRL       A,#0x1
   \   0000BB   7017         JNZ       ??ZDApp_LeaveUpdate_2
   \   0000BD   85..82       MOV       DPL,?XSP + 0
   \   0000C0   85..83       MOV       DPH,?XSP + 1
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   700E         JNZ       ??ZDApp_LeaveUpdate_2
   2274                    {
   2275                      req.apsSecure = FALSE;
   \   0000C6   7408         MOV       A,#0x8
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   E4           CLR       A
   \   0000CC   F0           MOVX      @DPTR,A
   2276          
   2277                      // send and APSME_UPDATE_DEVICE request to the trust center
   2278                      APSME_UpdateDeviceReq( &req );
   \   0000CD                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000CD   04           INC       A
   \   0000CE   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D1   12....       LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   2279                    }
   2280          
   2281                    // send the message APS encrypted
   2282                    req.apsSecure = TRUE;
   \                     ??ZDApp_LeaveUpdate_2:
   \   0000D4   7408         MOV       A,#0x8
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   7401         MOV       A,#0x1
   \   0000DB   F0           MOVX      @DPTR,A
   2283          
   2284                    // send and APSME_UPDATE_DEVICE request to the trust center
   2285                    APSME_UpdateDeviceReq( &req );
   \   0000DC                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000DC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000DF   12....       LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   2286                  }
   2287                  else
   2288                  {
   2289                    req.apsSecure = FALSE;
   2290          
   2291                    // send and APSME_UPDATE_DEVICE request to the trust center
   2292                    APSME_UpdateDeviceReq( &req );
   2293                  }
   2294                }
   2295              }
   2296          
   2297              NLME_RemoveChild( extAddr, removeChildren );
   \                     ??ZDApp_LeaveUpdate_1:
   \   0000E2                ; Setup parameters for call to function NLME_RemoveChild
   \   0000E2   A9..         MOV       R1,?V2
   \   0000E4   EE           MOV       A,R6
   \   0000E5   FA           MOV       R2,A
   \   0000E6   EF           MOV       A,R7
   \   0000E7   FB           MOV       R3,A
   \   0000E8   12....       LCALL     `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
   2298            }
   2299          
   2300            // Remove Routing table related entry
   2301            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \   0000EB                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000EB   7900         MOV       R1,#0x0
   \   0000ED   AA..         MOV       R2,?V0
   \   0000EF   AB..         MOV       R3,?V1
   \   0000F1   12....       LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2302          
   2303            // Remove entry from neighborTable
   2304            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   0000F4                ; Setup parameters for call to function nwkNeighborRemove
   \   0000F4   90....       MOV       DPTR,#_NIB + 33
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   FC           MOV       R4,A
   \   0000F9   A3           INC       DPTR
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   FD           MOV       R5,A
   \   0000FC   AA..         MOV       R2,?V0
   \   0000FE   AB..         MOV       R3,?V1
   \   000100   12....       LCALL     `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2305          
   2306            // Schedule to save data to NV
   2307            ZDApp_NwkWriteNVRequest();
   \   000103                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000103   12....       LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
   2308          }
   \   000106   741A         MOV       A,#0x1a
   \   000108   02....       LJMP      ??Subroutine52_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine72_0
   \   000003                ; // Fall through to label ??Subroutine72_0
   2309          
   2310          /*********************************************************************
   2311           * @fn      ZDApp_NetworkDiscoveryReq
   2312           *
   2313           * @brief   Request a network discovery.
   2314           *
   2315           * @param  scanChannels -
   2316           * @param  scanDuration -
   2317           *
   2318           * @return  ZStatus_t
   2319           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2320          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2321          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2322            // Setup optional filters - tbd
   2323          
   2324            // Request NLME network discovery
   2325            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   80..         SJMP      ??Subroutine63_0
   2326          }
   2327          
   2328          /*********************************************************************
   2329           * @fn      ZDApp_JoinReq
   2330           *
   2331           * @brief   Request the device to join a parent in a network.
   2332           *
   2333           * @param   channel -
   2334           * @param   panID -
   2335           *
   2336           * @return  ZStatus_t
   2337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine62_0
   \   000002                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine63_0
   \   000003                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2338          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2339                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2340          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   2341            // Sync up the node with the stack profile (In the case where a pro device
   2342            // joins a non-pro network, or verse versa)
   2343            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV       A,#0xf
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2344          
   2345            // Request NLME Join Request
   2346            return NLME_JoinRequest(extendedPanID, panID,channel,
   2347                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2348                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV       A,#0xe
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V3,A
   \   000021   78..         MOV       R0,#?V3
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV       A,#0xd
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
   \   000034   78..         MOV       R0,#?V3
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV       R1,?V2
   \   00003B   AC..         MOV       R4,?V0
   \   00003D   AD..         MOV       R5,?V1
   \   00003F   EE           MOV       A,R6
   \   000040   FA           MOV       R2,A
   \   000041   EF           MOV       A,R7
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046   80..         SJMP      ?Subroutine6
   2349          
   2350          }
   2351          
   2352          /*********************************************************************
   2353           * @fn      ZDApp_DeviceConfigured
   2354           *
   2355           * @brief   Check to see if the local device is configured (i.e., part
   2356           *          of a network).
   2357           *
   2358           * @param   none
   2359           *
   2360           * @return  TRUE if configured. FALSE, otherwise.
   2361           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2362          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2363          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2364            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   74FE         MOV       A,#-0x2
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   04           INC       A
   \   000015   12....       LCALL     ?Subroutine9 & 0xFFFF
   2365          
   2366            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2367                          sizeof( uint16), &nwkAddr );
   \                     ??CrossCallReturnLabel_3:
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   75..02       MOV       ?V0,#0x2
   \   00001E   75..00       MOV       ?V1,#0x0
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   7C14         MOV       R4,#0x14
   \   000028   7D00         MOV       R5,#0x0
   \   00002A   7A21         MOV       R2,#0x21
   \   00002C   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   2368          
   2369            // Does the NIB have anything more than default?
   2370            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   000032   85..82       MOV       DPL,?XSP + 0
   \   000035   85..83       MOV       DPH,?XSP + 1
   \   000038   E0           MOVX      A,@DPTR
   \   000039   64FE         XRL       A,#0xfe
   \   00003B   7003         JNZ       ??ZDApp_DeviceConfigured_0
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F4           CPL       A
   \                     ??ZDApp_DeviceConfigured_0:
   \   000040   7004         JNZ       ??ZDApp_DeviceConfigured_1
   \   000042   7900         MOV       R1,#0x0
   \   000044   8002         SJMP      ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000046   7901         MOV       R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000048   7402         MOV       A,#0x2
   \   00004A   02....       LJMP      ??Subroutine50_0 & 0xFFFF
   2371          }
   2372          
   2373          /*********************************************************************
   2374           * CALLBACK FUNCTIONS
   2375           */
   2376          
   2377          
   2378          /*********************************************************************
   2379           * @fn      ZDApp_SendEventMsg()
   2380           *
   2381           * @brief
   2382           *
   2383           *   Sends a Network Join message
   2384           *
   2385           * @param  cmd - command ID
   2386           * @param  len - length (in bytes) of the buf field
   2387           * @param  buf - buffer for the rest of the message.
   2388           *
   2389           * @return  none
   2390           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2391          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2392          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   2393            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000006                ; Setup parameters for call to function ZDApp_SendMsg
   \   000006   FB           MOV       R3,A
   \   000007   E9           MOV       A,R1
   \   000008   FA           MOV       R2,A
   \   000009   12....       LCALL     ?Subroutine28 & 0xFFFF
   2394          }
   \                     ??CrossCallReturnLabel_14:
   \   00000C   02....       LJMP      ??Subroutine47_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   \   000008   22           RET
   2395          
   2396          /*********************************************************************
   2397           * @fn      ZDApp_SendMsg()
   2398           *
   2399           * @brief   Sends a OSAL message
   2400           *
   2401           * @param  taskID - Where to send the message
   2402           * @param  cmd - command ID
   2403           * @param  len - length (in bytes) of the buf field
   2404           * @param  buf - buffer for the rest of the message.
   2405           *
   2406           * @return  none
   2407           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2408          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2409          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V5,R3
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V3,R5
   2410            osal_event_hdr_t *msgPtr;
   2411          
   2412            // Send the address to the task
   2413            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   AE..         MOV       R6,?V5
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   EB           MOV       A,R3
   \   000012   FA           MOV       R2,A
   \   000013   7B00         MOV       R3,#0x0
   \   000015   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000018   8A..         MOV       ?V0,R2
   \   00001A   8B..         MOV       ?V1,R3
   2414            if ( msgPtr )
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6033         JZ        ??ZDApp_SendMsg_0
   2415            {
   2416              if ( (len > 0) && (buf != NULL) )
   \   000020   EE           MOV       A,R6
   \   000021   601E         JZ        ??ZDApp_SendMsg_1
   \   000023   E5..         MOV       A,?V2
   \   000025   45..         ORL       A,?V3
   \   000027   6018         JZ        ??ZDApp_SendMsg_1
   2417                osal_memcpy( msgPtr, buf, len );
   \   000029                ; Setup parameters for call to function osal_memcpy
   \   000029   85....       MOV       ?V8,?V2
   \   00002C   85....       MOV       ?V9,?V3
   \   00002F   75..00       MOV       ?V10,#0x0
   \   000032   78..         MOV       R0,#?V8
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000037   EE           MOV       A,R6
   \   000038   FC           MOV       R4,A
   \   000039   7D00         MOV       R5,#0x0
   \   00003B   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   2418          
   2419              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000041   85..82       MOV       DPL,?V0
   \   000044   85..83       MOV       DPH,?V1
   \   000047   E5..         MOV       A,?V6
   \   000049   F0           MOVX      @DPTR,A
   2420              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004A                ; Setup parameters for call to function osal_msg_send
   \   00004A   AA..         MOV       R2,?V0
   \   00004C   AB..         MOV       R3,?V1
   \   00004E   A9..         MOV       R1,?V4
   \   000050   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2421            }
   2422          }
   \                     ??ZDApp_SendMsg_0:
   \   000053   7F0B         MOV       R7,#0xb
   \   000055   02....       LJMP      ?BANKED_LEAVE_XDATA
   2423          
   2424          /*********************************************************************
   2425           * Call Back Functions from NWK  - API
   2426           */
   2427          
   2428          /*********************************************************************
   2429           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2430           *
   2431           * @brief       This function returns a choice of PAN to join.
   2432           *
   2433           * @param       status - return status of the nwk discovery confirm
   2434           *
   2435           * @return      ZStatus_t
   2436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine60_0
   \   000003                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2437          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2438          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   2439            osal_event_hdr_t msg;
   2440          
   2441            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2442            // Send ZDO_MGMT_NWK_DISC_RSP back
   2443          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2444            if ( zdappMgmtNwkDiscReqInProgress )
   2445            {
   2446              zdappMgmtNwkDiscReqInProgress = false;
   2447              ZDO_FinishProcessingMgmtNwkDiscReq();
   2448            }
   2449            else
   2450          #endif
   2451            {
   2452              // Pass the confirm to another task if it registers the callback
   2453              // Otherwise, pass the confirm to ZDApp.
   2454              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV       DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000017   6009         JZ        ??ZDO_NetworkDiscoveryConfirmCB_0
   2455              {
   2456                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV       R2,?XSP + 0
   \   00001B   AB..         MOV       R3,?XSP + 1
   \   00001D   12....       LCALL     ?CALL_IND
   \   000020   8012         SJMP      ??CrossCallReturnLabel_15
   2457              }
   2458              else
   2459              {
   2460                // Otherwise, send scan confirm to ZDApp task to proceed
   2461                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   2462          
   2463                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000029                ; Setup parameters for call to function ZDApp_SendMsg
   \   000029   04           INC       A
   \   00002A   12....       LCALL     ?XSTACK_DISP102_8
   \   00002D   7B02         MOV       R3,#0x2
   \   00002F   7A01         MOV       R2,#0x1
   \   000031   12....       LCALL     ?Subroutine28 & 0xFFFF
   2464              }
   2465            }
   2466            return (ZSuccess);
   \                     ??CrossCallReturnLabel_15:
   \   000034   7900         MOV       R1,#0x0
   \   000036   7403         MOV       A,#0x3
   \   000038   02....       LJMP      ?Subroutine3 & 0xFFFF
   2467          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   E582         MOV       A,DPL
   \   00000A   4583         ORL       A,DPH
   \   00000C   22           RET
   2468          
   2469          /*********************************************************************
   2470           * @fn          ZDApp_NwkDescListProcessing
   2471           *
   2472           * @brief       This function process the network discovery result and select
   2473           *              a parent device to join itself.
   2474           *
   2475           * @param       none
   2476           *
   2477           * @return      ZStatus_t
   2478           */
   2479          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2480          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2481          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2482            networkDesc_t *pNwkDesc;
   2483            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV       ?V1,#0x0
   2484            uint8 stackProfile;
   2485            uint8 stackProfilePro;
   2486            uint8 selected;
   2487          
   2488            // Count the number of nwk descriptors in the list
   2489            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV       ?V2,R2
   \   00000D   8B..         MOV       ?V3,R3
   \   00000F   AE..         MOV       R6,?V2
   \   000011   AF..         MOV       R7,?V3
   \   000013   8005         SJMP      ??CrossCallReturnLabel_121
   2490            while (pNwkDesc)
   2491            {
   2492              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC       ?V1
   2493              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL     ?Subroutine23 & 0xFFFF
   2494            }
   \                     ??CrossCallReturnLabel_121:
   \   00001A   EE           MOV       A,R6
   \   00001B   4F           ORL       A,R7
   \   00001C   70F7         JNZ       ??ZDApp_NwkDescListProcessing_0
   2495          
   2496            // process discovery results
   2497            stackProfilePro = FALSE;
   \   00001E   75..00       MOV       ?V0,#0x0
   2498            selected = FALSE;
   2499          
   2500          
   2501            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV       ?V2,#0x0
   2502            {
   2503              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
   \   00002B   AE..         MOV       R6,?V4
   \   00002D   AF..         MOV       R7,?V5
   2504              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV       ?V3,#0x0
   \   000032   8019         SJMP      ??CrossCallReturnLabel_122
   2505              {
   2506                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2507                {
   2508                  // If the extended Pan ID is commissioned to a non zero value
   2509                  // Only join the Pan that has match EPID
   2510                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2511                    continue;
   2512          
   2513                }
   2514                else if ( zgConfigPANID != 0xFFFF )
   2515                {
   2516                  // PAN Id is preconfigured. check if it matches
   2517                  if ( pNwkDesc->panId != zgConfigPANID )
   2518                    continue;
   2519                }
   2520          
   2521                if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   2522                {
   2523                  // check that network is allowing joining
   2524                  if ( ZSTACK_ROUTER_BUILD )
   2525                  {
   2526                    if ( stackProfilePro == FALSE )
   2527                    {
   2528                      if ( !pNwkDesc->routerCapacity )
   2529                      {
   2530                        continue;
   2531                      }
   2532                    }
   2533                    else
   2534                    {
   2535                      if ( !pNwkDesc->deviceCapacity )
   2536                      {
   2537                        continue;
   2538                      }
   2539                    }
   2540                  }
   2541                  else if ( ZSTACK_END_DEVICE_BUILD )
   2542                  {
   2543                    if ( !pNwkDesc->deviceCapacity )
   2544                    {
   2545                      continue;
   2546                    }
   2547                  }
   2548                }
   2549          
   2550                // check version of zigbee protocol
   2551                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2552                  continue;
   2553          
   2554                // check version of stack profile
   2555                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2556                {
   2557                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2558                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6402         XRL       A,#0x2
   \   000037   7008         JNZ       ??ZDApp_NwkDescListProcessing_3
   \   000039   7401         MOV       A,#0x1
   \   00003B   68           XRL       A,R0
   \   00003C   7003         JNZ       ??ZDApp_NwkDescListProcessing_3
   2559                  {
   2560                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00003E   75..01       MOV       ?V0,#0x1
   2561                  }
   2562          
   2563                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000041   E5..         MOV       A,?V2
   \   000043   6003         JZ        $+5
   \   000045   02....       LJMP      ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000048   05..         INC       ?V3
   \   00004A   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00004D   E5..         MOV       A,?V3
   \   00004F   C3           CLR       C
   \   000050   95..         SUBB      A,?V1
   \   000052   4003         JC        $+5
   \   000054   02....       LJMP      ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000057                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000057   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000059   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00005B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005E   E9           MOV       A,R1
   \   00005F   6401         XRL       A,#0x1
   \   000061   7013         JNZ       ??ZDApp_NwkDescListProcessing_8
   \   000063                ; Setup parameters for call to function sAddrExtCmp
   \   000063   EE           MOV       A,R6
   \   000064   240B         ADD       A,#0xb
   \   000066   FC           MOV       R4,A
   \   000067   E4           CLR       A
   \   000068   3F           ADDC      A,R7
   \   000069   FD           MOV       R5,A
   \   00006A   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00006C   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006E   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000071   E9           MOV       A,R1
   \   000072   7021         JNZ       ??ZDApp_NwkDescListProcessing_9
   \   000074   80D2         SJMP      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000076   90....       MOV       DPTR,#zgConfigPANID
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F4           CPL       A
   \   00007B   7003         JNZ       ??ZDApp_NwkDescListProcessing_10
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F4           CPL       A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000080   6013         JZ        ??ZDApp_NwkDescListProcessing_9
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000089   90....       MOV       DPTR,#zgConfigPANID
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   68           XRL       A,R0
   \   00008E   7003         JNZ       ??ZDApp_NwkDescListProcessing_11
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   000093   70B3         JNZ       ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000095   90....       MOV       DPTR,#_NIB + 23
   \   000098   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00009B   8E82         MOV       DPL,R6
   \   00009D   8F83         MOV       DPH,R7
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   68           XRL       A,R0
   \   0000A8   7003         JNZ       ??ZDApp_NwkDescListProcessing_12
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000AD   700A         JNZ       ??ZDApp_NwkDescListProcessing_13
   \   0000AF   74FE         MOV       A,#-0x2
   \   0000B1   68           XRL       A,R0
   \   0000B2   7003         JNZ       ??ZDApp_NwkDescListProcessing_14
   \   0000B4   74FF         MOV       A,#-0x1
   \   0000B6   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000B7   7018         JNZ       ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000B9   E5..         MOV       A,?V0
   \   0000BB   8E82         MOV       DPL,R6
   \   0000BD   8F83         MOV       DPH,R7
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   7006         JNZ       ??ZDApp_NwkDescListProcessing_16
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   700A         JNZ       ??ZDApp_NwkDescListProcessing_15
   \   0000C7   02....       LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   0000CA   A3           INC       DPTR
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   7003         JNZ       $+5
   \   0000CE   02....       LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000D1   8E82         MOV       DPL,R6
   \   0000D3   8F83         MOV       DPH,R7
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F8           MOV       R0,A
   \   0000DC   90....       MOV       DPTR,#_NIB + 17
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   68           XRL       A,R0
   \   0000E1   6003         JZ        $+5
   \   0000E3   02....       LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \   0000E6   8E82         MOV       DPL,R6
   \   0000E8   8F83         MOV       DPH,R7
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F8           MOV       R0,A
   \   0000F2   90....       MOV       DPTR,#zgStackProfile
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   68           XRL       A,R0
   \   0000F7   6032         JZ        ??ZDApp_NwkDescListProcessing_5
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   6401         XRL       A,#0x1
   \   0000FC   6003         JZ        $+5
   \   0000FE   02....       LJMP      ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   000101   7402         MOV       A,#0x2
   \   000103   68           XRL       A,R0
   \   000104   6003         JZ        $+5
   \   000106   02....       LJMP      ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   000109   02....       LJMP      ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2564                  {
   2565                    continue;
   2566                  }
   2567                }
   2568          
   2569                break;
   2570              }
   2571          
   2572              if (i < ResultCount)
   2573              {
   2574               selected = TRUE;
   2575                break;
   2576              }
   2577          
   2578              // break if selected or stack profile pro wasn't found
   2579              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   00010C   E5..         MOV       A,?V0
   \   00010E   600C         JZ        ??ZDApp_NwkDescListProcessing_17
   2580              {
   2581                break;
   2582              }
   2583            }
   \   000110   05..         INC       ?V2
   \   000112   E5..         MOV       A,?V2
   \   000114   C3           CLR       C
   \   000115   9402         SUBB      A,#0x2
   \   000117   5003         JNC       $+5
   \   000119   02....       LJMP      ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2584          
   2585            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   00011C   E5..         MOV       A,?V1
   \   00011E   65..         XRL       A,?V3
   \   000120   7009         JNZ       ??ZDApp_NwkDescListProcessing_5
   2586            {
   2587              nwk_desc_list_free();
   \   000122                ; Setup parameters for call to function nwk_desc_list_free
   \   000122   12....       LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   2588              return (NULL);   // couldn't find appropriate PAN to join !
   \   000125   7A00         MOV       R2,#0x0
   \   000127   7B00         MOV       R3,#0x0
   \   000129   8004         SJMP      ??ZDApp_NwkDescListProcessing_18
   2589            }
   2590            else
   2591            {
   2592              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00012B   EE           MOV       A,R6
   \   00012C   FA           MOV       R2,A
   \   00012D   EF           MOV       A,R7
   \   00012E   FB           MOV       R3,A
   2593            }
   \                     ??ZDApp_NwkDescListProcessing_18:
   \   00012F   02....       LJMP      ?Subroutine1 & 0xFFFF
   2594          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009                REQUIRE ??Subroutine67_0
   \   000009                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
   2595          
   2596          /*********************************************************************
   2597           * @fn          ZDO_NetworkFormationConfirmCB
   2598           *
   2599           * @brief       This function reports the results of the request to
   2600           *              initialize a coordinator in a network.
   2601           *
   2602           * @param       Status - Result of NLME_NetworkFormationRequest()
   2603           *
   2604           * @return      none
   2605           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2606          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2607          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   2608            nwkStatus = (byte)Status;
   \   00000B   90....       MOV       DPTR,#nwkStatus
   \   00000E   F0           MOVX      @DPTR,A
   2609          
   2610            if ( Status == ZSUCCESS )
   \   00000F   6003         JZ        $+5
   \   000011   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2611            {
   2612              bdb_setNodeIsOnANetwork(TRUE);
   \   000014                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   2613              
   2614              if(ZG_DEVICE_COORDINATOR_TYPE)
   2615              {
   2616                // LED on shows Coordinator started
   2617                zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2618          
   2619                zdoHalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   2620          
   2621                  #if defined ( ZBIT )
   2622                      SIM_SetColor(0xd0ffd0);
   2623                  #endif
   2624          
   2625                if ( devState == DEV_HOLD )
   \   000019   90....       MOV       DPTR,#devState
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   7005         JNZ       ??ZDO_NetworkFormationConfirmCB_1
   2626                {
   2627                  ZDApp_ChangeState( DEV_COORD_STARTING );
   \   00001F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00001F   7908         MOV       R1,#0x8
   \   000021   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2628                }
   2629              }
   2630          
   2631              if(ZG_DEVICE_RTR_TYPE)
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   000024   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6007         JZ        ??ZDO_NetworkFormationConfirmCB_2
   \   00002A   6401         XRL       A,#0x1
   \   00002C   6003         JZ        $+5
   \   00002E   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2632              {
   2633                uint8 x;
   2634                uint8 tmpKey[SEC_KEY_LEN] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
   \                     ??ZDO_NetworkFormationConfirmCB_2:
   \   000031   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000034   7401         MOV       A,#0x1
   \   000036   12....       LCALL     ?XSTACK_DISP102_8
   \   000039   7410         MOV       A,#0x10
   \   00003B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   2635                
   2636                if(APSME_IsDistributedSecurity())
   \   00003E                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00003E   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000041   E9           MOV       A,R1
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2637                {
   2638                  //Check if we have an extended PANID assigned
   2639                  if(nwk_ExtPANIDValid( _NIB.extendedPANID ) == false)
   \   000047                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000047   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000049   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   00004B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00004E   E9           MOV       A,R1
   \   00004F   700B         JNZ       ??ZDO_NetworkFormationConfirmCB_3
   2640                  {
   2641                    //Set the extended PANID as the extended address
   2642                    osal_cpyExtAddr( _NIB.extendedPANID, aExtendedAddress );
   \   000051                ; Setup parameters for call to function sAddrExtCpy
   \   000051   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   000053   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   000055   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000057   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   000059   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2643                  } 
   2644                  
   2645                  ZMacSetReq(MAC_SUPERFRAME_PAN_COORD,0);
   \                     ??ZDO_NetworkFormationConfirmCB_3:
   \   00005C                ; Setup parameters for call to function ZMacSetReq
   \   00005C   7A00         MOV       R2,#0x0
   \   00005E   7B00         MOV       R3,#0x0
   \   000060   79F0         MOV       R1,#-0x10
   \   000062   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2646                  
   2647                  //Set the MAC address
   2648                  ZMacSetReq( ZMacShortAddress, (uint8 *)&(_NIB.nwkDevAddress) );
   \   000065                ; Setup parameters for call to function ZMacSetReq
   \   000065   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   000067   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   000069   7953         MOV       R1,#0x53
   \   00006B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2649          
   2650                  if ( _NIB.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   2651                    x = true;
   2652                  else
   2653                    x = false;
   \   00006E   90....       MOV       DPTR,#_NIB + 14
   \   000071   E0           MOVX      A,@DPTR
   \   000072   A2E3         MOV       C,0xE0 /* A   */.3
   \   000074   5004         JNC       ??ZDO_NetworkFormationConfirmCB_4
   \   000076   D2F0         SETB      B.0
   \   000078   8002         SJMP      ??ZDO_NetworkFormationConfirmCB_5
   \                     ??ZDO_NetworkFormationConfirmCB_4:
   \   00007A   C2F0         CLR       B.0
   \                     ??ZDO_NetworkFormationConfirmCB_5:
   \   00007C   A2F0         MOV       C,B.0
   \   00007E   E4           CLR       A
   \   00007F   33           RLC       A
   \   000080   85..82       MOV       DPL,?XSP + 0
   \   000083   85..83       MOV       DPH,?XSP + 1
   \   000086   F0           MOVX      @DPTR,A
   2654                  ZMacSetReq( ZMacRxOnIdle, &x );
   \   000087                ; Setup parameters for call to function ZMacSetReq
   \   000087   AA..         MOV       R2,?XSP + 0
   \   000089   AB..         MOV       R3,?XSP + 1
   \   00008B   7952         MOV       R1,#0x52
   \   00008D   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2655          
   2656                  // Change NIB state to router for restore
   2657                  _NIB.nwkState = NWK_ROUTER;
   \   000090   90....       MOV       DPTR,#_NIB + 35
   \   000093   7408         MOV       A,#0x8
   \   000095   F0           MOVX      @DPTR,A
   2658                  NLME_SetAssocFlags();
   \   000096                ; Setup parameters for call to function NLME_SetAssocFlags
   \   000096   12....       LCALL     `??NLME_SetAssocFlags::?relay`; Banked call to: NLME_SetAssocFlags
   2659          
   2660                  //Restore the nwk security material using the generic index
   2661                  ZDApp_RestoreNwkSecMaterial();
   \   000099                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   000099   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   2662                  
   2663                  //Be sure to store the nwk FrameCounter if
   2664                  if(nwkFrameCounter == 0)
   \   00009C   90....       MOV       DPTR,#nwkFrameCounter
   \   00009F   12....       LCALL     ?XLOAD_R0123
   \   0000A2   E8           MOV       A,R0
   \   0000A3   49           ORL       A,R1
   \   0000A4   4A           ORL       A,R2
   \   0000A5   4B           ORL       A,R3
   \   0000A6   700D         JNZ       ??ZDO_NetworkFormationConfirmCB_6
   2665                  {
   2666                    nwkFrameCounter = 1;
   \   0000A8   90....       MOV       DPTR,#nwkFrameCounter
   \   0000AB   7401         MOV       A,#0x1
   \   0000AD   F0           MOVX      @DPTR,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   E4           CLR       A
   \   0000B0   F0           MOVX      @DPTR,A
   \   0000B1   A3           INC       DPTR
   \   0000B2   F0           MOVX      @DPTR,A
   \   0000B3   A3           INC       DPTR
   \   0000B4   F0           MOVX      @DPTR,A
   2667                  }
   2668                  
   2669                  osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV | ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDO_NetworkFormationConfirmCB_6:
   \   0000B5                ; Setup parameters for call to function osal_set_event
   \   0000B5   7A00         MOV       R2,#0x0
   \   0000B7   7B03         MOV       R3,#0x3
   \   0000B9   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   2670                  
   2671                  ZDSecMgrGenerateRndKey(tmpKey);
   \                     ??CrossCallReturnLabel_143:
   \   0000BC                ; Setup parameters for call to function ZDSecMgrGenerateRndKey
   \   0000BC   7401         MOV       A,#0x1
   \   0000BE   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C1   12....       LCALL     `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
   2672                   
   2673                  //Set the nwk key as the default and initialize the keySeqNum
   2674                  SSP_UpdateNwkKey( tmpKey, 0 );
   \   0000C4                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000C4   7900         MOV       R1,#0x0
   \   0000C6   7401         MOV       A,#0x1
   \   0000C8   12....       LCALL     ?XSTACK_DISP101_8
   \   0000CB   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   2675                  if ( !_NIB.nwkKeyLoaded )
   \   0000CE   90....       MOV       DPTR,#_NIB + 61
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   7005         JNZ       ??ZDO_NetworkFormationConfirmCB_7
   2676                  {
   2677                    SSP_SwitchNwkKey( 0 );
   \   0000D4                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000D4   7900         MOV       R1,#0x0
   \   0000D6   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   2678                  }
   2679                  
   2680                  // Clear copy in RAM after use 
   2681                  osal_memset(tmpKey,0,SEC_KEY_LEN);
   \                     ??ZDO_NetworkFormationConfirmCB_7:
   \   0000D9                ; Setup parameters for call to function osal_memset
   \   0000D9   7C10         MOV       R4,#0x10
   \   0000DB   7D00         MOV       R5,#0x0
   \   0000DD   7900         MOV       R1,#0x0
   \   0000DF   7401         MOV       A,#0x1
   \   0000E1   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E4   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2682                  
   2683                  //Success formation of distributed nwk
   2684                  bdb_nwkFormationAttempt(TRUE);
   \   0000E7                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   0000E7   7901         MOV       R1,#0x1
   \   0000E9   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
   2685                }
   2686              }
   2687            }
   2688          
   2689            else
   2690            {
   2691              #if defined(BLINK_LEDS)
   2692                zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2693              #endif
   2694            }
   2695          
   2696          
   2697            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   0000EC                ; Setup parameters for call to function osal_set_event
   \   0000EC   7A02         MOV       R2,#0x2
   \   0000EE   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   2698          }
   \                     ??CrossCallReturnLabel_140:
   \   0000F1   7411         MOV       A,#0x11
   \   0000F3   02....       LJMP      ??Subroutine46_0 & 0xFFFF
   2699          
   2700          /****************************************************************************
   2701           * @fn          ZDApp_beaconIndProcessing
   2702           *
   2703           * @brief       This function processes the incoming beacon indication.
   2704           *
   2705           *              When another task (MT or App) is registered to process
   2706           *              beacon indication themselves, this function will parse the
   2707           *              beacon payload and pass the beacon descriptor to that task
   2708           *              If no other tasks registered, this function will process
   2709           *              the beacon payload and generate the network descriptor link
   2710           *              list.
   2711           *
   2712           * @param
   2713           *
   2714           * @return      none
   2715           *
   2716           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2717          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2718          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2719            // Pass the beacon Indication to another task if it registers the callback
   2720            // Otherwise, process the beacon notification here.
   2721            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV       DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00000F   6006         JZ        ??ZDO_beaconNotifyIndCB_0
   2722            {
   2723              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL     ?CALL_IND
   \   000014   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2724            }
   2725            else
   2726            {
   2727              networkDesc_t *pNwkDesc;
   2728              networkDesc_t *pLastNwkDesc;
   2729              uint8 found = false;
   2730          
   2731              // Add the network to the Network Descriptor List
   2732              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   000017   90....       MOV       DPTR,#NwkDescList
   \   00001A   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   2733              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_118:
   \   00001D   90....       MOV       DPTR,#NwkDescList
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V2,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V3,A
   \   000027   EA           MOV       A,R2
   \   000028   2404         ADD       A,#0x4
   \   00002A   F5..         MOV       ?V6,A
   \   00002C   E4           CLR       A
   \   00002D   35..         ADDC      A,?V1
   \   00002F   F5..         MOV       ?V7,A
   \   000031   EA           MOV       A,R2
   \   000032   2402         ADD       A,#0x2
   \   000034   F5..         MOV       ?V4,A
   \   000036   E4           CLR       A
   \   000037   35..         ADDC      A,?V1
   \   000039   F5..         MOV       ?V5,A
   \   00003B   802F         SJMP      ??CrossCallReturnLabel_123
   2734              while (pNwkDesc)
   2735              {
   2736                if ((pNwkDesc->panId == pBeacon->panID) &&
   2737                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000044   85..82       MOV       DPL,?V4
   \   000047   85..83       MOV       DPH,?V5
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   68           XRL       A,R0
   \   00004C   7003         JNZ       ??ZDO_beaconNotifyIndCB_3
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   69           XRL       A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   000051   7012         JNZ       ??ZDO_beaconNotifyIndCB_4
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F8           MOV       R0,A
   \   00005B   85..82       MOV       DPL,?V6
   \   00005E   85..83       MOV       DPH,?V7
   \   000061   E0           MOVX      A,@DPTR
   \   000062   68           XRL       A,R0
   \   000063   6067         JZ        ??ZDO_beaconNotifyIndCB_5
   2738                {
   2739                  found = true;
   2740                  break;
   2741                }
   2742                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000065   8E..         MOV       ?V2,R6
   \   000067   8F..         MOV       ?V3,R7
   2743                pNwkDesc = pNwkDesc->nextDesc;
   \   000069   12....       LCALL     ?Subroutine23 & 0xFFFF
   2744              }
   \                     ??CrossCallReturnLabel_123:
   \   00006C   EE           MOV       A,R6
   \   00006D   4F           ORL       A,R7
   \   00006E   70CD         JNZ       ??ZDO_beaconNotifyIndCB_2
   2745          
   2746              // If no existing descriptor found, make a new one and add to the list
   2747              if (found == false)
   2748              {
   2749                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   000070                ; Setup parameters for call to function osal_mem_alloc
   \   000070   7A16         MOV       R2,#0x16
   \   000072   7B00         MOV       R3,#0x0
   \   000074   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000077   8A..         MOV       ?V8,R2
   \   000079   8B..         MOV       ?V9,R3
   \   00007B   AE..         MOV       R6,?V8
   \   00007D   AF..         MOV       R7,?V9
   2750                if ( !pNwkDesc )
   \   00007F   EA           MOV       A,R2
   \   000080   4F           ORL       A,R7
   \   000081   7003         JNZ       $+5
   \   000083   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2751                {
   2752                  // Memory alloc failed, discard this beacon
   2753                  return;
   2754                }
   2755          
   2756                // Clear the network descriptor
   2757                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000086                ; Setup parameters for call to function osal_memset
   \   000086   7C16         MOV       R4,#0x16
   \   000088   7D00         MOV       R5,#0x0
   \   00008A   7900         MOV       R1,#0x0
   \   00008C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2758          
   2759                // Initialize the descriptor
   2760                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00008F   8E82         MOV       DPL,R6
   \   000091   8F83         MOV       DPH,R7
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   74FE         MOV       A,#-0x2
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   A3           INC       DPTR
   \   00009E   04           INC       A
   \   00009F   F0           MOVX      @DPTR,A
   2761                pNwkDesc->chosenRouterDepth = 0xFF;
   \   0000A0   8E82         MOV       DPL,R6
   \   0000A2   8F83         MOV       DPH,R7
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   F0           MOVX      @DPTR,A
   2762          
   2763                // Save new entry into the descriptor list
   2764                if ( !NwkDescList )
   \   0000AF   90....       MOV       DPTR,#NwkDescList
   \   0000B2   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000B5   7005         JNZ       ??ZDO_beaconNotifyIndCB_6
   2765                {
   2766                  NwkDescList = pNwkDesc;
   \   0000B7   90....       MOV       DPTR,#NwkDescList
   \   0000BA   800B         SJMP      ??ZDO_beaconNotifyIndCB_7
   2767                }
   2768                else
   2769                {
   2770                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000BC   E5..         MOV       A,?V2
   \   0000BE   2414         ADD       A,#0x14
   \   0000C0   F582         MOV       DPL,A
   \   0000C2   E4           CLR       A
   \   0000C3   35..         ADDC      A,?V3
   \   0000C5   F583         MOV       DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000C7   EE           MOV       A,R6
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   EF           MOV       A,R7
   \   0000CB   F0           MOVX      @DPTR,A
   2771                }
   2772              }
   2773          
   2774              // Update the descriptor with the incoming beacon
   2775              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000CC   85..82       MOV       DPL,?V0
   \   0000CF   85..83       MOV       DPH,?V1
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000DE   A3           INC       DPTR
   \   0000DF   F0           MOVX      @DPTR,A
   2776              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000E0   E5..         MOV       A,?V0
   \   0000E2   2408         ADD       A,#0x8
   \   0000E4   F8           MOV       R0,A
   \   0000E5   E4           CLR       A
   \   0000E6   35..         ADDC      A,?V1
   \   0000E8   F9           MOV       R1,A
   \   0000E9   8882         MOV       DPL,R0
   \   0000EB   F583         MOV       DPH,A
   \   0000ED   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000F0   F0           MOVX      @DPTR,A
   2777              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   0000F1   85..82       MOV       DPL,?V6
   \   0000F4   85..83       MOV       DPH,?V7
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   8E82         MOV       DPL,R6
   \   0000FA   8F83         MOV       DPH,R7
   \   0000FC   A3           INC       DPTR
   \   0000FD   A3           INC       DPTR
   \   0000FE   F0           MOVX      @DPTR,A
   2778              pNwkDesc->panId          = pBeacon->panID;
   \   0000FF   85..82       MOV       DPL,?V4
   \   000102   85..83       MOV       DPH,?V5
   \   000105   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000108   8E82         MOV       DPL,R6
   \   00010A   8F83         MOV       DPH,R7
   \   00010C   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   2779              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_152:
   \   00010F   E5..         MOV       A,?V0
   \   000111   240C         ADD       A,#0xc
   \   000113   F582         MOV       DPL,A
   \   000115   E4           CLR       A
   \   000116   35..         ADDC      A,?V1
   \   000118   F583         MOV       DPH,A
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   C0E0         PUSH      A
   \   00011D   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000120   D0E0         POP       A
   \   000122   F0           MOVX      @DPTR,A
   2780          
   2781              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2782              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000123   EE           MOV       A,R6
   \   000124   240B         ADD       A,#0xb
   \   000126   FA           MOV       R2,A
   \   000127   E4           CLR       A
   \   000128   3F           ADDC      A,R7
   \   000129   FB           MOV       R3,A
   \   00012A   8882         MOV       DPL,R0
   \   00012C   8983         MOV       DPH,R1
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   6401         XRL       A,#0x1
   \   000131   600E         JZ        ??ZDO_beaconNotifyIndCB_8
   2783              {
   2784                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000133                ; Setup parameters for call to function sAddrExtCpy
   \   000133   E5..         MOV       A,?V0
   \   000135   240D         ADD       A,#0xd
   \   000137   FC           MOV       R4,A
   \   000138   E4           CLR       A
   \   000139   35..         ADDC      A,?V1
   \   00013B   FD           MOV       R5,A
   \   00013C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00013F   8009         SJMP      ??ZDO_beaconNotifyIndCB_9
   2785              }
   2786              else
   2787              {
   2788                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000141                ; Setup parameters for call to function osal_memset
   \   000141   7C08         MOV       R4,#0x8
   \   000143   7D00         MOV       R5,#0x0
   \   000145   79FF         MOV       R1,#-0x1
   \   000147   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2789              }
   2790          
   2791              // check if this device is a better choice to join...
   2792              // ...dont bother checking assocPermit flag is doing a rejoin
   2793              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2794                  ( ( pBeacon->permitJoining == TRUE ) || ( bdb_isDeviceNonFactoryNew() ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00014A   E5..         MOV       A,?V0
   \   00014C   240A         ADD       A,#0xa
   \   00014E   F8           MOV       R0,A
   \   00014F   E4           CLR       A
   \   000150   35..         ADDC      A,?V1
   \   000152   88..         MOV       ?V2,R0
   \   000154   F5..         MOV       ?V3,A
   \   000156   8882         MOV       DPL,R0
   \   000158   F583         MOV       DPH,A
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   F8           MOV       R0,A
   \   00015C   90....       MOV       DPTR,#gMIN_TREE_LQI
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   C3           CLR       C
   \   000161   98           SUBB      A,R0
   \   000162   4003         JC        $+5
   \   000164   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000167   85..82       MOV       DPL,?V0
   \   00016A   85..83       MOV       DPH,?V1
   \   00016D   A3           INC       DPTR
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   E0           MOVX      A,@DPTR
   \   000173   6401         XRL       A,#0x1
   \   000175   6009         JZ        ??ZDO_beaconNotifyIndCB_10
   \   000177                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   000177   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   00017A   E9           MOV       A,R1
   \   00017B   7003         JNZ       $+5
   \   00017D   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2795              {
   2796                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000180   C2F0         CLR       B.0
   2797                uint8 capacity = FALSE;
   2798          
   2799          #if defined ( ZIGBEEPRO )
   2800                if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2801                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2802                    ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2803                     (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000182   85..82       MOV       DPL,?V2
   \   000185   85..83       MOV       DPH,?V3
   \   000188   E0           MOVX      A,@DPTR
   \   000189   F5..         MOV       ?V4,A
   \   00018B   EE           MOV       A,R6
   \   00018C   2409         ADD       A,#0x9
   \   00018E   F8           MOV       R0,A
   \   00018F   E4           CLR       A
   \   000190   3F           ADDC      A,R7
   \   000191   F9           MOV       R1,A
   \   000192   8882         MOV       DPL,R0
   \   000194   F583         MOV       DPH,A
   \   000196   E0           MOVX      A,@DPTR
   \   000197   F5..         MOV       ?V5,A
   \   000199   EE           MOV       A,R6
   \   00019A   240A         ADD       A,#0xa
   \   00019C   FA           MOV       R2,A
   \   00019D   E4           CLR       A
   \   00019E   3F           ADDC      A,R7
   \   00019F   FB           MOV       R3,A
   \   0001A0   E5..         MOV       A,?V0
   \   0001A2   240B         ADD       A,#0xb
   \   0001A4   FC           MOV       R4,A
   \   0001A5   E4           CLR       A
   \   0001A6   35..         ADDC      A,?V1
   \   0001A8   FD           MOV       R5,A
   \   0001A9   E5..         MOV       A,?V5
   \   0001AB   C3           CLR       C
   \   0001AC   95..         SUBB      A,?V4
   \   0001AE   500C         JNC       ??ZDO_beaconNotifyIndCB_11
   \   0001B0   8C82         MOV       DPL,R4
   \   0001B2   8D83         MOV       DPH,R5
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   C3           CLR       C
   \   0001B6   9414         SUBB      A,#0x14
   \   0001B8   4019         JC        ??ZDO_beaconNotifyIndCB_12
   \   0001BA   8019         SJMP      ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   0001BC   E5..         MOV       A,?V5
   \   0001BE   65..         XRL       A,?V4
   \   0001C0   7013         JNZ       ??ZDO_beaconNotifyIndCB_13
   \   0001C2   8A82         MOV       DPL,R2
   \   0001C4   8B83         MOV       DPH,R3
   \   0001C6   E0           MOVX      A,@DPTR
   \   0001C7   F5..         MOV       ?V4,A
   \   0001C9   8C82         MOV       DPL,R4
   \   0001CB   8D83         MOV       DPH,R5
   \   0001CD   E0           MOVX      A,@DPTR
   \   0001CE   C3           CLR       C
   \   0001CF   95..         SUBB      A,?V4
   \   0001D1   5002         JNC       ??ZDO_beaconNotifyIndCB_13
   2804                {
   2805                  selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001D3   D2F0         SETB      B.0
   2806                }
   2807          #else
   2808                if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2809                {
   2810                  selected = TRUE;
   2811                }
   2812          #endif
   2813          
   2814                if ( ZSTACK_ROUTER_BUILD )
   2815                {
   2816                  capacity = pBeacon->routerCapacity;
   2817                }
   2818                else if ( ZSTACK_END_DEVICE_BUILD )
   2819                {
   2820                  capacity = pBeacon->deviceCapacity;
   2821                }
   2822          
   2823                if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001D5   E5..         MOV       A,?V0
   \   0001D7   2406         ADD       A,#0x6
   \   0001D9   F5..         MOV       ?V4,A
   \   0001DB   E4           CLR       A
   \   0001DC   35..         ADDC      A,?V1
   \   0001DE   F5..         MOV       ?V5,A
   \   0001E0   85..82       MOV       DPL,?V4
   \   0001E3   F583         MOV       DPH,A
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   701B         JNZ       ??ZDO_beaconNotifyIndCB_14
   \   0001E8   85..82       MOV       DPL,?V0
   \   0001EB   85..83       MOV       DPH,?V1
   \   0001EE   E0           MOVX      A,@DPTR
   \   0001EF   F5..         MOV       ?V6,A
   \   0001F1   A3           INC       DPTR
   \   0001F2   E0           MOVX      A,@DPTR
   \   0001F3   F5..         MOV       ?V7,A
   \   0001F5   90....       MOV       DPTR,#_NIB + 23
   \   0001F8   E0           MOVX      A,@DPTR
   \   0001F9   65..         XRL       A,?V6
   \   0001FB   7004         JNZ       ??ZDO_beaconNotifyIndCB_15
   \   0001FD   A3           INC       DPTR
   \   0001FE   E0           MOVX      A,@DPTR
   \   0001FF   65..         XRL       A,?V7
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   000201   7039         JNZ       ??ZDO_beaconNotifyIndCB_16
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   000203   A2F0         MOV       C,B.0
   \   000205   5035         JNC       ??ZDO_beaconNotifyIndCB_16
   2824                {
   2825                  // this is the new chosen router for joining...
   2826                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   000207   85..82       MOV       DPL,?V0
   \   00020A   85..83       MOV       DPH,?V1
   \   00020D   E0           MOVX      A,@DPTR
   \   00020E   F5..         MOV       ?V6,A
   \   000210   A3           INC       DPTR
   \   000211   E0           MOVX      A,@DPTR
   \   000212   F5..         MOV       ?V7,A
   \   000214   8E82         MOV       DPL,R6
   \   000216   8F83         MOV       DPH,R7
   \   000218   A3           INC       DPTR
   \   000219   A3           INC       DPTR
   \   00021A   A3           INC       DPTR
   \   00021B   A3           INC       DPTR
   \   00021C   A3           INC       DPTR
   \   00021D   A3           INC       DPTR
   \   00021E   A3           INC       DPTR
   \   00021F   E5..         MOV       A,?V6
   \   000221   F0           MOVX      @DPTR,A
   \   000222   A3           INC       DPTR
   \   000223   E5..         MOV       A,?V7
   \   000225   F0           MOVX      @DPTR,A
   2827                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \   000226   85..82       MOV       DPL,?V2
   \   000229   85..83       MOV       DPH,?V3
   \   00022C   E0           MOVX      A,@DPTR
   \   00022D   8882         MOV       DPL,R0
   \   00022F   8983         MOV       DPH,R1
   \   000231   F0           MOVX      @DPTR,A
   2828                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   000232   8C82         MOV       DPL,R4
   \   000234   8D83         MOV       DPH,R5
   \   000236   E0           MOVX      A,@DPTR
   \   000237   8A82         MOV       DPL,R2
   \   000239   8B83         MOV       DPH,R3
   \   00023B   F0           MOVX      @DPTR,A
   2829                }
   2830          
   2831                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   00023C   85..82       MOV       DPL,?V0
   \   00023F   85..83       MOV       DPH,?V1
   \   000242   A3           INC       DPTR
   \   000243   A3           INC       DPTR
   \   000244   A3           INC       DPTR
   \   000245   A3           INC       DPTR
   \   000246   A3           INC       DPTR
   \   000247   A3           INC       DPTR
   \   000248   A3           INC       DPTR
   \   000249   E0           MOVX      A,@DPTR
   \   00024A   600B         JZ        ??ZDO_beaconNotifyIndCB_17
   2832                  pNwkDesc->deviceCapacity = 1;
   \   00024C   8E82         MOV       DPL,R6
   \   00024E   8F83         MOV       DPH,R7
   \   000250   A3           INC       DPTR
   \   000251   A3           INC       DPTR
   \   000252   A3           INC       DPTR
   \   000253   A3           INC       DPTR
   \   000254   7401         MOV       A,#0x1
   \   000256   F0           MOVX      @DPTR,A
   2833          
   2834                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   000257   85..82       MOV       DPL,?V4
   \   00025A   85..83       MOV       DPH,?V5
   \   00025D   E0           MOVX      A,@DPTR
   \   00025E   600A         JZ        ??ZDO_beaconNotifyIndCB_1
   2835                  pNwkDesc->routerCapacity = 1;
   \   000260   8E82         MOV       DPL,R6
   \   000262   8F83         MOV       DPH,R7
   \   000264   A3           INC       DPTR
   \   000265   A3           INC       DPTR
   \   000266   A3           INC       DPTR
   \   000267   7401         MOV       A,#0x1
   \   000269   F0           MOVX      @DPTR,A
   2836              }
   2837            }
   2838          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   00026A   7F0A         MOV       R7,#0xa
   \   00026C   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET
   2839          
   2840          /*********************************************************************
   2841           * @fn          ZDO_StartRouterConfirmCB
   2842           *
   2843           * @brief       This function reports the results of the request to
   2844           *              start functioning as a router in a network.
   2845           *
   2846           * @param       Status - Result of NLME_StartRouterRequest()
   2847           *
   2848           * @return      none
   2849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2850          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2851          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2852            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2853          
   2854            if ( Status == ZSUCCESS )
   \   00000A   700B         JNZ       ??ZDO_StartRouterConfirmCB_0
   2855            {
   2856              // LED on shows Router started
   2857              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2858              zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2859              if ( devState == DEV_HOLD )
   \   00000C   90....       MOV       DPTR,#devState
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   7005         JNZ       ??ZDO_StartRouterConfirmCB_0
   2860              {
   2861                ZDApp_ChangeState( DEV_END_DEVICE );
   \   000012                ; Setup parameters for call to function ZDApp_ChangeState
   \   000012   7906         MOV       R1,#0x6
   \   000014   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2862              }
   2863            }
   2864          #if defined(BLINK_LEDS)
   2865            else
   2866            {
   2867              zdoHalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2868            }
   2869          #endif
   2870          
   2871            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A20         MOV       R2,#0x20
   \   000019   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   2872          }
   \                     ??CrossCallReturnLabel_141:
   \   00001C   02....       LJMP      ??Subroutine47_0 & 0xFFFF
   2873          
   2874          /*********************************************************************
   2875           * @fn          ZDO_JoinConfirmCB
   2876           *
   2877           * @brief       This function allows the next higher layer to be notified
   2878           *              of the results of its request to join itself or another
   2879           *              device to a network.
   2880           *
   2881           * @param       Status - Result of NLME_JoinRequest()
   2882           *
   2883           * @return      none
   2884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7405         MOV       A,#0x5
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2885          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2886          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2887            (void)PanId;  // remove if this parameter is used.
   2888          
   2889            nwkStatus = (byte)Status;
   \   00000C   90....       MOV       DPTR,#nwkStatus
   \   00000F   F0           MOVX      @DPTR,A
   2890          
   2891            if ( Status == ZSUCCESS )
   \   000010   7014         JNZ       ??ZDO_JoinConfirmCB_0
   2892            {
   2893              if ( ZSTACK_END_DEVICE_BUILD
   2894                || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2895              {
   2896                neighborEntry_t *pItem;
   2897          
   2898                // We don't need the neighbor table entries.
   2899                // Clear the neighbor Table to remove beacon information
   2900                nwkNeighborInitTable();
   2901          
   2902                // Force a neighbor table entry for the parent
   2903                pItem = nwkNeighborFindEmptySlot();
   2904                if ( pItem != NULL )
   2905                {
   2906                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   2907                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   2908                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   2909                  pItem->panId = _NIB. nwkPanId;
   2910                  pItem->linkInfo.rxLqi = DEF_LQI;
   2911                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   2912                  pItem->linkInfo.txCost = DEF_LINK_COST;
   2913                }
   2914              }
   2915          
   2916              if ( (devState == DEV_HOLD) )
   \   000012   90....       MOV       DPTR,#devState
   \   000015   E0           MOVX      A,@DPTR
   \   000016   7005         JNZ       ??ZDO_JoinConfirmCB_1
   2917              {
   2918                ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000018                ; Setup parameters for call to function ZDApp_ChangeState
   \   000018   7903         MOV       R1,#0x3
   \   00001A   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2919              }
   2920          
   2921              if ( !ZG_SECURE_ENABLED )
   2922              {
   2923                // Notify to save info into NV
   2924                ZDApp_NVUpdate();
   2925              }
   2926          
   2927              NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDO_JoinConfirmCB_1:
   \   00001D                ; Setup parameters for call to function NLME_SetPollRate
   \   00001D   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000020   12....       LCALL     ?XLOAD_R2345
   \   000023   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2928            }
   2929          
   2930            // Pass the join confirm to higher layer if callback registered
   2931            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_0:
   \   000026   90....       MOV       DPTR,#zdoCBFunc + 8
   \   000029   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00002C   602F         JZ        ??ZDO_JoinConfirmCB_2
   2932            {
   2933              zdoJoinCnf_t joinCnf;
   2934          
   2935              joinCnf.status = Status;
   \   00002E   EE           MOV       A,R6
   \   00002F   85..82       MOV       DPL,?XSP + 0
   \   000032   85..83       MOV       DPH,?XSP + 1
   \   000035   F0           MOVX      @DPTR,A
   2936              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   000036   90....       MOV       DPTR,#_NIB + 20
   \   000039   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00003C   7401         MOV       A,#0x1
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   2937              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_153:
   \   000044   90....       MOV       DPTR,#_NIB + 23
   \   000047   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00004A   7403         MOV       A,#0x3
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   2938          
   2939              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_154:
   \   000052                ; Setup parameters for indirect call
   \   000052   AA..         MOV       R2,?XSP + 0
   \   000054   AB..         MOV       R3,?XSP + 1
   \   000056   8882         MOV       DPL,R0
   \   000058   8983         MOV       DPH,R1
   \   00005A   12....       LCALL     ?CALL_IND
   2940            }
   2941            
   2942            // Notify ZDApp
   2943            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_2:
   \   00005D                ; Setup parameters for call to function ZDApp_SendMsg
   \   00005D   7C00         MOV       R4,#0x0
   \   00005F   7D00         MOV       R5,#0x0
   \   000061   7B02         MOV       R3,#0x2
   \   000063   7A02         MOV       R2,#0x2
   \   000065   12....       LCALL     ?Subroutine28 & 0xFFFF
   2944          
   2945          }
   \                     ??CrossCallReturnLabel_16:
   \   000068   02....       LJMP      ?Subroutine0 & 0xFFFF
   2946          
   2947          /*********************************************************************
   2948           * @fn          ZDO_PermitJoinCB
   2949           *
   2950           * @brief      This function is called when there is a change in the
   2951           *             device's permit join status.
   2952           *
   2953           * @param       duration - the new duration
   2954           *
   2955           * @return      none
   2956           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2957          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2958          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   2959            // Pass the Permit Join status to higher layer if callback registered
   2960            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV       DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000017   6007         JZ        ??ZDO_PermitJoinCB_0
   2961            {
   2962              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV       R2,?XSP + 0
   \   00001B   AB..         MOV       R3,?XSP + 1
   \   00001D   12....       LCALL     ?CALL_IND
   2963            }
   2964          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000020   7401         MOV       A,#0x1
   \   000022   02....       LJMP      ?Subroutine3 & 0xFFFF
   2965          
   2966          /*********************************************************************
   2967           * @fn          ZDO_AddrChangeIndicationCB
   2968           *
   2969           * @brief       This function notifies the application that this
   2970           *              device's address has changed.  Could happen in
   2971           *              a network with stochastic addressing (PRO).
   2972           *
   2973           * @param       newAddr - the new address
   2974           *
   2975           * @return      none
   2976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2977          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2978          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2979            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2980            epList_t *pItem = epList;
   \   000009   90....       MOV       DPTR,#epList
   \   00000C   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   2981          
   2982            // Notify to save info into NV
   2983            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_119:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2984          
   2985            // Notify the applications
   2986            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000015   8041         SJMP      ??CrossCallReturnLabel_120
   2987          
   2988            while (pItem != NULL)
   2989            {
   2990              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000017   EE           MOV       A,R6
   \   000018   2402         ADD       A,#0x2
   \   00001A   F8           MOV       R0,A
   \   00001B   E4           CLR       A
   \   00001C   3F           ADDC      A,R7
   \   00001D   88..         MOV       ?V2,R0
   \   00001F   F5..         MOV       ?V3,A
   \   000021   8882         MOV       DPL,R0
   \   000023   F583         MOV       DPH,A
   \   000025   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000028   6027         JZ        ??ZDO_AddrChangeIndicationCB_1
   2991              {
   2992                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   00002A                ; Setup parameters for call to function osal_msg_allocate
   \   00002A   7A04         MOV       R2,#0x4
   \   00002C   7B00         MOV       R3,#0x0
   \   00002E   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2993                if (pZDOAddrChangeMsg != NULL)
   \   000031   EA           MOV       A,R2
   \   000032   4B           ORL       A,R3
   \   000033   601C         JZ        ??ZDO_AddrChangeIndicationCB_1
   2994                {
   2995                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   74D6         MOV       A,#-0x2a
   \   00003B   F0           MOVX      @DPTR,A
   2996                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   00003C   12....       LCALL     ?Subroutine10 & 0xFFFF
   2997                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   \                     ??CrossCallReturnLabel_126:
   \   00003F                ; Setup parameters for call to function osal_msg_send
   \   00003F   85..82       MOV       DPL,?V2
   \   000042   85..83       MOV       DPH,?V3
   \   000045   12....       LCALL     ?Subroutine22 & 0xFFFF
   2998                }
   2999              }
   \                     ??CrossCallReturnLabel_150:
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00004D   F9           MOV       R1,A
   \   00004E   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   3000              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000051   8E82         MOV       DPL,R6
   \   000053   8F83         MOV       DPH,R7
   \   000055   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   3001            }
   \                     ??CrossCallReturnLabel_120:
   \   000058   EE           MOV       A,R6
   \   000059   4F           ORL       A,R7
   \   00005A   70BB         JNZ       ??ZDO_AddrChangeIndicationCB_0
   3002          
   3003            // Send out a device announce
   3004            ZDApp_AnnounceNewAddress();
   \   00005C                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00005C   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   3005          }
   \   00005F                REQUIRE ?Subroutine1
   \   00005F                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine68_0
   \   000002                ; // Fall through to label ??Subroutine68_0
   3006          
   3007          /*********************************************************************
   3008           * @fn          ZDO_JoinIndicationCB
   3009           *
   3010           * @brief       This function allows the next higher layer of a
   3011           *              coordinator to be notified of a remote join request.
   3012           *
   3013           * @param       ShortAddress - 16-bit address
   3014           * @param       ExtendedAddress - IEEE (64-bit) address
   3015           * @param       CapabilityFlags - Association Capability Flags
   3016           * @param       type - of joining -
   3017           *                          NWK_ASSOC_JOIN
   3018           *                          NWK_ASSOC_REJOIN_UNSECURE
   3019           *                          NWK_ASSOC_REJOIN_SECURE
   3020           *
   3021           * @return      ZStatus_t
   3022           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3023          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   3024                                          uint8 CapabilityFlags, uint8 type)
   3025          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine17 & 0xFFFF
   3026            (void)ExtendedAddress;
   3027            //check if the device is leaving before responding to rejoin request
   3028            if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
   \                     ??CrossCallReturnLabel_76:
   \   000008   6005         JZ        ??ZDO_JoinIndicationCB_0
   3029            {
   3030              return ZFailure; // device leaving , hence do not allow rejoin
   \   00000A   7901         MOV       R1,#0x1
   \   00000C   02....       LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
   3031            }
   3032          
   3033          #if ZDO_NV_SAVE_RFDs
   3034              (void)CapabilityFlags;
   3035          
   3036          #else  // if !ZDO_NV_SAVE_RFDs
   3037              if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   3038          #endif
   3039              {
   3040                ZDApp_NVUpdate();  // Notify to save info into NV.
   \                     ??ZDO_JoinIndicationCB_0:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000012   7410         MOV       A,#0x10
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   3041              }
   3042          
   3043              if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   3044              {
   3045                if ( type == NWK_ASSOC_JOIN ||
   3046                    type == NWK_ASSOC_REJOIN_UNSECURE ||
   3047                      type == NWK_ASSOC_REJOIN_SECURE )
   \   000019   600D         JZ        ??ZDO_JoinIndicationCB_2
   \   00001B   7401         MOV       A,#0x1
   \   00001D   68           XRL       A,R0
   \   00001E   6008         JZ        ??ZDO_JoinIndicationCB_2
   \   000020   7402         MOV       A,#0x2
   \   000022   68           XRL       A,R0
   \   000023   6003         JZ        $+5
   \   000025   02....       LJMP      ??ZDO_JoinIndicationCB_3 & 0xFFFF
   3048                {
   3049                  uint16 timeToFire;
   3050                  ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   3051          
   3052                  pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_2:
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   7A06         MOV       R2,#0x6
   \   00002A   7B00         MOV       R3,#0x0
   \   00002C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002F   8A..         MOV       ?V2,R2
   \   000031   8B..         MOV       ?V3,R3
   \   000033   AE..         MOV       R6,?V2
   \   000035   AF..         MOV       R7,?V3
   3053          
   3054                  if ( pNewDevice == NULL )
   \   000037   EA           MOV       A,R2
   \   000038   4F           ORL       A,R7
   \   000039   7004         JNZ       ??ZDO_JoinIndicationCB_4
   3055                  {
   3056                    // Memory alloc failed
   3057                    return ZMemError;
   \   00003B   7910         MOV       R1,#0x10
   \   00003D   8073         SJMP      ??ZDO_JoinIndicationCB_1
   3058                  }
   3059          
   3060                  // Add the new device to the New Device List
   3061                  if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_4:
   \   00003F   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000042   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000045   7006         JNZ       ??ZDO_JoinIndicationCB_5
   3062                  {
   3063                    // The list is empty, add the first element
   3064                    ZDApp_NewDeviceList = pNewDevice;
   \   000047   EA           MOV       A,R2
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   EB           MOV       A,R3
   \   00004B   801B         SJMP      ??ZDO_JoinIndicationCB_6
   3065                  }
   3066                  else
   3067                  {
   3068                    pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_5:
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   FA           MOV       R2,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   8003         SJMP      ??ZDO_JoinIndicationCB_7
   3069          
   3070                    // Walk the list to last element
   3071                    while ( pDeviceList->next )
   3072                    {
   3073                      pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_8:
   \   000053   E8           MOV       A,R0
   \   000054   FA           MOV       R2,A
   \   000055   E9           MOV       A,R1
   \                     ??ZDO_JoinIndicationCB_7:
   \   000056   FB           MOV       R3,A
   3074                    }
   \   000057   8A82         MOV       DPL,R2
   \   000059   8B83         MOV       DPH,R3
   \   00005B   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00005E   70F3         JNZ       ??ZDO_JoinIndicationCB_8
   3075          
   3076                    // Add new device at the end
   3077                    pDeviceList->next = pNewDevice;
   \   000060   8A82         MOV       DPL,R2
   \   000062   8B83         MOV       DPH,R3
   \   000064   EE           MOV       A,R6
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   EF           MOV       A,R7
   \                     ??ZDO_JoinIndicationCB_6:
   \   000068   F0           MOVX      @DPTR,A
   3078                  }
   3079          
   3080                  // get the remaining time of the timer
   3081                  timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   000069                ; Setup parameters for call to function osal_get_timeoutEx
   \   000069   7A40         MOV       R2,#0x40
   \   00006B   7B00         MOV       R3,#0x0
   \   00006D   90....       MOV       DPTR,#ZDAppTaskID
   \   000070   12....       LCALL     ?Subroutine27 & 0xFFFF
   3082          
   3083                  pNewDevice->next = NULL;
   \                     ??CrossCallReturnLabel_13:
   \   000073   8E82         MOV       DPL,R6
   \   000075   8F83         MOV       DPH,R7
   \   000077   E4           CLR       A
   \   000078   F0           MOVX      @DPTR,A
   \   000079   A3           INC       DPTR
   \   00007A   F0           MOVX      @DPTR,A
   3084                  pNewDevice->shortAddr = ShortAddress;
   \   00007B   8E82         MOV       DPL,R6
   \   00007D   8F83         MOV       DPH,R7
   \   00007F   12....       LCALL     ?Subroutine10 & 0xFFFF
   3085                  pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \                     ??CrossCallReturnLabel_127:
   \   000082   7458         MOV       A,#0x58
   \   000084   C3           CLR       C
   \   000085   95..         SUBB      A,?V4
   \   000087   F8           MOV       R0,A
   \   000088   7402         MOV       A,#0x2
   \   00008A   95..         SUBB      A,?V5
   \   00008C   F9           MOV       R1,A
   \   00008D   8E82         MOV       DPL,R6
   \   00008F   8F83         MOV       DPH,R7
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   E8           MOV       A,R0
   \   000096   F0           MOVX      @DPTR,A
   \   000097   A3           INC       DPTR
   \   000098   E9           MOV       A,R1
   \   000099   F0           MOVX      @DPTR,A
   3086          
   3087                  // Start the timer only if there is no pending timer
   3088                  if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \   00009A   7458         MOV       A,#0x58
   \   00009C   68           XRL       A,R0
   \   00009D   7003         JNZ       ??ZDO_JoinIndicationCB_9
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   69           XRL       A,R1
   \                     ??ZDO_JoinIndicationCB_9:
   \   0000A2   700C         JNZ       ??ZDO_JoinIndicationCB_3
   3089                  {
   3090                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000A4                ; Setup parameters for call to function osal_start_timerEx
   \   0000A4   90....       MOV       DPTR,#__Constant_258
   \   0000A7   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000AA   12....       LCALL     ?Subroutine14 & 0xFFFF
   3091                  }
   3092                }
   3093              }
   \                     ??CrossCallReturnLabel_80:
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
   3094          
   3095              return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000B0   7900         MOV       R1,#0x0
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000B2   02....       LJMP      ??Subroutine43_0 & 0xFFFF
   3096          
   3097          }
   3098          
   3099          /*********************************************************************
   3100           * @fn          ZDO_ConcentratorIndicationCB
   3101           *
   3102           * @brief       This function allows the next higher layer of a
   3103           *              device to be notified of existence of the concentrator.
   3104           *
   3105           * @param       nwkAddr - 16-bit NWK address of the concentrator
   3106           * @param       extAddr - pointer to extended Address
   3107           *                        NULL if not available
   3108           * @param       pktCost - PktCost from RREQ
   3109           *
   3110           * @return      void
   3111           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3112          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   3113          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3114            zdoConcentratorInd_t conInd;
   3115          
   3116            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   3117            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_156:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   EC           MOV       A,R4
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   ED           MOV       A,R5
   \   000016   F0           MOVX      @DPTR,A
   3118            conInd.pktCost = pktCost;
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E9           MOV       A,R1
   \   00001D   F0           MOVX      @DPTR,A
   3119          
   3120            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000024   6007         JZ        ??ZDO_ConcentratorIndicationCB_0
   3121            {
   3122              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     ?CALL_IND
   3123            }
   3124          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002D   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine73_0
   \   000006                ; // Fall through to label ??Subroutine73_0
   3125          
   3126          /*********************************************************************
   3127           * @fn          ZDO_LeaveCnf
   3128           *
   3129           * @brief       This function allows the next higher layer to be
   3130           *              notified of the results of its request for this or
   3131           *              a child device to leave the network.
   3132           *
   3133           * @param       cnf - NLME_LeaveCnf_t
   3134           *
   3135           * @return      none
   3136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine65_0
   \   000004                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3137          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   3138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3139            // Check for this device
   3140            if ( osal_ExtAddrEqual( cnf->extAddr,
   3141                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   AC..         MOV       R4,?V0
   \   000012   AD..         MOV       R5,?V1
   \   000014   EE           MOV       A,R6
   \   000015   240B         ADD       A,#0xb
   \   000017   F5..         MOV       ?V2,A
   \   000019   E4           CLR       A
   \   00001A   3F           ADDC      A,R7
   \   00001B   F5..         MOV       ?V3,A
   \   00001D   EE           MOV       A,R6
   \   00001E   2402         ADD       A,#0x2
   \   000020   F5..         MOV       ?V0,A
   \   000022   E4           CLR       A
   \   000023   3F           ADDC      A,R7
   \   000024   F5..         MOV       ?V1,A
   \   000026                ; Setup parameters for call to function sAddrExtCmp
   \   000026   AA..         MOV       R2,?V0
   \   000028   FB           MOV       R3,A
   \   000029   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002C   E9           MOV       A,R1
   \   00002D   6401         XRL       A,#0x1
   \   00002F   7018         JNZ       ??ZDO_LeaveCnf_0
   3142            {
   3143              // Pass the leave confirm to higher layer if callback registered
   3144              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   3145                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   000031   90....       MOV       DPTR,#zdoCBFunc + 10
   \   000034   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000037   600B         JZ        ??ZDO_LeaveCnf_1
   \   000039                ; Setup parameters for indirect call
   \   000039   EE           MOV       A,R6
   \   00003A   FA           MOV       R2,A
   \   00003B   EF           MOV       A,R7
   \   00003C   FB           MOV       R3,A
   \   00003D   12....       LCALL     ?CALL_IND
   \   000040   EA           MOV       A,R2
   \   000041   4B           ORL       A,R3
   \   000042   7032         JNZ       ??ZDO_LeaveCnf_2
   3146              {
   3147                // Prepare to leave with reset
   3148                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000044                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000044   12....       LCALL     ?Subroutine29 & 0xFFFF
   3149              }
   3150            }
   \                     ??CrossCallReturnLabel_17:
   \   000047   802D         SJMP      ??ZDO_LeaveCnf_2
   3151            else if ( ZSTACK_ROUTER_BUILD )
   3152            {
   3153              // Remove device address(optionally descendents) from data
   3154              ZDApp_LeaveUpdate( cnf->dstAddr,
   3155                                 cnf->extAddr,
   3156                                 cnf->removeChildren,
   3157                                 cnf->rejoin );
   \                     ??ZDO_LeaveCnf_0:
   \   000049                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000049   85..82       MOV       DPL,?V2
   \   00004C   85..83       MOV       DPH,?V3
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F5..         MOV       ?V2,A
   \   000052   78..         MOV       R0,#?V2
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   8E82         MOV       DPL,R6
   \   000059   8F83         MOV       DPH,R7
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F9           MOV       R1,A
   \   000067   AC..         MOV       R4,?V0
   \   000069   AD..         MOV       R5,?V1
   \   00006B   12....       LCALL     ?Subroutine21 & 0xFFFF
   3158            }
   \                     ??CrossCallReturnLabel_105:
   \   00006E   12....       LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   \   000071   7401         MOV       A,#0x1
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   3159          }
   \                     ??ZDO_LeaveCnf_2:
   \   000076   02....       LJMP      ??Subroutine63_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F9           MOV       R1,A
   \   000008   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   00000B   22           RET
   3160          
   3161          /*********************************************************************
   3162           * @fn          ZDO_LeaveInd
   3163           *
   3164           * @brief       This function allows the next higher layer of a
   3165           *              device to be notified of a remote leave request or
   3166           *              indication.
   3167           *
   3168           * @param       ind - NLME_LeaveInd_t
   3169           *
   3170           * @return      none
   3171           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3172          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   3173          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   3174            uint8 leave;
   3175          
   3176            // NWK layer filters out illegal requests
   3177            if ( ind->request == TRUE )
   \   00000E   EA           MOV       A,R2
   \   00000F   240B         ADD       A,#0xb
   \   000011   F8           MOV       R0,A
   \   000012   E4           CLR       A
   \   000013   3F           ADDC      A,R7
   \   000014   88..         MOV       ?V0,R0
   \   000016   F5..         MOV       ?V1,A
   \   000018   EA           MOV       A,R2
   \   000019   240C         ADD       A,#0xc
   \   00001B   08           INC       R0
   \   00001C   E4           CLR       A
   \   00001D   3F           ADDC      A,R7
   \   00001E   88..         MOV       ?V2,R0
   \   000020   F5..         MOV       ?V3,A
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6401         XRL       A,#0x1
   \   000033   703D         JNZ       ??ZDO_LeaveInd_0
   3178            {
   3179              byte temp = FALSE;
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   E4           CLR       A
   \   00003B   F0           MOVX      @DPTR,A
   3180              
   3181              // Only respond if we are not rejoining the network
   3182              if ( ind->rejoin == FALSE )
   \   00003C   8882         MOV       DPL,R0
   \   00003E   85..83       MOV       DPH,?V3
   \   000041   E0           MOVX      A,@DPTR
   \   000042   701F         JNZ       ??ZDO_LeaveInd_1
   3183              {
   3184                // Notify network of leave
   3185                NLME_LeaveRsp_t rsp;
   3186                rsp.rejoin = ind->rejoin;
   \   000044   7401         MOV       A,#0x1
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   E4           CLR       A
   \   00004A   F0           MOVX      @DPTR,A
   3187          
   3188                if ( ZSTACK_ROUTER_BUILD )
   3189                {
   3190                  rsp.removeChildren = ind->removeChildren;
   \   00004B   85..82       MOV       DPL,?V0
   \   00004E   85..83       MOV       DPH,?V1
   \   000051   E0           MOVX      A,@DPTR
   \   000052   85..82       MOV       DPL,?XSP + 0
   \   000055   85..83       MOV       DPH,?XSP + 1
   \   000058   F0           MOVX      @DPTR,A
   3191                }
   3192                else if ( ZSTACK_END_DEVICE_BUILD )
   3193                {
   3194                  NLME_SetResponseRate(0);
   3195                  NLME_SetQueuedPollRate(0);
   3196                  rsp.removeChildren = 0;
   3197                }
   3198                
   3199                bdb_setFN();
   \   000059                ; Setup parameters for call to function bdb_setFN
   \   000059   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   3200                 
   3201                NLME_LeaveRsp( &rsp );
   \   00005C                ; Setup parameters for call to function NLME_LeaveRsp
   \   00005C   AA..         MOV       R2,?XSP + 0
   \   00005E   AB..         MOV       R3,?XSP + 1
   \   000060   12....       LCALL     `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   3202              }
   3203          
   3204              if ( ZSTACK_END_DEVICE_BUILD )
   3205              {
   3206                // Stop polling and get ready to reset
   3207                NLME_SetPollRate( 0 );
   3208              }
   3209          
   3210              // Prepare to leave with reset
   3211              ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_1:
   \   000063                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000063   12....       LCALL     ?Subroutine29 & 0xFFFF
   3212              
   3213              //Turn on the radio to avoid sending packets after sending the leave    
   3214              ZMacSetReq(ZMacRxOnIdle, &temp);
   \                     ??CrossCallReturnLabel_18:
   \   000066                ; Setup parameters for call to function ZMacSetReq
   \   000066   7402         MOV       A,#0x2
   \   000068   12....       LCALL     ?XSTACK_DISP101_8
   \   00006B   7952         MOV       R1,#0x52
   \   00006D   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000070   8051         SJMP      ??ZDO_LeaveInd_2
   3215            }
   3216            else
   3217            {
   3218              leave = FALSE;
   3219          
   3220              // Check if this device needs to leave as a child or descendent
   3221              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000072                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000072   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000075   8A..         MOV       ?V4,R2
   \   000077   8B..         MOV       ?V5,R3
   \   000079   85..82       MOV       DPL,?V0
   \   00007C   85..83       MOV       DPH,?V1
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F9           MOV       R1,A
   \   000081   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000084   E5..         MOV       A,?V4
   \   000086   6A           XRL       A,R2
   \   000087   7003         JNZ       ??ZDO_LeaveInd_3
   \   000089   E5..         MOV       A,?V5
   \   00008B   6B           XRL       A,R3
   \                     ??ZDO_LeaveInd_3:
   \   00008C   7018         JNZ       ??ZDO_LeaveInd_4
   3222              {
   3223                if ( ( ind->removeChildren == TRUE )   )
   \   00008E   7401         MOV       A,#0x1
   \   000090   69           XRL       A,R1
   \   000091   600E         JZ        ??ZDO_LeaveInd_5
   3224                {
   3225                  leave = TRUE;
   3226                }
   3227                else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
   \   000093   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000096   700E         JNZ       ??ZDO_LeaveInd_4
   3228                {
   3229                  // old parents is leaving the network, child needs to search for a new parent
   3230                  ind->rejoin = TRUE;
   \   000098   85..82       MOV       DPL,?V2
   \   00009B   85..83       MOV       DPH,?V3
   \   00009E   7401         MOV       A,#0x1
   \   0000A0   F0           MOVX      @DPTR,A
   3231                  leave = TRUE;
   3232                }
   3233          
   3234              }
   3235              else if ( ind->removeChildren == TRUE )
   3236              {
   3237                // Check NWK address allocation algorithm
   3238                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   3239              }
   3240          
   3241              if ( leave == TRUE )
   3242              {
   3243                // Prepare to leave with reset
   3244                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_5:
   \   0000A1                ; Setup parameters for call to function ZDApp_LeaveReset
   \   0000A1   12....       LCALL     ?Subroutine29 & 0xFFFF
   3245              }
   \                     ??CrossCallReturnLabel_19:
   \   0000A4   801D         SJMP      ??ZDO_LeaveInd_2
   3246              else
   3247              {
   3248                // Remove device address(optionally descendents) from data
   3249                ZDApp_LeaveUpdate( ind->srcAddr,
   3250                                   ind->extAddr,
   3251                                   ind->removeChildren,
   3252                                   ind->rejoin );
   \                     ??ZDO_LeaveInd_4:
   \   0000A6                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   0000A6   85..82       MOV       DPL,?V2
   \   0000A9   85..83       MOV       DPH,?V3
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F5..         MOV       ?V0,A
   \   0000AF   78..         MOV       R0,#?V0
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B4   EE           MOV       A,R6
   \   0000B5   2402         ADD       A,#0x2
   \   0000B7   FC           MOV       R4,A
   \   0000B8   E4           CLR       A
   \   0000B9   3F           ADDC      A,R7
   \   0000BA   FD           MOV       R5,A
   \   0000BB   12....       LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   \   0000BE   7401         MOV       A,#0x1
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
   3253              }
   3254            }
   3255          
   3256            // Pass the leave indication to higher layer if callback registered.
   3257            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_2:
   \   0000C3   90....       MOV       DPTR,#zdoCBFunc + 12
   \   0000C6   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000C9   6007         JZ        ??ZDO_LeaveInd_6
   3258            {
   3259              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000CB                ; Setup parameters for indirect call
   \   0000CB   EE           MOV       A,R6
   \   0000CC   FA           MOV       R2,A
   \   0000CD   EF           MOV       A,R7
   \   0000CE   FB           MOV       R3,A
   \   0000CF   12....       LCALL     ?CALL_IND
   3260            }
   3261          }
   \                     ??ZDO_LeaveInd_6:
   \   0000D2   7403         MOV       A,#0x3
   \   0000D4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D7   02....       LJMP      ?Subroutine1 & 0xFFFF
   3262          
   3263          /*********************************************************************
   3264           * @fn          ZDO_SyncIndicationCB
   3265           *
   3266           * @brief       This function allows the next higher layer of a
   3267           *              coordinator to be notified of a loss of synchronization
   3268           *                          with the parent/child device.
   3269           *
   3270           * @param       type: 0 - child; 1 - parent
   3271           *
   3272           *
   3273           * @return      none
   3274           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3275          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   3276          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3277            (void)shortAddr;  // Remove this line if this parameter is used.
   3278          
   3279            if ( ZSTACK_END_DEVICE_BUILD
   3280              || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   3281            {
   3282              if ( type == 1 && retryCnt == 0 )
   3283              {
   3284                // We lost contact with our parent.  Clear the neighbor Table.
   3285                nwkNeighborInitTable();
   3286                
   3287                //If we are Factory new, then report fail on association
   3288                if(!bdb_isDeviceNonFactoryNew())
   3289                {
   3290                  bdb_nwkAssocAttemt(FALSE);
   3291                }
   3292          #if (ZG_BUILD_ENDDEVICE_TYPE)
   3293                else
   3294                {
   3295                  //We lost our parent
   3296                  bdb_parentLost();
   3297                }
   3298          #endif
   3299              }
   3300            }
   3301          }
   \   000000   02....       LJMP      ?BRET
   3302          
   3303          /*********************************************************************
   3304           * @fn          ZDO_ManytoOneFailureIndicationCB
   3305           *
   3306           * @brief       This function allows the next higher layer of a
   3307           *              concentrator to be notified of a many-to-one route
   3308           *              failure.
   3309           *
   3310           * @param       none
   3311           *
   3312           *
   3313           * @return      none
   3314           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3315          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3316          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3317            // By default, the concentrator automatically redo many-to-one route
   3318            // discovery to update all many-to-one routes in the network
   3319            // If you want anything processing other than the default,
   3320            // please replace the following code.
   3321          
   3322            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL     `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   3323          }
   \   000007   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   3324          
   3325          /*********************************************************************
   3326           * @fn          ZDO_PollConfirmCB
   3327           *
   3328           * @brief       This function allows the next higher layer to be
   3329           *              notified of a Poll Confirm.
   3330           *
   3331           * @param       none
   3332           *
   3333           * @return      none
   3334           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3335          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3336          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3337            (void)status;  // Remove this line if this parameter is used.
   3338            return;
   \   000000   02....       LJMP      ?BRET
   3339          }
   3340          
   3341          /*********************************************************************
   3342           * @fn          ZDO_NetworkStatusCB
   3343           *
   3344           * @brief       Network Status Callback function
   3345           *
   3346           * @param       nwkDstAddr - message's destination address- used to determine
   3347           *                           if the message was intended for this device or
   3348           *                           a sleeping end device.
   3349           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3350           * @param       dstAddr - the destination address related to the status code
   3351           *
   3352           * @return      none
   3353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3354          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3355          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3356            (void)dstAddr;     // Remove this line if this parameter is used.
   3357          
   3358            if ( (nwkDstAddr == NLME_GetShortAddr())
   3359                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   3360            {
   3361              // Routing error for dstAddr, this is informational and a Route
   3362              // Request should happen automatically.
   3363            }
   3364          }
   \   000007   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   3365          
   3366          /******************************************************************************
   3367           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3368           *
   3369           * @brief       Stub routine implemented by NHLE. NHLE should call
   3370           *              <AddrMgrWriteNV> when appropriate.
   3371           *
   3372           * @param       none
   3373           *
   3374           * @return      none
   3375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3376          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3377          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3378          #if defined ( NV_RESTORE )
   3379            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00000B   7003         JNZ       ??AddrMgrWriteNVRequest_0
   3380            {
   3381              // Trigger to save info into NV
   3382              ZDApp_NVUpdate();
   \   00000D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000D   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3383            }
   3384          #endif
   3385          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000010   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   3386          
   3387          /*********************************************************************
   3388           * Call Back Functions from Security  - API
   3389           */
   3390          
   3391           /*********************************************************************
   3392           * @fn          ZDO_UpdateDeviceIndication
   3393           *
   3394           * @brief       This function notifies the "Trust Center" of a
   3395           *              network when a device joins or leaves the network.
   3396           *
   3397           * @param       extAddr - pointer to 64 bit address of new device
   3398           * @param       status  - 0 if a new device joined securely
   3399           *                      - 1 if a new device joined un-securely
   3400           *                      - 2 if a device left the network
   3401           *
   3402           * @return      true if newly joined device should be allowed to
   3403           *                                              remain on network
   3404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3405          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3406          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3407            // can implement a network access policy based on the
   3408            // IEEE address of newly joining devices...
   3409            (void)extAddr;
   3410            (void)status;
   3411          
   3412            return ZSuccess;
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
   3413          }
   3414          
   3415          /*********************************************************************
   3416           * @fn          ZDApp_InMsgCB
   3417           *
   3418           * @brief       This function is called to pass up any message that is
   3419           *              not yet supported.  This allows for the developer to
   3420           *              support features themselves..
   3421           *
   3422           * @return      none
   3423           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3424          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3425          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3426            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EA           MOV       A,R2
   \   00000A   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00000D   5480         ANL       A,#0x80
   \   00000F   704B         JNZ       ??ZDApp_InMsgCB_0
   3427            {
   3428              // Handle the response message
   3429            }
   3430            else
   3431            {
   3432              // Handle the request message by sending a generic "not supported".
   3433              // Device Announce doesn't have a response.
   3434              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000011   EA           MOV       A,R2
   \   000012   240B         ADD       A,#0xb
   \   000014   F582         MOV       DPL,A
   \   000016   E4           CLR       A
   \   000017   3F           ADDC      A,R7
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   703F         JNZ       ??ZDApp_InMsgCB_0
   \   00001D   7413         MOV       A,#0x13
   \   00001F   68           XRL       A,R0
   \   000020   7001         JNZ       ??ZDApp_InMsgCB_1
   \   000022   E9           MOV       A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   000023   6037         JZ        ??ZDApp_InMsgCB_0
   3435              {
   3436                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3437                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000025                ; Setup parameters for call to function ZDP_GenericRsp
   \   000025   E8           MOV       A,R0
   \   000026   F5..         MOV       ?V0,A
   \   000028   E9           MOV       A,R1
   \   000029   4480         ORL       A,#0x80
   \   00002B   F5..         MOV       ?V1,A
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   E4           CLR       A
   \   000033   F5..         MOV       ?V0,A
   \   000035   F5..         MOV       ?V1,A
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   EA           MOV       A,R2
   \   00003D   240E         ADD       A,#0xe
   \   00003F   F582         MOV       DPL,A
   \   000041   E4           CLR       A
   \   000042   3F           ADDC      A,R7
   \   000043   F583         MOV       DPH,A
   \   000045   E0           MOVX      A,@DPTR
   \   000046   FD           MOV       R5,A
   \   000047   7C84         MOV       R4,#-0x7c
   \   000049   EA           MOV       A,R2
   \   00004A   2402         ADD       A,#0x2
   \   00004C   FA           MOV       R2,A
   \   00004D   E4           CLR       A
   \   00004E   3F           ADDC      A,R7
   \   00004F   FB           MOV       R3,A
   \   000050   12....       LCALL     ?Subroutine35 & 0xFFFF
   3438              }
   3439            }
   \                     ??CrossCallReturnLabel_25:
   \   000053   F9           MOV       R1,A
   \   000054   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000057   7404         MOV       A,#0x4
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   3440          }
   \                     ??ZDApp_InMsgCB_0:
   \   00005C   02....       LJMP      ??Subroutine51_0 & 0xFFFF
   3441          
   3442          
   3443          /*********************************************************************
   3444           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3445           *
   3446           * @brief   Changes the Match Descriptor Response permission.
   3447           *
   3448           * @param   endpoint - endpoint to allow responses
   3449           * @param   action - true to allow responses, false to not
   3450           *
   3451           * @return  none
   3452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3453          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3454          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3455            // Store the action
   3456            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL     `??afSetMatch::?relay`; Banked call to: afSetMatch
   3457          }
   \   000008   02....       LJMP      ??Subroutine47_0 & 0xFFFF
   3458          
   3459          /*********************************************************************
   3460           * @fn      ZDApp_NetworkInit()
   3461           *
   3462           * @brief   Used to start the network joining process
   3463           *
   3464           * @param   delay - mSec delay to wait before starting
   3465           *
   3466           * @return  none
   3467           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3468          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3469          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3470            if ( delay )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   6018         JZ        ??ZDApp_NetworkInit_0
   3471            {
   3472              // Wait awhile before starting the device
   3473              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV       ?V0,R2
   \   00000B   8B..         MOV       ?V1,R3
   \   00000D   E4           CLR       A
   \   00000E   F5..         MOV       ?V2,A
   \   000010   F5..         MOV       ?V3,A
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV       R2,#0x1
   \   000019   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   3474            }
   \                     ??CrossCallReturnLabel_82:
   \   00001C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001F   8005         SJMP      ??CrossCallReturnLabel_142
   3475            else
   3476            {
   3477              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   000021                ; Setup parameters for call to function osal_set_event
   \   000021   7A01         MOV       R2,#0x1
   \   000023   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   3478            }
   3479          }
   \                     ??CrossCallReturnLabel_142:
   \   000026   02....       LJMP      ??Subroutine63_0 & 0xFFFF
   3480          
   3481          /*********************************************************************
   3482           * @fn      ZDApp_NwkStateUpdateCB()
   3483           *
   3484           * @brief   This function notifies that this device's network
   3485           *          state info has been changed.
   3486           *
   3487           * @param   none
   3488           *
   3489           * @return  none
   3490           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3491          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3492          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3493            // Notify to save info into NV
   3494            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00000B   7003         JNZ       ??ZDApp_NwkStateUpdateCB_0
   3495            {
   3496              // Trigger to save info into NV
   3497              ZDApp_NVUpdate();
   \   00000D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000D   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3498            }
   3499          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000010   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   3500          
   3501          /*********************************************************************
   3502           * @fn      ZDApp_NodeProfileSync()
   3503           *
   3504           * @brief   Sync node with stack profile.
   3505           *
   3506           * @param   stackProfile - stack profile of the network to join
   3507           *
   3508           * @return  none
   3509           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3510          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3511          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3512            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000D   501A         JNC       ??ZDApp_NodeProfileSync_0
   3513            {
   3514              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV       DPTR,#zgStackProfile
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6E           XRL       A,R6
   \   000014   6013         JZ        ??ZDApp_NodeProfileSync_0
   3515              {
   3516                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   54F8         ANL       A,#0xf8
   \   00001C   4402         ORL       A,#0x2
   \   00001E   F0           MOVX      @DPTR,A
   3517                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV       A,#0xc
   \   000024   F0           MOVX      @DPTR,A
   3518                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3519              }
   3520            }
   3521          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP      ??Subroutine47_0 & 0xFFFF
   3522          
   3523          /*********************************************************************
   3524           * @fn      ZDApp_StartJoiningCycle()
   3525           *
   3526           * @brief   Starts the joining cycle of a device.  This will only
   3527           *          continue an already started (or stopped) joining cycle.
   3528           *
   3529           * @param   none
   3530           *
   3531           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3533          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3534          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3535            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6005         JZ        ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7011         JNZ       ??ZDApp_StartJoiningCycle_1
   3536            {
   3537              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV       DPTR,#continueJoining
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   3538              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3539          
   3540              return ( TRUE );
   \   00001E   7901         MOV       R1,#0x1
   \   000020   8002         SJMP      ??ZDApp_StartJoiningCycle_2
   3541            }
   3542            else
   3543              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV       R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   3544          }
   3545          
   3546          /*********************************************************************
   3547           * @fn      ZDApp_StopJoiningCycle()
   3548           *
   3549           * @brief   Stops the joining or rejoining process of a device.
   3550           *
   3551           * @param   none
   3552           *
   3553           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3554           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3555          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3556          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3557            if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   600A         JZ        ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   6005         JZ        ??ZDApp_StopJoiningCycle_0
   \   000011   E0           MOVX      A,@DPTR
   \   000012   640C         XRL       A,#0xc
   \   000014   7009         JNZ       ??ZDApp_StopJoiningCycle_1
   3558            {
   3559              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000016   90....       MOV       DPTR,#continueJoining
   \   000019   E4           CLR       A
   \   00001A   F0           MOVX      @DPTR,A
   3560              return ( TRUE );
   \   00001B   7901         MOV       R1,#0x1
   \   00001D   8002         SJMP      ??ZDApp_StopJoiningCycle_2
   3561            }
   3562            else
   3563              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001F   7900         MOV       R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000021   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   3564          }
   3565          
   3566          /*********************************************************************
   3567           * @fn      ZDApp_AnnounceNewAddress()
   3568           *
   3569           * @brief   Send Device Announce and hold all transmissions for
   3570           *          new address timeout.
   3571           *
   3572           * @param   none
   3573           *
   3574           * @return  none
   3575           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3576          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3577          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3578          #if defined ( ZIGBEEPRO )
   3579            // Turn off data request hold
   3580            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV       R2,#0x0
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3581          #endif
   3582          
   3583            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3584                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000F   8A..         MOV       ?V0,R2
   \   000011   8B..         MOV       ?V1,R3
   \   000013   AE..         MOV       R6,?V0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV       ?V0,#0x0
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F9           MOV       R1,A
   \   000025   EE           MOV       A,R6
   \   000026   FC           MOV       R4,A
   \   000027   AD..         MOV       R5,?V1
   \   000029   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00002C   7401         MOV       A,#0x1
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   3585          
   3586          #if defined ( ZIGBEEPRO )
   3587            // Setup the timeout
   3588            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV       R2,#0x0
   \   000033   7B00         MOV       R3,#0x0
   \   000035   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3589          #endif
   3590          
   3591            if ( ZSTACK_END_DEVICE_BUILD )
   3592            {
   3593              if ( zgChildAgingEnable == TRUE )
   3594              {
   3595                uint8 coordExtAddr[Z_EXTADDR_LEN];
   3596          
   3597                // Send the message to parent
   3598                NLME_GetCoordExtAddr( coordExtAddr );
   3599                NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
   3600                                           zgEndDeviceTimeoutValue,
   3601                                           zgEndDeviceConfiguration );
   3602              }
   3603            }
   3604          }
   \   000038   02....       LJMP      ??Subroutine51_0 & 0xFFFF
   3605          
   3606          /*********************************************************************
   3607           * @fn      ZDApp_SendParentAnnce()
   3608           *
   3609           * @brief   Send Parent Announce message.
   3610           *
   3611           * @param   none
   3612           *
   3613           * @return  none
   3614           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3615          void ZDApp_SendParentAnnce( void )
   \                     ZDApp_SendParentAnnce:
   3616          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3617            uint8 count;
   3618            uint8 *childInfo;
   3619          
   3620            childInfo = AssocMakeListOfRfdChild( &count );
   \   00000A                ; Setup parameters for call to function AssocMakeListOfRfdChild
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   12....       LCALL     `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
   3621          
   3622            if ( childInfo != NULL )
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6054         JZ        ??ZDApp_SendParentAnnce_0
   3623            {
   3624              if ( count > 0 )
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6044         JZ        ??ZDApp_SendParentAnnce_1
   3625              {
   3626                zAddrType_t dstAddr;
   3627          
   3628                dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000022   7409         MOV       A,#0x9
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   740F         MOV       A,#0xf
   \   000029   F0           MOVX      @DPTR,A
   3629                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   00002A   7401         MOV       A,#0x1
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   74FC         MOV       A,#-0x4
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   74FF         MOV       A,#-0x1
   \   000035   F0           MOVX      @DPTR,A
   3630          
   3631                ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
   \   000036                ; Setup parameters for call to function ZDP_ParentAnnce
   \   000036   75..00       MOV       ?V2,#0x0
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003E   75..1F       MOV       ?V2,#0x1f
   \   000041   75..00       MOV       ?V3,#0x0
   \   000044   78..         MOV       R0,#?V2
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7405         MOV       A,#0x5
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F9           MOV       R1,A
   \   000055   7406         MOV       A,#0x6
   \   000057   12....       LCALL     ?XSTACK_DISP102_8
   \   00005A   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00005C   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00005E   12....       LCALL     `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   000061   7405         MOV       A,#0x5
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   3632              }
   3633          
   3634              // Free the list after the message has been sent
   3635              osal_mem_free( childInfo );
   \                     ??ZDApp_SendParentAnnce_1:
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   AA..         MOV       R2,?V0
   \   000068   AB..         MOV       R3,?V1
   \   00006A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3636            }
   3637          }
   \                     ??ZDApp_SendParentAnnce_0:
   \   00006D   740A         MOV       A,#0xa
   \   00006F   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   3638          
   3639          /*********************************************************************
   3640           * @fn          ZDApp_NVUpdate
   3641           *
   3642           * @brief       Set the NV Update Timer.
   3643           *
   3644           * @param       none
   3645           *
   3646           * @return      none
   3647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3648          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3649          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3650          #if defined ( NV_RESTORE )
   3651            if ( (ZSTACK_END_DEVICE_BUILD)
   3652                 || (ZSTACK_ROUTER_BUILD
   3653                     && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
   \   000004   90....       MOV       DPTR,#_NIB + 14
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000A   4009         JC        ??ZDApp_NVUpdate_0
   3654            {
   3655              // No need to wait, set the event to save the state
   3656              osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A00         MOV       R2,#0x0
   \   00000E   7B01         MOV       R3,#0x1
   \   000010   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   3657            }
   \                     ??CrossCallReturnLabel_144:
   \   000013   8010         SJMP      ??ZDApp_NVUpdate_1
   3658            else
   3659            {
   3660              // To allow for more changes to the network state before saving
   3661              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   \                     ??ZDApp_NVUpdate_0:
   \   000015                ; Setup parameters for call to function osal_start_timerEx
   \   000015   90....       MOV       DPTR,#__Constant_2bc
   \   000018   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001B   7A00         MOV       R2,#0x0
   \   00001D   7B01         MOV       R3,#0x1
   \   00001F   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   3662            }
   \                     ??CrossCallReturnLabel_84:
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   3663          #endif
   3664          }
   \                     ??ZDApp_NVUpdate_1:
   \   000025   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   3665          
   3666          /*********************************************************************
   3667           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3668           *
   3669           * @brief   Returns a PAN ID for the network layer to use during
   3670           *          a coordinator start and there is another network with
   3671           *          the intended PANID.
   3672           *
   3673           * @param   panid - the intended PAN ID
   3674           *
   3675           * @return  PANID to try
   3676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3677          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3678          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3679            return ( panid + 1 );
   \   000000   EA           MOV       A,R2
   \   000001   2401         ADD       A,#0x1
   \   000003   0A           INC       R2
   \   000004   5001         JNC       ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC       R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP      ?BRET
   3680          }
   3681          
   3682          /*********************************************************************
   3683           * @fn          ZDO_SrcRtgIndCB
   3684           *
   3685           * @brief       This function notifies the ZDO available src route record received.
   3686           *
   3687           * @param       srcAddr - source address of the source route
   3688           * @param       relayCnt - number of devices in the relay list
   3689           * @param       relayList - relay list of the source route
   3690           *
   3691           * @return      none
   3692           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3693          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3694          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3695            zdoSrcRtg_t srcRtg;
   3696          
   3697            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   3698            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_157:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E9           MOV       A,R1
   \   000013   F0           MOVX      @DPTR,A
   3699            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   3700          
   3701            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc
   \   000021   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000024   600A         JZ        ??ZDO_SrcRtgIndCB_0
   3702            {
   3703              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   3704            }
   \                     ??CrossCallReturnLabel_148:
   \   00002D   12....       LCALL     ?CALL_IND
   3705          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
   3706          
   3707          /*********************************************************************
   3708           * @fn          ZDApp_InitZdoCBFunc
   3709           *
   3710           * @brief       Call this function to initialize zdoCBFunc[]
   3711           *
   3712           * @param       none
   3713           *
   3714           * @return      none
   3715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3716          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3717          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3718            uint8 i;
   3719          
   3720            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV       R2,#0x0
   3721            {
   3722              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV       A,R2
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   12....       LCALL     ?Subroutine39 & 0xFFFF
   3723            }
   \                     ??CrossCallReturnLabel_30:
   \   00000C   E4           CLR       A
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   0A           INC       R2
   \   000011   EA           MOV       A,R2
   \   000012   C3           CLR       C
   \   000013   9409         SUBB      A,#0x9
   \   000015   40EF         JC        ??ZDApp_InitZdoCBFunc_0
   3724          }
   \   000017   02....       LJMP      ??Subroutine60_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#zdoCBFunc & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET
   3725          
   3726          /*********************************************************************
   3727           * @fn          ZDO_RegisterForZdoCB
   3728           *
   3729           * @brief       Call this function to register the higher layer (for
   3730           *              example, the Application layer or MT layer) with ZDO
   3731           *              callbacks to get notified of some ZDO indication like
   3732           *              existence of a concentrator or receipt of a source
   3733           *              route record.
   3734           *
   3735           * @param       indID - ZDO Indication ID
   3736           * @param       pFn   - Callback function pointer
   3737           *
   3738           * @return      ZSuccess - successful, ZInvalidParameter if not
   3739           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3740          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3741          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3742            // Check the range of the indication ID
   3743            if ( indID < MAX_ZDO_CB_FUNC )
   \   000005   C3           CLR       C
   \   000006   9409         SUBB      A,#0x9
   \   000008   500A         JNC       ??ZDO_RegisterForZdoCB_0
   3744            {
   3745              zdoCBFunc[indID] = pFn;
   \   00000A   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00000D   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   3746              return ZSuccess;
   \                     ??CrossCallReturnLabel_155:
   \   000010   7900         MOV       R1,#0x0
   \   000012   8002         SJMP      ??ZDO_RegisterForZdoCB_1
   3747            }
   3748          
   3749            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000014   7902         MOV       R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000016   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   3750          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E9           MOV       A,R1
   \   000001   29           ADD       A,R1
   \   000002   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000005   22           RET
   3751          
   3752          /*********************************************************************
   3753           * @fn          ZDO_DeregisterForZdoCB
   3754           *
   3755           * @brief       Call this function to de-register the higher layer (for
   3756           *              example, the Application layer or MT layer) with ZDO
   3757           *              callbacks to get notified of some ZDO indication like
   3758           *              existence of a concentrator or receipt of a source
   3759           *              route record.
   3760           *
   3761           * @param       indID - ZDO Indication ID
   3762           *
   3763           * @return      ZSuccess - successful, ZInvalidParameter if not
   3764           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3765          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3766          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3767            // Check the range of the indication ID
   3768            if ( indID < MAX_ZDO_CB_FUNC )
   \   000005   C3           CLR       C
   \   000006   9409         SUBB      A,#0x9
   \   000008   500A         JNC       ??ZDO_DeregisterForZdoCB_0
   3769            {
   3770              zdoCBFunc[indID] = NULL;
   \   00000A   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
   3771              return ZSuccess;
   \   000011   F9           MOV       R1,A
   \   000012   8002         SJMP      ??ZDO_DeregisterForZdoCB_1
   3772            }
   3773          
   3774            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000014   7902         MOV       R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000016   02....       LJMP      ??Subroutine60_0 & 0xFFFF
   3775          }
   3776          
   3777          #if defined ( ZDP_BIND_VALIDATION )
   3778          #if defined ( REFLECTOR )
   3779          /*********************************************************************
   3780           * @fn          ZDApp_SetPendingBindDefault
   3781           *
   3782           * @brief       This function initializes a specific entry of pending
   3783           *              Bind Request.
   3784           *
   3785           * @param       pendBindReq - pointer to the entry in the table
   3786           *
   3787           * @return      none
   3788           */
   3789          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   3790          {
   3791            // Set it to an initial value
   3792            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   3793          
   3794            // We are checking for age 0 for aged-out records
   3795            pendBindReq->age = 0;
   3796          }
   3797          
   3798          /*********************************************************************
   3799           * @fn          ZDApp_InitPendingBind
   3800           *
   3801           * @brief       This function initializes the buffer that holds
   3802           *              pending Bind Request messages if no valid NWK address
   3803           *              exists in Address Manager and a Network Address Req
   3804           *              has been sent out.
   3805           *
   3806           * @param       none
   3807           *
   3808           * @return      none
   3809           */
   3810          void ZDApp_InitPendingBind( void )
   3811          {
   3812            if ( ZDAppPendingBindReq == NULL )
   3813            {
   3814              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   3815              {
   3816                uint8 i;
   3817          
   3818                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3819                {
   3820                  // Set to default values
   3821                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3822                }
   3823              }
   3824            }
   3825          }
   3826          
   3827          /*********************************************************************
   3828           * @fn          ZDApp_GetEmptyPendingBindReq
   3829           *
   3830           * @brief       This function looks for an empty entry.
   3831           *
   3832           * @param       none
   3833           *
   3834           * @return      Pointer to entry
   3835           */
   3836          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   3837          {
   3838            uint8 i;
   3839          
   3840            if ( ZDAppPendingBindReq != NULL )
   3841            {
   3842              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3843              {
   3844                if ( ZDAppPendingBindReq[i].age == 0 )
   3845                {
   3846                  return ( &ZDAppPendingBindReq[i] );
   3847                }
   3848              }
   3849            }
   3850          
   3851            // No empty entry was found
   3852            return NULL;
   3853          }
   3854          
   3855          /*********************************************************************
   3856           * @fn          ZDApp_ProcessPendingBindReq
   3857           *
   3858           * @brief       Process pending entry based on EXT address.
   3859           *
   3860           * @param       extAddr - of device to look up
   3861           *
   3862           * @return      none
   3863           */
   3864          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   3865          {
   3866            uint8 i;
   3867          
   3868            // Loop through all the pending entries for that Ext Address
   3869            // to create Bind Entries and send Bind Rsp
   3870            if ( ZDAppPendingBindReq != NULL )
   3871            {
   3872              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3873              {
   3874                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3875                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   3876                {
   3877                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   3878          
   3879                  // Add Bind entry
   3880                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3881                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3882                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3883                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   3884                  {
   3885                    // valid entry
   3886                    bindStat = ZDP_SUCCESS;
   3887          
   3888                    // Notify to save info into NV
   3889                    ZDApp_NVUpdate();
   3890                  }
   3891          
   3892                  // Send back a response message
   3893                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3894                               bindStat, ZDAppPendingBindReq[i].securityUse );
   3895          
   3896                  // Set the pending request entry to default values
   3897                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3898                }
   3899              }
   3900            }
   3901          }
   3902          
   3903          /*********************************************************************
   3904           * @fn          ZDApp_AgeOutPendingBindEntry
   3905           *
   3906           * @brief       Age out pending Bind Req entries.
   3907           *
   3908           * @param       none
   3909           *
   3910           * @return      none
   3911           */
   3912          void ZDApp_AgeOutPendingBindEntry( void )
   3913          {
   3914            uint8 i;
   3915            bool entryFound = FALSE;
   3916          
   3917            if ( ZDAppPendingBindReq != NULL )
   3918            {
   3919              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3920              {
   3921                if ( ZDAppPendingBindReq[i].age > 1 )
   3922                {
   3923                  ZDAppPendingBindReq[i].age--;
   3924          
   3925                  entryFound = TRUE;
   3926                }
   3927                else if ( ZDAppPendingBindReq[i].age == 1 )
   3928                {
   3929                  // The record has aged out and has valid data
   3930                  AddrMgrEntry_t entry;
   3931                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   3932          
   3933                  entry.user = ADDRMGR_USER_BINDING;
   3934          
   3935                  // Remove the entry in address manager so we do not keep entries
   3936                  // with invalid addresses
   3937                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   3938          
   3939                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   3940                  {
   3941                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   3942                    {
   3943                      // Release the entry that contains an invalid NWK address
   3944                      AddrMgrEntryRelease( &entry );
   3945                    }
   3946                  }
   3947          
   3948                  // Send the Bind Response with failure status
   3949                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3950                               &(ZDAppPendingBindReq[i].srcAddr),
   3951                               bindStat, ZDAppPendingBindReq[i].securityUse );
   3952          
   3953                  // Clear the record and set to default values
   3954                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3955                }
   3956              }
   3957            }
   3958          
   3959            if ( entryFound == FALSE )
   3960            {
   3961              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   3962            }
   3963            else
   3964            {
   3965              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3966                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   3967            }
   3968          }
   3969          #endif
   3970          #endif
   3971          
   3972          /*********************************************************************
   3973           * @fn          ZDO_ChangeState
   3974           *
   3975           * @brief       Chance the device state
   3976           *
   3977           * @param       state - new state
   3978           *
   3979           * @return      none
   3980           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3981          void ZDApp_ChangeState( devStates_t state )
   \                     ZDApp_ChangeState:
   3982          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3983            if ( devState != state )
   \   000007   90....       MOV       DPTR,#devState
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   6005         JZ        ??CrossCallReturnLabel_138
   3984            {
   3985              devState = state;
   \   00000E   E9           MOV       A,R1
   \   00000F   F0           MOVX      @DPTR,A
   3986              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000010                ; Setup parameters for call to function osal_set_event
   \   000010   12....       LCALL     ?Subroutine16 & 0xFFFF
   3987            }
   3988          }
   \                     ??CrossCallReturnLabel_138:
   \   000013   02....       LJMP      ??Subroutine47_0 & 0xFFFF
   3989          
   3990          /*********************************************************************
   3991           * @fn      ZDApp_SetRejoinScanDuration()
   3992           *
   3993           * @brief   Sets scan duration for rejoin for an end device
   3994           *
   3995           * @param   rejoinScanDuration - milliseconds
   3996           *
   3997           * @return  none
   3998           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3999          void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
   \                     ZDApp_SetRejoinScanDuration:
   4000          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   4001            zgDefaultRejoinScan = rejoinScanDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   000010                REQUIRE ?Subroutine7
   \   000010                ; // Fall through to label ?Subroutine7
   4002          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   78..         MOV       R0,#?V0
   \   000002   12....       LCALL     ?L_MOV_TO_X
   \   000005   02....       LJMP      ??Subroutine63_0 & 0xFFFF
   4003          
   4004          /*********************************************************************
   4005           * @fn      ZDApp_SetRejoinBackoffDuration()
   4006           *
   4007           * @brief   Sets rejoin backoff duration for rejoin for an end device
   4008           *
   4009           * @param   rejoinBackoffDuration - milliseconds
   4010           *
   4011           * @return  none
   4012           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4013          void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
   \                     ZDApp_SetRejoinBackoffDuration:
   4014          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   4015            zgDefaultRejoinBackoff = rejoinBackoffDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \   000010   80..         SJMP      ?Subroutine7
   4016          }
   4017          
   4018          /*********************************************************************
   4019           * @fn          ZDApp_SetParentAnnceTimer
   4020           *
   4021           * @brief       This function sets up the link status timer.
   4022           *
   4023           * @param       none
   4024           *
   4025           * @return      none
   4026           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4027          void ZDApp_SetParentAnnceTimer( void )
   \                     ZDApp_SetParentAnnceTimer:
   4028          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4029            // Parent Announce shall be sent no earlier than 10 seconds
   4030            uint32 timeout = 10000;
   4031          
   4032            // Add with jitter of up to 10 seconds
   4033            timeout += (osal_rand() & 0x2710);
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   4034          
   4035            // Set timer to send the message
   4036            osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV       A,R2
   \   000009   5410         ANL       A,#0x10
   \   00000B   F5..         MOV       ?V0,A
   \   00000D   EB           MOV       A,R3
   \   00000E   5427         ANL       A,#0x27
   \   000010   F5..         MOV       ?V1,A
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V2,A
   \   000015   F5..         MOV       ?V3,A
   \   000017   90....       MOV       DPTR,#__Constant_2710
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?L_ADD_X
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000024   7A00         MOV       R2,#0x0
   \   000026   7B40         MOV       R3,#0x40
   \   000028   90....       MOV       DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000030   02....       LJMP      ?Subroutine6 & 0xFFFF
   4037          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for prevDevState>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devStartMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   ....         DW ZDAppTaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 0, 0, 0, 0, 0, 0, 0}>`:
   \   000000   FF           DB 255
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2bc:
   \   000000   BC020000     DD 700

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000
   4038          
   4039          /*********************************************************************
   4040          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     41   AddrMgrWriteNVRequest
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      2      0   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     25   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     25   ZDApp_AnnounceNewAddress
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0     35   ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDApp_CoordStartPANIDConflictCB
      2     16   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> NLME_StartRouterRequest
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     31   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     39   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2      0   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     27   ZDApp_LeaveReset
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_LeaveCtrlSet
        0     10   -> ZDApp_NetworkInit
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> osal_clear_event
        0     10   -> osal_rand
        0     10   -> osal_stop_timerEx
        0     10   -> sAddrExtCpy
      0     62   ZDApp_LeaveUpdate
        0     41   -> APSME_GetRequest
        0     41   -> APSME_IsDistributedSecurity
        0     43   -> APSME_SearchTCLinkKeyEntry
        0     41   -> APSME_UpdateDeviceReq
        0     41   -> AddrMgrWriteNVRequest
        0     41   -> NLME_RemoveChild
        0     41   -> RTG_RemoveRtgEntry
        0     41   -> ZDSecMgrAddrClear
        0     41   -> ZDSecMgrDeviceRemoveByExtAddr
        0     41   -> nwkNeighborRemove
        0     44   -> osal_memcpy
      2     20   ZDApp_NVUpdate
        2      0   -> osal_set_event
        2      4   -> osal_start_timerEx
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     41   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2     14   ZDApp_NetworkStartEvt
        2      0   -> AddrMgrWriteNVRequest
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_SetParentAnnceTimer
        2      0   -> ZDApp_StoreNwkSecMaterial
        2      0   -> bdb_nwkFormationAttempt
        2      0   -> bdb_reportCommissioningState
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     21   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     14   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_desc_list_free
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     54   ZDApp_ProcessMsgCBs
        0     54   -> ZDMatchSendState
        0     54   -> ZDO_MatchEndDeviceBind
        0     54   -> ZDO_ParseAddrRsp
        0     54   -> ZDO_ParseBindUnbindReq
        0     54   -> ZDO_ParseEndDeviceBindReq
        0     54   -> ZDO_ProcessBindUnbindReq
        0     54   -> ZDO_UpdateAddrManager
        0     54   -> osal_mem_free
      0     10   ZDApp_ProcessNetworkJoin
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> NLME_StartRouterRequest
        0     10   -> ZDApp_AnnounceNewAddress
        0     10   -> ZDApp_ChangeState
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> ZDApp_RestoreNwkKey
        0     10   -> bdb_nwkAssocAttemt
        0     10   -> bdb_reportCommissioningState
        0     10   -> bdb_setNodeIsOnANetwork
        0     10   -> nwkNeighborInitTable
        0     10   -> osal_set_event
        0     10   -> osal_stop_timerEx
      2     14   ZDApp_ProcessOSALMsg
        2      0   -> ZDApp_ProcessMsgCBs
        2      0   -> ZDApp_ProcessSecMsg
        2      0   -> ZDP_IncomingData
      0     34   ZDApp_ProcessSecEvent
        0     16   -> ZDApp_DeviceAuthEvt
        0     16   -> ZDApp_SaveNwkKey
        0     16   -> ZDApp_StoreNwkSecMaterial
        0     16   -> ZDSecMgrNewDeviceEvent
        0     16   -> ZDSecMgrSaveApsLinkKey
        0     16   -> ZDSecMgrSaveTCLinkKey
        0     16   -> bdb_reportCommissioningState
        0     16   -> bdb_setNodeIsOnANetwork
        0     16   -> osal_mem_free
        0     20   -> osal_start_timerEx
      0     38   ZDApp_ProcessSecMsg
        0     35   -> ZDSecMgrRequestKeyInd
        0     35   -> ZDSecMgrUpdateDeviceInd
        0     35   -> ZDSecMgrVerifyKeyInd
        0     35   -> bdb_TCjoiningDeviceComplete
        0     35   -> osal_get_timeoutEx
        0     38   -> osal_memcmp
        0     38   -> osal_memcpy
        0     35   -> osal_stop_timerEx
      0     34   ZDApp_ReadNetworkRestoreState
        0      9   -> bdb_setNodeIsOnANetwork
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     26   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     34   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> ZDApp_RestoreNwkKey
        0      9   -> sAddrExtCpy
      0     62   ZDApp_RestoreNwkKey
        0     48   -> ZDApp_RestoreNwkSecMaterial
        0     51   -> osal_memcmp
        0     48   -> osal_memset
        0     52   -> osal_nv_read
      0     79   ZDApp_RestoreNwkSecMaterial
        0     30   -> osal_memcmp
        0     31   -> osal_nv_read
        0     31   -> osal_nv_write
      2     14   ZDApp_SaveNetworkStateEvt
        2      0   -> NLME_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     68   ZDApp_SaveNwkKey
        0     48   -> SSP_ReadNwkActiveKey
        0     51   -> osal_memcmp
        0     48   -> osal_memset
        0     52   -> osal_nv_read
        0     52   -> osal_nv_write
      0     50   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     36   ZDApp_SendMsg
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      0     41   ZDApp_SendParentAnnce
        0     22   -> AssocMakeListOfRfdChild
        0     27   -> ZDP_ParentAnnce
        0     22   -> osal_mem_free
      0     30   ZDApp_SetParentAnnceTimer
        0     12   -> osal_rand
        0     16   -> osal_start_timerEx
      0     12   ZDApp_SetRejoinBackoffDuration
      0     12   ZDApp_SetRejoinScanDuration
      2     14   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2     14   ZDApp_StopJoiningCycle
      0     47   ZDApp_StoreNwkSecMaterial
        0     27   -> osal_isbufset
        0     30   -> osal_memcmp
        0     30   -> osal_memcpy
        0     31   -> osal_nv_read
        0     31   -> osal_nv_write
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_NetworkStartEvt
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDApp_SendParentAnnce
        0     14   -> ZDApp_SetParentAnnceTimer
        0     14   -> ZDApp_StartJoiningCycle
        0     14   -> ZDApp_StopJoiningCycle
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_set_event
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     29   ZDOInitDeviceEx
        0     25   -> NLME_InitNV
        0     25   -> NLME_SetBroadcastFilter
        0     25   -> NLME_SetDefaultNV
        0     25   -> NLME_SetUpdateID
        0     25   -> ZDAppDetermineDeviceType
        0     25   -> ZDApp_LeaveCtrlInit
        0     25   -> ZDApp_NetworkInit
        0     25   -> ZDApp_ReadNetworkRestoreState
        0     25   -> ZDApp_RestoreNetworkState
        0     25   -> ZDApp_SecInit
        0     25   -> ZDConfig_InitDescriptors
        0     25   -> ZDSecMgrClearNVKeyValues
        0     25   -> ZDSecMgrUpdateTCAddress
        0     25   -> ZMacSetReq
        0     25   -> gp_ProxyTblInit
        0     25   -> osal_memset
        0     29   -> osal_nv_write
        0     25   -> osal_rand
        0     25   -> zgInitItems
        0     25   -> zgWriteStartupOptions
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_NVUpdate
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     14   ZDO_JoinConfirmCB
        0     14   -> NLME_SetPollRate
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_SendMsg
      0     21   ZDO_JoinIndicationCB
        0     16   -> ZDApp_NVUpdate
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_mem_alloc
        0     20   -> osal_start_timerEx
      0     13   ZDO_LeaveCnf
        0     12   -> NLME_GetExtAddr
        0     12   -> ZDApp_LeaveReset
        0     13   -> ZDApp_LeaveUpdate
        0     12   -> sAddrExtCmp
      1     18   ZDO_LeaveInd
        0     17   -> NLME_GetCoordShortAddr
        0     17   -> NLME_LeaveRsp
        0     17   -> ZDApp_LeaveReset
        0     18   -> ZDApp_LeaveUpdate
        0     17   -> ZMacSetReq
        0     17   -> bdb_setFN
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      1     26   ZDO_NetworkFormationConfirmCB
        0     26   -> APSME_IsDistributedSecurity
        0     26   -> NLME_SetAssocFlags
        0     26   -> SSP_SwitchNwkKey
        0     26   -> SSP_UpdateNwkKey
        0     26   -> ZDApp_ChangeState
        0     26   -> ZDApp_RestoreNwkSecMaterial
        0     26   -> ZDSecMgrGenerateRndKey
        0     26   -> ZMacSetReq
        0     26   -> bdb_nwkFormationAttempt
        0     26   -> bdb_setNodeIsOnANetwork
        0     26   -> nwk_ExtPANIDValid
        0     26   -> osal_memset
        0     26   -> osal_set_event
        0     26   -> sAddrExtCpy
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDO_SyncIndicationCB
      0      0   ZDO_UpdateDeviceIndication
      1     18   ZDO_beaconNotifyIndCB
        0     18   -> bdb_isDeviceNonFactoryNew
        0     18   -> osal_mem_alloc
        0     18   -> osal_memset
        0     18   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
       8  ?<Constant {255, 0, 0, 0, 0, 0, 0, 0}>
       4  ?<Initializer for ZDApp_SavedPollRate>
       7  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for devStartMode>
       1  ?<Initializer for prevDevState>
       9  ??Subroutine41_0
      10  ??Subroutine42_0
       5  ??Subroutine43_0
       2  ??Subroutine44_0
       6  ??Subroutine45_0
       3  ??Subroutine46_0
       5  ??Subroutine47_0
       9  ??Subroutine48_0
       6  ??Subroutine49_0
       3  ??Subroutine50_0
       5  ??Subroutine51_0
       8  ??Subroutine52_0
       6  ??Subroutine53_0
       2  ??Subroutine54_0
       6  ??Subroutine55_0
      13  ??Subroutine56_0
       2  ??Subroutine57_0
       3  ??Subroutine58_0
       8  ??Subroutine59_0
       7  ??Subroutine60_0
       6  ??Subroutine61_0
       3  ??Subroutine62_0
       5  ??Subroutine63_0
       6  ??Subroutine64_0
       6  ??Subroutine65_0
       8  ??Subroutine66_0
       6  ??Subroutine67_0
       8  ??Subroutine68_0
       9  ??Subroutine69_0
       2  ??Subroutine70_0
       9  ??Subroutine71_0
       6  ??Subroutine72_0
       6  ??Subroutine73_0
       2  ?Subroutine0
       5  ?Subroutine1
       2  ?Subroutine10
       6  ?Subroutine11
      13  ?Subroutine12
       3  ?Subroutine13
       2  ?Subroutine14
       3  ?Subroutine15
       2  ?Subroutine16
       8  ?Subroutine17
       2  ?Subroutine18
       3  ?Subroutine19
       3  ?Subroutine2
       3  ?Subroutine20
       4  ?Subroutine21
       3  ?Subroutine22
       9  ?Subroutine23
       3  ?Subroutine24
       5  ?Subroutine25
      11  ?Subroutine26
      10  ?Subroutine27
       9  ?Subroutine28
      12  ?Subroutine29
       3  ?Subroutine3
       6  ?Subroutine30
       2  ?Subroutine31
       6  ?Subroutine32
       6  ?Subroutine33
       4  ?Subroutine34
      11  ?Subroutine35
       4  ?Subroutine36
      10  ?Subroutine37
      20  ?Subroutine38
      15  ?Subroutine39
      31  ?Subroutine4
       9  ?Subroutine40
       2  ?Subroutine5
       2  ?Subroutine6
       8  ?Subroutine7
      13  ?Subroutine8
      12  ?Subroutine9
      19  AddrMgrWriteNVRequest
       1  FrameCounterUpdated
       1  MatchRsps
      24  ZDAppCheckForHoldKey
      82  ZDAppDetermineDeviceType
       9  ZDAppNwkAddr
       1  ZDAppTaskID
      59  ZDApp_AnnounceNewAddress
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
      22  ZDApp_ChangeState
      10  ZDApp_CoordStartPANIDConflictCB
      71  ZDApp_DeviceAuthEvt
      77  ZDApp_DeviceConfigured
     115  ZDApp_ForceConcentratorChange
      95  ZDApp_InMsgCB
      47  ZDApp_Init
      89  ZDApp_InitUserDesc
      26  ZDApp_InitZdoCBFunc
      72  ZDApp_JoinReq
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
      71  ZDApp_LeaveCtrlInit
      13  ZDApp_LeaveCtrlReset
      22  ZDApp_LeaveCtrlSet
      47  ZDApp_LeaveCtrlStartup
     174  ZDApp_LeaveReset
     267  ZDApp_LeaveUpdate
      40  ZDApp_NVUpdate
      10  ZDApp_NetworkDiscoveryReq
      41  ZDApp_NetworkInit
     130  ZDApp_NetworkStartEvt
       2  ZDApp_NewDeviceList
      44  ZDApp_NodeProfileSync
     306  ZDApp_NwkDescListProcessing
      19  ZDApp_NwkStateUpdateCB
     230  ZDApp_ProcessMsgCBs
     379  ZDApp_ProcessNetworkJoin
      61  ZDApp_ProcessOSALMsg
     215  ZDApp_ProcessSecEvent
     282  ZDApp_ProcessSecMsg
      27  ZDApp_ReadNetworkRestoreState
      48  ZDApp_RegisterCBs
      40  ZDApp_ResetNwkKey
      26  ZDApp_ResetTimerCancel
      31  ZDApp_ResetTimerStart
      92  ZDApp_RestoreNetworkState
     112  ZDApp_RestoreNwkKey
     219  ZDApp_RestoreNwkSecMaterial
      19  ZDApp_SaveNetworkStateEvt
     306  ZDApp_SaveNwkKey
       4  ZDApp_SavedPollRate
     104  ZDApp_SecInit
      15  ZDApp_SendEventMsg
      88  ZDApp_SendMsg
     114  ZDApp_SendParentAnnce
      51  ZDApp_SetParentAnnceTimer
      18  ZDApp_SetRejoinBackoffDuration
      16  ZDApp_SetRejoinScanDuration
      39  ZDApp_StartJoiningCycle
      36  ZDApp_StopJoiningCycle
     211  ZDApp_StoreNwkSecMaterial
       7  ZDApp_epDesc
     334  ZDApp_event_loop
     374  ZDOInitDeviceEx
      95  ZDO_AddrChangeIndicationCB
      48  ZDO_ConcentratorIndicationCB
      25  ZDO_DeregisterForZdoCB
     107  ZDO_JoinConfirmCB
     181  ZDO_JoinIndicationCB
     121  ZDO_LeaveCnf
     218  ZDO_LeaveInd
      10  ZDO_ManytoOneFailureIndicationCB
      59  ZDO_NetworkDiscoveryConfirmCB
     246  ZDO_NetworkFormationConfirmCB
      10  ZDO_NetworkStatusCB
      37  ZDO_PermitJoinCB
       3  ZDO_PollConfirmCB
      25  ZDO_RegisterForZdoCB
      51  ZDO_SrcRtgIndCB
      31  ZDO_StartRouterConfirmCB
       3  ZDO_SyncIndicationCB
       5  ZDO_UpdateDeviceIndication
       8  ZDO_UseExtendedPANID
     623  ZDO_beaconNotifyIndCB
       4  __Constant_0
       4  __Constant_258
       4  __Constant_2710
       4  __Constant_2bc
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  prevDevState
       1  retryCnt
       4  runtimeChannel
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
     450  -- Other

 
 7 888 bytes in segment BANKED_CODE
   450 bytes in segment BANK_RELAYS
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
    48 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
   464 bytes of CODE     memory
    24 bytes of CONST    memory (+ 24 bytes shared)
 7 888 bytes of HUGECODE memory
    79 bytes of XDATA    memory

Errors: none
Warnings: none
