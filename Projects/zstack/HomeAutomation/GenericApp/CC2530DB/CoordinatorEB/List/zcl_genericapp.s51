///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              18/Apr/2021  13:22:02
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\zcl_genericapp.c
//    Command line       =  
//        -f C:\users\slavko\Temp\EWf00c.tmp ("C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\zcl_genericapp.c"
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1
//        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS
//        -lC "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List\zcl_genericapp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_genericapp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??str_reverse::?relay`
        FUNCTION `??str_reverse::?relay`,0203H
        FUNCTION `??zclGenericApp_BasicResetCB::?relay`,0203H
        FUNCTION `??zclGenericApp_BindNotification::?relay`,0203H
        FUNCTION `??zclGenericApp_HandleKeys::?relay`,0203H
        PUBLIC `??zclGenericApp_Init::?relay`
        FUNCTION `??zclGenericApp_Init::?relay`,0203H
        FUNCTION `??zclGenericApp_LcdDisplayUpdate::?relay`,0203H
        PUBLIC `??zclGenericApp_MessageMSGCB::?relay`
        FUNCTION `??zclGenericApp_MessageMSGCB::?relay`,0203H
        FUNCTION `??zclGenericApp_ProcessCommissioningStatus::?re`,0203H
        FUNCTION `??zclGenericApp_ProcessIdentifyTimeChange::?rel`,0203H
        PUBLIC `??zclGenericApp_ProcessZDOMsgs::?relay`
        FUNCTION `??zclGenericApp_ProcessZDOMsgs::?relay`,0203H
        PUBLIC `??zclGenericApp_SendTheMessage::?relay`
        FUNCTION `??zclGenericApp_SendTheMessage::?relay`,0203H
        PUBLIC `??zclGenericApp_SerialMSGCB::?relay`
        FUNCTION `??zclGenericApp_SerialMSGCB::?relay`,0203H
        PUBLIC `??zclGenericApp_event_loop::?relay`
        FUNCTION `??zclGenericApp_event_loop::?relay`,0203H
        FUNCTION `??zclSampleApp_BatteryWarningCB::?relay`,0203H
        PUBLIC EndDeviceInfos
        PUBLIC GenericApp_ClusterList
        PUBLIC GenericApp_SimpleDesc
        PUBWEAK __Constant_1f4
        PUBLIC device_count
        PUBLIC gPermitDuration
        PUBLIC giGenAppScreenMode
        PUBLIC sClearLine
        PUBLIC sDeviceName
        PUBLIC sSwBDBMode
        PUBLIC sSwGenericApp
        PUBLIC sSwHelp
        PUBLIC str_reverse
        FUNCTION str_reverse,0203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        FUNCTION zclGenericApp_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclGenericApp_BindNotification,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclGenericApp_DstAddr
        FUNCTION zclGenericApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC zclGenericApp_Init
        FUNCTION zclGenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        FUNCTION zclGenericApp_LcdDisplayUpdate,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclGenericApp_MessageMSGCB
        FUNCTION zclGenericApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC zclGenericApp_NwkState
        FUNCTION zclGenericApp_ProcessCommissioningStatus,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclGenericApp_ProcessIdentifyTimeChange,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclGenericApp_ProcessZDOMsgs
        FUNCTION zclGenericApp_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclGenericApp_SendTheMessage
        FUNCTION zclGenericApp_SendTheMessage,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC zclGenericApp_SerialMSGCB
        FUNCTION zclGenericApp_SerialMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC zclGenericApp_TaskID
        PUBLIC zclGenericApp_TransID
        PUBLIC zclGenericApp_epDesc
        PUBLIC zclGenericApp_event_loop
        FUNCTION zclGenericApp_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION zclSampleApp_BatteryWarningCB,0603H
        ARGFRAME XSTACK, 0, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
APSME_LookupExtAddr SYMBOL "APSME_LookupExtAddr"
`??APSME_LookupExtAddr::?relay` SYMBOL "?relay", APSME_LookupExtAddr
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTPoll         SYMBOL "HalUARTPoll"
`??HalUARTPoll::?relay` SYMBOL "?relay", HalUARTPoll
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
MT_UartInit         SYMBOL "MT_UartInit"
`??MT_UartInit::?relay` SYMBOL "?relay", MT_UartInit
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
`??MT_UartRegisterTaskID::?relay` SYMBOL "?relay", MT_UartRegisterTaskID
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
RegisterVoltageWarningCB SYMBOL "RegisterVoltageWarningCB"
`??RegisterVoltageWarningCB::?relay` SYMBOL "?relay", RegisterVoltageWarningCB
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
bdb_RegisterBindNotificationCB SYMBOL "bdb_RegisterBindNotificationCB"
`??bdb_RegisterBindNotificationCB::?relay` SYMBOL "?relay", bdb_RegisterBindNotificationCB
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterIdentifyTimeChangeCB SYMBOL "bdb_RegisterIdentifyTimeChangeCB"
`??bdb_RegisterIdentifyTimeChangeCB::?relay` SYMBOL "?relay", bdb_RegisterIdentifyTimeChangeCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
osal_buffer_uint16  SYMBOL "osal_buffer_uint16"
`??osal_buffer_uint16::?relay` SYMBOL "?relay", osal_buffer_uint16
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
osal_strlen         SYMBOL "osal_strlen"
`??osal_strlen::?relay` SYMBOL "?relay", osal_strlen
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclGenericApp_ResetAttributesToDefaultValues SYMBOL "zclGenericApp_ResetAttributesToDefaultValues"
`??zclGenericApp_ResetAttributesToDefaultValues:` SYMBOL "?relay", zclGenericApp_ResetAttributesToDefaultValues
zclHA_LcdStatusLine1 SYMBOL "zclHA_LcdStatusLine1"
`??zclHA_LcdStatusLine1::?relay` SYMBOL "?relay", zclHA_LcdStatusLine1
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
str_reverse         SYMBOL "str_reverse"
`??str_reverse::?relay` SYMBOL "?relay", str_reverse
zclGenericApp_Init  SYMBOL "zclGenericApp_Init"
`??zclGenericApp_Init::?relay` SYMBOL "?relay", zclGenericApp_Init
zclGenericApp_MessageMSGCB SYMBOL "zclGenericApp_MessageMSGCB"
`??zclGenericApp_MessageMSGCB::?relay` SYMBOL "?relay", zclGenericApp_MessageMSGCB
zclGenericApp_ProcessZDOMsgs SYMBOL "zclGenericApp_ProcessZDOMsgs"
`??zclGenericApp_ProcessZDOMsgs::?relay` SYMBOL "?relay", zclGenericApp_ProcessZDOMsgs
zclGenericApp_SendTheMessage SYMBOL "zclGenericApp_SendTheMessage"
`??zclGenericApp_SendTheMessage::?relay` SYMBOL "?relay", zclGenericApp_SendTheMessage
zclGenericApp_SerialMSGCB SYMBOL "zclGenericApp_SerialMSGCB"
`??zclGenericApp_SerialMSGCB::?relay` SYMBOL "?relay", zclGenericApp_SerialMSGCB
zclGenericApp_event_loop SYMBOL "zclGenericApp_event_loop"
`??zclGenericApp_event_loop::?relay` SYMBOL "?relay", zclGenericApp_event_loop

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??APSME_LookupExtAddr::?relay`
        FUNCTION `??APSME_LookupExtAddr::?relay`,00H
        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,00H
        EXTERN `??HalUARTPoll::?relay`
        FUNCTION `??HalUARTPoll::?relay`,00H
        EXTERN `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??MT_UartInit::?relay`
        FUNCTION `??MT_UartInit::?relay`,00H
        EXTERN `??MT_UartRegisterTaskID::?relay`
        FUNCTION `??MT_UartRegisterTaskID::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??RegisterVoltageWarningCB::?relay`
        FUNCTION `??RegisterVoltageWarningCB::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??bdb_RegisterBindNotificationCB::?relay`
        FUNCTION `??bdb_RegisterBindNotificationCB::?relay`,00H
        EXTERN `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,00H
        EXTERN `??bdb_RegisterIdentifyTimeChangeCB::?relay`
        FUNCTION `??bdb_RegisterIdentifyTimeChangeCB::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,00H
        EXTERN `??osal_buffer_uint16::?relay`
        FUNCTION `??osal_buffer_uint16::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??osal_strlen::?relay`
        FUNCTION `??osal_strlen::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclGenericApp_ResetAttributesToDefaultValues:`
        FUNCTION `??zclGenericApp_ResetAttributesToDefaultValues:`,00H
        EXTERN `??zclHA_LcdStatusLine1::?relay`
        FUNCTION `??zclHA_LcdStatusLine1::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupExtAddr
        FUNCTION APSME_LookupExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTPoll
        FUNCTION HalUARTPoll,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterVoltageWarningCB
        FUNCTION RegisterVoltageWarningCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterBindNotificationCB
        FUNCTION bdb_RegisterBindNotificationCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterIdentifyTimeChangeCB
        FUNCTION bdb_RegisterIdentifyTimeChangeCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint16
        FUNCTION osal_buffer_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGenericApp_Attrs
        EXTERN zclGenericApp_IdentifyTime
        EXTERN zclGenericApp_NumAttributes
        EXTERN zclGenericApp_ResetAttributesToDefaultValues
        FUNCTION zclGenericApp_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGenericApp_SimpleDesc
        EXTERN zclHA_LcdStatusLine1
        FUNCTION zclHA_LcdStatusLine1,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\zcl_genericapp.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_genericapp.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application is a template to get started writing an application
//   43   from scratch.
//   44 
//   45   Look for the sections marked with "GENERICAPP_TODO" to add application
//   46   specific code.
//   47 
//   48   Note: if you would like your application to support automatic attribute
//   49   reporting, include the BDB_REPORTING compile flag.
//   50 *********************************************************************/
//   51 
//   52 /*********************************************************************
//   53  * INCLUDES
//   54  */
//   55 #include "ZComDef.h"
//   56 #include "ZDProfile.h" 	// NEW
//   57 #include "OSAL.h"
//   58 #include "AF.h"
//   59 #include "ZDApp.h"
//   60 #include "ZDObject.h"
//   61 #include "MT_SYS.h"
//   62 	 
//   63 	 
//   64 #include "DebugTrace.h" 	// NEW
//   65 #include "MT_UART.h" 		// NEW	 
//   66 
//   67 #include "nwk_util.h"
//   68 
//   69 #include "zcl.h"
//   70 #include "zcl_general.h"
//   71 #include "zcl_ha.h"
//   72 #include "zcl_diagnostic.h"
//   73 #include "zcl_genericapp.h"
//   74 
//   75 #include "bdb.h"
//   76 #include "bdb_interface.h"
//   77 #include "gp_interface.h"
//   78 
//   79 #if defined ( INTER_PAN )
//   80 #if defined ( BDB_TL_INITIATOR )
//   81   #include "bdb_touchlink_initiator.h"
//   82 #endif // BDB_TL_INITIATOR
//   83 #if defined ( BDB_TL_TARGET )
//   84   #include "bdb_touchlink_target.h"
//   85 #endif // BDB_TL_TARGET
//   86 #endif // INTER_PAN
//   87 
//   88 #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
//   89   #include "bdb_touchlink.h"
//   90 #endif
//   91 
//   92 #include "onboard.h"
//   93 
//   94 /* HAL */
//   95 #include "hal_lcd.h"
//   96 #include "hal_led.h"
//   97 #include "hal_key.h"
//   98 #include "hal_uart.h"
//   99 
//  100 /*********************************************************************
//  101  * MACROS
//  102  */
//  103 
//  104 
//  105 /*********************************************************************
//  106  * CONSTANTS
//  107  */
//  108 
//  109 
//  110 /*********************************************************************
//  111  * TYPEDEFS
//  112  */
//  113 
//  114 // NEW
//  115 typedef struct
//  116  {
//  117    unsigned char endPoint;
//  118    unsigned char extAddr[8];
//  119    unsigned char compressed_addr;
//  120  } EndDeviceInfo_t; 						//saved the end device information
//  121 // ENDNEW
//  122 
//  123 /*********************************************************************
//  124  * GLOBAL VARIABLES
//  125  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  126 byte zclGenericApp_TaskID;
zclGenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  127 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  128 unsigned char device_count = 0;
device_count:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  129  
//  130  // NEW
//  131 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  132 const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
GenericApp_ClusterList:
        DW 1
//  133 {
//  134   GENERICAPP_CLUSTERID
//  135 };
//  136 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  137 const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
GenericApp_SimpleDesc:
        DB 32
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW GenericApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW GenericApp_ClusterList
//  138 {
//  139   GENERICAPP_ENDPOINT,              //  int Endpoint;
//  140   GENERICAPP_PROFID,                //  uint16 AppProfId[2];
//  141   GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  142   GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  143   GENERICAPP_FLAGS,                 //  int   AppFlags:4;
//  144   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  145   (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
//  146   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  147   (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
//  148 };
//  149 
//  150 // This is the Endpoint/Interface description.  It is defined here, but
//  151 // filled-in in GenericApp_Init().  Another way to go would be to fill
//  152 // in the structure here and make it a "const" (in code space).  The
//  153 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  154 endPointDesc_t zclGenericApp_epDesc;
zclGenericApp_epDesc:
        DS 7
        REQUIRE __INIT_XDATA_Z
//  155 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  156 EndDeviceInfo_t EndDeviceInfos[16]; //init space for 16 devices
EndDeviceInfos:
        DS 160
        REQUIRE __INIT_XDATA_Z
//  157 // ENDNEW
//  158 
//  159 
//  160 /*********************************************************************
//  161  * GLOBAL FUNCTIONS
//  162  */
//  163 
//  164 //void osal_buffer_uint16(&theMessageData[3], data); 			// NEW
//  165 // void osal_buffer_uint16(unsigned char &theMessageData, unsigned int data);	// NEW
//  166  
//  167 /*********************************************************************
//  168  * LOCAL VARIABLES
//  169  */
//  170 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  171 uint8 giGenAppScreenMode = GENERIC_MAINMODE;   // display the main screen mode first
giGenAppScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  172 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  173 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  174 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  175 devStates_t zclGenericApp_NwkState = DEV_INIT;
zclGenericApp_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclGenericApp_NwkState>`
        REQUIRE __INIT_XDATA_I
//  176 
//  177 // NEW

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 byte zclGenericApp_TransID;  // This is the unique message ID (counter)
zclGenericApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  179 afAddrType_t zclGenericApp_DstAddr;
zclGenericApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  180 // ENDNEW
//  181 
//  182 /*********************************************************************
//  183  * LOCAL FUNCTIONS
//  184  */
//  185 static void zclGenericApp_HandleKeys( byte shift, byte keys );
//  186 static void zclGenericApp_BasicResetCB( void );
//  187 static void zclGenericApp_ProcessIdentifyTimeChange( uint8 endpoint );
//  188 static void zclGenericApp_BindNotification( bdbBindNotificationData_t *data );
//  189 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//  190 static void zclGenericApp_ProcessTouchlinkTargetEnable( uint8 enable );
//  191 #endif
//  192 
//  193 // NEW
//  194 void zclGenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  195 void zclGenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  196 void zclGenericApp_SendTheMessage( unsigned char dest_endID, unsigned char cmd, unsigned int temp_set);
//  197 void zclGenericApp_SerialMSGCB(void);
//  198 void str_reverse(char *str, int length);
//  199 // ENDNEW
//  200 
//  201 static void zclGenericApp_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
//  202 
//  203 // app display functions
//  204 static void zclGenericApp_LcdDisplayUpdate( void );
//  205 #ifdef LCD_SUPPORTED
//  206 static void zclGenericApp_LcdDisplayMainMode( void );
//  207 static void zclGenericApp_LcdDisplayHelpMode( void );
//  208 #endif
//  209 
//  210 // Functions to process ZCL Foundation incoming Command/Response messages
//  211 static void zclGenericApp_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  212 #ifdef ZCL_READ
//  213 static uint8 zclGenericApp_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  214 #endif
//  215 #ifdef ZCL_WRITE
//  216 static uint8 zclGenericApp_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  217 #endif
//  218 static uint8 zclGenericApp_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  219 #ifdef ZCL_DISCOVER
//  220 static uint8 zclGenericApp_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  221 static uint8 zclGenericApp_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  222 static uint8 zclGenericApp_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  223 #endif
//  224 
//  225 static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
//  226 
//  227 /*********************************************************************
//  228  * STATUS STRINGS
//  229  */
//  230 #ifdef LCD_SUPPORTED

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  231 const char sDeviceName[]   = "  Generic App";
sDeviceName:
        DB "  Generic App"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  232 const char sClearLine[]    = " ";
sClearLine:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  233 const char sSwGenericApp[]      = "SW1:GENAPP_TODO";  // GENERICAPP_TODO
sSwGenericApp:
        DB "SW1:GENAPP_TODO"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  234 const char sSwBDBMode[]     = "SW2: Start BDB";
sSwBDBMode:
        DB "SW2: Start BDB"

        RSEG XDATA_I:XDATA:NOROOT(0)
//  235 char sSwHelp[]             = "SW4: Help       ";  // last character is * if NWK open
sSwHelp:
        DATA8
        DS 17
        REQUIRE `?<Initializer for sSwHelp>`
        REQUIRE __INIT_XDATA_I
//  236 #endif
//  237 
//  238 /*********************************************************************
//  239  * ZCL General Profile Callback table
//  240  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  241 static zclGeneral_AppCallbacks_t zclGenericApp_CmdCallbacks =
zclGenericApp_CmdCallbacks:
        DATA8
        DS 24
        REQUIRE `?<Initializer for zclGenericApp_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  242 {
//  243   zclGenericApp_BasicResetCB,             // Basic Cluster Reset command
//  244   NULL,                                   // Identify Trigger Effect command
//  245   NULL,                                   // On/Off cluster commands
//  246   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  247   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  248   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  249 #ifdef ZCL_LEVEL_CTRL
//  250   NULL,                                   // Level Control Move to Level command
//  251   NULL,                                   // Level Control Move command
//  252   NULL,                                   // Level Control Step command
//  253   NULL,                                   // Level Control Stop command
//  254 #endif
//  255 #ifdef ZCL_GROUPS
//  256   NULL,                                   // Group Response commands
//  257 #endif
//  258 #ifdef ZCL_SCENES
//  259   NULL,                                  // Scene Store Request command
//  260   NULL,                                  // Scene Recall Request command
//  261   NULL,                                  // Scene Response command
//  262 #endif
//  263 #ifdef ZCL_ALARMS
//  264   NULL,                                  // Alarm (Response) commands
//  265 #endif
//  266 #ifdef SE_UK_EXT
//  267   NULL,                                  // Get Event Log command
//  268   NULL,                                  // Publish Event Log command
//  269 #endif
//  270   NULL,                                  // RSSI Location command
//  271   NULL                                   // RSSI Location Response command
//  272 };
//  273 
//  274 /*********************************************************************
//  275  * GENERICAPP_TODO: Add other callback structures for any additional application specific 
//  276  *       Clusters being used, see available callback structures below.
//  277  *
//  278  *       bdbTL_AppCallbacks_t 
//  279  *       zclApplianceControl_AppCallbacks_t 
//  280  *       zclApplianceEventsAlerts_AppCallbacks_t 
//  281  *       zclApplianceStatistics_AppCallbacks_t 
//  282  *       zclElectricalMeasurement_AppCallbacks_t 
//  283  *       zclGeneral_AppCallbacks_t 
//  284  *       zclGp_AppCallbacks_t 
//  285  *       zclHVAC_AppCallbacks_t 
//  286  *       zclLighting_AppCallbacks_t 
//  287  *       zclMS_AppCallbacks_t 
//  288  *       zclPollControl_AppCallbacks_t 
//  289  *       zclPowerProfile_AppCallbacks_t 
//  290  *       zclSS_AppCallbacks_t  
//  291  *
//  292  */
//  293 
//  294 /*********************************************************************
//  295  * @fn          zclGenericApp_Init
//  296  *
//  297  * @brief       Initialization function for the zclGeneral layer.
//  298  *
//  299  * @param       none
//  300  *
//  301  * @return      none
//  302  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  303 void zclGenericApp_Init( byte task_id )
zclGenericApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclGenericApp_Init
        CODE
//  304 {
        FUNCALL zclGenericApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, HalUARTPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, RegisterVoltageWarningCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, bdb_RegisterCommissioningStatusCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, bdb_RegisterIdentifyTimeChangeCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, bdb_RegisterBindNotificationCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV       A,#-0x1d
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,R1
//  305 	
//  306   halUARTCfg_t uartConfig;				// NEW
//  307   zclGenericApp_TaskID = task_id;
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      @DPTR,A
//  308   zclGenericApp_NwkState = DEV_INIT;	// NEW
        MOV       DPTR,#zclGenericApp_NwkState
        MOV       A,#0x1
        MOVX      @DPTR,A
//  309   zclGenericApp_TransID = 0;				// NEW
        MOV       DPTR,#zclGenericApp_TransID
        CLR       A
        MOVX      @DPTR,A
//  310   
//  311   //NEW
//  312   
//  313   // Device hardware initialization can be added here or in main() (Zmain.c).
//  314   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        INC       A
        MOVX      @DPTR,A
//  315   uartConfig.baudRate             = HAL_UART_BR_115200;
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
//  316   uartConfig.flowControl          = FALSE;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  317   uartConfig.intEnable              = TRUE;              // 2x30 don't care - see uart driver.
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  318   // uartConfig.callBackFunc         = MT_UartProcessZAppData;
//  319   
//  320   MT_UartInit();
        ; Setup parameters for call to function MT_UartInit
        LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
//  321   MT_UartRegisterTaskID(0);
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV       R1,#0x0
        LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
//  322   HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
//  323 
//  324   // If the hardware is application specific - add it here.
//  325   // If the hardware is other parts of the device add it in main().
//  326   
//  327   // Fill out the endpoint description.
//  328   zclGenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
        MOV       DPTR,#zclGenericApp_epDesc
        MOV       A,#0x20
        MOVX      @DPTR,A
//  329   zclGenericApp_epDesc.task_id = &zclGenericApp_TaskID;
        MOV       DPTR,#zclGenericApp_epDesc + 2
        MOV       A,#zclGenericApp_TaskID & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(zclGenericApp_TaskID >> 8) & 0xff
        MOVX      @DPTR,A
//  330   zclGenericApp_epDesc.simpleDesc
//  331             = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
        INC       DPTR
        MOV       A,#GenericApp_SimpleDesc & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(GenericApp_SimpleDesc >> 8) & 0xff
        MOVX      @DPTR,A
//  332   zclGenericApp_epDesc.latencyReq = noLatencyReqs;
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  333 
//  334   // Register the endpoint description with the AF
//  335   afRegister( &zclGenericApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV       R2,#zclGenericApp_epDesc & 0xff
        MOV       R3,#(zclGenericApp_epDesc >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  336 
//  337   // Register for all key events - This app will handle all key events
//  338   RegisterForKeys( zclGenericApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  339   
//  340   HalUARTWrite(HAL_UART_PORT_0,"Initializing...", sizeof("Initializing..."));
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "Initializing...">` & 0xff
        MOV       R3,#(`?<Constant "Initializing...">` >> 8) & 0xff
        LCALL     ??Subroutine9_0 & 0xFFFF
//  341   HalUARTPoll();
//  342   
//  343   // ENDNEW
//  344   
//  345   
//  346   // This app is part of the Home Automation Profile
//  347   bdb_RegisterSimpleDescriptor( &zclGenericApp_SimpleDesc );
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclGenericApp_SimpleDesc & 0xff
        MOV       R3,#(zclGenericApp_SimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  348 
//  349   // Register the ZCL General Cluster Library callback functions
//  350   zclGeneral_RegisterCmdCallbacks( GENERICAPP_ENDPOINT, &zclGenericApp_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclGenericApp_CmdCallbacks & 0xff
        MOV       R3,#(zclGenericApp_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0x20
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  351   
//  352   // GENERICAPP_TODO: Register other cluster command callbacks here
//  353 
//  354   // Register the application's attribute list
//  355   zcl_registerAttrList( GENERICAPP_ENDPOINT, zclGenericApp_NumAttributes, zclGenericApp_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclGenericApp_Attrs & 0xff
        MOV       R5,#(zclGenericApp_Attrs >> 8) & 0xff
        MOV       DPTR,#zclGenericApp_NumAttributes
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x20
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  356 
//  357   // Register the Application to receive the unprocessed Foundation command/response messages
//  358   zcl_registerForMsg( zclGenericApp_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  359 
//  360 #ifdef ZCL_DISCOVER
//  361   // Register the application's command list
//  362   zcl_registerCmdList( GENERICAPP_ENDPOINT, zclCmdsArraySize, zclGenericApp_Cmds );
//  363 #endif
//  364 
//  365   // Register low voltage NV memory protection application callback
//  366   RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
        ; Setup parameters for call to function RegisterVoltageWarningCB
        MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
        MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
        LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
//  367 
//  368   // Register for all key events - This app will handle all key events
//  369   RegisterForKeys( zclGenericApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  370 
//  371   bdb_RegisterCommissioningStatusCB( zclGenericApp_ProcessCommissioningStatus );
        ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
        MOV       R2,#`??zclGenericApp_ProcessCommissioningStatus::?re` & 0xff
        MOV       R3,#(`??zclGenericApp_ProcessCommissioningStatus::?re` >> 8) & 0xff
        LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
//  372   bdb_RegisterIdentifyTimeChangeCB( zclGenericApp_ProcessIdentifyTimeChange );
        ; Setup parameters for call to function bdb_RegisterIdentifyTimeChangeCB
        MOV       R2,#`??zclGenericApp_ProcessIdentifyTimeChange::?rel` & 0xff
        MOV       R3,#(`??zclGenericApp_ProcessIdentifyTimeChange::?rel` >> 8) & 0xff
        LCALL     `??bdb_RegisterIdentifyTimeChangeCB::?relay`; Banked call to: bdb_RegisterIdentifyTimeChangeCB
//  373   bdb_RegisterBindNotificationCB( zclGenericApp_BindNotification );
        ; Setup parameters for call to function bdb_RegisterBindNotificationCB
        MOV       R2,#`??zclGenericApp_BindNotification::?relay` & 0xff
        MOV       R3,#(`??zclGenericApp_BindNotification::?relay` >> 8) & 0xff
        LCALL     `??bdb_RegisterBindNotificationCB::?relay`; Banked call to: bdb_RegisterBindNotificationCB
//  374 
//  375 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//  376   bdb_RegisterTouchlinkTargetEnableCB( zclGenericApp_ProcessTouchlinkTargetEnable );
//  377 #endif
//  378 
//  379 #ifdef ZCL_DIAGNOSTIC
//  380   // Register the application's callback function to read/write attribute data.
//  381   // This is only required when the attribute data format is unknown to ZCL.
//  382   zcl_registerReadWriteCB( GENERICAPP_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  383 
//  384   if ( zclDiagnostic_InitStats() == ZSuccess )
//  385   {
//  386     // Here the user could start the timer to save Diagnostics to NV
//  387   }
//  388 #endif
//  389 
//  390 
//  391 #ifdef LCD_SUPPORTED
//  392   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       R2,#sDeviceName & 0xff
        MOV       R3,#(sDeviceName >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  393 #endif  // LCD_SUPPORTED
//  394 
//  395 
//  396 }
        MOV       A,#0x1d
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  397 
//  398 /*********************************************************************
//  399  * @fn          zclSample_event_loop
//  400  *
//  401  * @brief       Event Loop Processor for zclGeneral.
//  402  *
//  403  * @param       none
//  404  *
//  405  * @return      none
//  406  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  407 uint16 zclGenericApp_event_loop( uint8 task_id, uint16 events )
zclGenericApp_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclGenericApp_event_loop
        CODE
//  408 {
        FUNCALL zclGenericApp_event_loop, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, zclGenericApp_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, zclGenericApp_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, zclGenericApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, zclGenericApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, zclGenericApp_SerialMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  409   if (HAL_KEY_SW_6) {
//  410 	  HalUARTWrite(HAL_UART_PORT_0, "ok", sizeof("not ok"));
        MOV       ?V0,#`?<Constant "ok">` & 0xff
        MOV       ?V1,#(`?<Constant "ok">` >> 8) & 0xff
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x7
        LCALL     ?Subroutine8 & 0xFFFF
//  411 	  HalUARTPoll();
//  412 	  HalLedSet(HAL_LED_3, HAL_LED_MODE_TOGGLE);
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x8
        MOV       R1,#0x4
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  413   }
//  414   
//  415   HalUARTWrite(HAL_UART_PORT_0, "ok", (byte)osal_strlen("ok"));
        ; Setup parameters for call to function osal_strlen
        LCALL     ?Subroutine5 & 0xFFFF
//  416   HalUARTPoll();
//  417   HalLedSet(HAL_LED_3, HAL_LED_MODE_OFF);
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x4
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  418 	
//  419   afIncomingMSGPacket_t *MSGpkt;
//  420   afDataConfirm_t *afDataConfirm; // NEW
//  421 
//  422   // NEW
//  423   
//  424   // Data Confirmation message fields
//  425   byte sentEP;
//  426   ZStatus_t sentStatus;
//  427   byte sentTransID;       // This should match the value sent
//  428   
//  429   //ENDNEW
//  430   (void)task_id;  // Intentionally unreferenced parameter
//  431   
//  432   
//  433   bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING);
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0xa
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  434   
//  435 
//  436   if ( events & SYS_EVENT_MSG )
        MOV       A,R7
        ANL       A,#0x80
        JNZ       ??zclGenericApp_event_loop_0
//  437   {
//  438     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclGenericApp_TaskID )) )
//  439     {
//  440       switch ( MSGpkt->hdr.event )
//  441       {
//  442 	      // NEW
//  443 	case ZDO_CB_MSG:
//  444           zclGenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  445           break;
//  446 	  
//  447 	case AF_DATA_CONFIRM_CMD:
//  448           // This message is received as a confirmation of a data packet sent.
//  449           // The status is of ZStatus_t type [defined in ZComDef.h]
//  450           // The message fields are defined in AF.h
//  451           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  452           sentEP = afDataConfirm->endpoint;
//  453           sentStatus = afDataConfirm->hdr.status;
//  454           sentTransID = afDataConfirm->transID;
//  455           (void)sentEP;
//  456           (void)sentTransID;
//  457 
//  458           // Action taken when confirmation is received.
//  459           if ( sentStatus != ZSuccess )
//  460           {
//  461             // The data wasn't delivered -- Do something
//  462             HalUARTWrite(0, "Data Lost\r\n", 8);
//  463           }
//  464           else {
//  465             HalUARTWrite(0, "Data Sent\r\n", 8);
//  466           }
//  467           break;
//  468 
//  469         case AF_INCOMING_MSG_CMD:
//  470           zclGenericApp_MessageMSGCB( MSGpkt );
//  471           break;
//  472 	  // ENDNEW
//  473 
//  474 	  
//  475         case ZCL_INCOMING_MSG:
//  476           // Incoming ZCL Foundation command/response messages
//  477           zclGenericApp_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  478           break;
//  479 
//  480         case KEY_CHANGE:
//  481           zclGenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  482           break;
//  483 
//  484         case ZDO_STATE_CHANGE:
//  485           zclGenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  486 
//  487           // now on the network
//  488           if ( (zclGenericApp_NwkState == DEV_ZB_COORD) ||
//  489                (zclGenericApp_NwkState == DEV_ROUTER)   ||
//  490                (zclGenericApp_NwkState == DEV_END_DEVICE) )
//  491           {
//  492             giGenAppScreenMode = GENERIC_MAINMODE;
//  493             zclGenericApp_LcdDisplayUpdate();
//  494           }
//  495           break;
//  496 
//  497         default:
//  498           break;
//  499       }
//  500 
//  501       // Release the memory
//  502       osal_msg_deallocate( (uint8 *)MSGpkt );
//  503       
//  504       // Next
//  505       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclGenericApp_TaskID );		// NEW
//  506     }
//  507 
//  508     // return unprocessed events
//  509     return (events ^ SYS_EVENT_MSG);
//  510   }
//  511   
//  512   // NEW
//  513   
//  514   // Send a message out - This event is generated by a timer
//  515   //  (setup in GenericApp_Init()).
//  516   if ( events & GENERICAPP_SEND_MSG_EVT )
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??zclGenericApp_event_loop_1 & 0xFFFF
//  517   {
//  518     // Send "the" message
//  519     //GenericApp_SendTheMessage();
//  520     // return unprocessed events
//  521     return (events ^ GENERICAPP_SEND_MSG_EVT);
        XRL       A,#0x1
        LJMP      ??zclGenericApp_event_loop_2 & 0xFFFF
//  522   }
??zclGenericApp_event_loop_3:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#zclGenericApp_NwkState
        MOVX      @DPTR,A
        XRL       A,#0x9
        JZ        ??zclGenericApp_event_loop_4
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??zclGenericApp_event_loop_4
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_4:
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function zclGenericApp_LcdDisplayUpdate
        LCALL     `??zclGenericApp_LcdDisplayUpdate::?relay`; Banked call to: zclGenericApp_LcdDisplayUpdate
??zclGenericApp_event_loop_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
??zclGenericApp_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??zclGenericApp_event_loop_6 & 0xFFFF
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x1a
        JZ        ??zclGenericApp_event_loop_7
        ADD       A,#-0x1a
        JZ        ??zclGenericApp_event_loop_8
        ADD       A,#0x74
        JZ        ??zclGenericApp_event_loop_9
        ADD       A,#-0x11
        JZ        ??zclGenericApp_event_loop_3
        ADD       A,#-0x2
        JZ        ??zclGenericApp_event_loop_10
        ADD       A,#-0x2a
        JZ        ??zclGenericApp_event_loop_11
        SJMP      ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_10:
        ; Setup parameters for call to function zclGenericApp_ProcessZDOMsgs
        LCALL     `??zclGenericApp_ProcessZDOMsgs::?relay`; Banked call to: zclGenericApp_ProcessZDOMsgs
        SJMP      ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_11:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,#0x8
        MOV       R5,#0x0
        JZ        ??zclGenericApp_event_loop_12
        ; Setup parameters for call to function HalUARTWrite
        MOV       R2,#`?<Constant "Data Lost\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "Data Lost\\r\\n">` >> 8) & 0xff
??zclGenericApp_event_loop_13:
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
        SJMP      ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_12:
        ; Setup parameters for call to function HalUARTWrite
        MOV       R2,#`?<Constant "Data Sent\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "Data Sent\\r\\n">` >> 8) & 0xff
        SJMP      ??zclGenericApp_event_loop_13
??zclGenericApp_event_loop_7:
        ; Setup parameters for call to function zclGenericApp_MessageMSGCB
        LCALL     `??zclGenericApp_MessageMSGCB::?relay`; Banked call to: zclGenericApp_MessageMSGCB
        SJMP      ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_8:
        MOV       A,R2
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclGenericApp_event_loop_14
        ADD       A,#-0x3
        JNZ       ??zclGenericApp_event_loop_15
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclGenericApp_event_loop_15
        INC       R0
        SJMP      ??CrossCallReturnLabel_5
??zclGenericApp_event_loop_14:
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        SJMP      ??zclGenericApp_event_loop_16
??zclGenericApp_event_loop_17:
        INC       R0
??zclGenericApp_event_loop_16:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JC        ??zclGenericApp_event_loop_17
??zclGenericApp_event_loop_15:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
??zclGenericApp_event_loop_9:
        ; Setup parameters for call to function zclGenericApp_HandleKeys
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?V0
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGenericApp_HandleKeys::?relay`; Banked call to: zclGenericApp_HandleKeys
        LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
??zclGenericApp_event_loop_6:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        SJMP      ??zclGenericApp_event_loop_18
//  523   
//  524   if (events & GENERICAPP_UART_RX_EVT) {
??zclGenericApp_event_loop_1:
        ANL       A,#0x2
        JZ        ??zclGenericApp_event_loop_19
//  525     HalUARTWrite(0, "RX_EVT", 7);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x7
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "RX_EVT">` & 0xff
        MOV       R3,#(`?<Constant "RX_EVT">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  526     zclGenericApp_SerialMSGCB();
        ; Setup parameters for call to function zclGenericApp_SerialMSGCB
        LCALL     `??zclGenericApp_SerialMSGCB::?relay`; Banked call to: zclGenericApp_SerialMSGCB
//  527   }
//  528   
//  529   // ENDNEW
//  530   
//  531 
//  532 //  if ( events & GENERICAPP_MAIN_SCREEN_EVT )
//  533 //  {
//  534 //    giGenAppScreenMode = GENERIC_MAINMODE;
//  535 //    zclGenericApp_LcdDisplayUpdate();
//  536 //    return ( events ^ GENERICAPP_MAIN_SCREEN_EVT );
//  537 //  }
//  538   
//  539 #if ZG_BUILD_ENDDEVICE_TYPE    
//  540   if ( events & GENERICAPP_END_DEVICE_REJOIN_EVT )
//  541   {
//  542     bdb_ZedAttemptRecoverNwk();
//  543     return ( events ^ GENERICAPP_END_DEVICE_REJOIN_EVT );
//  544   }
//  545 #endif
//  546 
//  547   /* GENERICAPP_TODO: handle app events here */
//  548   
//  549   
//  550   if ( events & GENERICAPP_EVT_1 )
??zclGenericApp_event_loop_19:
        MOV       A,R6
        ANL       A,#0x8
        JZ        ??zclGenericApp_event_loop_20
//  551   {
//  552     // toggle LED 2 state, start another timer for 500ms
//  553 	HalUARTWrite(HAL_UART_PORT_0, "toggle", (byte)osal_strlen("toggle"));
        MOV       ?V0,#`?<Constant "toggle">` & 0xff
        MOV       ?V1,#(`?<Constant "toggle">` >> 8) & 0xff
        ; Setup parameters for call to function osal_strlen
        LCALL     ?Subroutine5 & 0xFFFF
//  554 	HalUARTPoll();
//  555     HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x8
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  556     osal_start_timerEx( zclGenericApp_TaskID, GENERICAPP_EVT_1, 500 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1f4
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x8
        MOV       R3,#0x0
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  557     
//  558     return ( events ^ GENERICAPP_EVT_1 );
        MOV       A,R6
        XRL       A,#0x8
??zclGenericApp_event_loop_2:
        MOV       R2,A
        MOV       A,R7
??zclGenericApp_event_loop_18:
        MOV       R3,A
        SJMP      ??zclGenericApp_event_loop_21
//  559   }
//  560   
//  561   /*
//  562   if ( events & GENERICAPP_EVT_2 )
//  563   {
//  564     
//  565     return ( events ^ GENERICAPP_EVT_2 );
//  566   }
//  567   
//  568   if ( events & GENERICAPP_EVT_3 )
//  569   {
//  570     
//  571     return ( events ^ GENERICAPP_EVT_3 );
//  572   }
//  573   */
//  574   
//  575   // Discard unknown events
//  576   return 0;
??zclGenericApp_event_loop_20:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclGenericApp_event_loop_21:
          CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  577 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function zclGenericApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function zclGenericApp_event_loop
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOV       R0,#0x0
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function zclGenericApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zclGenericApp_event_loop
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV       ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,?V2
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function zclGenericApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zclGenericApp_event_loop
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_3
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-4
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zclGenericApp_event_loop
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_4
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-4
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOV       R5,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine9_0:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function zclGenericApp_Init
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zclGenericApp_event_loop
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zclGenericApp_event_loop
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_3
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-4
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zclGenericApp_event_loop
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_4
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-4
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
        ; Setup parameters for call to function HalUARTPoll
        ; Setup parameters for call to function HalUARTPoll
        ; Setup parameters for call to function HalUARTPoll
        ; Setup parameters for call to function HalUARTPoll
        LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
//  578 
//  579 
//  580 
//  581 
//  582 
//  583 
//  584 // NEW
//  585 
//  586 /*********************************************************************
//  587  * Event Generation Functions
//  588  */
//  589  
//  590 /*********************************************************************
//  591  * @fn      zclGenericApp_ProcessZDOMsgs()
//  592  * @brief   Process response messages
//  593  * @param   none
//  594  * @return  none
//  595  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  596 void zclGenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
zclGenericApp_ProcessZDOMsgs:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function zclGenericApp_ProcessZDOMsgs
        CODE
//  597 {
        FUNCALL zclGenericApp_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  598   switch ( inMsg->clusterID )
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclGenericApp_ProcessZDOMsgs_0
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x80
??zclGenericApp_ProcessZDOMsgs_0:
        JNZ       ??zclGenericApp_ProcessZDOMsgs_1
//  599   {
//  600     case Match_Desc_rsp:
//  601       {
//  602         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL     `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R7,?V1
//  603         if ( pRsp )
        MOV       A,R2
        ORL       A,R7
        JZ        ??zclGenericApp_ProcessZDOMsgs_1
//  604         {
//  605           if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclGenericApp_ProcessZDOMsgs_2
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??zclGenericApp_ProcessZDOMsgs_2
//  606           {
//  607             zclGenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV       DPTR,#zclGenericApp_DstAddr + 8
        MOV       A,#0x2
        LCALL     ?Subroutine4 & 0xFFFF
//  608             zclGenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
??CrossCallReturnLabel_0:
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#zclGenericApp_DstAddr
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine4 & 0xFFFF
//  609             // Take the first endpoint, Can be changed to search through endpoints
//  610             zclGenericApp_DstAddr.endPoint = pRsp->epList[0];
??CrossCallReturnLabel_1:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#zclGenericApp_DstAddr + 9
        MOVX      @DPTR,A
//  611             // Light LED
//  612             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        MOV       R1,#0x8
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  613           }
//  614           osal_mem_free( pRsp );
??zclGenericApp_ProcessZDOMsgs_2:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  615         }
//  616       }
//  617       break;
//  618   }
//  619 }
??zclGenericApp_ProcessZDOMsgs_1:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock19
//  620 
//  621 
//  622 
//  623 
//  624 
//  625 /*********************************************************************
//  626  * LOCAL FUNCTIONS
//  627  */
//  628 
//  629 /*********************************************************************
//  630  * @fn      zclGenericApp_MessageMSGCB
//  631  * @brief   Data message processor callback.  This function processes
//  632  *          any incoming data - probably from other devices.  So, based
//  633  *          on cluster ID, perform the intended action.
//  634  * @param   none
//  635  * @return  none
//  636  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  637 void zclGenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
zclGenericApp_MessageMSGCB:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zclGenericApp_MessageMSGCB
        CODE
//  638 {
        FUNCALL zclGenericApp_MessageMSGCB, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, str_reverse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  639   unsigned char temp_extAddr[8];
//  640   unsigned char i = 0;
        MOV       ?V0,#0x0
//  641   unsigned char existed = 0;
//  642   unsigned char buffer[8] = "";
        MOV       DPTR,#`?<Constant "">`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x8
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  643   switch ( pkt->clusterId )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclGenericApp_MessageMSGCB_0
        INC       DPTR
        MOVX      A,@DPTR
??zclGenericApp_MessageMSGCB_0:
        JZ        $+5
        LJMP      ??zclGenericApp_MessageMSGCB_1 & 0xFFFF
//  644   {
//  645     case GENERICAPP_CLUSTERID:
//  646       {// "the" message
//  647         (void)APSME_LookupExtAddr(pkt->srcAddr.addr.shortAddr, temp_extAddr);
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP102_8
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
//  648         for (i = 0; i < device_count+1; i++) {  // to see whether the device ever connected
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       ?V6,#0x0
        SJMP      ??zclGenericApp_MessageMSGCB_2
??zclGenericApp_MessageMSGCB_3:
        INC       ?V0
??zclGenericApp_MessageMSGCB_2:
        MOV       R2,?V0
        MOV       DPTR,#device_count
        MOVX      A,@DPTR
        MOV       R1,#0x0
        ADD       A,#0x1
        MOV       R0,A
        JNC       ??zclGenericApp_MessageMSGCB_4
        INC       R1
??zclGenericApp_MessageMSGCB_4:
        CLR       C
        MOV       A,R2
        SUBB      A,R0
        CLR       A
        SUBB      A,R1
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JNC       ??zclGenericApp_MessageMSGCB_5
//  649           if (osal_memcmp(EndDeviceInfos[i].extAddr, temp_extAddr, 8)) { //if existed, break;
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,R2
        MOV       B,#0xa
        MUL       AB
        MOV       R2,A
        MOV       R3,B
        MOV       A,#(EndDeviceInfos + 1) & 0xff
        ADD       A,R2
        MOV       ?V2,A
        MOV       A,#((EndDeviceInfos + 1) >> 8) & 0xff
        ADDC      A,R3
        MOV       R1,?V2
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R1
        JZ        ??zclGenericApp_MessageMSGCB_3
//  650             existed = 1;
//  651             HalUARTWrite(0, "Device Found Form Previous Log -> Existed!\r\n", 36);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x24
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "Device Found Form Pre...">` & 0xff
        MOV       R3,#(`?<Constant "Device Found Form Pre...">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  652             break;
        SJMP      ??zclGenericApp_MessageMSGCB_6
//  653           }
//  654         }
//  655         if ( !existed ) {  //not connected before, register
//  656           HalUARTWrite(0, "New Device!\r\n",15);
??zclGenericApp_MessageMSGCB_5:
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0xf
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "New Device!\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "New Device!\\r\\n">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  657           osal_memcpy(EndDeviceInfos[device_count].extAddr, temp_extAddr, 8);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R4,#0x8
        MOV       R5,#0x0
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV       A,#(EndDeviceInfos + 1) & 0xff
        ADD       A,R0
        MOV       R2,A
        MOV       A,#((EndDeviceInfos + 1) >> 8) & 0xff
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
//  658           EndDeviceInfos[device_count].endPoint = pkt->srcAddr.endPoint;
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV       A,#EndDeviceInfos & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(EndDeviceInfos >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        MOV       A,R2
        MOVX      @DPTR,A
//  659           EndDeviceInfos[device_count].compressed_addr = GENERICAPP_ENDPOINT | EndDeviceInfos[device_count].endPoint;
        MOV       A,#0x20
        ORL       A,R2
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  660           device_count++;	// device added
        MOV       DPTR,#device_count
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  661         }
//  662         if (device_count == 16) { device_count = 0;}  //in case to overflow
??zclGenericApp_MessageMSGCB_6:
        MOV       DPTR,#device_count
        MOVX      A,@DPTR
        XRL       A,#0x10
        JNZ       ??zclGenericApp_MessageMSGCB_7
        CLR       A
        MOVX      @DPTR,A
//  663         //TO DO: process data received, send it to slave machine
//  664         osal_memcpy(&buffer[0], pkt->cmd.Data, 8);
??zclGenericApp_MessageMSGCB_7:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R6
        ADD       A,#0x22
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
//  665         str_reverse((char*)&buffer[3], 1);
        ; Setup parameters for call to function str_reverse
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??str_reverse::?relay`; Banked call to: str_reverse
//  666         HalUARTWrite(0, &buffer[0], 8);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  667         break;
//  668       }
//  669   }
//  670 }
??zclGenericApp_MessageMSGCB_1:
        MOV       A,#0x10
          CFI EndBlock cfiBlock20
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 31)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Valid
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock21

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function zclGenericApp_MessageMSGCB
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function zclGenericApp_MessageMSGCB
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOV       DPTR,#device_count
        MOVX      A,@DPTR
        MOV       B,#0xa
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24
//  671 
//  672 
//  673 
//  674 
//  675 
//  676 /*********************************************************************
//  677  * @fn     zclGenericApp_SendTheMessage
//  678  * @brief   Send "the" message.
//  679  * @param   none
//  680  * @return  none
//  681  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  682 void zclGenericApp_SendTheMessage( unsigned char dest_endID, unsigned char cmd, unsigned int data)
zclGenericApp_SendTheMessage:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function zclGenericApp_SendTheMessage
        CODE
//  683 {
        FUNCALL zclGenericApp_SendTheMessage, osal_buffer_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_SendTheMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_SendTheMessage, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_SendTheMessage, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V1,R2
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
//  684   unsigned char theMessageData[6] = "";
        MOV       DPTR,#`?<Constant "">_1`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x6
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  685   theMessageData[0] = 0xCC;  //beginning check byte
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x34
        MOVX      @DPTR,A
//  686   theMessageData[1] = EndDeviceInfos[dest_endID].compressed_addr;
        MOV       A,R1
        MOV       B,#0xa
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#EndDeviceInfos & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(EndDeviceInfos >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  687   theMessageData[2] = cmd;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V1
        MOVX      @DPTR,A
//  688   osal_buffer_uint16(&theMessageData[3],  data);
        ; Setup parameters for call to function osal_buffer_uint16
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_buffer_uint16::?relay`; Banked call to: osal_buffer_uint16
//  689   theMessageData[5] = 0x33;  //end check byte
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x33
        MOVX      @DPTR,A
//  690   //set the destination below
//  691   zclGenericApp_DstAddr.addrMode = (afAddrMode_t)Addr64Bit;
        MOV       DPTR,#zclGenericApp_DstAddr + 8
        MOV       A,#0x3
        MOVX      @DPTR,A
//  692   zclGenericApp_DstAddr.endPoint = EndDeviceInfos[dest_endID].endPoint;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       DPTR,#zclGenericApp_DstAddr + 9
        MOVX      @DPTR,A
//  693   osal_memcpy(zclGenericApp_DstAddr.addr.extAddr, EndDeviceInfos[dest_endID].extAddr, 8);
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,#zclGenericApp_DstAddr & 0xff
        MOV       R3,#(zclGenericApp_DstAddr >> 8) & 0xff
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  694   
//  695   if ( AF_DataRequest( &zclGenericApp_DstAddr, &zclGenericApp_epDesc,
//  696                        GENERICAPP_CLUSTERID,
//  697                        7,//send one more char or the last char might be missing
//  698                        theMessageData,
//  699                        &zclGenericApp_TransID,
//  700                        AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )                     
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V2,#0x1e
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V2,#zclGenericApp_TransID & 0xff
        MOV       ?V3,#(zclGenericApp_TransID >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V2,#0x7
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R1,#0x0
        MOV       R4,#zclGenericApp_epDesc & 0xff
        MOV       R5,#(zclGenericApp_epDesc >> 8) & 0xff
        MOV       R2,#zclGenericApp_DstAddr & 0xff
        MOV       R3,#(zclGenericApp_DstAddr >> 8) & 0xff
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R1
        JNZ       ??zclGenericApp_SendTheMessage_0
//  701   {
//  702     // Successfully requested to be sent.
//  703     HalUARTWrite(0, "Successfully Sent\r\n", 21);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x15
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "Successfully Sent\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "Successfully Sent\\r\\n">` >> 8) & 0xff
        SJMP      ??zclGenericApp_SendTheMessage_1
//  704   }
//  705   else
//  706   {
//  707     // Error occurred in request to send.
//  708     HalUARTWrite(0, "Couldn't Sent\r\n", 17);
??zclGenericApp_SendTheMessage_0:
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "Couldn\\'t Sent\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "Couldn\\'t Sent\\r\\n">` >> 8) & 0xff
??zclGenericApp_SendTheMessage_1:
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  709   }
//  710 }
        MOV       A,#0x6
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock25
//  711 
//  712 
//  713 
//  714 
//  715 
//  716 //@fn: zclGenericApp_SerialMSGCB
//  717 //@breif: process data received by UART, used to execute cmds from slave machine
//  718 //@param: none
//  719 //@return: none

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  720 void zclGenericApp_SerialMSGCB(void)
zclGenericApp_SerialMSGCB:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function zclGenericApp_SerialMSGCB
        CODE
//  721 {
        FUNCALL zclGenericApp_SerialMSGCB, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_SerialMSGCB, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_SerialMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_SerialMSGCB, zclGenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 7
        MOV       A,#-0x7
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  722   unsigned char dest_endID = 0; //this number is the index of EndDeviceInfos
//  723   unsigned int data = 0;
//  724   unsigned char buf [7] = "";
        MOV       DPTR,#`?<Constant "">_2`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x7
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  725  // printf("UART received!");
//  726   HalUARTRead(0, buf, 6);
        ; Setup parameters for call to function HalUARTRead
        MOV       R4,#0x6
        MOV       R5,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,A
        LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
//  727   if ( (buf[1] & GENERICAPP_ENDPOINT) && (buf[0] == 0xCC) && (buf[5] == 0x33)) {  //make sure cmd send to this device
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JNC       ??zclGenericApp_SerialMSGCB_0
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0xcc
        JNZ       ??zclGenericApp_SerialMSGCB_0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0x33
        JNZ       ??zclGenericApp_SerialMSGCB_0
//  728     dest_endID = buf[1] & 0x1F; //get destnation endPoint from uart message
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x1f
        MOV       ?V0,A
//  729     data = osal_build_uint16(&buf[3]);
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V2,R2
        MOV       ?V3,R3
//  730     HalUARTWrite(0, buf, 6);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x6
        MOV       R5,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  731     if (buf[2]&0x80) {  //cmd for coordinator
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.7
        JC        ??zclGenericApp_SerialMSGCB_0
//  732       switch (buf[2]) {
//  733         //add cmds here, e.g. case: 0x81...
//  734         default:
//  735         break;
//  736       }
//  737     } else { //cmd for end device, send it
//  738       zclGenericApp_SendTheMessage(dest_endID, buf[2], data);
        ; Setup parameters for call to function zclGenericApp_SendTheMessage
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       R2,A
        MOV       R1,?V0
        LCALL     `??zclGenericApp_SendTheMessage::?relay`; Banked call to: zclGenericApp_SendTheMessage
//  739     }
//  740   }
//  741 }
??zclGenericApp_SerialMSGCB_0:
        MOV       A,#0x7
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock26
//  742 
//  743 
//  744 
//  745 
//  746 
//  747 //@fn rt_str_reverse
//  748 //@brief message received is reversed, so we need to reverse again using this function
//  749 //@para *str the first byte in a string that needs reversed
//  750 //@para length the total length that needs to be reversed, 0 included
//  751 //e.g a[] = {1,2,3,4}, then rt_str_reverse(&a[0], 3) result in {4, 3, 2, 1}

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  752 void str_reverse(char *str, int length) {
str_reverse:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function str_reverse
        CODE
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  753   char temp, *end_ptr;
//  754   end_ptr = str + length;
        MOV       A,R2
        ADD       A,R4
        MOV       R0,A
        MOV       A,R3
        ADDC      A,R5
        SJMP      ??str_reverse_0
//  755   while(end_ptr > str) {
//  756     temp = *str;
??str_reverse_1:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
//  757     *str = *end_ptr;
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
//  758     *end_ptr = temp;
        MOV       A,R4
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine4 & 0xFFFF
//  759     str++;
??CrossCallReturnLabel_2:
        MOV       R2,DPL
        MOV       R3,DPH
//  760     end_ptr--;
        MOV       A,R0
        ADD       A,#-0x1
        DEC       R0
        MOV       A,R1
        ADDC      A,#-0x1
??str_reverse_0:
        MOV       R1,A
//  761   }
        CLR       C
        MOV       A,R2
        SUBB      A,R0
        MOV       A,R3
        SUBB      A,R1
        JC        ??str_reverse_1
//  762 }
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock27

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function zclGenericApp_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zclGenericApp_ProcessZDOMsgs
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function str_reverse
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond30) CFA_SP SP+-7
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31
//  763 
//  764 // ENDNEW
//  765 
//  766 
//  767 
//  768 
//  769 
//  770 
//  771 
//  772 
//  773 
//  774 
//  775 
//  776 
//  777 /*********************************************************************
//  778  * @fn      zclGenericApp_HandleKeys
//  779  *
//  780  * @brief   Handles all key events for this device.
//  781  *
//  782  * @param   shift - true if in shift/alt.
//  783  * @param   keys - bit field for key events. Valid entries:
//  784  *                 HAL_KEY_SW_5
//  785  *                 HAL_KEY_SW_4
//  786  *                 HAL_KEY_SW_2
//  787  *                 HAL_KEY_SW_1
//  788  *
//  789  * @return  none
//  790  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  791 static void zclGenericApp_HandleKeys( byte shift, byte keys )
zclGenericApp_HandleKeys:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function zclGenericApp_HandleKeys
        CODE
//  792 {
        FUNCALL zclGenericApp_HandleKeys, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, bdb_resetLocalAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, zclGenericApp_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
//  793   if ( keys & HAL_KEY_SW_1 )
        MOV       C,0xE0 /* A   */.0
        JNC       ??zclGenericApp_HandleKeys_0
//  794   {
//  795     static bool LED_OnOff = FALSE;
//  796     
//  797     giGenAppScreenMode = GENERIC_MAINMODE;
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
//  798     
//  799     /* GENERICAPP_TODO: add app functionality to hardware keys here */
//  800     
//  801     // for example, start/stop LED 2 toggling with 500ms period
//  802     if (LED_OnOff)
        MOV       DPTR,#??LED_OnOff
        MOVX      A,@DPTR
        JZ        ??zclGenericApp_HandleKeys_1
//  803     { 
//  804       // if the LED is blinking, stop the osal timer and turn the LED off
//  805       osal_stop_timerEx(zclGenericApp_TaskID, GENERICAPP_EVT_1);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x8
        MOV       R3,#0x0
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  806       HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  807       LED_OnOff = FALSE;
        MOV       DPTR,#??LED_OnOff
        CLR       A
        SJMP      ??zclGenericApp_HandleKeys_2
//  808     }
//  809     else
//  810     {
//  811       // turn on LED 2 and start an osal timer to toggle it after 500ms, search
//  812       // for GENERICAPP_EVT_1 to see event handling after expired timer
//  813       osal_start_timerEx( zclGenericApp_TaskID, GENERICAPP_EVT_1, 500 );
??zclGenericApp_HandleKeys_1:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1f4
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R2,#0x8
        MOV       R3,#0x0
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//  814       HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  815       LED_OnOff = TRUE;
        MOV       DPTR,#??LED_OnOff
        MOV       A,#0x1
??zclGenericApp_HandleKeys_2:
        MOVX      @DPTR,A
//  816     }
//  817   }
//  818   // Start the BDB commissioning method
//  819   if ( keys & HAL_KEY_SW_2 )
??zclGenericApp_HandleKeys_0:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.1
        JNC       ??zclGenericApp_HandleKeys_3
//  820   {
//  821     giGenAppScreenMode = GENERIC_MAINMODE;
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
//  822 
//  823     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING | BDB_COMMISSIONING_MODE_INITIATOR_TL);
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0xf
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  824   }
//  825   if ( keys & HAL_KEY_SW_3 )
??zclGenericApp_HandleKeys_3:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.4
        JNC       ??zclGenericApp_HandleKeys_4
//  826   {
//  827     giGenAppScreenMode = GENERIC_MAINMODE;
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
//  828   
//  829     // touchlink target commissioning, if enabled  
//  830 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//  831     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_FINDING_BINDING);
//  832     touchLinkTarget_EnableCommissioning( 30000 );
//  833 #endif
//  834     
//  835   }
//  836   if ( keys & HAL_KEY_SW_4 )
??zclGenericApp_HandleKeys_4:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.3
        JNC       ??zclGenericApp_HandleKeys_5
//  837   {
//  838     
//  839    giGenAppScreenMode = giGenAppScreenMode ? GENERIC_MAINMODE : GENERIC_HELPMODE;
        MOV       DPTR,#giGenAppScreenMode
        MOVX      A,@DPTR
        JZ        ??zclGenericApp_HandleKeys_6
        CLR       A
        SJMP      ??zclGenericApp_HandleKeys_7
??zclGenericApp_HandleKeys_6:
        MOV       A,#0x1
??zclGenericApp_HandleKeys_7:
        MOVX      @DPTR,A
//  840 #ifdef LCD_SUPPORTED
//  841     HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sClearLine & 0xff
        MOV       R3,#(sClearLine >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  842 #endif
//  843     
//  844   }
//  845   if ( keys & HAL_KEY_SW_5 )
??zclGenericApp_HandleKeys_5:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.2
        JNC       ??zclGenericApp_HandleKeys_8
//  846   {
//  847     bdb_resetLocalAction();
        ; Setup parameters for call to function bdb_resetLocalAction
        LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
//  848   }
//  849 
//  850   zclGenericApp_LcdDisplayUpdate();
??zclGenericApp_HandleKeys_8:
        ; Setup parameters for call to function zclGenericApp_LcdDisplayUpdate
        LCALL     `??zclGenericApp_LcdDisplayUpdate::?relay`; Banked call to: zclGenericApp_LcdDisplayUpdate
//  851 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock32

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??LED_OnOff:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  852 
//  853 /*********************************************************************
//  854  * @fn      zclGenericApp_LcdDisplayUpdate
//  855  *
//  856  * @brief   Called to update the LCD display.
//  857  *
//  858  * @param   none
//  859  *
//  860  * @return  none
//  861  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  862 void zclGenericApp_LcdDisplayUpdate( void )
zclGenericApp_LcdDisplayUpdate:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function zclGenericApp_LcdDisplayUpdate
        CODE
//  863 {
        FUNCALL zclGenericApp_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  864 #ifdef LCD_SUPPORTED
//  865   if ( giGenAppScreenMode == GENERIC_HELPMODE )
        MOV       DPTR,#giGenAppScreenMode
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclGenericApp_LcdDisplayUpdate_0
//  866   {
//  867     zclGenericApp_LcdDisplayHelpMode();
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x1
        MOV       R2,#sSwGenericApp & 0xff
        MOV       R3,#(sSwGenericApp >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sSwBDBMode & 0xff
        MOV       R3,#(sSwBDBMode >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        SJMP      ??zclGenericApp_LcdDisplayUpdate_1
//  868   }
//  869   else
//  870   {
//  871     zclGenericApp_LcdDisplayMainMode();
??zclGenericApp_LcdDisplayUpdate_0:
        MOV       DPTR,#zclGenericApp_NwkState
        MOVX      A,@DPTR
        XRL       A,#0x9
        JNZ       ??zclGenericApp_LcdDisplayUpdate_2
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV       R1,#0x0
        SJMP      ??zclGenericApp_LcdDisplayUpdate_3
??zclGenericApp_LcdDisplayUpdate_2:
        MOVX      A,@DPTR
        XRL       A,#0x7
        JNZ       ??zclGenericApp_LcdDisplayUpdate_4
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV       R1,#0x1
        SJMP      ??zclGenericApp_LcdDisplayUpdate_3
??zclGenericApp_LcdDisplayUpdate_4:
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclGenericApp_LcdDisplayUpdate_5
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV       R1,#0x2
??zclGenericApp_LcdDisplayUpdate_3:
        LCALL     `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
??zclGenericApp_LcdDisplayUpdate_5:
        MOV       DPTR,#gPermitDuration
        MOVX      A,@DPTR
        MOV       DPTR,#sSwHelp + 15
        JZ        ??zclGenericApp_LcdDisplayUpdate_6
        MOV       A,#0x2a
        SJMP      ??zclGenericApp_LcdDisplayUpdate_7
??zclGenericApp_LcdDisplayUpdate_6:
        MOV       A,#0x20
??zclGenericApp_LcdDisplayUpdate_7:
        MOVX      @DPTR,A
??zclGenericApp_LcdDisplayUpdate_1:
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       R2,#sSwHelp & 0xff
        MOV       R3,#(sSwHelp >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  872   }
//  873 #endif
//  874 }
        SJMP      ?Subroutine3
          CFI EndBlock cfiBlock33
//  875 
//  876 #ifdef LCD_SUPPORTED
//  877 /*********************************************************************
//  878  * @fn      zclGenericApp_LcdDisplayMainMode
//  879  *
//  880  * @brief   Called to display the main screen on the LCD.
//  881  *
//  882  * @param   none
//  883  *
//  884  * @return  none
//  885  */
//  886 static void zclGenericApp_LcdDisplayMainMode( void )
//  887 {
//  888   // display line 1 to indicate NWK status
//  889   if ( zclGenericApp_NwkState == DEV_ZB_COORD )
//  890   {
//  891     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
//  892   }
//  893   else if ( zclGenericApp_NwkState == DEV_ROUTER )
//  894   {
//  895     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
//  896   }
//  897   else if ( zclGenericApp_NwkState == DEV_END_DEVICE )
//  898   {
//  899     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
//  900   }
//  901 
//  902   // end of line 3 displays permit join status (*)
//  903   if ( gPermitDuration )
//  904   {
//  905     sSwHelp[15] = '*';
//  906   }
//  907   else
//  908   {
//  909     sSwHelp[15] = ' ';
//  910   }
//  911   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  912 }
//  913 
//  914 /*********************************************************************
//  915  * @fn      zclGenericApp_LcdDisplayHelpMode
//  916  *
//  917  * @brief   Called to display the SW options on the LCD.
//  918  *
//  919  * @param   none
//  920  *
//  921  * @return  none
//  922  */
//  923 static void zclGenericApp_LcdDisplayHelpMode( void )
//  924 {
//  925   HalLcdWriteString( (char *)sSwGenericApp, HAL_LCD_LINE_1 );
//  926   HalLcdWriteString( (char *)sSwBDBMode, HAL_LCD_LINE_2 );
//  927   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  928 }
//  929 #endif  // LCD_SUPPORTED
//  930 
//  931 /*********************************************************************
//  932  * @fn      zclGenericApp_ProcessCommissioningStatus
//  933  *
//  934  * @brief   Callback in which the status of the commissioning process are reported
//  935  *
//  936  * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
//  937  *
//  938  * @return  none
//  939  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  940 static void zclGenericApp_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
zclGenericApp_ProcessCommissioningStatus:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function zclGenericApp_ProcessCommissioningStatus
        CODE
//  941 {
        FUNCALL zclGenericApp_ProcessCommissioningStatus, bdb_StartCommissioning
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  942   switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclGenericApp_ProcessCommissioningStatus_0
//  943   {
//  944     case BDB_COMMISSIONING_FORMATION:
//  945       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclGenericApp_ProcessCommissioningStatus_0
//  946       {
//  947         //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
//  948         bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
        ; Setup parameters for call to function bdb_StartCommissioning
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x2
        MOV       R1,A
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  949       }
//  950       else
//  951       {
//  952         //Want to try other channels?
//  953         //try with bdb_setChannelAttribute
//  954       }
//  955     break;
//  956     case BDB_COMMISSIONING_NWK_STEERING:
//  957       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  958       {
//  959         //YOUR JOB:
//  960         //We are on the nwk, what now?
//  961       }
//  962       else
//  963       {
//  964         //See the possible errors for nwk steering procedure
//  965         //No suitable networks found
//  966         //Want to try other channels?
//  967         //try with bdb_setChannelAttribute
//  968       }
//  969     break;
//  970     case BDB_COMMISSIONING_FINDING_BINDING:
//  971       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  972       {
//  973         //YOUR JOB:
//  974       }
//  975       else
//  976       {
//  977         //YOUR JOB:
//  978         //retry?, wait for user interaction?
//  979       }
//  980     break;
//  981     case BDB_COMMISSIONING_INITIALIZATION:
//  982       //Initialization notification can only be successful. Failure on initialization
//  983       //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
//  984 
//  985       //YOUR JOB:
//  986       //We are on a network, what now?
//  987 
//  988     break;
//  989 #if ZG_BUILD_ENDDEVICE_TYPE    
//  990     case BDB_COMMISSIONING_PARENT_LOST:
//  991       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
//  992       {
//  993         //We did recover from losing parent
//  994       }
//  995       else
//  996       {
//  997         //Parent not found, attempt to rejoin again after a fixed delay
//  998         osal_start_timerEx(zclGenericApp_TaskID, GENERICAPP_END_DEVICE_REJOIN_EVT, GENERICAPP_END_DEVICE_REJOIN_DELAY);
//  999       }
// 1000     break;
// 1001 #endif 
// 1002   }
// 1003 }
??zclGenericApp_ProcessCommissioningStatus_0:
          CFI EndBlock cfiBlock34
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock35
// 1004 
// 1005 /*********************************************************************
// 1006  * @fn      zclGenericApp_ProcessIdentifyTimeChange
// 1007  *
// 1008  * @brief   Called to process any change to the IdentifyTime attribute.
// 1009  *
// 1010  * @param   endpoint - in which the identify has change
// 1011  *
// 1012  * @return  none
// 1013  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1014 static void zclGenericApp_ProcessIdentifyTimeChange( uint8 endpoint )
zclGenericApp_ProcessIdentifyTimeChange:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function zclGenericApp_ProcessIdentifyTimeChange
        CODE
// 1015 {
        FUNCALL zclGenericApp_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1016   (void) endpoint;
// 1017 
// 1018   if ( zclGenericApp_IdentifyTime > 0 )
        MOV       DPTR,#zclGenericApp_IdentifyTime
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??zclGenericApp_ProcessIdentifyTimeChange_0
// 1019   {
// 1020     HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOV       R3,#0x5
        MOV       R2,#-0x1
        MOV       R1,#0x2
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP      ??zclGenericApp_ProcessIdentifyTimeChange_1
// 1021   }
// 1022   else
// 1023   {
// 1024     HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
??zclGenericApp_ProcessIdentifyTimeChange_0:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1025   }
// 1026 }
??zclGenericApp_ProcessIdentifyTimeChange_1:
        SJMP      ?Subroutine3
          CFI EndBlock cfiBlock36
// 1027 
// 1028 /*********************************************************************
// 1029  * @fn      zclGenericApp_BindNotification
// 1030  *
// 1031  * @brief   Called when a new bind is added.
// 1032  *
// 1033  * @param   data - pointer to new bind data
// 1034  *
// 1035  * @return  none
// 1036  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1037 static void zclGenericApp_BindNotification( bdbBindNotificationData_t *data )
zclGenericApp_BindNotification:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function zclGenericApp_BindNotification
        CODE
// 1038 {
        ; Saved register size: 0
        ; Auto size: 0
// 1039   // GENERICAPP_TODO: process the new bind information
// 1040 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock37
// 1041 
// 1042 
// 1043 /*********************************************************************
// 1044  * @fn      zclGenericApp_ProcessTouchlinkTargetEnable
// 1045  *
// 1046  * @brief   Called to process when the touchlink target functionality
// 1047  *          is enabled or disabled
// 1048  *
// 1049  * @param   none
// 1050  *
// 1051  * @return  none
// 1052  */
// 1053 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
// 1054 static void zclGenericApp_ProcessTouchlinkTargetEnable( uint8 enable )
// 1055 {
// 1056   if ( enable )
// 1057   {
// 1058     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
// 1059   }
// 1060   else
// 1061   {
// 1062     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
// 1063   }
// 1064 }
// 1065 #endif
// 1066 
// 1067 /*********************************************************************
// 1068  * @fn      zclGenericApp_BasicResetCB
// 1069  *
// 1070  * @brief   Callback from the ZCL General Cluster Library
// 1071  *          to set all the Basic Cluster attributes to default values.
// 1072  *
// 1073  * @param   none
// 1074  *
// 1075  * @return  none
// 1076  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1077 static void zclGenericApp_BasicResetCB( void )
zclGenericApp_BasicResetCB:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function zclGenericApp_BasicResetCB
        CODE
// 1078 {
        FUNCALL zclGenericApp_BasicResetCB, zclGenericApp_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1079 
// 1080   /* GENERICAPP_TODO: remember to update this function with any
// 1081      application-specific cluster attribute variables */
// 1082   
// 1083   zclGenericApp_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclGenericApp_ResetAttributesToDefaultValues
        LCALL     `??zclGenericApp_ResetAttributesToDefaultValues:`; Banked call to: zclGenericApp_ResetAttributesToDefaultValues
// 1084   
// 1085 }
        SJMP      ?Subroutine3
          CFI EndBlock cfiBlock38
// 1086 /*********************************************************************
// 1087  * @fn      zclSampleApp_BatteryWarningCB
// 1088  *
// 1089  * @brief   Called to handle battery-low situation.
// 1090  *
// 1091  * @param   voltLevel - level of severity
// 1092  *
// 1093  * @return  none
// 1094  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1095 void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
zclSampleApp_BatteryWarningCB:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function zclSampleApp_BatteryWarningCB
        CODE
// 1096 {
        ; Saved register size: 0
        ; Auto size: 0
// 1097   if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
// 1098   {
// 1099     // Send warning message to the gateway and blink LED
// 1100   }
// 1101   else if ( voltLevel == VOLT_LEVEL_BAD )
// 1102   {
// 1103     // Shut down the system
// 1104   }
// 1105 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock39

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGenericApp_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sSwHelp>`:
        DB "SW4: Help       "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGenericApp_CmdCallbacks>`:
        DATA16
        DW `??zclGenericApp_BasicResetCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_ProcessZDOMsgs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_MessageMSGCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_SendTheMessage::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_SendTheMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_SerialMSGCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_SerialMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??str_reverse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    str_reverse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_LcdDisplayUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_ProcessCommissioningStatus::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_ProcessCommissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_ProcessIdentifyTimeChange::?rel`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_BindNotification::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_BindNotification

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleApp_BatteryWarningCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleApp_BatteryWarningCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Initializing...">`:
        DB "Initializing..."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ok">`:
        DB "ok"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Data Lost\\r\\n">`:
        DB "Data Lost\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Data Sent\\r\\n">`:
        DB "Data Sent\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "RX_EVT">`:
        DB "RX_EVT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "toggle">`:
        DB "toggle"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Device Found Form Pre...">`:
        DB "Device Found Form Previous Log -> Existed!\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "New Device!\\r\\n">`:
        DB "New Device!\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">_1`:
        DB ""
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Successfully Sent\\r\\n">`:
        DB "Successfully Sent\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Couldn\\'t Sent\\r\\n">`:
        DB "Couldn't Sent\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">_2`:
        DB ""
        DB 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1f4:
        DD 500

        END
// 1106 
// 1107 /******************************************************************************
// 1108  *
// 1109  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1110  *
// 1111  *****************************************************************************/
// 1112 
// 1113 /*********************************************************************
// 1114  * @fn      zclGenericApp_ProcessIncomingMsg
// 1115  *
// 1116  * @brief   Process ZCL Foundation incoming message
// 1117  *
// 1118  * @param   pInMsg - pointer to the received message
// 1119  *
// 1120  * @return  none
// 1121  */
// 1122 static void zclGenericApp_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
// 1123 {
// 1124   switch ( pInMsg->zclHdr.commandID )
// 1125   {
// 1126 #ifdef ZCL_READ
// 1127     case ZCL_CMD_READ_RSP:
// 1128       zclGenericApp_ProcessInReadRspCmd( pInMsg );
// 1129       break;
// 1130 #endif
// 1131 #ifdef ZCL_WRITE
// 1132     case ZCL_CMD_WRITE_RSP:
// 1133       zclGenericApp_ProcessInWriteRspCmd( pInMsg );
// 1134       break;
// 1135 #endif
// 1136     case ZCL_CMD_CONFIG_REPORT:
// 1137     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1138     case ZCL_CMD_READ_REPORT_CFG:
// 1139     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1140     case ZCL_CMD_REPORT:
// 1141       //bdb_ProcessIncomingReportingMsg( pInMsg );
// 1142       break;
// 1143       
// 1144     case ZCL_CMD_DEFAULT_RSP:
// 1145       zclGenericApp_ProcessInDefaultRspCmd( pInMsg );
// 1146       break;
// 1147 #ifdef ZCL_DISCOVER
// 1148     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1149       zclGenericApp_ProcessInDiscCmdsRspCmd( pInMsg );
// 1150       break;
// 1151 
// 1152     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1153       zclGenericApp_ProcessInDiscCmdsRspCmd( pInMsg );
// 1154       break;
// 1155 
// 1156     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1157       zclGenericApp_ProcessInDiscAttrsRspCmd( pInMsg );
// 1158       break;
// 1159 
// 1160     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1161       zclGenericApp_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1162       break;
// 1163 #endif
// 1164     default:
// 1165       break;
// 1166   }
// 1167 
// 1168   if ( pInMsg->attrCmd )
// 1169     osal_mem_free( pInMsg->attrCmd );
// 1170 }
// 1171 
// 1172 #ifdef ZCL_READ
// 1173 /*********************************************************************
// 1174  * @fn      zclGenericApp_ProcessInReadRspCmd
// 1175  *
// 1176  * @brief   Process the "Profile" Read Response Command
// 1177  *
// 1178  * @param   pInMsg - incoming message to process
// 1179  *
// 1180  * @return  none
// 1181  */
// 1182 static uint8 zclGenericApp_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1183 {
// 1184   zclReadRspCmd_t *readRspCmd;
// 1185   uint8 i;
// 1186 
// 1187   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1188   for (i = 0; i < readRspCmd->numAttr; i++)
// 1189   {
// 1190     // Notify the originator of the results of the original read attributes
// 1191     // attempt and, for each successfull request, the value of the requested
// 1192     // attribute
// 1193   }
// 1194 
// 1195   return ( TRUE );
// 1196 }
// 1197 #endif // ZCL_READ
// 1198 
// 1199 #ifdef ZCL_WRITE
// 1200 /*********************************************************************
// 1201  * @fn      zclGenericApp_ProcessInWriteRspCmd
// 1202  *
// 1203  * @brief   Process the "Profile" Write Response Command
// 1204  *
// 1205  * @param   pInMsg - incoming message to process
// 1206  *
// 1207  * @return  none
// 1208  */
// 1209 static uint8 zclGenericApp_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1210 {
// 1211   zclWriteRspCmd_t *writeRspCmd;
// 1212   uint8 i;
// 1213 
// 1214   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1215   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1216   {
// 1217     // Notify the device of the results of the its original write attributes
// 1218     // command.
// 1219   }
// 1220 
// 1221   return ( TRUE );
// 1222 }
// 1223 #endif // ZCL_WRITE
// 1224 
// 1225 /*********************************************************************
// 1226  * @fn      zclGenericApp_ProcessInDefaultRspCmd
// 1227  *
// 1228  * @brief   Process the "Profile" Default Response Command
// 1229  *
// 1230  * @param   pInMsg - incoming message to process
// 1231  *
// 1232  * @return  none
// 1233  */
// 1234 static uint8 zclGenericApp_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1235 {
// 1236   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1237 
// 1238   // Device is notified of the Default Response command.
// 1239   (void)pInMsg;
// 1240 
// 1241   return ( TRUE );
// 1242 }
// 1243 
// 1244 #ifdef ZCL_DISCOVER
// 1245 /*********************************************************************
// 1246  * @fn      zclGenericApp_ProcessInDiscCmdsRspCmd
// 1247  *
// 1248  * @brief   Process the Discover Commands Response Command
// 1249  *
// 1250  * @param   pInMsg - incoming message to process
// 1251  *
// 1252  * @return  none
// 1253  */
// 1254 static uint8 zclGenericApp_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1255 {
// 1256   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1257   uint8 i;
// 1258 
// 1259   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1260   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1261   {
// 1262     // Device is notified of the result of its attribute discovery command.
// 1263   }
// 1264 
// 1265   return ( TRUE );
// 1266 }
// 1267 
// 1268 /*********************************************************************
// 1269  * @fn      zclGenericApp_ProcessInDiscAttrsRspCmd
// 1270  *
// 1271  * @brief   Process the "Profile" Discover Attributes Response Command
// 1272  *
// 1273  * @param   pInMsg - incoming message to process
// 1274  *
// 1275  * @return  none
// 1276  */
// 1277 static uint8 zclGenericApp_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1278 {
// 1279   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1280   uint8 i;
// 1281 
// 1282   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1283   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1284   {
// 1285     // Device is notified of the result of its attribute discovery command.
// 1286   }
// 1287 
// 1288   return ( TRUE );
// 1289 }
// 1290 
// 1291 /*********************************************************************
// 1292  * @fn      zclGenericApp_ProcessInDiscAttrsExtRspCmd
// 1293  *
// 1294  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1295  *
// 1296  * @param   pInMsg - incoming message to process
// 1297  *
// 1298  * @return  none
// 1299  */
// 1300 static uint8 zclGenericApp_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1301 {
// 1302   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1303   uint8 i;
// 1304 
// 1305   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1306   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1307   {
// 1308     // Device is notified of the result of its attribute discovery command.
// 1309   }
// 1310 
// 1311   return ( TRUE );
// 1312 }
// 1313 #endif // ZCL_DISCOVER
// 1314 
// 1315 /****************************************************************************
// 1316 ****************************************************************************/
// 1317 
// 1318 
// 
// 1 885 bytes in segment BANKED_CODE
//    84 bytes in segment BANK_RELAYS
//    42 bytes in segment XDATA_I
//    42 bytes in segment XDATA_ID
//   238 bytes in segment XDATA_ROM_C
//   185 bytes in segment XDATA_Z
// 
//   126 bytes of CODE     memory
//   234 bytes of CONST    memory (+ 4 bytes shared)
// 1 885 bytes of HUGECODE memory
//   227 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
