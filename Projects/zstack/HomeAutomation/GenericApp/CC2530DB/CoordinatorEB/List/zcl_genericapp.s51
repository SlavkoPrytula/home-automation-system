///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              18/Apr/2021  17:01:57
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\zcl_genericapp.c
//    Command line       =  
//        -f C:\users\slavko\Temp\EW47b8.tmp ("C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\zcl_genericapp.c"
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1
//        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS
//        -lC "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List\zcl_genericapp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_genericapp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??str_reverse::?relay`
        FUNCTION `??str_reverse::?relay`,0203H
        FUNCTION `??zclGenericApp_BasicResetCB::?relay`,0203H
        FUNCTION `??zclGenericApp_BindNotification::?relay`,0203H
        FUNCTION `??zclGenericApp_HandleKeys::?relay`,0203H
        PUBLIC `??zclGenericApp_Init::?relay`
        FUNCTION `??zclGenericApp_Init::?relay`,0203H
        FUNCTION `??zclGenericApp_LcdDisplayUpdate::?relay`,0203H
        PUBLIC `??zclGenericApp_MessageMSGCB::?relay`
        FUNCTION `??zclGenericApp_MessageMSGCB::?relay`,0203H
        FUNCTION `??zclGenericApp_ProcessCommissioningStatus::?re`,0203H
        FUNCTION `??zclGenericApp_ProcessIdentifyTimeChange::?rel`,0203H
        PUBLIC `??zclGenericApp_ProcessZDOMsgs::?relay`
        FUNCTION `??zclGenericApp_ProcessZDOMsgs::?relay`,0203H
        PUBLIC `??zclGenericApp_SendTheMessage::?relay`
        FUNCTION `??zclGenericApp_SendTheMessage::?relay`,0203H
        PUBLIC `??zclGenericApp_SerialMSGCB::?relay`
        FUNCTION `??zclGenericApp_SerialMSGCB::?relay`,0203H
        PUBLIC `??zclGenericApp_event_loop::?relay`
        FUNCTION `??zclGenericApp_event_loop::?relay`,0203H
        PUBLIC EndDeviceInfos
        PUBLIC GenericApp_ClusterList
        PUBLIC GenericApp_SimpleDesc
        PUBWEAK __Constant_1f4
        PUBLIC device_count
        PUBLIC gPermitDuration
        PUBLIC giGenAppScreenMode
        PUBLIC sClearLine
        PUBLIC sDeviceName
        PUBLIC sSwBDBMode
        PUBLIC sSwGenericApp
        PUBLIC sSwHelp
        PUBLIC str_reverse
        FUNCTION str_reverse,0203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        FUNCTION zclGenericApp_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclGenericApp_BindNotification,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclGenericApp_DstAddr
        FUNCTION zclGenericApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC zclGenericApp_Init
        FUNCTION zclGenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        FUNCTION zclGenericApp_LcdDisplayUpdate,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclGenericApp_MessageMSGCB
        FUNCTION zclGenericApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC zclGenericApp_NwkState
        FUNCTION zclGenericApp_ProcessCommissioningStatus,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclGenericApp_ProcessIdentifyTimeChange,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclGenericApp_ProcessZDOMsgs
        FUNCTION zclGenericApp_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclGenericApp_SendTheMessage
        FUNCTION zclGenericApp_SendTheMessage,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC zclGenericApp_SerialMSGCB
        FUNCTION zclGenericApp_SerialMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 7, STACK
        PUBLIC zclGenericApp_TaskID
        PUBLIC zclGenericApp_TransID
        PUBLIC zclGenericApp_epDesc
        PUBLIC zclGenericApp_event_loop
        FUNCTION zclGenericApp_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
APSME_LookupExtAddr SYMBOL "APSME_LookupExtAddr"
`??APSME_LookupExtAddr::?relay` SYMBOL "?relay", APSME_LookupExtAddr
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTPoll         SYMBOL "HalUARTPoll"
`??HalUARTPoll::?relay` SYMBOL "?relay", HalUARTPoll
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
MT_UartInit         SYMBOL "MT_UartInit"
`??MT_UartInit::?relay` SYMBOL "?relay", MT_UartInit
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
`??MT_UartRegisterTaskID::?relay` SYMBOL "?relay", MT_UartRegisterTaskID
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
bdb_RegisterBindNotificationCB SYMBOL "bdb_RegisterBindNotificationCB"
`??bdb_RegisterBindNotificationCB::?relay` SYMBOL "?relay", bdb_RegisterBindNotificationCB
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterIdentifyTimeChangeCB SYMBOL "bdb_RegisterIdentifyTimeChangeCB"
`??bdb_RegisterIdentifyTimeChangeCB::?relay` SYMBOL "?relay", bdb_RegisterIdentifyTimeChangeCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
osal_buffer_uint16  SYMBOL "osal_buffer_uint16"
`??osal_buffer_uint16::?relay` SYMBOL "?relay", osal_buffer_uint16
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
osal_strlen         SYMBOL "osal_strlen"
`??osal_strlen::?relay` SYMBOL "?relay", osal_strlen
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclGenericApp_ResetAttributesToDefaultValues SYMBOL "zclGenericApp_ResetAttributesToDefaultValues"
`??zclGenericApp_ResetAttributesToDefaultValues:` SYMBOL "?relay", zclGenericApp_ResetAttributesToDefaultValues
zclHA_LcdStatusLine1 SYMBOL "zclHA_LcdStatusLine1"
`??zclHA_LcdStatusLine1::?relay` SYMBOL "?relay", zclHA_LcdStatusLine1
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
str_reverse         SYMBOL "str_reverse"
`??str_reverse::?relay` SYMBOL "?relay", str_reverse
zclGenericApp_Init  SYMBOL "zclGenericApp_Init"
`??zclGenericApp_Init::?relay` SYMBOL "?relay", zclGenericApp_Init
zclGenericApp_MessageMSGCB SYMBOL "zclGenericApp_MessageMSGCB"
`??zclGenericApp_MessageMSGCB::?relay` SYMBOL "?relay", zclGenericApp_MessageMSGCB
zclGenericApp_ProcessZDOMsgs SYMBOL "zclGenericApp_ProcessZDOMsgs"
`??zclGenericApp_ProcessZDOMsgs::?relay` SYMBOL "?relay", zclGenericApp_ProcessZDOMsgs
zclGenericApp_SendTheMessage SYMBOL "zclGenericApp_SendTheMessage"
`??zclGenericApp_SendTheMessage::?relay` SYMBOL "?relay", zclGenericApp_SendTheMessage
zclGenericApp_SerialMSGCB SYMBOL "zclGenericApp_SerialMSGCB"
`??zclGenericApp_SerialMSGCB::?relay` SYMBOL "?relay", zclGenericApp_SerialMSGCB
zclGenericApp_event_loop SYMBOL "zclGenericApp_event_loop"
`??zclGenericApp_event_loop::?relay` SYMBOL "?relay", zclGenericApp_event_loop

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??APSME_LookupExtAddr::?relay`
        FUNCTION `??APSME_LookupExtAddr::?relay`,00H
        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,00H
        EXTERN `??HalUARTPoll::?relay`
        FUNCTION `??HalUARTPoll::?relay`,00H
        EXTERN `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??MT_UartInit::?relay`
        FUNCTION `??MT_UartInit::?relay`,00H
        EXTERN `??MT_UartRegisterTaskID::?relay`
        FUNCTION `??MT_UartRegisterTaskID::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??bdb_RegisterBindNotificationCB::?relay`
        FUNCTION `??bdb_RegisterBindNotificationCB::?relay`,00H
        EXTERN `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,00H
        EXTERN `??bdb_RegisterIdentifyTimeChangeCB::?relay`
        FUNCTION `??bdb_RegisterIdentifyTimeChangeCB::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,00H
        EXTERN `??osal_buffer_uint16::?relay`
        FUNCTION `??osal_buffer_uint16::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??osal_strlen::?relay`
        FUNCTION `??osal_strlen::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclGenericApp_ResetAttributesToDefaultValues:`
        FUNCTION `??zclGenericApp_ResetAttributesToDefaultValues:`,00H
        EXTERN `??zclHA_LcdStatusLine1::?relay`
        FUNCTION `??zclHA_LcdStatusLine1::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupExtAddr
        FUNCTION APSME_LookupExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTPoll
        FUNCTION HalUARTPoll,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 7, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterBindNotificationCB
        FUNCTION bdb_RegisterBindNotificationCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterIdentifyTimeChangeCB
        FUNCTION bdb_RegisterIdentifyTimeChangeCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint16
        FUNCTION osal_buffer_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGenericApp_Attrs
        EXTERN zclGenericApp_IdentifyTime
        EXTERN zclGenericApp_NumAttributes
        EXTERN zclGenericApp_ResetAttributesToDefaultValues
        FUNCTION zclGenericApp_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGenericApp_SimpleDesc
        EXTERN zclHA_LcdStatusLine1
        FUNCTION zclHA_LcdStatusLine1,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zdpExternalStateTaskID

// C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\zcl_genericapp.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_genericapp.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application is a template to get started writing an application
//   43   from scratch.
//   44 
//   45   Look for the sections marked with "GENERICAPP_TODO" to add application
//   46   specific code.
//   47 
//   48   Note: if you would like your application to support automatic attribute
//   49   reporting, include the BDB_REPORTING compile flag.
//   50 *********************************************************************/
//   51 
//   52 /*********************************************************************
//   53  * INCLUDES
//   54  */
//   55 #include "ZComDef.h"
//   56 #include "ZDProfile.h" 	// NEW
//   57 #include "OSAL.h"
//   58 #include "AF.h"
//   59 #include "ZDApp.h"
//   60 #include "ZDObject.h"
//   61 #include "MT_APP.h"
//   62 #include "MT_SYS.h"
//   63 	 
//   64 	 
//   65 #include "DebugTrace.h" 	// NEW
//   66 #include "MT_UART.h" 		// NEW	 
//   67 
//   68 #include "nwk_util.h"
//   69 
//   70 #include "zcl.h"
//   71 #include "zcl_general.h"
//   72 #include "zcl_ha.h"
//   73 #include "zcl_diagnostic.h"
//   74 #include "zcl_genericapp.h"
//   75 #include "zcl_hvac.h"
//   76 #include "zcl_ms.h"
//   77 
//   78 #include "bdb.h"
//   79 #include "bdb_interface.h"
//   80 #include "gp_interface.h"
//   81 
//   82 #if defined ( INTER_PAN )
//   83 #if defined ( BDB_TL_INITIATOR )
//   84   #include "bdb_touchlink_initiator.h"
//   85 #endif // BDB_TL_INITIATOR
//   86 #if defined ( BDB_TL_TARGET )
//   87   #include "bdb_touchlink_target.h"
//   88 #endif // BDB_TL_TARGET
//   89 #endif // INTER_PAN
//   90 
//   91 #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
//   92   #include "bdb_touchlink.h"
//   93 #endif
//   94 
//   95 #include "onboard.h"
//   96 
//   97 /* HAL */
//   98 #include "hal_lcd.h"
//   99 #include "hal_led.h"
//  100 #include "hal_key.h"
//  101 #include "hal_uart.h"
//  102 
//  103 /*********************************************************************
//  104  * MACROS
//  105  */
//  106 #define REMOTE_TEMP    1
//  107 
//  108 /*********************************************************************
//  109  * CONSTANTS
//  110  */
//  111 
//  112 
//  113 /*********************************************************************
//  114  * TYPEDEFS
//  115  */
//  116 
//  117 // NEW
//  118 typedef struct
//  119  {
//  120    unsigned char endPoint;
//  121    unsigned char extAddr[8];
//  122    unsigned char compressed_addr;
//  123  } EndDeviceInfo_t; 						//saved the end device information
//  124 // ENDNEW
//  125 
//  126 /*********************************************************************
//  127  * GLOBAL VARIABLES
//  128  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  129 byte zclGenericApp_TaskID;
zclGenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  130 
//  131 extern int16 zdpExternalStateTaskID;
//  132 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 unsigned char device_count = 0;
device_count:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  134  
//  135  // NEW
//  136 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  137 const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
GenericApp_ClusterList:
        DW 1
//  138 {
//  139   GENERICAPP_CLUSTERID
//  140 };
//  141 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  142 const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
GenericApp_SimpleDesc:
        DB 0
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW GenericApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW GenericApp_ClusterList
//  143 {
//  144   GENERICAPP_ENDPOINT,              //  int Endpoint;
//  145   GENERICAPP_PROFID,                //  uint16 AppProfId[2];
//  146   GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  147   GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  148   GENERICAPP_FLAGS,                 //  int   AppFlags:4;
//  149   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  150   (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
//  151   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  152   (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
//  153 };
//  154 
//  155 // This is the Endpoint/Interface description.  It is defined here, but
//  156 // filled-in in GenericApp_Init().  Another way to go would be to fill
//  157 // in the structure here and make it a "const" (in code space).  The
//  158 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  159 endPointDesc_t zclGenericApp_epDesc;
zclGenericApp_epDesc:
        DS 7
        REQUIRE __INIT_XDATA_Z
//  160 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  161 EndDeviceInfo_t EndDeviceInfos[16]; //init space for 16 devices
EndDeviceInfos:
        DS 160
        REQUIRE __INIT_XDATA_Z
//  162 // ENDNEW
//  163 
//  164 
//  165 /*********************************************************************
//  166  * GLOBAL FUNCTIONS
//  167  */
//  168 
//  169 //void osal_buffer_uint16(&theMessageData[3], data); 			// NEW
//  170 // void osal_buffer_uint16(unsigned char &theMessageData, unsigned int data);	// NEW
//  171  
//  172 /*********************************************************************
//  173  * LOCAL VARIABLES
//  174  */
//  175 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  176 uint8 giGenAppScreenMode = GENERIC_MAINMODE;   // display the main screen mode first
giGenAppScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  177 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  179 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  180 devStates_t zclGenericApp_NwkState = DEV_INIT;
zclGenericApp_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclGenericApp_NwkState>`
        REQUIRE __INIT_XDATA_I
//  181 
//  182 // NEW

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  183 byte zclGenericApp_TransID;  // This is the unique message ID (counter)
zclGenericApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  184 afAddrType_t zclGenericApp_DstAddr;
zclGenericApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  185 // ENDNEW
//  186 
//  187 
//  188 #ifdef BDB_REPORTING
//  189 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8
//  190   uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0x2C01 is 300 in int16
//  191 #endif
//  192 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4
//  193   uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00}; // 0x2C01 is 300 in int16
//  194 #endif 
//  195 #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2
//  196   uint8 reportableChange[] = {0x2C, 0x01}; // 0x2C01 is 300 in int16
//  197 #endif 
//  198 #endif
//  199 
//  200 /*********************************************************************
//  201  * LOCAL FUNCTIONS
//  202  */
//  203 static void zclGenericApp_HandleKeys( byte shift, byte keys );
//  204 static void zclGenericApp_BasicResetCB( void );
//  205 
//  206 #ifdef MT_APP_FUNC
//  207 static void zclGenericApp_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg );
//  208 static void zclGenericApp_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID, zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd );
//  209 #endif
//  210 
//  211 static void zclGenericApp_ProcessIdentifyTimeChange( uint8 endpoint );
//  212 static void zclGenericApp_BindNotification( bdbBindNotificationData_t *data );
//  213 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//  214 static void zclGenericApp_ProcessTouchlinkTargetEnable( uint8 enable );
//  215 #endif
//  216 
//  217 // NEW
//  218 void zclGenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  219 void zclGenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  220 void zclGenericApp_SendTheMessage( unsigned char dest_endID, unsigned char cmd, unsigned int temp_set);
//  221 void zclGenericApp_SerialMSGCB(void);
//  222 void str_reverse(char *str, int length);
//  223 // ENDNEW
//  224 
//  225 static void zclGenericApp_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
//  226 
//  227 // app display functions
//  228 static void zclGenericApp_LcdDisplayUpdate( void );
//  229 #ifdef LCD_SUPPORTED
//  230 static void zclGenericApp_LcdDisplayMainMode( void );
//  231 static void zclGenericApp_LcdDisplayHelpMode( void );
//  232 #endif
//  233 
//  234 // Functions to process ZCL Foundation incoming Command/Response messages
//  235 static void zclGenericApp_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  236 #ifdef ZCL_READ
//  237 static uint8 zclGenericApp_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  238 #endif
//  239 #ifdef ZCL_WRITE
//  240 static uint8 zclGenericApp_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  241 #endif
//  242 
//  243 #ifdef ZCL_REPORT_DESTINATION_DEVICE
//  244 static void zclSampleThermostat_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
//  245 #endif  // ZCL_REPORT_DESTINATION_DEVICE
//  246 
//  247 static uint8 zclGenericApp_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  248 #ifdef ZCL_DISCOVER
//  249 static uint8 zclGenericApp_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  250 static uint8 zclGenericApp_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  251 static uint8 zclGenericApp_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  252 #endif
//  253 
//  254 //static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
//  255 
//  256 /*********************************************************************
//  257  * STATUS STRINGS
//  258  */
//  259 #ifdef LCD_SUPPORTED

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  260 const char sDeviceName[]   = "  Generic App";
sDeviceName:
        DB "  Generic App"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  261 const char sClearLine[]    = " ";
sClearLine:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  262 const char sSwGenericApp[]      = "SW1:GENAPP_TODO";  // GENERICAPP_TODO
sSwGenericApp:
        DB "SW1:GENAPP_TODO"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  263 const char sSwBDBMode[]     = "SW2: Start BDB";
sSwBDBMode:
        DB "SW2: Start BDB"

        RSEG XDATA_I:XDATA:NOROOT(0)
//  264 char sSwHelp[]             = "SW4: Help       ";  // last character is * if NWK open
sSwHelp:
        DATA8
        DS 17
        REQUIRE `?<Initializer for sSwHelp>`
        REQUIRE __INIT_XDATA_I
//  265 #endif
//  266 
//  267 /*********************************************************************
//  268  * ZCL General Profile Callback table
//  269  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  270 static zclGeneral_AppCallbacks_t zclGenericApp_CmdCallbacks =
zclGenericApp_CmdCallbacks:
        DATA8
        DS 24
        REQUIRE `?<Initializer for zclGenericApp_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  271 {
//  272   zclGenericApp_BasicResetCB,             // Basic Cluster Reset command
//  273   NULL,                                   // Identify Trigger Effect command
//  274   NULL,                                   // On/Off cluster commands
//  275   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  276   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  277   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  278 #ifdef ZCL_LEVEL_CTRL
//  279   NULL,                                   // Level Control Move to Level command
//  280   NULL,                                   // Level Control Move command
//  281   NULL,                                   // Level Control Step command
//  282   NULL,                                   // Level Control Stop command
//  283 #endif
//  284 #ifdef ZCL_GROUPS
//  285   NULL,                                   // Group Response commands
//  286 #endif
//  287 #ifdef ZCL_SCENES
//  288   NULL,                                  // Scene Store Request command
//  289   NULL,                                  // Scene Recall Request command
//  290   NULL,                                  // Scene Response command
//  291 #endif
//  292 #ifdef ZCL_ALARMS
//  293   NULL,                                  // Alarm (Response) commands
//  294 #endif
//  295 #ifdef SE_UK_EXT
//  296   NULL,                                  // Get Event Log command
//  297   NULL,                                  // Publish Event Log command
//  298 #endif
//  299   NULL,                                  // RSSI Location command
//  300   NULL                                   // RSSI Location Response command
//  301 };
//  302 
//  303 /*********************************************************************
//  304  * GENERICAPP_TODO: Add other callback structures for any additional application specific 
//  305  *       Clusters being used, see available callback structures below.
//  306  *
//  307  *       bdbTL_AppCallbacks_t 
//  308  *       zclApplianceControl_AppCallbacks_t 
//  309  *       zclApplianceEventsAlerts_AppCallbacks_t 
//  310  *       zclApplianceStatistics_AppCallbacks_t 
//  311  *       zclElectricalMeasurement_AppCallbacks_t 
//  312  *       zclGeneral_AppCallbacks_t 
//  313  *       zclGp_AppCallbacks_t 
//  314  *       zclHVAC_AppCallbacks_t 
//  315  *       zclLighting_AppCallbacks_t 
//  316  *       zclMS_AppCallbacks_t 
//  317  *       zclPollControl_AppCallbacks_t 
//  318  *       zclPowerProfile_AppCallbacks_t 
//  319  *       zclSS_AppCallbacks_t  
//  320  *
//  321  */
//  322 
//  323 /*********************************************************************
//  324  * @fn          zclGenericApp_Init
//  325  *
//  326  * @brief       Initialization function for the zclGeneral layer.
//  327  *
//  328  * @param       none
//  329  *
//  330  * @return      none
//  331  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  332 void zclGenericApp_Init( byte task_id )
zclGenericApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclGenericApp_Init
        CODE
//  333 {
        FUNCALL zclGenericApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, HalUARTPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, bdb_RegisterCommissioningStatusCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, bdb_RegisterIdentifyTimeChangeCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, bdb_RegisterBindNotificationCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV       A,#-0x1d
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,R1
//  334 	
//  335   halUARTCfg_t uartConfig;				// NEW
//  336   zclGenericApp_TaskID = task_id;
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      @DPTR,A
//  337   zclGenericApp_NwkState = DEV_INIT;	// NEW
        MOV       DPTR,#zclGenericApp_NwkState
        MOV       A,#0x1
        MOVX      @DPTR,A
//  338   zclGenericApp_TransID = 0;				// NEW
        MOV       DPTR,#zclGenericApp_TransID
        CLR       A
        MOVX      @DPTR,A
//  339   
//  340   //NEW
//  341   
//  342   // Device hardware initialization can be added here or in main() (Zmain.c).
//  343   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        INC       A
        MOVX      @DPTR,A
//  344   uartConfig.baudRate             = HAL_UART_BR_115200;
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
//  345   uartConfig.flowControl          = FALSE;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  346   uartConfig.intEnable              = TRUE;              // 2x30 don't care - see uart driver.
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  347   // uartConfig.callBackFunc         = MT_UartProcessZAppData;
//  348   
//  349   MT_UartInit();
        ; Setup parameters for call to function MT_UartInit
        LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
//  350   MT_UartRegisterTaskID(0);
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV       R1,#0x0
        LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
//  351   HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
//  352 
//  353   // If the hardware is application specific - add it here.
//  354   // If the hardware is other parts of the device add it in main().
//  355   
//  356   // Fill out the endpoint description.
//  357   zclGenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
        MOV       DPTR,#zclGenericApp_epDesc
        CLR       A
        MOVX      @DPTR,A
//  358   zclGenericApp_epDesc.task_id = &zclGenericApp_TaskID;
        MOV       DPTR,#zclGenericApp_epDesc + 2
        MOV       A,#zclGenericApp_TaskID & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(zclGenericApp_TaskID >> 8) & 0xff
        MOVX      @DPTR,A
//  359   zclGenericApp_epDesc.simpleDesc
//  360             = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
        INC       DPTR
        MOV       A,#GenericApp_SimpleDesc & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(GenericApp_SimpleDesc >> 8) & 0xff
        MOVX      @DPTR,A
//  361   zclGenericApp_epDesc.latencyReq = noLatencyReqs;
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  362 
//  363   // Register the endpoint description with the AF
//  364   afRegister( &zclGenericApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV       R2,#zclGenericApp_epDesc & 0xff
        MOV       R3,#(zclGenericApp_epDesc >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  365 
//  366   // Register for all key events - This app will handle all key events
//  367   RegisterForKeys( zclGenericApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  368   
//  369   HalUARTWrite(HAL_UART_PORT_0,"Initializing...", sizeof("Initializing..."));
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "Initializing...">` & 0xff
        MOV       R3,#(`?<Constant "Initializing...">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  370   HalUARTPoll();
        ; Setup parameters for call to function HalUARTPoll
        LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
//  371   
//  372   // ENDNEW
//  373   
//  374   
//  375   // This app is part of the Home Automation Profile || Register the Simple Descriptor for this application
//  376   bdb_RegisterSimpleDescriptor( &zclGenericApp_SimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclGenericApp_SimpleDesc & 0xff
        MOV       R3,#(zclGenericApp_SimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  377 
//  378   // Register the ZCL General Cluster Library callback functions
//  379   zclGeneral_RegisterCmdCallbacks( GENERICAPP_ENDPOINT, &zclGenericApp_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclGenericApp_CmdCallbacks & 0xff
        MOV       R3,#(zclGenericApp_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  380   
//  381   // GENERICAPP_TODO: Register other cluster command callbacks here
//  382 
//  383   // Register the application's attribute list
//  384   zcl_registerAttrList( GENERICAPP_ENDPOINT, zclGenericApp_NumAttributes, zclGenericApp_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclGenericApp_Attrs & 0xff
        MOV       R5,#(zclGenericApp_Attrs >> 8) & 0xff
        MOV       DPTR,#zclGenericApp_NumAttributes
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x0
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  385 
//  386   // Register the Application to receive the unprocessed Foundation command/response messages
//  387   zcl_registerForMsg( zclGenericApp_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  388 
//  389 #ifdef ZCL_DISCOVER
//  390   // Register the application's command list
//  391   zcl_registerCmdList( GENERICAPP_ENDPOINT, zclCmdsArraySize, zclGenericApp_Cmds );
//  392 #endif
//  393 
//  394   // Register low voltage NV memory protection application callback
//  395 //  RegisterVoltageWarningCB( zclGenericApp_BatteryWarningCB );
//  396 
//  397   // Register for all key events - This app will handle all key events
//  398   RegisterForKeys( zclGenericApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  399 
//  400     
//  401   bdb_RegisterCommissioningStatusCB( zclGenericApp_ProcessCommissioningStatus );
        ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
        MOV       R2,#`??zclGenericApp_ProcessCommissioningStatus::?re` & 0xff
        MOV       R3,#(`??zclGenericApp_ProcessCommissioningStatus::?re` >> 8) & 0xff
        LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
//  402   bdb_RegisterIdentifyTimeChangeCB( zclGenericApp_ProcessIdentifyTimeChange );
        ; Setup parameters for call to function bdb_RegisterIdentifyTimeChangeCB
        MOV       R2,#`??zclGenericApp_ProcessIdentifyTimeChange::?rel` & 0xff
        MOV       R3,#(`??zclGenericApp_ProcessIdentifyTimeChange::?rel` >> 8) & 0xff
        LCALL     `??bdb_RegisterIdentifyTimeChangeCB::?relay`; Banked call to: bdb_RegisterIdentifyTimeChangeCB
//  403   bdb_RegisterBindNotificationCB( zclGenericApp_BindNotification );
        ; Setup parameters for call to function bdb_RegisterBindNotificationCB
        MOV       R2,#`??zclGenericApp_BindNotification::?relay` & 0xff
        MOV       R3,#(`??zclGenericApp_BindNotification::?relay` >> 8) & 0xff
        LCALL     `??bdb_RegisterBindNotificationCB::?relay`; Banked call to: bdb_RegisterBindNotificationCB
//  404 
//  405 #ifdef BDB_REPORTING
//  406   //Adds the default configuration values for the reportable attributes of the ZCL_CLUSTER_ID_HVAC_THERMOSTAT cluster, for endpoint SAMPLETHERMOSTAT_ENDPOINT
//  407   //Default maxReportingInterval value is 10 seconds
//  408   //Default minReportingInterval value is 3 seconds
//  409   //Default reportChange value is 300 (3 degrees)
//  410   bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETHERMOSTAT_ENDPOINT, ZCL_CLUSTER_ID_HVAC_THERMOSTAT, ATTRID_HVAC_THERMOSTAT_LOCAL_TEMPERATURE, 0, 10, reportableChange);
//  411   bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETHERMOSTAT_ENDPOINT, ZCL_CLUSTER_ID_HVAC_THERMOSTAT, ATTRID_HVAC_THERMOSTAT_PI_COOLING_DEMAND, 0, 10, reportableChange);
//  412   bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETHERMOSTAT_ENDPOINT, ZCL_CLUSTER_ID_HVAC_THERMOSTAT, ATTRID_HVAC_THERMOSTAT_PI_HEATING_DEMAND, 0, 10, reportableChange);
//  413 #endif  
//  414   
//  415   zdpExternalStateTaskID = zclGenericApp_TaskID;
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       DPTR,#zdpExternalStateTaskID
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  416 
//  417 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//  418   bdb_RegisterTouchlinkTargetEnableCB( zclGenericApp_ProcessTouchlinkTargetEnable );
//  419 #endif
//  420 
//  421 #ifdef ZCL_DIAGNOSTIC
//  422   // Register the application's callback function to read/write attribute data.
//  423   // This is only required when the attribute data format is unknown to ZCL.
//  424   zcl_registerReadWriteCB( GENERICAPP_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  425 
//  426   if ( zclDiagnostic_InitStats() == ZSuccess )
//  427   {
//  428     // Here the user could start the timer to save Diagnostics to NV
//  429   }
//  430 #endif
//  431 
//  432 
//  433 #ifdef LCD_SUPPORTED
//  434   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       R2,#sDeviceName & 0xff
        MOV       R3,#(sDeviceName >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  435 #endif  // LCD_SUPPORTED
//  436 
//  437 
//  438 }
        MOV       A,#0x1d
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  439 
//  440 /*********************************************************************
//  441  * @fn          zclSample_event_loop
//  442  *
//  443  * @brief       Event Loop Processor for zclGeneral.
//  444  *
//  445  * @param       none
//  446  *
//  447  * @return      none
//  448  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  449 uint16 zclGenericApp_event_loop( uint8 task_id, uint16 events )
zclGenericApp_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclGenericApp_event_loop
        CODE
//  450 {
        FUNCALL zclGenericApp_event_loop, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, zclGenericApp_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, zclGenericApp_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, zclGenericApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, zclGenericApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, zclGenericApp_SerialMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalUARTPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  451 //  if (HAL_KEY_SW_6) {
//  452 //	  HalUARTWrite(HAL_UART_PORT_0, "ok", sizeof("not ok"));
//  453 //	  HalUARTPoll();
//  454 //	  HalLedSet(HAL_LED_3, HAL_LED_MODE_TOGGLE);
//  455 //  }
//  456   
//  457   HalUARTWrite(HAL_UART_PORT_0, "ok", (byte)osal_strlen("ok"));
        MOV       ?V0,#`?<Constant "ok">` & 0xff
        MOV       ?V1,#(`?<Constant "ok">` >> 8) & 0xff
        ; Setup parameters for call to function osal_strlen
        LCALL     ?Subroutine6 & 0xFFFF
//  458   HalUARTPoll();
//  459 	
//  460   afIncomingMSGPacket_t *MSGpkt;
//  461   afDataConfirm_t *afDataConfirm; // NEW
//  462 
//  463   // NEW
//  464   
//  465   // Data Confirmation message fields
//  466   byte sentEP;
//  467   ZStatus_t sentStatus;
//  468   byte sentTransID;       // This should match the value sent
//  469   
//  470   //ENDNEW
//  471   (void)task_id;  // Intentionally unreferenced parameter
//  472   
//  473   
//  474   bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING);
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0xa
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  475   
//  476 
//  477   if ( events & SYS_EVENT_MSG )
        MOV       A,R7
        ANL       A,#0x80
        JNZ       ??zclGenericApp_event_loop_0
//  478   {
//  479     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclGenericApp_TaskID )) )
//  480     {
//  481       switch ( MSGpkt->hdr.event )
//  482       {
//  483 #ifdef MT_APP_FUNC
//  484         case MT_SYS_APP_MSG:
//  485           // Message received from MT
//  486           zclGenericApp_ProcessAppMsg( ((mtSysAppMsg_t *)MSGpkt)->endpoint,
//  487                                           ((mtSysAppMsg_t *)MSGpkt)->appDataLen,
//  488                                           ((mtSysAppMsg_t *)MSGpkt)->appData );
//  489 #endif
//  490           break;
//  491 	      // NEW
//  492 	case ZDO_CB_MSG:
//  493           zclGenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  494           break;
//  495 	  
//  496 	case AF_DATA_CONFIRM_CMD:
//  497           // This message is received as a confirmation of a data packet sent.
//  498           // The status is of ZStatus_t type [defined in ZComDef.h]
//  499           // The message fields are defined in AF.h
//  500           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  501           sentEP = afDataConfirm->endpoint;
//  502           sentStatus = afDataConfirm->hdr.status;
//  503           sentTransID = afDataConfirm->transID;
//  504           (void)sentEP;
//  505           (void)sentTransID;
//  506 
//  507           // Action taken when confirmation is received.
//  508           if ( sentStatus != ZSuccess )
//  509           {
//  510             // The data wasn't delivered -- Do something
//  511             HalUARTWrite(0, "Data Lost\r\n", 8);
//  512           }
//  513           else {
//  514             HalUARTWrite(0, "Data Sent\r\n", 8);
//  515           }
//  516           break;
//  517 
//  518         case AF_INCOMING_MSG_CMD:
//  519           zclGenericApp_MessageMSGCB( MSGpkt );
//  520           break;
//  521 	  // ENDNEW
//  522 
//  523 	  
//  524         case ZCL_INCOMING_MSG:
//  525           // Incoming ZCL Foundation command/response messages
//  526           zclGenericApp_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  527           break;
//  528 
//  529         case KEY_CHANGE:
//  530           zclGenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  531           break;
//  532 
//  533         case ZDO_STATE_CHANGE:
//  534           zclGenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  535 
//  536           // now on the network
//  537           if ( (zclGenericApp_NwkState == DEV_ZB_COORD) ||
//  538                (zclGenericApp_NwkState == DEV_ROUTER)   ||
//  539                (zclGenericApp_NwkState == DEV_END_DEVICE) )
//  540           {
//  541             giGenAppScreenMode = GENERIC_MAINMODE;
//  542             zclGenericApp_LcdDisplayUpdate();
//  543           }
//  544           break;
//  545 
//  546         default:
//  547           break;
//  548       }
//  549 
//  550       // Release the memory
//  551       osal_msg_deallocate( (uint8 *)MSGpkt );
//  552       
//  553       // Next
//  554       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclGenericApp_TaskID );		// NEW
//  555     }
//  556 
//  557     // return unprocessed events
//  558     return (events ^ SYS_EVENT_MSG);
//  559   }
//  560   
//  561   // NEW
//  562   
//  563 #if ZG_BUILD_ENDDEVICE_TYPE    
//  564   if ( events & GENERICAPP_END_DEVICE_REJOIN_EVT )
//  565   {
//  566     bdb_ZedAttemptRecoverNwk();
//  567     return ( events ^ GENERICAPP_END_DEVICE_REJOIN_EVT );
//  568   }
//  569 #endif
//  570   
//  571   
//  572   // Send a message out - This event is generated by a timer
//  573   //  (setup in GenericApp_Init()).
//  574   if ( events & GENERICAPP_SEND_MSG_EVT )
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??zclGenericApp_event_loop_1 & 0xFFFF
//  575   {
//  576     // Send "the" message
//  577     //GenericApp_SendTheMessage();
//  578     // return unprocessed events
//  579     return (events ^ GENERICAPP_SEND_MSG_EVT);
        XRL       A,#0x1
        LJMP      ??zclGenericApp_event_loop_2 & 0xFFFF
//  580   }
??zclGenericApp_event_loop_3:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#zclGenericApp_NwkState
        MOVX      @DPTR,A
        XRL       A,#0x9
        JZ        ??zclGenericApp_event_loop_4
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??zclGenericApp_event_loop_4
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_4:
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function zclGenericApp_LcdDisplayUpdate
        LCALL     `??zclGenericApp_LcdDisplayUpdate::?relay`; Banked call to: zclGenericApp_LcdDisplayUpdate
??zclGenericApp_event_loop_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
??zclGenericApp_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??zclGenericApp_event_loop_6 & 0xFFFF
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x1a
        JZ        ??zclGenericApp_event_loop_7
        ADD       A,#-0x1a
        JZ        ??zclGenericApp_event_loop_8
        ADD       A,#0x74
        JZ        ??zclGenericApp_event_loop_9
        ADD       A,#-0x11
        JZ        ??zclGenericApp_event_loop_3
        ADD       A,#-0x2
        JZ        ??zclGenericApp_event_loop_10
        ADD       A,#-0x2a
        JZ        ??zclGenericApp_event_loop_11
        SJMP      ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_10:
        ; Setup parameters for call to function zclGenericApp_ProcessZDOMsgs
        LCALL     `??zclGenericApp_ProcessZDOMsgs::?relay`; Banked call to: zclGenericApp_ProcessZDOMsgs
        SJMP      ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_11:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,#0x8
        MOV       R5,#0x0
        JZ        ??zclGenericApp_event_loop_12
        ; Setup parameters for call to function HalUARTWrite
        MOV       R2,#`?<Constant "Data Lost\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "Data Lost\\r\\n">` >> 8) & 0xff
??zclGenericApp_event_loop_13:
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
        SJMP      ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_12:
        ; Setup parameters for call to function HalUARTWrite
        MOV       R2,#`?<Constant "Data Sent\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "Data Sent\\r\\n">` >> 8) & 0xff
        SJMP      ??zclGenericApp_event_loop_13
??zclGenericApp_event_loop_7:
        ; Setup parameters for call to function zclGenericApp_MessageMSGCB
        LCALL     `??zclGenericApp_MessageMSGCB::?relay`; Banked call to: zclGenericApp_MessageMSGCB
        SJMP      ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_8:
        MOV       A,R2
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclGenericApp_event_loop_14
        ADD       A,#-0x3
        JNZ       ??zclGenericApp_event_loop_15
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclGenericApp_event_loop_15
        INC       R0
        SJMP      ??CrossCallReturnLabel_0
??zclGenericApp_event_loop_14:
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP      ??zclGenericApp_event_loop_16
??zclGenericApp_event_loop_17:
        INC       R0
??zclGenericApp_event_loop_16:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JC        ??zclGenericApp_event_loop_17
??zclGenericApp_event_loop_15:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
??zclGenericApp_event_loop_9:
        ; Setup parameters for call to function zclGenericApp_HandleKeys
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?V0
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGenericApp_HandleKeys::?relay`; Banked call to: zclGenericApp_HandleKeys
        LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
??zclGenericApp_event_loop_6:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        SJMP      ??zclGenericApp_event_loop_18
//  581   
//  582 //  if (events & GENERICAPP_UART_RX_EVT) {
//  583 //    HalUARTWrite(0, "RX_EVT", 7);
//  584 //    zclGenericApp_SerialMSGCB();
//  585 //  }
//  586       zclGenericApp_SerialMSGCB();
??zclGenericApp_event_loop_1:
        ; Setup parameters for call to function zclGenericApp_SerialMSGCB
        LCALL     `??zclGenericApp_SerialMSGCB::?relay`; Banked call to: zclGenericApp_SerialMSGCB
//  587   
//  588   // ENDNEW
//  589   
//  590 
//  591 //  if ( events & GENERICAPP_MAIN_SCREEN_EVT )
//  592 //  {
//  593 //    giGenAppScreenMode = GENERIC_MAINMODE;
//  594 //    zclGenericApp_LcdDisplayUpdate();
//  595 //    return ( events ^ GENERICAPP_MAIN_SCREEN_EVT );
//  596 //  }
//  597   
//  598 #if ZG_BUILD_ENDDEVICE_TYPE    
//  599   if ( events & GENERICAPP_END_DEVICE_REJOIN_EVT )
//  600   {
//  601     bdb_ZedAttemptRecoverNwk();
//  602     return ( events ^ GENERICAPP_END_DEVICE_REJOIN_EVT );
//  603   }
//  604 #endif
//  605 
//  606   /* GENERICAPP_TODO: handle app events here */
//  607   
//  608   
//  609   if ( events & GENERICAPP_EVT_1 )
        MOV       A,R6
        ANL       A,#0x8
        JZ        ??zclGenericApp_event_loop_19
//  610   {
//  611     // toggle LED 2 state, start another timer for 500ms
//  612 	HalUARTWrite(HAL_UART_PORT_0, "toggle", (byte)osal_strlen("toggle"));
        MOV       ?V0,#`?<Constant "toggle">` & 0xff
        MOV       ?V1,#(`?<Constant "toggle">` >> 8) & 0xff
        ; Setup parameters for call to function osal_strlen
        LCALL     ?Subroutine6 & 0xFFFF
//  613 	HalUARTPoll();
//  614     HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x8
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  615     osal_start_timerEx( zclGenericApp_TaskID, GENERICAPP_EVT_1, 500 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1f4
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x8
        MOV       R3,#0x0
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  616     
//  617     return ( events ^ GENERICAPP_EVT_1 );
        MOV       A,R6
        XRL       A,#0x8
??zclGenericApp_event_loop_2:
        MOV       R2,A
        MOV       A,R7
??zclGenericApp_event_loop_18:
        MOV       R3,A
        SJMP      ??zclGenericApp_event_loop_20
//  618   }
//  619   
//  620   /*
//  621   if ( events & GENERICAPP_EVT_2 )
//  622   {
//  623     
//  624     return ( events ^ GENERICAPP_EVT_2 );
//  625   }
//  626   
//  627   if ( events & GENERICAPP_EVT_3 )
//  628   {
//  629     
//  630     return ( events ^ GENERICAPP_EVT_3 );
//  631   }
//  632   */
//  633   
//  634   // Discard unknown events
//  635   return 0;
??zclGenericApp_event_loop_19:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclGenericApp_event_loop_20:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  636 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function zclGenericApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zclGenericApp_event_loop
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV       ?V2,R2
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,?V2
        MOV       R5,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
        ; Setup parameters for call to function HalUARTPoll
        ; Setup parameters for call to function HalUARTPoll
        LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function zclGenericApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function zclGenericApp_event_loop
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOV       R0,#0x0
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
//  637 
//  638 
//  639 
//  640 
//  641 
//  642 
//  643 // NEW
//  644 
//  645 /*********************************************************************
//  646  * Event Generation Functions
//  647  */
//  648  
//  649 /*********************************************************************
//  650  * @fn      zclGenericApp_ProcessZDOMsgs()
//  651  * @brief   Process response messages
//  652  * @param   none
//  653  * @return  none
//  654  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  655 void zclGenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
zclGenericApp_ProcessZDOMsgs:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zclGenericApp_ProcessZDOMsgs
        CODE
//  656 {
        FUNCALL zclGenericApp_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  657   switch ( inMsg->clusterID )
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclGenericApp_ProcessZDOMsgs_0
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x80
??zclGenericApp_ProcessZDOMsgs_0:
        JNZ       ??zclGenericApp_ProcessZDOMsgs_1
//  658   {
//  659     case Match_Desc_rsp:
//  660       {
//  661         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL     `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
//  662         if ( pRsp )
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclGenericApp_ProcessZDOMsgs_1
//  663         {
//  664           if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclGenericApp_ProcessZDOMsgs_2
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??zclGenericApp_ProcessZDOMsgs_2
//  665           {
//  666             zclGenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV       DPTR,#zclGenericApp_DstAddr + 8
        MOV       A,#0x2
        LCALL     ?Subroutine4 & 0xFFFF
//  667             zclGenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
//  668             // Take the first endpoint, Can be changed to search through endpoints
//  669             zclGenericApp_DstAddr.endPoint = pRsp->epList[0];
//  670             // Light LED
//  671             //HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  672           }
??CrossCallReturnLabel_2:
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#zclGenericApp_DstAddr
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#zclGenericApp_DstAddr + 9
        MOVX      @DPTR,A
//  673           osal_mem_free( pRsp );
??zclGenericApp_ProcessZDOMsgs_2:
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  674         }
//  675       }
//  676       break;
//  677   }
//  678 }
??zclGenericApp_ProcessZDOMsgs_1:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//  679 
//  680 
//  681 
//  682 
//  683 
//  684 /*********************************************************************
//  685  * LOCAL FUNCTIONS
//  686  */
//  687 
//  688 /*********************************************************************
//  689  * @fn      zclGenericApp_MessageMSGCB
//  690  * @brief   Data message processor callback.  This function processes
//  691  *          any incoming data - probably from other devices.  So, based
//  692  *          on cluster ID, perform the intended action.
//  693  * @param   none
//  694  * @return  none
//  695  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  696 void zclGenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
zclGenericApp_MessageMSGCB:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function zclGenericApp_MessageMSGCB
        CODE
//  697 {
        FUNCALL zclGenericApp_MessageMSGCB, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, str_reverse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  698   unsigned char temp_extAddr[8];
//  699   unsigned char i = 0;
        MOV       ?V0,#0x0
//  700   unsigned char existed = 0;
//  701   unsigned char buffer[8] = "";
        MOV       DPTR,#`?<Constant "">`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x8
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  702   switch ( pkt->clusterId )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclGenericApp_MessageMSGCB_0
        INC       DPTR
        MOVX      A,@DPTR
??zclGenericApp_MessageMSGCB_0:
        JZ        $+5
        LJMP      ??zclGenericApp_MessageMSGCB_1 & 0xFFFF
//  703   {
//  704     case GENERICAPP_CLUSTERID:
//  705       {// "the" message
//  706         (void)APSME_LookupExtAddr(pkt->srcAddr.addr.shortAddr, temp_extAddr);
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP102_8
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
//  707         for (i = 0; i < device_count+1; i++) {  // to see whether the device ever connected
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       ?V6,#0x0
        SJMP      ??zclGenericApp_MessageMSGCB_2
??zclGenericApp_MessageMSGCB_3:
        INC       ?V0
??zclGenericApp_MessageMSGCB_2:
        MOV       R2,?V0
        MOV       DPTR,#device_count
        MOVX      A,@DPTR
        MOV       R1,#0x0
        ADD       A,#0x1
        MOV       R0,A
        JNC       ??zclGenericApp_MessageMSGCB_4
        INC       R1
??zclGenericApp_MessageMSGCB_4:
        CLR       C
        MOV       A,R2
        SUBB      A,R0
        CLR       A
        SUBB      A,R1
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JNC       ??zclGenericApp_MessageMSGCB_5
//  708           if (osal_memcmp(EndDeviceInfos[i].extAddr, temp_extAddr, 8)) { //if existed, break;
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,R2
        MOV       B,#0xa
        MUL       AB
        MOV       R2,A
        MOV       R3,B
        MOV       A,#(EndDeviceInfos + 1) & 0xff
        ADD       A,R2
        MOV       ?V2,A
        MOV       A,#((EndDeviceInfos + 1) >> 8) & 0xff
        ADDC      A,R3
        MOV       R1,?V2
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R1
        JZ        ??zclGenericApp_MessageMSGCB_3
//  709             existed = 1;
//  710             HalUARTWrite(0, "Device Found Form Previous Log -> Existed!\r\n", 36);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x24
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "Device Found Form Pre...">` & 0xff
        MOV       R3,#(`?<Constant "Device Found Form Pre...">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  711             break;
        SJMP      ??zclGenericApp_MessageMSGCB_6
//  712           }
//  713         }
//  714         if ( !existed ) {  //not connected before, register
//  715           HalUARTWrite(0, "New Device!\r\n",15);
??zclGenericApp_MessageMSGCB_5:
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0xf
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "New Device!\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "New Device!\\r\\n">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  716           osal_memcpy(EndDeviceInfos[device_count].extAddr, temp_extAddr, 8);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R4,#0x8
        MOV       R5,#0x0
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV       A,#(EndDeviceInfos + 1) & 0xff
        ADD       A,R0
        MOV       R2,A
        MOV       A,#((EndDeviceInfos + 1) >> 8) & 0xff
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
//  717           EndDeviceInfos[device_count].endPoint = pkt->srcAddr.endPoint;
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV       A,#EndDeviceInfos & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(EndDeviceInfos >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        MOV       A,R2
        MOVX      @DPTR,A
//  718           EndDeviceInfos[device_count].compressed_addr = GENERICAPP_ENDPOINT | EndDeviceInfos[device_count].endPoint;
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  719           device_count++;	// device added
        MOV       DPTR,#device_count
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  720         }
//  721         if (device_count == 16) { device_count = 0;}  //in case to overflow
??zclGenericApp_MessageMSGCB_6:
        MOV       DPTR,#device_count
        MOVX      A,@DPTR
        XRL       A,#0x10
        JNZ       ??zclGenericApp_MessageMSGCB_7
        CLR       A
        MOVX      @DPTR,A
//  722         //TO DO: process data received, send it to slave machine
//  723         osal_memcpy(&buffer[0], pkt->cmd.Data, 8);
??zclGenericApp_MessageMSGCB_7:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R6
        ADD       A,#0x22
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
//  724         str_reverse((char*)&buffer[3], 1);
        ; Setup parameters for call to function str_reverse
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??str_reverse::?relay`; Banked call to: str_reverse
//  725         HalUARTWrite(0, &buffer[0], 8);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  726         break;
//  727       }
//  728   }
//  729 }
??zclGenericApp_MessageMSGCB_1:
        MOV       A,#0x10
          CFI EndBlock cfiBlock10
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 31)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Valid
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function zclGenericApp_MessageMSGCB
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zclGenericApp_MessageMSGCB
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOV       DPTR,#device_count
        MOVX      A,@DPTR
        MOV       B,#0xa
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
//  730 
//  731 
//  732 
//  733 
//  734 
//  735 /*********************************************************************
//  736  * @fn     zclGenericApp_SendTheMessage
//  737  * @brief   Send "the" message.
//  738  * @param   none
//  739  * @return  none
//  740  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  741 void zclGenericApp_SendTheMessage( unsigned char dest_endID, unsigned char cmd, unsigned int data)
zclGenericApp_SendTheMessage:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function zclGenericApp_SendTheMessage
        CODE
//  742 {
        FUNCALL zclGenericApp_SendTheMessage, osal_buffer_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_SendTheMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_SendTheMessage, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_SendTheMessage, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_SendTheMessage, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V1,R2
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
//  743   unsigned char theMessageData[6] = "";
        MOV       DPTR,#`?<Constant "">_1`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x6
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  744   theMessageData[0] = 0xCC;  //beginning check byte
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x34
        MOVX      @DPTR,A
//  745   theMessageData[1] = EndDeviceInfos[dest_endID].compressed_addr;
        MOV       A,R1
        MOV       B,#0xa
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#EndDeviceInfos & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(EndDeviceInfos >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  746   theMessageData[2] = cmd;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V1
        MOVX      @DPTR,A
//  747   osal_buffer_uint16(&theMessageData[3],  data);
        ; Setup parameters for call to function osal_buffer_uint16
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_buffer_uint16::?relay`; Banked call to: osal_buffer_uint16
//  748   theMessageData[5] = 0x33;  //end check byte
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x33
        MOVX      @DPTR,A
//  749   //set the destination below
//  750   zclGenericApp_DstAddr.addrMode = (afAddrMode_t)Addr64Bit;
        MOV       DPTR,#zclGenericApp_DstAddr + 8
        MOV       A,#0x3
        MOVX      @DPTR,A
//  751   zclGenericApp_DstAddr.endPoint = EndDeviceInfos[dest_endID].endPoint;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       DPTR,#zclGenericApp_DstAddr + 9
        MOVX      @DPTR,A
//  752   osal_memcpy(zclGenericApp_DstAddr.addr.extAddr, EndDeviceInfos[dest_endID].extAddr, 8);
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,#zclGenericApp_DstAddr & 0xff
        MOV       R3,#(zclGenericApp_DstAddr >> 8) & 0xff
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  753   
//  754   if ( AF_DataRequest( &zclGenericApp_DstAddr, &zclGenericApp_epDesc,
//  755                        GENERICAPP_CLUSTERID,
//  756                        7,//send one more char or the last char might be missing
//  757                        theMessageData,
//  758                        &zclGenericApp_TransID,
//  759                        AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )                     
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V2,#0x1e
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V2,#zclGenericApp_TransID & 0xff
        MOV       ?V3,#(zclGenericApp_TransID >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V2,#0x7
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R1,#0x0
        MOV       R4,#zclGenericApp_epDesc & 0xff
        MOV       R5,#(zclGenericApp_epDesc >> 8) & 0xff
        MOV       R2,#zclGenericApp_DstAddr & 0xff
        MOV       R3,#(zclGenericApp_DstAddr >> 8) & 0xff
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R1
        JNZ       ??zclGenericApp_SendTheMessage_0
//  760   {
//  761     // Successfully requested to be sent.
//  762     HalUARTWrite(0, "Successfully Sent\r\n", 21);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x15
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "Successfully Sent\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "Successfully Sent\\r\\n">` >> 8) & 0xff
        SJMP      ??zclGenericApp_SendTheMessage_1
//  763   }
//  764   else
//  765   {
//  766     // Error occurred in request to send.
//  767     HalUARTWrite(0, "Couldn't Sent\r\n", 17);
??zclGenericApp_SendTheMessage_0:
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "Couldn\\'t Sent\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "Couldn\\'t Sent\\r\\n">` >> 8) & 0xff
??zclGenericApp_SendTheMessage_1:
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  768   }
//  769   
//  770   HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  771 }
        MOV       A,#0x6
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock15
//  772 
//  773 
//  774 
//  775 
//  776 
//  777 //@fn: zclGenericApp_SerialMSGCB
//  778 //@breif: process data received by UART, used to execute cmds from slave machine
//  779 //@param: none
//  780 //@return: none

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  781 void zclGenericApp_SerialMSGCB(void)
zclGenericApp_SerialMSGCB:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function zclGenericApp_SerialMSGCB
        CODE
//  782 {
        FUNCALL zclGenericApp_SerialMSGCB, HalUARTRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 7, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 7, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 7
        MOV       A,#-0x7
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 7)
//  783   unsigned char dest_endID = 0; //this number is the index of EndDeviceInfos
//  784   unsigned int data = 0;
//  785   unsigned char buf [7] = "";
        MOV       DPTR,#`?<Constant "">_2`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x7
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  786  // printf("UART received!");
//  787   HalUARTRead(0, buf, 6);
        ; Setup parameters for call to function HalUARTRead
        MOV       R4,#0x6
        MOV       R5,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,A
        LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
//  788   if ( (buf[1] & GENERICAPP_ENDPOINT) && (buf[0] == 0xCC) && (buf[5] == 0x33)) {  //make sure cmd send to this device
//  789     dest_endID = buf[1] & 0x1F; //get destnation endPoint from uart message
//  790     data = osal_build_uint16(&buf[3]);
//  791     HalUARTWrite(0, buf, 6);
//  792     if (buf[2]&0x80) {  //cmd for coordinator
//  793       switch (buf[2]) {
//  794         //add cmds here, e.g. case: 0x81...
//  795         default:
//  796         break;
//  797       }
//  798     } else { //cmd for end device, send it
//  799       zclGenericApp_SendTheMessage(dest_endID, buf[2], data);
//  800     }
//  801   }
//  802 }
        MOV       A,#0x7
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock16
//  803 
//  804 
//  805 
//  806 
//  807 
//  808 //@fn rt_str_reverse
//  809 //@brief message received is reversed, so we need to reverse again using this function
//  810 //@para *str the first byte in a string that needs reversed
//  811 //@para length the total length that needs to be reversed, 0 included
//  812 //e.g a[] = {1,2,3,4}, then rt_str_reverse(&a[0], 3) result in {4, 3, 2, 1}

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  813 void str_reverse(char *str, int length) {
str_reverse:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function str_reverse
        CODE
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  814   char temp, *end_ptr;
//  815   end_ptr = str + length;
        MOV       A,R2
        ADD       A,R4
        MOV       R0,A
        MOV       A,R3
        ADDC      A,R5
        SJMP      ??str_reverse_0
//  816   while(end_ptr > str) {
//  817     temp = *str;
??str_reverse_1:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
//  818     *str = *end_ptr;
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
//  819     *end_ptr = temp;
        MOV       A,R4
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine4 & 0xFFFF
//  820     str++;
??CrossCallReturnLabel_4:
        MOV       R2,DPL
        MOV       R3,DPH
//  821     end_ptr--;
        MOV       A,R0
        ADD       A,#-0x1
        DEC       R0
        MOV       A,R1
        ADDC      A,#-0x1
??str_reverse_0:
        MOV       R1,A
//  822   }
        CLR       C
        MOV       A,R2
        SUBB      A,R0
        MOV       A,R3
        SUBB      A,R1
        JC        ??str_reverse_1
//  823 }
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock17

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function zclGenericApp_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zclGenericApp_ProcessZDOMsgs
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function str_reverse
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond20) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond20) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond20) CFA_SP SP+-7
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        RET
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21
//  824 
//  825 // ENDNEW
//  826 
//  827 
//  828 
//  829 // NEW
//  830 
//  831 
//  832 /*********************************************************************
//  833  * @fn      zclGenericApp_ProcessFoundationMsg
//  834  *
//  835  * @brief   Process Foundation message
//  836  *
//  837  * @param   srcEP - Sending Apps endpoint
//  838  * @param   dstAddr - where to send the request
//  839  * @param   clusterID - real cluster ID
//  840  * @param   hdr - pointer to the message header
//  841  * @param   len - length of the received message
//  842  * @param   data - received message
//  843  *
//  844  * @return  none
//  845  */
//  846 static void zclGenericApp_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID,
//  847                                                 zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd )
//  848 {
//  849 #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT) || defined(ZCL_DISCOVER)
//  850   void *cmd;
//  851 #endif
//  852 
//  853   switch ( hdr->commandID )
//  854   {
//  855 #ifdef ZCL_READ
//  856     case ZCL_CMD_READ:
//  857       cmd = zclParseInReadCmd( pParseCmd );
//  858       if ( cmd )
//  859       {
//  860         zcl_SendRead( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclReadCmd_t *)cmd,
//  861                       ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
//  862         osal_mem_free( cmd );
//  863       }
//  864       break;
//  865 #endif // ZCL_READ
//  866 
//  867 #ifdef ZCL_WRITE
//  868     case ZCL_CMD_WRITE:
//  869       cmd = zclParseInWriteCmd( pParseCmd );
//  870       if ( cmd )
//  871       {
//  872         zcl_SendWrite( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
//  873                        ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
//  874         osal_mem_free( cmd );
//  875       }
//  876       break;
//  877 
//  878     case ZCL_CMD_WRITE_UNDIVIDED:
//  879       cmd = zclParseInWriteCmd( pParseCmd );
//  880       if ( cmd )
//  881       {
//  882         zcl_SendWriteUndivided( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
//  883                                 ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
//  884         osal_mem_free( cmd );
//  885       }
//  886       break;
//  887 
//  888     case ZCL_CMD_WRITE_NO_RSP:
//  889       cmd = zclParseInWriteCmd( pParseCmd );
//  890       if ( cmd )
//  891       {
//  892         zcl_SendWriteNoRsp( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
//  893                             ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
//  894         osal_mem_free( cmd );
//  895       }
//  896       break;
//  897 #endif // ZCL_WRITE
//  898 
//  899 #ifdef ZCL_REPORT
//  900     case ZCL_CMD_CONFIG_REPORT:
//  901       cmd = zclParseInConfigReportCmd( pParseCmd );
//  902       if ( cmd )
//  903       {
//  904         zcl_SendConfigReportCmd( GENERICAPP_ENDPOINT, dstAddr,  clusterID, (zclCfgReportCmd_t *)cmd,
//  905                                  ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
//  906         osal_mem_free( cmd );
//  907       }
//  908       break;
//  909 
//  910     case ZCL_CMD_READ_REPORT_CFG:
//  911       cmd = zclParseInReadReportCfgCmd( pParseCmd );
//  912       if ( cmd )
//  913       {
//  914         zcl_SendReadReportCfgCmd( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclReadReportCfgCmd_t *)cmd,
//  915                                   ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
//  916         osal_mem_free( cmd );
//  917       }
//  918       break;
//  919 
//  920     case ZCL_CMD_REPORT:
//  921       cmd = zclParseInReportCmd( pParseCmd );
//  922       if ( cmd )
//  923       {
//  924         zcl_SendReportCmd( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclReportCmd_t *)cmd,
//  925                            ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
//  926         osal_mem_free( cmd );
//  927       }
//  928       break;
//  929 #endif // ZCL_REPORT
//  930 #ifdef ZCL_DISCOVER
//  931     case ZCL_CMD_DISCOVER_ATTRS:
//  932       cmd = zclParseInDiscAttrsCmd( pParseCmd );
//  933       if ( cmd )
//  934       {
//  935         zcl_SendDiscoverAttrsCmd( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclDiscoverAttrsCmd_t *)cmd,
//  936                                   ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
//  937         osal_mem_free( cmd );
//  938       }
//  939       break;
//  940 #endif // ZCL_DISCOVER
//  941 
//  942     default:
//  943       // Unsupported command -- just forward it.
//  944       zcl_SendCommand( pParseCmd->endpoint, dstAddr, clusterID, hdr->commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  945                        hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, pParseCmd->dataLen, pParseCmd->pData );
//  946       break;
//  947   }
//  948 }
//  949 
//  950 
//  951 
//  952 
//  953 
//  954 
//  955 
//  956 /*********************************************************************
//  957  * @fn      zclGenericApp_ProcessAppMsg
//  958  *
//  959  * @brief   Process DoorLock messages
//  960  *
//  961  * @param   srcEP - Sending Apps endpoint
//  962  * @param   len - number of bytes
//  963  * @param   msg - pointer to message
//  964  *          0 - lo byte destination address
//  965  *          1 - hi byte destination address
//  966  *          2 - destination endpoint
//  967  *          3 - lo byte cluster ID
//  968  *          4 - hi byte cluster ID
//  969  *          5 - message length
//  970  *          6 - destination address mode (first byte of data)
//  971  *          7 - zcl command frame
//  972  *
//  973  * @return  none
//  974  */
//  975 static void zclGenericApp_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg )
//  976 {
//  977   afAddrType_t dstAddr;
//  978   uint16 clusterID;
//  979   zclFrameHdr_t hdr;
//  980   uint8 *pData;
//  981   uint8 dataLen;
//  982 
//  983   dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
//  984   msg += 2;
//  985   dstAddr.endPoint = *msg++;
//  986   clusterID = BUILD_UINT16( msg[0], msg[1] );
//  987   msg += 2;
//  988   dataLen = *msg++; // Length of message (Z-Tool can support up to 255 octets)
//  989   dstAddr.addrMode = (afAddrMode_t)(*msg++);
//  990   dataLen--; // Length of ZCL frame
//  991 
//  992   // Begining of ZCL frame
//  993   pData = zclParseHdr( &hdr, msg );
//  994   dataLen -= (uint8)( pData - msg );
//  995 
//  996   // Is this a foundation type message?
//  997   if ( zcl_ProfileCmd( hdr.fc.type ) )
//  998   {
//  999     if ( hdr.fc.manuSpecific )
// 1000     {
// 1001       // We don't support any manufacturer specific command -- just forward it.
// 1002       zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1003                        hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
// 1004     }
// 1005     else
// 1006     {
// 1007       zclParseCmd_t cmd;
// 1008 
// 1009       cmd.endpoint = srcEP;
// 1010       cmd.dataLen = dataLen;
// 1011       cmd.pData = pData;
// 1012 
// 1013       zclGenericApp_ProcessFoundationMsg( &dstAddr, clusterID, &hdr, &cmd );
// 1014     }
// 1015   }
// 1016   else
// 1017   {
// 1018     // Nope, must be specific to the cluster ID
// 1019     if ( hdr.fc.manuSpecific )
// 1020     {
// 1021       // We don't support any manufacturer specific command -- just forward it.
// 1022       zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1023                        hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
// 1024     }
// 1025   }
// 1026 }
// 1027 
// 1028 
// 1029 
// 1030 
// 1031 
// 1032 
// 1033 
// 1034 
// 1035 
// 1036 ///*********************************************************************
// 1037 // * @fn      zclGenericApp_BasicResetCB
// 1038 // *
// 1039 // * @brief   Callback from the ZCL General Cluster Library
// 1040 // *          to set all the Basic Cluster attributes to default values.
// 1041 // *
// 1042 // * @param   none
// 1043 // *
// 1044 // * @return  none
// 1045 // */
// 1046 //static void zclGenericApp_BasicResetCB( void )
// 1047 //{
// 1048 //  zclGenericApp_ResetAttributesToDefaultValues(); 
// 1049 //}
// 1050 
// 1051 
// 1052 
// 1053 ///*********************************************************************
// 1054 // * @fn      zclGenericApp_BatteryWarningCB
// 1055 // *
// 1056 // * @brief   Called to handle battery-low situation.
// 1057 // *
// 1058 // * @param   voltLevel - level of severity
// 1059 // *
// 1060 // * @return  none
// 1061 // */
// 1062 //void zclGenericApp_BatteryWarningCB( uint8 voltLevel )
// 1063 //{
// 1064 //  if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
// 1065 //  {
// 1066 //    // Send warning message to the gateway and blink LED
// 1067 //  }
// 1068 //  else if ( voltLevel == VOLT_LEVEL_BAD )
// 1069 //  {
// 1070 //    // Shut down the system
// 1071 //  }
// 1072 //}
// 1073 
// 1074 // ENDNEW
// 1075 
// 1076 
// 1077 
// 1078 
// 1079 
// 1080 /*********************************************************************
// 1081  * @fn      zclGenericApp_HandleKeys
// 1082  *
// 1083  * @brief   Handles all key events for this device.
// 1084  *
// 1085  * @param   shift - true if in shift/alt.
// 1086  * @param   keys - bit field for key events. Valid entries:
// 1087  *                 HAL_KEY_SW_5
// 1088  *                 HAL_KEY_SW_4
// 1089  *                 HAL_KEY_SW_2
// 1090  *                 HAL_KEY_SW_1
// 1091  *
// 1092  * @return  none
// 1093  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1094 static void zclGenericApp_HandleKeys( byte shift, byte keys )
zclGenericApp_HandleKeys:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function zclGenericApp_HandleKeys
        CODE
// 1095 {
        FUNCALL zclGenericApp_HandleKeys, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, bdb_resetLocalAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, zclGenericApp_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
// 1096   if ( keys & HAL_KEY_SW_1 )
        MOV       C,0xE0 /* A   */.0
        JNC       ??zclGenericApp_HandleKeys_0
// 1097   {
// 1098     static bool LED_OnOff = FALSE;
// 1099     
// 1100     giGenAppScreenMode = GENERIC_MAINMODE;
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
// 1101     
// 1102     /* GENERICAPP_TODO: add app functionality to hardware keys here */
// 1103     
// 1104     // for example, start/stop LED 2 toggling with 500ms period
// 1105     if (LED_OnOff)
        MOV       DPTR,#??LED_OnOff
        MOVX      A,@DPTR
        JZ        ??zclGenericApp_HandleKeys_1
// 1106     { 
// 1107       // if the LED is blinking, stop the osal timer and turn the LED off
// 1108       osal_stop_timerEx(zclGenericApp_TaskID, GENERICAPP_EVT_1);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x8
        MOV       R3,#0x0
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1109       HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1110       LED_OnOff = FALSE;
        MOV       DPTR,#??LED_OnOff
        CLR       A
        SJMP      ??zclGenericApp_HandleKeys_2
// 1111     }
// 1112     else
// 1113     {
// 1114       // turn on LED 2 and start an osal timer to toggle it after 500ms, search
// 1115       // for GENERICAPP_EVT_1 to see event handling after expired timer
// 1116       osal_start_timerEx( zclGenericApp_TaskID, GENERICAPP_EVT_1, 500 );
??zclGenericApp_HandleKeys_1:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1f4
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R2,#0x8
        MOV       R3,#0x0
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 1117       HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1118       LED_OnOff = TRUE;
        MOV       DPTR,#??LED_OnOff
        MOV       A,#0x1
??zclGenericApp_HandleKeys_2:
        MOVX      @DPTR,A
// 1119     }
// 1120   }
// 1121   // Start the BDB commissioning method
// 1122   if ( keys & HAL_KEY_SW_2 )
??zclGenericApp_HandleKeys_0:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.1
        JNC       ??zclGenericApp_HandleKeys_3
// 1123   {
// 1124     giGenAppScreenMode = GENERIC_MAINMODE;
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
// 1125 
// 1126     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING | BDB_COMMISSIONING_MODE_INITIATOR_TL);
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0xf
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
// 1127   }
// 1128   if ( keys & HAL_KEY_SW_3 )
??zclGenericApp_HandleKeys_3:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.4
        JNC       ??zclGenericApp_HandleKeys_4
// 1129   {
// 1130     giGenAppScreenMode = GENERIC_MAINMODE;
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
// 1131   
// 1132     // touchlink target commissioning, if enabled  
// 1133 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
// 1134     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_FINDING_BINDING);
// 1135     touchLinkTarget_EnableCommissioning( 30000 );
// 1136 #endif
// 1137     
// 1138   }
// 1139   if ( keys & HAL_KEY_SW_4 )
??zclGenericApp_HandleKeys_4:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.3
        JNC       ??zclGenericApp_HandleKeys_5
// 1140   {
// 1141     
// 1142    giGenAppScreenMode = giGenAppScreenMode ? GENERIC_MAINMODE : GENERIC_HELPMODE;
        MOV       DPTR,#giGenAppScreenMode
        MOVX      A,@DPTR
        JZ        ??zclGenericApp_HandleKeys_6
        CLR       A
        SJMP      ??zclGenericApp_HandleKeys_7
??zclGenericApp_HandleKeys_6:
        MOV       A,#0x1
??zclGenericApp_HandleKeys_7:
        MOVX      @DPTR,A
// 1143 #ifdef LCD_SUPPORTED
// 1144     HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sClearLine & 0xff
        MOV       R3,#(sClearLine >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1145 #endif
// 1146     
// 1147   }
// 1148   if ( keys & HAL_KEY_SW_5 )
??zclGenericApp_HandleKeys_5:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.2
        JNC       ??zclGenericApp_HandleKeys_8
// 1149   {
// 1150     bdb_resetLocalAction();
        ; Setup parameters for call to function bdb_resetLocalAction
        LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
// 1151   }
// 1152 
// 1153   zclGenericApp_LcdDisplayUpdate();
??zclGenericApp_HandleKeys_8:
        ; Setup parameters for call to function zclGenericApp_LcdDisplayUpdate
        LCALL     `??zclGenericApp_LcdDisplayUpdate::?relay`; Banked call to: zclGenericApp_LcdDisplayUpdate
// 1154 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock22

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??LED_OnOff:
        DS 1
        REQUIRE __INIT_XDATA_Z
// 1155 
// 1156 /*********************************************************************
// 1157  * @fn      zclGenericApp_LcdDisplayUpdate
// 1158  *
// 1159  * @brief   Called to update the LCD display.
// 1160  *
// 1161  * @param   none
// 1162  *
// 1163  * @return  none
// 1164  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1165 void zclGenericApp_LcdDisplayUpdate( void )
zclGenericApp_LcdDisplayUpdate:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function zclGenericApp_LcdDisplayUpdate
        CODE
// 1166 {
        FUNCALL zclGenericApp_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1167 #ifdef LCD_SUPPORTED
// 1168   if ( giGenAppScreenMode == GENERIC_HELPMODE )
        MOV       DPTR,#giGenAppScreenMode
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclGenericApp_LcdDisplayUpdate_0
// 1169   {
// 1170     zclGenericApp_LcdDisplayHelpMode();
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x1
        MOV       R2,#sSwGenericApp & 0xff
        MOV       R3,#(sSwGenericApp >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sSwBDBMode & 0xff
        MOV       R3,#(sSwBDBMode >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        SJMP      ??zclGenericApp_LcdDisplayUpdate_1
// 1171   }
// 1172   else
// 1173   {
// 1174     zclGenericApp_LcdDisplayMainMode();
??zclGenericApp_LcdDisplayUpdate_0:
        MOV       DPTR,#zclGenericApp_NwkState
        MOVX      A,@DPTR
        XRL       A,#0x9
        JNZ       ??zclGenericApp_LcdDisplayUpdate_2
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV       R1,#0x0
        SJMP      ??zclGenericApp_LcdDisplayUpdate_3
??zclGenericApp_LcdDisplayUpdate_2:
        MOVX      A,@DPTR
        XRL       A,#0x7
        JNZ       ??zclGenericApp_LcdDisplayUpdate_4
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV       R1,#0x1
        SJMP      ??zclGenericApp_LcdDisplayUpdate_3
??zclGenericApp_LcdDisplayUpdate_4:
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclGenericApp_LcdDisplayUpdate_5
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV       R1,#0x2
??zclGenericApp_LcdDisplayUpdate_3:
        LCALL     `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
??zclGenericApp_LcdDisplayUpdate_5:
        MOV       DPTR,#gPermitDuration
        MOVX      A,@DPTR
        MOV       DPTR,#sSwHelp + 15
        JZ        ??zclGenericApp_LcdDisplayUpdate_6
        MOV       A,#0x2a
        SJMP      ??zclGenericApp_LcdDisplayUpdate_7
??zclGenericApp_LcdDisplayUpdate_6:
        MOV       A,#0x20
??zclGenericApp_LcdDisplayUpdate_7:
        MOVX      @DPTR,A
??zclGenericApp_LcdDisplayUpdate_1:
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       R2,#sSwHelp & 0xff
        MOV       R3,#(sSwHelp >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1175   }
// 1176 #endif
// 1177 }
        SJMP      ?Subroutine2
          CFI EndBlock cfiBlock23
// 1178 
// 1179 #ifdef LCD_SUPPORTED
// 1180 /*********************************************************************
// 1181  * @fn      zclGenericApp_LcdDisplayMainMode
// 1182  *
// 1183  * @brief   Called to display the main screen on the LCD.
// 1184  *
// 1185  * @param   none
// 1186  *
// 1187  * @return  none
// 1188  */
// 1189 static void zclGenericApp_LcdDisplayMainMode( void )
// 1190 {
// 1191   // display line 1 to indicate NWK status
// 1192   if ( zclGenericApp_NwkState == DEV_ZB_COORD )
// 1193   {
// 1194     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
// 1195   }
// 1196   else if ( zclGenericApp_NwkState == DEV_ROUTER )
// 1197   {
// 1198     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
// 1199   }
// 1200   else if ( zclGenericApp_NwkState == DEV_END_DEVICE )
// 1201   {
// 1202     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
// 1203   }
// 1204 
// 1205   // end of line 3 displays permit join status (*)
// 1206   if ( gPermitDuration )
// 1207   {
// 1208     sSwHelp[15] = '*';
// 1209   }
// 1210   else
// 1211   {
// 1212     sSwHelp[15] = ' ';
// 1213   }
// 1214   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
// 1215 }
// 1216 
// 1217 /*********************************************************************
// 1218  * @fn      zclGenericApp_LcdDisplayHelpMode
// 1219  *
// 1220  * @brief   Called to display the SW options on the LCD.
// 1221  *
// 1222  * @param   none
// 1223  *
// 1224  * @return  none
// 1225  */
// 1226 static void zclGenericApp_LcdDisplayHelpMode( void )
// 1227 {
// 1228   HalLcdWriteString( (char *)sSwGenericApp, HAL_LCD_LINE_1 );
// 1229   HalLcdWriteString( (char *)sSwBDBMode, HAL_LCD_LINE_2 );
// 1230   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
// 1231 }
// 1232 #endif  // LCD_SUPPORTED
// 1233 
// 1234 /*********************************************************************
// 1235  * @fn      zclGenericApp_ProcessCommissioningStatus
// 1236  *
// 1237  * @brief   Callback in which the status of the commissioning process are reported
// 1238  *
// 1239  * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
// 1240  *
// 1241  * @return  none
// 1242  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1243 static void zclGenericApp_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
zclGenericApp_ProcessCommissioningStatus:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function zclGenericApp_ProcessCommissioningStatus
        CODE
// 1244 {
        FUNCALL zclGenericApp_ProcessCommissioningStatus, bdb_StartCommissioning
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1245   switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclGenericApp_ProcessCommissioningStatus_0
// 1246   {
// 1247     case BDB_COMMISSIONING_FORMATION:
// 1248       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclGenericApp_ProcessCommissioningStatus_0
// 1249       {
// 1250         //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
// 1251         bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
        ; Setup parameters for call to function bdb_StartCommissioning
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x2
        MOV       R1,A
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
// 1252       }
// 1253       else
// 1254       {
// 1255         //Want to try other channels?
// 1256         //try with bdb_setChannelAttribute
// 1257       }
// 1258     break;
// 1259     case BDB_COMMISSIONING_NWK_STEERING:
// 1260       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
// 1261       {
// 1262         //YOUR JOB:
// 1263         //We are on the nwk, what now?
// 1264       }
// 1265       else
// 1266       {
// 1267         //See the possible errors for nwk steering procedure
// 1268         //No suitable networks found
// 1269         //Want to try other channels?
// 1270         //try with bdb_setChannelAttribute
// 1271       }
// 1272     break;
// 1273     case BDB_COMMISSIONING_FINDING_BINDING:
// 1274       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
// 1275       {
// 1276         //YOUR JOB:
// 1277       }
// 1278       else
// 1279       {
// 1280         //YOUR JOB:
// 1281         //retry?, wait for user interaction?
// 1282       }
// 1283     break;
// 1284     case BDB_COMMISSIONING_INITIALIZATION:
// 1285       //Initialization notification can only be successful. Failure on initialization
// 1286       //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
// 1287 
// 1288       //YOUR JOB:
// 1289       //We are on a network, what now?
// 1290 
// 1291     break;
// 1292 #if ZG_BUILD_ENDDEVICE_TYPE    
// 1293     case BDB_COMMISSIONING_PARENT_LOST:
// 1294       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
// 1295       {
// 1296         //We did recover from losing parent
// 1297       }
// 1298       else
// 1299       {
// 1300         //Parent not found, attempt to rejoin again after a fixed delay
// 1301         osal_start_timerEx(zclGenericApp_TaskID, GENERICAPP_END_DEVICE_REJOIN_EVT, GENERICAPP_END_DEVICE_REJOIN_DELAY);
// 1302       }
// 1303     break;
// 1304 #endif 
// 1305   }
// 1306 }
??zclGenericApp_ProcessCommissioningStatus_0:
          CFI EndBlock cfiBlock24
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock25
// 1307 
// 1308 /*********************************************************************
// 1309  * @fn      zclGenericApp_ProcessIdentifyTimeChange
// 1310  *
// 1311  * @brief   Called to process any change to the IdentifyTime attribute.
// 1312  *
// 1313  * @param   endpoint - in which the identify has change
// 1314  *
// 1315  * @return  none
// 1316  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1317 static void zclGenericApp_ProcessIdentifyTimeChange( uint8 endpoint )
zclGenericApp_ProcessIdentifyTimeChange:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function zclGenericApp_ProcessIdentifyTimeChange
        CODE
// 1318 {
        FUNCALL zclGenericApp_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1319   (void) endpoint;
// 1320 
// 1321   if ( zclGenericApp_IdentifyTime > 0 )
        MOV       DPTR,#zclGenericApp_IdentifyTime
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??zclGenericApp_ProcessIdentifyTimeChange_0
// 1322   {
// 1323     HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOV       R3,#0x5
        MOV       R2,#-0x1
        MOV       R1,#0x2
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP      ??zclGenericApp_ProcessIdentifyTimeChange_1
// 1324   }
// 1325   else
// 1326   {
// 1327     HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
??zclGenericApp_ProcessIdentifyTimeChange_0:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1328   }
// 1329 }
??zclGenericApp_ProcessIdentifyTimeChange_1:
        SJMP      ?Subroutine2
          CFI EndBlock cfiBlock26
// 1330 
// 1331 /*********************************************************************
// 1332  * @fn      zclGenericApp_BindNotification
// 1333  *
// 1334  * @brief   Called when a new bind is added.
// 1335  *
// 1336  * @param   data - pointer to new bind data
// 1337  *
// 1338  * @return  none
// 1339  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1340 static void zclGenericApp_BindNotification( bdbBindNotificationData_t *data )
zclGenericApp_BindNotification:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function zclGenericApp_BindNotification
        CODE
// 1341 {
        ; Saved register size: 0
        ; Auto size: 0
// 1342   // GENERICAPP_TODO: process the new bind information
// 1343 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock27
// 1344 
// 1345 
// 1346 /*********************************************************************
// 1347  * @fn      zclGenericApp_ProcessTouchlinkTargetEnable
// 1348  *
// 1349  * @brief   Called to process when the touchlink target functionality
// 1350  *          is enabled or disabled
// 1351  *
// 1352  * @param   none
// 1353  *
// 1354  * @return  none
// 1355  */
// 1356 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
// 1357 static void zclGenericApp_ProcessTouchlinkTargetEnable( uint8 enable )
// 1358 {
// 1359   if ( enable )
// 1360   {
// 1361     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
// 1362   }
// 1363   else
// 1364   {
// 1365     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
// 1366   }
// 1367 }
// 1368 #endif
// 1369 
// 1370 /*********************************************************************
// 1371  * @fn      zclGenericApp_BasicResetCB
// 1372  *
// 1373  * @brief   Callback from the ZCL General Cluster Library
// 1374  *          to set all the Basic Cluster attributes to default values.
// 1375  *
// 1376  * @param   none
// 1377  *
// 1378  * @return  none
// 1379  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1380 static void zclGenericApp_BasicResetCB( void )
zclGenericApp_BasicResetCB:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function zclGenericApp_BasicResetCB
        CODE
// 1381 {
        FUNCALL zclGenericApp_BasicResetCB, zclGenericApp_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1382 
// 1383   /* GENERICAPP_TODO: remember to update this function with any
// 1384      application-specific cluster attribute variables */
// 1385   
// 1386   zclGenericApp_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclGenericApp_ResetAttributesToDefaultValues
        LCALL     `??zclGenericApp_ResetAttributesToDefaultValues:`; Banked call to: zclGenericApp_ResetAttributesToDefaultValues
// 1387   
// 1388 }
        SJMP      ?Subroutine2
          CFI EndBlock cfiBlock28

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGenericApp_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sSwHelp>`:
        DB "SW4: Help       "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGenericApp_CmdCallbacks>`:
        DATA16
        DW `??zclGenericApp_BasicResetCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_ProcessZDOMsgs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_MessageMSGCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_SendTheMessage::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_SendTheMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_SerialMSGCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_SerialMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??str_reverse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    str_reverse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_LcdDisplayUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_ProcessCommissioningStatus::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_ProcessCommissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_ProcessIdentifyTimeChange::?rel`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_BindNotification::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_BindNotification

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_BasicResetCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Initializing...">`:
        DB "Initializing..."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ok">`:
        DB "ok"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Data Lost\\r\\n">`:
        DB "Data Lost\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Data Sent\\r\\n">`:
        DB "Data Sent\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "toggle">`:
        DB "toggle"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Device Found Form Pre...">`:
        DB "Device Found Form Previous Log -> Existed!\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "New Device!\\r\\n">`:
        DB "New Device!\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">_1`:
        DB ""
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Successfully Sent\\r\\n">`:
        DB "Successfully Sent\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Couldn\\'t Sent\\r\\n">`:
        DB "Couldn't Sent\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">_2`:
        DB ""
        DB 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1f4:
        DD 500

        END
// 1389 
// 1390 ///*********************************************************************
// 1391 // * @fn      zclSampleApp_BatteryWarningCB
// 1392 // *
// 1393 // * @brief   Called to handle battery-low situation.
// 1394 // *
// 1395 // * @param   voltLevel - level of severity
// 1396 // *
// 1397 // * @return  none
// 1398 // */
// 1399 //void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
// 1400 //{
// 1401 //  if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
// 1402 //  {
// 1403 //    // Send warning message to the gateway and blink LED
// 1404 //  }
// 1405 //  else if ( voltLevel == VOLT_LEVEL_BAD )
// 1406 //  {
// 1407 //    // Shut down the system
// 1408 //  }
// 1409 //}
// 1410 
// 1411 /******************************************************************************
// 1412  *
// 1413  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1414  *
// 1415  *****************************************************************************/
// 1416 
// 1417 /*********************************************************************
// 1418  * @fn      zclGenericApp_ProcessIncomingMsg
// 1419  *
// 1420  * @brief   Process ZCL Foundation incoming message
// 1421  *
// 1422  * @param   pInMsg - pointer to the received message
// 1423  *
// 1424  * @return  none
// 1425  */
// 1426 static void zclGenericApp_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
// 1427 {
// 1428   switch ( pInMsg->zclHdr.commandID )
// 1429   {
// 1430 #ifdef ZCL_READ
// 1431     case ZCL_CMD_READ_RSP:
// 1432       zclGenericApp_ProcessInReadRspCmd( pInMsg );
// 1433       break;
// 1434 #endif
// 1435 #ifdef ZCL_WRITE
// 1436     case ZCL_CMD_WRITE_RSP:
// 1437       zclGenericApp_ProcessInWriteRspCmd( pInMsg );
// 1438       break;
// 1439 #endif
// 1440     case ZCL_CMD_CONFIG_REPORT:
// 1441     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1442     case ZCL_CMD_READ_REPORT_CFG:
// 1443     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1444     case ZCL_CMD_REPORT:
// 1445       //bdb_ProcessIncomingReportingMsg( pInMsg );
// 1446       break;
// 1447       
// 1448     case ZCL_CMD_DEFAULT_RSP:
// 1449       zclGenericApp_ProcessInDefaultRspCmd( pInMsg );
// 1450       break;
// 1451 #ifdef ZCL_DISCOVER
// 1452     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1453       zclGenericApp_ProcessInDiscCmdsRspCmd( pInMsg );
// 1454       break;
// 1455 
// 1456     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1457       zclGenericApp_ProcessInDiscCmdsRspCmd( pInMsg );
// 1458       break;
// 1459 
// 1460     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1461       zclGenericApp_ProcessInDiscAttrsRspCmd( pInMsg );
// 1462       break;
// 1463 
// 1464     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1465       zclGenericApp_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1466       break;
// 1467 #endif
// 1468     default:
// 1469       break;
// 1470   }
// 1471 
// 1472   if ( pInMsg->attrCmd )
// 1473     osal_mem_free( pInMsg->attrCmd );
// 1474 }
// 1475 
// 1476 #ifdef ZCL_READ
// 1477 /*********************************************************************
// 1478  * @fn      zclGenericApp_ProcessInReadRspCmd
// 1479  *
// 1480  * @brief   Process the "Profile" Read Response Command
// 1481  *
// 1482  * @param   pInMsg - incoming message to process
// 1483  *
// 1484  * @return  none
// 1485  */
// 1486 static uint8 zclGenericApp_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1487 {
// 1488   zclReadRspCmd_t *readRspCmd;
// 1489   uint8 i;
// 1490 
// 1491   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1492   for (i = 0; i < readRspCmd->numAttr; i++)
// 1493   {
// 1494     // Notify the originator of the results of the original read attributes
// 1495     // attempt and, for each successfull request, the value of the requested
// 1496     // attribute
// 1497   }
// 1498 
// 1499   return ( TRUE );
// 1500 }
// 1501 #endif // ZCL_READ
// 1502 
// 1503 #ifdef ZCL_WRITE
// 1504 /*********************************************************************
// 1505  * @fn      zclGenericApp_ProcessInWriteRspCmd
// 1506  *
// 1507  * @brief   Process the "Profile" Write Response Command
// 1508  *
// 1509  * @param   pInMsg - incoming message to process
// 1510  *
// 1511  * @return  none
// 1512  */
// 1513 static uint8 zclGenericApp_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1514 {
// 1515   zclWriteRspCmd_t *writeRspCmd;
// 1516   uint8 i;
// 1517 
// 1518   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1519   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1520   {
// 1521     // Notify the device of the results of the its original write attributes
// 1522     // command.
// 1523   }
// 1524 
// 1525   return ( TRUE );
// 1526 }
// 1527 #endif // ZCL_WRITE
// 1528 
// 1529 
// 1530 
// 1531 // NEW
// 1532 
// 1533 #ifdef ZCL_REPORT_DESTINATION_DEVICE
// 1534 /*********************************************************************
// 1535  * @fn      zclGenericApp_ProcessInReportCmd
// 1536  *
// 1537  * @brief   Process the "Profile" Report Command
// 1538  *
// 1539  * @param   pInMsg - incoming message to process
// 1540  *
// 1541  * @return  none
// 1542  */
// 1543 static void zclGenericApp_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
// 1544 {
// 1545   zclReportCmd_t *pInTempSensorReport;
// 1546   
// 1547   pInTempSensorReport = (zclReportCmd_t *)pInMsg->attrCmd;
// 1548 
// 1549   if ( pInTempSensorReport->attrList[0].attrID != ATTRID_MS_TEMPERATURE_MEASURED_VALUE )
// 1550   {
// 1551     return;
// 1552   }
// 1553   
// 1554   // store the current temperature value sent over the air from temperature sensor
// 1555   zclGenericApp_LocalTemperature = BUILD_UINT16(pInTempSensorReport->attrList[0].attrData[0], pInTempSensorReport->attrList[0].attrData[1]);
// 1556 }
// 1557 #endif  // ZCL_REPORT_DESTINATION_DEVICE
// 1558 
// 1559 // ENDNEW
// 1560 
// 1561 
// 1562 
// 1563 /*********************************************************************
// 1564  * @fn      zclGenericApp_ProcessInDefaultRspCmd
// 1565  *
// 1566  * @brief   Process the "Profile" Default Response Command
// 1567  *
// 1568  * @param   pInMsg - incoming message to process
// 1569  *
// 1570  * @return  none
// 1571  */
// 1572 static uint8 zclGenericApp_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1573 {
// 1574   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1575 
// 1576   // Device is notified of the Default Response command.
// 1577   (void)pInMsg;
// 1578 
// 1579   return ( TRUE );
// 1580 }
// 1581 
// 1582 #ifdef ZCL_DISCOVER
// 1583 /*********************************************************************
// 1584  * @fn      zclGenericApp_ProcessInDiscCmdsRspCmd
// 1585  *
// 1586  * @brief   Process the Discover Commands Response Command
// 1587  *
// 1588  * @param   pInMsg - incoming message to process
// 1589  *
// 1590  * @return  none
// 1591  */
// 1592 static uint8 zclGenericApp_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1593 {
// 1594   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1595   uint8 i;
// 1596 
// 1597   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1598   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1599   {
// 1600     // Device is notified of the result of its attribute discovery command.
// 1601   }
// 1602 
// 1603   return ( TRUE );
// 1604 }
// 1605 
// 1606 /*********************************************************************
// 1607  * @fn      zclGenericApp_ProcessInDiscAttrsRspCmd
// 1608  *
// 1609  * @brief   Process the "Profile" Discover Attributes Response Command
// 1610  *
// 1611  * @param   pInMsg - incoming message to process
// 1612  *
// 1613  * @return  none
// 1614  */
// 1615 static uint8 zclGenericApp_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1616 {
// 1617   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1618   uint8 i;
// 1619 
// 1620   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1621   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1622   {
// 1623     // Device is notified of the result of its attribute discovery command.
// 1624   }
// 1625 
// 1626   return ( TRUE );
// 1627 }
// 1628 
// 1629 /*********************************************************************
// 1630  * @fn      zclGenericApp_ProcessInDiscAttrsExtRspCmd
// 1631  *
// 1632  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1633  *
// 1634  * @param   pInMsg - incoming message to process
// 1635  *
// 1636  * @return  none
// 1637  */
// 1638 static uint8 zclGenericApp_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1639 {
// 1640   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1641   uint8 i;
// 1642 
// 1643   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1644   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1645   {
// 1646     // Device is notified of the result of its attribute discovery command.
// 1647   }
// 1648 
// 1649   return ( TRUE );
// 1650 }
// 1651 #endif // ZCL_DISCOVER
// 1652 
// 1653 /****************************************************************************
// 1654 ****************************************************************************/
// 1655 
// 1656 
// 
// 1 746 bytes in segment BANKED_CODE
//    78 bytes in segment BANK_RELAYS
//    42 bytes in segment XDATA_I
//    42 bytes in segment XDATA_ID
//   231 bytes in segment XDATA_ROM_C
//   185 bytes in segment XDATA_Z
// 
//   120 bytes of CODE     memory
//   227 bytes of CONST    memory (+ 4 bytes shared)
// 1 746 bytes of HUGECODE memory
//   227 bytes of XDATA    memory
//
//Errors: none
//Warnings: 1
