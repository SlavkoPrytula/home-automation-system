###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               18/Apr/2021  13:22:02
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\zcl_genericapp.c
#    Command line       =  
#        -f C:\users\slavko\Temp\EWf00c.tmp ("C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\zcl_genericapp.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1
#        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List\zcl_genericapp.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj\zcl_genericapp.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\zcl_genericapp.c
      1          /**************************************************************************************************
      2            Filename:       zcl_genericapp.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application is a template to get started writing an application
     43            from scratch.
     44          
     45            Look for the sections marked with "GENERICAPP_TODO" to add application
     46            specific code.
     47          
     48            Note: if you would like your application to support automatic attribute
     49            reporting, include the BDB_REPORTING compile flag.
     50          *********************************************************************/
     51          
     52          /*********************************************************************
     53           * INCLUDES
     54           */
     55          #include "ZComDef.h"
     56          #include "ZDProfile.h" 	// NEW
     57          #include "OSAL.h"
     58          #include "AF.h"
     59          #include "ZDApp.h"
     60          #include "ZDObject.h"
     61          #include "MT_SYS.h"
     62          	 
     63          	 
     64          #include "DebugTrace.h" 	// NEW
     65          #include "MT_UART.h" 		// NEW	 
     66          
     67          #include "nwk_util.h"
     68          
     69          #include "zcl.h"
     70          #include "zcl_general.h"
     71          #include "zcl_ha.h"
     72          #include "zcl_diagnostic.h"
     73          #include "zcl_genericapp.h"
     74          
     75          #include "bdb.h"
     76          #include "bdb_interface.h"
     77          #include "gp_interface.h"
     78          
     79          #if defined ( INTER_PAN )
     80          #if defined ( BDB_TL_INITIATOR )
     81            #include "bdb_touchlink_initiator.h"
     82          #endif // BDB_TL_INITIATOR
     83          #if defined ( BDB_TL_TARGET )
     84            #include "bdb_touchlink_target.h"
     85          #endif // BDB_TL_TARGET
     86          #endif // INTER_PAN
     87          
     88          #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
     89            #include "bdb_touchlink.h"
     90          #endif
     91          
     92          #include "onboard.h"
     93          
     94          /* HAL */
     95          #include "hal_lcd.h"
     96          #include "hal_led.h"
     97          #include "hal_key.h"
     98          #include "hal_uart.h"
     99          
    100          /*********************************************************************
    101           * MACROS
    102           */
    103          
    104          
    105          /*********************************************************************
    106           * CONSTANTS
    107           */
    108          
    109          
    110          /*********************************************************************
    111           * TYPEDEFS
    112           */
    113          
    114          // NEW
    115          typedef struct
    116           {
    117             unsigned char endPoint;
    118             unsigned char extAddr[8];
    119             unsigned char compressed_addr;
    120           } EndDeviceInfo_t; 						//saved the end device information
    121          // ENDNEW
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          byte zclGenericApp_TaskID;
   \                     zclGenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    127          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          unsigned char device_count = 0;
   \                     device_count:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    129           
    130           // NEW
    131          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    132          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
    133          {
    134            GENERICAPP_CLUSTERID
    135          };
    136          

   \                                 In  segment XDATA_ROM_C, align 1
    137          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   20           DB 32
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
    138          {
    139            GENERICAPP_ENDPOINT,              //  int Endpoint;
    140            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    141            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    142            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    143            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    144            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    145            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    146            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    147            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    148          };
    149          
    150          // This is the Endpoint/Interface description.  It is defined here, but
    151          // filled-in in GenericApp_Init().  Another way to go would be to fill
    152          // in the structure here and make it a "const" (in code space).  The
    153          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          endPointDesc_t zclGenericApp_epDesc;
   \                     zclGenericApp_epDesc:
   \   000000                DS 7
   \   000007                REQUIRE __INIT_XDATA_Z
    155          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          EndDeviceInfo_t EndDeviceInfos[16]; //init space for 16 devices
   \                     EndDeviceInfos:
   \   000000                DS 160
   \   0000A0                REQUIRE __INIT_XDATA_Z
    157          // ENDNEW
    158          
    159          
    160          /*********************************************************************
    161           * GLOBAL FUNCTIONS
    162           */
    163          
    164          //void osal_buffer_uint16(&theMessageData[3], data); 			// NEW
    165          // void osal_buffer_uint16(unsigned char &theMessageData, unsigned int data);	// NEW
    166           
    167          /*********************************************************************
    168           * LOCAL VARIABLES
    169           */
    170          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 giGenAppScreenMode = GENERIC_MAINMODE;   // display the main screen mode first
   \                     giGenAppScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    172          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    174          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    175          devStates_t zclGenericApp_NwkState = DEV_INIT;
   \                     zclGenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclGenericApp_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    176          
    177          // NEW

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          byte zclGenericApp_TransID;  // This is the unique message ID (counter)
   \                     zclGenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          afAddrType_t zclGenericApp_DstAddr;
   \                     zclGenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    180          // ENDNEW
    181          
    182          /*********************************************************************
    183           * LOCAL FUNCTIONS
    184           */
    185          static void zclGenericApp_HandleKeys( byte shift, byte keys );
    186          static void zclGenericApp_BasicResetCB( void );
    187          static void zclGenericApp_ProcessIdentifyTimeChange( uint8 endpoint );
    188          static void zclGenericApp_BindNotification( bdbBindNotificationData_t *data );
    189          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
    190          static void zclGenericApp_ProcessTouchlinkTargetEnable( uint8 enable );
    191          #endif
    192          
    193          // NEW
    194          void zclGenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    195          void zclGenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    196          void zclGenericApp_SendTheMessage( unsigned char dest_endID, unsigned char cmd, unsigned int temp_set);
    197          void zclGenericApp_SerialMSGCB(void);
    198          void str_reverse(char *str, int length);
    199          // ENDNEW
    200          
    201          static void zclGenericApp_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    202          
    203          // app display functions
    204          static void zclGenericApp_LcdDisplayUpdate( void );
    205          #ifdef LCD_SUPPORTED
    206          static void zclGenericApp_LcdDisplayMainMode( void );
    207          static void zclGenericApp_LcdDisplayHelpMode( void );
    208          #endif
    209          
    210          // Functions to process ZCL Foundation incoming Command/Response messages
    211          static void zclGenericApp_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    212          #ifdef ZCL_READ
    213          static uint8 zclGenericApp_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    214          #endif
    215          #ifdef ZCL_WRITE
    216          static uint8 zclGenericApp_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    217          #endif
    218          static uint8 zclGenericApp_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    219          #ifdef ZCL_DISCOVER
    220          static uint8 zclGenericApp_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    221          static uint8 zclGenericApp_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    222          static uint8 zclGenericApp_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    223          #endif
    224          
    225          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    226          
    227          /*********************************************************************
    228           * STATUS STRINGS
    229           */
    230          #ifdef LCD_SUPPORTED

   \                                 In  segment XDATA_ROM_C, align 1
    231          const char sDeviceName[]   = "  Generic App";
   \                     sDeviceName:
   \   000000   20204765     DB "  Generic App"
   \            6E657269
   \            63204170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
    232          const char sClearLine[]    = " ";
   \                     sClearLine:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
    233          const char sSwGenericApp[]      = "SW1:GENAPP_TODO";  // GENERICAPP_TODO
   \                     sSwGenericApp:
   \   000000   5357313A     DB "SW1:GENAPP_TODO"
   \            47454E41
   \            50505F54
   \            4F444F00

   \                                 In  segment XDATA_ROM_C, align 1
    234          const char sSwBDBMode[]     = "SW2: Start BDB";
   \                     sSwBDBMode:
   \   000000   5357323A     DB "SW2: Start BDB"
   \            20537461
   \            72742042
   \            444200  

   \                                 In  segment XDATA_I, align 1, keep-with-next
    235          char sSwHelp[]             = "SW4: Help       ";  // last character is * if NWK open
   \                     sSwHelp:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for sSwHelp>`
   \   000011                REQUIRE __INIT_XDATA_I
    236          #endif
    237          
    238          /*********************************************************************
    239           * ZCL General Profile Callback table
    240           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    241          static zclGeneral_AppCallbacks_t zclGenericApp_CmdCallbacks =
   \                     zclGenericApp_CmdCallbacks:
   \   000000                DS 24
   \   000018                REQUIRE `?<Initializer for zclGenericApp_CmdCallbacks>`
   \   000018                REQUIRE __INIT_XDATA_I
    242          {
    243            zclGenericApp_BasicResetCB,             // Basic Cluster Reset command
    244            NULL,                                   // Identify Trigger Effect command
    245            NULL,                                   // On/Off cluster commands
    246            NULL,                                   // On/Off cluster enhanced command Off with Effect
    247            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    248            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    249          #ifdef ZCL_LEVEL_CTRL
    250            NULL,                                   // Level Control Move to Level command
    251            NULL,                                   // Level Control Move command
    252            NULL,                                   // Level Control Step command
    253            NULL,                                   // Level Control Stop command
    254          #endif
    255          #ifdef ZCL_GROUPS
    256            NULL,                                   // Group Response commands
    257          #endif
    258          #ifdef ZCL_SCENES
    259            NULL,                                  // Scene Store Request command
    260            NULL,                                  // Scene Recall Request command
    261            NULL,                                  // Scene Response command
    262          #endif
    263          #ifdef ZCL_ALARMS
    264            NULL,                                  // Alarm (Response) commands
    265          #endif
    266          #ifdef SE_UK_EXT
    267            NULL,                                  // Get Event Log command
    268            NULL,                                  // Publish Event Log command
    269          #endif
    270            NULL,                                  // RSSI Location command
    271            NULL                                   // RSSI Location Response command
    272          };
    273          
    274          /*********************************************************************
    275           * GENERICAPP_TODO: Add other callback structures for any additional application specific 
    276           *       Clusters being used, see available callback structures below.
    277           *
    278           *       bdbTL_AppCallbacks_t 
    279           *       zclApplianceControl_AppCallbacks_t 
    280           *       zclApplianceEventsAlerts_AppCallbacks_t 
    281           *       zclApplianceStatistics_AppCallbacks_t 
    282           *       zclElectricalMeasurement_AppCallbacks_t 
    283           *       zclGeneral_AppCallbacks_t 
    284           *       zclGp_AppCallbacks_t 
    285           *       zclHVAC_AppCallbacks_t 
    286           *       zclLighting_AppCallbacks_t 
    287           *       zclMS_AppCallbacks_t 
    288           *       zclPollControl_AppCallbacks_t 
    289           *       zclPowerProfile_AppCallbacks_t 
    290           *       zclSS_AppCallbacks_t  
    291           *
    292           */
    293          
    294          /*********************************************************************
    295           * @fn          zclGenericApp_Init
    296           *
    297           * @brief       Initialization function for the zclGeneral layer.
    298           *
    299           * @param       none
    300           *
    301           * @return      none
    302           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    303          void zclGenericApp_Init( byte task_id )
   \                     zclGenericApp_Init:
    304          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
    305          	
    306            halUARTCfg_t uartConfig;				// NEW
    307            zclGenericApp_TaskID = task_id;
   \   00000B   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00000E   F0           MOVX      @DPTR,A
    308            zclGenericApp_NwkState = DEV_INIT;	// NEW
   \   00000F   90....       MOV       DPTR,#zclGenericApp_NwkState
   \   000012   7401         MOV       A,#0x1
   \   000014   F0           MOVX      @DPTR,A
    309            zclGenericApp_TransID = 0;				// NEW
   \   000015   90....       MOV       DPTR,#zclGenericApp_TransID
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
    310            
    311            //NEW
    312            
    313            // Device hardware initialization can be added here or in main() (Zmain.c).
    314            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   00001A   85..82       MOV       DPL,?XSP + 0
   \   00001D   85..83       MOV       DPH,?XSP + 1
   \   000020   04           INC       A
   \   000021   F0           MOVX      @DPTR,A
    315            uartConfig.baudRate             = HAL_UART_BR_115200;
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   7404         MOV       A,#0x4
   \   000027   F0           MOVX      @DPTR,A
    316            uartConfig.flowControl          = FALSE;
   \   000028   7402         MOV       A,#0x2
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   E4           CLR       A
   \   00002E   F0           MOVX      @DPTR,A
    317            uartConfig.intEnable              = TRUE;              // 2x30 don't care - see uart driver.
   \   00002F   7416         MOV       A,#0x16
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   7401         MOV       A,#0x1
   \   000036   F0           MOVX      @DPTR,A
    318            // uartConfig.callBackFunc         = MT_UartProcessZAppData;
    319            
    320            MT_UartInit();
   \   000037                ; Setup parameters for call to function MT_UartInit
   \   000037   12....       LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
    321            MT_UartRegisterTaskID(0);
   \   00003A                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00003A   7900         MOV       R1,#0x0
   \   00003C   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
    322            HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
   \   00003F                ; Setup parameters for call to function HalUARTOpen
   \   00003F   AA..         MOV       R2,?XSP + 0
   \   000041   AB..         MOV       R3,?XSP + 1
   \   000043   7900         MOV       R1,#0x0
   \   000045   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    323          
    324            // If the hardware is application specific - add it here.
    325            // If the hardware is other parts of the device add it in main().
    326            
    327            // Fill out the endpoint description.
    328            zclGenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000048   90....       MOV       DPTR,#zclGenericApp_epDesc
   \   00004B   7420         MOV       A,#0x20
   \   00004D   F0           MOVX      @DPTR,A
    329            zclGenericApp_epDesc.task_id = &zclGenericApp_TaskID;
   \   00004E   90....       MOV       DPTR,#zclGenericApp_epDesc + 2
   \   000051   74..         MOV       A,#zclGenericApp_TaskID & 0xff
   \   000053   F0           MOVX      @DPTR,A
   \   000054   A3           INC       DPTR
   \   000055   74..         MOV       A,#(zclGenericApp_TaskID >> 8) & 0xff
   \   000057   F0           MOVX      @DPTR,A
    330            zclGenericApp_epDesc.simpleDesc
    331                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000058   A3           INC       DPTR
   \   000059   74..         MOV       A,#GenericApp_SimpleDesc & 0xff
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   74..         MOV       A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00005F   F0           MOVX      @DPTR,A
    332            zclGenericApp_epDesc.latencyReq = noLatencyReqs;
   \   000060   A3           INC       DPTR
   \   000061   E4           CLR       A
   \   000062   F0           MOVX      @DPTR,A
    333          
    334            // Register the endpoint description with the AF
    335            afRegister( &zclGenericApp_epDesc );
   \   000063                ; Setup parameters for call to function afRegister
   \   000063   7A..         MOV       R2,#zclGenericApp_epDesc & 0xff
   \   000065   7B..         MOV       R3,#(zclGenericApp_epDesc >> 8) & 0xff
   \   000067   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    336          
    337            // Register for all key events - This app will handle all key events
    338            RegisterForKeys( zclGenericApp_TaskID );
   \   00006A                ; Setup parameters for call to function RegisterForKeys
   \   00006A   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F9           MOV       R1,A
   \   00006F   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    339            
    340            HalUARTWrite(HAL_UART_PORT_0,"Initializing...", sizeof("Initializing..."));
   \   000072                ; Setup parameters for call to function HalUARTWrite
   \   000072   7C10         MOV       R4,#0x10
   \   000074   7D00         MOV       R5,#0x0
   \   000076   7A..         MOV       R2,#`?<Constant "Initializing...">` & 0xff
   \   000078   7B..         MOV       R3,#(`?<Constant "Initializing...">` >> 8) & 0xff
   \   00007A   12....       LCALL     ??Subroutine9_0 & 0xFFFF
    341            HalUARTPoll();
    342            
    343            // ENDNEW
    344            
    345            
    346            // This app is part of the Home Automation Profile
    347            bdb_RegisterSimpleDescriptor( &zclGenericApp_SimpleDesc );
   \                     ??CrossCallReturnLabel_11:
   \   00007D                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   00007D   7A..         MOV       R2,#zclGenericApp_SimpleDesc & 0xff
   \   00007F   7B..         MOV       R3,#(zclGenericApp_SimpleDesc >> 8) & 0xff
   \   000081   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    348          
    349            // Register the ZCL General Cluster Library callback functions
    350            zclGeneral_RegisterCmdCallbacks( GENERICAPP_ENDPOINT, &zclGenericApp_CmdCallbacks );
   \   000084                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000084   7A..         MOV       R2,#zclGenericApp_CmdCallbacks & 0xff
   \   000086   7B..         MOV       R3,#(zclGenericApp_CmdCallbacks >> 8) & 0xff
   \   000088   7920         MOV       R1,#0x20
   \   00008A   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    351            
    352            // GENERICAPP_TODO: Register other cluster command callbacks here
    353          
    354            // Register the application's attribute list
    355            zcl_registerAttrList( GENERICAPP_ENDPOINT, zclGenericApp_NumAttributes, zclGenericApp_Attrs );
   \   00008D                ; Setup parameters for call to function zcl_registerAttrList
   \   00008D   7C..         MOV       R4,#zclGenericApp_Attrs & 0xff
   \   00008F   7D..         MOV       R5,#(zclGenericApp_Attrs >> 8) & 0xff
   \   000091   90....       MOV       DPTR,#zclGenericApp_NumAttributes
   \   000094   E4           CLR       A
   \   000095   93           MOVC      A,@A+DPTR
   \   000096   FA           MOV       R2,A
   \   000097   7920         MOV       R1,#0x20
   \   000099   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    356          
    357            // Register the Application to receive the unprocessed Foundation command/response messages
    358            zcl_registerForMsg( zclGenericApp_TaskID );
   \   00009C                ; Setup parameters for call to function zcl_registerForMsg
   \   00009C   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F9           MOV       R1,A
   \   0000A1   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    359          
    360          #ifdef ZCL_DISCOVER
    361            // Register the application's command list
    362            zcl_registerCmdList( GENERICAPP_ENDPOINT, zclCmdsArraySize, zclGenericApp_Cmds );
    363          #endif
    364          
    365            // Register low voltage NV memory protection application callback
    366            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   0000A4                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   0000A4   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   0000A6   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   0000A8   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    367          
    368            // Register for all key events - This app will handle all key events
    369            RegisterForKeys( zclGenericApp_TaskID );
   \   0000AB                ; Setup parameters for call to function RegisterForKeys
   \   0000AB   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   F9           MOV       R1,A
   \   0000B0   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    370          
    371            bdb_RegisterCommissioningStatusCB( zclGenericApp_ProcessCommissioningStatus );
   \   0000B3                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   0000B3   7A..         MOV       R2,#`??zclGenericApp_ProcessCommissioningStatus::?re` & 0xff
   \   0000B5   7B..         MOV       R3,#(`??zclGenericApp_ProcessCommissioningStatus::?re` >> 8) & 0xff
   \   0000B7   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    372            bdb_RegisterIdentifyTimeChangeCB( zclGenericApp_ProcessIdentifyTimeChange );
   \   0000BA                ; Setup parameters for call to function bdb_RegisterIdentifyTimeChangeCB
   \   0000BA   7A..         MOV       R2,#`??zclGenericApp_ProcessIdentifyTimeChange::?rel` & 0xff
   \   0000BC   7B..         MOV       R3,#(`??zclGenericApp_ProcessIdentifyTimeChange::?rel` >> 8) & 0xff
   \   0000BE   12....       LCALL     `??bdb_RegisterIdentifyTimeChangeCB::?relay`; Banked call to: bdb_RegisterIdentifyTimeChangeCB
    373            bdb_RegisterBindNotificationCB( zclGenericApp_BindNotification );
   \   0000C1                ; Setup parameters for call to function bdb_RegisterBindNotificationCB
   \   0000C1   7A..         MOV       R2,#`??zclGenericApp_BindNotification::?relay` & 0xff
   \   0000C3   7B..         MOV       R3,#(`??zclGenericApp_BindNotification::?relay` >> 8) & 0xff
   \   0000C5   12....       LCALL     `??bdb_RegisterBindNotificationCB::?relay`; Banked call to: bdb_RegisterBindNotificationCB
    374          
    375          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
    376            bdb_RegisterTouchlinkTargetEnableCB( zclGenericApp_ProcessTouchlinkTargetEnable );
    377          #endif
    378          
    379          #ifdef ZCL_DIAGNOSTIC
    380            // Register the application's callback function to read/write attribute data.
    381            // This is only required when the attribute data format is unknown to ZCL.
    382            zcl_registerReadWriteCB( GENERICAPP_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    383          
    384            if ( zclDiagnostic_InitStats() == ZSuccess )
    385            {
    386              // Here the user could start the timer to save Diagnostics to NV
    387            }
    388          #endif
    389          
    390          
    391          #ifdef LCD_SUPPORTED
    392            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
   \   0000C8                ; Setup parameters for call to function HalLcdWriteString
   \   0000C8   7903         MOV       R1,#0x3
   \   0000CA   7A..         MOV       R2,#sDeviceName & 0xff
   \   0000CC   7B..         MOV       R3,#(sDeviceName >> 8) & 0xff
   \   0000CE   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    393          #endif  // LCD_SUPPORTED
    394          
    395          
    396          }
   \   0000D1   741D         MOV       A,#0x1d
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D6                REQUIRE ?Subroutine0
   \   0000D6                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   7900         MOV       R1,#0x0
   \   000002   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTPoll
   \   000005                ; Setup parameters for call to function HalUARTPoll
   \   000005                ; Setup parameters for call to function HalUARTPoll
   \   000005                ; Setup parameters for call to function HalUARTPoll
   \   000005   12....       LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
   \   000008   22           RET
    397          
    398          /*********************************************************************
    399           * @fn          zclSample_event_loop
    400           *
    401           * @brief       Event Loop Processor for zclGeneral.
    402           *
    403           * @param       none
    404           *
    405           * @return      none
    406           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    407          uint16 zclGenericApp_event_loop( uint8 task_id, uint16 events )
   \                     zclGenericApp_event_loop:
    408          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    409            if (HAL_KEY_SW_6) {
    410          	  HalUARTWrite(HAL_UART_PORT_0, "ok", sizeof("not ok"));
   \   000009   75....       MOV       ?V0,#`?<Constant "ok">` & 0xff
   \   00000C   75....       MOV       ?V1,#(`?<Constant "ok">` >> 8) & 0xff
   \   00000F                ; Setup parameters for call to function HalUARTWrite
   \   00000F   7C07         MOV       R4,#0x7
   \   000011   12....       LCALL     ?Subroutine8 & 0xFFFF
    411          	  HalUARTPoll();
    412          	  HalLedSet(HAL_LED_3, HAL_LED_MODE_TOGGLE);
   \                     ??CrossCallReturnLabel_9:
   \   000014                ; Setup parameters for call to function HalLedSet
   \   000014   7A08         MOV       R2,#0x8
   \   000016   7904         MOV       R1,#0x4
   \   000018   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    413            }
    414            
    415            HalUARTWrite(HAL_UART_PORT_0, "ok", (byte)osal_strlen("ok"));
   \   00001B                ; Setup parameters for call to function osal_strlen
   \   00001B   12....       LCALL     ?Subroutine5 & 0xFFFF
    416            HalUARTPoll();
    417            HalLedSet(HAL_LED_3, HAL_LED_MODE_OFF);
   \                     ??CrossCallReturnLabel_3:
   \   00001E                ; Setup parameters for call to function HalLedSet
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7904         MOV       R1,#0x4
   \   000022   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    418          	
    419            afIncomingMSGPacket_t *MSGpkt;
    420            afDataConfirm_t *afDataConfirm; // NEW
    421          
    422            // NEW
    423            
    424            // Data Confirmation message fields
    425            byte sentEP;
    426            ZStatus_t sentStatus;
    427            byte sentTransID;       // This should match the value sent
    428            
    429            //ENDNEW
    430            (void)task_id;  // Intentionally unreferenced parameter
    431            
    432            
    433            bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING);
   \   000025                ; Setup parameters for call to function bdb_StartCommissioning
   \   000025   790A         MOV       R1,#0xa
   \   000027   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    434            
    435          
    436            if ( events & SYS_EVENT_MSG )
   \   00002A   EF           MOV       A,R7
   \   00002B   5480         ANL       A,#0x80
   \   00002D   7038         JNZ       ??zclGenericApp_event_loop_0
    437            {
    438              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclGenericApp_TaskID )) )
    439              {
    440                switch ( MSGpkt->hdr.event )
    441                {
    442          	      // NEW
    443          	case ZDO_CB_MSG:
    444                    zclGenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    445                    break;
    446          	  
    447          	case AF_DATA_CONFIRM_CMD:
    448                    // This message is received as a confirmation of a data packet sent.
    449                    // The status is of ZStatus_t type [defined in ZComDef.h]
    450                    // The message fields are defined in AF.h
    451                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    452                    sentEP = afDataConfirm->endpoint;
    453                    sentStatus = afDataConfirm->hdr.status;
    454                    sentTransID = afDataConfirm->transID;
    455                    (void)sentEP;
    456                    (void)sentTransID;
    457          
    458                    // Action taken when confirmation is received.
    459                    if ( sentStatus != ZSuccess )
    460                    {
    461                      // The data wasn't delivered -- Do something
    462                      HalUARTWrite(0, "Data Lost\r\n", 8);
    463                    }
    464                    else {
    465                      HalUARTWrite(0, "Data Sent\r\n", 8);
    466                    }
    467                    break;
    468          
    469                  case AF_INCOMING_MSG_CMD:
    470                    zclGenericApp_MessageMSGCB( MSGpkt );
    471                    break;
    472          	  // ENDNEW
    473          
    474          	  
    475                  case ZCL_INCOMING_MSG:
    476                    // Incoming ZCL Foundation command/response messages
    477                    zclGenericApp_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    478                    break;
    479          
    480                  case KEY_CHANGE:
    481                    zclGenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    482                    break;
    483          
    484                  case ZDO_STATE_CHANGE:
    485                    zclGenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    486          
    487                    // now on the network
    488                    if ( (zclGenericApp_NwkState == DEV_ZB_COORD) ||
    489                         (zclGenericApp_NwkState == DEV_ROUTER)   ||
    490                         (zclGenericApp_NwkState == DEV_END_DEVICE) )
    491                    {
    492                      giGenAppScreenMode = GENERIC_MAINMODE;
    493                      zclGenericApp_LcdDisplayUpdate();
    494                    }
    495                    break;
    496          
    497                  default:
    498                    break;
    499                }
    500          
    501                // Release the memory
    502                osal_msg_deallocate( (uint8 *)MSGpkt );
    503                
    504                // Next
    505                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclGenericApp_TaskID );		// NEW
    506              }
    507          
    508              // return unprocessed events
    509              return (events ^ SYS_EVENT_MSG);
    510            }
    511            
    512            // NEW
    513            
    514            // Send a message out - This event is generated by a timer
    515            //  (setup in GenericApp_Init()).
    516            if ( events & GENERICAPP_SEND_MSG_EVT )
   \   00002F   EE           MOV       A,R6
   \   000030   A2E0         MOV       C,0xE0 /* A   */.0
   \   000032   4003         JC        $+5
   \   000034   02....       LJMP      ??zclGenericApp_event_loop_1 & 0xFFFF
    517            {
    518              // Send "the" message
    519              //GenericApp_SendTheMessage();
    520              // return unprocessed events
    521              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \   000037   6401         XRL       A,#0x1
   \   000039   02....       LJMP      ??zclGenericApp_event_loop_2 & 0xFFFF
    522            }
   \                     ??zclGenericApp_event_loop_3:
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   90....       MOV       DPTR,#zclGenericApp_NwkState
   \   000041   F0           MOVX      @DPTR,A
   \   000042   6409         XRL       A,#0x9
   \   000044   600A         JZ        ??zclGenericApp_event_loop_4
   \   000046   E0           MOVX      A,@DPTR
   \   000047   6407         XRL       A,#0x7
   \   000049   6005         JZ        ??zclGenericApp_event_loop_4
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   6406         XRL       A,#0x6
   \   00004E   7008         JNZ       ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_4:
   \   000050   90....       MOV       DPTR,#giGenAppScreenMode
   \   000053   E4           CLR       A
   \   000054   F0           MOVX      @DPTR,A
   \   000055                ; Setup parameters for call to function zclGenericApp_LcdDisplayUpdate
   \   000055   12....       LCALL     `??zclGenericApp_LcdDisplayUpdate::?relay`; Banked call to: zclGenericApp_LcdDisplayUpdate
   \                     ??zclGenericApp_event_loop_5:
   \   000058                ; Setup parameters for call to function osal_msg_deallocate
   \   000058   AA..         MOV       R2,?V0
   \   00005A   AB..         MOV       R3,?V1
   \   00005C   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   00005F                ; Setup parameters for call to function osal_msg_receive
   \   00005F   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \                     ??zclGenericApp_event_loop_0:
   \   000067                ; Setup parameters for call to function osal_msg_receive
   \   000067   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   F9           MOV       R1,A
   \   00006C   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00006F   8A..         MOV       ?V0,R2
   \   000071   8B..         MOV       ?V1,R3
   \   000073   EA           MOV       A,R2
   \   000074   4B           ORL       A,R3
   \   000075   7003         JNZ       $+5
   \   000077   02....       LJMP      ??zclGenericApp_event_loop_6 & 0xFFFF
   \   00007A   8A82         MOV       DPL,R2
   \   00007C   8B83         MOV       DPH,R3
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   24E6         ADD       A,#-0x1a
   \   000081   6034         JZ        ??zclGenericApp_event_loop_7
   \   000083   24E6         ADD       A,#-0x1a
   \   000085   6035         JZ        ??zclGenericApp_event_loop_8
   \   000087   2474         ADD       A,#0x74
   \   000089   607C         JZ        ??zclGenericApp_event_loop_9
   \   00008B   24EF         ADD       A,#-0x11
   \   00008D   60AD         JZ        ??zclGenericApp_event_loop_3
   \   00008F   24FE         ADD       A,#-0x2
   \   000091   6006         JZ        ??zclGenericApp_event_loop_10
   \   000093   24D6         ADD       A,#-0x2a
   \   000095   6007         JZ        ??zclGenericApp_event_loop_11
   \   000097   80BF         SJMP      ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_10:
   \   000099                ; Setup parameters for call to function zclGenericApp_ProcessZDOMsgs
   \   000099   12....       LCALL     `??zclGenericApp_ProcessZDOMsgs::?relay`; Banked call to: zclGenericApp_ProcessZDOMsgs
   \   00009C   80BA         SJMP      ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_11:
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   7C08         MOV       R4,#0x8
   \   0000A2   7D00         MOV       R5,#0x0
   \   0000A4   600B         JZ        ??zclGenericApp_event_loop_12
   \   0000A6                ; Setup parameters for call to function HalUARTWrite
   \   0000A6   7A..         MOV       R2,#`?<Constant "Data Lost\\r\\n">` & 0xff
   \   0000A8   7B..         MOV       R3,#(`?<Constant "Data Lost\\r\\n">` >> 8) & 0xff
   \                     ??zclGenericApp_event_loop_13:
   \   0000AA   7900         MOV       R1,#0x0
   \   0000AC   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   0000AF   80A7         SJMP      ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_12:
   \   0000B1                ; Setup parameters for call to function HalUARTWrite
   \   0000B1   7A..         MOV       R2,#`?<Constant "Data Sent\\r\\n">` & 0xff
   \   0000B3   7B..         MOV       R3,#(`?<Constant "Data Sent\\r\\n">` >> 8) & 0xff
   \   0000B5   80F3         SJMP      ??zclGenericApp_event_loop_13
   \                     ??zclGenericApp_event_loop_7:
   \   0000B7                ; Setup parameters for call to function zclGenericApp_MessageMSGCB
   \   0000B7   12....       LCALL     `??zclGenericApp_MessageMSGCB::?relay`; Banked call to: zclGenericApp_MessageMSGCB
   \   0000BA   809C         SJMP      ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_8:
   \   0000BC   EA           MOV       A,R2
   \   0000BD   2417         ADD       A,#0x17
   \   0000BF   F8           MOV       R0,A
   \   0000C0   E4           CLR       A
   \   0000C1   35..         ADDC      A,?V1
   \   0000C3   F9           MOV       R1,A
   \   0000C4   E8           MOV       A,R0
   \   0000C5   FA           MOV       R2,A
   \   0000C6   E9           MOV       A,R1
   \   0000C7   FB           MOV       R3,A
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   14           DEC       A
   \   0000D1   6011         JZ        ??zclGenericApp_event_loop_14
   \   0000D3   24FD         ADD       A,#-0x3
   \   0000D5   701A         JNZ       ??zclGenericApp_event_loop_15
   \   0000D7   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F9           MOV       R1,A
   \   0000DC   E8           MOV       A,R0
   \   0000DD   C3           CLR       C
   \   0000DE   99           SUBB      A,R1
   \   0000DF   5010         JNC       ??zclGenericApp_event_loop_15
   \   0000E1   08           INC       R0
   \   0000E2   80F6         SJMP      ??CrossCallReturnLabel_5
   \                     ??zclGenericApp_event_loop_14:
   \   0000E4   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000E7   8001         SJMP      ??zclGenericApp_event_loop_16
   \                     ??zclGenericApp_event_loop_17:
   \   0000E9   08           INC       R0
   \                     ??zclGenericApp_event_loop_16:
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   F9           MOV       R1,A
   \   0000EC   E8           MOV       A,R0
   \   0000ED   C3           CLR       C
   \   0000EE   99           SUBB      A,R1
   \   0000EF   40F8         JC        ??zclGenericApp_event_loop_17
   \                     ??zclGenericApp_event_loop_15:
   \   0000F1   8A82         MOV       DPL,R2
   \   0000F3   8B83         MOV       DPH,R3
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   FA           MOV       R2,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   FB           MOV       R3,A
   \   0000FA   EA           MOV       A,R2
   \   0000FB   4B           ORL       A,R3
   \   0000FC   7003         JNZ       $+5
   \   0000FE   02....       LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
   \   000101                ; Setup parameters for call to function osal_mem_free
   \   000101   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000104   02....       LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
   \                     ??zclGenericApp_event_loop_9:
   \   000107                ; Setup parameters for call to function zclGenericApp_HandleKeys
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   FA           MOV       R2,A
   \   00010C   85..82       MOV       DPL,?V0
   \   00010F   8B83         MOV       DPH,R3
   \   000111   A3           INC       DPTR
   \   000112   A3           INC       DPTR
   \   000113   E0           MOVX      A,@DPTR
   \   000114   F9           MOV       R1,A
   \   000115   12....       LCALL     `??zclGenericApp_HandleKeys::?relay`; Banked call to: zclGenericApp_HandleKeys
   \   000118   02....       LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
   \                     ??zclGenericApp_event_loop_6:
   \   00011B   EE           MOV       A,R6
   \   00011C   FA           MOV       R2,A
   \   00011D   EF           MOV       A,R7
   \   00011E   6480         XRL       A,#0x80
   \   000120   8045         SJMP      ??zclGenericApp_event_loop_18
    523            
    524            if (events & GENERICAPP_UART_RX_EVT) {
   \                     ??zclGenericApp_event_loop_1:
   \   000122   5402         ANL       A,#0x2
   \   000124   6010         JZ        ??zclGenericApp_event_loop_19
    525              HalUARTWrite(0, "RX_EVT", 7);
   \   000126                ; Setup parameters for call to function HalUARTWrite
   \   000126   7C07         MOV       R4,#0x7
   \   000128   7D00         MOV       R5,#0x0
   \   00012A   7A..         MOV       R2,#`?<Constant "RX_EVT">` & 0xff
   \   00012C   7B..         MOV       R3,#(`?<Constant "RX_EVT">` >> 8) & 0xff
   \   00012E   7900         MOV       R1,#0x0
   \   000130   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    526              zclGenericApp_SerialMSGCB();
   \   000133                ; Setup parameters for call to function zclGenericApp_SerialMSGCB
   \   000133   12....       LCALL     `??zclGenericApp_SerialMSGCB::?relay`; Banked call to: zclGenericApp_SerialMSGCB
    527            }
    528            
    529            // ENDNEW
    530            
    531          
    532          //  if ( events & GENERICAPP_MAIN_SCREEN_EVT )
    533          //  {
    534          //    giGenAppScreenMode = GENERIC_MAINMODE;
    535          //    zclGenericApp_LcdDisplayUpdate();
    536          //    return ( events ^ GENERICAPP_MAIN_SCREEN_EVT );
    537          //  }
    538            
    539          #if ZG_BUILD_ENDDEVICE_TYPE    
    540            if ( events & GENERICAPP_END_DEVICE_REJOIN_EVT )
    541            {
    542              bdb_ZedAttemptRecoverNwk();
    543              return ( events ^ GENERICAPP_END_DEVICE_REJOIN_EVT );
    544            }
    545          #endif
    546          
    547            /* GENERICAPP_TODO: handle app events here */
    548            
    549            
    550            if ( events & GENERICAPP_EVT_1 )
   \                     ??zclGenericApp_event_loop_19:
   \   000136   EE           MOV       A,R6
   \   000137   5408         ANL       A,#0x8
   \   000139   602F         JZ        ??zclGenericApp_event_loop_20
    551            {
    552              // toggle LED 2 state, start another timer for 500ms
    553          	HalUARTWrite(HAL_UART_PORT_0, "toggle", (byte)osal_strlen("toggle"));
   \   00013B   75....       MOV       ?V0,#`?<Constant "toggle">` & 0xff
   \   00013E   75....       MOV       ?V1,#(`?<Constant "toggle">` >> 8) & 0xff
   \   000141                ; Setup parameters for call to function osal_strlen
   \   000141   12....       LCALL     ?Subroutine5 & 0xFFFF
    554          	HalUARTPoll();
    555              HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
   \                     ??CrossCallReturnLabel_4:
   \   000144                ; Setup parameters for call to function HalLedSet
   \   000144   7A08         MOV       R2,#0x8
   \   000146   7902         MOV       R1,#0x2
   \   000148   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    556              osal_start_timerEx( zclGenericApp_TaskID, GENERICAPP_EVT_1, 500 );
   \   00014B                ; Setup parameters for call to function osal_start_timerEx
   \   00014B   90....       MOV       DPTR,#__Constant_1f4
   \   00014E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000151   7A08         MOV       R2,#0x8
   \   000153   7B00         MOV       R3,#0x0
   \   000155   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   000158   E0           MOVX      A,@DPTR
   \   000159   F9           MOV       R1,A
   \   00015A   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00015D   7404         MOV       A,#0x4
   \   00015F   12....       LCALL     ?DEALLOC_XSTACK8
    557              
    558              return ( events ^ GENERICAPP_EVT_1 );
   \   000162   EE           MOV       A,R6
   \   000163   6408         XRL       A,#0x8
   \                     ??zclGenericApp_event_loop_2:
   \   000165   FA           MOV       R2,A
   \   000166   EF           MOV       A,R7
   \                     ??zclGenericApp_event_loop_18:
   \   000167   FB           MOV       R3,A
   \   000168   8004         SJMP      ??zclGenericApp_event_loop_21
    559            }
    560            
    561            /*
    562            if ( events & GENERICAPP_EVT_2 )
    563            {
    564              
    565              return ( events ^ GENERICAPP_EVT_2 );
    566            }
    567            
    568            if ( events & GENERICAPP_EVT_3 )
    569            {
    570              
    571              return ( events ^ GENERICAPP_EVT_3 );
    572            }
    573            */
    574            
    575            // Discard unknown events
    576            return 0;
   \                     ??zclGenericApp_event_loop_20:
   \   00016A   7A00         MOV       R2,#0x0
   \   00016C   7B00         MOV       R3,#0x0
   \                     ??zclGenericApp_event_loop_21:
   \   00016E                REQUIRE ?Subroutine1
   \   00016E                ; // Fall through to label ?Subroutine1
    577          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   7800         MOV       R0,#0x0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000007   8A..         MOV       ?V2,R2
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009   AC..         MOV       R4,?V2
   \   00000B   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   AA..         MOV       R2,?V0
   \   000004   AB..         MOV       R3,?V1
   \   000006                REQUIRE ??Subroutine9_0
   \   000006                ; // Fall through to label ??Subroutine9_0
    578          
    579          
    580          
    581          
    582          
    583          
    584          // NEW
    585          
    586          /*********************************************************************
    587           * Event Generation Functions
    588           */
    589           
    590          /*********************************************************************
    591           * @fn      zclGenericApp_ProcessZDOMsgs()
    592           * @brief   Process response messages
    593           * @param   none
    594           * @return  none
    595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          void zclGenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     zclGenericApp_ProcessZDOMsgs:
    597          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    598            switch ( inMsg->clusterID )
   \   000005   EA           MOV       A,R2
   \   000006   240C         ADD       A,#0xc
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6406         XRL       A,#0x6
   \   000011   7004         JNZ       ??zclGenericApp_ProcessZDOMsgs_0
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   6480         XRL       A,#0x80
   \                     ??zclGenericApp_ProcessZDOMsgs_0:
   \   000017   7047         JNZ       ??zclGenericApp_ProcessZDOMsgs_1
    599            {
    600              case Match_Desc_rsp:
    601                {
    602                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \   000019                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000019   12....       LCALL     `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   00001C   8A..         MOV       ?V0,R2
   \   00001E   8B..         MOV       ?V1,R3
   \   000020   AF..         MOV       R7,?V1
    603                  if ( pRsp )
   \   000022   EA           MOV       A,R2
   \   000023   4F           ORL       A,R7
   \   000024   603A         JZ        ??zclGenericApp_ProcessZDOMsgs_1
    604                  {
    605                    if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   702C         JNZ       ??zclGenericApp_ProcessZDOMsgs_2
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6026         JZ        ??zclGenericApp_ProcessZDOMsgs_2
    606                    {
    607                      zclGenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000033   90....       MOV       DPTR,#zclGenericApp_DstAddr + 8
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?Subroutine4 & 0xFFFF
    608                      zclGenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \                     ??CrossCallReturnLabel_0:
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F8           MOV       R0,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   90....       MOV       DPTR,#zclGenericApp_DstAddr
   \   000043   E8           MOV       A,R0
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   E9           MOV       A,R1
   \   000047   12....       LCALL     ?Subroutine4 & 0xFFFF
    609                      // Take the first endpoint, Can be changed to search through endpoints
    610                      zclGenericApp_DstAddr.endPoint = pRsp->epList[0];
   \                     ??CrossCallReturnLabel_1:
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   90....       MOV       DPTR,#zclGenericApp_DstAddr + 9
   \   000051   F0           MOVX      @DPTR,A
    611                      // Light LED
    612                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000052                ; Setup parameters for call to function HalLedSet
   \   000052   7A01         MOV       R2,#0x1
   \   000054   7908         MOV       R1,#0x8
   \   000056   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    613                    }
    614                    osal_mem_free( pRsp );
   \                     ??zclGenericApp_ProcessZDOMsgs_2:
   \   000059                ; Setup parameters for call to function osal_mem_free
   \   000059   AA..         MOV       R2,?V0
   \   00005B   EF           MOV       A,R7
   \   00005C   FB           MOV       R3,A
   \   00005D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    615                  }
    616                }
    617                break;
    618            }
    619          }
   \                     ??zclGenericApp_ProcessZDOMsgs_1:
   \   000060   7F02         MOV       R7,#0x2
   \   000062   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET
    620          
    621          
    622          
    623          
    624          
    625          /*********************************************************************
    626           * LOCAL FUNCTIONS
    627           */
    628          
    629          /*********************************************************************
    630           * @fn      zclGenericApp_MessageMSGCB
    631           * @brief   Data message processor callback.  This function processes
    632           *          any incoming data - probably from other devices.  So, based
    633           *          on cluster ID, perform the intended action.
    634           * @param   none
    635           * @return  none
    636           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    637          void zclGenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     zclGenericApp_MessageMSGCB:
    638          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    639            unsigned char temp_extAddr[8];
    640            unsigned char i = 0;
   \   00000E   75..00       MOV       ?V0,#0x0
    641            unsigned char existed = 0;
    642            unsigned char buffer[8] = "";
   \   000011   90....       MOV       DPTR,#`?<Constant "">`
   \   000014   AC..         MOV       R4,?XSP + 0
   \   000016   AD..         MOV       R5,?XSP + 1
   \   000018   7408         MOV       A,#0x8
   \   00001A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    643            switch ( pkt->clusterId )
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6401         XRL       A,#0x1
   \   000028   7002         JNZ       ??zclGenericApp_MessageMSGCB_0
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \                     ??zclGenericApp_MessageMSGCB_0:
   \   00002C   6003         JZ        $+5
   \   00002E   02....       LJMP      ??zclGenericApp_MessageMSGCB_1 & 0xFFFF
    644            {
    645              case GENERICAPP_CLUSTERID:
    646                {// "the" message
    647                  (void)APSME_LookupExtAddr(pkt->srcAddr.addr.shortAddr, temp_extAddr);
   \   000031                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000031   7408         MOV       A,#0x8
   \   000033   12....       LCALL     ?XSTACK_DISP102_8
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   FA           MOV       R2,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   FB           MOV       R3,A
   \   000045   12....       LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
    648                  for (i = 0; i < device_count+1; i++) {  // to see whether the device ever connected
   \   000048   7408         MOV       A,#0x8
   \   00004A   12....       LCALL     ?XSTACK_DISP100_8
   \   00004D   88..         MOV       ?V4,R0
   \   00004F   89..         MOV       ?V5,R1
   \   000051   75..00       MOV       ?V6,#0x0
   \   000054   8002         SJMP      ??zclGenericApp_MessageMSGCB_2
   \                     ??zclGenericApp_MessageMSGCB_3:
   \   000056   05..         INC       ?V0
   \                     ??zclGenericApp_MessageMSGCB_2:
   \   000058   AA..         MOV       R2,?V0
   \   00005A   90....       MOV       DPTR,#device_count
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   7900         MOV       R1,#0x0
   \   000060   2401         ADD       A,#0x1
   \   000062   F8           MOV       R0,A
   \   000063   5001         JNC       ??zclGenericApp_MessageMSGCB_4
   \   000065   09           INC       R1
   \                     ??zclGenericApp_MessageMSGCB_4:
   \   000066   C3           CLR       C
   \   000067   EA           MOV       A,R2
   \   000068   98           SUBB      A,R0
   \   000069   E4           CLR       A
   \   00006A   99           SUBB      A,R1
   \   00006B   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00006D   65D0         XRL       A,PSW
   \   00006F   33           RLC       A
   \   000070   5038         JNC       ??zclGenericApp_MessageMSGCB_5
    649                    if (osal_memcmp(EndDeviceInfos[i].extAddr, temp_extAddr, 8)) { //if existed, break;
   \   000072                ; Setup parameters for call to function osal_memcmp
   \   000072   78..         MOV       R0,#?V4
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000077   7C08         MOV       R4,#0x8
   \   000079   7D00         MOV       R5,#0x0
   \   00007B   EA           MOV       A,R2
   \   00007C   75F00A       MOV       B,#0xa
   \   00007F   A4           MUL       AB
   \   000080   FA           MOV       R2,A
   \   000081   ABF0         MOV       R3,B
   \   000083   74..         MOV       A,#(EndDeviceInfos + 1) & 0xff
   \   000085   2A           ADD       A,R2
   \   000086   F5..         MOV       ?V2,A
   \   000088   74..         MOV       A,#((EndDeviceInfos + 1) >> 8) & 0xff
   \   00008A   3B           ADDC      A,R3
   \   00008B   A9..         MOV       R1,?V2
   \   00008D   FA           MOV       R2,A
   \   00008E   7B00         MOV       R3,#0x0
   \   000090   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000093   7403         MOV       A,#0x3
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   E9           MOV       A,R1
   \   000099   60BB         JZ        ??zclGenericApp_MessageMSGCB_3
    650                      existed = 1;
    651                      HalUARTWrite(0, "Device Found Form Previous Log -> Existed!\r\n", 36);
   \   00009B                ; Setup parameters for call to function HalUARTWrite
   \   00009B   7C24         MOV       R4,#0x24
   \   00009D   7D00         MOV       R5,#0x0
   \   00009F   7A..         MOV       R2,#`?<Constant "Device Found Form Pre...">` & 0xff
   \   0000A1   7B..         MOV       R3,#(`?<Constant "Device Found Form Pre...">` >> 8) & 0xff
   \   0000A3   7900         MOV       R1,#0x0
   \   0000A5   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    652                      break;
   \   0000A8   8056         SJMP      ??zclGenericApp_MessageMSGCB_6
    653                    }
    654                  }
    655                  if ( !existed ) {  //not connected before, register
    656                    HalUARTWrite(0, "New Device!\r\n",15);
   \                     ??zclGenericApp_MessageMSGCB_5:
   \   0000AA                ; Setup parameters for call to function HalUARTWrite
   \   0000AA   7C0F         MOV       R4,#0xf
   \   0000AC   7D00         MOV       R5,#0x0
   \   0000AE   7A..         MOV       R2,#`?<Constant "New Device!\\r\\n">` & 0xff
   \   0000B0   7B..         MOV       R3,#(`?<Constant "New Device!\\r\\n">` >> 8) & 0xff
   \   0000B2   7900         MOV       R1,#0x0
   \   0000B4   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    657                    osal_memcpy(EndDeviceInfos[device_count].extAddr, temp_extAddr, 8);
   \   0000B7                ; Setup parameters for call to function osal_memcpy
   \   0000B7   78..         MOV       R0,#?V4
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BC   7C08         MOV       R4,#0x8
   \   0000BE   7D00         MOV       R5,#0x0
   \   0000C0   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000C3   74..         MOV       A,#(EndDeviceInfos + 1) & 0xff
   \   0000C5   28           ADD       A,R0
   \   0000C6   FA           MOV       R2,A
   \   0000C7   74..         MOV       A,#((EndDeviceInfos + 1) >> 8) & 0xff
   \   0000C9   39           ADDC      A,R1
   \   0000CA   FB           MOV       R3,A
   \   0000CB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CE   7403         MOV       A,#0x3
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
    658                    EndDeviceInfos[device_count].endPoint = pkt->srcAddr.endPoint;
   \   0000D3   EE           MOV       A,R6
   \   0000D4   240F         ADD       A,#0xf
   \   0000D6   F582         MOV       DPL,A
   \   0000D8   E4           CLR       A
   \   0000D9   3F           ADDC      A,R7
   \   0000DA   F583         MOV       DPH,A
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   FA           MOV       R2,A
   \   0000DE   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000E1   74..         MOV       A,#EndDeviceInfos & 0xff
   \   0000E3   28           ADD       A,R0
   \   0000E4   F582         MOV       DPL,A
   \   0000E6   74..         MOV       A,#(EndDeviceInfos >> 8) & 0xff
   \   0000E8   39           ADDC      A,R1
   \   0000E9   F583         MOV       DPH,A
   \   0000EB   EA           MOV       A,R2
   \   0000EC   F0           MOVX      @DPTR,A
    659                    EndDeviceInfos[device_count].compressed_addr = GENERICAPP_ENDPOINT | EndDeviceInfos[device_count].endPoint;
   \   0000ED   7420         MOV       A,#0x20
   \   0000EF   4A           ORL       A,R2
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   A3           INC       DPTR
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   F0           MOVX      @DPTR,A
    660                    device_count++;	// device added
   \   0000FA   90....       MOV       DPTR,#device_count
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   04           INC       A
   \   0000FF   F0           MOVX      @DPTR,A
    661                  }
    662                  if (device_count == 16) { device_count = 0;}  //in case to overflow
   \                     ??zclGenericApp_MessageMSGCB_6:
   \   000100   90....       MOV       DPTR,#device_count
   \   000103   E0           MOVX      A,@DPTR
   \   000104   6410         XRL       A,#0x10
   \   000106   7002         JNZ       ??zclGenericApp_MessageMSGCB_7
   \   000108   E4           CLR       A
   \   000109   F0           MOVX      @DPTR,A
    663                  //TO DO: process data received, send it to slave machine
    664                  osal_memcpy(&buffer[0], pkt->cmd.Data, 8);
   \                     ??zclGenericApp_MessageMSGCB_7:
   \   00010A                ; Setup parameters for call to function osal_memcpy
   \   00010A   EE           MOV       A,R6
   \   00010B   2422         ADD       A,#0x22
   \   00010D   F582         MOV       DPL,A
   \   00010F   E4           CLR       A
   \   000110   3F           ADDC      A,R7
   \   000111   F583         MOV       DPH,A
   \   000113   E0           MOVX      A,@DPTR
   \   000114   F5..         MOV       ?V0,A
   \   000116   A3           INC       DPTR
   \   000117   E0           MOVX      A,@DPTR
   \   000118   F5..         MOV       ?V1,A
   \   00011A   75..00       MOV       ?V2,#0x0
   \   00011D   78..         MOV       R0,#?V0
   \   00011F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000122   7C08         MOV       R4,#0x8
   \   000124   7D00         MOV       R5,#0x0
   \   000126   7403         MOV       A,#0x3
   \   000128   12....       LCALL     ?XSTACK_DISP101_8
   \   00012B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012E   7403         MOV       A,#0x3
   \   000130   12....       LCALL     ?DEALLOC_XSTACK8
    665                  str_reverse((char*)&buffer[3], 1);
   \   000133                ; Setup parameters for call to function str_reverse
   \   000133   7C01         MOV       R4,#0x1
   \   000135   7D00         MOV       R5,#0x0
   \   000137   7403         MOV       A,#0x3
   \   000139   12....       LCALL     ?XSTACK_DISP0_8
   \   00013C   AA82         MOV       R2,DPL
   \   00013E   AB83         MOV       R3,DPH
   \   000140   12....       LCALL     `??str_reverse::?relay`; Banked call to: str_reverse
    666                  HalUARTWrite(0, &buffer[0], 8);
   \   000143                ; Setup parameters for call to function HalUARTWrite
   \   000143   7C08         MOV       R4,#0x8
   \   000145   7D00         MOV       R5,#0x0
   \   000147   AA..         MOV       R2,?XSP + 0
   \   000149   AB..         MOV       R3,?XSP + 1
   \   00014B   7900         MOV       R1,#0x0
   \   00014D   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    667                  break;
    668                }
    669            }
    670          }
   \                     ??zclGenericApp_MessageMSGCB_1:
   \   000150   7410         MOV       A,#0x10
   \   000152                REQUIRE ?Subroutine2
   \   000152                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV       DPTR,#device_count
   \   000003   E0           MOVX      A,@DPTR
   \   000004   75F00A       MOV       B,#0xa
   \   000007   A4           MUL       AB
   \   000008   F8           MOV       R0,A
   \   000009   A9F0         MOV       R1,B
   \   00000B   22           RET
    671          
    672          
    673          
    674          
    675          
    676          /*********************************************************************
    677           * @fn     zclGenericApp_SendTheMessage
    678           * @brief   Send "the" message.
    679           * @param   none
    680           * @return  none
    681           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    682          void zclGenericApp_SendTheMessage( unsigned char dest_endID, unsigned char cmd, unsigned int data)
   \                     zclGenericApp_SendTheMessage:
    683          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V1,R2
   \   00000C   EC           MOV       A,R4
   \   00000D   FA           MOV       R2,A
   \   00000E   ED           MOV       A,R5
   \   00000F   FB           MOV       R3,A
    684            unsigned char theMessageData[6] = "";
   \   000010   90....       MOV       DPTR,#`?<Constant "">_1`
   \   000013   AC..         MOV       R4,?XSP + 0
   \   000015   AD..         MOV       R5,?XSP + 1
   \   000017   7406         MOV       A,#0x6
   \   000019   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    685            theMessageData[0] = 0xCC;  //beginning check byte
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   74CC         MOV       A,#-0x34
   \   000024   F0           MOVX      @DPTR,A
    686            theMessageData[1] = EndDeviceInfos[dest_endID].compressed_addr;
   \   000025   E9           MOV       A,R1
   \   000026   75F00A       MOV       B,#0xa
   \   000029   A4           MUL       AB
   \   00002A   F8           MOV       R0,A
   \   00002B   A9F0         MOV       R1,B
   \   00002D   74..         MOV       A,#EndDeviceInfos & 0xff
   \   00002F   28           ADD       A,R0
   \   000030   F8           MOV       R0,A
   \   000031   74..         MOV       A,#(EndDeviceInfos >> 8) & 0xff
   \   000033   39           ADDC      A,R1
   \   000034   F9           MOV       R1,A
   \   000035   E8           MOV       A,R0
   \   000036   FE           MOV       R6,A
   \   000037   E9           MOV       A,R1
   \   000038   FF           MOV       R7,A
   \   000039   8882         MOV       DPL,R0
   \   00003B   F583         MOV       DPH,A
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   C0E0         PUSH      A
   \   000049   7401         MOV       A,#0x1
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   D0E0         POP       A
   \   000050   F0           MOVX      @DPTR,A
    687            theMessageData[2] = cmd;
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   E5..         MOV       A,?V1
   \   000058   F0           MOVX      @DPTR,A
    688            osal_buffer_uint16(&theMessageData[3],  data);
   \   000059                ; Setup parameters for call to function osal_buffer_uint16
   \   000059   EA           MOV       A,R2
   \   00005A   FC           MOV       R4,A
   \   00005B   EB           MOV       A,R3
   \   00005C   FD           MOV       R5,A
   \   00005D   7403         MOV       A,#0x3
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   AA82         MOV       R2,DPL
   \   000064   AB83         MOV       R3,DPH
   \   000066   12....       LCALL     `??osal_buffer_uint16::?relay`; Banked call to: osal_buffer_uint16
    689            theMessageData[5] = 0x33;  //end check byte
   \   000069   7405         MOV       A,#0x5
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   7433         MOV       A,#0x33
   \   000070   F0           MOVX      @DPTR,A
    690            //set the destination below
    691            zclGenericApp_DstAddr.addrMode = (afAddrMode_t)Addr64Bit;
   \   000071   90....       MOV       DPTR,#zclGenericApp_DstAddr + 8
   \   000074   7403         MOV       A,#0x3
   \   000076   F0           MOVX      @DPTR,A
    692            zclGenericApp_DstAddr.endPoint = EndDeviceInfos[dest_endID].endPoint;
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   90....       MOV       DPTR,#zclGenericApp_DstAddr + 9
   \   00007F   F0           MOVX      @DPTR,A
    693            osal_memcpy(zclGenericApp_DstAddr.addr.extAddr, EndDeviceInfos[dest_endID].extAddr, 8);
   \   000080                ; Setup parameters for call to function osal_memcpy
   \   000080   8E82         MOV       DPL,R6
   \   000082   8F83         MOV       DPH,R7
   \   000084   A3           INC       DPTR
   \   000085   A982         MOV       R1,DPL
   \   000087   AA83         MOV       R2,DPH
   \   000089   89..         MOV       ?V4,R1
   \   00008B   8A..         MOV       ?V5,R2
   \   00008D   75..00       MOV       ?V6,#0x0
   \   000090   78..         MOV       R0,#?V4
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000095   7C08         MOV       R4,#0x8
   \   000097   7D00         MOV       R5,#0x0
   \   000099   7A..         MOV       R2,#zclGenericApp_DstAddr & 0xff
   \   00009B   7B..         MOV       R3,#(zclGenericApp_DstAddr >> 8) & 0xff
   \   00009D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A0   7403         MOV       A,#0x3
   \   0000A2   12....       LCALL     ?DEALLOC_XSTACK8
    694            
    695            if ( AF_DataRequest( &zclGenericApp_DstAddr, &zclGenericApp_epDesc,
    696                                 GENERICAPP_CLUSTERID,
    697                                 7,//send one more char or the last char might be missing
    698                                 theMessageData,
    699                                 &zclGenericApp_TransID,
    700                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )                     
   \   0000A5                ; Setup parameters for call to function AF_DataRequest
   \   0000A5   75..1E       MOV       ?V2,#0x1e
   \   0000A8   78..         MOV       R0,#?V2
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AD   75....       MOV       ?V2,#zclGenericApp_TransID & 0xff
   \   0000B0   75....       MOV       ?V3,#(zclGenericApp_TransID >> 8) & 0xff
   \   0000B3   78..         MOV       R0,#?V2
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B8   7403         MOV       A,#0x3
   \   0000BA   12....       LCALL     ?XSTACK_DISP100_8
   \   0000BD   88..         MOV       ?V2,R0
   \   0000BF   89..         MOV       ?V3,R1
   \   0000C1   78..         MOV       R0,#?V2
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   75..07       MOV       ?V2,#0x7
   \   0000C9   75..00       MOV       ?V3,#0x0
   \   0000CC   78..         MOV       R0,#?V2
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D1   75..01       MOV       ?V2,#0x1
   \   0000D4   78..         MOV       R0,#?V2
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D9   7900         MOV       R1,#0x0
   \   0000DB   7C..         MOV       R4,#zclGenericApp_epDesc & 0xff
   \   0000DD   7D..         MOV       R5,#(zclGenericApp_epDesc >> 8) & 0xff
   \   0000DF   7A..         MOV       R2,#zclGenericApp_DstAddr & 0xff
   \   0000E1   7B..         MOV       R3,#(zclGenericApp_DstAddr >> 8) & 0xff
   \   0000E3   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000E6   7409         MOV       A,#0x9
   \   0000E8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV       A,R1
   \   0000EC   700A         JNZ       ??zclGenericApp_SendTheMessage_0
    701            {
    702              // Successfully requested to be sent.
    703              HalUARTWrite(0, "Successfully Sent\r\n", 21);
   \   0000EE                ; Setup parameters for call to function HalUARTWrite
   \   0000EE   7C15         MOV       R4,#0x15
   \   0000F0   7D00         MOV       R5,#0x0
   \   0000F2   7A..         MOV       R2,#`?<Constant "Successfully Sent\\r\\n">` & 0xff
   \   0000F4   7B..         MOV       R3,#(`?<Constant "Successfully Sent\\r\\n">` >> 8) & 0xff
   \   0000F6   8008         SJMP      ??zclGenericApp_SendTheMessage_1
    704            }
    705            else
    706            {
    707              // Error occurred in request to send.
    708              HalUARTWrite(0, "Couldn't Sent\r\n", 17);
   \                     ??zclGenericApp_SendTheMessage_0:
   \   0000F8                ; Setup parameters for call to function HalUARTWrite
   \   0000F8   7C11         MOV       R4,#0x11
   \   0000FA   7D00         MOV       R5,#0x0
   \   0000FC   7A..         MOV       R2,#`?<Constant "Couldn\\'t Sent\\r\\n">` & 0xff
   \   0000FE   7B..         MOV       R3,#(`?<Constant "Couldn\\'t Sent\\r\\n">` >> 8) & 0xff
   \                     ??zclGenericApp_SendTheMessage_1:
   \   000100   7900         MOV       R1,#0x0
   \   000102   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    709            }
    710          }
   \   000105   7406         MOV       A,#0x6
   \   000107   02....       LJMP      ?Subroutine2 & 0xFFFF
    711          
    712          
    713          
    714          
    715          
    716          //@fn: zclGenericApp_SerialMSGCB
    717          //@breif: process data received by UART, used to execute cmds from slave machine
    718          //@param: none
    719          //@return: none

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    720          void zclGenericApp_SerialMSGCB(void)
   \                     zclGenericApp_SerialMSGCB:
    721          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    722            unsigned char dest_endID = 0; //this number is the index of EndDeviceInfos
    723            unsigned int data = 0;
    724            unsigned char buf [7] = "";
   \   00000A   90....       MOV       DPTR,#`?<Constant "">_2`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7407         MOV       A,#0x7
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    725           // printf("UART received!");
    726            HalUARTRead(0, buf, 6);
   \   000016                ; Setup parameters for call to function HalUARTRead
   \   000016   7C06         MOV       R4,#0x6
   \   000018   FD           MOV       R5,A
   \   000019   AA..         MOV       R2,?XSP + 0
   \   00001B   AB..         MOV       R3,?XSP + 1
   \   00001D   F9           MOV       R1,A
   \   00001E   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
    727            if ( (buf[1] & GENERICAPP_ENDPOINT) && (buf[0] == 0xCC) && (buf[5] == 0x33)) {  //make sure cmd send to this device
   \   000021   7401         MOV       A,#0x1
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E0           MOVX      A,@DPTR
   \   000027   A2E5         MOV       C,0xE0 /* A   */.5
   \   000029   5050         JNC       ??zclGenericApp_SerialMSGCB_0
   \   00002B   85..82       MOV       DPL,?XSP + 0
   \   00002E   85..83       MOV       DPH,?XSP + 1
   \   000031   E0           MOVX      A,@DPTR
   \   000032   64CC         XRL       A,#0xcc
   \   000034   7045         JNZ       ??zclGenericApp_SerialMSGCB_0
   \   000036   7405         MOV       A,#0x5
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6433         XRL       A,#0x33
   \   00003E   703B         JNZ       ??zclGenericApp_SerialMSGCB_0
    728              dest_endID = buf[1] & 0x1F; //get destnation endPoint from uart message
   \   000040   7401         MOV       A,#0x1
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   E0           MOVX      A,@DPTR
   \   000046   541F         ANL       A,#0x1f
   \   000048   F5..         MOV       ?V0,A
    729              data = osal_build_uint16(&buf[3]);
   \   00004A                ; Setup parameters for call to function osal_build_uint16
   \   00004A   7403         MOV       A,#0x3
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   AA82         MOV       R2,DPL
   \   000051   AB83         MOV       R3,DPH
   \   000053   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000056   8A..         MOV       ?V2,R2
   \   000058   8B..         MOV       ?V3,R3
    730              HalUARTWrite(0, buf, 6);
   \   00005A                ; Setup parameters for call to function HalUARTWrite
   \   00005A   7C06         MOV       R4,#0x6
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   AA..         MOV       R2,?XSP + 0
   \   000060   AB..         MOV       R3,?XSP + 1
   \   000062   7900         MOV       R1,#0x0
   \   000064   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    731              if (buf[2]&0x80) {  //cmd for coordinator
   \   000067   7402         MOV       A,#0x2
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   A2E7         MOV       C,0xE0 /* A   */.7
   \   00006F   400A         JC        ??zclGenericApp_SerialMSGCB_0
    732                switch (buf[2]) {
    733                  //add cmds here, e.g. case: 0x81...
    734                  default:
    735                  break;
    736                }
    737              } else { //cmd for end device, send it
    738                zclGenericApp_SendTheMessage(dest_endID, buf[2], data);
   \   000071                ; Setup parameters for call to function zclGenericApp_SendTheMessage
   \   000071   AC..         MOV       R4,?V2
   \   000073   AD..         MOV       R5,?V3
   \   000075   FA           MOV       R2,A
   \   000076   A9..         MOV       R1,?V0
   \   000078   12....       LCALL     `??zclGenericApp_SendTheMessage::?relay`; Banked call to: zclGenericApp_SendTheMessage
    739              }
    740            }
    741          }
   \                     ??zclGenericApp_SerialMSGCB_0:
   \   00007B   7407         MOV       A,#0x7
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   02....       LJMP      ?Subroutine1 & 0xFFFF
    742          
    743          
    744          
    745          
    746          
    747          //@fn rt_str_reverse
    748          //@brief message received is reversed, so we need to reverse again using this function
    749          //@para *str the first byte in a string that needs reversed
    750          //@para length the total length that needs to be reversed, 0 included
    751          //e.g a[] = {1,2,3,4}, then rt_str_reverse(&a[0], 3) result in {4, 3, 2, 1}

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    752          void str_reverse(char *str, int length) {
   \                     str_reverse:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    753            char temp, *end_ptr;
    754            end_ptr = str + length;
   \   000004   EA           MOV       A,R2
   \   000005   2C           ADD       A,R4
   \   000006   F8           MOV       R0,A
   \   000007   EB           MOV       A,R3
   \   000008   3D           ADDC      A,R5
   \   000009   8023         SJMP      ??str_reverse_0
    755            while(end_ptr > str) {
    756              temp = *str;
   \                     ??str_reverse_1:
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   FC           MOV       R4,A
    757              *str = *end_ptr;
   \   000011   8882         MOV       DPL,R0
   \   000013   8983         MOV       DPH,R1
   \   000015   E0           MOVX      A,@DPTR
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   F0           MOVX      @DPTR,A
    758              *end_ptr = temp;
   \   00001B   EC           MOV       A,R4
   \   00001C   8882         MOV       DPL,R0
   \   00001E   8983         MOV       DPH,R1
   \   000020   12....       LCALL     ?Subroutine4 & 0xFFFF
    759              str++;
   \                     ??CrossCallReturnLabel_2:
   \   000023   AA82         MOV       R2,DPL
   \   000025   AB83         MOV       R3,DPH
    760              end_ptr--;
   \   000027   E8           MOV       A,R0
   \   000028   24FF         ADD       A,#-0x1
   \   00002A   18           DEC       R0
   \   00002B   E9           MOV       A,R1
   \   00002C   34FF         ADDC      A,#-0x1
   \                     ??str_reverse_0:
   \   00002E   F9           MOV       R1,A
    761            }
   \   00002F   C3           CLR       C
   \   000030   EA           MOV       A,R2
   \   000031   98           SUBB      A,R0
   \   000032   EB           MOV       A,R3
   \   000033   99           SUBB      A,R1
   \   000034   40D5         JC        ??str_reverse_1
    762          }
   \   000036   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    763          
    764          // ENDNEW
    765          
    766          
    767          
    768          
    769          
    770          
    771          
    772          
    773          
    774          
    775          
    776          
    777          /*********************************************************************
    778           * @fn      zclGenericApp_HandleKeys
    779           *
    780           * @brief   Handles all key events for this device.
    781           *
    782           * @param   shift - true if in shift/alt.
    783           * @param   keys - bit field for key events. Valid entries:
    784           *                 HAL_KEY_SW_5
    785           *                 HAL_KEY_SW_4
    786           *                 HAL_KEY_SW_2
    787           *                 HAL_KEY_SW_1
    788           *
    789           * @return  none
    790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    791          static void zclGenericApp_HandleKeys( byte shift, byte keys )
   \                     zclGenericApp_HandleKeys:
    792          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    793            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV       C,0xE0 /* A   */.0
   \   000009   5048         JNC       ??zclGenericApp_HandleKeys_0
    794            {
    795              static bool LED_OnOff = FALSE;
    796              
    797              giGenAppScreenMode = GENERIC_MAINMODE;
   \   00000B   90....       MOV       DPTR,#giGenAppScreenMode
   \   00000E   E4           CLR       A
   \   00000F   F0           MOVX      @DPTR,A
    798              
    799              /* GENERICAPP_TODO: add app functionality to hardware keys here */
    800              
    801              // for example, start/stop LED 2 toggling with 500ms period
    802              if (LED_OnOff)
   \   000010   90....       MOV       DPTR,#??LED_OnOff
   \   000013   E0           MOVX      A,@DPTR
   \   000014   6019         JZ        ??zclGenericApp_HandleKeys_1
    803              { 
    804                // if the LED is blinking, stop the osal timer and turn the LED off
    805                osal_stop_timerEx(zclGenericApp_TaskID, GENERICAPP_EVT_1);
   \   000016                ; Setup parameters for call to function osal_stop_timerEx
   \   000016   7A08         MOV       R2,#0x8
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F9           MOV       R1,A
   \   00001F   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    806                HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
   \   000022                ; Setup parameters for call to function HalLedSet
   \   000022   7A00         MOV       R2,#0x0
   \   000024   7902         MOV       R1,#0x2
   \   000026   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    807                LED_OnOff = FALSE;
   \   000029   90....       MOV       DPTR,#??LED_OnOff
   \   00002C   E4           CLR       A
   \   00002D   8023         SJMP      ??zclGenericApp_HandleKeys_2
    808              }
    809              else
    810              {
    811                // turn on LED 2 and start an osal timer to toggle it after 500ms, search
    812                // for GENERICAPP_EVT_1 to see event handling after expired timer
    813                osal_start_timerEx( zclGenericApp_TaskID, GENERICAPP_EVT_1, 500 );
   \                     ??zclGenericApp_HandleKeys_1:
   \   00002F                ; Setup parameters for call to function osal_start_timerEx
   \   00002F   90....       MOV       DPTR,#__Constant_1f4
   \   000032   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000035   7A08         MOV       R2,#0x8
   \   000037   7B00         MOV       R3,#0x0
   \   000039   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000041   7404         MOV       A,#0x4
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
    814                HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
   \   000046                ; Setup parameters for call to function HalLedSet
   \   000046   7A01         MOV       R2,#0x1
   \   000048   7902         MOV       R1,#0x2
   \   00004A   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    815                LED_OnOff = TRUE;
   \   00004D   90....       MOV       DPTR,#??LED_OnOff
   \   000050   7401         MOV       A,#0x1
   \                     ??zclGenericApp_HandleKeys_2:
   \   000052   F0           MOVX      @DPTR,A
    816              }
    817            }
    818            // Start the BDB commissioning method
    819            if ( keys & HAL_KEY_SW_2 )
   \                     ??zclGenericApp_HandleKeys_0:
   \   000053   EE           MOV       A,R6
   \   000054   A2E1         MOV       C,0xE0 /* A   */.1
   \   000056   500A         JNC       ??zclGenericApp_HandleKeys_3
    820            {
    821              giGenAppScreenMode = GENERIC_MAINMODE;
   \   000058   90....       MOV       DPTR,#giGenAppScreenMode
   \   00005B   E4           CLR       A
   \   00005C   F0           MOVX      @DPTR,A
    822          
    823              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING | BDB_COMMISSIONING_MODE_INITIATOR_TL);
   \   00005D                ; Setup parameters for call to function bdb_StartCommissioning
   \   00005D   790F         MOV       R1,#0xf
   \   00005F   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    824            }
    825            if ( keys & HAL_KEY_SW_3 )
   \                     ??zclGenericApp_HandleKeys_3:
   \   000062   EE           MOV       A,R6
   \   000063   A2E4         MOV       C,0xE0 /* A   */.4
   \   000065   5005         JNC       ??zclGenericApp_HandleKeys_4
    826            {
    827              giGenAppScreenMode = GENERIC_MAINMODE;
   \   000067   90....       MOV       DPTR,#giGenAppScreenMode
   \   00006A   E4           CLR       A
   \   00006B   F0           MOVX      @DPTR,A
    828            
    829              // touchlink target commissioning, if enabled  
    830          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
    831              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_FINDING_BINDING);
    832              touchLinkTarget_EnableCommissioning( 30000 );
    833          #endif
    834              
    835            }
    836            if ( keys & HAL_KEY_SW_4 )
   \                     ??zclGenericApp_HandleKeys_4:
   \   00006C   EE           MOV       A,R6
   \   00006D   A2E3         MOV       C,0xE0 /* A   */.3
   \   00006F   5015         JNC       ??zclGenericApp_HandleKeys_5
    837            {
    838              
    839             giGenAppScreenMode = giGenAppScreenMode ? GENERIC_MAINMODE : GENERIC_HELPMODE;
   \   000071   90....       MOV       DPTR,#giGenAppScreenMode
   \   000074   E0           MOVX      A,@DPTR
   \   000075   6003         JZ        ??zclGenericApp_HandleKeys_6
   \   000077   E4           CLR       A
   \   000078   8002         SJMP      ??zclGenericApp_HandleKeys_7
   \                     ??zclGenericApp_HandleKeys_6:
   \   00007A   7401         MOV       A,#0x1
   \                     ??zclGenericApp_HandleKeys_7:
   \   00007C   F0           MOVX      @DPTR,A
    840          #ifdef LCD_SUPPORTED
    841              HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
   \   00007D                ; Setup parameters for call to function HalLcdWriteString
   \   00007D   7902         MOV       R1,#0x2
   \   00007F   7A..         MOV       R2,#sClearLine & 0xff
   \   000081   7B..         MOV       R3,#(sClearLine >> 8) & 0xff
   \   000083   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    842          #endif
    843              
    844            }
    845            if ( keys & HAL_KEY_SW_5 )
   \                     ??zclGenericApp_HandleKeys_5:
   \   000086   EE           MOV       A,R6
   \   000087   A2E2         MOV       C,0xE0 /* A   */.2
   \   000089   5003         JNC       ??zclGenericApp_HandleKeys_8
    846            {
    847              bdb_resetLocalAction();
   \   00008B                ; Setup parameters for call to function bdb_resetLocalAction
   \   00008B   12....       LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
    848            }
    849          
    850            zclGenericApp_LcdDisplayUpdate();
   \                     ??zclGenericApp_HandleKeys_8:
   \   00008E                ; Setup parameters for call to function zclGenericApp_LcdDisplayUpdate
   \   00008E   12....       LCALL     `??zclGenericApp_LcdDisplayUpdate::?relay`; Banked call to: zclGenericApp_LcdDisplayUpdate
    851          }
   \   000091   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??LED_OnOff:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    852          
    853          /*********************************************************************
    854           * @fn      zclGenericApp_LcdDisplayUpdate
    855           *
    856           * @brief   Called to update the LCD display.
    857           *
    858           * @param   none
    859           *
    860           * @return  none
    861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    862          void zclGenericApp_LcdDisplayUpdate( void )
   \                     zclGenericApp_LcdDisplayUpdate:
    863          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    864          #ifdef LCD_SUPPORTED
    865            if ( giGenAppScreenMode == GENERIC_HELPMODE )
   \   000004   90....       MOV       DPTR,#giGenAppScreenMode
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   7014         JNZ       ??zclGenericApp_LcdDisplayUpdate_0
    866            {
    867              zclGenericApp_LcdDisplayHelpMode();
   \   00000C                ; Setup parameters for call to function HalLcdWriteString
   \   00000C   7901         MOV       R1,#0x1
   \   00000E   7A..         MOV       R2,#sSwGenericApp & 0xff
   \   000010   7B..         MOV       R3,#(sSwGenericApp >> 8) & 0xff
   \   000012   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000015                ; Setup parameters for call to function HalLcdWriteString
   \   000015   7902         MOV       R1,#0x2
   \   000017   7A..         MOV       R2,#sSwBDBMode & 0xff
   \   000019   7B..         MOV       R3,#(sSwBDBMode >> 8) & 0xff
   \   00001B   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00001E                ; Setup parameters for call to function HalLcdWriteString
   \   00001E   802F         SJMP      ??zclGenericApp_LcdDisplayUpdate_1
    868            }
    869            else
    870            {
    871              zclGenericApp_LcdDisplayMainMode();
   \                     ??zclGenericApp_LcdDisplayUpdate_0:
   \   000020   90....       MOV       DPTR,#zclGenericApp_NwkState
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6409         XRL       A,#0x9
   \   000026   7004         JNZ       ??zclGenericApp_LcdDisplayUpdate_2
   \   000028                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000028   7900         MOV       R1,#0x0
   \   00002A   8010         SJMP      ??zclGenericApp_LcdDisplayUpdate_3
   \                     ??zclGenericApp_LcdDisplayUpdate_2:
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6407         XRL       A,#0x7
   \   00002F   7004         JNZ       ??zclGenericApp_LcdDisplayUpdate_4
   \   000031                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000031   7901         MOV       R1,#0x1
   \   000033   8007         SJMP      ??zclGenericApp_LcdDisplayUpdate_3
   \                     ??zclGenericApp_LcdDisplayUpdate_4:
   \   000035   E0           MOVX      A,@DPTR
   \   000036   6406         XRL       A,#0x6
   \   000038   7005         JNZ       ??zclGenericApp_LcdDisplayUpdate_5
   \   00003A                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   00003A   7902         MOV       R1,#0x2
   \                     ??zclGenericApp_LcdDisplayUpdate_3:
   \   00003C   12....       LCALL     `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
   \                     ??zclGenericApp_LcdDisplayUpdate_5:
   \   00003F   90....       MOV       DPTR,#gPermitDuration
   \   000042   E0           MOVX      A,@DPTR
   \   000043   90....       MOV       DPTR,#sSwHelp + 15
   \   000046   6004         JZ        ??zclGenericApp_LcdDisplayUpdate_6
   \   000048   742A         MOV       A,#0x2a
   \   00004A   8002         SJMP      ??zclGenericApp_LcdDisplayUpdate_7
   \                     ??zclGenericApp_LcdDisplayUpdate_6:
   \   00004C   7420         MOV       A,#0x20
   \                     ??zclGenericApp_LcdDisplayUpdate_7:
   \   00004E   F0           MOVX      @DPTR,A
   \                     ??zclGenericApp_LcdDisplayUpdate_1:
   \   00004F                ; Setup parameters for call to function HalLcdWriteString
   \   00004F   7903         MOV       R1,#0x3
   \   000051   7A..         MOV       R2,#sSwHelp & 0xff
   \   000053   7B..         MOV       R3,#(sSwHelp >> 8) & 0xff
   \   000055   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    872            }
    873          #endif
    874          }
   \   000058   80..         SJMP      ?Subroutine3
    875          
    876          #ifdef LCD_SUPPORTED
    877          /*********************************************************************
    878           * @fn      zclGenericApp_LcdDisplayMainMode
    879           *
    880           * @brief   Called to display the main screen on the LCD.
    881           *
    882           * @param   none
    883           *
    884           * @return  none
    885           */
    886          static void zclGenericApp_LcdDisplayMainMode( void )
    887          {
    888            // display line 1 to indicate NWK status
    889            if ( zclGenericApp_NwkState == DEV_ZB_COORD )
    890            {
    891              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
    892            }
    893            else if ( zclGenericApp_NwkState == DEV_ROUTER )
    894            {
    895              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
    896            }
    897            else if ( zclGenericApp_NwkState == DEV_END_DEVICE )
    898            {
    899              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
    900            }
    901          
    902            // end of line 3 displays permit join status (*)
    903            if ( gPermitDuration )
    904            {
    905              sSwHelp[15] = '*';
    906            }
    907            else
    908            {
    909              sSwHelp[15] = ' ';
    910            }
    911            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    912          }
    913          
    914          /*********************************************************************
    915           * @fn      zclGenericApp_LcdDisplayHelpMode
    916           *
    917           * @brief   Called to display the SW options on the LCD.
    918           *
    919           * @param   none
    920           *
    921           * @return  none
    922           */
    923          static void zclGenericApp_LcdDisplayHelpMode( void )
    924          {
    925            HalLcdWriteString( (char *)sSwGenericApp, HAL_LCD_LINE_1 );
    926            HalLcdWriteString( (char *)sSwBDBMode, HAL_LCD_LINE_2 );
    927            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    928          }
    929          #endif  // LCD_SUPPORTED
    930          
    931          /*********************************************************************
    932           * @fn      zclGenericApp_ProcessCommissioningStatus
    933           *
    934           * @brief   Callback in which the status of the commissioning process are reported
    935           *
    936           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    937           *
    938           * @return  none
    939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    940          static void zclGenericApp_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclGenericApp_ProcessCommissioningStatus:
    941          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    942            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6402         XRL       A,#0x2
   \   00000C   7010         JNZ       ??zclGenericApp_ProcessCommissioningStatus_0
    943            {
    944              case BDB_COMMISSIONING_FORMATION:
    945                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7009         JNZ       ??zclGenericApp_ProcessCommissioningStatus_0
    946                {
    947                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
    948                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000015                ; Setup parameters for call to function bdb_StartCommissioning
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   4402         ORL       A,#0x2
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    949                }
    950                else
    951                {
    952                  //Want to try other channels?
    953                  //try with bdb_setChannelAttribute
    954                }
    955              break;
    956              case BDB_COMMISSIONING_NWK_STEERING:
    957                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    958                {
    959                  //YOUR JOB:
    960                  //We are on the nwk, what now?
    961                }
    962                else
    963                {
    964                  //See the possible errors for nwk steering procedure
    965                  //No suitable networks found
    966                  //Want to try other channels?
    967                  //try with bdb_setChannelAttribute
    968                }
    969              break;
    970              case BDB_COMMISSIONING_FINDING_BINDING:
    971                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    972                {
    973                  //YOUR JOB:
    974                }
    975                else
    976                {
    977                  //YOUR JOB:
    978                  //retry?, wait for user interaction?
    979                }
    980              break;
    981              case BDB_COMMISSIONING_INITIALIZATION:
    982                //Initialization notification can only be successful. Failure on initialization
    983                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    984          
    985                //YOUR JOB:
    986                //We are on a network, what now?
    987          
    988              break;
    989          #if ZG_BUILD_ENDDEVICE_TYPE    
    990              case BDB_COMMISSIONING_PARENT_LOST:
    991                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
    992                {
    993                  //We did recover from losing parent
    994                }
    995                else
    996                {
    997                  //Parent not found, attempt to rejoin again after a fixed delay
    998                  osal_start_timerEx(zclGenericApp_TaskID, GENERICAPP_END_DEVICE_REJOIN_EVT, GENERICAPP_END_DEVICE_REJOIN_DELAY);
    999                }
   1000              break;
   1001          #endif 
   1002            }
   1003          }
   \                     ??zclGenericApp_ProcessCommissioningStatus_0:
   \   00001E                REQUIRE ?Subroutine3
   \   00001E                ; // Fall through to label ?Subroutine3
   1004          
   1005          /*********************************************************************
   1006           * @fn      zclGenericApp_ProcessIdentifyTimeChange
   1007           *
   1008           * @brief   Called to process any change to the IdentifyTime attribute.
   1009           *
   1010           * @param   endpoint - in which the identify has change
   1011           *
   1012           * @return  none
   1013           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1014          static void zclGenericApp_ProcessIdentifyTimeChange( uint8 endpoint )
   \                     zclGenericApp_ProcessIdentifyTimeChange:
   1015          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1016            (void) endpoint;
   1017          
   1018            if ( zclGenericApp_IdentifyTime > 0 )
   \   000004   90....       MOV       DPTR,#zclGenericApp_IdentifyTime
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   600F         JZ        ??zclGenericApp_ProcessIdentifyTimeChange_0
   1019            {
   1020              HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000010                ; Setup parameters for call to function HalLedBlink
   \   000010   7CE8         MOV       R4,#-0x18
   \   000012   7D03         MOV       R5,#0x3
   \   000014   7B05         MOV       R3,#0x5
   \   000016   7AFF         MOV       R2,#-0x1
   \   000018   7902         MOV       R1,#0x2
   \   00001A   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   00001D   8007         SJMP      ??zclGenericApp_ProcessIdentifyTimeChange_1
   1021            }
   1022            else
   1023            {
   1024              HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
   \                     ??zclGenericApp_ProcessIdentifyTimeChange_0:
   \   00001F                ; Setup parameters for call to function HalLedSet
   \   00001F   7A00         MOV       R2,#0x0
   \   000021   7902         MOV       R1,#0x2
   \   000023   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1025            }
   1026          }
   \                     ??zclGenericApp_ProcessIdentifyTimeChange_1:
   \   000026   80..         SJMP      ?Subroutine3
   1027          
   1028          /*********************************************************************
   1029           * @fn      zclGenericApp_BindNotification
   1030           *
   1031           * @brief   Called when a new bind is added.
   1032           *
   1033           * @param   data - pointer to new bind data
   1034           *
   1035           * @return  none
   1036           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1037          static void zclGenericApp_BindNotification( bdbBindNotificationData_t *data )
   \                     zclGenericApp_BindNotification:
   1038          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1039            // GENERICAPP_TODO: process the new bind information
   1040          }
   \   000000   02....       LJMP      ?BRET
   1041          
   1042          
   1043          /*********************************************************************
   1044           * @fn      zclGenericApp_ProcessTouchlinkTargetEnable
   1045           *
   1046           * @brief   Called to process when the touchlink target functionality
   1047           *          is enabled or disabled
   1048           *
   1049           * @param   none
   1050           *
   1051           * @return  none
   1052           */
   1053          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
   1054          static void zclGenericApp_ProcessTouchlinkTargetEnable( uint8 enable )
   1055          {
   1056            if ( enable )
   1057            {
   1058              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   1059            }
   1060            else
   1061            {
   1062              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
   1063            }
   1064          }
   1065          #endif
   1066          
   1067          /*********************************************************************
   1068           * @fn      zclGenericApp_BasicResetCB
   1069           *
   1070           * @brief   Callback from the ZCL General Cluster Library
   1071           *          to set all the Basic Cluster attributes to default values.
   1072           *
   1073           * @param   none
   1074           *
   1075           * @return  none
   1076           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1077          static void zclGenericApp_BasicResetCB( void )
   \                     zclGenericApp_BasicResetCB:
   1078          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1079          
   1080            /* GENERICAPP_TODO: remember to update this function with any
   1081               application-specific cluster attribute variables */
   1082            
   1083            zclGenericApp_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclGenericApp_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     `??zclGenericApp_ResetAttributesToDefaultValues:`; Banked call to: zclGenericApp_ResetAttributesToDefaultValues
   1084            
   1085          }
   \   000007   80..         SJMP      ?Subroutine3
   1086          /*********************************************************************
   1087           * @fn      zclSampleApp_BatteryWarningCB
   1088           *
   1089           * @brief   Called to handle battery-low situation.
   1090           *
   1091           * @param   voltLevel - level of severity
   1092           *
   1093           * @return  none
   1094           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1095          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
   1096          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1097            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
   1098            {
   1099              // Send warning message to the gateway and blink LED
   1100            }
   1101            else if ( voltLevel == VOLT_LEVEL_BAD )
   1102            {
   1103              // Shut down the system
   1104            }
   1105          }
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGenericApp_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sSwHelp>`:
   \   000000   5357343A     DB "SW4: Help       "
   \            2048656C
   \            70202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGenericApp_CmdCallbacks>`:
   \   000000   ....         DW `??zclGenericApp_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Initializing...">`:
   \   000000   496E6974     DB "Initializing..."
   \            69616C69
   \            7A696E67
   \            2E2E2E00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ok">`:
   \   000000   6F6B00       DB "ok"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Data Lost\\r\\n">`:
   \   000000   44617461     DB "Data Lost\015\012"
   \            204C6F73
   \            740D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Data Sent\\r\\n">`:
   \   000000   44617461     DB "Data Sent\015\012"
   \            2053656E
   \            740D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RX_EVT">`:
   \   000000   52585F45     DB "RX_EVT"
   \            565400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "toggle">`:
   \   000000   746F6767     DB "toggle"
   \            6C6500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Device Found Form Pre...">`:
   \   000000   44657669     DB "Device Found Form Previous Log -> Existed!\015\012"
   \            63652046
   \            6F756E64
   \            20466F72
   \            6D205072
   \            6576696F
   \            7573204C
   \            6F67202D
   \            3E204578
   \            69737465
   \            64210D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "New Device!\\r\\n">`:
   \   000000   4E657720     DB "New Device!\015\012"
   \            44657669
   \            6365210D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_1`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Successfully Sent\\r\\n">`:
   \   000000   53756363     DB "Successfully Sent\015\012"
   \            65737366
   \            756C6C79
   \            2053656E
   \            740D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Couldn\\'t Sent\\r\\n">`:
   \   000000   436F756C     DB "Couldn't Sent\015\012"
   \            646E2774
   \            2053656E
   \            740D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_2`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500
   1106          
   1107          /******************************************************************************
   1108           *
   1109           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1110           *
   1111           *****************************************************************************/
   1112          
   1113          /*********************************************************************
   1114           * @fn      zclGenericApp_ProcessIncomingMsg
   1115           *
   1116           * @brief   Process ZCL Foundation incoming message
   1117           *
   1118           * @param   pInMsg - pointer to the received message
   1119           *
   1120           * @return  none
   1121           */
   1122          static void zclGenericApp_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   1123          {
   1124            switch ( pInMsg->zclHdr.commandID )
   1125            {
   1126          #ifdef ZCL_READ
   1127              case ZCL_CMD_READ_RSP:
   1128                zclGenericApp_ProcessInReadRspCmd( pInMsg );
   1129                break;
   1130          #endif
   1131          #ifdef ZCL_WRITE
   1132              case ZCL_CMD_WRITE_RSP:
   1133                zclGenericApp_ProcessInWriteRspCmd( pInMsg );
   1134                break;
   1135          #endif
   1136              case ZCL_CMD_CONFIG_REPORT:
   1137              case ZCL_CMD_CONFIG_REPORT_RSP:
   1138              case ZCL_CMD_READ_REPORT_CFG:
   1139              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1140              case ZCL_CMD_REPORT:
   1141                //bdb_ProcessIncomingReportingMsg( pInMsg );
   1142                break;
   1143                
   1144              case ZCL_CMD_DEFAULT_RSP:
   1145                zclGenericApp_ProcessInDefaultRspCmd( pInMsg );
   1146                break;
   1147          #ifdef ZCL_DISCOVER
   1148              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1149                zclGenericApp_ProcessInDiscCmdsRspCmd( pInMsg );
   1150                break;
   1151          
   1152              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1153                zclGenericApp_ProcessInDiscCmdsRspCmd( pInMsg );
   1154                break;
   1155          
   1156              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1157                zclGenericApp_ProcessInDiscAttrsRspCmd( pInMsg );
   1158                break;
   1159          
   1160              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1161                zclGenericApp_ProcessInDiscAttrsExtRspCmd( pInMsg );
   1162                break;
   1163          #endif
   1164              default:
   1165                break;
   1166            }
   1167          
   1168            if ( pInMsg->attrCmd )
   1169              osal_mem_free( pInMsg->attrCmd );
   1170          }
   1171          
   1172          #ifdef ZCL_READ
   1173          /*********************************************************************
   1174           * @fn      zclGenericApp_ProcessInReadRspCmd
   1175           *
   1176           * @brief   Process the "Profile" Read Response Command
   1177           *
   1178           * @param   pInMsg - incoming message to process
   1179           *
   1180           * @return  none
   1181           */
   1182          static uint8 zclGenericApp_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1183          {
   1184            zclReadRspCmd_t *readRspCmd;
   1185            uint8 i;
   1186          
   1187            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1188            for (i = 0; i < readRspCmd->numAttr; i++)
   1189            {
   1190              // Notify the originator of the results of the original read attributes
   1191              // attempt and, for each successfull request, the value of the requested
   1192              // attribute
   1193            }
   1194          
   1195            return ( TRUE );
   1196          }
   1197          #endif // ZCL_READ
   1198          
   1199          #ifdef ZCL_WRITE
   1200          /*********************************************************************
   1201           * @fn      zclGenericApp_ProcessInWriteRspCmd
   1202           *
   1203           * @brief   Process the "Profile" Write Response Command
   1204           *
   1205           * @param   pInMsg - incoming message to process
   1206           *
   1207           * @return  none
   1208           */
   1209          static uint8 zclGenericApp_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1210          {
   1211            zclWriteRspCmd_t *writeRspCmd;
   1212            uint8 i;
   1213          
   1214            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1215            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1216            {
   1217              // Notify the device of the results of the its original write attributes
   1218              // command.
   1219            }
   1220          
   1221            return ( TRUE );
   1222          }
   1223          #endif // ZCL_WRITE
   1224          
   1225          /*********************************************************************
   1226           * @fn      zclGenericApp_ProcessInDefaultRspCmd
   1227           *
   1228           * @brief   Process the "Profile" Default Response Command
   1229           *
   1230           * @param   pInMsg - incoming message to process
   1231           *
   1232           * @return  none
   1233           */
   1234          static uint8 zclGenericApp_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1235          {
   1236            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1237          
   1238            // Device is notified of the Default Response command.
   1239            (void)pInMsg;
   1240          
   1241            return ( TRUE );
   1242          }
   1243          
   1244          #ifdef ZCL_DISCOVER
   1245          /*********************************************************************
   1246           * @fn      zclGenericApp_ProcessInDiscCmdsRspCmd
   1247           *
   1248           * @brief   Process the Discover Commands Response Command
   1249           *
   1250           * @param   pInMsg - incoming message to process
   1251           *
   1252           * @return  none
   1253           */
   1254          static uint8 zclGenericApp_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1255          {
   1256            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1257            uint8 i;
   1258          
   1259            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1260            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1261            {
   1262              // Device is notified of the result of its attribute discovery command.
   1263            }
   1264          
   1265            return ( TRUE );
   1266          }
   1267          
   1268          /*********************************************************************
   1269           * @fn      zclGenericApp_ProcessInDiscAttrsRspCmd
   1270           *
   1271           * @brief   Process the "Profile" Discover Attributes Response Command
   1272           *
   1273           * @param   pInMsg - incoming message to process
   1274           *
   1275           * @return  none
   1276           */
   1277          static uint8 zclGenericApp_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1278          {
   1279            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1280            uint8 i;
   1281          
   1282            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1283            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1284            {
   1285              // Device is notified of the result of its attribute discovery command.
   1286            }
   1287          
   1288            return ( TRUE );
   1289          }
   1290          
   1291          /*********************************************************************
   1292           * @fn      zclGenericApp_ProcessInDiscAttrsExtRspCmd
   1293           *
   1294           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1295           *
   1296           * @param   pInMsg - incoming message to process
   1297           *
   1298           * @return  none
   1299           */
   1300          static uint8 zclGenericApp_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1301          {
   1302            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1303            uint8 i;
   1304          
   1305            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1306            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1307            {
   1308              // Device is notified of the result of its attribute discovery command.
   1309            }
   1310          
   1311            return ( TRUE );
   1312          }
   1313          #endif // ZCL_DISCOVER
   1314          
   1315          /****************************************************************************
   1316          ****************************************************************************/
   1317          
   1318          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      3     31   str_reverse
      2      0   zclGenericApp_BasicResetCB
        2      0   -> zclGenericApp_ResetAttributesToDefaultValues
      0      0   zclGenericApp_BindNotification
      0     25   zclGenericApp_HandleKeys
        0      9   -> HalLcdWriteString
        0      9   -> HalLedSet
        0      9   -> bdb_StartCommissioning
        0      9   -> bdb_resetLocalAction
        0     13   -> osal_start_timerEx
        0      9   -> osal_stop_timerEx
        0      9   -> zclGenericApp_LcdDisplayUpdate
      0     38   zclGenericApp_Init
        0     38   -> HalLcdWriteString
        0     38   -> HalUARTOpen
        0     38   -> HalUARTPoll
        0     38   -> HalUARTWrite
        0     38   -> MT_UartInit
        0     38   -> MT_UartRegisterTaskID
        0     38   -> RegisterForKeys
        0     38   -> RegisterVoltageWarningCB
        0     38   -> afRegister
        0     38   -> bdb_RegisterBindNotificationCB
        0     38   -> bdb_RegisterCommissioningStatusCB
        0     38   -> bdb_RegisterIdentifyTimeChangeCB
        0     38   -> bdb_RegisterSimpleDescriptor
        0     38   -> zclGeneral_RegisterCmdCallbacks
        0     38   -> zcl_registerAttrList
        0     38   -> zcl_registerForMsg
      2     12   zclGenericApp_LcdDisplayUpdate
        2      0   -> HalLcdWriteString
        2      0   -> zclHA_LcdStatusLine1
      1     46   zclGenericApp_MessageMSGCB
        0     31   -> APSME_LookupExtAddr
        0     31   -> HalUARTWrite
        0     34   -> osal_memcmp
        0     34   -> osal_memcpy
        0     31   -> str_reverse
      2      0   zclGenericApp_ProcessCommissioningStatus
        2      0   -> bdb_StartCommissioning
      2      0   zclGenericApp_ProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      0   -> HalLedSet
      0     22   zclGenericApp_ProcessZDOMsgs
        0     10   -> HalLedSet
        0     10   -> ZDO_ParseEPListRsp
        0     10   -> osal_mem_free
      1     49   zclGenericApp_SendTheMessage
        0     30   -> AF_DataRequest
        0     21   -> HalUARTWrite
        0     21   -> osal_buffer_uint16
        0     24   -> osal_memcpy
      0     31   zclGenericApp_SerialMSGCB
        0     19   -> HalUARTRead
        0     19   -> HalUARTWrite
        0     19   -> osal_build_uint16
        0     19   -> zclGenericApp_SendTheMessage
      0     16   zclGenericApp_event_loop
        0     12   -> HalLedSet
        0     12   -> HalUARTPoll
        0     12   -> HalUARTWrite
        0     12   -> bdb_StartCommissioning
        0     12   -> osal_mem_free
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     16   -> osal_start_timerEx
        0     12   -> osal_strlen
        0     12   -> zclGenericApp_HandleKeys
        0     12   -> zclGenericApp_LcdDisplayUpdate
        0     12   -> zclGenericApp_MessageMSGCB
        0     12   -> zclGenericApp_ProcessZDOMsgs
        0     12   -> zclGenericApp_SerialMSGCB
      0      0   zclSampleApp_BatteryWarningCB


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "">
       6  ?<Constant "">_1
       7  ?<Constant "">_2
      16  ?<Constant "Couldn\'t Sent\r\n">
      12  ?<Constant "Data Lost\r\n">
      12  ?<Constant "Data Sent\r\n">
      45  ?<Constant "Device Found Form Pre...">
      16  ?<Constant "Initializing...">
      14  ?<Constant "New Device!\r\n">
       7  ?<Constant "RX_EVT">
      20  ?<Constant "Successfully Sent\r\n">
       3  ?<Constant "ok">
       7  ?<Constant "toggle">
      17  ?<Initializer for sSwHelp>
      24  ?<Initializer for zclGenericApp_CmdCallbacks>
       1  ?<Initializer for zclGenericApp_NwkState>
       9  ??Subroutine9_0
       5  ?Subroutine0
       5  ?Subroutine1
       8  ?Subroutine2
       7  ?Subroutine3
       7  ?Subroutine4
      15  ?Subroutine5
      15  ?Subroutine6
      12  ?Subroutine7
       6  ?Subroutine8
     160  EndDeviceInfos
       2  GenericApp_ClusterList
      12  GenericApp_SimpleDesc
       1  LED_OnOff
       4  __Constant_1f4
       1  device_count
       1  gPermitDuration
       1  giGenAppScreenMode
       2  sClearLine
      14  sDeviceName
      15  sSwBDBMode
      16  sSwGenericApp
      17  sSwHelp
      57  str_reverse
       9  zclGenericApp_BasicResetCB
       3  zclGenericApp_BindNotification
      24  zclGenericApp_CmdCallbacks
      12  zclGenericApp_DstAddr
     148  zclGenericApp_HandleKeys
     214  zclGenericApp_Init
      90  zclGenericApp_LcdDisplayUpdate
     338  zclGenericApp_MessageMSGCB
       1  zclGenericApp_NwkState
      30  zclGenericApp_ProcessCommissioningStatus
      40  zclGenericApp_ProcessIdentifyTimeChange
     101  zclGenericApp_ProcessZDOMsgs
     266  zclGenericApp_SendTheMessage
     131  zclGenericApp_SerialMSGCB
       1  zclGenericApp_TaskID
       1  zclGenericApp_TransID
       7  zclGenericApp_epDesc
     366  zclGenericApp_event_loop
       3  zclSampleApp_BatteryWarningCB
      84  -- Other

 
 1 885 bytes in segment BANKED_CODE
    84 bytes in segment BANK_RELAYS
    42 bytes in segment XDATA_I
    42 bytes in segment XDATA_ID
   238 bytes in segment XDATA_ROM_C
   185 bytes in segment XDATA_Z
 
   126 bytes of CODE     memory
   234 bytes of CONST    memory (+ 4 bytes shared)
 1 885 bytes of HUGECODE memory
   227 bytes of XDATA    memory

Errors: none
Warnings: none
