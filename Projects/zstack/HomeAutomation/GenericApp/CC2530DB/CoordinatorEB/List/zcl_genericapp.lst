###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               18/Apr/2021  17:01:57
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\zcl_genericapp.c
#    Command line       =  
#        -f C:\users\slavko\Temp\EW47b8.tmp ("C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\zcl_genericapp.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1
#        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List\zcl_genericapp.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj\zcl_genericapp.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\zcl_genericapp.c
      1          /**************************************************************************************************
      2            Filename:       zcl_genericapp.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application is a template to get started writing an application
     43            from scratch.
     44          
     45            Look for the sections marked with "GENERICAPP_TODO" to add application
     46            specific code.
     47          
     48            Note: if you would like your application to support automatic attribute
     49            reporting, include the BDB_REPORTING compile flag.
     50          *********************************************************************/
     51          
     52          /*********************************************************************
     53           * INCLUDES
     54           */
     55          #include "ZComDef.h"
     56          #include "ZDProfile.h" 	// NEW
     57          #include "OSAL.h"
     58          #include "AF.h"
     59          #include "ZDApp.h"
     60          #include "ZDObject.h"
     61          #include "MT_APP.h"
     62          #include "MT_SYS.h"
     63          	 
     64          	 
     65          #include "DebugTrace.h" 	// NEW
     66          #include "MT_UART.h" 		// NEW	 
     67          
     68          #include "nwk_util.h"
     69          
     70          #include "zcl.h"
     71          #include "zcl_general.h"
     72          #include "zcl_ha.h"
     73          #include "zcl_diagnostic.h"
     74          #include "zcl_genericapp.h"
     75          #include "zcl_hvac.h"
     76          #include "zcl_ms.h"
     77          
     78          #include "bdb.h"
     79          #include "bdb_interface.h"
     80          #include "gp_interface.h"
     81          
     82          #if defined ( INTER_PAN )
     83          #if defined ( BDB_TL_INITIATOR )
     84            #include "bdb_touchlink_initiator.h"
     85          #endif // BDB_TL_INITIATOR
     86          #if defined ( BDB_TL_TARGET )
     87            #include "bdb_touchlink_target.h"
     88          #endif // BDB_TL_TARGET
     89          #endif // INTER_PAN
     90          
     91          #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
     92            #include "bdb_touchlink.h"
     93          #endif
     94          
     95          #include "onboard.h"
     96          
     97          /* HAL */
     98          #include "hal_lcd.h"
     99          #include "hal_led.h"
    100          #include "hal_key.h"
    101          #include "hal_uart.h"
    102          
    103          /*********************************************************************
    104           * MACROS
    105           */
    106          #define REMOTE_TEMP    1
    107          
    108          /*********************************************************************
    109           * CONSTANTS
    110           */
    111          
    112          
    113          /*********************************************************************
    114           * TYPEDEFS
    115           */
    116          
    117          // NEW
    118          typedef struct
    119           {
    120             unsigned char endPoint;
    121             unsigned char extAddr[8];
    122             unsigned char compressed_addr;
    123           } EndDeviceInfo_t; 						//saved the end device information
    124          // ENDNEW
    125          
    126          /*********************************************************************
    127           * GLOBAL VARIABLES
    128           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          byte zclGenericApp_TaskID;
   \                     zclGenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    130          
    131          extern int16 zdpExternalStateTaskID;
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          unsigned char device_count = 0;
   \                     device_count:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134           
    135           // NEW
    136          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    137          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
    138          {
    139            GENERICAPP_CLUSTERID
    140          };
    141          

   \                                 In  segment XDATA_ROM_C, align 1
    142          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   00           DB 0
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
    143          {
    144            GENERICAPP_ENDPOINT,              //  int Endpoint;
    145            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    146            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    147            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    148            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    149            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    150            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    151            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    152            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    153          };
    154          
    155          // This is the Endpoint/Interface description.  It is defined here, but
    156          // filled-in in GenericApp_Init().  Another way to go would be to fill
    157          // in the structure here and make it a "const" (in code space).  The
    158          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          endPointDesc_t zclGenericApp_epDesc;
   \                     zclGenericApp_epDesc:
   \   000000                DS 7
   \   000007                REQUIRE __INIT_XDATA_Z
    160          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          EndDeviceInfo_t EndDeviceInfos[16]; //init space for 16 devices
   \                     EndDeviceInfos:
   \   000000                DS 160
   \   0000A0                REQUIRE __INIT_XDATA_Z
    162          // ENDNEW
    163          
    164          
    165          /*********************************************************************
    166           * GLOBAL FUNCTIONS
    167           */
    168          
    169          //void osal_buffer_uint16(&theMessageData[3], data); 			// NEW
    170          // void osal_buffer_uint16(unsigned char &theMessageData, unsigned int data);	// NEW
    171           
    172          /*********************************************************************
    173           * LOCAL VARIABLES
    174           */
    175          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          uint8 giGenAppScreenMode = GENERIC_MAINMODE;   // display the main screen mode first
   \                     giGenAppScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    177          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    180          devStates_t zclGenericApp_NwkState = DEV_INIT;
   \                     zclGenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclGenericApp_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    181          
    182          // NEW

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          byte zclGenericApp_TransID;  // This is the unique message ID (counter)
   \                     zclGenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          afAddrType_t zclGenericApp_DstAddr;
   \                     zclGenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    185          // ENDNEW
    186          
    187          
    188          #ifdef BDB_REPORTING
    189          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8
    190            uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0x2C01 is 300 in int16
    191          #endif
    192          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4
    193            uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00}; // 0x2C01 is 300 in int16
    194          #endif 
    195          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2
    196            uint8 reportableChange[] = {0x2C, 0x01}; // 0x2C01 is 300 in int16
    197          #endif 
    198          #endif
    199          
    200          /*********************************************************************
    201           * LOCAL FUNCTIONS
    202           */
    203          static void zclGenericApp_HandleKeys( byte shift, byte keys );
    204          static void zclGenericApp_BasicResetCB( void );
    205          
    206          #ifdef MT_APP_FUNC
    207          static void zclGenericApp_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg );
    208          static void zclGenericApp_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID, zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd );
    209          #endif
    210          
    211          static void zclGenericApp_ProcessIdentifyTimeChange( uint8 endpoint );
    212          static void zclGenericApp_BindNotification( bdbBindNotificationData_t *data );
    213          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
    214          static void zclGenericApp_ProcessTouchlinkTargetEnable( uint8 enable );
    215          #endif
    216          
    217          // NEW
    218          void zclGenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    219          void zclGenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    220          void zclGenericApp_SendTheMessage( unsigned char dest_endID, unsigned char cmd, unsigned int temp_set);
    221          void zclGenericApp_SerialMSGCB(void);
    222          void str_reverse(char *str, int length);
    223          // ENDNEW
    224          
    225          static void zclGenericApp_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    226          
    227          // app display functions
    228          static void zclGenericApp_LcdDisplayUpdate( void );
    229          #ifdef LCD_SUPPORTED
    230          static void zclGenericApp_LcdDisplayMainMode( void );
    231          static void zclGenericApp_LcdDisplayHelpMode( void );
    232          #endif
    233          
    234          // Functions to process ZCL Foundation incoming Command/Response messages
    235          static void zclGenericApp_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    236          #ifdef ZCL_READ
    237          static uint8 zclGenericApp_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    238          #endif
    239          #ifdef ZCL_WRITE
    240          static uint8 zclGenericApp_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    241          #endif
    242          
    243          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    244          static void zclSampleThermostat_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    245          #endif  // ZCL_REPORT_DESTINATION_DEVICE
    246          
    247          static uint8 zclGenericApp_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    248          #ifdef ZCL_DISCOVER
    249          static uint8 zclGenericApp_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    250          static uint8 zclGenericApp_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    251          static uint8 zclGenericApp_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    252          #endif
    253          
    254          //static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    255          
    256          /*********************************************************************
    257           * STATUS STRINGS
    258           */
    259          #ifdef LCD_SUPPORTED

   \                                 In  segment XDATA_ROM_C, align 1
    260          const char sDeviceName[]   = "  Generic App";
   \                     sDeviceName:
   \   000000   20204765     DB "  Generic App"
   \            6E657269
   \            63204170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
    261          const char sClearLine[]    = " ";
   \                     sClearLine:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
    262          const char sSwGenericApp[]      = "SW1:GENAPP_TODO";  // GENERICAPP_TODO
   \                     sSwGenericApp:
   \   000000   5357313A     DB "SW1:GENAPP_TODO"
   \            47454E41
   \            50505F54
   \            4F444F00

   \                                 In  segment XDATA_ROM_C, align 1
    263          const char sSwBDBMode[]     = "SW2: Start BDB";
   \                     sSwBDBMode:
   \   000000   5357323A     DB "SW2: Start BDB"
   \            20537461
   \            72742042
   \            444200  

   \                                 In  segment XDATA_I, align 1, keep-with-next
    264          char sSwHelp[]             = "SW4: Help       ";  // last character is * if NWK open
   \                     sSwHelp:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for sSwHelp>`
   \   000011                REQUIRE __INIT_XDATA_I
    265          #endif
    266          
    267          /*********************************************************************
    268           * ZCL General Profile Callback table
    269           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    270          static zclGeneral_AppCallbacks_t zclGenericApp_CmdCallbacks =
   \                     zclGenericApp_CmdCallbacks:
   \   000000                DS 24
   \   000018                REQUIRE `?<Initializer for zclGenericApp_CmdCallbacks>`
   \   000018                REQUIRE __INIT_XDATA_I
    271          {
    272            zclGenericApp_BasicResetCB,             // Basic Cluster Reset command
    273            NULL,                                   // Identify Trigger Effect command
    274            NULL,                                   // On/Off cluster commands
    275            NULL,                                   // On/Off cluster enhanced command Off with Effect
    276            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    277            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    278          #ifdef ZCL_LEVEL_CTRL
    279            NULL,                                   // Level Control Move to Level command
    280            NULL,                                   // Level Control Move command
    281            NULL,                                   // Level Control Step command
    282            NULL,                                   // Level Control Stop command
    283          #endif
    284          #ifdef ZCL_GROUPS
    285            NULL,                                   // Group Response commands
    286          #endif
    287          #ifdef ZCL_SCENES
    288            NULL,                                  // Scene Store Request command
    289            NULL,                                  // Scene Recall Request command
    290            NULL,                                  // Scene Response command
    291          #endif
    292          #ifdef ZCL_ALARMS
    293            NULL,                                  // Alarm (Response) commands
    294          #endif
    295          #ifdef SE_UK_EXT
    296            NULL,                                  // Get Event Log command
    297            NULL,                                  // Publish Event Log command
    298          #endif
    299            NULL,                                  // RSSI Location command
    300            NULL                                   // RSSI Location Response command
    301          };
    302          
    303          /*********************************************************************
    304           * GENERICAPP_TODO: Add other callback structures for any additional application specific 
    305           *       Clusters being used, see available callback structures below.
    306           *
    307           *       bdbTL_AppCallbacks_t 
    308           *       zclApplianceControl_AppCallbacks_t 
    309           *       zclApplianceEventsAlerts_AppCallbacks_t 
    310           *       zclApplianceStatistics_AppCallbacks_t 
    311           *       zclElectricalMeasurement_AppCallbacks_t 
    312           *       zclGeneral_AppCallbacks_t 
    313           *       zclGp_AppCallbacks_t 
    314           *       zclHVAC_AppCallbacks_t 
    315           *       zclLighting_AppCallbacks_t 
    316           *       zclMS_AppCallbacks_t 
    317           *       zclPollControl_AppCallbacks_t 
    318           *       zclPowerProfile_AppCallbacks_t 
    319           *       zclSS_AppCallbacks_t  
    320           *
    321           */
    322          
    323          /*********************************************************************
    324           * @fn          zclGenericApp_Init
    325           *
    326           * @brief       Initialization function for the zclGeneral layer.
    327           *
    328           * @param       none
    329           *
    330           * @return      none
    331           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    332          void zclGenericApp_Init( byte task_id )
   \                     zclGenericApp_Init:
    333          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
    334          	
    335            halUARTCfg_t uartConfig;				// NEW
    336            zclGenericApp_TaskID = task_id;
   \   00000B   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00000E   F0           MOVX      @DPTR,A
    337            zclGenericApp_NwkState = DEV_INIT;	// NEW
   \   00000F   90....       MOV       DPTR,#zclGenericApp_NwkState
   \   000012   7401         MOV       A,#0x1
   \   000014   F0           MOVX      @DPTR,A
    338            zclGenericApp_TransID = 0;				// NEW
   \   000015   90....       MOV       DPTR,#zclGenericApp_TransID
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
    339            
    340            //NEW
    341            
    342            // Device hardware initialization can be added here or in main() (Zmain.c).
    343            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   00001A   85..82       MOV       DPL,?XSP + 0
   \   00001D   85..83       MOV       DPH,?XSP + 1
   \   000020   04           INC       A
   \   000021   F0           MOVX      @DPTR,A
    344            uartConfig.baudRate             = HAL_UART_BR_115200;
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   7404         MOV       A,#0x4
   \   000027   F0           MOVX      @DPTR,A
    345            uartConfig.flowControl          = FALSE;
   \   000028   7402         MOV       A,#0x2
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   E4           CLR       A
   \   00002E   F0           MOVX      @DPTR,A
    346            uartConfig.intEnable              = TRUE;              // 2x30 don't care - see uart driver.
   \   00002F   7416         MOV       A,#0x16
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   7401         MOV       A,#0x1
   \   000036   F0           MOVX      @DPTR,A
    347            // uartConfig.callBackFunc         = MT_UartProcessZAppData;
    348            
    349            MT_UartInit();
   \   000037                ; Setup parameters for call to function MT_UartInit
   \   000037   12....       LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
    350            MT_UartRegisterTaskID(0);
   \   00003A                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00003A   7900         MOV       R1,#0x0
   \   00003C   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
    351            HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
   \   00003F                ; Setup parameters for call to function HalUARTOpen
   \   00003F   AA..         MOV       R2,?XSP + 0
   \   000041   AB..         MOV       R3,?XSP + 1
   \   000043   7900         MOV       R1,#0x0
   \   000045   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    352          
    353            // If the hardware is application specific - add it here.
    354            // If the hardware is other parts of the device add it in main().
    355            
    356            // Fill out the endpoint description.
    357            zclGenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000048   90....       MOV       DPTR,#zclGenericApp_epDesc
   \   00004B   E4           CLR       A
   \   00004C   F0           MOVX      @DPTR,A
    358            zclGenericApp_epDesc.task_id = &zclGenericApp_TaskID;
   \   00004D   90....       MOV       DPTR,#zclGenericApp_epDesc + 2
   \   000050   74..         MOV       A,#zclGenericApp_TaskID & 0xff
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   74..         MOV       A,#(zclGenericApp_TaskID >> 8) & 0xff
   \   000056   F0           MOVX      @DPTR,A
    359            zclGenericApp_epDesc.simpleDesc
    360                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000057   A3           INC       DPTR
   \   000058   74..         MOV       A,#GenericApp_SimpleDesc & 0xff
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   74..         MOV       A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00005E   F0           MOVX      @DPTR,A
    361            zclGenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00005F   A3           INC       DPTR
   \   000060   E4           CLR       A
   \   000061   F0           MOVX      @DPTR,A
    362          
    363            // Register the endpoint description with the AF
    364            afRegister( &zclGenericApp_epDesc );
   \   000062                ; Setup parameters for call to function afRegister
   \   000062   7A..         MOV       R2,#zclGenericApp_epDesc & 0xff
   \   000064   7B..         MOV       R3,#(zclGenericApp_epDesc >> 8) & 0xff
   \   000066   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    365          
    366            // Register for all key events - This app will handle all key events
    367            RegisterForKeys( zclGenericApp_TaskID );
   \   000069                ; Setup parameters for call to function RegisterForKeys
   \   000069   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F9           MOV       R1,A
   \   00006E   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    368            
    369            HalUARTWrite(HAL_UART_PORT_0,"Initializing...", sizeof("Initializing..."));
   \   000071                ; Setup parameters for call to function HalUARTWrite
   \   000071   7C10         MOV       R4,#0x10
   \   000073   7D00         MOV       R5,#0x0
   \   000075   7A..         MOV       R2,#`?<Constant "Initializing...">` & 0xff
   \   000077   7B..         MOV       R3,#(`?<Constant "Initializing...">` >> 8) & 0xff
   \   000079   7900         MOV       R1,#0x0
   \   00007B   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    370            HalUARTPoll();
   \   00007E                ; Setup parameters for call to function HalUARTPoll
   \   00007E   12....       LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
    371            
    372            // ENDNEW
    373            
    374            
    375            // This app is part of the Home Automation Profile || Register the Simple Descriptor for this application
    376            bdb_RegisterSimpleDescriptor( &zclGenericApp_SimpleDesc );
   \   000081                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000081   7A..         MOV       R2,#zclGenericApp_SimpleDesc & 0xff
   \   000083   7B..         MOV       R3,#(zclGenericApp_SimpleDesc >> 8) & 0xff
   \   000085   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    377          
    378            // Register the ZCL General Cluster Library callback functions
    379            zclGeneral_RegisterCmdCallbacks( GENERICAPP_ENDPOINT, &zclGenericApp_CmdCallbacks );
   \   000088                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000088   7A..         MOV       R2,#zclGenericApp_CmdCallbacks & 0xff
   \   00008A   7B..         MOV       R3,#(zclGenericApp_CmdCallbacks >> 8) & 0xff
   \   00008C   7900         MOV       R1,#0x0
   \   00008E   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    380            
    381            // GENERICAPP_TODO: Register other cluster command callbacks here
    382          
    383            // Register the application's attribute list
    384            zcl_registerAttrList( GENERICAPP_ENDPOINT, zclGenericApp_NumAttributes, zclGenericApp_Attrs );
   \   000091                ; Setup parameters for call to function zcl_registerAttrList
   \   000091   7C..         MOV       R4,#zclGenericApp_Attrs & 0xff
   \   000093   7D..         MOV       R5,#(zclGenericApp_Attrs >> 8) & 0xff
   \   000095   90....       MOV       DPTR,#zclGenericApp_NumAttributes
   \   000098   E4           CLR       A
   \   000099   93           MOVC      A,@A+DPTR
   \   00009A   FA           MOV       R2,A
   \   00009B   7900         MOV       R1,#0x0
   \   00009D   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    385          
    386            // Register the Application to receive the unprocessed Foundation command/response messages
    387            zcl_registerForMsg( zclGenericApp_TaskID );
   \   0000A0                ; Setup parameters for call to function zcl_registerForMsg
   \   0000A0   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F9           MOV       R1,A
   \   0000A5   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    388          
    389          #ifdef ZCL_DISCOVER
    390            // Register the application's command list
    391            zcl_registerCmdList( GENERICAPP_ENDPOINT, zclCmdsArraySize, zclGenericApp_Cmds );
    392          #endif
    393          
    394            // Register low voltage NV memory protection application callback
    395          //  RegisterVoltageWarningCB( zclGenericApp_BatteryWarningCB );
    396          
    397            // Register for all key events - This app will handle all key events
    398            RegisterForKeys( zclGenericApp_TaskID );
   \   0000A8                ; Setup parameters for call to function RegisterForKeys
   \   0000A8   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F9           MOV       R1,A
   \   0000AD   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    399          
    400              
    401            bdb_RegisterCommissioningStatusCB( zclGenericApp_ProcessCommissioningStatus );
   \   0000B0                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   0000B0   7A..         MOV       R2,#`??zclGenericApp_ProcessCommissioningStatus::?re` & 0xff
   \   0000B2   7B..         MOV       R3,#(`??zclGenericApp_ProcessCommissioningStatus::?re` >> 8) & 0xff
   \   0000B4   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    402            bdb_RegisterIdentifyTimeChangeCB( zclGenericApp_ProcessIdentifyTimeChange );
   \   0000B7                ; Setup parameters for call to function bdb_RegisterIdentifyTimeChangeCB
   \   0000B7   7A..         MOV       R2,#`??zclGenericApp_ProcessIdentifyTimeChange::?rel` & 0xff
   \   0000B9   7B..         MOV       R3,#(`??zclGenericApp_ProcessIdentifyTimeChange::?rel` >> 8) & 0xff
   \   0000BB   12....       LCALL     `??bdb_RegisterIdentifyTimeChangeCB::?relay`; Banked call to: bdb_RegisterIdentifyTimeChangeCB
    403            bdb_RegisterBindNotificationCB( zclGenericApp_BindNotification );
   \   0000BE                ; Setup parameters for call to function bdb_RegisterBindNotificationCB
   \   0000BE   7A..         MOV       R2,#`??zclGenericApp_BindNotification::?relay` & 0xff
   \   0000C0   7B..         MOV       R3,#(`??zclGenericApp_BindNotification::?relay` >> 8) & 0xff
   \   0000C2   12....       LCALL     `??bdb_RegisterBindNotificationCB::?relay`; Banked call to: bdb_RegisterBindNotificationCB
    404          
    405          #ifdef BDB_REPORTING
    406            //Adds the default configuration values for the reportable attributes of the ZCL_CLUSTER_ID_HVAC_THERMOSTAT cluster, for endpoint SAMPLETHERMOSTAT_ENDPOINT
    407            //Default maxReportingInterval value is 10 seconds
    408            //Default minReportingInterval value is 3 seconds
    409            //Default reportChange value is 300 (3 degrees)
    410            bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETHERMOSTAT_ENDPOINT, ZCL_CLUSTER_ID_HVAC_THERMOSTAT, ATTRID_HVAC_THERMOSTAT_LOCAL_TEMPERATURE, 0, 10, reportableChange);
    411            bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETHERMOSTAT_ENDPOINT, ZCL_CLUSTER_ID_HVAC_THERMOSTAT, ATTRID_HVAC_THERMOSTAT_PI_COOLING_DEMAND, 0, 10, reportableChange);
    412            bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETHERMOSTAT_ENDPOINT, ZCL_CLUSTER_ID_HVAC_THERMOSTAT, ATTRID_HVAC_THERMOSTAT_PI_HEATING_DEMAND, 0, 10, reportableChange);
    413          #endif  
    414            
    415            zdpExternalStateTaskID = zclGenericApp_TaskID;
   \   0000C5   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   0000CC   F0           MOVX      @DPTR,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   E4           CLR       A
   \   0000CF   F0           MOVX      @DPTR,A
    416          
    417          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
    418            bdb_RegisterTouchlinkTargetEnableCB( zclGenericApp_ProcessTouchlinkTargetEnable );
    419          #endif
    420          
    421          #ifdef ZCL_DIAGNOSTIC
    422            // Register the application's callback function to read/write attribute data.
    423            // This is only required when the attribute data format is unknown to ZCL.
    424            zcl_registerReadWriteCB( GENERICAPP_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    425          
    426            if ( zclDiagnostic_InitStats() == ZSuccess )
    427            {
    428              // Here the user could start the timer to save Diagnostics to NV
    429            }
    430          #endif
    431          
    432          
    433          #ifdef LCD_SUPPORTED
    434            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
   \   0000D0                ; Setup parameters for call to function HalLcdWriteString
   \   0000D0   7903         MOV       R1,#0x3
   \   0000D2   7A..         MOV       R2,#sDeviceName & 0xff
   \   0000D4   7B..         MOV       R3,#(sDeviceName >> 8) & 0xff
   \   0000D6   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    435          #endif  // LCD_SUPPORTED
    436          
    437          
    438          }
   \   0000D9   741D         MOV       A,#0x1d
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DE                REQUIRE ?Subroutine0
   \   0000DE                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    439          
    440          /*********************************************************************
    441           * @fn          zclSample_event_loop
    442           *
    443           * @brief       Event Loop Processor for zclGeneral.
    444           *
    445           * @param       none
    446           *
    447           * @return      none
    448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          uint16 zclGenericApp_event_loop( uint8 task_id, uint16 events )
   \                     zclGenericApp_event_loop:
    450          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    451          //  if (HAL_KEY_SW_6) {
    452          //	  HalUARTWrite(HAL_UART_PORT_0, "ok", sizeof("not ok"));
    453          //	  HalUARTPoll();
    454          //	  HalLedSet(HAL_LED_3, HAL_LED_MODE_TOGGLE);
    455          //  }
    456            
    457            HalUARTWrite(HAL_UART_PORT_0, "ok", (byte)osal_strlen("ok"));
   \   000009   75....       MOV       ?V0,#`?<Constant "ok">` & 0xff
   \   00000C   75....       MOV       ?V1,#(`?<Constant "ok">` >> 8) & 0xff
   \   00000F                ; Setup parameters for call to function osal_strlen
   \   00000F   12....       LCALL     ?Subroutine6 & 0xFFFF
    458            HalUARTPoll();
    459          	
    460            afIncomingMSGPacket_t *MSGpkt;
    461            afDataConfirm_t *afDataConfirm; // NEW
    462          
    463            // NEW
    464            
    465            // Data Confirmation message fields
    466            byte sentEP;
    467            ZStatus_t sentStatus;
    468            byte sentTransID;       // This should match the value sent
    469            
    470            //ENDNEW
    471            (void)task_id;  // Intentionally unreferenced parameter
    472            
    473            
    474            bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING);
   \                     ??CrossCallReturnLabel_7:
   \   000012                ; Setup parameters for call to function bdb_StartCommissioning
   \   000012   790A         MOV       R1,#0xa
   \   000014   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    475            
    476          
    477            if ( events & SYS_EVENT_MSG )
   \   000017   EF           MOV       A,R7
   \   000018   5480         ANL       A,#0x80
   \   00001A   7038         JNZ       ??zclGenericApp_event_loop_0
    478            {
    479              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclGenericApp_TaskID )) )
    480              {
    481                switch ( MSGpkt->hdr.event )
    482                {
    483          #ifdef MT_APP_FUNC
    484                  case MT_SYS_APP_MSG:
    485                    // Message received from MT
    486                    zclGenericApp_ProcessAppMsg( ((mtSysAppMsg_t *)MSGpkt)->endpoint,
    487                                                    ((mtSysAppMsg_t *)MSGpkt)->appDataLen,
    488                                                    ((mtSysAppMsg_t *)MSGpkt)->appData );
    489          #endif
    490                    break;
    491          	      // NEW
    492          	case ZDO_CB_MSG:
    493                    zclGenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    494                    break;
    495          	  
    496          	case AF_DATA_CONFIRM_CMD:
    497                    // This message is received as a confirmation of a data packet sent.
    498                    // The status is of ZStatus_t type [defined in ZComDef.h]
    499                    // The message fields are defined in AF.h
    500                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    501                    sentEP = afDataConfirm->endpoint;
    502                    sentStatus = afDataConfirm->hdr.status;
    503                    sentTransID = afDataConfirm->transID;
    504                    (void)sentEP;
    505                    (void)sentTransID;
    506          
    507                    // Action taken when confirmation is received.
    508                    if ( sentStatus != ZSuccess )
    509                    {
    510                      // The data wasn't delivered -- Do something
    511                      HalUARTWrite(0, "Data Lost\r\n", 8);
    512                    }
    513                    else {
    514                      HalUARTWrite(0, "Data Sent\r\n", 8);
    515                    }
    516                    break;
    517          
    518                  case AF_INCOMING_MSG_CMD:
    519                    zclGenericApp_MessageMSGCB( MSGpkt );
    520                    break;
    521          	  // ENDNEW
    522          
    523          	  
    524                  case ZCL_INCOMING_MSG:
    525                    // Incoming ZCL Foundation command/response messages
    526                    zclGenericApp_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    527                    break;
    528          
    529                  case KEY_CHANGE:
    530                    zclGenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    531                    break;
    532          
    533                  case ZDO_STATE_CHANGE:
    534                    zclGenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    535          
    536                    // now on the network
    537                    if ( (zclGenericApp_NwkState == DEV_ZB_COORD) ||
    538                         (zclGenericApp_NwkState == DEV_ROUTER)   ||
    539                         (zclGenericApp_NwkState == DEV_END_DEVICE) )
    540                    {
    541                      giGenAppScreenMode = GENERIC_MAINMODE;
    542                      zclGenericApp_LcdDisplayUpdate();
    543                    }
    544                    break;
    545          
    546                  default:
    547                    break;
    548                }
    549          
    550                // Release the memory
    551                osal_msg_deallocate( (uint8 *)MSGpkt );
    552                
    553                // Next
    554                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclGenericApp_TaskID );		// NEW
    555              }
    556          
    557              // return unprocessed events
    558              return (events ^ SYS_EVENT_MSG);
    559            }
    560            
    561            // NEW
    562            
    563          #if ZG_BUILD_ENDDEVICE_TYPE    
    564            if ( events & GENERICAPP_END_DEVICE_REJOIN_EVT )
    565            {
    566              bdb_ZedAttemptRecoverNwk();
    567              return ( events ^ GENERICAPP_END_DEVICE_REJOIN_EVT );
    568            }
    569          #endif
    570            
    571            
    572            // Send a message out - This event is generated by a timer
    573            //  (setup in GenericApp_Init()).
    574            if ( events & GENERICAPP_SEND_MSG_EVT )
   \   00001C   EE           MOV       A,R6
   \   00001D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001F   4003         JC        $+5
   \   000021   02....       LJMP      ??zclGenericApp_event_loop_1 & 0xFFFF
    575            {
    576              // Send "the" message
    577              //GenericApp_SendTheMessage();
    578              // return unprocessed events
    579              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \   000024   6401         XRL       A,#0x1
   \   000026   02....       LJMP      ??zclGenericApp_event_loop_2 & 0xFFFF
    580            }
   \                     ??zclGenericApp_event_loop_3:
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   90....       MOV       DPTR,#zclGenericApp_NwkState
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   6409         XRL       A,#0x9
   \   000031   600A         JZ        ??zclGenericApp_event_loop_4
   \   000033   E0           MOVX      A,@DPTR
   \   000034   6407         XRL       A,#0x7
   \   000036   6005         JZ        ??zclGenericApp_event_loop_4
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6406         XRL       A,#0x6
   \   00003B   7008         JNZ       ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_4:
   \   00003D   90....       MOV       DPTR,#giGenAppScreenMode
   \   000040   E4           CLR       A
   \   000041   F0           MOVX      @DPTR,A
   \   000042                ; Setup parameters for call to function zclGenericApp_LcdDisplayUpdate
   \   000042   12....       LCALL     `??zclGenericApp_LcdDisplayUpdate::?relay`; Banked call to: zclGenericApp_LcdDisplayUpdate
   \                     ??zclGenericApp_event_loop_5:
   \   000045                ; Setup parameters for call to function osal_msg_deallocate
   \   000045   AA..         MOV       R2,?V0
   \   000047   AB..         MOV       R3,?V1
   \   000049   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   00004C                ; Setup parameters for call to function osal_msg_receive
   \   00004C   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F9           MOV       R1,A
   \   000051   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \                     ??zclGenericApp_event_loop_0:
   \   000054                ; Setup parameters for call to function osal_msg_receive
   \   000054   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F9           MOV       R1,A
   \   000059   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00005C   8A..         MOV       ?V0,R2
   \   00005E   8B..         MOV       ?V1,R3
   \   000060   EA           MOV       A,R2
   \   000061   4B           ORL       A,R3
   \   000062   7003         JNZ       $+5
   \   000064   02....       LJMP      ??zclGenericApp_event_loop_6 & 0xFFFF
   \   000067   8A82         MOV       DPL,R2
   \   000069   8B83         MOV       DPH,R3
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   24E6         ADD       A,#-0x1a
   \   00006E   6034         JZ        ??zclGenericApp_event_loop_7
   \   000070   24E6         ADD       A,#-0x1a
   \   000072   6035         JZ        ??zclGenericApp_event_loop_8
   \   000074   2474         ADD       A,#0x74
   \   000076   607C         JZ        ??zclGenericApp_event_loop_9
   \   000078   24EF         ADD       A,#-0x11
   \   00007A   60AD         JZ        ??zclGenericApp_event_loop_3
   \   00007C   24FE         ADD       A,#-0x2
   \   00007E   6006         JZ        ??zclGenericApp_event_loop_10
   \   000080   24D6         ADD       A,#-0x2a
   \   000082   6007         JZ        ??zclGenericApp_event_loop_11
   \   000084   80BF         SJMP      ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_10:
   \   000086                ; Setup parameters for call to function zclGenericApp_ProcessZDOMsgs
   \   000086   12....       LCALL     `??zclGenericApp_ProcessZDOMsgs::?relay`; Banked call to: zclGenericApp_ProcessZDOMsgs
   \   000089   80BA         SJMP      ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_11:
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   7C08         MOV       R4,#0x8
   \   00008F   7D00         MOV       R5,#0x0
   \   000091   600B         JZ        ??zclGenericApp_event_loop_12
   \   000093                ; Setup parameters for call to function HalUARTWrite
   \   000093   7A..         MOV       R2,#`?<Constant "Data Lost\\r\\n">` & 0xff
   \   000095   7B..         MOV       R3,#(`?<Constant "Data Lost\\r\\n">` >> 8) & 0xff
   \                     ??zclGenericApp_event_loop_13:
   \   000097   7900         MOV       R1,#0x0
   \   000099   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   00009C   80A7         SJMP      ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_12:
   \   00009E                ; Setup parameters for call to function HalUARTWrite
   \   00009E   7A..         MOV       R2,#`?<Constant "Data Sent\\r\\n">` & 0xff
   \   0000A0   7B..         MOV       R3,#(`?<Constant "Data Sent\\r\\n">` >> 8) & 0xff
   \   0000A2   80F3         SJMP      ??zclGenericApp_event_loop_13
   \                     ??zclGenericApp_event_loop_7:
   \   0000A4                ; Setup parameters for call to function zclGenericApp_MessageMSGCB
   \   0000A4   12....       LCALL     `??zclGenericApp_MessageMSGCB::?relay`; Banked call to: zclGenericApp_MessageMSGCB
   \   0000A7   809C         SJMP      ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_8:
   \   0000A9   EA           MOV       A,R2
   \   0000AA   2417         ADD       A,#0x17
   \   0000AC   F8           MOV       R0,A
   \   0000AD   E4           CLR       A
   \   0000AE   35..         ADDC      A,?V1
   \   0000B0   F9           MOV       R1,A
   \   0000B1   E8           MOV       A,R0
   \   0000B2   FA           MOV       R2,A
   \   0000B3   E9           MOV       A,R1
   \   0000B4   FB           MOV       R3,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   14           DEC       A
   \   0000BE   6011         JZ        ??zclGenericApp_event_loop_14
   \   0000C0   24FD         ADD       A,#-0x3
   \   0000C2   701A         JNZ       ??zclGenericApp_event_loop_15
   \   0000C4   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   F9           MOV       R1,A
   \   0000C9   E8           MOV       A,R0
   \   0000CA   C3           CLR       C
   \   0000CB   99           SUBB      A,R1
   \   0000CC   5010         JNC       ??zclGenericApp_event_loop_15
   \   0000CE   08           INC       R0
   \   0000CF   80F6         SJMP      ??CrossCallReturnLabel_0
   \                     ??zclGenericApp_event_loop_14:
   \   0000D1   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000D4   8001         SJMP      ??zclGenericApp_event_loop_16
   \                     ??zclGenericApp_event_loop_17:
   \   0000D6   08           INC       R0
   \                     ??zclGenericApp_event_loop_16:
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   F9           MOV       R1,A
   \   0000D9   E8           MOV       A,R0
   \   0000DA   C3           CLR       C
   \   0000DB   99           SUBB      A,R1
   \   0000DC   40F8         JC        ??zclGenericApp_event_loop_17
   \                     ??zclGenericApp_event_loop_15:
   \   0000DE   8A82         MOV       DPL,R2
   \   0000E0   8B83         MOV       DPH,R3
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   FA           MOV       R2,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   FB           MOV       R3,A
   \   0000E7   EA           MOV       A,R2
   \   0000E8   4B           ORL       A,R3
   \   0000E9   7003         JNZ       $+5
   \   0000EB   02....       LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
   \   0000EE                ; Setup parameters for call to function osal_mem_free
   \   0000EE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000F1   02....       LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
   \                     ??zclGenericApp_event_loop_9:
   \   0000F4                ; Setup parameters for call to function zclGenericApp_HandleKeys
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   FA           MOV       R2,A
   \   0000F9   85..82       MOV       DPL,?V0
   \   0000FC   8B83         MOV       DPH,R3
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   E0           MOVX      A,@DPTR
   \   000101   F9           MOV       R1,A
   \   000102   12....       LCALL     `??zclGenericApp_HandleKeys::?relay`; Banked call to: zclGenericApp_HandleKeys
   \   000105   02....       LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
   \                     ??zclGenericApp_event_loop_6:
   \   000108   EE           MOV       A,R6
   \   000109   FA           MOV       R2,A
   \   00010A   EF           MOV       A,R7
   \   00010B   6480         XRL       A,#0x80
   \   00010D   8034         SJMP      ??zclGenericApp_event_loop_18
    581            
    582          //  if (events & GENERICAPP_UART_RX_EVT) {
    583          //    HalUARTWrite(0, "RX_EVT", 7);
    584          //    zclGenericApp_SerialMSGCB();
    585          //  }
    586                zclGenericApp_SerialMSGCB();
   \                     ??zclGenericApp_event_loop_1:
   \   00010F                ; Setup parameters for call to function zclGenericApp_SerialMSGCB
   \   00010F   12....       LCALL     `??zclGenericApp_SerialMSGCB::?relay`; Banked call to: zclGenericApp_SerialMSGCB
    587            
    588            // ENDNEW
    589            
    590          
    591          //  if ( events & GENERICAPP_MAIN_SCREEN_EVT )
    592          //  {
    593          //    giGenAppScreenMode = GENERIC_MAINMODE;
    594          //    zclGenericApp_LcdDisplayUpdate();
    595          //    return ( events ^ GENERICAPP_MAIN_SCREEN_EVT );
    596          //  }
    597            
    598          #if ZG_BUILD_ENDDEVICE_TYPE    
    599            if ( events & GENERICAPP_END_DEVICE_REJOIN_EVT )
    600            {
    601              bdb_ZedAttemptRecoverNwk();
    602              return ( events ^ GENERICAPP_END_DEVICE_REJOIN_EVT );
    603            }
    604          #endif
    605          
    606            /* GENERICAPP_TODO: handle app events here */
    607            
    608            
    609            if ( events & GENERICAPP_EVT_1 )
   \   000112   EE           MOV       A,R6
   \   000113   5408         ANL       A,#0x8
   \   000115   602F         JZ        ??zclGenericApp_event_loop_19
    610            {
    611              // toggle LED 2 state, start another timer for 500ms
    612          	HalUARTWrite(HAL_UART_PORT_0, "toggle", (byte)osal_strlen("toggle"));
   \   000117   75....       MOV       ?V0,#`?<Constant "toggle">` & 0xff
   \   00011A   75....       MOV       ?V1,#(`?<Constant "toggle">` >> 8) & 0xff
   \   00011D                ; Setup parameters for call to function osal_strlen
   \   00011D   12....       LCALL     ?Subroutine6 & 0xFFFF
    613          	HalUARTPoll();
    614              HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
   \                     ??CrossCallReturnLabel_8:
   \   000120                ; Setup parameters for call to function HalLedSet
   \   000120   7A08         MOV       R2,#0x8
   \   000122   7902         MOV       R1,#0x2
   \   000124   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    615              osal_start_timerEx( zclGenericApp_TaskID, GENERICAPP_EVT_1, 500 );
   \   000127                ; Setup parameters for call to function osal_start_timerEx
   \   000127   90....       MOV       DPTR,#__Constant_1f4
   \   00012A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00012D   7A08         MOV       R2,#0x8
   \   00012F   7B00         MOV       R3,#0x0
   \   000131   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   000134   E0           MOVX      A,@DPTR
   \   000135   F9           MOV       R1,A
   \   000136   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000139   7404         MOV       A,#0x4
   \   00013B   12....       LCALL     ?DEALLOC_XSTACK8
    616              
    617              return ( events ^ GENERICAPP_EVT_1 );
   \   00013E   EE           MOV       A,R6
   \   00013F   6408         XRL       A,#0x8
   \                     ??zclGenericApp_event_loop_2:
   \   000141   FA           MOV       R2,A
   \   000142   EF           MOV       A,R7
   \                     ??zclGenericApp_event_loop_18:
   \   000143   FB           MOV       R3,A
   \   000144   8004         SJMP      ??zclGenericApp_event_loop_20
    618            }
    619            
    620            /*
    621            if ( events & GENERICAPP_EVT_2 )
    622            {
    623              
    624              return ( events ^ GENERICAPP_EVT_2 );
    625            }
    626            
    627            if ( events & GENERICAPP_EVT_3 )
    628            {
    629              
    630              return ( events ^ GENERICAPP_EVT_3 );
    631            }
    632            */
    633            
    634            // Discard unknown events
    635            return 0;
   \                     ??zclGenericApp_event_loop_19:
   \   000146   7A00         MOV       R2,#0x0
   \   000148   7B00         MOV       R3,#0x0
   \                     ??zclGenericApp_event_loop_20:
   \   00014A   7F04         MOV       R7,#0x4
   \   00014C   02....       LJMP      ?BANKED_LEAVE_XDATA
    636          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000007   8A..         MOV       ?V2,R2
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009   AC..         MOV       R4,?V2
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   AA..         MOV       R2,?V0
   \   00000F   AB..         MOV       R3,?V1
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000016                ; Setup parameters for call to function HalUARTPoll
   \   000016                ; Setup parameters for call to function HalUARTPoll
   \   000016   12....       LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   7800         MOV       R0,#0x0
   \   00000E   22           RET
    637          
    638          
    639          
    640          
    641          
    642          
    643          // NEW
    644          
    645          /*********************************************************************
    646           * Event Generation Functions
    647           */
    648           
    649          /*********************************************************************
    650           * @fn      zclGenericApp_ProcessZDOMsgs()
    651           * @brief   Process response messages
    652           * @param   none
    653           * @return  none
    654           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    655          void zclGenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     zclGenericApp_ProcessZDOMsgs:
    656          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    657            switch ( inMsg->clusterID )
   \   000005   EA           MOV       A,R2
   \   000006   240C         ADD       A,#0xc
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6406         XRL       A,#0x6
   \   000011   7004         JNZ       ??zclGenericApp_ProcessZDOMsgs_0
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   6480         XRL       A,#0x80
   \                     ??zclGenericApp_ProcessZDOMsgs_0:
   \   000017   7036         JNZ       ??zclGenericApp_ProcessZDOMsgs_1
    658            {
    659              case Match_Desc_rsp:
    660                {
    661                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \   000019                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000019   12....       LCALL     `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
    662                  if ( pRsp )
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   602F         JZ        ??zclGenericApp_ProcessZDOMsgs_1
    663                  {
    664                    if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   E0           MOVX      A,@DPTR
   \   000025   7025         JNZ       ??zclGenericApp_ProcessZDOMsgs_2
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   601F         JZ        ??zclGenericApp_ProcessZDOMsgs_2
    665                    {
    666                      zclGenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00002D   90....       MOV       DPTR,#zclGenericApp_DstAddr + 8
   \   000030   7402         MOV       A,#0x2
   \   000032   12....       LCALL     ?Subroutine4 & 0xFFFF
    667                      zclGenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    668                      // Take the first endpoint, Can be changed to search through endpoints
    669                      zclGenericApp_DstAddr.endPoint = pRsp->epList[0];
    670                      // Light LED
    671                      //HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    672                    }
   \                     ??CrossCallReturnLabel_2:
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F8           MOV       R0,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   90....       MOV       DPTR,#zclGenericApp_DstAddr
   \   00003D   E8           MOV       A,R0
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   E9           MOV       A,R1
   \   000041   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   90....       MOV       DPTR,#zclGenericApp_DstAddr + 9
   \   00004B   F0           MOVX      @DPTR,A
    673                    osal_mem_free( pRsp );
   \                     ??zclGenericApp_ProcessZDOMsgs_2:
   \   00004C                ; Setup parameters for call to function osal_mem_free
   \   00004C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    674                  }
    675                }
    676                break;
    677            }
    678          }
   \                     ??zclGenericApp_ProcessZDOMsgs_1:
   \   00004F   7F02         MOV       R7,#0x2
   \   000051   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET
    679          
    680          
    681          
    682          
    683          
    684          /*********************************************************************
    685           * LOCAL FUNCTIONS
    686           */
    687          
    688          /*********************************************************************
    689           * @fn      zclGenericApp_MessageMSGCB
    690           * @brief   Data message processor callback.  This function processes
    691           *          any incoming data - probably from other devices.  So, based
    692           *          on cluster ID, perform the intended action.
    693           * @param   none
    694           * @return  none
    695           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    696          void zclGenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     zclGenericApp_MessageMSGCB:
    697          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    698            unsigned char temp_extAddr[8];
    699            unsigned char i = 0;
   \   00000E   75..00       MOV       ?V0,#0x0
    700            unsigned char existed = 0;
    701            unsigned char buffer[8] = "";
   \   000011   90....       MOV       DPTR,#`?<Constant "">`
   \   000014   AC..         MOV       R4,?XSP + 0
   \   000016   AD..         MOV       R5,?XSP + 1
   \   000018   7408         MOV       A,#0x8
   \   00001A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    702            switch ( pkt->clusterId )
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6401         XRL       A,#0x1
   \   000028   7002         JNZ       ??zclGenericApp_MessageMSGCB_0
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \                     ??zclGenericApp_MessageMSGCB_0:
   \   00002C   6003         JZ        $+5
   \   00002E   02....       LJMP      ??zclGenericApp_MessageMSGCB_1 & 0xFFFF
    703            {
    704              case GENERICAPP_CLUSTERID:
    705                {// "the" message
    706                  (void)APSME_LookupExtAddr(pkt->srcAddr.addr.shortAddr, temp_extAddr);
   \   000031                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000031   7408         MOV       A,#0x8
   \   000033   12....       LCALL     ?XSTACK_DISP102_8
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   FA           MOV       R2,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   FB           MOV       R3,A
   \   000045   12....       LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
    707                  for (i = 0; i < device_count+1; i++) {  // to see whether the device ever connected
   \   000048   7408         MOV       A,#0x8
   \   00004A   12....       LCALL     ?XSTACK_DISP100_8
   \   00004D   88..         MOV       ?V4,R0
   \   00004F   89..         MOV       ?V5,R1
   \   000051   75..00       MOV       ?V6,#0x0
   \   000054   8002         SJMP      ??zclGenericApp_MessageMSGCB_2
   \                     ??zclGenericApp_MessageMSGCB_3:
   \   000056   05..         INC       ?V0
   \                     ??zclGenericApp_MessageMSGCB_2:
   \   000058   AA..         MOV       R2,?V0
   \   00005A   90....       MOV       DPTR,#device_count
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   7900         MOV       R1,#0x0
   \   000060   2401         ADD       A,#0x1
   \   000062   F8           MOV       R0,A
   \   000063   5001         JNC       ??zclGenericApp_MessageMSGCB_4
   \   000065   09           INC       R1
   \                     ??zclGenericApp_MessageMSGCB_4:
   \   000066   C3           CLR       C
   \   000067   EA           MOV       A,R2
   \   000068   98           SUBB      A,R0
   \   000069   E4           CLR       A
   \   00006A   99           SUBB      A,R1
   \   00006B   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00006D   65D0         XRL       A,PSW
   \   00006F   33           RLC       A
   \   000070   5038         JNC       ??zclGenericApp_MessageMSGCB_5
    708                    if (osal_memcmp(EndDeviceInfos[i].extAddr, temp_extAddr, 8)) { //if existed, break;
   \   000072                ; Setup parameters for call to function osal_memcmp
   \   000072   78..         MOV       R0,#?V4
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000077   7C08         MOV       R4,#0x8
   \   000079   7D00         MOV       R5,#0x0
   \   00007B   EA           MOV       A,R2
   \   00007C   75F00A       MOV       B,#0xa
   \   00007F   A4           MUL       AB
   \   000080   FA           MOV       R2,A
   \   000081   ABF0         MOV       R3,B
   \   000083   74..         MOV       A,#(EndDeviceInfos + 1) & 0xff
   \   000085   2A           ADD       A,R2
   \   000086   F5..         MOV       ?V2,A
   \   000088   74..         MOV       A,#((EndDeviceInfos + 1) >> 8) & 0xff
   \   00008A   3B           ADDC      A,R3
   \   00008B   A9..         MOV       R1,?V2
   \   00008D   FA           MOV       R2,A
   \   00008E   7B00         MOV       R3,#0x0
   \   000090   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000093   7403         MOV       A,#0x3
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   E9           MOV       A,R1
   \   000099   60BB         JZ        ??zclGenericApp_MessageMSGCB_3
    709                      existed = 1;
    710                      HalUARTWrite(0, "Device Found Form Previous Log -> Existed!\r\n", 36);
   \   00009B                ; Setup parameters for call to function HalUARTWrite
   \   00009B   7C24         MOV       R4,#0x24
   \   00009D   7D00         MOV       R5,#0x0
   \   00009F   7A..         MOV       R2,#`?<Constant "Device Found Form Pre...">` & 0xff
   \   0000A1   7B..         MOV       R3,#(`?<Constant "Device Found Form Pre...">` >> 8) & 0xff
   \   0000A3   7900         MOV       R1,#0x0
   \   0000A5   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    711                      break;
   \   0000A8   8053         SJMP      ??zclGenericApp_MessageMSGCB_6
    712                    }
    713                  }
    714                  if ( !existed ) {  //not connected before, register
    715                    HalUARTWrite(0, "New Device!\r\n",15);
   \                     ??zclGenericApp_MessageMSGCB_5:
   \   0000AA                ; Setup parameters for call to function HalUARTWrite
   \   0000AA   7C0F         MOV       R4,#0xf
   \   0000AC   7D00         MOV       R5,#0x0
   \   0000AE   7A..         MOV       R2,#`?<Constant "New Device!\\r\\n">` & 0xff
   \   0000B0   7B..         MOV       R3,#(`?<Constant "New Device!\\r\\n">` >> 8) & 0xff
   \   0000B2   7900         MOV       R1,#0x0
   \   0000B4   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    716                    osal_memcpy(EndDeviceInfos[device_count].extAddr, temp_extAddr, 8);
   \   0000B7                ; Setup parameters for call to function osal_memcpy
   \   0000B7   78..         MOV       R0,#?V4
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BC   7C08         MOV       R4,#0x8
   \   0000BE   7D00         MOV       R5,#0x0
   \   0000C0   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000C3   74..         MOV       A,#(EndDeviceInfos + 1) & 0xff
   \   0000C5   28           ADD       A,R0
   \   0000C6   FA           MOV       R2,A
   \   0000C7   74..         MOV       A,#((EndDeviceInfos + 1) >> 8) & 0xff
   \   0000C9   39           ADDC      A,R1
   \   0000CA   FB           MOV       R3,A
   \   0000CB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CE   7403         MOV       A,#0x3
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
    717                    EndDeviceInfos[device_count].endPoint = pkt->srcAddr.endPoint;
   \   0000D3   EE           MOV       A,R6
   \   0000D4   240F         ADD       A,#0xf
   \   0000D6   F582         MOV       DPL,A
   \   0000D8   E4           CLR       A
   \   0000D9   3F           ADDC      A,R7
   \   0000DA   F583         MOV       DPH,A
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   FA           MOV       R2,A
   \   0000DE   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000E1   74..         MOV       A,#EndDeviceInfos & 0xff
   \   0000E3   28           ADD       A,R0
   \   0000E4   F582         MOV       DPL,A
   \   0000E6   74..         MOV       A,#(EndDeviceInfos >> 8) & 0xff
   \   0000E8   39           ADDC      A,R1
   \   0000E9   F583         MOV       DPH,A
   \   0000EB   EA           MOV       A,R2
   \   0000EC   F0           MOVX      @DPTR,A
    718                    EndDeviceInfos[device_count].compressed_addr = GENERICAPP_ENDPOINT | EndDeviceInfos[device_count].endPoint;
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   A3           INC       DPTR
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   F0           MOVX      @DPTR,A
    719                    device_count++;	// device added
   \   0000F7   90....       MOV       DPTR,#device_count
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   04           INC       A
   \   0000FC   F0           MOVX      @DPTR,A
    720                  }
    721                  if (device_count == 16) { device_count = 0;}  //in case to overflow
   \                     ??zclGenericApp_MessageMSGCB_6:
   \   0000FD   90....       MOV       DPTR,#device_count
   \   000100   E0           MOVX      A,@DPTR
   \   000101   6410         XRL       A,#0x10
   \   000103   7002         JNZ       ??zclGenericApp_MessageMSGCB_7
   \   000105   E4           CLR       A
   \   000106   F0           MOVX      @DPTR,A
    722                  //TO DO: process data received, send it to slave machine
    723                  osal_memcpy(&buffer[0], pkt->cmd.Data, 8);
   \                     ??zclGenericApp_MessageMSGCB_7:
   \   000107                ; Setup parameters for call to function osal_memcpy
   \   000107   EE           MOV       A,R6
   \   000108   2422         ADD       A,#0x22
   \   00010A   F582         MOV       DPL,A
   \   00010C   E4           CLR       A
   \   00010D   3F           ADDC      A,R7
   \   00010E   F583         MOV       DPH,A
   \   000110   E0           MOVX      A,@DPTR
   \   000111   F5..         MOV       ?V0,A
   \   000113   A3           INC       DPTR
   \   000114   E0           MOVX      A,@DPTR
   \   000115   F5..         MOV       ?V1,A
   \   000117   75..00       MOV       ?V2,#0x0
   \   00011A   78..         MOV       R0,#?V0
   \   00011C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011F   7C08         MOV       R4,#0x8
   \   000121   7D00         MOV       R5,#0x0
   \   000123   7403         MOV       A,#0x3
   \   000125   12....       LCALL     ?XSTACK_DISP101_8
   \   000128   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012B   7403         MOV       A,#0x3
   \   00012D   12....       LCALL     ?DEALLOC_XSTACK8
    724                  str_reverse((char*)&buffer[3], 1);
   \   000130                ; Setup parameters for call to function str_reverse
   \   000130   7C01         MOV       R4,#0x1
   \   000132   7D00         MOV       R5,#0x0
   \   000134   7403         MOV       A,#0x3
   \   000136   12....       LCALL     ?XSTACK_DISP0_8
   \   000139   AA82         MOV       R2,DPL
   \   00013B   AB83         MOV       R3,DPH
   \   00013D   12....       LCALL     `??str_reverse::?relay`; Banked call to: str_reverse
    725                  HalUARTWrite(0, &buffer[0], 8);
   \   000140                ; Setup parameters for call to function HalUARTWrite
   \   000140   7C08         MOV       R4,#0x8
   \   000142   7D00         MOV       R5,#0x0
   \   000144   AA..         MOV       R2,?XSP + 0
   \   000146   AB..         MOV       R3,?XSP + 1
   \   000148   7900         MOV       R1,#0x0
   \   00014A   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    726                  break;
    727                }
    728            }
    729          }
   \                     ??zclGenericApp_MessageMSGCB_1:
   \   00014D   7410         MOV       A,#0x10
   \   00014F                REQUIRE ?Subroutine1
   \   00014F                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV       DPTR,#device_count
   \   000003   E0           MOVX      A,@DPTR
   \   000004   75F00A       MOV       B,#0xa
   \   000007   A4           MUL       AB
   \   000008   F8           MOV       R0,A
   \   000009   A9F0         MOV       R1,B
   \   00000B   22           RET
    730          
    731          
    732          
    733          
    734          
    735          /*********************************************************************
    736           * @fn     zclGenericApp_SendTheMessage
    737           * @brief   Send "the" message.
    738           * @param   none
    739           * @return  none
    740           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    741          void zclGenericApp_SendTheMessage( unsigned char dest_endID, unsigned char cmd, unsigned int data)
   \                     zclGenericApp_SendTheMessage:
    742          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V1,R2
   \   00000C   EC           MOV       A,R4
   \   00000D   FA           MOV       R2,A
   \   00000E   ED           MOV       A,R5
   \   00000F   FB           MOV       R3,A
    743            unsigned char theMessageData[6] = "";
   \   000010   90....       MOV       DPTR,#`?<Constant "">_1`
   \   000013   AC..         MOV       R4,?XSP + 0
   \   000015   AD..         MOV       R5,?XSP + 1
   \   000017   7406         MOV       A,#0x6
   \   000019   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    744            theMessageData[0] = 0xCC;  //beginning check byte
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   74CC         MOV       A,#-0x34
   \   000024   F0           MOVX      @DPTR,A
    745            theMessageData[1] = EndDeviceInfos[dest_endID].compressed_addr;
   \   000025   E9           MOV       A,R1
   \   000026   75F00A       MOV       B,#0xa
   \   000029   A4           MUL       AB
   \   00002A   F8           MOV       R0,A
   \   00002B   A9F0         MOV       R1,B
   \   00002D   74..         MOV       A,#EndDeviceInfos & 0xff
   \   00002F   28           ADD       A,R0
   \   000030   F8           MOV       R0,A
   \   000031   74..         MOV       A,#(EndDeviceInfos >> 8) & 0xff
   \   000033   39           ADDC      A,R1
   \   000034   F9           MOV       R1,A
   \   000035   E8           MOV       A,R0
   \   000036   FE           MOV       R6,A
   \   000037   E9           MOV       A,R1
   \   000038   FF           MOV       R7,A
   \   000039   8882         MOV       DPL,R0
   \   00003B   F583         MOV       DPH,A
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   C0E0         PUSH      A
   \   000049   7401         MOV       A,#0x1
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   D0E0         POP       A
   \   000050   F0           MOVX      @DPTR,A
    746            theMessageData[2] = cmd;
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   E5..         MOV       A,?V1
   \   000058   F0           MOVX      @DPTR,A
    747            osal_buffer_uint16(&theMessageData[3],  data);
   \   000059                ; Setup parameters for call to function osal_buffer_uint16
   \   000059   EA           MOV       A,R2
   \   00005A   FC           MOV       R4,A
   \   00005B   EB           MOV       A,R3
   \   00005C   FD           MOV       R5,A
   \   00005D   7403         MOV       A,#0x3
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   AA82         MOV       R2,DPL
   \   000064   AB83         MOV       R3,DPH
   \   000066   12....       LCALL     `??osal_buffer_uint16::?relay`; Banked call to: osal_buffer_uint16
    748            theMessageData[5] = 0x33;  //end check byte
   \   000069   7405         MOV       A,#0x5
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   7433         MOV       A,#0x33
   \   000070   F0           MOVX      @DPTR,A
    749            //set the destination below
    750            zclGenericApp_DstAddr.addrMode = (afAddrMode_t)Addr64Bit;
   \   000071   90....       MOV       DPTR,#zclGenericApp_DstAddr + 8
   \   000074   7403         MOV       A,#0x3
   \   000076   F0           MOVX      @DPTR,A
    751            zclGenericApp_DstAddr.endPoint = EndDeviceInfos[dest_endID].endPoint;
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   90....       MOV       DPTR,#zclGenericApp_DstAddr + 9
   \   00007F   F0           MOVX      @DPTR,A
    752            osal_memcpy(zclGenericApp_DstAddr.addr.extAddr, EndDeviceInfos[dest_endID].extAddr, 8);
   \   000080                ; Setup parameters for call to function osal_memcpy
   \   000080   8E82         MOV       DPL,R6
   \   000082   8F83         MOV       DPH,R7
   \   000084   A3           INC       DPTR
   \   000085   A982         MOV       R1,DPL
   \   000087   AA83         MOV       R2,DPH
   \   000089   89..         MOV       ?V4,R1
   \   00008B   8A..         MOV       ?V5,R2
   \   00008D   75..00       MOV       ?V6,#0x0
   \   000090   78..         MOV       R0,#?V4
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000095   7C08         MOV       R4,#0x8
   \   000097   7D00         MOV       R5,#0x0
   \   000099   7A..         MOV       R2,#zclGenericApp_DstAddr & 0xff
   \   00009B   7B..         MOV       R3,#(zclGenericApp_DstAddr >> 8) & 0xff
   \   00009D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A0   7403         MOV       A,#0x3
   \   0000A2   12....       LCALL     ?DEALLOC_XSTACK8
    753            
    754            if ( AF_DataRequest( &zclGenericApp_DstAddr, &zclGenericApp_epDesc,
    755                                 GENERICAPP_CLUSTERID,
    756                                 7,//send one more char or the last char might be missing
    757                                 theMessageData,
    758                                 &zclGenericApp_TransID,
    759                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )                     
   \   0000A5                ; Setup parameters for call to function AF_DataRequest
   \   0000A5   75..1E       MOV       ?V2,#0x1e
   \   0000A8   78..         MOV       R0,#?V2
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AD   75....       MOV       ?V2,#zclGenericApp_TransID & 0xff
   \   0000B0   75....       MOV       ?V3,#(zclGenericApp_TransID >> 8) & 0xff
   \   0000B3   78..         MOV       R0,#?V2
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B8   7403         MOV       A,#0x3
   \   0000BA   12....       LCALL     ?XSTACK_DISP100_8
   \   0000BD   88..         MOV       ?V2,R0
   \   0000BF   89..         MOV       ?V3,R1
   \   0000C1   78..         MOV       R0,#?V2
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   75..07       MOV       ?V2,#0x7
   \   0000C9   75..00       MOV       ?V3,#0x0
   \   0000CC   78..         MOV       R0,#?V2
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D1   75..01       MOV       ?V2,#0x1
   \   0000D4   78..         MOV       R0,#?V2
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D9   7900         MOV       R1,#0x0
   \   0000DB   7C..         MOV       R4,#zclGenericApp_epDesc & 0xff
   \   0000DD   7D..         MOV       R5,#(zclGenericApp_epDesc >> 8) & 0xff
   \   0000DF   7A..         MOV       R2,#zclGenericApp_DstAddr & 0xff
   \   0000E1   7B..         MOV       R3,#(zclGenericApp_DstAddr >> 8) & 0xff
   \   0000E3   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000E6   7409         MOV       A,#0x9
   \   0000E8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV       A,R1
   \   0000EC   700A         JNZ       ??zclGenericApp_SendTheMessage_0
    760            {
    761              // Successfully requested to be sent.
    762              HalUARTWrite(0, "Successfully Sent\r\n", 21);
   \   0000EE                ; Setup parameters for call to function HalUARTWrite
   \   0000EE   7C15         MOV       R4,#0x15
   \   0000F0   7D00         MOV       R5,#0x0
   \   0000F2   7A..         MOV       R2,#`?<Constant "Successfully Sent\\r\\n">` & 0xff
   \   0000F4   7B..         MOV       R3,#(`?<Constant "Successfully Sent\\r\\n">` >> 8) & 0xff
   \   0000F6   8008         SJMP      ??zclGenericApp_SendTheMessage_1
    763            }
    764            else
    765            {
    766              // Error occurred in request to send.
    767              HalUARTWrite(0, "Couldn't Sent\r\n", 17);
   \                     ??zclGenericApp_SendTheMessage_0:
   \   0000F8                ; Setup parameters for call to function HalUARTWrite
   \   0000F8   7C11         MOV       R4,#0x11
   \   0000FA   7D00         MOV       R5,#0x0
   \   0000FC   7A..         MOV       R2,#`?<Constant "Couldn\\'t Sent\\r\\n">` & 0xff
   \   0000FE   7B..         MOV       R3,#(`?<Constant "Couldn\\'t Sent\\r\\n">` >> 8) & 0xff
   \                     ??zclGenericApp_SendTheMessage_1:
   \   000100   7900         MOV       R1,#0x0
   \   000102   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    768            }
    769            
    770            HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF);
   \   000105                ; Setup parameters for call to function HalLedSet
   \   000105   7A00         MOV       R2,#0x0
   \   000107   7902         MOV       R1,#0x2
   \   000109   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    771          }
   \   00010C   7406         MOV       A,#0x6
   \   00010E   02....       LJMP      ?Subroutine1 & 0xFFFF
    772          
    773          
    774          
    775          
    776          
    777          //@fn: zclGenericApp_SerialMSGCB
    778          //@breif: process data received by UART, used to execute cmds from slave machine
    779          //@param: none
    780          //@return: none

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    781          void zclGenericApp_SerialMSGCB(void)
   \                     zclGenericApp_SerialMSGCB:
    782          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 7
   \   000004   74F9         MOV       A,#-0x7
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    783            unsigned char dest_endID = 0; //this number is the index of EndDeviceInfos
    784            unsigned int data = 0;
    785            unsigned char buf [7] = "";
   \   000009   90....       MOV       DPTR,#`?<Constant "">_2`
   \   00000C   AC..         MOV       R4,?XSP + 0
   \   00000E   AD..         MOV       R5,?XSP + 1
   \   000010   7407         MOV       A,#0x7
   \   000012   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    786           // printf("UART received!");
    787            HalUARTRead(0, buf, 6);
   \   000015                ; Setup parameters for call to function HalUARTRead
   \   000015   7C06         MOV       R4,#0x6
   \   000017   FD           MOV       R5,A
   \   000018   AA..         MOV       R2,?XSP + 0
   \   00001A   AB..         MOV       R3,?XSP + 1
   \   00001C   F9           MOV       R1,A
   \   00001D   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
    788            if ( (buf[1] & GENERICAPP_ENDPOINT) && (buf[0] == 0xCC) && (buf[5] == 0x33)) {  //make sure cmd send to this device
    789              dest_endID = buf[1] & 0x1F; //get destnation endPoint from uart message
    790              data = osal_build_uint16(&buf[3]);
    791              HalUARTWrite(0, buf, 6);
    792              if (buf[2]&0x80) {  //cmd for coordinator
    793                switch (buf[2]) {
    794                  //add cmds here, e.g. case: 0x81...
    795                  default:
    796                  break;
    797                }
    798              } else { //cmd for end device, send it
    799                zclGenericApp_SendTheMessage(dest_endID, buf[2], data);
    800              }
    801            }
    802          }
   \   000020   7407         MOV       A,#0x7
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   \   000025   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    803          
    804          
    805          
    806          
    807          
    808          //@fn rt_str_reverse
    809          //@brief message received is reversed, so we need to reverse again using this function
    810          //@para *str the first byte in a string that needs reversed
    811          //@para length the total length that needs to be reversed, 0 included
    812          //e.g a[] = {1,2,3,4}, then rt_str_reverse(&a[0], 3) result in {4, 3, 2, 1}

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    813          void str_reverse(char *str, int length) {
   \                     str_reverse:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    814            char temp, *end_ptr;
    815            end_ptr = str + length;
   \   000004   EA           MOV       A,R2
   \   000005   2C           ADD       A,R4
   \   000006   F8           MOV       R0,A
   \   000007   EB           MOV       A,R3
   \   000008   3D           ADDC      A,R5
   \   000009   8023         SJMP      ??str_reverse_0
    816            while(end_ptr > str) {
    817              temp = *str;
   \                     ??str_reverse_1:
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   FC           MOV       R4,A
    818              *str = *end_ptr;
   \   000011   8882         MOV       DPL,R0
   \   000013   8983         MOV       DPH,R1
   \   000015   E0           MOVX      A,@DPTR
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   F0           MOVX      @DPTR,A
    819              *end_ptr = temp;
   \   00001B   EC           MOV       A,R4
   \   00001C   8882         MOV       DPL,R0
   \   00001E   8983         MOV       DPH,R1
   \   000020   12....       LCALL     ?Subroutine4 & 0xFFFF
    820              str++;
   \                     ??CrossCallReturnLabel_4:
   \   000023   AA82         MOV       R2,DPL
   \   000025   AB83         MOV       R3,DPH
    821              end_ptr--;
   \   000027   E8           MOV       A,R0
   \   000028   24FF         ADD       A,#-0x1
   \   00002A   18           DEC       R0
   \   00002B   E9           MOV       A,R1
   \   00002C   34FF         ADDC      A,#-0x1
   \                     ??str_reverse_0:
   \   00002E   F9           MOV       R1,A
    822            }
   \   00002F   C3           CLR       C
   \   000030   EA           MOV       A,R2
   \   000031   98           SUBB      A,R0
   \   000032   EB           MOV       A,R3
   \   000033   99           SUBB      A,R1
   \   000034   40D5         JC        ??str_reverse_1
    823          }
   \   000036   02....       LJMP      ?Subroutine2 & 0xFFFF
    824          
    825          // ENDNEW
    826          
    827          
    828          
    829          // NEW
    830          
    831          
    832          /*********************************************************************
    833           * @fn      zclGenericApp_ProcessFoundationMsg
    834           *
    835           * @brief   Process Foundation message
    836           *
    837           * @param   srcEP - Sending Apps endpoint
    838           * @param   dstAddr - where to send the request
    839           * @param   clusterID - real cluster ID
    840           * @param   hdr - pointer to the message header
    841           * @param   len - length of the received message
    842           * @param   data - received message
    843           *
    844           * @return  none
    845           */
    846          static void zclGenericApp_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID,
    847                                                          zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd )
    848          {
    849          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT) || defined(ZCL_DISCOVER)
    850            void *cmd;
    851          #endif
    852          
    853            switch ( hdr->commandID )
    854            {
    855          #ifdef ZCL_READ
    856              case ZCL_CMD_READ:
    857                cmd = zclParseInReadCmd( pParseCmd );
    858                if ( cmd )
    859                {
    860                  zcl_SendRead( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclReadCmd_t *)cmd,
    861                                ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    862                  osal_mem_free( cmd );
    863                }
    864                break;
    865          #endif // ZCL_READ
    866          
    867          #ifdef ZCL_WRITE
    868              case ZCL_CMD_WRITE:
    869                cmd = zclParseInWriteCmd( pParseCmd );
    870                if ( cmd )
    871                {
    872                  zcl_SendWrite( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
    873                                 ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    874                  osal_mem_free( cmd );
    875                }
    876                break;
    877          
    878              case ZCL_CMD_WRITE_UNDIVIDED:
    879                cmd = zclParseInWriteCmd( pParseCmd );
    880                if ( cmd )
    881                {
    882                  zcl_SendWriteUndivided( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
    883                                          ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    884                  osal_mem_free( cmd );
    885                }
    886                break;
    887          
    888              case ZCL_CMD_WRITE_NO_RSP:
    889                cmd = zclParseInWriteCmd( pParseCmd );
    890                if ( cmd )
    891                {
    892                  zcl_SendWriteNoRsp( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
    893                                      ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    894                  osal_mem_free( cmd );
    895                }
    896                break;
    897          #endif // ZCL_WRITE
    898          
    899          #ifdef ZCL_REPORT
    900              case ZCL_CMD_CONFIG_REPORT:
    901                cmd = zclParseInConfigReportCmd( pParseCmd );
    902                if ( cmd )
    903                {
    904                  zcl_SendConfigReportCmd( GENERICAPP_ENDPOINT, dstAddr,  clusterID, (zclCfgReportCmd_t *)cmd,
    905                                           ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    906                  osal_mem_free( cmd );
    907                }
    908                break;
    909          
    910              case ZCL_CMD_READ_REPORT_CFG:
    911                cmd = zclParseInReadReportCfgCmd( pParseCmd );
    912                if ( cmd )
    913                {
    914                  zcl_SendReadReportCfgCmd( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclReadReportCfgCmd_t *)cmd,
    915                                            ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    916                  osal_mem_free( cmd );
    917                }
    918                break;
    919          
    920              case ZCL_CMD_REPORT:
    921                cmd = zclParseInReportCmd( pParseCmd );
    922                if ( cmd )
    923                {
    924                  zcl_SendReportCmd( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclReportCmd_t *)cmd,
    925                                     ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    926                  osal_mem_free( cmd );
    927                }
    928                break;
    929          #endif // ZCL_REPORT
    930          #ifdef ZCL_DISCOVER
    931              case ZCL_CMD_DISCOVER_ATTRS:
    932                cmd = zclParseInDiscAttrsCmd( pParseCmd );
    933                if ( cmd )
    934                {
    935                  zcl_SendDiscoverAttrsCmd( GENERICAPP_ENDPOINT, dstAddr, clusterID, (zclDiscoverAttrsCmd_t *)cmd,
    936                                            ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    937                  osal_mem_free( cmd );
    938                }
    939                break;
    940          #endif // ZCL_DISCOVER
    941          
    942              default:
    943                // Unsupported command -- just forward it.
    944                zcl_SendCommand( pParseCmd->endpoint, dstAddr, clusterID, hdr->commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
    945                                 hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, pParseCmd->dataLen, pParseCmd->pData );
    946                break;
    947            }
    948          }
    949          
    950          
    951          
    952          
    953          
    954          
    955          
    956          /*********************************************************************
    957           * @fn      zclGenericApp_ProcessAppMsg
    958           *
    959           * @brief   Process DoorLock messages
    960           *
    961           * @param   srcEP - Sending Apps endpoint
    962           * @param   len - number of bytes
    963           * @param   msg - pointer to message
    964           *          0 - lo byte destination address
    965           *          1 - hi byte destination address
    966           *          2 - destination endpoint
    967           *          3 - lo byte cluster ID
    968           *          4 - hi byte cluster ID
    969           *          5 - message length
    970           *          6 - destination address mode (first byte of data)
    971           *          7 - zcl command frame
    972           *
    973           * @return  none
    974           */
    975          static void zclGenericApp_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg )
                             ^
Warning[Pe177]: function "zclGenericApp_ProcessAppMsg" was declared but never
          referenced
    976          {
    977            afAddrType_t dstAddr;
    978            uint16 clusterID;
    979            zclFrameHdr_t hdr;
    980            uint8 *pData;
    981            uint8 dataLen;
    982          
    983            dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
    984            msg += 2;
    985            dstAddr.endPoint = *msg++;
    986            clusterID = BUILD_UINT16( msg[0], msg[1] );
    987            msg += 2;
    988            dataLen = *msg++; // Length of message (Z-Tool can support up to 255 octets)
    989            dstAddr.addrMode = (afAddrMode_t)(*msg++);
    990            dataLen--; // Length of ZCL frame
    991          
    992            // Begining of ZCL frame
    993            pData = zclParseHdr( &hdr, msg );
    994            dataLen -= (uint8)( pData - msg );
    995          
    996            // Is this a foundation type message?
    997            if ( zcl_ProfileCmd( hdr.fc.type ) )
    998            {
    999              if ( hdr.fc.manuSpecific )
   1000              {
   1001                // We don't support any manufacturer specific command -- just forward it.
   1002                zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1003                                 hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
   1004              }
   1005              else
   1006              {
   1007                zclParseCmd_t cmd;
   1008          
   1009                cmd.endpoint = srcEP;
   1010                cmd.dataLen = dataLen;
   1011                cmd.pData = pData;
   1012          
   1013                zclGenericApp_ProcessFoundationMsg( &dstAddr, clusterID, &hdr, &cmd );
   1014              }
   1015            }
   1016            else
   1017            {
   1018              // Nope, must be specific to the cluster ID
   1019              if ( hdr.fc.manuSpecific )
   1020              {
   1021                // We don't support any manufacturer specific command -- just forward it.
   1022                zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1023                                 hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
   1024              }
   1025            }
   1026          }
   1027          
   1028          
   1029          
   1030          
   1031          
   1032          
   1033          
   1034          
   1035          
   1036          ///*********************************************************************
   1037          // * @fn      zclGenericApp_BasicResetCB
   1038          // *
   1039          // * @brief   Callback from the ZCL General Cluster Library
   1040          // *          to set all the Basic Cluster attributes to default values.
   1041          // *
   1042          // * @param   none
   1043          // *
   1044          // * @return  none
   1045          // */
   1046          //static void zclGenericApp_BasicResetCB( void )
   1047          //{
   1048          //  zclGenericApp_ResetAttributesToDefaultValues(); 
   1049          //}
   1050          
   1051          
   1052          
   1053          ///*********************************************************************
   1054          // * @fn      zclGenericApp_BatteryWarningCB
   1055          // *
   1056          // * @brief   Called to handle battery-low situation.
   1057          // *
   1058          // * @param   voltLevel - level of severity
   1059          // *
   1060          // * @return  none
   1061          // */
   1062          //void zclGenericApp_BatteryWarningCB( uint8 voltLevel )
   1063          //{
   1064          //  if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
   1065          //  {
   1066          //    // Send warning message to the gateway and blink LED
   1067          //  }
   1068          //  else if ( voltLevel == VOLT_LEVEL_BAD )
   1069          //  {
   1070          //    // Shut down the system
   1071          //  }
   1072          //}
   1073          
   1074          // ENDNEW
   1075          
   1076          
   1077          
   1078          
   1079          
   1080          /*********************************************************************
   1081           * @fn      zclGenericApp_HandleKeys
   1082           *
   1083           * @brief   Handles all key events for this device.
   1084           *
   1085           * @param   shift - true if in shift/alt.
   1086           * @param   keys - bit field for key events. Valid entries:
   1087           *                 HAL_KEY_SW_5
   1088           *                 HAL_KEY_SW_4
   1089           *                 HAL_KEY_SW_2
   1090           *                 HAL_KEY_SW_1
   1091           *
   1092           * @return  none
   1093           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1094          static void zclGenericApp_HandleKeys( byte shift, byte keys )
   \                     zclGenericApp_HandleKeys:
   1095          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   1096            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV       C,0xE0 /* A   */.0
   \   000009   5048         JNC       ??zclGenericApp_HandleKeys_0
   1097            {
   1098              static bool LED_OnOff = FALSE;
   1099              
   1100              giGenAppScreenMode = GENERIC_MAINMODE;
   \   00000B   90....       MOV       DPTR,#giGenAppScreenMode
   \   00000E   E4           CLR       A
   \   00000F   F0           MOVX      @DPTR,A
   1101              
   1102              /* GENERICAPP_TODO: add app functionality to hardware keys here */
   1103              
   1104              // for example, start/stop LED 2 toggling with 500ms period
   1105              if (LED_OnOff)
   \   000010   90....       MOV       DPTR,#??LED_OnOff
   \   000013   E0           MOVX      A,@DPTR
   \   000014   6019         JZ        ??zclGenericApp_HandleKeys_1
   1106              { 
   1107                // if the LED is blinking, stop the osal timer and turn the LED off
   1108                osal_stop_timerEx(zclGenericApp_TaskID, GENERICAPP_EVT_1);
   \   000016                ; Setup parameters for call to function osal_stop_timerEx
   \   000016   7A08         MOV       R2,#0x8
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F9           MOV       R1,A
   \   00001F   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1109                HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
   \   000022                ; Setup parameters for call to function HalLedSet
   \   000022   7A00         MOV       R2,#0x0
   \   000024   7902         MOV       R1,#0x2
   \   000026   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1110                LED_OnOff = FALSE;
   \   000029   90....       MOV       DPTR,#??LED_OnOff
   \   00002C   E4           CLR       A
   \   00002D   8023         SJMP      ??zclGenericApp_HandleKeys_2
   1111              }
   1112              else
   1113              {
   1114                // turn on LED 2 and start an osal timer to toggle it after 500ms, search
   1115                // for GENERICAPP_EVT_1 to see event handling after expired timer
   1116                osal_start_timerEx( zclGenericApp_TaskID, GENERICAPP_EVT_1, 500 );
   \                     ??zclGenericApp_HandleKeys_1:
   \   00002F                ; Setup parameters for call to function osal_start_timerEx
   \   00002F   90....       MOV       DPTR,#__Constant_1f4
   \   000032   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000035   7A08         MOV       R2,#0x8
   \   000037   7B00         MOV       R3,#0x0
   \   000039   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000041   7404         MOV       A,#0x4
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   1117                HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
   \   000046                ; Setup parameters for call to function HalLedSet
   \   000046   7A01         MOV       R2,#0x1
   \   000048   7902         MOV       R1,#0x2
   \   00004A   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1118                LED_OnOff = TRUE;
   \   00004D   90....       MOV       DPTR,#??LED_OnOff
   \   000050   7401         MOV       A,#0x1
   \                     ??zclGenericApp_HandleKeys_2:
   \   000052   F0           MOVX      @DPTR,A
   1119              }
   1120            }
   1121            // Start the BDB commissioning method
   1122            if ( keys & HAL_KEY_SW_2 )
   \                     ??zclGenericApp_HandleKeys_0:
   \   000053   EE           MOV       A,R6
   \   000054   A2E1         MOV       C,0xE0 /* A   */.1
   \   000056   500A         JNC       ??zclGenericApp_HandleKeys_3
   1123            {
   1124              giGenAppScreenMode = GENERIC_MAINMODE;
   \   000058   90....       MOV       DPTR,#giGenAppScreenMode
   \   00005B   E4           CLR       A
   \   00005C   F0           MOVX      @DPTR,A
   1125          
   1126              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING | BDB_COMMISSIONING_MODE_INITIATOR_TL);
   \   00005D                ; Setup parameters for call to function bdb_StartCommissioning
   \   00005D   790F         MOV       R1,#0xf
   \   00005F   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   1127            }
   1128            if ( keys & HAL_KEY_SW_3 )
   \                     ??zclGenericApp_HandleKeys_3:
   \   000062   EE           MOV       A,R6
   \   000063   A2E4         MOV       C,0xE0 /* A   */.4
   \   000065   5005         JNC       ??zclGenericApp_HandleKeys_4
   1129            {
   1130              giGenAppScreenMode = GENERIC_MAINMODE;
   \   000067   90....       MOV       DPTR,#giGenAppScreenMode
   \   00006A   E4           CLR       A
   \   00006B   F0           MOVX      @DPTR,A
   1131            
   1132              // touchlink target commissioning, if enabled  
   1133          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
   1134              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_FINDING_BINDING);
   1135              touchLinkTarget_EnableCommissioning( 30000 );
   1136          #endif
   1137              
   1138            }
   1139            if ( keys & HAL_KEY_SW_4 )
   \                     ??zclGenericApp_HandleKeys_4:
   \   00006C   EE           MOV       A,R6
   \   00006D   A2E3         MOV       C,0xE0 /* A   */.3
   \   00006F   5015         JNC       ??zclGenericApp_HandleKeys_5
   1140            {
   1141              
   1142             giGenAppScreenMode = giGenAppScreenMode ? GENERIC_MAINMODE : GENERIC_HELPMODE;
   \   000071   90....       MOV       DPTR,#giGenAppScreenMode
   \   000074   E0           MOVX      A,@DPTR
   \   000075   6003         JZ        ??zclGenericApp_HandleKeys_6
   \   000077   E4           CLR       A
   \   000078   8002         SJMP      ??zclGenericApp_HandleKeys_7
   \                     ??zclGenericApp_HandleKeys_6:
   \   00007A   7401         MOV       A,#0x1
   \                     ??zclGenericApp_HandleKeys_7:
   \   00007C   F0           MOVX      @DPTR,A
   1143          #ifdef LCD_SUPPORTED
   1144              HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
   \   00007D                ; Setup parameters for call to function HalLcdWriteString
   \   00007D   7902         MOV       R1,#0x2
   \   00007F   7A..         MOV       R2,#sClearLine & 0xff
   \   000081   7B..         MOV       R3,#(sClearLine >> 8) & 0xff
   \   000083   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1145          #endif
   1146              
   1147            }
   1148            if ( keys & HAL_KEY_SW_5 )
   \                     ??zclGenericApp_HandleKeys_5:
   \   000086   EE           MOV       A,R6
   \   000087   A2E2         MOV       C,0xE0 /* A   */.2
   \   000089   5003         JNC       ??zclGenericApp_HandleKeys_8
   1149            {
   1150              bdb_resetLocalAction();
   \   00008B                ; Setup parameters for call to function bdb_resetLocalAction
   \   00008B   12....       LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
   1151            }
   1152          
   1153            zclGenericApp_LcdDisplayUpdate();
   \                     ??zclGenericApp_HandleKeys_8:
   \   00008E                ; Setup parameters for call to function zclGenericApp_LcdDisplayUpdate
   \   00008E   12....       LCALL     `??zclGenericApp_LcdDisplayUpdate::?relay`; Banked call to: zclGenericApp_LcdDisplayUpdate
   1154          }
   \   000091   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??LED_OnOff:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   1155          
   1156          /*********************************************************************
   1157           * @fn      zclGenericApp_LcdDisplayUpdate
   1158           *
   1159           * @brief   Called to update the LCD display.
   1160           *
   1161           * @param   none
   1162           *
   1163           * @return  none
   1164           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1165          void zclGenericApp_LcdDisplayUpdate( void )
   \                     zclGenericApp_LcdDisplayUpdate:
   1166          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1167          #ifdef LCD_SUPPORTED
   1168            if ( giGenAppScreenMode == GENERIC_HELPMODE )
   \   000004   90....       MOV       DPTR,#giGenAppScreenMode
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   7014         JNZ       ??zclGenericApp_LcdDisplayUpdate_0
   1169            {
   1170              zclGenericApp_LcdDisplayHelpMode();
   \   00000C                ; Setup parameters for call to function HalLcdWriteString
   \   00000C   7901         MOV       R1,#0x1
   \   00000E   7A..         MOV       R2,#sSwGenericApp & 0xff
   \   000010   7B..         MOV       R3,#(sSwGenericApp >> 8) & 0xff
   \   000012   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000015                ; Setup parameters for call to function HalLcdWriteString
   \   000015   7902         MOV       R1,#0x2
   \   000017   7A..         MOV       R2,#sSwBDBMode & 0xff
   \   000019   7B..         MOV       R3,#(sSwBDBMode >> 8) & 0xff
   \   00001B   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00001E                ; Setup parameters for call to function HalLcdWriteString
   \   00001E   802F         SJMP      ??zclGenericApp_LcdDisplayUpdate_1
   1171            }
   1172            else
   1173            {
   1174              zclGenericApp_LcdDisplayMainMode();
   \                     ??zclGenericApp_LcdDisplayUpdate_0:
   \   000020   90....       MOV       DPTR,#zclGenericApp_NwkState
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6409         XRL       A,#0x9
   \   000026   7004         JNZ       ??zclGenericApp_LcdDisplayUpdate_2
   \   000028                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000028   7900         MOV       R1,#0x0
   \   00002A   8010         SJMP      ??zclGenericApp_LcdDisplayUpdate_3
   \                     ??zclGenericApp_LcdDisplayUpdate_2:
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6407         XRL       A,#0x7
   \   00002F   7004         JNZ       ??zclGenericApp_LcdDisplayUpdate_4
   \   000031                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000031   7901         MOV       R1,#0x1
   \   000033   8007         SJMP      ??zclGenericApp_LcdDisplayUpdate_3
   \                     ??zclGenericApp_LcdDisplayUpdate_4:
   \   000035   E0           MOVX      A,@DPTR
   \   000036   6406         XRL       A,#0x6
   \   000038   7005         JNZ       ??zclGenericApp_LcdDisplayUpdate_5
   \   00003A                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   00003A   7902         MOV       R1,#0x2
   \                     ??zclGenericApp_LcdDisplayUpdate_3:
   \   00003C   12....       LCALL     `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
   \                     ??zclGenericApp_LcdDisplayUpdate_5:
   \   00003F   90....       MOV       DPTR,#gPermitDuration
   \   000042   E0           MOVX      A,@DPTR
   \   000043   90....       MOV       DPTR,#sSwHelp + 15
   \   000046   6004         JZ        ??zclGenericApp_LcdDisplayUpdate_6
   \   000048   742A         MOV       A,#0x2a
   \   00004A   8002         SJMP      ??zclGenericApp_LcdDisplayUpdate_7
   \                     ??zclGenericApp_LcdDisplayUpdate_6:
   \   00004C   7420         MOV       A,#0x20
   \                     ??zclGenericApp_LcdDisplayUpdate_7:
   \   00004E   F0           MOVX      @DPTR,A
   \                     ??zclGenericApp_LcdDisplayUpdate_1:
   \   00004F                ; Setup parameters for call to function HalLcdWriteString
   \   00004F   7903         MOV       R1,#0x3
   \   000051   7A..         MOV       R2,#sSwHelp & 0xff
   \   000053   7B..         MOV       R3,#(sSwHelp >> 8) & 0xff
   \   000055   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1175            }
   1176          #endif
   1177          }
   \   000058   80..         SJMP      ?Subroutine2
   1178          
   1179          #ifdef LCD_SUPPORTED
   1180          /*********************************************************************
   1181           * @fn      zclGenericApp_LcdDisplayMainMode
   1182           *
   1183           * @brief   Called to display the main screen on the LCD.
   1184           *
   1185           * @param   none
   1186           *
   1187           * @return  none
   1188           */
   1189          static void zclGenericApp_LcdDisplayMainMode( void )
   1190          {
   1191            // display line 1 to indicate NWK status
   1192            if ( zclGenericApp_NwkState == DEV_ZB_COORD )
   1193            {
   1194              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
   1195            }
   1196            else if ( zclGenericApp_NwkState == DEV_ROUTER )
   1197            {
   1198              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
   1199            }
   1200            else if ( zclGenericApp_NwkState == DEV_END_DEVICE )
   1201            {
   1202              zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
   1203            }
   1204          
   1205            // end of line 3 displays permit join status (*)
   1206            if ( gPermitDuration )
   1207            {
   1208              sSwHelp[15] = '*';
   1209            }
   1210            else
   1211            {
   1212              sSwHelp[15] = ' ';
   1213            }
   1214            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
   1215          }
   1216          
   1217          /*********************************************************************
   1218           * @fn      zclGenericApp_LcdDisplayHelpMode
   1219           *
   1220           * @brief   Called to display the SW options on the LCD.
   1221           *
   1222           * @param   none
   1223           *
   1224           * @return  none
   1225           */
   1226          static void zclGenericApp_LcdDisplayHelpMode( void )
   1227          {
   1228            HalLcdWriteString( (char *)sSwGenericApp, HAL_LCD_LINE_1 );
   1229            HalLcdWriteString( (char *)sSwBDBMode, HAL_LCD_LINE_2 );
   1230            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
   1231          }
   1232          #endif  // LCD_SUPPORTED
   1233          
   1234          /*********************************************************************
   1235           * @fn      zclGenericApp_ProcessCommissioningStatus
   1236           *
   1237           * @brief   Callback in which the status of the commissioning process are reported
   1238           *
   1239           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
   1240           *
   1241           * @return  none
   1242           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1243          static void zclGenericApp_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclGenericApp_ProcessCommissioningStatus:
   1244          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1245            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6402         XRL       A,#0x2
   \   00000C   7010         JNZ       ??zclGenericApp_ProcessCommissioningStatus_0
   1246            {
   1247              case BDB_COMMISSIONING_FORMATION:
   1248                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7009         JNZ       ??zclGenericApp_ProcessCommissioningStatus_0
   1249                {
   1250                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
   1251                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000015                ; Setup parameters for call to function bdb_StartCommissioning
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   4402         ORL       A,#0x2
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   1252                }
   1253                else
   1254                {
   1255                  //Want to try other channels?
   1256                  //try with bdb_setChannelAttribute
   1257                }
   1258              break;
   1259              case BDB_COMMISSIONING_NWK_STEERING:
   1260                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   1261                {
   1262                  //YOUR JOB:
   1263                  //We are on the nwk, what now?
   1264                }
   1265                else
   1266                {
   1267                  //See the possible errors for nwk steering procedure
   1268                  //No suitable networks found
   1269                  //Want to try other channels?
   1270                  //try with bdb_setChannelAttribute
   1271                }
   1272              break;
   1273              case BDB_COMMISSIONING_FINDING_BINDING:
   1274                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   1275                {
   1276                  //YOUR JOB:
   1277                }
   1278                else
   1279                {
   1280                  //YOUR JOB:
   1281                  //retry?, wait for user interaction?
   1282                }
   1283              break;
   1284              case BDB_COMMISSIONING_INITIALIZATION:
   1285                //Initialization notification can only be successful. Failure on initialization
   1286                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
   1287          
   1288                //YOUR JOB:
   1289                //We are on a network, what now?
   1290          
   1291              break;
   1292          #if ZG_BUILD_ENDDEVICE_TYPE    
   1293              case BDB_COMMISSIONING_PARENT_LOST:
   1294                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
   1295                {
   1296                  //We did recover from losing parent
   1297                }
   1298                else
   1299                {
   1300                  //Parent not found, attempt to rejoin again after a fixed delay
   1301                  osal_start_timerEx(zclGenericApp_TaskID, GENERICAPP_END_DEVICE_REJOIN_EVT, GENERICAPP_END_DEVICE_REJOIN_DELAY);
   1302                }
   1303              break;
   1304          #endif 
   1305            }
   1306          }
   \                     ??zclGenericApp_ProcessCommissioningStatus_0:
   \   00001E                REQUIRE ?Subroutine2
   \   00001E                ; // Fall through to label ?Subroutine2
   1307          
   1308          /*********************************************************************
   1309           * @fn      zclGenericApp_ProcessIdentifyTimeChange
   1310           *
   1311           * @brief   Called to process any change to the IdentifyTime attribute.
   1312           *
   1313           * @param   endpoint - in which the identify has change
   1314           *
   1315           * @return  none
   1316           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1317          static void zclGenericApp_ProcessIdentifyTimeChange( uint8 endpoint )
   \                     zclGenericApp_ProcessIdentifyTimeChange:
   1318          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1319            (void) endpoint;
   1320          
   1321            if ( zclGenericApp_IdentifyTime > 0 )
   \   000004   90....       MOV       DPTR,#zclGenericApp_IdentifyTime
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   600F         JZ        ??zclGenericApp_ProcessIdentifyTimeChange_0
   1322            {
   1323              HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000010                ; Setup parameters for call to function HalLedBlink
   \   000010   7CE8         MOV       R4,#-0x18
   \   000012   7D03         MOV       R5,#0x3
   \   000014   7B05         MOV       R3,#0x5
   \   000016   7AFF         MOV       R2,#-0x1
   \   000018   7902         MOV       R1,#0x2
   \   00001A   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   00001D   8007         SJMP      ??zclGenericApp_ProcessIdentifyTimeChange_1
   1324            }
   1325            else
   1326            {
   1327              HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
   \                     ??zclGenericApp_ProcessIdentifyTimeChange_0:
   \   00001F                ; Setup parameters for call to function HalLedSet
   \   00001F   7A00         MOV       R2,#0x0
   \   000021   7902         MOV       R1,#0x2
   \   000023   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1328            }
   1329          }
   \                     ??zclGenericApp_ProcessIdentifyTimeChange_1:
   \   000026   80..         SJMP      ?Subroutine2
   1330          
   1331          /*********************************************************************
   1332           * @fn      zclGenericApp_BindNotification
   1333           *
   1334           * @brief   Called when a new bind is added.
   1335           *
   1336           * @param   data - pointer to new bind data
   1337           *
   1338           * @return  none
   1339           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1340          static void zclGenericApp_BindNotification( bdbBindNotificationData_t *data )
   \                     zclGenericApp_BindNotification:
   1341          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1342            // GENERICAPP_TODO: process the new bind information
   1343          }
   \   000000   02....       LJMP      ?BRET
   1344          
   1345          
   1346          /*********************************************************************
   1347           * @fn      zclGenericApp_ProcessTouchlinkTargetEnable
   1348           *
   1349           * @brief   Called to process when the touchlink target functionality
   1350           *          is enabled or disabled
   1351           *
   1352           * @param   none
   1353           *
   1354           * @return  none
   1355           */
   1356          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
   1357          static void zclGenericApp_ProcessTouchlinkTargetEnable( uint8 enable )
   1358          {
   1359            if ( enable )
   1360            {
   1361              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   1362            }
   1363            else
   1364            {
   1365              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
   1366            }
   1367          }
   1368          #endif
   1369          
   1370          /*********************************************************************
   1371           * @fn      zclGenericApp_BasicResetCB
   1372           *
   1373           * @brief   Callback from the ZCL General Cluster Library
   1374           *          to set all the Basic Cluster attributes to default values.
   1375           *
   1376           * @param   none
   1377           *
   1378           * @return  none
   1379           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1380          static void zclGenericApp_BasicResetCB( void )
   \                     zclGenericApp_BasicResetCB:
   1381          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1382          
   1383            /* GENERICAPP_TODO: remember to update this function with any
   1384               application-specific cluster attribute variables */
   1385            
   1386            zclGenericApp_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclGenericApp_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     `??zclGenericApp_ResetAttributesToDefaultValues:`; Banked call to: zclGenericApp_ResetAttributesToDefaultValues
   1387            
   1388          }
   \   000007   80..         SJMP      ?Subroutine2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGenericApp_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sSwHelp>`:
   \   000000   5357343A     DB "SW4: Help       "
   \            2048656C
   \            70202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGenericApp_CmdCallbacks>`:
   \   000000   ....         DW `??zclGenericApp_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Initializing...">`:
   \   000000   496E6974     DB "Initializing..."
   \            69616C69
   \            7A696E67
   \            2E2E2E00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ok">`:
   \   000000   6F6B00       DB "ok"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Data Lost\\r\\n">`:
   \   000000   44617461     DB "Data Lost\015\012"
   \            204C6F73
   \            740D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Data Sent\\r\\n">`:
   \   000000   44617461     DB "Data Sent\015\012"
   \            2053656E
   \            740D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "toggle">`:
   \   000000   746F6767     DB "toggle"
   \            6C6500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Device Found Form Pre...">`:
   \   000000   44657669     DB "Device Found Form Previous Log -> Existed!\015\012"
   \            63652046
   \            6F756E64
   \            20466F72
   \            6D205072
   \            6576696F
   \            7573204C
   \            6F67202D
   \            3E204578
   \            69737465
   \            64210D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "New Device!\\r\\n">`:
   \   000000   4E657720     DB "New Device!\015\012"
   \            44657669
   \            6365210D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_1`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Successfully Sent\\r\\n">`:
   \   000000   53756363     DB "Successfully Sent\015\012"
   \            65737366
   \            756C6C79
   \            2053656E
   \            740D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Couldn\\'t Sent\\r\\n">`:
   \   000000   436F756C     DB "Couldn't Sent\015\012"
   \            646E2774
   \            2053656E
   \            740D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_2`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500
   1389          
   1390          ///*********************************************************************
   1391          // * @fn      zclSampleApp_BatteryWarningCB
   1392          // *
   1393          // * @brief   Called to handle battery-low situation.
   1394          // *
   1395          // * @param   voltLevel - level of severity
   1396          // *
   1397          // * @return  none
   1398          // */
   1399          //void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   1400          //{
   1401          //  if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
   1402          //  {
   1403          //    // Send warning message to the gateway and blink LED
   1404          //  }
   1405          //  else if ( voltLevel == VOLT_LEVEL_BAD )
   1406          //  {
   1407          //    // Shut down the system
   1408          //  }
   1409          //}
   1410          
   1411          /******************************************************************************
   1412           *
   1413           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1414           *
   1415           *****************************************************************************/
   1416          
   1417          /*********************************************************************
   1418           * @fn      zclGenericApp_ProcessIncomingMsg
   1419           *
   1420           * @brief   Process ZCL Foundation incoming message
   1421           *
   1422           * @param   pInMsg - pointer to the received message
   1423           *
   1424           * @return  none
   1425           */
   1426          static void zclGenericApp_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   1427          {
   1428            switch ( pInMsg->zclHdr.commandID )
   1429            {
   1430          #ifdef ZCL_READ
   1431              case ZCL_CMD_READ_RSP:
   1432                zclGenericApp_ProcessInReadRspCmd( pInMsg );
   1433                break;
   1434          #endif
   1435          #ifdef ZCL_WRITE
   1436              case ZCL_CMD_WRITE_RSP:
   1437                zclGenericApp_ProcessInWriteRspCmd( pInMsg );
   1438                break;
   1439          #endif
   1440              case ZCL_CMD_CONFIG_REPORT:
   1441              case ZCL_CMD_CONFIG_REPORT_RSP:
   1442              case ZCL_CMD_READ_REPORT_CFG:
   1443              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1444              case ZCL_CMD_REPORT:
   1445                //bdb_ProcessIncomingReportingMsg( pInMsg );
   1446                break;
   1447                
   1448              case ZCL_CMD_DEFAULT_RSP:
   1449                zclGenericApp_ProcessInDefaultRspCmd( pInMsg );
   1450                break;
   1451          #ifdef ZCL_DISCOVER
   1452              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1453                zclGenericApp_ProcessInDiscCmdsRspCmd( pInMsg );
   1454                break;
   1455          
   1456              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1457                zclGenericApp_ProcessInDiscCmdsRspCmd( pInMsg );
   1458                break;
   1459          
   1460              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1461                zclGenericApp_ProcessInDiscAttrsRspCmd( pInMsg );
   1462                break;
   1463          
   1464              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1465                zclGenericApp_ProcessInDiscAttrsExtRspCmd( pInMsg );
   1466                break;
   1467          #endif
   1468              default:
   1469                break;
   1470            }
   1471          
   1472            if ( pInMsg->attrCmd )
   1473              osal_mem_free( pInMsg->attrCmd );
   1474          }
   1475          
   1476          #ifdef ZCL_READ
   1477          /*********************************************************************
   1478           * @fn      zclGenericApp_ProcessInReadRspCmd
   1479           *
   1480           * @brief   Process the "Profile" Read Response Command
   1481           *
   1482           * @param   pInMsg - incoming message to process
   1483           *
   1484           * @return  none
   1485           */
   1486          static uint8 zclGenericApp_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1487          {
   1488            zclReadRspCmd_t *readRspCmd;
   1489            uint8 i;
   1490          
   1491            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1492            for (i = 0; i < readRspCmd->numAttr; i++)
   1493            {
   1494              // Notify the originator of the results of the original read attributes
   1495              // attempt and, for each successfull request, the value of the requested
   1496              // attribute
   1497            }
   1498          
   1499            return ( TRUE );
   1500          }
   1501          #endif // ZCL_READ
   1502          
   1503          #ifdef ZCL_WRITE
   1504          /*********************************************************************
   1505           * @fn      zclGenericApp_ProcessInWriteRspCmd
   1506           *
   1507           * @brief   Process the "Profile" Write Response Command
   1508           *
   1509           * @param   pInMsg - incoming message to process
   1510           *
   1511           * @return  none
   1512           */
   1513          static uint8 zclGenericApp_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1514          {
   1515            zclWriteRspCmd_t *writeRspCmd;
   1516            uint8 i;
   1517          
   1518            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1519            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1520            {
   1521              // Notify the device of the results of the its original write attributes
   1522              // command.
   1523            }
   1524          
   1525            return ( TRUE );
   1526          }
   1527          #endif // ZCL_WRITE
   1528          
   1529          
   1530          
   1531          // NEW
   1532          
   1533          #ifdef ZCL_REPORT_DESTINATION_DEVICE
   1534          /*********************************************************************
   1535           * @fn      zclGenericApp_ProcessInReportCmd
   1536           *
   1537           * @brief   Process the "Profile" Report Command
   1538           *
   1539           * @param   pInMsg - incoming message to process
   1540           *
   1541           * @return  none
   1542           */
   1543          static void zclGenericApp_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
   1544          {
   1545            zclReportCmd_t *pInTempSensorReport;
   1546            
   1547            pInTempSensorReport = (zclReportCmd_t *)pInMsg->attrCmd;
   1548          
   1549            if ( pInTempSensorReport->attrList[0].attrID != ATTRID_MS_TEMPERATURE_MEASURED_VALUE )
   1550            {
   1551              return;
   1552            }
   1553            
   1554            // store the current temperature value sent over the air from temperature sensor
   1555            zclGenericApp_LocalTemperature = BUILD_UINT16(pInTempSensorReport->attrList[0].attrData[0], pInTempSensorReport->attrList[0].attrData[1]);
   1556          }
   1557          #endif  // ZCL_REPORT_DESTINATION_DEVICE
   1558          
   1559          // ENDNEW
   1560          
   1561          
   1562          
   1563          /*********************************************************************
   1564           * @fn      zclGenericApp_ProcessInDefaultRspCmd
   1565           *
   1566           * @brief   Process the "Profile" Default Response Command
   1567           *
   1568           * @param   pInMsg - incoming message to process
   1569           *
   1570           * @return  none
   1571           */
   1572          static uint8 zclGenericApp_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1573          {
   1574            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1575          
   1576            // Device is notified of the Default Response command.
   1577            (void)pInMsg;
   1578          
   1579            return ( TRUE );
   1580          }
   1581          
   1582          #ifdef ZCL_DISCOVER
   1583          /*********************************************************************
   1584           * @fn      zclGenericApp_ProcessInDiscCmdsRspCmd
   1585           *
   1586           * @brief   Process the Discover Commands Response Command
   1587           *
   1588           * @param   pInMsg - incoming message to process
   1589           *
   1590           * @return  none
   1591           */
   1592          static uint8 zclGenericApp_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1593          {
   1594            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1595            uint8 i;
   1596          
   1597            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1598            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1599            {
   1600              // Device is notified of the result of its attribute discovery command.
   1601            }
   1602          
   1603            return ( TRUE );
   1604          }
   1605          
   1606          /*********************************************************************
   1607           * @fn      zclGenericApp_ProcessInDiscAttrsRspCmd
   1608           *
   1609           * @brief   Process the "Profile" Discover Attributes Response Command
   1610           *
   1611           * @param   pInMsg - incoming message to process
   1612           *
   1613           * @return  none
   1614           */
   1615          static uint8 zclGenericApp_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1616          {
   1617            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1618            uint8 i;
   1619          
   1620            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1621            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1622            {
   1623              // Device is notified of the result of its attribute discovery command.
   1624            }
   1625          
   1626            return ( TRUE );
   1627          }
   1628          
   1629          /*********************************************************************
   1630           * @fn      zclGenericApp_ProcessInDiscAttrsExtRspCmd
   1631           *
   1632           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1633           *
   1634           * @param   pInMsg - incoming message to process
   1635           *
   1636           * @return  none
   1637           */
   1638          static uint8 zclGenericApp_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1639          {
   1640            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1641            uint8 i;
   1642          
   1643            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1644            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1645            {
   1646              // Device is notified of the result of its attribute discovery command.
   1647            }
   1648          
   1649            return ( TRUE );
   1650          }
   1651          #endif // ZCL_DISCOVER
   1652          
   1653          /****************************************************************************
   1654          ****************************************************************************/
   1655          
   1656          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      3     31   str_reverse
      2      0   zclGenericApp_BasicResetCB
        2      0   -> zclGenericApp_ResetAttributesToDefaultValues
      0      0   zclGenericApp_BindNotification
      0     25   zclGenericApp_HandleKeys
        0      9   -> HalLcdWriteString
        0      9   -> HalLedSet
        0      9   -> bdb_StartCommissioning
        0      9   -> bdb_resetLocalAction
        0     13   -> osal_start_timerEx
        0      9   -> osal_stop_timerEx
        0      9   -> zclGenericApp_LcdDisplayUpdate
      0     38   zclGenericApp_Init
        0     38   -> HalLcdWriteString
        0     38   -> HalUARTOpen
        0     38   -> HalUARTPoll
        0     38   -> HalUARTWrite
        0     38   -> MT_UartInit
        0     38   -> MT_UartRegisterTaskID
        0     38   -> RegisterForKeys
        0     38   -> afRegister
        0     38   -> bdb_RegisterBindNotificationCB
        0     38   -> bdb_RegisterCommissioningStatusCB
        0     38   -> bdb_RegisterIdentifyTimeChangeCB
        0     38   -> bdb_RegisterSimpleDescriptor
        0     38   -> zclGeneral_RegisterCmdCallbacks
        0     38   -> zcl_registerAttrList
        0     38   -> zcl_registerForMsg
      2     12   zclGenericApp_LcdDisplayUpdate
        2      0   -> HalLcdWriteString
        2      0   -> zclHA_LcdStatusLine1
      1     46   zclGenericApp_MessageMSGCB
        0     31   -> APSME_LookupExtAddr
        0     31   -> HalUARTWrite
        0     34   -> osal_memcmp
        0     34   -> osal_memcpy
        0     31   -> str_reverse
      2      0   zclGenericApp_ProcessCommissioningStatus
        2      0   -> bdb_StartCommissioning
      2      0   zclGenericApp_ProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      0   -> HalLedSet
      0     22   zclGenericApp_ProcessZDOMsgs
        0     10   -> ZDO_ParseEPListRsp
        0     10   -> osal_mem_free
      1     30   zclGenericApp_SendTheMessage
        0     30   -> AF_DataRequest
        0     21   -> HalLedSet
        0     21   -> HalUARTWrite
        0     21   -> osal_buffer_uint16
        0     24   -> osal_memcpy
      2     19   zclGenericApp_SerialMSGCB
        2      7   -> HalUARTRead
      0     16   zclGenericApp_event_loop
        0     12   -> HalLedSet
        0     12   -> HalUARTPoll
        0     12   -> HalUARTWrite
        0     12   -> bdb_StartCommissioning
        0     12   -> osal_mem_free
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     16   -> osal_start_timerEx
        0     12   -> osal_strlen
        0     12   -> zclGenericApp_HandleKeys
        0     12   -> zclGenericApp_LcdDisplayUpdate
        0     12   -> zclGenericApp_MessageMSGCB
        0     12   -> zclGenericApp_ProcessZDOMsgs
        0     12   -> zclGenericApp_SerialMSGCB


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "">
       6  ?<Constant "">_1
       7  ?<Constant "">_2
      16  ?<Constant "Couldn\'t Sent\r\n">
      12  ?<Constant "Data Lost\r\n">
      12  ?<Constant "Data Sent\r\n">
      45  ?<Constant "Device Found Form Pre...">
      16  ?<Constant "Initializing...">
      14  ?<Constant "New Device!\r\n">
      20  ?<Constant "Successfully Sent\r\n">
       3  ?<Constant "ok">
       7  ?<Constant "toggle">
      17  ?<Initializer for sSwHelp>
      24  ?<Initializer for zclGenericApp_CmdCallbacks>
       1  ?<Initializer for zclGenericApp_NwkState>
       5  ?Subroutine0
       8  ?Subroutine1
       7  ?Subroutine2
      15  ?Subroutine3
       7  ?Subroutine4
      12  ?Subroutine5
      26  ?Subroutine6
     160  EndDeviceInfos
       2  GenericApp_ClusterList
      12  GenericApp_SimpleDesc
       1  LED_OnOff
       4  __Constant_1f4
       1  device_count
       1  gPermitDuration
       1  giGenAppScreenMode
       2  sClearLine
      14  sDeviceName
      15  sSwBDBMode
      16  sSwGenericApp
      17  sSwHelp
      57  str_reverse
       9  zclGenericApp_BasicResetCB
       3  zclGenericApp_BindNotification
      24  zclGenericApp_CmdCallbacks
      12  zclGenericApp_DstAddr
     148  zclGenericApp_HandleKeys
     222  zclGenericApp_Init
      90  zclGenericApp_LcdDisplayUpdate
     335  zclGenericApp_MessageMSGCB
       1  zclGenericApp_NwkState
      30  zclGenericApp_ProcessCommissioningStatus
      40  zclGenericApp_ProcessIdentifyTimeChange
      84  zclGenericApp_ProcessZDOMsgs
     273  zclGenericApp_SendTheMessage
      40  zclGenericApp_SerialMSGCB
       1  zclGenericApp_TaskID
       1  zclGenericApp_TransID
       7  zclGenericApp_epDesc
     335  zclGenericApp_event_loop
      78  -- Other

 
 1 746 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
    42 bytes in segment XDATA_I
    42 bytes in segment XDATA_ID
   231 bytes in segment XDATA_ROM_C
   185 bytes in segment XDATA_Z
 
   120 bytes of CODE     memory
   227 bytes of CONST    memory (+ 4 bytes shared)
 1 746 bytes of HUGECODE memory
   227 bytes of XDATA    memory

Errors: none
Warnings: 1
