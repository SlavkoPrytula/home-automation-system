###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               18/Apr/2021  13:21:51
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Components\stack\bdb\bdb_FindingAndBinding.c
#    Command line       =  
#        -f C:\users\slavko\Temp\EWc296.tmp ("C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Components\stack\bdb\bdb_FindingAndBinding.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List\bdb_FindingAndBinding.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj\bdb_FindingAndBinding.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Components\stack\bdb\bdb_FindingAndBinding.c
      1          /**************************************************************************************************
      2            Filename:       bdb_FindingAndBinding.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the Base Device Behavior functions and attributes.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bdb.h"
     45          #include "ZDObject.h"
     46          #include "bdb_interface.h"
     47          #include "AddrMgr.h"
     48             
     49          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
     50             
     51          /*********************************************************************
     52           * MACROS
     53           */
     54          
     55          
     56          
     57             
     58          /*********************************************************************
     59           * CONSTANTS
     60           */
     61          /*********************************************************************
     62           * TYPEDEFS
     63           */
     64           
     65           
     66          /*********************************************************************
     67           * GLOBAL VARIABLES
     68           */
     69          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     70          uint8 grpName[6] = {'G','r','o','u','p','\0'};
   \                     grpName:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for grpName>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     71          bdbGCB_IdentifyTimeChange_t      pfnIdentifyTimeChangeCB = NULL; 
   \                     pfnIdentifyTimeChangeCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          bdbGCB_BindNotification_t        pfnBindNotificationCB = NULL;
   \                     pfnBindNotificationCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     73          
     74          /*********************************************************************
     75           * EXTERNAL VARIABLES
     76           */
     77          
     78          /*********************************************************************
     79           * EXTERNAL FUNCTIONS
     80           */
     81          
     82          
     83          
     84          /*********************************************************************
     85           * LOCAL VARIABLES
     86           */
     87          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          SimpleDescriptionFormat_t  bdb_FindingBindingTargetSimpleDesc;
   \                     bdb_FindingBindingTargetSimpleDesc:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     89          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     90          uint8 bdbIndentifyActiveEndpoint  = 0xFF;
   \                     bdbIndentifyActiveEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for bdbIndentifyActiveEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
     91          
     92          //Your JOB:
     93          //Remove the clusters that your application do not use. This will save some flash and processing
     94          //when looking into matching clusters during the finding & binding procedure

   \                                 In  segment XDATA_ROM_C, align 1
     95          const cId_t bdb_ZclType1Clusters[] =
   \                     bdb_ZclType1Clusters:
   \   000000   0500         DW 5
   \   000002   0600         DW 6
   \   000004   0800         DW 8
   \   000006   0900         DW 9
   \   000008   1600         DW 22
   \   00000A   0201         DW 258
   \   00000C   0202         DW 514
   \   00000E   0302         DW 515
   \   000010   0003         DW 768
   \   000012   0103         DW 769
   \   000014   0105         DW 1281
   \   000016   0205         DW 1282
   \   000018   0006         DW 1536
   \   00001A   0106         DW 1537
   \   00001C   040B         DW 2820
   \   00001E   1406         DW 1556
   \   000020   1506         DW 1557
   \   000022   1706         DW 1559
   \   000024   0007         DW 1792
   \   000026   0107         DW 1793
   \   000028   0207         DW 1794
   \   00002A   0307         DW 1795
   \   00002C   0409         DW 2308
   \   00002E   0009         DW 2304
     96          {
     97            ZCL_CLUSTER_ID_GEN_SCENES,
     98            ZCL_CLUSTER_ID_GEN_ON_OFF,
     99            ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
    100            ZCL_CLUSTER_ID_GEN_ALARMS,
    101            ZCL_CLUSTER_ID_GEN_PARTITION,
    102            ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
    103            ZCL_CLUSTER_ID_HVAC_FAN_CONTROL,
    104            ZCL_CLUSTER_ID_HVAC_DIHUMIDIFICATION_CONTROL,
    105            ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    106            ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG,
    107            ZCL_CLUSTER_ID_SS_IAS_ACE,
    108            ZCL_CLUSTER_ID_SS_IAS_WD,
    109            ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL,
    110            ZCL_CLUSTER_ID_PI_BACNET_PROTOCOL_TUNNEL,
    111            ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT,
    112            ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL,
    113            ZCL_CLUSTER_ID_PI_ISO7818_PROTOCOL_TUNNEL,
    114            ZCL_CLUSTER_ID_PI_RETAIL_TUNNEL,
    115            ZCL_CLUSTER_ID_SE_PRICE,
    116            ZCL_CLUSTER_ID_SE_DRLC,
    117            ZCL_CLUSTER_ID_SE_METERING,
    118            ZCL_CLUSTER_ID_SE_MESSAGING,
    119            ZCL_CLUSTER_ID_TELECOMMUNICATIONS_VOICE_OVER_ZIGBEE,
    120            ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
    121          };
    122          
    123          //Your JOB:
    124          //Remove the clusters that your application do not use. This will save some flash and processing
    125          //when looking into matching clusters during the finding & binding procedure

   \                                 In  segment XDATA_ROM_C, align 1
    126          const cId_t bdb_ZclType2Clusters[] =
   \                     bdb_ZclType2Clusters:
   \   000000   0700         DW 7
   \   000002   0A00         DW 10
   \   000004   0C00         DW 12
   \   000006   0D00         DW 13
   \   000008   0E00         DW 14
   \   00000A   0F00         DW 15
   \   00000C   1000         DW 16
   \   00000E   1100         DW 17
   \   000010   1200         DW 18
   \   000012   1300         DW 19
   \   000014   1400         DW 20
   \   000016   1900         DW 25
   \   000018   1B00         DW 27
   \   00001A   0001         DW 256
   \   00001C   0101         DW 257
   \   00001E   0002         DW 512
   \   000020   0102         DW 513
   \   000022   0204         DW 1026
   \   000024   0004         DW 1024
   \   000026   0104         DW 1025
   \   000028   0304         DW 1027
   \   00002A   0404         DW 1028
   \   00002C   0504         DW 1029
   \   00002E   0604         DW 1030
   \   000030   0005         DW 1280
   \   000032   0206         DW 1538
   \   000034   0306         DW 1539
   \   000036   0406         DW 1540
   \   000038   0506         DW 1541
   \   00003A   0606         DW 1542
   \   00003C   0706         DW 1543
   \   00003E   0806         DW 1544
   \   000040   0906         DW 1545
   \   000042   0A06         DW 1546
   \   000044   0B06         DW 1547
   \   000046   0C06         DW 1548
   \   000048   0D06         DW 1549
   \   00004A   0E06         DW 1550
   \   00004C   0F06         DW 1551
   \   00004E   1006         DW 1552
   \   000050   1106         DW 1553
   \   000052   1206         DW 1554
   \   000054   1306         DW 1555
   \   000056   0407         DW 1796
   \   000058   0009         DW 2304
   \   00005A   000B         DW 2816
   \   00005C   010B         DW 2817
   \   00005E   020B         DW 2818
   \   000060   030B         DW 2819
    127          {
    128            ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG,
    129            ZCL_CLUSTER_ID_GEN_TIME,
    130            ZCL_CLUSTER_ID_GEN_ANALOG_INPUT_BASIC,
    131            ZCL_CLUSTER_ID_GEN_ANALOG_OUTPUT_BASIC,
    132            ZCL_CLUSTER_ID_GEN_ANALOG_VALUE_BASIC,
    133            ZCL_CLUSTER_ID_GEN_BINARY_INPUT_BASIC,
    134            ZCL_CLUSTER_ID_GEN_BINARY_OUTPUT_BASIC,
    135            ZCL_CLUSTER_ID_GEN_BINARY_VALUE_BASIC,
    136            ZCL_CLUSTER_ID_GEN_MULTISTATE_INPUT_BASIC,
    137            ZCL_CLUSTER_ID_GEN_MULTISTATE_OUTPUT_BASIC,
    138            ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
    139            ZCL_CLUSTER_ID_OTA,
    140            ZCL_CLUSTER_ID_GEN_APPLIANCE_CONTROL,
    141            ZCL_CLUSTER_ID_CLOSURES_SHADE_CONFIG,
    142            ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
    143            ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL,
    144            ZCL_CLUSTER_ID_HVAC_THERMOSTAT,
    145            ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT,
    146            ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT,
    147            ZCL_CLUSTER_ID_MS_ILLUMINANCE_LEVEL_SENSING_CONFIG,
    148            ZCL_CLUSTER_ID_MS_PRESSURE_MEASUREMENT,
    149            ZCL_CLUSTER_ID_MS_FLOW_MEASUREMENT,
    150            ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY,
    151            ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING,
    152            ZCL_CLUSTER_ID_SS_IAS_ZONE,
    153            ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_REG,
    154            ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_EXT,
    155            ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_REG,
    156            ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_EXT,
    157            ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_REG,
    158            ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_EXT,
    159            ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_REG,
    160            ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_EXT,
    161            ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_REG,
    162            ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_EXT,
    163            ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_REG,
    164            ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_EXT,
    165            ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_REG,
    166            ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_EXT,
    167            ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_REG,
    168            ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_EXT,
    169            ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_REG,
    170            ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_EXT,
    171            ZCL_CLUSTER_ID_SE_TUNNELING,
    172            ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
    173            ZCL_CLUSTER_ID_HA_APPLIANCE_IDENTIFICATION,
    174            ZCL_CLUSTER_ID_HA_METER_IDENTIFICATION,
    175            ZCL_CLUSTER_ID_HA_APPLIANCE_EVENTS_ALERTS,
    176            ZCL_CLUSTER_ID_HA_APPLIANCE_STATISTICS,
    177          };
    178          
    179          #ifdef ZCL_GROUPS

   \                                 In  segment XDATA_I, align 1, keep-with-next
    180          static zclOptionRec_t zcl_Groups_Options[] =
   \                     zcl_Groups_Options:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for zcl_Groups_Options>`
   \   000003                REQUIRE __INIT_XDATA_I
    181          {
    182            {
    183              ZCL_CLUSTER_ID_GEN_GROUPS,
    184              ( AF_ACK_REQUEST ),
    185            },
    186          };
    187          #endif
    188          
    189          
    190           /*********************************************************************
    191           * LOCAL FUNCTIONS
    192           */
    193          static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
    194                                            uint16 BindClusterId,
    195                                            byte Cnt,                 
    196                                            uint16 * ClusterList,
    197                                            zAddrType_t *DstAddr, byte DstEndpInt, uint8 addBind, uint8 isClusterOutput );
    198          
    199          uint8 bdb_FindIfAppCluster( cId_t ClusterId, uint8 isClusterOutput );
    200          
    201          
    202          static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc );
    203          bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress);
    204          bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
    205          void bdb_checkMatchingEndpoints(uint8 bindIfMatch, uint16 shortAddress, bdbFindingBindingRespondent_t **pCurr);
    206           /*********************************************************************
    207           * PUBLIC FUNCTIONS
    208           *********************************************************************/
    209          
    210          void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
    211          void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
    212          
    213          /*********************************************************************
    214           * @fn      bdb_SetIdentifyActiveEndpoint
    215           *
    216           * @brief   Set the endpoint which will perform the finding and binding (either Target or Initiator)
    217           *
    218           * @param   Active endpoint with which perform F&B. If set to 0xFF all endpoints with Identify will be attempted. The endpoint must be either Initiator or Target or Both
    219           *
    220           * @return  ZFailure - F&B commissioning mode already requested
    221           *          ZInvalidParameter - Endpoint specified not found or reserved by Zigbee
    222           *          ZSuccess - 
    223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    224          ZStatus_t bdb_SetIdentifyActiveEndpoint(uint8 activeEndpoint)
   \                     bdb_SetIdentifyActiveEndpoint:
    225          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
    226            epList_t *bdb_EpDescriptorListTemp = NULL;
    227            
    228            //Cannot process the request if no endpoints or F&B is under process
    229            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
   \   000006   90....       MOV       DPTR,#bdbAttributes + 11
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   A2E3         MOV       C,0xE0 /* A   */.3
   \   00000C   5004         JNC       ??bdb_SetIdentifyActiveEndpoint_0
    230            {
    231              return ZFailure;
   \   00000E   7901         MOV       R1,#0x1
   \   000010   803E         SJMP      ??bdb_SetIdentifyActiveEndpoint_1
    232            }
    233            
    234            if(activeEndpoint == 0xFF)
   \                     ??bdb_SetIdentifyActiveEndpoint_0:
   \   000012   74FF         MOV       A,#-0x1
   \   000014   6C           XRL       A,R4
   \   000015   602E         JZ        ??bdb_SetIdentifyActiveEndpoint_2
    235            {
    236              bdbIndentifyActiveEndpoint = activeEndpoint;
    237              return ZSuccess;
    238            }
    239            
    240            if((activeEndpoint != 0) && (activeEndpoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   \   000017   E9           MOV       A,R1
   \   000018   6034         JZ        ??bdb_SetIdentifyActiveEndpoint_3
   \   00001A   C3           CLR       C
   \   00001B   94F1         SUBB      A,#-0xf
   \   00001D   502F         JNC       ??bdb_SetIdentifyActiveEndpoint_3
    241            {
    242              bdb_EpDescriptorListTemp = bdb_HeadEpDescriptorList;
   \   00001F   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FA           MOV       R2,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   800A         SJMP      ??bdb_SetIdentifyActiveEndpoint_4
    243              
    244              while(bdb_EpDescriptorListTemp != NULL)
    245              {
    246                if(bdb_EpDescriptorListTemp->epDesc->endPoint == activeEndpoint)
    247                {
    248                  if(bdb_EpDescriptorListTemp->epDesc->epType)
    249                  {
    250                    bdbIndentifyActiveEndpoint = activeEndpoint;
    251                    return ZSuccess;
    252                  }
    253                  else
    254                  {
    255                    return ZInvalidParameter;
    256                  }
    257                }
    258                bdb_EpDescriptorListTemp = bdb_EpDescriptorListTemp->nextDesc;
   \                     ??bdb_SetIdentifyActiveEndpoint_5:
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00002F   E8           MOV       A,R0
   \   000030   FA           MOV       R2,A
   \   000031   E9           MOV       A,R1
   \                     ??bdb_SetIdentifyActiveEndpoint_4:
   \   000032   FB           MOV       R3,A
   \   000033   EA           MOV       A,R2
   \   000034   4B           ORL       A,R3
   \   000035   6017         JZ        ??bdb_SetIdentifyActiveEndpoint_3
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00003E   6C           XRL       A,R4
   \   00003F   70E7         JNZ       ??bdb_SetIdentifyActiveEndpoint_5
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6009         JZ        ??bdb_SetIdentifyActiveEndpoint_3
   \                     ??bdb_SetIdentifyActiveEndpoint_2:
   \   000045   EC           MOV       A,R4
   \   000046   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   7900         MOV       R1,#0x0
   \   00004C   8002         SJMP      ??bdb_SetIdentifyActiveEndpoint_1
    259              }
    260            }
    261            
    262            return ZInvalidParameter;
   \                     ??bdb_SetIdentifyActiveEndpoint_3:
   \   00004E   7902         MOV       R1,#0x2
   \                     ??bdb_SetIdentifyActiveEndpoint_1:
   \   000050   80..         SJMP      ??Subroutine40_0
    263          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000005   8882         MOV       DPL,R0
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    264          
    265          
    266          /*********************************************************************
    267           * @fn      bdb_setEpDescListToActiveEndpoint
    268           *
    269           * @brief   Set the endpoint list to the active endpoint selected by the application for F&B process
    270           *
    271           * @return  Current endpoint descriptor
    272           */
    273          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    274          endPointDesc_t* bdb_setEpDescListToActiveEndpoint(void)
   \                     bdb_setEpDescListToActiveEndpoint:
    275          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    276            bdb_CurrEpDescriptorList = bdb_HeadEpDescriptorList;
   \   000004   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   000007   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00000A   12....       LCALL     ?Subroutine35 & 0xFFFF
    277           
    278            //Check which active endpoit is being requested
    279            if(bdbIndentifyActiveEndpoint != 0xFF)
   \                     ??CrossCallReturnLabel_52:
   \   00000D   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F4           CPL       A
   \   000012   601B         JZ        ??CrossCallReturnLabel_1
    280            {
    281              //Search for an specific endpoint
    282              while(bdb_CurrEpDescriptorList != NULL)
   \                     ??bdb_setEpDescListToActiveEndpoint_0:
   \   000014   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000017   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00001A   6035         JZ        ??bdb_setEpDescListToActiveEndpoint_1
    283              {
    284                if(bdb_CurrEpDescriptorList->epDesc->endPoint == bdbIndentifyActiveEndpoint)
   \   00001C   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00001F   F8           MOV       R0,A
   \   000020   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   000023   E0           MOVX      A,@DPTR
   \   000024   68           XRL       A,R0
   \   000025   6021         JZ        ??bdb_setEpDescListToActiveEndpoint_2
    285                {
    286                  return bdb_CurrEpDescriptorList->epDesc;
    287                }
    288                bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \   000027   12....       LCALL     ?Subroutine5 & 0xFFFF
    289              }
    290            }
   \                     ??CrossCallReturnLabel_0:
   \   00002A   80E8         SJMP      ??bdb_setEpDescListToActiveEndpoint_0
    291            else
    292            {
    293              //Look for the first endpoint that is either intiator or target to perform F&B. Is assumed that the endpoint supports Identify
    294              while(bdb_CurrEpDescriptorList != NULL)
    295              {
    296                if((bdb_CurrEpDescriptorList->epDesc->endPoint != 0) && 
    297                   (bdb_CurrEpDescriptorList->epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START) && 
    298                   (bdb_CurrEpDescriptorList->epDesc->epType))
    299                {
    300                  return bdb_CurrEpDescriptorList->epDesc;
    301                }
    302                bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \                     ??bdb_setEpDescListToActiveEndpoint_3:
   \   00002C   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00002F   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000032   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000035   601A         JZ        ??bdb_setEpDescListToActiveEndpoint_1
   \   000037   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00003A   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00003D   60ED         JZ        ??bdb_setEpDescListToActiveEndpoint_3
   \   00003F   C3           CLR       C
   \   000040   94F1         SUBB      A,#-0xf
   \   000042   50E8         JNC       ??bdb_setEpDescListToActiveEndpoint_3
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   60E4         JZ        ??bdb_setEpDescListToActiveEndpoint_3
   \                     ??bdb_setEpDescListToActiveEndpoint_2:
   \   000048   12....       LCALL     ?Subroutine11 & 0xFFFF
    303              }
    304            }
   \                     ??CrossCallReturnLabel_11:
   \   00004B   FA           MOV       R2,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   FB           MOV       R3,A
   \   00004F   8004         SJMP      ??bdb_setEpDescListToActiveEndpoint_4
    305            //not found
    306            return NULL;
   \                     ??bdb_setEpDescListToActiveEndpoint_1:
   \   000051   7A00         MOV       R2,#0x0
   \   000053   7B00         MOV       R3,#0x0
   \                     ??bdb_setEpDescListToActiveEndpoint_4:
   \   000055   80..         SJMP      ??Subroutine40_0
    307          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007                REQUIRE ??Subroutine39_0
   \   000007                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000006   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET
    308          
    309          
    310          /*********************************************************************
    311           * @fn      bdb_ProcessIEEEAddrRsp
    312           *
    313           * @brief   Process IEEE addr response and mark the entry as done or remove the 
    314           *          bind if not successful.
    315           *
    316           * @param   zdoIncomingMsg_t *pMsg
    317           *
    318           * @return  none
    319           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    320          void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg)
   \                     bdb_ProcessIEEEAddrRsp:
    321          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    322            ZDO_NwkIEEEAddrResp_t *pAddrRsp = NULL;
    323            bdbFindingBindingRespondent_t *pCurr = NULL;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
    324          
    325            pAddrRsp = ZDO_ParseAddrRsp( pMsg );
   \   000014                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000014   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000017   8A..         MOV       ?V0,R2
   \   000019   8B..         MOV       ?V1,R3
   \   00001B   AE..         MOV       R6,?V0
   \   00001D   AF..         MOV       R7,?V1
    326            
    327            if(pAddrRsp == NULL)
   \   00001F   EA           MOV       A,R2
   \   000020   4F           ORL       A,R7
   \   000021   7003         JNZ       $+5
   \   000023   02....       LJMP      ??bdb_ProcessIEEEAddrRsp_0 & 0xFFFF
    328            {
    329              return;
    330            }
    331            
    332            bdb_setEpDescListToActiveEndpoint();
   \   000026                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000026   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
    333            
    334            pCurr = bdb_findRespondentNode(bdb_FindingBindingTargetSimpleDesc.EndPoint, pAddrRsp->nwkAddr);
   \   000029   8E82         MOV       DPL,R6
   \   00002B   8F83         MOV       DPH,R7
   \   00002D   A3           INC       DPTR
   \   00002E   8582..       MOV       ?V0,DPL
   \   000031   8583..       MOV       ?V1,DPH
   \   000034                ; Setup parameters for call to function bdb_findRespondentNode
   \   000034   12....       LCALL     ?Subroutine4 & 0xFFFF
    335            
    336            //Does the entry exist and we were waiting an IEEE addr rsp from this device?
    337            if((pCurr != NULL) && (pCurr->attempts > FINDING_AND_BINDING_MISSING_IEEE_ADDR))
   \                     ??CrossCallReturnLabel_104:
   \   000037   6067         JZ        ??CrossCallReturnLabel_16
   \   000039   E8           MOV       A,R0
   \   00003A   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00003D   C3           CLR       C
   \   00003E   9481         SUBB      A,#-0x7f
   \   000040   405E         JC        ??CrossCallReturnLabel_16
    338            {
    339              if(pAddrRsp->status == ZSuccess )
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   E0           MOVX      A,@DPTR
   \   000047   704E         JNZ       ??bdb_ProcessIEEEAddrRsp_1
    340              {
    341                uint8 extAddr[8]; 
    342                AddrMgrEntry_t entry;
    343                
    344                entry.nwkAddr = pAddrRsp->nwkAddr;
   \   000049   85..82       MOV       DPL,?V0
   \   00004C   85..83       MOV       DPH,?V1
   \   00004F   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000052   7403         MOV       A,#0x3
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    345                entry.user = ADDRMGR_USER_BINDING;
   \                     ??CrossCallReturnLabel_48:
   \   00005A   7402         MOV       A,#0x2
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   7404         MOV       A,#0x4
   \   000061   F0           MOVX      @DPTR,A
    346                AddrMgrExtAddrSet(entry.extAddr, pAddrRsp->extAddr);
   \   000062                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000062   EE           MOV       A,R6
   \   000063   2403         ADD       A,#0x3
   \   000065   FC           MOV       R4,A
   \   000066   E4           CLR       A
   \   000067   3F           ADDC      A,R7
   \   000068   FD           MOV       R5,A
   \   000069   7405         MOV       A,#0x5
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   AA82         MOV       R2,DPL
   \   000070   AB83         MOV       R3,DPH
   \   000072   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    347                
    348                //Add it as bind entry
    349                if(AddrMgrEntryUpdate(&entry) == FALSE)
   \   000075                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000075   7402         MOV       A,#0x2
   \   000077   12....       LCALL     ?XSTACK_DISP101_8
   \   00007A   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00007D   E9           MOV       A,R1
   \   00007E   7005         JNZ       ??bdb_ProcessIEEEAddrRsp_2
    350                {
    351                  //No space, then report F&B table full
    352                  //If periodic was triggered, then finish it
    353                  if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
    354                  {
    355                    bdb_FB_InitiatorCurrentCyclesNumber = 0;
   \   000080   12....       LCALL     ?Subroutine7 & 0xFFFF
    356                    osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
    357                  }
    358                  
    359                  bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );
    360                  osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
    361                  bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_BINDING_TABLE_FULL );
    362                  return;
   \                     ??CrossCallReturnLabel_3:
   \   000083   8022         SJMP      ??bdb_ProcessIEEEAddrRsp_0
    363                }
    364          
    365                //search for the matching clusters to be added this time as we have the IEEE addrs
    366                bdb_checkMatchingEndpoints(TRUE, pAddrRsp->nwkAddr, &pCurr);
   \                     ??bdb_ProcessIEEEAddrRsp_2:
   \   000085                ; Setup parameters for call to function bdb_checkMatchingEndpoints
   \   000085   AC..         MOV       R4,?XSP + 0
   \   000087   AD..         MOV       R5,?XSP + 1
   \   000089   85..82       MOV       DPL,?V0
   \   00008C   85..83       MOV       DPH,?V1
   \   00008F   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000092   7901         MOV       R1,#0x1
   \   000094   12....       LCALL     `??bdb_checkMatchingEndpoints::?relay`; Banked call to: bdb_checkMatchingEndpoints
    367                (void)extAddr;  //dummy
    368              }
    369              //Bind cannot be added if the device was not found
    370              pCurr->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
   \                     ??bdb_ProcessIEEEAddrRsp_1:
   \   000097   85..82       MOV       DPL,?XSP + 0
   \   00009A   85..83       MOV       DPH,?XSP + 1
   \   00009D   12....       LCALL     ?Subroutine14 & 0xFFFF
    371            }
    372            
    373            //release the memory
    374            osal_mem_free( pAddrRsp );
   \                     ??CrossCallReturnLabel_16:
   \   0000A0                ; Setup parameters for call to function osal_mem_free
   \   0000A0   EE           MOV       A,R6
   \   0000A1   FA           MOV       R2,A
   \   0000A2   EF           MOV       A,R7
   \   0000A3   FB           MOV       R3,A
   \   0000A4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    375          }
   \                     ??bdb_ProcessIEEEAddrRsp_0:
   \   0000A7   740F         MOV       A,#0xf
   \   0000A9   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   C8           XCH       A,R0
   \   000004   240C         ADD       A,#0xc
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   38           ADDC      A,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   74FF         MOV       A,#-0x1
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_stop_timerEx
   \   000005                ; Setup parameters for call to function osal_stop_timerEx
   \   000005   7A40         MOV       R2,#0x40
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00000B                ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
   \   00000B                ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
   \   00000B   7A..         MOV       R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   00000D   7B..         MOV       R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   00000F   12....       LCALL     `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
   \   000012                ; Setup parameters for call to function osal_stop_timerEx
   \   000012                ; Setup parameters for call to function osal_stop_timerEx
   \   000012   7A00         MOV       R2,#0x0
   \   000014   7B40         MOV       R3,#0x40
   \   000016   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000019                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000019                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000019   790C         MOV       R1,#0xc
   \   00001B   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine53_0
   \   000006                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine54_0
   \   000001                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F9           MOV       R1,A
   \   000008   12....       LCALL     `??bdb_findRespondentNode::?relay`; Banked call to: bdb_findRespondentNode
   \   00000B   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014                REQUIRE ??Subroutine56_0
   \   000014                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   240C         ADD       A,#0xc
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET
    376          
    377          
    378          /*********************************************************************
    379           * @fn      bdb_StopInitiatorFindingBinding
    380           *
    381           * @brief   Stops finding and binding for initiator devices.
    382           *
    383           * @param   none
    384           *
    385           * @return  none
    386           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    387          void bdb_StopInitiatorFindingBinding(void)
   \                     bdb_StopInitiatorFindingBinding:
    388          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    389            //If periodic was triggered, then finish it
    390            if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
    391            {
    392              bdb_FB_InitiatorCurrentCyclesNumber = 0;
   \   000004   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
    393              osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
   \   000009                ; Setup parameters for call to function osal_stop_timerEx
   \   000009   7A40         MOV       R2,#0x40
   \   00000B   FB           MOV       R3,A
   \   00000C   12....       LCALL     ??Subroutine51_0 & 0xFFFF
    394            }      
    395            //Clean the respondent list and stop its timer
    396            bdb_zclRespondentListClean( &pRespondentHead );
   \                     ??CrossCallReturnLabel_82:
   \   00000F                ; Setup parameters for call to function bdb_zclRespondentListClean
   \   00000F   7A..         MOV       R2,#pRespondentHead & 0xff
   \   000011   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   000013   12....       LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
    397            osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   \   000016                ; Setup parameters for call to function osal_stop_timerEx
   \   000016   12....       LCALL     ?Subroutine26 & 0xFFFF
    398            
    399            //Notify status
    400            bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   \                     ??CrossCallReturnLabel_80:
   \   000019                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000019   790B         MOV       R1,#0xb
   \   00001B   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
    401          
    402          }
   \   00001E   02....       LJMP      ??Subroutine40_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B40         MOV       R3,#0x40
   \   000004                REQUIRE ??Subroutine51_0
   \   000004                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   22           RET
    403          
    404          
    405          /*********************************************************************
    406           * @fn      bdb_checkMatchingEndpoints
    407           *
    408           * @brief   Check active endpoints for F&B and the respondant simple descriptor 
    409           *          for matching application clusters
    410           *
    411           * @param   pRespondant - Respondant to be process
    412           * @param   bindIfMatch - Flag to indicate that binds for matching cluster must 
    413           *                        be done
    414           *
    415           * @return  status - Result of the operation
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          void bdb_checkMatchingEndpoints(uint8 bindIfMatch, uint16 shortAddr, bdbFindingBindingRespondent_t **pCurr)
   \                     bdb_checkMatchingEndpoints:
    418          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   8A..         MOV       ?V10,R2
   \   00000E   8B..         MOV       ?V11,R3
   \   000010   8C..         MOV       ?V6,R4
   \   000012   8D..         MOV       ?V7,R5
    419            uint8 matchFound;
    420            endPointDesc_t *bdb_CurrEpDescriptor;
    421            uint8 i, status;
    422            zAddrType_t dstAddr;
    423          #ifdef ZCL_GROUPS
    424            afAddrType_t afDstAddr;
    425          #endif  
    426            
    427            //Check all the endpoints active for F&B
    428            while(bdb_CurrEpDescriptorList != NULL)
   \   000014   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000017   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??bdb_checkMatchingEndpoints_0 & 0xFFFF
    429            {
    430              matchFound = FALSE;
   \                     ??bdb_checkMatchingEndpoints_1:
   \   00001F   7F00         MOV       R7,#0x0
    431          
    432              bdb_CurrEpDescriptor = bdb_CurrEpDescriptorList->epDesc;
   \   000021   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000024   F5..         MOV       ?V2,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V3,A
    433          
    434          #ifdef ZCL_GROUPS
    435              if ( bdbAttributes.bdbCommissioningGroupID != 0xFFFF )    
   \   00002A   90....       MOV       DPTR,#bdbAttributes + 8
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F4           CPL       A
   \   00002F   7003         JNZ       ??bdb_checkMatchingEndpoints_2
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F4           CPL       A
   \                     ??bdb_checkMatchingEndpoints_2:
   \   000034   6021         JZ        ??bdb_checkMatchingEndpoints_3
    436              {
    437                zcl_registerClusterOptionList(bdb_CurrEpDescriptor->endPoint,1,zcl_Groups_Options);      
   \   000036                ; Setup parameters for call to function zcl_registerClusterOptionList
   \   000036   7C..         MOV       R4,#zcl_Groups_Options & 0xff
   \   000038   7D..         MOV       R5,#(zcl_Groups_Options >> 8) & 0xff
   \   00003A   7A01         MOV       R2,#0x1
   \   00003C   85..82       MOV       DPL,?V2
   \   00003F   85..83       MOV       DPH,?V3
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F9           MOV       R1,A
   \   000044   12....       LCALL     `??zcl_registerClusterOptionList::?relay`; Banked call to: zcl_registerClusterOptionList
    438                
    439                dstAddr.addr.shortAddr = bdbAttributes.bdbCommissioningGroupID;
   \   000047   90....       MOV       DPTR,#bdbAttributes + 8
   \   00004A   12....       LCALL     ?Subroutine12 & 0xFFFF
    440                dstAddr.addrMode = AddrGroup;
   \                     ??CrossCallReturnLabel_14:
   \   00004D   7408         MOV       A,#0x8
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   7401         MOV       A,#0x1
   \   000054   F0           MOVX      @DPTR,A
   \   000055   8016         SJMP      ??bdb_checkMatchingEndpoints_4
    441              }
    442              else
    443          #endif
    444              {
    445                dstAddr.addrMode = Addr64Bit;
   \                     ??bdb_checkMatchingEndpoints_3:
   \   000057   7408         MOV       A,#0x8
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   7403         MOV       A,#0x3
   \   00005E   F0           MOVX      @DPTR,A
    446                if(bindIfMatch)
   \   00005F   EE           MOV       A,R6
   \   000060   600B         JZ        ??bdb_checkMatchingEndpoints_4
    447                {
    448                  //if bind is to be created, then we should have the ext address in addr mgr
    449                  AddrMgrExtAddrLookup( shortAddr, dstAddr.addr.extAddr );
   \   000062                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000062   AC..         MOV       R4,?XSP + 0
   \   000064   AD..         MOV       R5,?XSP + 1
   \   000066   AA..         MOV       R2,?V10
   \   000068   AB..         MOV       R3,?V11
   \   00006A   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
    450                }
    451              }
    452              for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumOutClusters; i++)
   \                     ??bdb_checkMatchingEndpoints_4:
   \   00006D   75..00       MOV       ?V0,#0x0
   \   000070   E5..         MOV       A,?V2
   \   000072   2404         ADD       A,#0x4
   \   000074   F5..         MOV       ?V4,A
   \   000076   E4           CLR       A
   \   000077   35..         ADDC      A,?V3
   \   000079   F5..         MOV       ?V5,A
   \   00007B   8050         SJMP      ??bdb_checkMatchingEndpoints_5
    453              {
    454                //Filter for Application clusters (to bind app clusters only)
    455                status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
    456                                        bdb_CurrEpDescriptor->simpleDesc->pAppOutClusterList[i],
    457                                        bdb_FindingBindingTargetSimpleDesc.AppNumInClusters,
    458                                        bdb_FindingBindingTargetSimpleDesc.pAppInClusterList,
    459                                        &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint, bindIfMatch, TRUE );
   \                     ??bdb_checkMatchingEndpoints_6:
   \   00007D                ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
   \   00007D   75..01       MOV       ?V1,#0x1
   \   000080   78..         MOV       R0,#?V1
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000085   EE           MOV       A,R6
   \   000086   F5..         MOV       ?V1,A
   \   000088   78..         MOV       R0,#?V1
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008D   7402         MOV       A,#0x2
   \   00008F   12....       LCALL     ?XSTACK_DISP100_8
   \   000092   88..         MOV       ?V8,R0
   \   000094   89..         MOV       ?V9,R1
   \   000096   78..         MOV       R0,#?V8
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 7
   \   00009E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000A1   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   FD           MOV       R5,A
   \   0000A6   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 6
   \   0000A9   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000B2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B5   E9           MOV       A,R1
   \   0000B6   F5..         MOV       ?V1,A
    460                
    461                if ( status == ZApsTableFull )
   \   0000B8   74B2         MOV       A,#-0x4e
   \   0000BA   69           XRL       A,R1
   \   0000BB   7003         JNZ       $+5
   \   0000BD   02....       LJMP      ??bdb_checkMatchingEndpoints_7 & 0xFFFF
    462                {
    463                  break;
    464                }
    465                else if(status == ZSuccess)
   \   0000C0   E9           MOV       A,R1
   \   0000C1   7008         JNZ       ??bdb_checkMatchingEndpoints_8
    466                {
    467                  matchFound = TRUE;
   \   0000C3   7F01         MOV       R7,#0x1
    468                  //If a match is found and we are not adding due to lack of IEEE addrs, then skip looking
    469                  if(!bindIfMatch)
   \   0000C5   EE           MOV       A,R6
   \   0000C6   7003         JNZ       $+5
   \   0000C8   02....       LJMP      ??bdb_checkMatchingEndpoints_9 & 0xFFFF
    470                  {
    471                    break;
    472                  }
    473                }
    474              }
   \                     ??bdb_checkMatchingEndpoints_8:
   \   0000CB   05..         INC       ?V0
   \                     ??bdb_checkMatchingEndpoints_5:
   \   0000CD   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   F8           MOV       R0,A
   \   0000D5   E5..         MOV       A,?V0
   \   0000D7   C3           CLR       C
   \   0000D8   98           SUBB      A,R0
   \   0000D9   40A2         JC        ??bdb_checkMatchingEndpoints_6
    475              
    476              //Only search for other matches if the table is not full and we have not 
    477              //found any match or we have to add bind as many as we can
    478              if( (status != ZApsTableFull) && (!matchFound || bindIfMatch) )      
   \   0000DB   74B2         MOV       A,#-0x4e
   \   0000DD   65..         XRL       A,?V1
   \   0000DF   605F         JZ        ??bdb_checkMatchingEndpoints_7
   \   0000E1   EF           MOV       A,R7
   \   0000E2   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000E4   5003         JNC       ??bdb_checkMatchingEndpoints_10
   \   0000E6   EE           MOV       A,R6
   \   0000E7   6057         JZ        ??bdb_checkMatchingEndpoints_7
    479              {
    480                for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumInClusters; i++)
   \                     ??bdb_checkMatchingEndpoints_10:
   \   0000E9   75..00       MOV       ?V0,#0x0
   \   0000EC   800A         SJMP      ??bdb_checkMatchingEndpoints_11
    481                {
    482                  //Filter for Application clusters (to bind app clusters only)
    483                  status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
    484                                          bdb_CurrEpDescriptor->simpleDesc->pAppInClusterList[i],
    485                                          bdb_FindingBindingTargetSimpleDesc.AppNumOutClusters,
    486                                          bdb_FindingBindingTargetSimpleDesc.pAppOutClusterList,
    487                                          &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint, bindIfMatch, FALSE );
    488          
    489                  if ( status == ZApsTableFull )
    490                  {
    491                    break;
    492                  }
    493                  else if(status == ZSuccess)
   \                     ??bdb_checkMatchingEndpoints_12:
   \   0000EE   E9           MOV       A,R1
   \   0000EF   7005         JNZ       ??bdb_checkMatchingEndpoints_13
    494                  {
    495                    matchFound = TRUE;
   \   0000F1   7F01         MOV       R7,#0x1
    496                    
    497                    //If a match is found and we are not adding due to lack of IEEE addrs, then skip looking
    498                    if(!bindIfMatch)
   \   0000F3   EE           MOV       A,R6
   \   0000F4   6059         JZ        ??bdb_checkMatchingEndpoints_9
    499                    {
    500                      break;
    501                    }
    502                  }
   \                     ??bdb_checkMatchingEndpoints_13:
   \   0000F6   05..         INC       ?V0
   \                     ??bdb_checkMatchingEndpoints_11:
   \   0000F8   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   F8           MOV       R0,A
   \   0000FD   E5..         MOV       A,?V0
   \   0000FF   C3           CLR       C
   \   000100   98           SUBB      A,R0
   \   000101   503D         JNC       ??bdb_checkMatchingEndpoints_7
   \   000103                ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
   \   000103   75..00       MOV       ?V1,#0x0
   \   000106   78..         MOV       R0,#?V1
   \   000108   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010B   EE           MOV       A,R6
   \   00010C   F5..         MOV       ?V1,A
   \   00010E   78..         MOV       R0,#?V1
   \   000110   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000113   7402         MOV       A,#0x2
   \   000115   12....       LCALL     ?XSTACK_DISP100_8
   \   000118   88..         MOV       ?V8,R0
   \   00011A   89..         MOV       ?V9,R1
   \   00011C   78..         MOV       R0,#?V8
   \   00011E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000121   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 10
   \   000124   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000127   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   FD           MOV       R5,A
   \   00012C   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 9
   \   00012F   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000132   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000135   12....       LCALL     ?DEALLOC_XSTACK8
   \   000138   E9           MOV       A,R1
   \   000139   F5..         MOV       ?V1,A
   \   00013B   74B2         MOV       A,#-0x4e
   \   00013D   69           XRL       A,R1
   \   00013E   70AE         JNZ       ??bdb_checkMatchingEndpoints_12
    503                }
    504              }
    505              
    506              //Check if we have found any match
    507              if( matchFound == TRUE )
   \                     ??bdb_checkMatchingEndpoints_7:
   \   000140   EF           MOV       A,R7
   \   000141   A2E0         MOV       C,0xE0 /* A   */.0
   \   000143   507B         JNC       ??bdb_checkMatchingEndpoints_14
    508              {
    509                if(bindIfMatch)
   \   000145   EE           MOV       A,R6
   \   000146   6007         JZ        ??bdb_checkMatchingEndpoints_9
    510                {
    511                  //Mark respondent as complete as simple desc has been process and we do 
    512                  //have IEEE addrs
    513                  (*pCurr)->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
   \   000148   12....       LCALL     ?Subroutine18 & 0xFFFF
    514                }
   \                     ??CrossCallReturnLabel_22:
   \   00014B   74FF         MOV       A,#-0x1
   \   00014D   8005         SJMP      ??bdb_checkMatchingEndpoints_15
    515                else
    516                {
    517                  //Mark as we need IEEE addrs
    518                  (*pCurr)->attempts = FINDING_AND_BINDING_MISSING_IEEE_ADDR;
   \                     ??bdb_checkMatchingEndpoints_9:
   \   00014F   12....       LCALL     ?Subroutine18 & 0xFFFF
    519                }
   \                     ??CrossCallReturnLabel_23:
   \   000152   7480         MOV       A,#-0x80
   \                     ??bdb_checkMatchingEndpoints_15:
   \   000154   F0           MOVX      @DPTR,A
    520          
    521          #ifdef ZCL_GROUPS
    522                if ( bdbAttributes.bdbCommissioningGroupID != 0xFFFF )
   \   000155   90....       MOV       DPTR,#bdbAttributes + 8
   \   000158   E0           MOVX      A,@DPTR
   \   000159   F5..         MOV       ?V4,A
   \   00015B   A3           INC       DPTR
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   F5..         MOV       ?V5,A
   \   00015F   74FF         MOV       A,#-0x1
   \   000161   65..         XRL       A,?V4
   \   000163   7004         JNZ       ??bdb_checkMatchingEndpoints_16
   \   000165   74FF         MOV       A,#-0x1
   \   000167   65..         XRL       A,?V5
   \                     ??bdb_checkMatchingEndpoints_16:
   \   000169   605E         JZ        ??CrossCallReturnLabel_17
    523                {
    524                  afDstAddr.addr.shortAddr = shortAddr;
   \   00016B   7409         MOV       A,#0x9
   \   00016D   12....       LCALL     ?XSTACK_DISP0_8
   \   000170   E5..         MOV       A,?V10
   \   000172   F0           MOVX      @DPTR,A
   \   000173   A3           INC       DPTR
   \   000174   E5..         MOV       A,?V11
   \   000176   F0           MOVX      @DPTR,A
    525                  afDstAddr.addrMode = afAddr16Bit;
   \   000177   7411         MOV       A,#0x11
   \   000179   12....       LCALL     ?XSTACK_DISP0_8
   \   00017C   7402         MOV       A,#0x2
   \   00017E   F0           MOVX      @DPTR,A
    526                  afDstAddr.endPoint = bdb_FindingBindingTargetSimpleDesc.EndPoint;
   \   00017F   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   000182   E0           MOVX      A,@DPTR
   \   000183   C0E0         PUSH      A
   \   000185   7412         MOV       A,#0x12
   \   000187   12....       LCALL     ?XSTACK_DISP0_8
   \   00018A   D0E0         POP       A
   \   00018C   F0           MOVX      @DPTR,A
    527                      
    528                  zclGeneral_SendAddGroupRequest( bdb_CurrEpDescriptor->endPoint, &afDstAddr,
    529                                              COMMAND_GROUP_ADD, bdbAttributes.bdbCommissioningGroupID, grpName,
    530                                              TRUE, 0x00 );
   \   00018D                ; Setup parameters for call to function zclGeneral_SendAddGroupRequest
   \   00018D   75..00       MOV       ?V0,#0x0
   \   000190   78..         MOV       R0,#?V0
   \   000192   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000195   75....       MOV       ?V8,#grpName & 0xff
   \   000198   75....       MOV       ?V9,#(grpName >> 8) & 0xff
   \   00019B   78..         MOV       R0,#?V8
   \   00019D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A0   78..         MOV       R0,#?V4
   \   0001A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A5   7D01         MOV       R5,#0x1
   \   0001A7   7C00         MOV       R4,#0x0
   \   0001A9   740E         MOV       A,#0xe
   \   0001AB   12....       LCALL     ?XSTACK_DISP101_8
   \   0001AE   85..82       MOV       DPL,?V2
   \   0001B1   85..83       MOV       DPH,?V3
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   F9           MOV       R1,A
   \   0001B6   12....       LCALL     `??zclGeneral_SendAddGroupRequest::?relay`; Banked call to: zclGeneral_SendAddGroupRequest
   \   0001B9   7405         MOV       A,#0x5
   \   0001BB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BE   8009         SJMP      ??CrossCallReturnLabel_17
    531                }
    532          #endif
    533              }
    534              else
    535              {
    536                //No matching cluster, then we are done with this respondent
    537                (*pCurr)->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
   \                     ??bdb_checkMatchingEndpoints_14:
   \   0001C0   85..82       MOV       DPL,?V6
   \   0001C3   85..83       MOV       DPH,?V7
   \   0001C6   12....       LCALL     ?Subroutine14 & 0xFFFF
    538              }
    539              
    540              if ( status == ZApsTableFull )
   \                     ??CrossCallReturnLabel_17:
   \   0001C9   74B2         MOV       A,#-0x4e
   \   0001CB   65..         XRL       A,?V1
   \   0001CD   7005         JNZ       ??bdb_checkMatchingEndpoints_17
    541              {
    542                //If periodic was triggered, then finish it
    543                if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
    544                {
    545                  bdb_FB_InitiatorCurrentCyclesNumber = 0;
   \   0001CF   12....       LCALL     ?Subroutine7 & 0xFFFF
    546                  osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
    547                }      
    548                
    549                bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );
    550                osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
    551                bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_BINDING_TABLE_FULL );
    552                
    553                return;
   \                     ??CrossCallReturnLabel_4:
   \   0001D2   8021         SJMP      ??bdb_checkMatchingEndpoints_0
    554              }
    555              
    556              //If an specific endpoint was requested, then don't go trough the rest of 
    557              //the endpoints
    558              if( bdbIndentifyActiveEndpoint != 0xFF )
   \                     ??bdb_checkMatchingEndpoints_17:
   \   0001D4   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   F4           CPL       A
   \   0001D9   701A         JNZ       ??bdb_checkMatchingEndpoints_0
    559              {
    560                break;
    561              }
    562              else
    563              {
    564                //If active endpoints 'all' is attempted, then process the next endpoint in 
    565                //the list
    566                bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \   0001DB   800D         SJMP      ??bdb_checkMatchingEndpoints_18
    567          
    568                while(bdb_CurrEpDescriptorList != NULL)
    569                {
    570                  //It has to be different from 0 or reserved for Zigbee
    571                  if((bdb_CurrEpDescriptorList->epDesc->endPoint != 0) && (bdb_CurrEpDescriptorList->epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   \                     ??bdb_checkMatchingEndpoints_19:
   \   0001DD   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0001E0   6008         JZ        ??bdb_checkMatchingEndpoints_18
   \   0001E2   C3           CLR       C
   \   0001E3   94F1         SUBB      A,#-0xf
   \   0001E5   5003         JNC       $+5
   \   0001E7   02....       LJMP      ??bdb_checkMatchingEndpoints_1 & 0xFFFF
    572                  {
    573                    break;
    574                  }
    575                  bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \                     ??bdb_checkMatchingEndpoints_18:
   \   0001EA   12....       LCALL     ?Subroutine5 & 0xFFFF
    576                }
   \                     ??CrossCallReturnLabel_2:
   \   0001ED   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   0001F0   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    577              }
    578            }
   \                     ??CrossCallReturnLabel_109:
   \   0001F3   70E8         JNZ       ??bdb_checkMatchingEndpoints_19
    579          }
   \                     ??bdb_checkMatchingEndpoints_0:
   \   0001F5   7415         MOV       A,#0x15
   \   0001F7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001FA                REQUIRE ?Subroutine2
   \   0001FA                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A8..         MOV       R0,?V0
   \   000004   E8           MOV       A,R0
   \   000005   28           ADD       A,R0
   \   000006   F8           MOV       R0,A
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   F9           MOV       R1,A
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   28           ADD       A,R0
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   39           ADDC      A,R1
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   F583         MOV       DPH,A
   \   000011   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??bdb_zclFindingBindingAddBindEntry::?relay`; Banked call to: bdb_zclFindingBindingAddBindEntry
   \   000019   7406         MOV       A,#0x6
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   85..82       MOV       DPL,?V2
   \   000008   85..83       MOV       DPH,?V3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00000C   22           RET
    580          
    581          
    582          
    583          /*********************************************************************
    584           * @fn      bdb_ProcessSimpleDesc
    585           *
    586           * @brief   Process simple descriptor requested by F&B. Binds will be added if 
    587           *          matching cluster is found and if IEEE addrs of the device is already 
    588           *          stored
    589           *
    590           * @param   msgPtr - pointer to simple descriptor response indication message
    591           *
    592           * @return  none
    593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    594          void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr )
   \                     bdb_ProcessSimpleDesc:
    595          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    596            zAddrType_t dstAddr;
    597            bdbFindingBindingRespondent_t *pCurr = NULL;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   F0           MOVX      @DPTR,A
    598            uint8 isRespondantReadyToBeAdded = FALSE;
   \   000018   75..00       MOV       ?V0,#0x0
    599          
    600            bdb_setEpDescListToActiveEndpoint();
   \   00001B                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   00001B   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
    601            
    602            if ( !(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR )) 
   \   00001E   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000021   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   A2E0         MOV       C,0xE0 /* A   */.0
   \   000028   4003         JC        $+5
   \   00002A   02....       LJMP      ??bdb_ProcessSimpleDesc_0 & 0xFFFF
    603            {  
    604              //We should not be processing these commands as we are not initiator
    605              return;
    606            }
    607            
    608            dstAddr.addr.shortAddr = BUILD_UINT16( msgPtr->asdu[1], msgPtr->asdu[2] );
   \   00002D   EE           MOV       A,R6
   \   00002E   2413         ADD       A,#0x13
   \   000030   F582         MOV       DPL,A
   \   000032   E4           CLR       A
   \   000033   3F           ADDC      A,R7
   \   000034   F583         MOV       DPH,A
   \   000036   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FC           MOV       R4,A
   \   00003C   8882         MOV       DPL,R0
   \   00003E   8983         MOV       DPH,R1
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FB           MOV       R3,A
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   EC           MOV       A,R4
   \   00004A   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    609            dstAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_91:
   \   00004D   740A         MOV       A,#0xa
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   7402         MOV       A,#0x2
   \   000054   F0           MOVX      @DPTR,A
    610            
    611            ZDO_ParseSimpleDescBuf( &msgPtr->asdu[4], &bdb_FindingBindingTargetSimpleDesc );
   \   000055                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   000055   7C..         MOV       R4,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   000057   7D..         MOV       R5,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   000059   E8           MOV       A,R0
   \   00005A   2404         ADD       A,#0x4
   \   00005C   FA           MOV       R2,A
   \   00005D   E4           CLR       A
   \   00005E   39           ADDC      A,R1
   \   00005F   FB           MOV       R3,A
   \   000060   12....       LCALL     `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
    612            
    613            pCurr = bdb_findRespondentNode(bdb_FindingBindingTargetSimpleDesc.EndPoint, dstAddr.addr.shortAddr);
   \   000063                ; Setup parameters for call to function bdb_findRespondentNode
   \   000063   7402         MOV       A,#0x2
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   12....       LCALL     ?Subroutine4 & 0xFFFF
    614            
    615            //Just for safety check this is a valid entry
    616            if(pCurr != NULL) 
   \                     ??CrossCallReturnLabel_105:
   \   00006B   6058         JZ        ??bdb_ProcessSimpleDesc_0
    617            {
    618              uint8 extAddr[Z_EXTADDR_LEN]; 
    619              
    620              if(AddrMgrExtAddrLookup( pCurr->data.addr.shortAddr, extAddr ))
   \   00006D                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   00006D   740B         MOV       A,#0xb
   \   00006F   12....       LCALL     ?XSTACK_DISP102_8
   \   000072   85..82       MOV       DPL,?XSP + 0
   \   000075   85..83       MOV       DPH,?XSP + 1
   \   000078   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00007B   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00007E   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   000081   E9           MOV       A,R1
   \   000082   6005         JZ        ??bdb_ProcessSimpleDesc_1
    621              {
    622                isRespondantReadyToBeAdded = TRUE;
   \   000084   75..01       MOV       ?V0,#0x1
   \   000087   8018         SJMP      ??bdb_ProcessSimpleDesc_2
    623              }
    624              else
    625              {
    626                //Save the simple desc to don't ask for it again
    627                pCurr->SimpleDescriptor = &bdb_FindingBindingTargetSimpleDesc;
   \                     ??bdb_ProcessSimpleDesc_1:
   \   000089   85..82       MOV       DPL,?XSP + 0
   \   00008C   85..83       MOV       DPH,?XSP + 1
   \   00008F   12....       LCALL     ??Subroutine52_0 & 0xFFFF
    628              }
   \                     ??CrossCallReturnLabel_86:
   \   000092   240D         ADD       A,#0xd
   \   000094   F582         MOV       DPL,A
   \   000096   E4           CLR       A
   \   000097   38           ADDC      A,R0
   \   000098   F583         MOV       DPH,A
   \   00009A   74..         MOV       A,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   A3           INC       DPTR
   \   00009E   74..         MOV       A,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   0000A0   F0           MOVX      @DPTR,A
    629              (void)extAddr;  //dummy
    630            }
    631            else
    632            {
    633              //This simple desc rsp was not requested by BDB F&B
    634              return;
    635            } 
    636            
    637            bdb_checkMatchingEndpoints(isRespondantReadyToBeAdded, dstAddr.addr.shortAddr, &pCurr);
   \                     ??bdb_ProcessSimpleDesc_2:
   \   0000A1                ; Setup parameters for call to function bdb_checkMatchingEndpoints
   \   0000A1   AC..         MOV       R4,?XSP + 0
   \   0000A3   AD..         MOV       R5,?XSP + 1
   \   0000A5   7402         MOV       A,#0x2
   \   0000A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AA   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000AD   A9..         MOV       R1,?V0
   \   0000AF   12....       LCALL     `??bdb_checkMatchingEndpoints::?relay`; Banked call to: bdb_checkMatchingEndpoints
    638            
    639            //If the respondent got process complete, then release the entry
    640            if(pCurr->attempts == FINDING_AND_BINDING_RESPONDENT_COMPLETE)
   \   0000B2   85..82       MOV       DPL,?XSP + 0
   \   0000B5   85..83       MOV       DPH,?XSP + 1
   \   0000B8   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000BB   F4           CPL       A
   \   0000BC   7007         JNZ       ??bdb_ProcessSimpleDesc_0
    641            {
    642              bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );  
   \   0000BE                ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
   \   0000BE   7A..         MOV       R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   0000C0   7B..         MOV       R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   0000C2   12....       LCALL     `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
    643            }
    644          }
   \                     ??bdb_ProcessSimpleDesc_0:
   \   0000C5   7413         MOV       A,#0x13
   \   0000C7   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F8           MOV       R0,A
   \   000001                REQUIRE ??Subroutine46_0
   \   000001                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine47_0
   \   000001                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine48_0
   \   000003                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    645          
    646          /*********************************************************************
    647           * @fn      bdb_zclFindingBindingEpType
    648           *
    649           * @brief   Gives the Ep Type according to application clusters in
    650           *          simple descriptor
    651           *
    652           * @return  epType - If Target, Initiator or both
    653           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    654          uint8 bdb_zclFindingBindingEpType( endPointDesc_t *epDesc )
   \                     bdb_zclFindingBindingEpType:
    655          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    656            uint8 epType = 0;
   \   000005   75..00       MOV       ?V0,#0x0
    657            uint8 status;
    658            uint8 type1ClusterCnt;
    659            uint8 type2ClusterCnt;
    660            
    661            type1ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
    662            type2ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
    663            
    664          
    665            // Are there matching type 1 on server side?
    666            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
    667                                            epDesc->simpleDesc->pAppInClusterList,
    668                                            type1ClusterCnt,
    669                                            (uint16*)bdb_ZclType1Clusters);
    670            
    671            if( status == TRUE )
   \   000008   EA           MOV       A,R2
   \   000009   2404         ADD       A,#0x4
   \   00000B   FE           MOV       R6,A
   \   00000C   E4           CLR       A
   \   00000D   3B           ADDC      A,R3
   \   00000E   FF           MOV       R7,A
   \   00000F   8E82         MOV       DPL,R6
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000016   75....       MOV       ?V4,#bdb_ZclType1Clusters & 0xff
   \   000019   75....       MOV       ?V5,#(bdb_ZclType1Clusters >> 8) & 0xff
   \   00001C                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   7C18         MOV       R4,#0x18
   \   000023   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000026   12....       LCALL     ?DEALLOC_XSTACK8
   \   000029   E9           MOV       A,R1
   \   00002A   6401         XRL       A,#0x1
   \   00002C   7003         JNZ       ??bdb_zclFindingBindingEpType_0
    672            {
    673              epType |= BDB_FINDING_AND_BINDING_TARGET;
   \   00002E   75..02       MOV       ?V0,#0x2
    674            }
    675            
    676            // Are there matching type 1 on client side?
    677            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
    678                                            epDesc->simpleDesc->pAppOutClusterList,
    679                                            type1ClusterCnt,
    680                                            (uint16*)bdb_ZclType1Clusters);
    681            
    682            if( status == TRUE )
   \                     ??bdb_zclFindingBindingEpType_0:
   \   000031   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000034                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000034   78..         MOV       R0,#?V4
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   7C18         MOV       R4,#0x18
   \   00003B   85..82       MOV       DPL,?V2
   \   00003E   85..83       MOV       DPH,?V3
   \   000041   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000044   85..82       MOV       DPL,?V2
   \   000047   85..83       MOV       DPH,?V3
   \   00004A   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000050   E9           MOV       A,R1
   \   000051   6401         XRL       A,#0x1
   \   000053   7006         JNZ       ??bdb_zclFindingBindingEpType_1
    683            {
    684              epType |= BDB_FINDING_AND_BINDING_INITIATOR;
   \   000055   E5..         MOV       A,?V0
   \   000057   D2E0         SETB      0xE0 /* A   */.0
   \   000059   F5..         MOV       ?V0,A
    685            }
    686            
    687            // Are there matching type 2 on server side?
    688            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
    689                                            epDesc->simpleDesc->pAppInClusterList,
    690                                            type2ClusterCnt,
    691                                            (uint16*)bdb_ZclType2Clusters);
    692            
    693            if( status == TRUE )
   \                     ??bdb_zclFindingBindingEpType_1:
   \   00005B   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00005E   75....       MOV       ?V4,#bdb_ZclType2Clusters & 0xff
   \   000061   75....       MOV       ?V5,#(bdb_ZclType2Clusters >> 8) & 0xff
   \   000064                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   7C31         MOV       R4,#0x31
   \   00006B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071   E9           MOV       A,R1
   \   000072   6401         XRL       A,#0x1
   \   000074   7006         JNZ       ??bdb_zclFindingBindingEpType_2
    694            {
    695              epType |= BDB_FINDING_AND_BINDING_INITIATOR;
   \   000076   E5..         MOV       A,?V0
   \   000078   D2E0         SETB      0xE0 /* A   */.0
   \   00007A   F5..         MOV       ?V0,A
    696            }
    697            
    698            // Are there matching type 2 on client side?
    699            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
    700                                            epDesc->simpleDesc->pAppOutClusterList,
    701                                            type2ClusterCnt,
    702                                            (uint16*)bdb_ZclType2Clusters);
    703            
    704            if( status == TRUE )
   \                     ??bdb_zclFindingBindingEpType_2:
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000083   E8           MOV       A,R0
   \   000084   FE           MOV       R6,A
   \   000085                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000085   78..         MOV       R0,#?V4
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   7C31         MOV       R4,#0x31
   \   00008C   8E82         MOV       DPL,R6
   \   00008E   8983         MOV       DPH,R1
   \   000090   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000093   8E82         MOV       DPL,R6
   \   000095   8983         MOV       DPH,R1
   \   000097   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00009A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009D   E9           MOV       A,R1
   \   00009E   6401         XRL       A,#0x1
   \   0000A0   7006         JNZ       ??bdb_zclFindingBindingEpType_3
    705            {
    706              epType |= BDB_FINDING_AND_BINDING_TARGET;
   \   0000A2   E5..         MOV       A,?V0
   \   0000A4   D2E1         SETB      0xE0 /* A   */.1
   \   0000A6   F5..         MOV       ?V0,A
    707            }
    708          
    709            return epType;
   \                     ??bdb_zclFindingBindingEpType_3:
   \   0000A8   A9..         MOV       R1,?V0
   \   0000AA   7F06         MOV       R7,#0x6
   \   0000AC   02....       LJMP      ?BANKED_LEAVE_XDATA
    710          
    711          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine43_0
   \   000003                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F9           MOV       R1,A
   \   000008   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00000B   7402         MOV       A,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine44_0
   \   000004                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   88..         MOV       ?V2,R0
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000010   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A                REQUIRE ??Subroutine49_0
   \   00000A                ; // Fall through to label ??Subroutine49_0
    712          
    713          /*********************************************************************
    714           * @fn      bdb_zclFindingBindingAddBindEntry
    715           *
    716           * @brief   This function is used to Add an entry to the binding table
    717           *
    718           * @param   SrcEndpInt - source endpoint
    719           * @param   BindClusterId - cluster to try bind
    720           * @param   Cnt - list of remote clusters
    721           * @param   ClusterList - pointer to the Object ID list
    722           * @param   DstAddr - Address of remote node
    723           * @param   DstEndpInt - EndPoint of remote node
    724           * @param   addBind - Indicate wheter or not bind must be added or not
    725           * @param   isClusterOutput - True if the bind attempted is output cluster in the local device, false otherwise
    726           *
    727           * @return  status - Success if added
    728           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    729          static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
   \                     bdb_zclFindingBindingAddBindEntry:
    730                                            uint16 BindClusterId,
    731                                            byte Cnt,                 
    732                                            uint16 * ClusterList,
    733                                            zAddrType_t *DstAddr, byte DstEndpInt, uint8 addBind, uint8 isClusterOutput )
    734          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00000D   E9           MOV       A,R1
   \   00000E   FE           MOV       R6,A
   \   00000F   EC           MOV       A,R4
   \   000010   FF           MOV       R7,A
   \   000011   8D..         MOV       ?V0,R5
    735            uint8 status;
    736          
    737            if ( bdb_FindIfAppCluster ( BindClusterId, isClusterOutput ) != SUCCESS )
   \   000013                ; Setup parameters for call to function bdb_FindIfAppCluster
   \   000013   7413         MOV       A,#0x13
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   85..82       MOV       DPL,?XSP + 0
   \   00001D   85..83       MOV       DPH,?XSP + 1
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FA           MOV       R2,A
   \   000022   12....       LCALL     `??bdb_FindIfAppCluster::?relay`; Banked call to: bdb_FindIfAppCluster
   \   000025   E9           MOV       A,R1
   \   000026   7024         JNZ       ??bdb_zclFindingBindingAddBindEntry_0
    738            {
    739              return ( ZApsFail ); // No App cluster
    740            }
    741          
    742            // Are there matching clusters?
    743            status = ZDO_AnyClusterMatches( Cnt, 
    744                                            ClusterList,
    745                                            1,
    746                                           &BindClusterId);
    747            if ( status == FALSE )
   \   000028                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000028   A8..         MOV       R0,?XSP + 0
   \   00002A   A9..         MOV       R1,?XSP + 1
   \   00002C   88..         MOV       ?V2,R0
   \   00002E   89..         MOV       ?V3,R1
   \   000030   78..         MOV       R0,#?V2
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7C01         MOV       R4,#0x1
   \   000037   7410         MOV       A,#0x10
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00003F   EF           MOV       A,R7
   \   000040   F9           MOV       R1,A
   \   000041   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   \   000049   E9           MOV       A,R1
   \   00004A   7004         JNZ       ??bdb_zclFindingBindingAddBindEntry_1
    748            {
    749              return ( ZApsFail ); // No matched Cluster
   \                     ??bdb_zclFindingBindingAddBindEntry_0:
   \   00004C   79B1         MOV       R1,#-0x4f
   \   00004E   803B         SJMP      ??bdb_zclFindingBindingAddBindEntry_2
    750            }
    751          
    752            if(addBind)  
   \                     ??bdb_zclFindingBindingAddBindEntry_1:
   \   000050   7412         MOV       A,#0x12
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   E0           MOVX      A,@DPTR
   \   000056   6031         JZ        ??bdb_zclFindingBindingAddBindEntry_3
    753            {
    754              if ( pbindAddEntry )
   \   000058   90....       MOV       DPTR,#pbindAddEntry
   \   00005B   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00005E   6029         JZ        ??bdb_zclFindingBindingAddBindEntry_3
    755              {
    756                // Add the entry into the binding table
    757                if (!pbindAddEntry( SrcEndpInt, DstAddr, DstEndpInt,
    758                                       1, &BindClusterId ) )
   \   000060                ; Setup parameters for indirect call
   \   000060   78..         MOV       R0,#?V2
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   7D01         MOV       R5,#0x1
   \   000067   AC..         MOV       R4,?V0
   \   000069   7412         MOV       A,#0x12
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000071   EE           MOV       A,R6
   \   000072   F9           MOV       R1,A
   \   000073   90....       MOV       DPTR,#pbindAddEntry
   \   000076   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000079   12....       LCALL     ?CALL_IND
   \   00007C   7402         MOV       A,#0x2
   \   00007E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000081   EA           MOV       A,R2
   \   000082   4B           ORL       A,R3
   \   000083   7004         JNZ       ??bdb_zclFindingBindingAddBindEntry_3
    759                {
    760                  return ( ZApsTableFull );
   \   000085   79B2         MOV       R1,#-0x4e
   \   000087   8002         SJMP      ??bdb_zclFindingBindingAddBindEntry_2
    761                }
    762              }
    763            }
    764            
    765            return ( ZSuccess );
   \                     ??bdb_zclFindingBindingAddBindEntry_3:
   \   000089   7900         MOV       R1,#0x0
   \                     ??bdb_zclFindingBindingAddBindEntry_2:
   \   00008B   7402         MOV       A,#0x2
   \   00008D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000090   7F04         MOV       R7,#0x4
   \   000092   02....       LJMP      ?BANKED_LEAVE_XDATA
    766          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001                REQUIRE ??Subroutine45_0
   \   000001                ; // Fall through to label ??Subroutine45_0
    767          
    768          /*********************************************************************
    769           * @fn      bdb_exitFindingBindingWStatus
    770           *
    771           * @brief   Clean respondent list and reports the status to bdb state machine
    772           *
    773           * @return  
    774           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    775          void bdb_exitFindingBindingWStatus( uint8 status )
   \                     bdb_exitFindingBindingWStatus:
    776          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    777            // bdb report status
    778            bdbAttributes.bdbCommissioningStatus = status;
   \   000006   90....       MOV       DPTR,#bdbAttributes + 10
   \   000009   F0           MOVX      @DPTR,A
    779            
    780            bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_FINDING_BINDING, TRUE );
   \   00000A                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00000A   7A01         MOV       R2,#0x1
   \   00000C   7906         MOV       R1,#0x6
   \   00000E   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    781          }
   \   000011   80..         SJMP      ??Subroutine48_0
    782          
    783          /*********************************************************************
    784           * @fn      bdb_zclSimpleDescClusterListClean
    785           *
    786           * @brief   This function free Simple Descriptor cluster lists
    787           *
    788           * @param   pSimpleDesc - pointer to simple descriptor
    789           *
    790           * @return  status
    791           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    792          static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc )
   \                     bdb_zclSimpleDescClusterListClean:
    793          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    794            if(pSimpleDesc->pAppInClusterList != NULL)
   \   000009   EA           MOV       A,R2
   \   00000A   2407         ADD       A,#0x7
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3F           ADDC      A,R7
   \   00000F   88..         MOV       ?V0,R0
   \   000011   F5..         MOV       ?V1,A
   \   000013   8882         MOV       DPL,R0
   \   000015   F583         MOV       DPH,A
   \   000017   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00001A   EA           MOV       A,R2
   \   00001B   4B           ORL       A,R3
   \   00001C   600D         JZ        ??bdb_zclSimpleDescClusterListClean_0
    795            {
    796              osal_mem_free( pSimpleDesc->pAppInClusterList );
   \   00001E                ; Setup parameters for call to function osal_mem_free
   \   00001E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    797              pSimpleDesc->pAppInClusterList = ( cId_t* )NULL;
   \   000021   85..82       MOV       DPL,?V0
   \   000024   85..83       MOV       DPH,?V1
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   F0           MOVX      @DPTR,A
    798            }
    799            if(pSimpleDesc->pAppOutClusterList != NULL)
   \                     ??bdb_zclSimpleDescClusterListClean_0:
   \   00002B   EE           MOV       A,R6
   \   00002C   240A         ADD       A,#0xa
   \   00002E   F8           MOV       R0,A
   \   00002F   E4           CLR       A
   \   000030   3F           ADDC      A,R7
   \   000031   F9           MOV       R1,A
   \   000032   E8           MOV       A,R0
   \   000033   FE           MOV       R6,A
   \   000034   E9           MOV       A,R1
   \   000035   FF           MOV       R7,A
   \   000036   8882         MOV       DPL,R0
   \   000038   F583         MOV       DPH,A
   \   00003A   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00003D   EA           MOV       A,R2
   \   00003E   4B           ORL       A,R3
   \   00003F   600B         JZ        ??bdb_zclSimpleDescClusterListClean_1
    800            {
    801              osal_mem_free( pSimpleDesc->pAppOutClusterList );
   \   000041                ; Setup parameters for call to function osal_mem_free
   \   000041   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    802              pSimpleDesc->pAppOutClusterList = ( cId_t* )NULL;
   \   000044   8E82         MOV       DPL,R6
   \   000046   8F83         MOV       DPH,R7
   \   000048   E4           CLR       A
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   F0           MOVX      @DPTR,A
    803            }
    804          }
   \                     ??bdb_zclSimpleDescClusterListClean_1:
   \   00004C   80..         SJMP      ??Subroutine50_0
    805          
    806          /*********************************************************************
    807           * @fn      bdb_RegisterIdentifyTimeChangeCB
    808           *
    809           * @brief   Register an Application's Identify Time change callback function
    810           *          to let know the application when identify is active or not.
    811           *
    812           * @param   pfnIdentify - application callback
    813           *
    814           * @return  none
    815           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    816          void bdb_RegisterIdentifyTimeChangeCB( bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChange )
   \                     bdb_RegisterIdentifyTimeChangeCB:
    817          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    818            pfnIdentifyTimeChangeCB = pfnIdentifyTimeChange;
   \   000004   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   000007   02....       LJMP      ?Subroutine0 & 0xFFFF
    819          }
    820          
    821          #if (FINDING_AND_BINDING_PERIODIC_ENABLE==TRUE)
    822          /*********************************************************************
    823           * @fn      bdb_GetFBInitiatorStatus
    824           *
    825           * @brief   Get the F&B initiator status for periodic requests.
    826           *
    827           * @param   RemainingTime - in seconds
    828           * @param   AttemptsLeft - number of attempts to be done
    829           * @param   MatchesFound - Add the number of matches to this parameter
    830           *                         since the last bdb_GetFBInitiatorStatus call
    831           *
    832           * @return  none
    833           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    834          void bdb_GetFBInitiatorStatus(uint8 *RemainingTime, uint8* AttemptsLeft)
   \                     bdb_GetFBInitiatorStatus:
    835          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    836            if(RemainingTime != NULL)  
   \   00000D   EA           MOV       A,R2
   \   00000E   4F           ORL       A,R7
   \   00000F   6048         JZ        ??bdb_GetFBInitiatorStatus_0
    837            {
    838              if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
   \   000011   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000014   E0           MOVX      A,@DPTR
   \   000015   7007         JNZ       ??bdb_GetFBInitiatorStatus_1
    839              {
    840                *RemainingTime = 0;
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   E4           CLR       A
   \   00001C   803A         SJMP      ??bdb_GetFBInitiatorStatus_2
    841              }
    842              else
    843              {
    844                *RemainingTime = (bdb_FB_InitiatorCurrentCyclesNumber - 1) * FINDING_AND_BINDING_PERIODIC_TIME + ((osal_get_timeoutEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT) + 999) / 1000);
   \                     ??bdb_GetFBInitiatorStatus_1:
   \   00001E                ; Setup parameters for call to function osal_get_timeoutEx
   \   00001E   7A40         MOV       R2,#0x40
   \   000020   7B00         MOV       R3,#0x0
   \   000022   90....       MOV       DPTR,#bdb_TaskID
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F9           MOV       R1,A
   \   000027   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00002A   8A..         MOV       ?V4,R2
   \   00002C   8B..         MOV       ?V5,R3
   \   00002E   8C..         MOV       ?V6,R4
   \   000030   8D..         MOV       ?V7,R5
   \   000032   90....       MOV       DPTR,#__Constant_3e7
   \   000035   78..         MOV       R0,#?V4
   \   000037   12....       LCALL     ?L_ADD_X
   \   00003A   90....       MOV       DPTR,#__Constant_3e8
   \   00003D   78..         MOV       R0,#?V8
   \   00003F   12....       LCALL     ?L_MOV_X
   \   000042   78..         MOV       R0,#?V4
   \   000044   79..         MOV       R1,#?V8
   \   000046   12....       LCALL     ?UL_DIV_MOD
   \   000049   75F00F       MOV       B,#0xf
   \   00004C   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   14           DEC       A
   \   000051   A4           MUL       AB
   \   000052   25..         ADD       A,?V4
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \                     ??bdb_GetFBInitiatorStatus_2:
   \   000058   F0           MOVX      @DPTR,A
    845              }
    846            }
    847            
    848            if(AttemptsLeft != NULL)
   \                     ??bdb_GetFBInitiatorStatus_0:
   \   000059   E5..         MOV       A,?V0
   \   00005B   45..         ORL       A,?V1
   \   00005D   600B         JZ        ??bdb_GetFBInitiatorStatus_3
    849            {
    850              *AttemptsLeft = bdb_FB_InitiatorCurrentCyclesNumber;
   \   00005F   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000062   E0           MOVX      A,@DPTR
   \   000063   85..82       MOV       DPL,?V0
   \   000066   85..83       MOV       DPH,?V1
   \   000069   F0           MOVX      @DPTR,A
    851            }
    852          }
   \                     ??bdb_GetFBInitiatorStatus_3:
   \   00006A   02....       LJMP      ?Subroutine2 & 0xFFFF
    853          #endif
    854          
    855          /*********************************************************************
    856           * @fn      bdb_RegisterBindNotificationCB
    857           *
    858           * @brief   Register an Application's notification callback function to let 
    859           *          know the application when a new bind is added to the binding table.
    860           *
    861           * @param   pfnIdentify - application callback
    862           *
    863           * @return  none
    864           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    865          void bdb_RegisterBindNotificationCB( bdbGCB_BindNotification_t pfnBindNotification )
   \                     bdb_RegisterBindNotificationCB:
    866          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    867            pfnBindNotificationCB = pfnBindNotification;
   \   000004   90....       MOV       DPTR,#pfnBindNotificationCB
   \   000007   02....       LJMP      ?Subroutine0 & 0xFFFF
    868          }
    869          
    870          /*********************************************************************
    871           * @fn      bdb_SendIdentifyQuery
    872           *
    873           * @brief   Sends Identify query from the given endpoint
    874           *
    875           * @param   endpoint
    876           *
    877           * @return  ZStatus_t
    878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    879          ZStatus_t bdb_SendIdentifyQuery( uint8 endpoint )
   \                     bdb_SendIdentifyQuery:
    880          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
    881            afAddrType_t dstAddr;
    882            ZStatus_t    status;
    883            
    884            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   74FF         MOV       A,#-0x1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    885            dstAddr.addrMode = afAddr16Bit;
   \   000017   7408         MOV       A,#0x8
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   7402         MOV       A,#0x2
   \   00001E   F0           MOVX      @DPTR,A
    886            dstAddr.endPoint = 0xFF;
   \   00001F   7409         MOV       A,#0x9
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   74FF         MOV       A,#-0x1
   \   000026   F0           MOVX      @DPTR,A
    887          
    888            status = zclGeneral_SendIdentifyQuery( endpoint, &dstAddr, TRUE, bdb_getZCLFrameCounter() ); 
   \   000027                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000027   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   00002A   E9           MOV       A,R1
   \   00002B   F9           MOV       R1,A
   \   00002C                ; Setup parameters for call to function zcl_SendCommand
   \   00002C   E4           CLR       A
   \   00002D   F5..         MOV       ?V0,A
   \   00002F   F5..         MOV       ?V1,A
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   E9           MOV       A,R1
   \   00003C   F5..         MOV       ?V0,A
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000043   E4           CLR       A
   \   000044   F5..         MOV       ?V0,A
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   75..01       MOV       ?V0,#0x1
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000053   75..00       MOV       ?V0,#0x0
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005B   75..01       MOV       ?V0,#0x1
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000068   7C03         MOV       R4,#0x3
   \   00006A   7D00         MOV       R5,#0x0
   \   00006C   740B         MOV       A,#0xb
   \   00006E   12....       LCALL     ?XSTACK_DISP101_8
   \   000071   EF           MOV       A,R7
   \   000072   F9           MOV       R1,A
   \   000073   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000076   740B         MOV       A,#0xb
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007B   E9           MOV       A,R1
   \   00007C   FE           MOV       R6,A
    889            
    890            if(status == ZSuccess)
   \   00007D   7017         JNZ       ??bdb_SendIdentifyQuery_0
    891            {
    892              osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT, IDENTIFY_QUERY_RSP_TIMEOUT );
   \   00007F                ; Setup parameters for call to function osal_start_timerEx
   \   00007F   90....       MOV       DPTR,#__Constant_1388
   \   000082   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000085   7A00         MOV       R2,#0x0
   \   000087   7B40         MOV       R3,#0x40
   \   000089   90....       MOV       DPTR,#bdb_TaskID
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F9           MOV       R1,A
   \   00008E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000091   7404         MOV       A,#0x4
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
    893            }
    894            
    895            return status;
   \                     ??bdb_SendIdentifyQuery_0:
   \   000096   EE           MOV       A,R6
   \   000097   F9           MOV       R1,A
   \   000098   740C         MOV       A,#0xc
   \   00009A   02....       LJMP      ?Subroutine1 & 0xFFFF
    896          }
    897          
    898          /*********************************************************************
    899           * @fn      bdb_ZclIdentifyQueryCmdInd
    900           *
    901           * @brief   Callback from the ZCL General Cluster Library when
    902           *          it received an Identity Query Response Command for this 
    903           *          application.
    904           *
    905           * @param   srcAddr - source address and endpoint of the response message
    906           * @param   identifyTime - the number of seconds to identify yourself
    907           *
    908           * @return  none
    909           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    910          void bdb_ZclIdentifyQueryCmdInd( zclIdentifyQueryRsp_t *pCmd )
   \                     bdb_ZclIdentifyQueryCmdInd:
    911          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    912            bdbFindingBindingRespondent_t *pCurr;
    913            
    914            // Stop the timer before refresh
    915            osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   \   000009                ; Setup parameters for call to function osal_stop_timerEx
   \   000009   12....       LCALL     ?Subroutine26 & 0xFFFF
    916            
    917            // add new node to the list
    918            pCurr = bdb_AddRespondentNode( &pRespondentHead, pCmd );
   \                     ??CrossCallReturnLabel_81:
   \   00000C                ; Setup parameters for call to function bdb_AddRespondentNode
   \   00000C   EE           MOV       A,R6
   \   00000D   FC           MOV       R4,A
   \   00000E   EF           MOV       A,R7
   \   00000F   FD           MOV       R5,A
   \   000010   7A..         MOV       R2,#pRespondentHead & 0xff
   \   000012   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   000014   12....       LCALL     `??bdb_AddRespondentNode::?relay`; Banked call to: bdb_AddRespondentNode
    919            
    920            if(pCurr != NULL)
   \   000017   EA           MOV       A,R2
   \   000018   4B           ORL       A,R3
   \   000019   605D         JZ        ??bdb_ZclIdentifyQueryCmdInd_0
    921            {
    922              pCurr->data.addrMode = pCmd->srcAddr->addrMode;
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000022   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000025   F0           MOVX      @DPTR,A
    923              pCurr->data.addr.shortAddr = pCmd->srcAddr->addr.shortAddr;
   \   000026   8882         MOV       DPL,R0
   \   000028   8983         MOV       DPH,R1
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   FC           MOV       R4,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FD           MOV       R5,A
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   EC           MOV       A,R4
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   ED           MOV       A,R5
   \   000037   F0           MOVX      @DPTR,A
    924              pCurr->data.endPoint = pCmd->srcAddr->endPoint;
   \   000038   8882         MOV       DPL,R0
   \   00003A   8983         MOV       DPH,R1
   \   00003C   A3           INC       DPTR
   \   00003D   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000040   A3           INC       DPTR
   \   000041   F0           MOVX      @DPTR,A
    925              pCurr->data.panId = pCmd->srcAddr->panId;
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000049   240A         ADD       A,#0xa
   \   00004B   F582         MOV       DPL,A
   \   00004D   E4           CLR       A
   \   00004E   38           ADDC      A,R0
   \   00004F   F583         MOV       DPH,A
   \   000051   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    926              pCurr->attempts = FINDING_AND_BINDING_NEW_RESPONDENT;
   \                     ??CrossCallReturnLabel_49:
   \   000065   EA           MOV       A,R2
   \   000066   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000069   E4           CLR       A
   \   00006A   F0           MOVX      @DPTR,A
    927              pCurr->SimpleDescriptor = NULL;
   \   00006B   EA           MOV       A,R2
   \   00006C   240D         ADD       A,#0xd
   \   00006E   F582         MOV       DPL,A
   \   000070   E4           CLR       A
   \   000071   3B           ADDC      A,R3
   \   000072   F583         MOV       DPH,A
   \   000074   E4           CLR       A
   \   000075   F0           MOVX      @DPTR,A
   \   000076   A3           INC       DPTR
   \   000077   F0           MOVX      @DPTR,A
    928            }
    929            
    930            //Process the identify query rsp
    931            osal_set_event(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT);
   \                     ??bdb_ZclIdentifyQueryCmdInd_0:
   \   000078                ; Setup parameters for call to function osal_set_event
   \   000078   7A00         MOV       R2,#0x0
   \   00007A   7B40         MOV       R3,#0x40
   \   00007C   90....       MOV       DPTR,#bdb_TaskID
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F9           MOV       R1,A
   \   000081   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    932          }
   \   000084   02....       LJMP      ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   22           RET
    933          
    934          /*********************************************************************
    935           * @fn      bdb_ProcessRespondentList
    936           *
    937           * @brief   Process the respondent list by sending Simple Descriptor request to 
    938           *          devices respondent in the list. Also send IEEE Addr Req to those 
    939           *          device for which a bind is created buy IEEE addr is missing.
    940           *
    941           * @param   none
    942           *
    943           * @return  none
    944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   90....       MOV       DPTR,#pRespondentCurr
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    945          void bdb_ProcessRespondentList( void )
   \                     bdb_ProcessRespondentList:
    946          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    947            zAddrType_t dstAddr = { 0 };
   \   00000A   90....       MOV       DPTR,#`?<Constant {{0}}>`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7409         MOV       A,#0x9
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    948            
    949            // Look for the first respondent
    950            if ( pRespondentCurr == NULL )
   \   000016   90....       MOV       DPTR,#pRespondentCurr
   \   000019   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00001C   7011         JNZ       ??bdb_ProcessRespondentList_0
    951            {
    952              pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
   \   00001E                ; Setup parameters for call to function bdb_getRespondentRetry
   \   00001E   12....       LCALL     ?Subroutine10 & 0xFFFF
    953              
    954              // If null, then no responses from Identify query request
    955              if ( (pRespondentCurr == NULL) )
   \                     ??CrossCallReturnLabel_9:
   \   000021   7042         JNZ       ??CrossCallReturnLabel_50
    956              {
    957                //No responses, then no responses
    958                if(pRespondentHead == NULL)
   \   000023   90....       MOV       DPTR,#pRespondentHead
   \   000026   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000029   702C         JNZ       ??bdb_ProcessRespondentList_1
    959                {
    960                  bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   \   00002B                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00002B   790B         MOV       R1,#0xb
   \   00002D   802A         SJMP      ??bdb_ProcessRespondentList_2
    961                }
    962                //Responses and binded to all clusters possible
    963                else
    964                {
    965                  bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
    966                }
    967                return;
    968              }
    969            }
    970            else
    971            {
    972              //Validate that we are not processing a missing IEEE Address before chaning 
    973              //the current respondent to be process
    974              if((pRespondentCurr->attempts & FINDING_AND_BINDING_MISSING_IEEE_ADDR) &&
    975                 ((pRespondentCurr->attempts & (~FINDING_AND_BINDING_MISSING_IEEE_ADDR)) >= FINDING_AND_BINDING_MAX_ATTEMPTS))
   \                     ??bdb_ProcessRespondentList_0:
   \   00002F   90....       MOV       DPTR,#pRespondentCurr
   \   000032   E0           MOVX      A,@DPTR
   \   000033   240C         ADD       A,#0xc
   \   000035   F8           MOV       R0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   3400         ADDC      A,#0x0
   \   00003A   8882         MOV       DPL,R0
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   A2E7         MOV       C,0xE0 /* A   */.7
   \   000041   5022         JNC       ??CrossCallReturnLabel_50
   \   000043   547F         ANL       A,#0x7f
   \   000045   C3           CLR       C
   \   000046   9404         SUBB      A,#0x4
   \   000048   401B         JC        ??CrossCallReturnLabel_50
    976              {
    977                if(pRespondentNext == NULL)
   \   00004A   90....       MOV       DPTR,#pRespondentNext
   \   00004D   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000050   700D         JNZ       ??bdb_ProcessRespondentList_3
    978                {
    979                  //Review the whole list if we have simple desc that we need to attempt.
    980                  pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
   \   000052                ; Setup parameters for call to function bdb_getRespondentRetry
   \   000052   12....       LCALL     ?Subroutine10 & 0xFFFF
    981                    
    982                  if(pRespondentCurr == NULL)
   \                     ??CrossCallReturnLabel_10:
   \   000055   700E         JNZ       ??CrossCallReturnLabel_50
    983                  {
    984                    bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
   \   000057                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \                     ??bdb_ProcessRespondentList_1:
   \   000057   7900         MOV       R1,#0x0
   \                     ??bdb_ProcessRespondentList_2:
   \   000059   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
    985                    return;
   \   00005C   02....       LJMP      ??CrossCallReturnLabel_92 & 0xFFFF
    986                  }
    987                }
    988                else
    989                {
    990                  pRespondentCurr = pRespondentNext;
   \                     ??bdb_ProcessRespondentList_3:
   \   00005F   90....       MOV       DPTR,#pRespondentCurr
   \   000062   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    991                }
    992              }
    993            }
    994            
    995            //Start the timer to process the next respondent
    996            osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT, SIMPLEDESC_RESPONSE_TIMEOUT );
   \                     ??CrossCallReturnLabel_50:
   \   000065                ; Setup parameters for call to function osal_start_timerEx
   \   000065   90....       MOV       DPTR,#__Constant_1388
   \   000068   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00006B   7A00         MOV       R2,#0x0
   \   00006D   7B40         MOV       R3,#0x40
   \   00006F   90....       MOV       DPTR,#bdb_TaskID
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F9           MOV       R1,A
   \   000074   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000077   7404         MOV       A,#0x4
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
    997            
    998            //If ParentLost is reported, then do not attempt send SimpleDesc, mark those as pending, 
    999            //if Parent Lost is restored, then these simpleDesc attempts will be restored to 0
   1000            if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
   \   00007C   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   6408         XRL       A,#0x8
   \   000082   90....       MOV       DPTR,#pRespondentCurr
   \   000085   6069         JZ        ??bdb_ProcessRespondentList_4
   1001            {
   1002              dstAddr.addr.shortAddr = pRespondentCurr->data.addr.shortAddr;
   \   000087   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00008A   12....       LCALL     ?Subroutine12 & 0xFFFF
   1003              dstAddr.addrMode = pRespondentCurr->data.addrMode;
   \                     ??CrossCallReturnLabel_15:
   \   00008D   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000090   2408         ADD       A,#0x8
   \   000092   F582         MOV       DPL,A
   \   000094   E4           CLR       A
   \   000095   38           ADDC      A,R0
   \   000096   F583         MOV       DPH,A
   \   000098   E0           MOVX      A,@DPTR
   \   000099   C0E0         PUSH      A
   \   00009B   7408         MOV       A,#0x8
   \   00009D   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A0   D0E0         POP       A
   \   0000A2   12....       LCALL     ?Subroutine6 & 0xFFFF
   1004          
   1005              //Update the attempts, ahead of actually sending the frame, as this is done just below
   1006              pRespondentCurr->attempts++;
   \                     ??CrossCallReturnLabel_97:
   \   0000A5   04           INC       A
   \   0000A6   12....       LCALL     ?Subroutine6 & 0xFFFF
   1007              
   1008              //Send IEEE addr request or simple desc req
   1009              if(pRespondentCurr->attempts & FINDING_AND_BINDING_MISSING_IEEE_ADDR)
   \                     ??CrossCallReturnLabel_98:
   \   0000A9   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000AB   5015         JNC       ??bdb_ProcessRespondentList_5
   1010              {
   1011                ZDP_IEEEAddrReq(pRespondentCurr->data.addr.shortAddr,0,0,0);
   \   0000AD                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   0000AD   7D00         MOV       R5,#0x0
   \   0000AF   7C00         MOV       R4,#0x0
   \   0000B1   7900         MOV       R1,#0x0
   \   0000B3   90....       MOV       DPTR,#pRespondentCurr
   \   0000B6   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   1012              }
   \                     ??CrossCallReturnLabel_41:
   \   0000B9   FA           MOV       R2,A
   \   0000BA   A3           INC       DPTR
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   FB           MOV       R3,A
   \   0000BD   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   0000C0   8034         SJMP      ??bdb_ProcessRespondentList_6
   1013              else
   1014              {
   1015                //Send simple descriptor
   1016                ZDP_SimpleDescReq( &dstAddr, pRespondentCurr->data.addr.shortAddr, pRespondentCurr->data.endPoint, 0 );
   \                     ??bdb_ProcessRespondentList_5:
   \   0000C2                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   0000C2   75..00       MOV       ?V0,#0x0
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CA   12....       LCALL     ?Subroutine21 & 0xFFFF
   1017              }
   1018            }
   \                     ??CrossCallReturnLabel_89:
   \   0000CD   2409         ADD       A,#0x9
   \   0000CF   F582         MOV       DPL,A
   \   0000D1   E4           CLR       A
   \   0000D2   38           ADDC      A,R0
   \   0000D3   F583         MOV       DPH,A
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F9           MOV       R1,A
   \   0000D7   90....       MOV       DPTR,#pRespondentCurr
   \   0000DA   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000DD   FC           MOV       R4,A
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   FD           MOV       R5,A
   \   0000E1   7401         MOV       A,#0x1
   \   0000E3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E6   12....       LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   0000E9   7401         MOV       A,#0x1
   \   0000EB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EE   8006         SJMP      ??bdb_ProcessRespondentList_6
   1019            else
   1020            {
   1021              //Stop any attempt due to parent lost
   1022              pRespondentCurr->attempts |= FINDING_AND_BINDING_PARENT_LOST;
   \                     ??bdb_ProcessRespondentList_4:
   \   0000F0   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   1023            }
   \                     ??CrossCallReturnLabel_100:
   \   0000F3   D2E6         SETB      0xE0 /* A   */.6
   \   0000F5   F0           MOVX      @DPTR,A
   1024            
   1025            //Search for the next respondant that has not enough tries in the list
   1026            pRespondentNext = bdb_getRespondentRetry(pRespondentCurr->pNext);
   \                     ??bdb_ProcessRespondentList_6:
   \   0000F6                ; Setup parameters for call to function bdb_getRespondentRetry
   \   0000F6   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0000F9   240F         ADD       A,#0xf
   \   0000FB   F582         MOV       DPL,A
   \   0000FD   E4           CLR       A
   \   0000FE   38           ADDC      A,R0
   \   0000FF   F583         MOV       DPH,A
   \   000101   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000104   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   000107   90....       MOV       DPTR,#pRespondentNext
   \   00010A   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   1027          }
   \                     ??CrossCallReturnLabel_92:
   \   00010D   7409         MOV       A,#0x9
   \   00010F   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV       DPTR,#pRespondentHead
   \   000003   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000006   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   000009   90....       MOV       DPTR,#pRespondentCurr
   \   00000C   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00000F   F9           MOV       R1,A
   \   000010   EA           MOV       A,R2
   \   000011   49           ORL       A,R1
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#pRespondentCurr
   \   000004                REQUIRE ??Subroutine55_0
   \   000004                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   00           DB 0
   1028          
   1029          /*********************************************************************
   1030           * @fn      bdb_FindIfAppCluster
   1031           *
   1032           * @brief   To verify if cluster is application type and should the local device create a bind for it
   1033           *
   1034           * @param   ClusterId - cluster ID to be verified
   1035           * @param   isClusterOutput - True if the bind attempted is output cluster in the local device, false otherwise
   1036           *
   1037           * @return  true if success
   1038           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1039          uint8 bdb_FindIfAppCluster( cId_t ClusterId, uint8 isClusterOutput )
   \                     bdb_FindIfAppCluster:
   1040          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   1041            uint8 i;
   1042            uint8 ClusterCnt;
   1043          
   1044            if(isClusterOutput)
   \   000006   7800         MOV       R0,#0x0
   \   000008   6023         JZ        ??bdb_FindIfAppCluster_0
   1045            {
   1046                ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
   1047          
   1048                for ( i = 0; i < ClusterCnt; i++ )
   1049                {
   1050                  if ( bdb_ZclType1Clusters[i] == ClusterId )
   \                     ??bdb_FindIfAppCluster_1:
   \   00000A   E8           MOV       A,R0
   \   00000B   25E0         ADD       A,0xE0 /* A   */
   \   00000D   FC           MOV       R4,A
   \   00000E   E4           CLR       A
   \   00000F   33           RLC       A
   \   000010   FD           MOV       R5,A
   \   000011   74..         MOV       A,#bdb_ZclType1Clusters & 0xff
   \   000013   2C           ADD       A,R4
   \   000014   F582         MOV       DPL,A
   \   000016   74..         MOV       A,#(bdb_ZclType1Clusters >> 8) & 0xff
   \   000018   3D           ADDC      A,R5
   \   000019   F583         MOV       DPH,A
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6A           XRL       A,R2
   \   00001D   7003         JNZ       ??bdb_FindIfAppCluster_2
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   6B           XRL       A,R3
   \                     ??bdb_FindIfAppCluster_2:
   \   000022   6023         JZ        ??bdb_FindIfAppCluster_3
   1051                  {
   1052                    return ( SUCCESS );
   1053                  }
   1054                }
   \   000024   08           INC       R0
   \   000025   E8           MOV       A,R0
   \   000026   C3           CLR       C
   \   000027   9418         SUBB      A,#0x18
   \   000029   5027         JNC       ??bdb_FindIfAppCluster_4
   \   00002B   80DD         SJMP      ??bdb_FindIfAppCluster_1
   1055            }
   1056            else
   1057            {
   1058                ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
   1059          
   1060                for ( i = 0; i < ClusterCnt; i++ )
   1061                {
   1062                  if ( bdb_ZclType2Clusters[i] == ClusterId )
   \                     ??bdb_FindIfAppCluster_0:
   \   00002D   E8           MOV       A,R0
   \   00002E   25E0         ADD       A,0xE0 /* A   */
   \   000030   FC           MOV       R4,A
   \   000031   E4           CLR       A
   \   000032   33           RLC       A
   \   000033   FD           MOV       R5,A
   \   000034   74..         MOV       A,#bdb_ZclType2Clusters & 0xff
   \   000036   2C           ADD       A,R4
   \   000037   F582         MOV       DPL,A
   \   000039   74..         MOV       A,#(bdb_ZclType2Clusters >> 8) & 0xff
   \   00003B   3D           ADDC      A,R5
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6A           XRL       A,R2
   \   000040   7003         JNZ       ??bdb_FindIfAppCluster_5
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6B           XRL       A,R3
   \                     ??bdb_FindIfAppCluster_5:
   \   000045   7004         JNZ       ??bdb_FindIfAppCluster_6
   1063                  {
   1064                    return ( SUCCESS );
   \                     ??bdb_FindIfAppCluster_3:
   \   000047   7900         MOV       R1,#0x0
   \   000049   8009         SJMP      ??bdb_FindIfAppCluster_7
   1065                  }
   1066                }
   \                     ??bdb_FindIfAppCluster_6:
   \   00004B   08           INC       R0
   \   00004C   E8           MOV       A,R0
   \   00004D   C3           CLR       C
   \   00004E   9431         SUBB      A,#0x31
   \   000050   40DB         JC        ??bdb_FindIfAppCluster_0
   1067            }
   1068            
   1069            // If not found, take it as application cluster it will be filtered
   1070            // by simple descriptor at some point
   1071            return ( FAILURE );
   \                     ??bdb_FindIfAppCluster_4:
   \   000052   7901         MOV       R1,#0x1
   \                     ??bdb_FindIfAppCluster_7:
   \   000054   02....       LJMP      ??Subroutine48_0 & 0xFFFF
   1072          }
   1073          
   1074          
   1075          /*********************************************************************
   1076           * @fn      bdb_getRespondentRetry
   1077           *
   1078           * @brief   Get the next Respondant entry to retry
   1079           *
   1080           * @param   pHead - pointer to a pointer of the list head
   1081           *
   1082           * @return  respondant entry if found, otherwise NULL
   1083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1084          bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead)
   \                     bdb_getRespondentRetry:
   1085          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1086            bdbFindingBindingRespondent_t *pTemp;
   1087            
   1088            pTemp = pRespondentHead;
   \   000004   800C         SJMP      ??CrossCallReturnLabel_73
   1089            
   1090            while(pTemp != NULL)
   1091            {
   1092              //does the next entry requires to perform an attempt on simple desc req or IEEE addr req?
   1093              if((pTemp->attempts & ~FINDING_AND_BINDING_MISSING_IEEE_ADDR) < FINDING_AND_BINDING_MAX_ATTEMPTS)
   1094              {
   1095                return pTemp;
   1096              }
   1097             
   1098              pTemp = pTemp->pNext;
   \                     ??bdb_getRespondentRetry_0:
   \   000006   EA           MOV       A,R2
   \   000007   240F         ADD       A,#0xf
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   3B           ADDC      A,R3
   \   00000D   F583         MOV       DPH,A
   \   00000F   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   600D         JZ        ??bdb_getRespondentRetry_1
   \   000016   EA           MOV       A,R2
   \   000017   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00001A   547F         ANL       A,#0x7f
   \   00001C   C3           CLR       C
   \   00001D   9404         SUBB      A,#0x4
   \   00001F   50E5         JNC       ??bdb_getRespondentRetry_0
   \   000021   8004         SJMP      ??bdb_getRespondentRetry_2
   1099            }
   1100            return NULL;
   \                     ??bdb_getRespondentRetry_1:
   \   000023   7A00         MOV       R2,#0x0
   \   000025   7B00         MOV       R3,#0x0
   \                     ??bdb_getRespondentRetry_2:
   \   000027   02....       LJMP      ??Subroutine40_0 & 0xFFFF
   1101          }
   1102          
   1103          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1104          bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress)
   \                     bdb_findRespondentNode:
   1105          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1106            bdbFindingBindingRespondent_t* pTemp = pRespondentHead;
   \   000004   90....       MOV       DPTR,#pRespondentHead
   \   000007   8009         SJMP      ??bdb_findRespondentNode_0
   1107            
   1108            while(pTemp != NULL)  
   1109            {
   1110              if((pTemp->data.addr.shortAddr == shortAddress) && (pTemp->data.endPoint == endpoint))
   1111              {
   1112                return pTemp;
   1113              }
   1114              
   1115              pTemp = pTemp->pNext;
   \                     ??bdb_findRespondentNode_1:
   \   000009   EC           MOV       A,R4
   \   00000A   240F         ADD       A,#0xf
   \   00000C   F582         MOV       DPL,A
   \   00000E   E4           CLR       A
   \   00000F   3D           ADDC      A,R5
   \   000010   F583         MOV       DPH,A
   \                     ??bdb_findRespondentNode_0:
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FC           MOV       R4,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FD           MOV       R5,A
   \   000017   EC           MOV       A,R4
   \   000018   4D           ORL       A,R5
   \   000019   6024         JZ        ??bdb_findRespondentNode_2
   \   00001B   8C82         MOV       DPL,R4
   \   00001D   8D83         MOV       DPH,R5
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6A           XRL       A,R2
   \   000021   7003         JNZ       ??bdb_findRespondentNode_3
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6B           XRL       A,R3
   \                     ??bdb_findRespondentNode_3:
   \   000026   70E1         JNZ       ??bdb_findRespondentNode_1
   \   000028   8C82         MOV       DPL,R4
   \   00002A   8D83         MOV       DPH,R5
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   69           XRL       A,R1
   \   000037   70D0         JNZ       ??bdb_findRespondentNode_1
   \   000039   EC           MOV       A,R4
   \   00003A   FA           MOV       R2,A
   \   00003B   ED           MOV       A,R5
   \   00003C   FB           MOV       R3,A
   \   00003D   8004         SJMP      ??bdb_findRespondentNode_4
   1116            }
   1117            
   1118            return NULL;
   \                     ??bdb_findRespondentNode_2:
   \   00003F   7A00         MOV       R2,#0x0
   \   000041   7B00         MOV       R3,#0x0
   \                     ??bdb_findRespondentNode_4:
   \   000043   02....       LJMP      ??Subroutine40_0 & 0xFFFF
   1119          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for grpName>`:
   \   000000   47           DB 71
   \   000001   72           DB 114
   \   000002   6F           DB 111
   \   000003   75           DB 117
   \   000004   70           DB 112
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bdbIndentifyActiveEndpoint>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zcl_Groups_Options>`:
   \   000000   0400         DW 4
   \   000002   10           DB 16

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e7:
   \   000000   E7030000     DD 999

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000
   1120          
   1121          #endif  
   1122          
   1123          /*********************************************************************
   1124          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     23   bdb_FindIfAppCluster
      1     20   bdb_GetFBInitiatorStatus
        0     20   -> osal_get_timeoutEx
      0     25   bdb_ProcessIEEEAddrRsp
        0     25   -> AddrMgrEntryUpdate
        0     25   -> AddrMgrExtAddrSet
        0     25   -> ZDO_ParseAddrRsp
        0     25   -> bdb_checkMatchingEndpoints
        0     25   -> bdb_exitFindingBindingWStatus
        0     25   -> bdb_findRespondentNode
        0     25   -> bdb_setEpDescListToActiveEndpoint
        0     25   -> bdb_zclSimpleDescClusterListClean
        0     25   -> osal_mem_free
        0     25   -> osal_stop_timerEx
      1     22   bdb_ProcessRespondentList
        0     18   -> ZDP_IEEEAddrReq
        0     19   -> ZDP_SimpleDescReq
        0     18   -> bdb_exitFindingBindingWStatus
        0     18   -> bdb_getRespondentRetry
        0     22   -> osal_start_timerEx
      0     28   bdb_ProcessSimpleDesc
        0     28   -> AddrMgrExtAddrLookup
        0     28   -> ZDO_ParseSimpleDescBuf
        0     28   -> bdb_checkMatchingEndpoints
        0     28   -> bdb_findRespondentNode
        0     28   -> bdb_setEpDescListToActiveEndpoint
        0     28   -> bdb_zclSimpleDescClusterListClean
      2      0   bdb_RegisterBindNotificationCB
      2      0   bdb_RegisterIdentifyTimeChangeCB
      0     33   bdb_SendIdentifyQuery
        0     22   -> bdb_getZCLFrameCounter
        0     26   -> osal_start_timerEx
        0     33   -> zcl_SendCommand
      2      0   bdb_SetIdentifyActiveEndpoint
      2      0   bdb_StopInitiatorFindingBinding
        2      0   -> bdb_exitFindingBindingWStatus
        2      0   -> bdb_zclRespondentListClean
        2      0   -> osal_stop_timerEx
      1     10   bdb_ZclIdentifyQueryCmdInd
        0     10   -> bdb_AddRespondentNode
        0     10   -> osal_set_event
        0     10   -> osal_stop_timerEx
      1     75   bdb_checkMatchingEndpoints
        0     41   -> AddrMgrExtAddrLookup
        0     41   -> bdb_exitFindingBindingWStatus
        0     47   -> bdb_zclFindingBindingAddBindEntry
        0     41   -> bdb_zclSimpleDescClusterListClean
        0     41   -> osal_stop_timerEx
        0     46   -> zclGeneral_SendAddGroupRequest
        0     41   -> zcl_registerClusterOptionList
      0     50   bdb_exitFindingBindingWStatus
        0      9   -> bdb_reportCommissioningState
      2     28   bdb_findRespondentNode
      2     18   bdb_getRespondentRetry
      2     28   bdb_setEpDescListToActiveEndpoint
      0     63   bdb_zclFindingBindingAddBindEntry
        0     16   -> ZDO_AnyClusterMatches
        0     14   -> bdb_FindIfAppCluster
      0     16   bdb_zclFindingBindingEpType
        0     16   -> ZDO_AnyClusterMatches
      0     51   bdb_zclSimpleDescClusterListClean
        0     10   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ?<Constant {{0}}>
       1  ?<Initializer for bdbIndentifyActiveEndpoint>
       6  ?<Initializer for grpName>
       3  ?<Initializer for zcl_Groups_Options>
       5  ??Subroutine39_0
       7  ??Subroutine40_0
       8  ??Subroutine41_0
       6  ??Subroutine42_0
      14  ??Subroutine43_0
       8  ??Subroutine44_0
       1  ??Subroutine45_0
       1  ??Subroutine46_0
       6  ??Subroutine47_0
       5  ??Subroutine48_0
       4  ??Subroutine49_0
       5  ??Subroutine50_0
       4  ??Subroutine51_0
       5  ??Subroutine52_0
       1  ??Subroutine53_0
       5  ??Subroutine54_0
       5  ??Subroutine55_0
       6  ??Subroutine56_0
       3  ?Subroutine0
       3  ?Subroutine1
      19  ?Subroutine10
       7  ?Subroutine11
      13  ?Subroutine12
       7  ?Subroutine13
       7  ?Subroutine14
      20  ?Subroutine15
      10  ?Subroutine16
      15  ?Subroutine17
      10  ?Subroutine18
       4  ?Subroutine19
       5  ?Subroutine2
      22  ?Subroutine20
       3  ?Subroutine21
       1  ?Subroutine22
       8  ?Subroutine23
       4  ?Subroutine24
      11  ?Subroutine25
       4  ?Subroutine26
       5  ?Subroutine27
      13  ?Subroutine28
      12  ?Subroutine29
       3  ?Subroutine3
       5  ?Subroutine30
       3  ?Subroutine31
       3  ?Subroutine32
       6  ?Subroutine33
       9  ?Subroutine34
       3  ?Subroutine35
       6  ?Subroutine36
       9  ?Subroutine37
       5  ?Subroutine38
      20  ?Subroutine4
      10  ?Subroutine5
       4  ?Subroutine6
      31  ?Subroutine7
      28  ?Subroutine8
      20  ?Subroutine9
       4  __Constant_1388
       4  __Constant_3e7
       4  __Constant_3e8
       1  bdbIndentifyActiveEndpoint
      87  bdb_FindIfAppCluster
      12  bdb_FindingBindingTargetSimpleDesc
     109  bdb_GetFBInitiatorStatus
     172  bdb_ProcessIEEEAddrRsp
     274  bdb_ProcessRespondentList
     202  bdb_ProcessSimpleDesc
      10  bdb_RegisterBindNotificationCB
      10  bdb_RegisterIdentifyTimeChangeCB
     157  bdb_SendIdentifyQuery
      82  bdb_SetIdentifyActiveEndpoint
      33  bdb_StopInitiatorFindingBinding
     135  bdb_ZclIdentifyQueryCmdInd
      48  bdb_ZclType1Clusters
      98  bdb_ZclType2Clusters
     506  bdb_checkMatchingEndpoints
      19  bdb_exitFindingBindingWStatus
      70  bdb_findRespondentNode
      42  bdb_getRespondentRetry
      87  bdb_setEpDescListToActiveEndpoint
     149  bdb_zclFindingBindingAddBindEntry
     175  bdb_zclFindingBindingEpType
      78  bdb_zclSimpleDescClusterListClean
       6  grpName
       2  pfnBindNotificationCB
       2  pfnIdentifyTimeChangeCB
       3  zcl_Groups_Options
     114  -- Other

 
 2 864 bytes in segment BANKED_CODE
   114 bytes in segment BANK_RELAYS
    10 bytes in segment XDATA_I
    10 bytes in segment XDATA_ID
   167 bytes in segment XDATA_ROM_C
    16 bytes in segment XDATA_Z
 
   124 bytes of CODE     memory
   155 bytes of CONST    memory (+ 12 bytes shared)
 2 864 bytes of HUGECODE memory
    26 bytes of XDATA    memory

Errors: none
Warnings: none
