###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               18/Apr/2021  01:42:04
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Components\stack\zcl\zcl_general.c
#    Command line       =  
#        -f C:\users\slavko\Temp\EWcb5.tmp ("C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Components\stack\zcl\zcl_general.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List\zcl_general.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj\zcl_general.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Components\stack\zcl\zcl_general.c
      1          /**************************************************************************************************
      2            Filename:       zcl_general.c
      3            Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
      4            Revision:       $Revision: 44493 $
      5          
      6            Description:    Zigbee Cluster Library - General.  This application receives all
      7                            ZCL messages and initially parses them before passing to application.
      8          
      9          
     10            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "zcl.h"
     46          #include "zcl_general.h"
     47          //#include "ZDApp.h"
     48          
     49          #if defined ( INTER_PAN )
     50            #include "stub_aps.h"
     51          #endif
     52          #include "bdb.h"
     53          
     54          /*********************************************************************
     55           * MACROS
     56           */
     57          #define locationTypeAbsolute( a )          ( (a) & LOCATION_TYPE_ABSOLUTE )
     58          #define locationType2D( a )                ( (a) & LOCATION_TYPE_2_D )
     59          #define locationTypeCoordinateSystem( a )  ( (a) & LOCATION_TYPE_COORDINATE_SYSTEM )
     60          
     61          #ifdef ZCL_SCENES
     62          #define zclGeneral_ScenesRemaingCapacity() ( ZCL_GEN_MAX_SCENES - zclGeneral_CountAllScenes() )
     63          #endif // ZCL_SCENES
     64          
     65          /*********************************************************************
     66           * CONSTANTS
     67           */
     68          
     69          /*********************************************************************
     70           * TYPEDEFS
     71           */
     72          typedef struct zclGenCBRec
     73          {
     74            struct zclGenCBRec        *next;
     75            uint8                     endpoint; // Used to link it into the endpoint descriptor
     76            zclGeneral_AppCallbacks_t *CBs;     // Pointer to Callback function
     77          } zclGenCBRec_t;
     78          
     79          typedef struct zclGenSceneItem
     80          {
     81            struct zclGenSceneItem    *next;
     82            uint8                     endpoint; // Used to link it into the endpoint descriptor
     83            zclGeneral_Scene_t        scene;    // Scene info
     84          } zclGenSceneItem_t;
     85          
     86          typedef struct zclGenAlarmItem
     87          {
     88            struct zclGenAlarmItem    *next;
     89            uint8                     endpoint; // Used to link it into the endpoint descriptor
     90            zclGeneral_Alarm_t        alarm;    // Alarm info
     91          } zclGenAlarmItem_t;
     92          
     93          // Scene NV types
     94          typedef struct
     95          {
     96            uint16                    numRecs;
     97          } nvGenScenesHdr_t;
     98          
     99          typedef struct zclGenSceneNVItem
    100          {
    101            uint8                     endpoint;
    102            zclGeneral_Scene_t        scene;
    103          } zclGenSceneNVItem_t;
    104          
    105          /*********************************************************************
    106           * GLOBAL VARIABLES
    107           */
    108          
    109          /*********************************************************************
    110           * GLOBAL FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * LOCAL VARIABLES
    115           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          static zclGenCBRec_t *zclGenCBs = (zclGenCBRec_t *)NULL;
   \                     zclGenCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          static uint8 zclGenPluginRegisted = FALSE;
   \                     zclGenPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    118          
    119          #if defined( ZCL_SCENES )
    120            #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121              static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
   \                     zclGenSceneTable:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    122            #endif
    123          #endif // ZCL_SCENES
    124          
    125          #ifdef ZCL_ALARMS
    126          static zclGenAlarmItem_t *zclGenAlarmTable = (zclGenAlarmItem_t *)NULL;
    127          #endif // ZCL_ALARMS
    128          
    129          /*********************************************************************
    130           * LOCAL FUNCTIONS
    131           */
    132          static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg );
    133          static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    134          static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint );
    135          
    136          // Device Configuration and Installation clusters
    137          #ifdef ZCL_BASIC
    138          static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    139          #endif // ZCL_BASIC
    140          
    141          #ifdef ZCL_IDENTIFY
    142          static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    143          #endif // ZCL_IDENTIFY
    144          
    145          // Groups and Scenes clusters
    146          #ifdef ZCL_GROUPS
    147          static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg );
    148          static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    149          static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData );
    150          #endif // ZCL_GROUPS
    151          
    152          #ifdef ZCL_SCENES
    153          static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    154          static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    155          #endif // ZCL_SCENES
    156          
    157          // On/Off and Level Control Configuration clusters
    158          #ifdef ZCL_ON_OFF
    159          static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    160          #endif // ZCL_ONOFF
    161          
    162          #ifdef ZCL_LEVEL_CTRL
    163          static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    164          #endif // ZCL_LEVEL_CTRL
    165          
    166          // Alarms cluster
    167          #ifdef ZCL_ALARMS
    168          static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    169          static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    170          #endif // ZCL_ALARMS
    171          
    172          // Location cluster
    173          #ifdef ZCL_LOCATION
    174          static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    175          static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    176          #endif // ZCL_LOCATION
    177          
    178          #ifdef ZCL_SCENES
    179            #if !defined ( ZCL_STANDALONE )
    180              static uint8 zclGeneral_ScenesInitNV( void );
    181              static void zclGeneral_ScenesSetDefaultNV( void );
    182              static void zclGeneral_ScenesWriteNV( void );
    183              static uint16 zclGeneral_ScenesRestoreFromNV( void );
    184            #endif
    185          #endif // ZCL_SCENES
    186          
    187          /*********************************************************************
    188           * @fn      zclGeneral_RegisterCmdCallbacks
    189           *
    190           * @brief   Register an applications command callbacks
    191           *
    192           * @param   endpoint - application's endpoint
    193           * @param   callbacks - pointer to the callback record.
    194           *
    195           * @return  ZMemError if not able to allocate
    196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          ZStatus_t zclGeneral_RegisterCmdCallbacks( uint8 endpoint, zclGeneral_AppCallbacks_t *callbacks )
   \                     zclGeneral_RegisterCmdCallbacks:
    198          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    199            zclGenCBRec_t *pNewItem;
    200            zclGenCBRec_t *pLoop;
    201          
    202            // Register as a ZCL Plugin
    203            if ( zclGenPluginRegisted == FALSE )
   \   00000B   90....       MOV       DPTR,#zclGenPluginRegisted
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   7024         JNZ       ??zclGeneral_RegisterCmdCallbacks_0
    204            {
    205              zcl_registerPlugin( ZCL_CLUSTER_ID_GEN_BASIC,
    206                                  ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
    207                                  zclGeneral_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV       ?V2,#`??zclGeneral_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV       ?V3,#(`??zclGeneral_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C14         MOV       R4,#0x14
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7A00         MOV       R2,#0x0
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
    208          
    209          #ifdef ZCL_SCENES
    210              // Initialize the Scenes Table
    211              zclGeneral_ScenesInit();
   \   00002C                ; Setup parameters for call to function zclGeneral_ScenesInit
   \   00002C   12....       LCALL     `??zclGeneral_ScenesInit::?relay`; Banked call to: zclGeneral_ScenesInit
    212          #endif // ZCL_SCENES
    213          
    214              zclGenPluginRegisted = TRUE;
   \   00002F   90....       MOV       DPTR,#zclGenPluginRegisted
   \   000032   7401         MOV       A,#0x1
   \   000034   F0           MOVX      @DPTR,A
    215            }
    216          
    217            // Fill in the new profile list
    218            pNewItem = zcl_mem_alloc( sizeof( zclGenCBRec_t ) );
   \                     ??zclGeneral_RegisterCmdCallbacks_0:
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   7A05         MOV       R2,#0x5
   \   000037   7B00         MOV       R3,#0x0
   \   000039   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003C   8A..         MOV       ?V2,R2
   \   00003E   8B..         MOV       ?V3,R3
   \   000040   A8..         MOV       R0,?V2
   \   000042   A9..         MOV       R1,?V3
    219            if ( pNewItem == NULL )
   \   000044   EA           MOV       A,R2
   \   000045   49           ORL       A,R1
   \   000046   7004         JNZ       ??zclGeneral_RegisterCmdCallbacks_1
    220              return (ZMemError);
   \   000048   7910         MOV       R1,#0x10
   \   00004A   8033         SJMP      ??zclGeneral_RegisterCmdCallbacks_2
    221          
    222            pNewItem->next = (zclGenCBRec_t *)NULL;
   \                     ??zclGeneral_RegisterCmdCallbacks_1:
   \   00004C   12....       LCALL     ?Subroutine54 & 0xFFFF
    223            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_98:
   \   00004F   E5..         MOV       A,?V0
   \   000051   12....       LCALL     ?Subroutine56 & 0xFFFF
    224            pNewItem->CBs = callbacks;
   \                     ??CrossCallReturnLabel_103:
   \   000054   EE           MOV       A,R6
   \   000055   F0           MOVX      @DPTR,A
   \   000056   A3           INC       DPTR
   \   000057   EF           MOV       A,R7
   \   000058   F0           MOVX      @DPTR,A
    225          
    226            // Find spot in list
    227            if (  zclGenCBs == NULL )
   \   000059   90....       MOV       DPTR,#zclGenCBs
   \   00005C   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00005F   90....       MOV       DPTR,#zclGenCBs
   \   000062   6016         JZ        ??zclGeneral_RegisterCmdCallbacks_3
    228            {
    229              zclGenCBs = pNewItem;
    230            }
    231            else
    232            {
    233              // Look for end of list
    234              pLoop = zclGenCBs;
   \   000064   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000067   8003         SJMP      ??zclGeneral_RegisterCmdCallbacks_4
    235              while ( pLoop->next != NULL )
    236                pLoop = pLoop->next;
   \                     ??zclGeneral_RegisterCmdCallbacks_5:
   \   000069   EA           MOV       A,R2
   \   00006A   FC           MOV       R4,A
   \   00006B   EB           MOV       A,R3
   \                     ??zclGeneral_RegisterCmdCallbacks_4:
   \   00006C   FD           MOV       R5,A
   \   00006D   8C82         MOV       DPL,R4
   \   00006F   8D83         MOV       DPH,R5
   \   000071   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000074   70F3         JNZ       ??zclGeneral_RegisterCmdCallbacks_5
    237          
    238              // Put new item at end of list
    239              pLoop->next = pNewItem;
   \   000076   8C82         MOV       DPL,R4
   \   000078   8D83         MOV       DPH,R5
    240            }
   \                     ??zclGeneral_RegisterCmdCallbacks_3:
   \   00007A   12....       LCALL     ?Subroutine57 & 0xFFFF
    241          
    242            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_268:
   \   00007D   7900         MOV       R1,#0x0
   \                     ??zclGeneral_RegisterCmdCallbacks_2:
   \   00007F   02....       LJMP      ??Subroutine87_0 & 0xFFFF
    243          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   E4           CLR       A
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000003   FB           MOV       R3,A
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine106_0
   \   000001                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    244          
    245          #ifdef ZCL_IDENTIFY
    246          /*********************************************************************
    247           * @fn      zclGeneral_SendIdentify
    248           *
    249           * @brief   Call to send out an Identify Command
    250           *
    251           * @param   srcEP - Sending application's endpoint
    252           * @param   dstAddr - where you want the message to go
    253           * @param   identifyTime - how long the device will continue to identify itself (in seconds)
    254           * @param   seqNum - identification number for the transaction
    255           *
    256           * @return  ZStatus_t
    257           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    258          ZStatus_t zclGeneral_SendIdentify( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentify:
    259                                             uint16 identifyTime, uint8 disableDefaultRsp, uint8 seqNum )
    260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    261            uint8 buf[2];
    262          
    263            buf[0] = LO_UINT16( identifyTime );
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    264            buf[1] = HI_UINT16( identifyTime );
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine49 & 0xFFFF
    265          
    266            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    267                                    COMMAND_IDENTIFY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    268                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_147:
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV       ?V0,#0x2
   \   000022   75..00       MOV       ?V1,#0x0
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   7411         MOV       A,#0x11
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000035   E4           CLR       A
   \   000036   F5..         MOV       ?V0,A
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7413         MOV       A,#0x13
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000048   75..00       MOV       ?V0,#0x0
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000050   75..01       MOV       ?V0,#0x1
   \   000053   02....       LJMP      ?Subroutine1 & 0xFFFF
    269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   ED           MOV       A,R5
   \   000001                REQUIRE ??Subroutine84_0
   \   000001                ; // Fall through to label ??Subroutine84_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   7C03         MOV       R4,#0x3
   \   000002                REQUIRE ??Subroutine92_0
   \   000002                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   EE           MOV       A,R6
   \   000003   F9           MOV       R1,A
   \   000004                REQUIRE ??Subroutine93_0
   \   000004                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000003   740B         MOV       A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   78..         MOV       R0,#?V0
   \   000002   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000005   75..00       MOV       ?V0,#0x0
   \   000008   78..         MOV       R0,#?V0
   \   00000A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00000D   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000010   12....       LCALL     ?DEALLOC_XSTACK8
   \   000013   7402         MOV       A,#0x2
   \   000015                REQUIRE ??Subroutine97_0
   \   000015                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine98_0
   \   000003                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    270          
    271          /*********************************************************************
    272           * @fn      zclGeneral_SendIdentifyEZModeInvoke
    273           *
    274           * @brief   Call to send out an Identify EZ-Mode Invoke Command
    275           *
    276           * @param   srcEP - Sending application's endpoint
    277           * @param   dstAddr - where you want the message to go
    278           * @param   action - describes the EZ-Mode action to be performed
    279           * @param   seqNum - identification number for the transaction
    280           *
    281           * @return  ZStatus_t
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          ZStatus_t zclGeneral_SendIdentifyEZModeInvoke( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyEZModeInvoke:
    284                                                         uint8 action, uint8 disableDefaultRsp, uint8 seqNum )
    285          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
    286            uint8 buf[1];
    287          
    288            buf[0] = action;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   12....       LCALL     ??Subroutine85_0 & 0xFFFF
    289          
    290            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    291                                    COMMAND_IDENTIFY_EZMODE_INVOKE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    292                                    disableDefaultRsp, 0, seqNum, 1, buf );
   \                     ??CrossCallReturnLabel_152:
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000019   75..01       MOV       ?V2,#0x1
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   78..         MOV       R0,#?V2
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   7411         MOV       A,#0x11
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002F   E4           CLR       A
   \   000030   F5..         MOV       ?V2,A
   \   000032   78..         MOV       R0,#?V2
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   ED           MOV       A,R5
   \   000038   F5..         MOV       ?V1,A
   \   00003A   78..         MOV       R0,#?V1
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003F   75..00       MOV       ?V1,#0x0
   \   000042   78..         MOV       R0,#?V1
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000047   75..01       MOV       ?V1,#0x1
   \   00004A   78..         MOV       R0,#?V1
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004F   75..02       MOV       ?V1,#0x2
   \   000052   78..         MOV       R0,#?V1
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   7401         MOV       A,#0x1
   \   00005F   02....       LJMP      ??Subroutine86_0 & 0xFFFF
    293          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V2,R0
   \   000007   89..         MOV       ?V3,R1
   \   000009   78..         MOV       R0,#?V2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine87_0
   \   000003                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V1,A
   \   000003   78..         MOV       R0,#?V1
   \   000005   22           RET
    294          
    295          /*********************************************************************
    296           * @fn      zclGeneral_SendIdentifyUpdateCommState
    297           *
    298           * @brief   Call to send out an Identify Update Commission State Command
    299           *
    300           * @param   srcEP - Sending application's endpoint
    301           * @param   dstAddr - where you want the message to go
    302           * @param   action - describes the EZ-Mode action to be performed
    303           * @param   commissionStateMask - updates the device's commission state
    304           * @param   seqNum - identification number for the transaction
    305           *
    306           * @return  ZStatus_t
    307           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          ZStatus_t zclGeneral_SendIdentifyUpdateCommState( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyUpdateCommState:
    309                                                            uint8 action, uint8 commissionStateMask,
    310                                                            uint8 disableDefaultRsp, uint8 seqNum )
    311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
    312            uint8 buf[2];
    313          
    314            buf[0] = action;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    315            buf[1] = commissionStateMask;
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   12....       LCALL     ??Subroutine85_0 & 0xFFFF
    316          
    317            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    318                                    COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    319                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_153:
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   75..02       MOV       ?V2,#0x2
   \   000023   75..00       MOV       ?V3,#0x0
   \   000026   78..         MOV       R0,#?V2
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7413         MOV       A,#0x13
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000036   E4           CLR       A
   \   000037   F5..         MOV       ?V2,A
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7415         MOV       A,#0x15
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000049   75..00       MOV       ?V1,#0x0
   \   00004C   78..         MOV       R0,#?V1
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000051   75..01       MOV       ?V1,#0x1
   \   000054   78..         MOV       R0,#?V1
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..03       MOV       ?V1,#0x3
   \   00005C   78..         MOV       R0,#?V1
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   7C03         MOV       R4,#0x3
   \   000063   7D00         MOV       R5,#0x0
   \   000065   EE           MOV       A,R6
   \   000066   F9           MOV       R1,A
   \   000067                REQUIRE ?Subroutine8
   \   000067                ; // Fall through to label ?Subroutine8
    320          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000003   12....       LCALL     ?DEALLOC_XSTACK8
   \   000006   7402         MOV       A,#0x2
   \   000008   02....       LJMP      ??Subroutine86_0 & 0xFFFF
    321          
    322          #ifdef ZCL_LIGHT_LINK_ENHANCE
    323          /*********************************************************************
    324           * @fn      zclGeneral_SendIdentifyTriggerEffect
    325           *
    326           * @brief   Call to send out a Trigger Effect Command
    327           *
    328           * @param   srcEP - Sending application's endpoint
    329           * @param   dstAddr - where you want the message to go
    330           * @param   effectId - identify effect to use
    331           * @param   effectVariant - which variant of effect to be triggered
    332           * @param   disableDefaultRsp - whether to disable the Default Response command
    333           * @param   seqNum - identification number for the transaction
    334           *
    335           * @return  ZStatus_t
    336           */
    337          ZStatus_t zclGeneral_SendIdentifyTriggerEffect( uint8 srcEP, afAddrType_t *dstAddr,
    338                                                          uint8 effectId, uint8 effectVariant,
    339                                                          uint8 disableDefaultRsp, uint8 seqNum )
    340          {
    341            uint8 buf[2];
    342          
    343            buf[0] = effectId;
    344            buf[1] = effectVariant;
    345          
    346            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    347                                    COMMAND_IDENTIFY_TRIGGER_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    348                                    disableDefaultRsp, 0, seqNum, 2, buf );
    349          }
    350          #endif // ZCL_LIGHT_LINK_ENHANCE
    351          
    352          /*********************************************************************
    353           * @fn      zclGeneral_SendIdentifyQueryResponse
    354           *
    355           * @brief   Call to send out an Identify Query Response Command
    356           *
    357           * @param   srcEP - Sending application's endpoint
    358           * @param   dstAddr - where you want the message to go
    359           * @param   timeout - how long the device will continue to identify itself (in seconds)
    360           * @param   seqNum - identification number for the transaction
    361           *
    362           * @return  ZStatus_t
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          ZStatus_t zclGeneral_SendIdentifyQueryResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyQueryResponse:
    365                                                          uint16 timeout, uint8 disableDefaultRsp, uint8 seqNum )
    366          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    367            uint8 buf[2];
    368          
    369            buf[0] = LO_UINT16( timeout );
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    370            buf[1] = HI_UINT16( timeout );
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine49 & 0xFFFF
    371          
    372            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    373                                    COMMAND_IDENTIFY_QUERY_RSP, TRUE,
    374                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_148:
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV       ?V0,#0x2
   \   000022   75..00       MOV       ?V1,#0x0
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   7411         MOV       A,#0x11
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000035   E4           CLR       A
   \   000036   F5..         MOV       ?V0,A
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7413         MOV       A,#0x13
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000048   75..01       MOV       ?V0,#0x1
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000050   02....       LJMP      ?Subroutine1 & 0xFFFF
    375          }
    376          #endif // ZCL_IDENTIFY
    377          
    378          #ifdef ZCL_GROUPS
    379          /*********************************************************************
    380           * @fn      zclGeneral_SendGroupRequest
    381           *
    382           * @brief   Send a Group Request to a device.  You can also use the
    383           *          appropriate macro.
    384           *
    385           * @param   srcEP - Sending Apps endpoint
    386           * @param   dstAddr - where to send the request
    387           * @param   cmd - one of the following:
    388           *              COMMAND_GROUP_VIEW
    389           *              COMMAND_GROUP_REMOVE
    390           * @param   groupID -
    391           *
    392           * @return  ZStatus_t
    393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          ZStatus_t zclGeneral_SendGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupRequest:
    395                                                 uint8 cmd, uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
    396          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   740E         MOV       A,#0xe
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine29 & 0xFFFF
    397            uint8 buf[2];
    398          
    399            buf[0] = LO_UINT16( groupID );
    400            buf[1] = HI_UINT16( groupID );
   \                     ??CrossCallReturnLabel_40:
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine48 & 0xFFFF
    401          
    402            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    403                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    404                                      disableDefaultRsp, 0, seqNum, 2, buf ) );
   \                     ??CrossCallReturnLabel_150:
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..02       MOV       ?V2,#0x2
   \   000020   75..00       MOV       ?V3,#0x0
   \   000023   78..         MOV       R0,#?V2
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   7414         MOV       A,#0x14
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000033   E4           CLR       A
   \   000034   F5..         MOV       ?V2,A
   \   000036   78..         MOV       R0,#?V2
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   ED           MOV       A,R5
   \   00003C   F5..         MOV       ?V1,A
   \   00003E   78..         MOV       R0,#?V1
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000043   75..00       MOV       ?V1,#0x0
   \   000046   78..         MOV       R0,#?V1
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004B   75..01       MOV       ?V1,#0x1
   \   00004E   78..         MOV       R0,#?V1
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000053   EC           MOV       A,R4
   \   000054   F5..         MOV       ?V1,A
   \   000056   78..         MOV       R0,#?V1
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005B   7C04         MOV       R4,#0x4
   \   00005D   7D00         MOV       R5,#0x0
   \   00005F   A9..         MOV       R1,?V0
   \   000061   02....       LJMP      ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E9           MOV       A,R1
   \   000001                REQUIRE ??Subroutine85_0
   \   000001                ; // Fall through to label ??Subroutine85_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   7401         MOV       A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   22           RET
    405          }
    406          
    407          /*********************************************************************
    408           * @fn      zclGeneral_SendAddGroupRequest
    409           *
    410           * @brief   Send the Add Group Request to a device
    411           *
    412           * @param   srcEP - Sending Apps endpoint
    413           * @param   dstAddr - where to send the request
    414           * @param   cmd - one of the following:
    415           *                COMMAND_GROUP_ADD
    416           *                COMMAND_GROUP_ADD_IF_IDENTIFYING
    417           * @param   groupID - pointer to the group structure
    418           * @param   groupName - pointer to Group Name.  This is a Zigbee
    419           *          string data type, so the first byte is the length of the
    420           *          name (in bytes), then the name.
    421           *
    422           * @return  ZStatus_t
    423           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          ZStatus_t zclGeneral_SendAddGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendAddGroupRequest:
    425                                                    uint8 cmd, uint16 groupID, uint8 *groupName,
    426                                                    uint8 disableDefaultRsp, uint8 seqNum )
    427          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V7,R1
   \   00000C   8A..         MOV       ?V10,R2
   \   00000E   8B..         MOV       ?V11,R3
   \   000010   8C..         MOV       ?V9,R4
   \   000012   8D..         MOV       ?V8,R5
   \   000014   7417         MOV       A,#0x17
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine31 & 0xFFFF
    428            uint8 *buf;
    429            uint8 *pBuf;
    430            uint8 len;
    431            ZStatus_t status;
    432          
    433            len = 2;    // Group ID
    434            len += groupName[0] + 1;  // String + 1 for length
   \                     ??CrossCallReturnLabel_42:
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   2403         ADD       A,#0x3
   \   00001F   85..82       MOV       DPL,?XSP + 0
   \   000022   85..83       MOV       DPH,?XSP + 1
   \   000025   F0           MOVX      @DPTR,A
    435          
    436            buf = zcl_mem_alloc( len );
   \   000026   FE           MOV       R6,A
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   FA           MOV       R2,A
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     ??Subroutine94_0 & 0xFFFF
    437            if ( buf )
   \                     ??CrossCallReturnLabel_203:
   \   00002D   7003         JNZ       $+5
   \   00002F   02....       LJMP      ??zclGeneral_SendAddGroupRequest_0 & 0xFFFF
   \   000032   7415         MOV       A,#0x15
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ?Subroutine41 & 0xFFFF
    438            {
    439              pBuf = buf;
    440              *pBuf++ = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_75:
   \   00003A   F0           MOVX      @DPTR,A
    441              *pBuf++ = HI_UINT16( groupID );
   \   00003B   E9           MOV       A,R1
   \   00003C   A3           INC       DPTR
   \   00003D   F0           MOVX      @DPTR,A
    442              *pBuf++ = groupName[0]; // string length
   \   00003E   85..82       MOV       DPL,?V2
   \   000041   85..83       MOV       DPH,?V3
   \   000044   12....       LCALL     ??Subroutine91_0 & 0xFFFF
    443              zcl_memcpy( pBuf, &(groupName[1]), groupName[0] );
   \                     ??CrossCallReturnLabel_179:
   \   000047                ; Setup parameters for call to function osal_memcpy
   \   000047   85..82       MOV       DPL,?V2
   \   00004A   85..83       MOV       DPH,?V3
   \   00004D   A3           INC       DPTR
   \   00004E   A982         MOV       R1,DPL
   \   000050   AA83         MOV       R2,DPH
   \   000052   89..         MOV       ?V4,R1
   \   000054   8A..         MOV       ?V5,R2
   \   000056   75..00       MOV       ?V6,#0x0
   \   000059   78..         MOV       R0,#?V4
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005E   85..82       MOV       DPL,?V2
   \   000061   85..83       MOV       DPH,?V3
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FC           MOV       R4,A
   \   000066   7D00         MOV       R5,#0x0
   \   000068   E5..         MOV       A,?V0
   \   00006A   2403         ADD       A,#0x3
   \   00006C   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
    444          
    445              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    446                                        cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    447                                        disableDefaultRsp, 0, seqNum, len, buf );
   \   000072                ; Setup parameters for call to function zcl_SendCommand
   \   000072   78..         MOV       R0,#?V0
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000077   8E..         MOV       ?V2,R6
   \   000079   75..00       MOV       ?V3,#0x0
   \   00007C   78..         MOV       R0,#?V2
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   741D         MOV       A,#0x1d
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008C   E4           CLR       A
   \   00008D   F5..         MOV       ?V2,A
   \   00008F   78..         MOV       R0,#?V2
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000094   E5..         MOV       A,?V8
   \   000096   F5..         MOV       ?V2,A
   \   000098   78..         MOV       R0,#?V2
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009D   75..00       MOV       ?V2,#0x0
   \   0000A0   78..         MOV       R0,#?V2
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A5   75..01       MOV       ?V2,#0x1
   \   0000A8   78..         MOV       R0,#?V2
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AD   E5..         MOV       A,?V9
   \   0000AF   F5..         MOV       ?V2,A
   \   0000B1   78..         MOV       R0,#?V2
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B6   7C04         MOV       R4,#0x4
   \   0000B8   7D00         MOV       R5,#0x0
   \   0000BA   AA..         MOV       R2,?V10
   \   0000BC   AB..         MOV       R3,?V11
   \   0000BE   A9..         MOV       R1,?V7
   \   0000C0   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0000C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C6   E9           MOV       A,R1
   \   0000C7   FE           MOV       R6,A
    448              zcl_mem_free( buf );
   \   0000C8                ; Setup parameters for call to function osal_mem_free
   \   0000C8   AA..         MOV       R2,?V0
   \   0000CA   AB..         MOV       R3,?V1
   \   0000CC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000CF   8002         SJMP      ??zclGeneral_SendAddGroupRequest_1
    449            }
    450            else
    451              status = ZMemError;
   \                     ??zclGeneral_SendAddGroupRequest_0:
   \   0000D1   7E10         MOV       R6,#0x10
    452          
    453            return ( status );
   \                     ??zclGeneral_SendAddGroupRequest_1:
   \   0000D3   EE           MOV       A,R6
   \   0000D4   F9           MOV       R1,A
   \   0000D5   7401         MOV       A,#0x1
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DA                REQUIRE ?Subroutine2
   \   0000DA                ; // Fall through to label ?Subroutine2
    454          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V1
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000008   7403         MOV       A,#0x3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   78..         MOV       R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   85..82       MOV       DPL,?V2
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET
    455          
    456          /*********************************************************************
    457           * @fn      zclGeneral_SendGroupGetMembershipRequest
    458           *
    459           * @brief   Send a Get Group Membership (Resposne) Command to a device
    460           *
    461           * @param   srcEP - Sending Apps endpoint
    462           * @param   dstAddr - where to send the request
    463           * @param   cmd - one of the following:
    464           *                COMMAND_GROUP_GET_MEMBERSHIP
    465           *                COMMAND_GROUP_GET_MEMBERSHIP_RSP
    466           * @param   groupID - pointer to the group structure
    467           * @param   groupName - pointer to Group Name.  This is a Zigbee
    468           *          string data type, so the first byte is the length of the
    469           *          name (in bytes), then the name.
    470           *
    471           * @return  ZStatus_t
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          ZStatus_t zclGeneral_SendGroupGetMembershipRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupGetMembershipRequest:
    474                                                              uint8 cmd, uint8 rspCmd, uint8 direction, uint8 capacity,
    475                                                              uint8 grpCnt, uint16 *grpList, uint8 disableDefaultRsp, uint8 seqNum )
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    477            uint8 *buf;
    478            uint8 *pBuf;
    479            uint8 len = 0;
   \   00000F   7800         MOV       R0,#0x0
    480            uint8 i;
    481            ZStatus_t status;
    482          
    483            if ( rspCmd )
   \   000011   6002         JZ        ??zclGeneral_SendGroupGetMembershipRequest_0
    484              len++;  // Capacity
   \   000013   7801         MOV       R0,#0x1
   \                     ??zclGeneral_SendGroupGetMembershipRequest_0:
   \   000015   7416         MOV       A,#0x16
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V3,A
    485          
    486            len++;  // Group Count
    487            len += sizeof ( uint16 ) * grpCnt;  // Group List
   \   00001D   C3           CLR       C
   \   00001E   33           RLC       A
   \   00001F   04           INC       A
   \   000020   28           ADD       A,R0
    488          
    489            buf = zcl_mem_alloc( len );
   \   000021   12....       LCALL     ?Subroutine58 & 0xFFFF
    490            if ( buf )
   \                     ??CrossCallReturnLabel_201:
   \   000024   7003         JNZ       $+5
   \   000026   02....       LJMP      ??zclGeneral_SendGroupGetMembershipRequest_1 & 0xFFFF
    491            {
    492              pBuf = buf;
   \   000029   A8..         MOV       R0,?V0
   \   00002B   A9..         MOV       R1,?V1
    493              if ( rspCmd )
   \   00002D   EF           MOV       A,R7
   \   00002E   600E         JZ        ??zclGeneral_SendGroupGetMembershipRequest_2
    494                *pBuf++ = capacity;
   \   000030   7415         MOV       A,#0x15
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   A882         MOV       R0,DPL
   \   00003C   A983         MOV       R1,DPH
    495          
    496              *pBuf++ = grpCnt;
   \                     ??zclGeneral_SendGroupGetMembershipRequest_2:
   \   00003E   8882         MOV       DPL,R0
   \   000040   8983         MOV       DPH,R1
   \   000042   E5..         MOV       A,?V3
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   A882         MOV       R0,DPL
   \   000048   A983         MOV       R1,DPH
    497              for ( i = 0; i < grpCnt; i++ )
   \   00004A   7C00         MOV       R4,#0x0
   \   00004C   7417         MOV       A,#0x17
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000054   802F         SJMP      ??zclGeneral_SendGroupGetMembershipRequest_3
    498              {
    499                *pBuf++ = LO_UINT16( grpList[i] );
   \                     ??zclGeneral_SendGroupGetMembershipRequest_4:
   \   000056   EC           MOV       A,R4
   \   000057   25E0         ADD       A,0xE0 /* A   */
   \   000059   F5..         MOV       ?V8,A
   \   00005B   E4           CLR       A
   \   00005C   33           RLC       A
   \   00005D   F5..         MOV       ?V9,A
   \   00005F   EA           MOV       A,R2
   \   000060   25..         ADD       A,?V8
   \   000062   F5..         MOV       ?V8,A
   \   000064   EB           MOV       A,R3
   \   000065   35..         ADDC      A,?V9
   \   000067   F5..         MOV       ?V9,A
   \   000069   85..82       MOV       DPL,?V8
   \   00006C   12....       LCALL     ?Subroutine46 & 0xFFFF
    500                *pBuf++ = HI_UINT16( grpList[i] );
   \                     ??CrossCallReturnLabel_155:
   \   00006F   85..82       MOV       DPL,?V8
   \   000072   85..83       MOV       DPH,?V9
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   8882         MOV       DPL,R0
   \   000079   8983         MOV       DPH,R1
   \   00007B   A3           INC       DPTR
   \   00007C   F0           MOVX      @DPTR,A
   \   00007D   E8           MOV       A,R0
   \   00007E   2402         ADD       A,#0x2
   \   000080   F8           MOV       R0,A
   \   000081   5001         JNC       ??zclGeneral_SendGroupGetMembershipRequest_5
   \   000083   09           INC       R1
    501              }
   \                     ??zclGeneral_SendGroupGetMembershipRequest_5:
   \   000084   0C           INC       R4
   \                     ??zclGeneral_SendGroupGetMembershipRequest_3:
   \   000085   EC           MOV       A,R4
   \   000086   C3           CLR       C
   \   000087   95..         SUBB      A,?V3
   \   000089   40CB         JC        ??zclGeneral_SendGroupGetMembershipRequest_4
    502          
    503              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    504                                        cmd, TRUE, direction,
    505                                        disableDefaultRsp, 0, seqNum, len, buf );
   \   00008B                ; Setup parameters for call to function zcl_SendCommand
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   78..         MOV       R0,#?V4
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   741E         MOV       A,#0x1e
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   E4           CLR       A
   \   0000A1   F5..         MOV       ?V4,A
   \   0000A3   78..         MOV       R0,#?V4
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   7420         MOV       A,#0x20
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B3   741C         MOV       A,#0x1c
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BE   75..01       MOV       ?V3,#0x1
   \   0000C1   78..         MOV       R0,#?V3
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C6   EE           MOV       A,R6
   \   0000C7   F5..         MOV       ?V3,A
   \   0000C9   78..         MOV       R0,#?V3
   \   0000CB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CE   7C04         MOV       R4,#0x4
   \   0000D0   7D00         MOV       R5,#0x0
   \   0000D2   AA..         MOV       R2,?V6
   \   0000D4   AB..         MOV       R3,?V7
   \   0000D6   A9..         MOV       R1,?V2
   \   0000D8   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DE   E9           MOV       A,R1
   \   0000DF   F5..         MOV       ?V3,A
    506              zcl_mem_free( buf );
   \   0000E1                ; Setup parameters for call to function osal_mem_free
   \   0000E1   AA..         MOV       R2,?V0
   \   0000E3   AB..         MOV       R3,?V1
   \   0000E5   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E8   8003         SJMP      ??zclGeneral_SendGroupGetMembershipRequest_6
    507            }
    508            else
    509              status = ZMemError;
   \                     ??zclGeneral_SendGroupGetMembershipRequest_1:
   \   0000EA   75..10       MOV       ?V3,#0x10
    510          
    511            return ( status );
   \                     ??zclGeneral_SendGroupGetMembershipRequest_6:
   \   0000ED   A9..         MOV       R1,?V3
   \   0000EF   02....       LJMP      ?Subroutine2 & 0xFFFF
    512          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine88_0
   \   000002                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   F5..         MOV       ?V4,A
   \   000002   75..00       MOV       ?V5,#0x0
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   FA           MOV       R2,A
   \   000006   AB..         MOV       R3,?V5
   \   000008                REQUIRE ??Subroutine94_0
   \   000008                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V3,A
   \   000003   78..         MOV       R0,#?V3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   FB           MOV       R3,A
   \   000004   22           RET
    513          
    514          /*********************************************************************
    515           * @fn      zclGeneral_SendGroupResponse
    516           *
    517           * @brief   Send Group Response (not Group View Response)
    518           *
    519           * @param   srcEP - Sending application's endpoint
    520           * @param   dstAddr - where you want the message to go
    521           * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
    522           * @param   status - group command status
    523           * @param   groupID - what group
    524           *
    525           * @return  ZStatus_t
    526           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ??Subroutine92_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000003   12....       LCALL     ?DEALLOC_XSTACK8
   \   000006   7403         MOV       A,#0x3
   \   000008                REQUIRE ??Subroutine86_0
   \   000008                ; // Fall through to label ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    527          ZStatus_t zclGeneral_SendGroupResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupResponse:
    528                                                  uint8 cmd, uint8 status, uint16 groupID,
    529                                                  uint8 disableDefaultRsp, uint8 seqNum )
    530          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    531            uint8 buf[3];
    532          
    533            buf[0] = status;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   740F         MOV       A,#0xf
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine43 & 0xFFFF
    534            buf[1] = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_77:
   \   00001C   7401         MOV       A,#0x1
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E8           MOV       A,R0
   \   000022   F0           MOVX      @DPTR,A
    535            buf[2] = HI_UINT16( groupID );
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   12....       LCALL     ?Subroutine48 & 0xFFFF
    536          
    537            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    538                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    539                                    disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_151:
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   75..03       MOV       ?V2,#0x3
   \   000031   75..00       MOV       ?V3,#0x0
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   7416         MOV       A,#0x16
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000044   E4           CLR       A
   \   000045   F5..         MOV       ?V2,A
   \   000047   78..         MOV       R0,#?V2
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   7418         MOV       A,#0x18
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   75..01       MOV       ?V1,#0x1
   \   00005A   78..         MOV       R0,#?V1
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   78..         MOV       R0,#?V1
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   EC           MOV       A,R4
   \   000065   F5..         MOV       ?V1,A
   \   000067   78..         MOV       R0,#?V1
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006C   7C04         MOV       R4,#0x4
   \   00006E   02....       LJMP      ?Subroutine0 & 0xFFFF
    540          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    541          
    542          /*********************************************************************
    543           * @fn      zclGeneral_SendGroupViewResponse
    544           *
    545           * @brief   Call to send Group Response Command
    546           *
    547           * @param   srcEP - Sending application's endpoint
    548           * @param   dstAddr - where you want the message to go
    549           * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
    550           * @param   status - group command status
    551           * @param   grp - group info
    552           *
    553           * @return  ZStatus_t
    554           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    555          ZStatus_t zclGeneral_SendGroupViewResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupViewResponse:
    556                                                      uint8 status, aps_Group_t *grp, uint8 disableDefaultRsp, uint8 seqNum )
    557          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V8,R1
   \   000007   8A..         MOV       ?V12,R2
   \   000009   8B..         MOV       ?V13,R3
   \   00000B   8C..         MOV       ?V7,R4
   \   00000D   8D..         MOV       ?V9,R5
    558            uint8 *buf;
    559            uint8 len;
    560            ZStatus_t stat;
    561          
    562            len = 1 + 2 + 1; // Status + Group ID + name length
   \   00000F   7804         MOV       R0,#0x4
   \   000011   7416         MOV       A,#0x16
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V4,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V5,A
    563          
    564            if ( status == ZCL_STATUS_SUCCESS )
   \   00001D   E5..         MOV       A,?V4
   \   00001F   2402         ADD       A,#0x2
   \   000021   F5..         MOV       ?V2,A
   \   000023   E4           CLR       A
   \   000024   35..         ADDC      A,?V5
   \   000026   F5..         MOV       ?V3,A
   \   000028   EC           MOV       A,R4
   \   000029   7009         JNZ       ??zclGeneral_SendGroupViewResponse_0
    565            {
    566              len += grp->name[0];  // String length
   \   00002B   85..82       MOV       DPL,?V2
   \   00002E   85..83       MOV       DPH,?V3
   \   000031   E0           MOVX      A,@DPTR
   \   000032   28           ADD       A,R0
   \   000033   F8           MOV       R0,A
    567            }
    568          
    569            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendGroupViewResponse_0:
   \   000034   E8           MOV       A,R0
   \   000035   FE           MOV       R6,A
   \   000036                ; Setup parameters for call to function osal_mem_alloc
   \   000036   FA           MOV       R2,A
   \   000037   7B00         MOV       R3,#0x0
   \   000039   12....       LCALL     ??Subroutine94_0 & 0xFFFF
    570            if ( buf )
   \                     ??CrossCallReturnLabel_204:
   \   00003C   7003         JNZ       $+5
   \   00003E   02....       LJMP      ??zclGeneral_SendGroupViewResponse_1 & 0xFFFF
    571            {
    572              buf[0] = status;
   \   000041   8A82         MOV       DPL,R2
   \   000043   8B83         MOV       DPH,R3
   \   000045   E5..         MOV       A,?V7
   \   000047   F0           MOVX      @DPTR,A
    573              buf[1] = LO_UINT16( grp->ID );
   \   000048   85..82       MOV       DPL,?V4
   \   00004B   85..83       MOV       DPH,?V5
   \   00004E   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000051   F0           MOVX      @DPTR,A
    574              buf[2] = HI_UINT16( grp->ID );
   \   000052   85..82       MOV       DPL,?V4
   \   000055   85..83       MOV       DPH,?V5
   \   000058   12....       LCALL     ?Subroutine26 & 0xFFFF
    575          
    576              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_180:
   \   00005B   EA           MOV       A,R2
   \   00005C   2403         ADD       A,#0x3
   \   00005E   F8           MOV       R0,A
   \   00005F   E4           CLR       A
   \   000060   35..         ADDC      A,?V1
   \   000062   F9           MOV       R1,A
   \   000063   E5..         MOV       A,?V7
   \   000065   7038         JNZ       ??zclGeneral_SendGroupViewResponse_2
    577              {
    578                buf[3] = grp->name[0]; // string length
   \   000067   85..82       MOV       DPL,?V2
   \   00006A   85..83       MOV       DPH,?V3
   \   00006D   12....       LCALL     ??Subroutine88_0 & 0xFFFF
    579                zcl_memcpy( &buf[4], (&grp->name[1]), grp->name[0] );
   \                     ??CrossCallReturnLabel_154:
   \   000070                ; Setup parameters for call to function osal_memcpy
   \   000070   85..82       MOV       DPL,?V4
   \   000073   85..83       MOV       DPH,?V5
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A982         MOV       R1,DPL
   \   00007B   AA83         MOV       R2,DPH
   \   00007D   89..         MOV       ?V4,R1
   \   00007F   8A..         MOV       ?V5,R2
   \   000081   75..00       MOV       ?V6,#0x0
   \   000084   78..         MOV       R0,#?V4
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000089   85..82       MOV       DPL,?V2
   \   00008C   85..83       MOV       DPH,?V3
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   FC           MOV       R4,A
   \   000091   7D00         MOV       R5,#0x0
   \   000093   E5..         MOV       A,?V0
   \   000095   2404         ADD       A,#0x4
   \   000097   12....       LCALL     ?Subroutine63 & 0xFFFF
    580              }
   \                     ??CrossCallReturnLabel_112:
   \   00009A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009D   8006         SJMP      ??zclGeneral_SendGroupViewResponse_3
    581              else //ZCL_STATUS_NOT_FOUND
    582              {
    583                buf[3] = 0;
   \                     ??zclGeneral_SendGroupViewResponse_2:
   \   00009F   8882         MOV       DPL,R0
   \   0000A1   8983         MOV       DPH,R1
   \   0000A3   E4           CLR       A
   \   0000A4   F0           MOVX      @DPTR,A
    584              }
    585          
    586              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    587                                      COMMAND_GROUP_VIEW_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    588                                      disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendGroupViewResponse_3:
   \   0000A5                ; Setup parameters for call to function zcl_SendCommand
   \   0000A5   78..         MOV       R0,#?V0
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   8E..         MOV       ?V2,R6
   \   0000AC   75..00       MOV       ?V3,#0x0
   \   0000AF   78..         MOV       R0,#?V2
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B4   741C         MOV       A,#0x1c
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BF   E4           CLR       A
   \   0000C0   F5..         MOV       ?V2,A
   \   0000C2   78..         MOV       R0,#?V2
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C7   E5..         MOV       A,?V9
   \   0000C9   F5..         MOV       ?V2,A
   \   0000CB   78..         MOV       R0,#?V2
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D0   75..01       MOV       ?V2,#0x1
   \   0000D3   78..         MOV       R0,#?V2
   \   0000D5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D8   78..         MOV       R0,#?V2
   \   0000DA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DD   78..         MOV       R0,#?V2
   \   0000DF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E2   7C04         MOV       R4,#0x4
   \   0000E4   7D00         MOV       R5,#0x0
   \   0000E6   AA..         MOV       R2,?V12
   \   0000E8   AB..         MOV       R3,?V13
   \   0000EA   A9..         MOV       R1,?V8
   \   0000EC   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   0000EF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F2   E9           MOV       A,R1
   \   0000F3   FE           MOV       R6,A
    589              zcl_mem_free( buf );
   \   0000F4                ; Setup parameters for call to function osal_mem_free
   \   0000F4   AA..         MOV       R2,?V0
   \   0000F6   AB..         MOV       R3,?V1
   \   0000F8   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000FB   8002         SJMP      ??zclGeneral_SendGroupViewResponse_4
    590            }
    591            else
    592            {
    593              stat = ZMemError;
   \                     ??zclGeneral_SendGroupViewResponse_1:
   \   0000FD   7E10         MOV       R6,#0x10
    594            }
    595          
    596            return ( stat );
   \                     ??zclGeneral_SendGroupViewResponse_4:
   \   0000FF   EE           MOV       A,R6
   \   000100   F9           MOV       R1,A
   \   000101   02....       LJMP      ??Subroutine105_0 & 0xFFFF
    597          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine91_0
   \   000001                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   7F0E         MOV       R7,#0xe
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    598          #endif // ZCL_GROUPS
    599          
    600          #ifdef ZCL_SCENES
    601          /*********************************************************************
    602           * @fn      zclGeneral_SendAddSceneRequest
    603           *
    604           * @brief   Send the (Enhanced) Add Scene Request to a device. You can
    605           *           also use the appropriate macro.
    606           *
    607           * @param   srcEP - Sending Apps endpoint
    608           * @param   dstAddr - where to send the request
    609           * @param   scene - pointer to the scene structure
    610           * @param  cmd - COMMAND_SCENE_ADD or COMMAND_SCENE_ENHANCED_ADD
    611           * @param   disableDefaultRsp - whether to disable the Default Response command
    612           * @param   seqNum - sequence number
    613           *
    614           * @return  ZStatus_t
    615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    616          ZStatus_t zclGeneral_SendAddSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendAddSceneRequest:
    617                                                    uint8 cmd, zclGeneral_Scene_t *scene,
    618                                                    uint8 disableDefaultRsp, uint8 seqNum )
    619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000012   89..         MOV       ?V7,R1
   \   000014   8C..         MOV       ?V15,R4
   \   000016   8D..         MOV       ?V14,R5
   \   000018   741B         MOV       A,#0x1b
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine27 & 0xFFFF
    620            uint8 *buf;
    621            uint8 *pBuf;
    622            uint8 len;
    623            ZStatus_t status;
    624          
    625            len = 2 + 1 + 2;    // Group ID + Scene ID + transition time
    626            len += scene->name[0] + 1; // String + 1 for length
    627          
    628            // Add something for the extension field length
    629            len += scene->extLen;
   \                     ??CrossCallReturnLabel_36:
   \   000020   F5..         MOV       ?V8,A
   \   000022   E4           CLR       A
   \   000023   3F           ADDC      A,R7
   \   000024   F5..         MOV       ?V9,A
   \   000026   85..82       MOV       DPL,?V12
   \   000029   85..83       MOV       DPH,?V13
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F8           MOV       R0,A
   \   00002E   85..82       MOV       DPL,?V8
   \   000031   85..83       MOV       DPH,?V9
   \   000034   E0           MOVX      A,@DPTR
   \   000035   28           ADD       A,R0
   \   000036   2406         ADD       A,#0x6
   \   000038   85..82       MOV       DPL,?XSP + 0
   \   00003B   85..83       MOV       DPH,?XSP + 1
   \   00003E   F0           MOVX      @DPTR,A
    630          
    631            buf = zcl_mem_alloc( len );
   \   00003F   F5..         MOV       ?V2,A
   \   000041   75..00       MOV       ?V3,#0x0
   \   000044                ; Setup parameters for call to function osal_mem_alloc
   \   000044   FA           MOV       R2,A
   \   000045   AB..         MOV       R3,?V3
   \   000047   12....       LCALL     ??Subroutine94_0 & 0xFFFF
    632            if ( buf )
   \                     ??CrossCallReturnLabel_205:
   \   00004A   7003         JNZ       $+5
   \   00004C   02....       LJMP      ??zclGeneral_SendAddSceneRequest_0 & 0xFFFF
    633            {
    634              pBuf = buf;
    635              *pBuf++ = LO_UINT16( scene->groupID );
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000056   12....       LCALL     ?Subroutine55 & 0xFFFF
    636              *pBuf++ = HI_UINT16( scene->groupID );
   \                     ??CrossCallReturnLabel_100:
   \   000059   12....       LCALL     ?Subroutine37 & 0xFFFF
    637              *pBuf++ = scene->ID;
   \                     ??CrossCallReturnLabel_71:
   \   00005C   A3           INC       DPTR
   \   00005D   12....       LCALL     ?Subroutine26 & 0xFFFF
    638              *pBuf++ = LO_UINT16( scene->transTime );
   \                     ??CrossCallReturnLabel_181:
   \   000060   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000063   12....       LCALL     ?Subroutine44 & 0xFFFF
    639              *pBuf++ = HI_UINT16( scene->transTime );
   \                     ??CrossCallReturnLabel_86:
   \   000066   8882         MOV       DPL,R0
   \   000068   8983         MOV       DPH,R1
   \   00006A   A3           INC       DPTR
   \   00006B   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00006E   F0           MOVX      @DPTR,A
    640              *pBuf++ = scene->name[0]; // string length
   \   00006F   85..82       MOV       DPL,?V8
   \   000072   85..83       MOV       DPH,?V9
   \   000075   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000078   A3           INC       DPTR
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   EA           MOV       A,R2
   \   00007B   2406         ADD       A,#0x6
   \   00007D   F5..         MOV       ?V10,A
   \   00007F   E4           CLR       A
   \   000080   35..         ADDC      A,?V1
   \   000082   F5..         MOV       ?V11,A
    641              zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
   \   000084                ; Setup parameters for call to function osal_memcpy
   \   000084   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008A   85..82       MOV       DPL,?V8
   \   00008D   85..83       MOV       DPH,?V9
   \   000090   E0           MOVX      A,@DPTR
   \   000091   FC           MOV       R4,A
   \   000092   7D00         MOV       R5,#0x0
   \   000094   AA..         MOV       R2,?V10
   \   000096   AB..         MOV       R3,?V11
   \   000098   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
    642              pBuf += scene->name[0]; // move pass name
    643          
    644              // Add the extension fields
    645              if ( scene->extLen > 0 )
   \   00009E   85..82       MOV       DPL,?V12
   \   0000A1   85..83       MOV       DPH,?V13
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   F9           MOV       R1,A
   \   0000A6   6028         JZ        ??zclGeneral_SendAddSceneRequest_1
    646                zcl_memcpy( pBuf, scene->extField, scene->extLen );
   \   0000A8                ; Setup parameters for call to function osal_memcpy
   \   0000A8   EE           MOV       A,R6
   \   0000A9   2418         ADD       A,#0x18
   \   0000AB   F5..         MOV       ?V4,A
   \   0000AD   E4           CLR       A
   \   0000AE   3F           ADDC      A,R7
   \   0000AF   F5..         MOV       ?V5,A
   \   0000B1   78..         MOV       R0,#?V4
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B6   E9           MOV       A,R1
   \   0000B7   FC           MOV       R4,A
   \   0000B8   7D00         MOV       R5,#0x0
   \   0000BA   85..82       MOV       DPL,?V8
   \   0000BD   85..83       MOV       DPH,?V9
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   F8           MOV       R0,A
   \   0000C2   E5..         MOV       A,?V10
   \   0000C4   28           ADD       A,R0
   \   0000C5   FA           MOV       R2,A
   \   0000C6   E4           CLR       A
   \   0000C7   35..         ADDC      A,?V11
   \   0000C9   FB           MOV       R3,A
   \   0000CA   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
    647          
    648              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    649                                        cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    650                                        disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendAddSceneRequest_1:
   \   0000D0                ; Setup parameters for call to function zcl_SendCommand
   \   0000D0   78..         MOV       R0,#?V0
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D5   78..         MOV       R0,#?V2
   \   0000D7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DA   7421         MOV       A,#0x21
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E5   E4           CLR       A
   \   0000E6   F5..         MOV       ?V2,A
   \   0000E8   78..         MOV       R0,#?V2
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000ED   E5..         MOV       A,?V14
   \   0000EF   F5..         MOV       ?V2,A
   \   0000F1   78..         MOV       R0,#?V2
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F6   75..00       MOV       ?V2,#0x0
   \   0000F9   78..         MOV       R0,#?V2
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FE   75..01       MOV       ?V2,#0x1
   \   000101   78..         MOV       R0,#?V2
   \   000103   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000106   E5..         MOV       A,?V15
   \   000108   F5..         MOV       ?V2,A
   \   00010A   78..         MOV       R0,#?V2
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010F   7C05         MOV       R4,#0x5
   \   000111   7D00         MOV       R5,#0x0
   \   000113   740C         MOV       A,#0xc
   \   000115   12....       LCALL     ?XSTACK_DISP0_8
   \   000118   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00011B   A9..         MOV       R1,?V7
   \   00011D   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000120   12....       LCALL     ?DEALLOC_XSTACK8
   \   000123   E9           MOV       A,R1
   \   000124   FE           MOV       R6,A
    651              zcl_mem_free( buf );
   \   000125                ; Setup parameters for call to function osal_mem_free
   \   000125   AA..         MOV       R2,?V0
   \   000127   AB..         MOV       R3,?V1
   \   000129   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00012C   8002         SJMP      ??zclGeneral_SendAddSceneRequest_2
    652            }
    653            else
    654              status = ZMemError;
   \                     ??zclGeneral_SendAddSceneRequest_0:
   \   00012E   7E10         MOV       R6,#0x10
    655          
    656            return ( status );
   \                     ??zclGeneral_SendAddSceneRequest_2:
   \   000130   EE           MOV       A,R6
   \   000131   F9           MOV       R1,A
   \   000132   7403         MOV       A,#0x3
   \   000134                REQUIRE ?Subroutine4
   \   000134                ; // Fall through to label ?Subroutine4
    657          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F10         MOV       R7,#0x10
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   EE           MOV       A,R6
   \   000001   2408         ADD       A,#0x8
   \   000003                REQUIRE ??Subroutine90_0
   \   000003                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   F5..         MOV       ?V4,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F5..         MOV       ?V5,A
   \   000006   75..00       MOV       ?V6,#0x0
   \   000009   78..         MOV       R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine95_0
   \   000001                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000003   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   EE           MOV       A,R6
   \   000004   2417         ADD       A,#0x17
   \   000006   F5..         MOV       ?V12,A
   \   000008   E4           CLR       A
   \   000009   3F           ADDC      A,R7
   \   00000A   F5..         MOV       ?V13,A
   \   00000C   EE           MOV       A,R6
   \   00000D   2407         ADD       A,#0x7
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   EE           MOV       A,R6
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F9           MOV       R1,A
   \   000007   8882         MOV       DPL,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
    658          
    659          /*********************************************************************
    660           * @fn      zclGeneral_SendSceneRequest
    661           *
    662           * @brief   Send a Scene Request to a device.  You can also use the
    663           *          appropriate macro.
    664           *
    665           * @param   srcEP - Sending Apps endpoint
    666           * @param   dstAddr - where to send the request
    667           * @param   cmd - one of the following:
    668           *              COMMAND_SCENE_VIEW
    669           *              COMMAND_SCENE_REMOVE
    670           *              COMMAND_SCENE_REMOVE_ALL
    671           *              COMMAND_SCENE_STORE
    672           *              COMMAND_SCENE_RECALL
    673           *              COMMAND_SCENE_GET_MEMBERSHIP
    674           *              COMMAND_SCENE_ENHANCED_VIEW
    675           * @param   groupID - group ID
    676           * @param   sceneID - scene ID (not applicable to COMMAND_SCENE_REMOVE_ALL and
    677           *                    COMMAND_SCENE_GET_MEMBERSHIP)
    678           * @param   disableDefaultRsp - whether to disable the Default Response command
    679           * @param   seqNum - sequence number
    680           * @return  ZStatus_t
    681           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    682          ZStatus_t zclGeneral_SendSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneRequest:
    683                                                 uint8 cmd, uint16 groupID, uint8 sceneID,
    684                                                 uint8 disableDefaultRsp, uint8 seqNum )
    685          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
   \   00000D   FF           MOV       R7,A
    686            uint8 buf[3];
    687            uint8 len = 2;
   \   00000E   7C02         MOV       R4,#0x2
   \   000010   740F         MOV       A,#0xf
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine29 & 0xFFFF
    688          
    689            buf[0] = LO_UINT16( groupID );
    690            buf[1] = HI_UINT16( groupID );
   \                     ??CrossCallReturnLabel_41:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E9           MOV       A,R1
   \   00001C   F0           MOVX      @DPTR,A
    691          
    692            if ( cmd != COMMAND_SCENE_REMOVE_ALL && cmd != COMMAND_SCENE_GET_MEMBERSHIP )
   \   00001D   7403         MOV       A,#0x3
   \   00001F   6F           XRL       A,R7
   \   000020   600D         JZ        ??zclGeneral_SendSceneRequest_0
   \   000022   7406         MOV       A,#0x6
   \   000024   6F           XRL       A,R7
   \   000025   6008         JZ        ??zclGeneral_SendSceneRequest_0
    693            {
    694              buf[2] = sceneID;
   \   000027   EC           MOV       A,R4
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   ED           MOV       A,R5
   \   00002C   F0           MOVX      @DPTR,A
    695              len++;
   \   00002D   7C03         MOV       R4,#0x3
    696            }
    697          
    698            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    699                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    700                                      disableDefaultRsp, 0, seqNum, len, buf ) );
   \                     ??zclGeneral_SendSceneRequest_0:
   \   00002F                ; Setup parameters for call to function zcl_SendCommand
   \   00002F   A8..         MOV       R0,?XSP + 0
   \   000031   A9..         MOV       R1,?XSP + 1
   \   000033   88..         MOV       ?V2,R0
   \   000035   89..         MOV       ?V3,R1
   \   000037   78..         MOV       R0,#?V2
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   EC           MOV       A,R4
   \   00003D   F5..         MOV       ?V2,A
   \   00003F   75..00       MOV       ?V3,#0x0
   \   000042   78..         MOV       R0,#?V2
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000047   7416         MOV       A,#0x16
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000052   E4           CLR       A
   \   000053   F5..         MOV       ?V2,A
   \   000055   78..         MOV       R0,#?V2
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   7418         MOV       A,#0x18
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000065   75..00       MOV       ?V1,#0x0
   \   000068   78..         MOV       R0,#?V1
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006D   75..01       MOV       ?V1,#0x1
   \   000070   78..         MOV       R0,#?V1
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000075   EF           MOV       A,R7
   \   000076   F5..         MOV       ?V1,A
   \   000078   78..         MOV       R0,#?V1
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007D   7C05         MOV       R4,#0x5
   \   00007F   02....       LJMP      ?Subroutine0 & 0xFFFF
    701          }
    702          
    703          /*********************************************************************
    704           * @fn      zclGeneral_SendSceneResponse
    705           *
    706           * @brief   Send Group Response (not Group View Response)
    707           *
    708           * @param   srcEP - Sending application's endpoint
    709           * @param   dstAddr - where you want the message to go
    710           * @param   cmd - either COMMAND_SCENE_ADD_RSP, COMMAND_SCENE_REMOVE_RSP
    711           *                COMMAND_SCENE_STORE_RSP, or COMMAND_SCENE_REMOVE_ALL_RSP
    712           * @param   status - scene command status
    713           * @param   groupID - what group
    714           * @param   sceneID - what scene (not applicable to COMMAND_SCENE_REMOVE_ALL_RSP)
    715           *
    716           * @return  ZStatus_t
    717           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    718          ZStatus_t zclGeneral_SendSceneResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneResponse:
    719                                                  uint8 cmd, uint8 status, uint16 groupID,
    720                                                  uint8 sceneID, uint8 disableDefaultRsp, uint8 seqNum )
    721          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
   \   00000D   FF           MOV       R7,A
    722            uint8 buf[4];
    723            uint8 len = 1 + 2; // Status + Group ID
   \   00000E   7C03         MOV       R4,#0x3
    724          
    725            buf[0] = status;
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   ED           MOV       A,R5
   \   000017   F0           MOVX      @DPTR,A
   \   000018   7410         MOV       A,#0x10
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine43 & 0xFFFF
    726            buf[1] = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_78:
   \   000020   7401         MOV       A,#0x1
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   E8           MOV       A,R0
   \   000026   F0           MOVX      @DPTR,A
    727            buf[2] = HI_UINT16( groupID );
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   E9           MOV       A,R1
   \   00002D   F0           MOVX      @DPTR,A
    728          
    729            if ( cmd != COMMAND_SCENE_REMOVE_ALL_RSP )
   \   00002E   EC           MOV       A,R4
   \   00002F   6F           XRL       A,R7
   \   000030   6011         JZ        ??zclGeneral_SendSceneResponse_0
    730            {
    731              buf[3] = sceneID;
   \   000032   7412         MOV       A,#0x12
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   E0           MOVX      A,@DPTR
   \   000038   C0E0         PUSH      A
   \   00003A   EC           MOV       A,R4
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   D0E0         POP       A
   \   000040   F0           MOVX      @DPTR,A
    732              len++;
   \   000041   7C04         MOV       R4,#0x4
    733            }
    734          
    735            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    736                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    737                                    disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneResponse_0:
   \   000043                ; Setup parameters for call to function zcl_SendCommand
   \   000043   A8..         MOV       R0,?XSP + 0
   \   000045   A9..         MOV       R1,?XSP + 1
   \   000047   88..         MOV       ?V2,R0
   \   000049   89..         MOV       ?V3,R1
   \   00004B   78..         MOV       R0,#?V2
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   EC           MOV       A,R4
   \   000051   F5..         MOV       ?V2,A
   \   000053   75..00       MOV       ?V3,#0x0
   \   000056   78..         MOV       R0,#?V2
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   7418         MOV       A,#0x18
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000066   E4           CLR       A
   \   000067   F5..         MOV       ?V2,A
   \   000069   78..         MOV       R0,#?V2
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   741A         MOV       A,#0x1a
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000079   75..01       MOV       ?V1,#0x1
   \   00007C   78..         MOV       R0,#?V1
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000081   78..         MOV       R0,#?V1
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000086   EF           MOV       A,R7
   \   000087   F5..         MOV       ?V1,A
   \   000089   78..         MOV       R0,#?V1
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008E   7C05         MOV       R4,#0x5
   \   000090   12....       LCALL     ??Subroutine92_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
   \   000096   7404         MOV       A,#0x4
   \   000098   02....       LJMP      ??Subroutine86_0 & 0xFFFF
    738          }
    739          
    740          /*********************************************************************
    741           * @fn      zclGeneral_SendSceneViewResponse
    742           *
    743           * @brief   Call to send Scene (Enahced) View Response Command. You can
    744           *           also use the appropriate macro.
    745           *
    746           * @param   srcEP - Sending application's endpoint
    747           * @param   dstAddr - where you want the message to go
    748           * @param   cmd - either COMMAND_SCENE_VIEW_RSP or COMMAND_SCENE_ENHANCED_VIEW_RSP
    749           * @param   status - scene command status
    750           * @param   scene - scene info
    751           *
    752           * @return  ZStatus_t
    753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    754          ZStatus_t zclGeneral_SendSceneViewRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneViewRsp:
    755                                                 uint8 cmd, uint8 status, zclGeneral_Scene_t *scene,
    756                                                 uint8 disableDefaultRsp, uint8 seqNum )
    757          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000013   89..         MOV       ?V15,R1
   \   000015   8C..         MOV       ?V14,R4
   \   000017   8D..         MOV       ?V7,R5
    758            uint8 *buf;
    759            uint8 *pBuf;
    760            uint8 len = 1 + 2 + 1; // Status + Group ID + Scene ID
   \   000019   7804         MOV       R0,#0x4
   \   00001B   741A         MOV       A,#0x1a
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine27 & 0xFFFF
    761            ZStatus_t stat;
    762          
    763            if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_37:
   \   000023   F5..         MOV       ?V10,A
   \   000025   E4           CLR       A
   \   000026   3F           ADDC      A,R7
   \   000027   F5..         MOV       ?V11,A
   \   000029   ED           MOV       A,R5
   \   00002A   7013         JNZ       ??zclGeneral_SendSceneViewRsp_0
    764            {
    765              len += 2; // Transition Time
    766              len += scene->name[0] + 1; // string + 1 for length
    767          
    768              // Add something for the extension field length
    769              len += scene->extLen;
   \   00002C   85..82       MOV       DPL,?V12
   \   00002F   85..83       MOV       DPH,?V13
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F8           MOV       R0,A
   \   000034   85..82       MOV       DPL,?V10
   \   000037   85..83       MOV       DPH,?V11
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   28           ADD       A,R0
   \   00003C   2407         ADD       A,#0x7
   \   00003E   F8           MOV       R0,A
    770            }
    771          
    772            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendSceneViewRsp_0:
   \   00003F   E8           MOV       A,R0
   \   000040   F5..         MOV       ?V2,A
   \   000042   75..00       MOV       ?V3,#0x0
   \   000045                ; Setup parameters for call to function osal_mem_alloc
   \   000045   FA           MOV       R2,A
   \   000046   AB..         MOV       R3,?V3
   \   000048   12....       LCALL     ??Subroutine94_0 & 0xFFFF
    773            if ( buf )
   \                     ??CrossCallReturnLabel_206:
   \   00004B   7003         JNZ       $+5
   \   00004D   02....       LJMP      ??zclGeneral_SendSceneViewRsp_1 & 0xFFFF
    774            {
    775              pBuf = buf;
    776              *pBuf++ = status;
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   E5..         MOV       A,?V7
   \   000056   12....       LCALL     ?Subroutine78 & 0xFFFF
    777              *pBuf++ = LO_UINT16( scene->groupID );
   \                     ??CrossCallReturnLabel_137:
   \   000059   12....       LCALL     ?Subroutine37 & 0xFFFF
    778              *pBuf++ = HI_UINT16( scene->groupID );
   \                     ??CrossCallReturnLabel_72:
   \   00005C   12....       LCALL     ?Subroutine26 & 0xFFFF
    779              *pBuf++ = scene->ID;
   \                     ??CrossCallReturnLabel_182:
   \   00005F   8E82         MOV       DPL,R6
   \   000061   8F83         MOV       DPH,R7
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   12....       LCALL     ?Subroutine44 & 0xFFFF
    780              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_87:
   \   000068   E5..         MOV       A,?V7
   \   00006A   6003         JZ        $+5
   \   00006C   02....       LJMP      ??zclGeneral_SendSceneViewRsp_2 & 0xFFFF
    781              {
    782                uint16 transTime = scene->transTime;
   \   00006F   8E82         MOV       DPL,R6
   \   000071   8F83         MOV       DPH,R7
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   12....       LCALL     ?Subroutine43 & 0xFFFF
    783                if ( cmd == COMMAND_SCENE_ENHANCED_VIEW_RSP )
   \                     ??CrossCallReturnLabel_79:
   \   000079   7441         MOV       A,#0x41
   \   00007B   65..         XRL       A,?V14
   \   00007D   701F         JNZ       ??zclGeneral_SendSceneViewRsp_3
    784                {
    785                  // Transition time is in 1/10s
    786                  transTime *= 10;
    787                  transTime += scene->transTime100ms;
   \   00007F   E8           MOV       A,R0
   \   000080   75F00A       MOV       B,#0xa
   \   000083   A4           MUL       AB
   \   000084   F8           MOV       R0,A
   \   000085   AAF0         MOV       R2,B
   \   000087   75F00A       MOV       B,#0xa
   \   00008A   E9           MOV       A,R1
   \   00008B   A4           MUL       AB
   \   00008C   2A           ADD       A,R2
   \   00008D   F9           MOV       R1,A
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   28           ADD       A,R0
   \   000099   F8           MOV       R0,A
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   39           ADDC      A,R1
   \   00009D   F9           MOV       R1,A
    788                }
    789          
    790                *pBuf++ = LO_UINT16( transTime );
   \                     ??zclGeneral_SendSceneViewRsp_3:
   \   00009E   E8           MOV       A,R0
   \   00009F   85..82       MOV       DPL,?V0
   \   0000A2   8B83         MOV       DPH,R3
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   F0           MOVX      @DPTR,A
    791                *pBuf++ = HI_UINT16( transTime );
   \   0000A9   E9           MOV       A,R1
   \   0000AA   85..82       MOV       DPL,?V0
   \   0000AD   8B83         MOV       DPH,R3
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   F0           MOVX      @DPTR,A
    792                *pBuf++ = scene->name[0]; // string length
   \   0000B5   85..82       MOV       DPL,?V10
   \   0000B8   85..83       MOV       DPH,?V11
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   85..82       MOV       DPL,?V0
   \   0000BF   8B83         MOV       DPH,R3
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   F0           MOVX      @DPTR,A
   \   0000C8   E5..         MOV       A,?V0
   \   0000CA   2407         ADD       A,#0x7
   \   0000CC   F5..         MOV       ?V8,A
   \   0000CE   E4           CLR       A
   \   0000CF   35..         ADDC      A,?V1
   \   0000D1   F5..         MOV       ?V9,A
    793                if ( scene->name[0] != 0 )
   \   0000D3   85..82       MOV       DPL,?V10
   \   0000D6   85..83       MOV       DPH,?V11
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   F9           MOV       R1,A
   \   0000DB   6026         JZ        ??zclGeneral_SendSceneViewRsp_4
    794                {
    795                  zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
   \   0000DD                ; Setup parameters for call to function osal_memcpy
   \   0000DD   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E3   E9           MOV       A,R1
   \   0000E4   FC           MOV       R4,A
   \   0000E5   7D00         MOV       R5,#0x0
   \   0000E7   AA..         MOV       R2,?V8
   \   0000E9   AB..         MOV       R3,?V9
   \   0000EB   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0000EE   12....       LCALL     ?DEALLOC_XSTACK8
    796                  pBuf += scene->name[0]; // move pass name
   \   0000F1   85..82       MOV       DPL,?V10
   \   0000F4   85..83       MOV       DPH,?V11
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   F8           MOV       R0,A
   \   0000F9   E5..         MOV       A,?V8
   \   0000FB   28           ADD       A,R0
   \   0000FC   F5..         MOV       ?V8,A
   \   0000FE   E4           CLR       A
   \   0000FF   35..         ADDC      A,?V9
   \   000101   F5..         MOV       ?V9,A
    797                }
    798          
    799                // Add the extension fields
    800                if ( scene->extLen > 0 )
   \                     ??zclGeneral_SendSceneViewRsp_4:
   \   000103   85..82       MOV       DPL,?V12
   \   000106   85..83       MOV       DPH,?V13
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   F9           MOV       R1,A
   \   00010B   6017         JZ        ??zclGeneral_SendSceneViewRsp_2
    801                  zcl_memcpy( pBuf, scene->extField, scene->extLen );
   \   00010D                ; Setup parameters for call to function osal_memcpy
   \   00010D   EE           MOV       A,R6
   \   00010E   2418         ADD       A,#0x18
   \   000110   12....       LCALL     ??Subroutine90_0 & 0xFFFF
    802              }
   \                     ??CrossCallReturnLabel_176:
   \   000113   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000116   E9           MOV       A,R1
   \   000117   FC           MOV       R4,A
   \   000118   7D00         MOV       R5,#0x0
   \   00011A   AA..         MOV       R2,?V8
   \   00011C   AB..         MOV       R3,?V9
   \   00011E   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000121   12....       LCALL     ?DEALLOC_XSTACK8
    803          
    804              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    805                                      cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    806                                      disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneViewRsp_2:
   \   000124                ; Setup parameters for call to function zcl_SendCommand
   \   000124   78..         MOV       R0,#?V0
   \   000126   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000129   78..         MOV       R0,#?V2
   \   00012B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012E   7421         MOV       A,#0x21
   \   000130   12....       LCALL     ?XSTACK_DISP0_8
   \   000133   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000136   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000139   E4           CLR       A
   \   00013A   F5..         MOV       ?V2,A
   \   00013C   78..         MOV       R0,#?V2
   \   00013E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000141   7423         MOV       A,#0x23
   \   000143   12....       LCALL     ?XSTACK_DISP0_8
   \   000146   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000149   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00014C   75..01       MOV       ?V2,#0x1
   \   00014F   78..         MOV       R0,#?V2
   \   000151   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000154   78..         MOV       R0,#?V2
   \   000156   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000159   E5..         MOV       A,?V14
   \   00015B   F5..         MOV       ?V2,A
   \   00015D   78..         MOV       R0,#?V2
   \   00015F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000162   7C05         MOV       R4,#0x5
   \   000164   7D00         MOV       R5,#0x0
   \   000166   740B         MOV       A,#0xb
   \   000168   12....       LCALL     ?XSTACK_DISP0_8
   \   00016B   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00016E   A9..         MOV       R1,?V15
   \   000170   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000173   12....       LCALL     ?DEALLOC_XSTACK8
   \   000176   E9           MOV       A,R1
   \   000177   FE           MOV       R6,A
    807              zcl_mem_free( buf );
   \   000178                ; Setup parameters for call to function osal_mem_free
   \   000178   AA..         MOV       R2,?V0
   \   00017A   AB..         MOV       R3,?V1
   \   00017C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00017F   8002         SJMP      ??zclGeneral_SendSceneViewRsp_5
    808            }
    809            else
    810              stat = ZMemError;
   \                     ??zclGeneral_SendSceneViewRsp_1:
   \   000181   7E10         MOV       R6,#0x10
    811          
    812            return ( stat );
   \                     ??zclGeneral_SendSceneViewRsp_5:
   \   000183   EE           MOV       A,R6
   \   000184   F9           MOV       R1,A
   \   000185   7402         MOV       A,#0x2
   \   000187   02....       LJMP      ?Subroutine4 & 0xFFFF
    813          }
    814          
    815          /*********************************************************************
    816           * @fn      zclGeneral_SendSceneGetMembershipResponse
    817           *
    818           * @brief   Call to send Scene Get Membership Response Command
    819           *
    820           * @param   srcEP - Sending application's endpoint
    821           * @param   dstAddr - where you want the message to go
    822           * @param   status - scene command status
    823           * @param   capacity - remaining capacity of the scene table
    824           * @param   sceneCnt - number of scenes in the scene list
    825           * @param   sceneList - list of scene IDs
    826           * @param   groupID - group ID that scene belongs to
    827           * @param   seqNum - sequence number
    828           *
    829           * @return  ZStatus_t
    830           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    831          ZStatus_t zclGeneral_SendSceneGetMembershipResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneGetMembershipResponse:
    832                                                               uint8 status, uint8 capacity, uint8 sceneCnt, uint8 *sceneList,
    833                                                               uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
    834          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    835            uint8 *buf;
    836            uint8 *pBuf;
    837            uint8 len = 1 + 1 + 2; // Status + Capacity + Group ID;
   \   00000F   7804         MOV       R0,#0x4
   \   000011   7412         MOV       A,#0x12
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V3,A
    838            uint8 i;
    839            ZStatus_t stat;
    840          
    841            if ( status == ZCL_STATUS_SUCCESS )
   \   000019   EC           MOV       A,R4
   \   00001A   7005         JNZ       ??zclGeneral_SendSceneGetMembershipResponse_0
    842            {
    843              len++; // Scene Count
    844              len += sceneCnt; // Scene List (Scene ID is a single octet)
   \   00001C   7405         MOV       A,#0x5
   \   00001E   25..         ADD       A,?V3
   \   000020   F8           MOV       R0,A
    845            }
    846          
    847            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_0:
   \   000021   E8           MOV       A,R0
   \   000022   12....       LCALL     ?Subroutine58 & 0xFFFF
    848            if ( buf )
   \                     ??CrossCallReturnLabel_202:
   \   000025   7003         JNZ       $+5
   \   000027   02....       LJMP      ??zclGeneral_SendSceneGetMembershipResponse_1 & 0xFFFF
    849            {
    850              pBuf = buf;
    851              *pBuf++ = status;
   \   00002A   EE           MOV       A,R6
   \   00002B   8A82         MOV       DPL,R2
   \   00002D   8B83         MOV       DPH,R3
   \   00002F   F0           MOVX      @DPTR,A
    852              *pBuf++ = capacity;
   \   000030   EF           MOV       A,R7
   \   000031   A3           INC       DPTR
   \   000032   F0           MOVX      @DPTR,A
   \   000033   7415         MOV       A,#0x15
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   12....       LCALL     ?Subroutine41 & 0xFFFF
    853              *pBuf++ = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_76:
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   F0           MOVX      @DPTR,A
    854              *pBuf++ = HI_UINT16( groupID );
   \   00003E   E9           MOV       A,R1
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   F0           MOVX      @DPTR,A
    855              if ( status == ZCL_STATUS_SUCCESS )
   \   000047   EE           MOV       A,R6
   \   000048   7034         JNZ       ??zclGeneral_SendSceneGetMembershipResponse_2
    856              {
    857                *pBuf++ = sceneCnt;
   \   00004A   8A82         MOV       DPL,R2
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E5..         MOV       A,?V3
   \   000054   F0           MOVX      @DPTR,A
   \   000055   EA           MOV       A,R2
   \   000056   2405         ADD       A,#0x5
   \   000058   F8           MOV       R0,A
   \   000059   E4           CLR       A
   \   00005A   35..         ADDC      A,?V1
   \   00005C   F9           MOV       R1,A
    858                for ( i = 0; i < sceneCnt; i++ )
   \   00005D   7C00         MOV       R4,#0x0
   \   00005F   7413         MOV       A,#0x13
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000067   800F         SJMP      ??zclGeneral_SendSceneGetMembershipResponse_3
    859                  *pBuf++ = sceneList[i];
   \                     ??zclGeneral_SendSceneGetMembershipResponse_4:
   \   000069   EA           MOV       A,R2
   \   00006A   2C           ADD       A,R4
   \   00006B   F582         MOV       DPL,A
   \   00006D   E4           CLR       A
   \   00006E   3B           ADDC      A,R3
   \   00006F   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000072   A3           INC       DPTR
   \   000073   A882         MOV       R0,DPL
   \   000075   A983         MOV       R1,DPH
   \   000077   0C           INC       R4
   \                     ??zclGeneral_SendSceneGetMembershipResponse_3:
   \   000078   EC           MOV       A,R4
   \   000079   C3           CLR       C
   \   00007A   95..         SUBB      A,?V3
   \   00007C   40EB         JC        ??zclGeneral_SendSceneGetMembershipResponse_4
    860              }
    861          
    862              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    863                                      COMMAND_SCENE_GET_MEMBERSHIP_RSP, TRUE,
    864                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_2:
   \   00007E                ; Setup parameters for call to function zcl_SendCommand
   \   00007E   78..         MOV       R0,#?V0
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   78..         MOV       R0,#?V4
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   741C         MOV       A,#0x1c
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000093   E4           CLR       A
   \   000094   F5..         MOV       ?V4,A
   \   000096   78..         MOV       R0,#?V4
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   741E         MOV       A,#0x1e
   \   00009D   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A0   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A6   75..01       MOV       ?V3,#0x1
   \   0000A9   78..         MOV       R0,#?V3
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AE   78..         MOV       R0,#?V3
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B3   75..06       MOV       ?V3,#0x6
   \   0000B6   78..         MOV       R0,#?V3
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BB   7C05         MOV       R4,#0x5
   \   0000BD   7D00         MOV       R5,#0x0
   \   0000BF   AA..         MOV       R2,?V6
   \   0000C1   AB..         MOV       R3,?V7
   \   0000C3   A9..         MOV       R1,?V2
   \   0000C5   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   0000C8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CB   E9           MOV       A,R1
   \   0000CC   F5..         MOV       ?V3,A
    865              zcl_mem_free( buf );
   \   0000CE                ; Setup parameters for call to function osal_mem_free
   \   0000CE   AA..         MOV       R2,?V0
   \   0000D0   AB..         MOV       R3,?V1
   \   0000D2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D5   8003         SJMP      ??zclGeneral_SendSceneGetMembershipResponse_5
    866            }
    867            else
    868              stat = ZMemError;
   \                     ??zclGeneral_SendSceneGetMembershipResponse_1:
   \   0000D7   75..10       MOV       ?V3,#0x10
    869          
    870            return ( stat );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_5:
   \   0000DA   A9..         MOV       R1,?V3
   \   0000DC   7F0A         MOV       R7,#0xa
   \   0000DE   02....       LJMP      ?BANKED_LEAVE_XDATA
    871          }
    872          
    873          #ifdef ZCL_LIGHT_LINK_ENHANCE
    874          /*********************************************************************
    875           * @fn      zclGeneral_SendSceneCopy
    876           *
    877           * @brief   Send Scene Copy Request to a device
    878           *
    879           * @param   srcEP - sending application's endpoint
    880           * @param   dstAddr - where to send the request
    881           * @param   mode - how scene copy is to proceed
    882           * @param   groupIDFrom - group from which scene to be copied
    883           * @param   sceneIDFrom - scene from which scene to be copied
    884           * @param   groupIDTo - group to which scene to be copied
    885           * @param   sceneIDTo - scene to which scene to be copied
    886           * @param   disableDefaultRsp - disable Default Response command
    887           * @param   seqNum - the identification number for the transaction
    888           *
    889           * @return  ZStatus_t
    890           */
    891          ZStatus_t zclGeneral_SendSceneCopy( uint8 srcEP, afAddrType_t *dstAddr,
    892                                              uint8 mode, uint16 groupIDFrom, uint8 sceneIDFrom,
    893                                              uint16 groupIDTo, uint8 sceneIDTo,
    894                                              uint8 disableDefaultRsp, uint8 seqNum )
    895          {
    896            uint8 buf[7];
    897          
    898            buf[0] = mode;
    899            buf[1] = LO_UINT16( groupIDFrom );
    900            buf[2] = HI_UINT16( groupIDFrom );
    901            buf[3] = sceneIDFrom;
    902            buf[4] = LO_UINT16( groupIDTo );
    903            buf[5] = HI_UINT16( groupIDTo );
    904            buf[6] = sceneIDTo;
    905          
    906            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    907                                      COMMAND_SCENE_COPY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    908                                      disableDefaultRsp, 0, seqNum, 7, buf ) );
    909          }
    910          
    911          /*********************************************************************
    912           * @fn      zclGeneral_SendSceneCopyResponse
    913           *
    914           * @brief   Send Scene Copy Response to a device
    915           *
    916           * @param   srcEP - sending application's endpoint
    917           * @param   dstAddr - where to send the request
    918           * @param   status - status of copy scene attemp
    919           * @param   groupIDFrom - group from which scene was copied
    920           * @param   sceneIDFrom - scene from which scene was copied
    921           * @param   disableDefaultRsp - disable Default Response command
    922           * @param   seqNum - the identification number for the transaction
    923           *
    924           * @return  ZStatus_t
    925           */
    926          ZStatus_t zclGeneral_SendSceneCopyResponse( uint8 srcEP, afAddrType_t *dstAddr,
    927                                                      uint8 status, uint16 groupIDFrom, uint8 sceneIDFrom,
    928                                                      uint8 disableDefaultRsp, uint8 seqNum )
    929          {
    930            uint8 buf[4];
    931          
    932            buf[0] = status;
    933            buf[1] = LO_UINT16( groupIDFrom );
    934            buf[2] = HI_UINT16( groupIDFrom );
    935            buf[3] = sceneIDFrom;
    936          
    937            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    938                                      COMMAND_SCENE_COPY_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    939                                      disableDefaultRsp, 0, seqNum, 4, buf ) );
    940          }
    941          #endif // ZCL_LIGHT_LINK_ENHANCE
    942          #endif // ZCL_SCENES
    943          
    944          #ifdef ZCL_ON_OFF
    945          #ifdef ZCL_LIGHT_LINK_ENHANCE
    946          /*********************************************************************
    947           * @fn      zclGeneral_SendOnOff_CmdOffWithEffect
    948           *
    949           * @brief   Call to send out an Off with Effect Command.
    950           *
    951           * @param   srcEP - Sending application's endpoint
    952           * @param   dstAddr - where you want the message to go
    953           * @param   effectId - fading effect to use when switching light off
    954           * @param   effectVariant - which variant of effect to be triggered
    955           * @param   disableDefaultRsp - whether to disable the Default Response command
    956           * @param   seqNum - sequence number
    957           *
    958           * @return  ZStatus_t
    959           */
    960          ZStatus_t zclGeneral_SendOnOff_CmdOffWithEffect( uint8 srcEP, afAddrType_t *dstAddr,
    961                                                           uint8 effectId, uint8 effectVariant,
    962                                                           uint8 disableDefaultRsp, uint8 seqNum )
    963          {
    964            uint8 buf[2];
    965          
    966            buf[0] = effectId;
    967            buf[1] = effectVariant;
    968          
    969            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
    970                                    COMMAND_OFF_WITH_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    971                                    disableDefaultRsp, 0, seqNum, 2, buf );
    972          }
    973          
    974          /*********************************************************************
    975           * @fn      zclGeneral_SendOnOff_CmdOnWithTimedOff
    976           *
    977           * @brief   Call to send out an On with Timed Off Command.
    978           *
    979           * @param   srcEP - Sending application's endpoint
    980           * @param   dstAddr - where you want the message to go
    981           * @param   onOffCtrl - how the lamp is to be operated
    982           * @param   onTime - the length of time (in 1/10ths second) that the lamp is to remain on, before automatically turning off
    983           * @param   offWaitTime - the length of time (in 1/10ths second) that the lamp shall remain off, and guarded to prevent an on command turning the light back on.
    984           * @param   disableDefaultRsp - whether to disable the Default Response command
    985           * @param   seqNum - sequence number
    986           *
    987           * @return  ZStatus_t
    988           */
    989          ZStatus_t zclGeneral_SendOnOff_CmdOnWithTimedOff ( uint8 srcEP, afAddrType_t *dstAddr,
    990                                                             zclOnOffCtrl_t onOffCtrl, uint16 onTime, uint16 offWaitTime,
    991                                                             uint8 disableDefaultRsp, uint8 seqNum )
    992          {
    993            uint8 buf[5];
    994          
    995            buf[0] = onOffCtrl.byte;
    996            buf[1] = LO_UINT16( onTime );
    997            buf[2] = HI_UINT16( onTime );
    998            buf[3] = LO_UINT16( offWaitTime );
    999            buf[4] = HI_UINT16( offWaitTime );
   1000          
   1001            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
   1002                                    COMMAND_ON_WITH_TIMED_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1003                                    disableDefaultRsp, 0, seqNum, 5, buf );
   1004          }
   1005          #endif // ZCL_LIGHT_LINK_ENHANCE
   1006          #endif // ZCL_ON_OFF
   1007          
   1008          #ifdef ZCL_LEVEL_CTRL
   1009          /*********************************************************************
   1010           * @fn      zclGeneral_SendLevelControlMoveToLevelRequest
   1011           *
   1012           * @brief   Call to send out a Level Control Request. You can also use
   1013           *          the appropriate macro.
   1014           *
   1015           * @param   srcEP - Sending application's endpoint
   1016           * @param   dstAddr - where you want the message to go
   1017           * @param   cmd - one of the following:
   1018           *              COMMAND_LEVEL_MOVE_TO_LEVEL or
   1019           *              COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
   1020           * @param   level - what level to move to
   1021           * @param   transitionTime - how long to take to get to the level (in seconds)
   1022           *
   1023           * @return  ZStatus_t
   1024           */
   1025          ZStatus_t zclGeneral_SendLevelControlMoveToLevelRequest( uint8 srcEP, afAddrType_t *dstAddr,
   1026                                                                   uint8 cmd, uint8 level, uint16 transTime,
   1027                                                                   uint8 disableDefaultRsp, uint8 seqNum )
   1028          {
   1029            uint8 buf[3];
   1030          
   1031            buf[0] = level;
   1032            buf[1] = LO_UINT16( transTime );
   1033            buf[2] = HI_UINT16( transTime );
   1034          
   1035            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1036                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1037                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1038          }
   1039          
   1040          /*********************************************************************
   1041           * @fn      zclGeneral_SendLevelControlMoveRequest
   1042           *
   1043           * @brief   Call to send out a Level Control Request. You can also use
   1044           *          the appropriate macro.
   1045           *
   1046           * @param   srcEP - Sending application's endpoint
   1047           * @param   dstAddr - where you want the message to go
   1048           * @param   cmd - one of the following:
   1049           *              COMMAND_LEVEL_MOVE or
   1050           *              COMMAND_LEVEL_MOVE_WITH_ON_OFF
   1051           * @param   moveMode - LEVEL_MOVE_UP or
   1052           *                     LEVEL_MOVE_DOWN
   1053           * @param   rate - number of steps to take per second
   1054           *
   1055           * @return  ZStatus_t
   1056           */
   1057          ZStatus_t zclGeneral_SendLevelControlMoveRequest( uint8 srcEP, afAddrType_t *dstAddr,
   1058                                                            uint8 cmd, uint8 moveMode, uint8 rate,
   1059                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1060          {
   1061            uint8 buf[2];
   1062          
   1063            buf[0] = moveMode;
   1064            buf[1] = rate;
   1065          
   1066            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1067                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1068                                    disableDefaultRsp, 0, seqNum, 2, buf );
   1069          }
   1070          
   1071          /*********************************************************************
   1072           * @fn      zclGeneral_SendLevelControlStepRequest
   1073           *
   1074           * @brief   Call to send out a Level Control Request. You can also use
   1075           *          the appropriate macro.
   1076           *
   1077           * @param   srcEP - Sending application's endpoint
   1078           * @param   dstAddr - where you want the message to go
   1079           * @param   cmd - one of the following:
   1080           *              COMMAND_LEVEL_STEP
   1081           *              COMMAND_LEVEL_STEP_WITH_ON_OFF
   1082           * @param   stepMode - LEVEL_STEP_UP or
   1083           *                     LEVEL_STEP_DOWN
   1084           * @param   amount - number of levels to step
   1085           * @param   transitionTime - time, in 1/10ths of a second, to take to perform the step
   1086           *
   1087           * @return  ZStatus_t
   1088           */
   1089          ZStatus_t zclGeneral_SendLevelControlStepRequest( uint8 srcEP, afAddrType_t *dstAddr,
   1090                                                            uint8 cmd, uint8 stepMode, uint8 stepSize, uint16 transTime,
   1091                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1092          {
   1093            uint8 buf[4];
   1094          
   1095            buf[0] = stepMode;
   1096            buf[1] = stepSize;
   1097            buf[2] = LO_UINT16( transTime );
   1098            buf[3] = HI_UINT16( transTime );
   1099          
   1100            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1101                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1102                                    disableDefaultRsp, 0, seqNum, 4, buf );
   1103          }
   1104          
   1105          /*********************************************************************
   1106           * @fn      zclGeneral_SendLevelControlStepRequest
   1107           *
   1108           * @brief   Call to send out a Level Control Request. You can also use
   1109           *          the appropriate macro.
   1110           *
   1111           * @param   srcEP - Sending application's endpoint
   1112           * @param   dstAddr - where you want the message to go
   1113           * @param   cmd - one of the following:
   1114           *              COMMAND_LEVEL_STOP
   1115           *              COMMAND_LEVEL_STOP_WITH_ON_OFF
   1116           *
   1117           * @return  ZStatus_t
   1118           */
   1119          ZStatus_t zclGeneral_SendLevelControlStopRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   1120                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1121          {
   1122            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1123                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1124                                    disableDefaultRsp, 0, seqNum, 0, NULL );
   1125          }
   1126          #endif // ZCL_LEVEL_CTRL
   1127          
   1128          #ifdef ZCL_ALARMS
   1129          /*********************************************************************
   1130           * @fn      zclGeneral_SendAlarm
   1131           *
   1132           * @brief   Call to send out an Alarm Request Command
   1133           *
   1134           * @param   srcEP - Sending application's endpoint
   1135           * @param   dstAddr - where you want the message to go
   1136           * @param   cmd - COMMAND_ALARMS_ALARM
   1137           * @param   alarmCode - code for the cause of the alarm
   1138           * @param   clusterID - cluster whose attribute generate the alarm
   1139           *
   1140           * @return  ZStatus_t
   1141           */
   1142          ZStatus_t zclGeneral_SendAlarm( uint8 srcEP, afAddrType_t *dstAddr,
   1143                                          uint8 alarmCode, uint16 clusterID,
   1144                                          uint8 disableDefaultRsp, uint8 seqNum )
   1145          {
   1146            uint8 buf[3];
   1147          
   1148            buf[0] = alarmCode;
   1149            buf[1] = LO_UINT16( clusterID );
   1150            buf[2] = HI_UINT16( clusterID );
   1151          
   1152            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1153                                    COMMAND_ALARMS_ALARM, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1154                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1155          }
   1156          
   1157          /*********************************************************************
   1158           * @fn      zclGeneral_SendAlarmReset
   1159           *
   1160           * @brief   Call to send out an Alarm Reset Command
   1161           *
   1162           * @param   srcEP - Sending application's endpoint
   1163           * @param   dstAddr - where you want the message to go
   1164           * @param   alarmCode - code for the cause of the alarm
   1165           * @param   clusterID - cluster whose attribute generate the alarm
   1166           *
   1167           * @return  ZStatus_t
   1168          */
   1169          ZStatus_t zclGeneral_SendAlarmReset( uint8 srcEP, afAddrType_t *dstAddr,
   1170                                               uint8 alarmCode, uint16 clusterID,
   1171                                               uint8 disableDefaultRsp, uint8 seqNum )
   1172          {
   1173            uint8 buf[3];
   1174          
   1175            buf[0] = alarmCode;
   1176            buf[1] = LO_UINT16( clusterID );
   1177            buf[2] = HI_UINT16( clusterID );
   1178          
   1179            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1180                                    COMMAND_ALARMS_RESET, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1181                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1182          }
   1183          
   1184          /*********************************************************************
   1185           * @fn      zclGeneral_SendAlarmGetResponse
   1186           *
   1187           * @brief   Call to send out an Alarm Get Response Command
   1188           *
   1189           * @param   srcEP - Sending application's endpoint
   1190           * @param   dstAddr - where you want the message to go
   1191           * @param   status - SUCCESS or NOT_FOUND
   1192           * @param   alarmCode - code for the cause of the alarm
   1193           * @param   clusterID - cluster whose attribute generate the alarm
   1194           * @param   timeStamp - time at which the alarm occured
   1195           *
   1196           * @return  ZStatus_t
   1197           */
   1198          ZStatus_t zclGeneral_SendAlarmGetResponse( uint8 srcEP, afAddrType_t *dstAddr,
   1199                                                     uint8 status, uint8 alarmCode, uint16 clusterID,
   1200                                                     uint32 timeStamp, uint8 disableDefaultRsp, uint8 seqNum )
   1201          {
   1202            uint8 buf[8];
   1203            uint8 len = 1; // Status
   1204          
   1205            buf[0] = status;
   1206            if ( status == ZCL_STATUS_SUCCESS )
   1207            {
   1208              len += 1 + 2 + 4; // Alarm code + Cluster ID + Time stamp
   1209              buf[1] = alarmCode;
   1210              buf[2] = LO_UINT16( clusterID );
   1211              buf[3] = HI_UINT16( clusterID );
   1212              zcl_buffer_uint32( &buf[4], timeStamp );
   1213            }
   1214          
   1215            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1216                                    COMMAND_ALARMS_GET_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1217                                    disableDefaultRsp, 0, seqNum, len, buf );
   1218          }
   1219          
   1220          #ifdef SE_UK_EXT
   1221          /*********************************************************************
   1222           * @fn      zclGeneral_SendAlarmGetEventLog
   1223           *
   1224           * @brief   Call to send out an Alarm Get Event Log Command
   1225           *
   1226           * @param   srcEP - Sending application's endpoint
   1227           * @param   dstAddr - where you want the message to go
   1228           * @param   pEventLog - pointer to Get Event Log Command
   1229           * @param   disableDefaultRsp - disable default response
   1230           * @param   seqNum - ZCL sequence number
   1231           *
   1232           * @return  ZStatus_t
   1233           */
   1234          ZStatus_t zclGeneral_SendAlarmGetEventLog( uint8 srcEP, afAddrType_t *dstAddr,
   1235                                                     zclGetEventLog_t *pEventLog,
   1236                                                     uint8 disableDefaultRsp, uint8 seqNum )
   1237          {
   1238            uint8 buf[10];
   1239          
   1240            buf[0] = pEventLog->logID;
   1241            zcl_buffer_uint32( &buf[1], pEventLog->startTime );
   1242            zcl_buffer_uint32( &buf[5], pEventLog->endTime );
   1243            buf[9] = pEventLog->numEvents;
   1244          
   1245            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1246                                    COMMAND_ALARMS_GET_EVENT_LOG, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1247                                    disableDefaultRsp, 0, seqNum, 10, buf );
   1248          }
   1249          
   1250          /*********************************************************************
   1251           * @fn      zclGeneral_SendAlarmPublishEventLog
   1252           *
   1253           * @brief   Call to send out an Alarm Publish Event Log Command
   1254           *
   1255           * @param   srcEP - Sending application's endpoint
   1256           * @param   dstAddr - where you want the message to go
   1257           * @param   pEventLog - pointer to Publish Event Log Command
   1258           * @param   disableDefaultRsp - disable default response
   1259           * @param   seqNum - ZCL sequence number
   1260           *
   1261           * @return  ZStatus_t
   1262           */
   1263          ZStatus_t zclGeneral_SendAlarmPublishEventLog( uint8 srcEP, afAddrType_t *dstAddr,
   1264                                                         zclPublishEventLog_t *pEventLog,
   1265                                                         uint8 disableDefaultRsp, uint8 seqNum )
   1266          {
   1267            uint8 *buf;
   1268            uint8 *pBuf;
   1269            uint8 bufLen;
   1270          
   1271            // Log ID + Command Index + Total Commands + (numSubLogs * ( Event ID + Event Time))
   1272            bufLen = 1 + 1 + 1 + (pEventLog->numSubLogs * (1 + 4));
   1273          
   1274            buf = zcl_mem_alloc( bufLen );
   1275            if ( buf == NULL )
   1276            {
   1277              return (ZMemError);
   1278            }
   1279          
   1280            pBuf = buf;
   1281            *pBuf++ = pEventLog->logID;
   1282            *pBuf++ = pEventLog->cmdIndex;
   1283            *pBuf++ = pEventLog->totalCmds;
   1284          
   1285            for ( uint8 i = 0; i < pEventLog->numSubLogs; i++ )
   1286            {
   1287              zclEventLogPayload_t *pLogs = &(pEventLog->pLogs[i]);
   1288          
   1289              *pBuf++ = pLogs->eventId;
   1290              pBuf = zcl_buffer_uint32( pBuf, pLogs->eventTime );
   1291            }
   1292          
   1293            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1294                                    COMMAND_ALARMS_PUBLISH_EVENT_LOG, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1295                                    disableDefaultRsp, 0, seqNum, bufLen, buf );
   1296          }
   1297          #endif // SE_UK_EXT
   1298          #endif // ZCL_ALARMS
   1299          
   1300          #ifdef ZCL_LOCATION
   1301          /*********************************************************************
   1302           * @fn      zclGeneral_SendLocationSetAbsolute
   1303           *
   1304           * @brief   Call to send out a Set Absolute Location Command
   1305           *
   1306           * @param   srcEP - Sending application's endpoint
   1307           * @param   dstAddr - where you want the message to go
   1308           * @param   absLoc - absolute location info
   1309           *
   1310           * @return  ZStatus_t
   1311           */
   1312          ZStatus_t zclGeneral_SendLocationSetAbsolute( uint8 srcEP, afAddrType_t *dstAddr,
   1313                                                        zclLocationAbsolute_t *absLoc,
   1314                                                        uint8 disableDefaultRsp, uint8 seqNum )
   1315          {
   1316             uint8 buf[10]; // 5 fields (2 octects each)
   1317          
   1318             buf[0] = LO_UINT16( absLoc->coordinate1 );
   1319             buf[1] = HI_UINT16( absLoc->coordinate1 );
   1320             buf[2] = LO_UINT16( absLoc->coordinate2 );
   1321             buf[3] = HI_UINT16( absLoc->coordinate2 );
   1322             buf[4] = LO_UINT16( absLoc->coordinate3 );
   1323             buf[5] = HI_UINT16( absLoc->coordinate3 );
   1324             buf[6] = LO_UINT16( absLoc->power );
   1325             buf[7] = HI_UINT16( absLoc->power );
   1326             buf[8] = LO_UINT16( absLoc->pathLossExponent );
   1327             buf[9] = HI_UINT16( absLoc->pathLossExponent );
   1328          
   1329             return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1330                                     COMMAND_LOCATION_SET_ABSOLUTE, TRUE,
   1331                                     ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 10, buf );
   1332          }
   1333          
   1334          /*********************************************************************
   1335           * @fn      zclGeneral_SendLocationSetDevCfg
   1336           *
   1337           * @brief   Call to send out a Set Device Configuration Command
   1338           *
   1339           * @param   srcEP - Sending application's endpoint
   1340           * @param   dstAddr - where you want the message to go
   1341           * @param   devCfg - device configuration info
   1342           *
   1343           * @return  ZStatus_t
   1344           */
   1345          ZStatus_t zclGeneral_SendLocationSetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
   1346                                                      zclLocationDevCfg_t *devCfg,
   1347                                                      uint8 disableDefaultRsp, uint8 seqNum )
   1348          {
   1349             uint8 buf[9];  // 4 fields (2 octects each) + 1 field with 1 octect
   1350          
   1351             buf[0] = LO_UINT16( devCfg->power );
   1352             buf[1] = HI_UINT16( devCfg->power );
   1353             buf[2] = LO_UINT16( devCfg->pathLossExponent );
   1354             buf[3] = HI_UINT16( devCfg->pathLossExponent );
   1355             buf[4] = LO_UINT16( devCfg->calcPeriod );
   1356             buf[5] = HI_UINT16( devCfg->calcPeriod );
   1357             buf[6] = devCfg->numMeasurements;
   1358             buf[7] = LO_UINT16( devCfg->reportPeriod );
   1359             buf[8] = HI_UINT16( devCfg->reportPeriod );
   1360          
   1361             return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1362                                     COMMAND_LOCATION_SET_DEV_CFG, TRUE,
   1363                                     ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 9, buf );
   1364          }
   1365          
   1366          /*********************************************************************
   1367           * @fn      zclGeneral_SendLocationGetDevCfg
   1368           *
   1369           * @brief   Call to send out a Get Device Configuration Command
   1370           *
   1371           * @param   srcEP - Sending application's endpoint
   1372           * @param   dstAddr - where you want the message to go
   1373           * @param   targetAddr - device for which location parameters are being requested
   1374           *
   1375           * @return  ZStatus_t
   1376           */
   1377          ZStatus_t zclGeneral_SendLocationGetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
   1378                                                      uint8 *targetAddr, uint8 disableDefaultRsp, uint8 seqNum )
   1379          {
   1380            uint8 buf[8];
   1381          
   1382            zcl_memcpy( buf, targetAddr, 8 );
   1383          
   1384            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1385                                    COMMAND_LOCATION_GET_DEV_CFG, TRUE,
   1386                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 8, buf );
   1387          }
   1388          
   1389          /*********************************************************************
   1390           * @fn      zclGeneral_SendLocationGetData
   1391           *
   1392           * @brief   Call to send out a Get Location Data Command
   1393           *
   1394           * @param   srcEP - Sending application's endpoint
   1395           * @param   dstAddr - where you want the message to go
   1396           * @param   locaData - location information and channel parameters that are requested.
   1397           *
   1398           * @return  ZStatus_t
   1399           */
   1400          ZStatus_t zclGeneral_SendLocationGetData( uint8 srcEP, afAddrType_t *dstAddr,
   1401                                                    zclLocationGetData_t *locData,
   1402                                                    uint8 disableDefaultRsp, uint8 seqNum )
   1403          {
   1404            uint8 buf[10]; // bitmap (1) + number responses (1) + IEEE Address (8)
   1405            uint8 *pBuf = buf;
   1406            uint8 len = 2; // bitmap + number responses
   1407          
   1408            *pBuf  = locData->absoluteOnly;
   1409            *pBuf |= locData->recalculate << 1;
   1410            *pBuf |= locData->brdcastIndicator << 2;
   1411            *pBuf |= locData->brdcastResponse << 3;
   1412            *pBuf |= locData->compactResponse << 4;
   1413            pBuf++;  // move past the bitmap field
   1414          
   1415            *pBuf++ = locData->numResponses;
   1416          
   1417            if ( locData->brdcastIndicator == 0 )
   1418            {
   1419              zcl_memcpy( pBuf, locData->targetAddr, 8 );
   1420              len += 8; // ieee addr
   1421            }
   1422          
   1423            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1424                                    COMMAND_LOCATION_GET_DATA, TRUE,
   1425                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   1426          }
   1427          
   1428          /*********************************************************************
   1429           * @fn      zclGeneral_SendLocationDevCfgResponse
   1430           *
   1431           * @brief   Call to send out a Device Configuration Response Command
   1432           *
   1433           * @param   srcEP - Sending application's endpoint
   1434           * @param   dstAddr - where you want the message to go
   1435           * @param   devCfg - device's location parameters that are requested
   1436           *
   1437           * @return  ZStatus_t
   1438           */
   1439          ZStatus_t zclGeneral_SendLocationDevCfgResponse( uint8 srcEP, afAddrType_t *dstAddr,
   1440                                                           zclLocationDevCfgRsp_t *devCfg,
   1441                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1442          {
   1443            uint8 buf[10]; // 4 fields (2 octects each) + 2 fields (1 octect each)
   1444            uint8 len = 1; // Status
   1445          
   1446            buf[0] = devCfg->status;
   1447            if ( devCfg->status == ZCL_STATUS_SUCCESS )
   1448            {
   1449              buf[1] = LO_UINT16( devCfg->data.power );
   1450              buf[2] = HI_UINT16( devCfg->data.power );
   1451              buf[3] = LO_UINT16( devCfg->data.pathLossExponent );
   1452              buf[4] = HI_UINT16( devCfg->data.pathLossExponent );
   1453              buf[5] = LO_UINT16( devCfg->data.calcPeriod );
   1454              buf[6] = HI_UINT16( devCfg->data.calcPeriod );
   1455              buf[7] = devCfg->data.numMeasurements;
   1456              buf[8] = LO_UINT16( devCfg->data.reportPeriod );
   1457              buf[9] = HI_UINT16( devCfg->data.reportPeriod );
   1458              len += 9;
   1459            }
   1460          
   1461            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1462                                    COMMAND_LOCATION_DEV_CFG_RSP, TRUE,
   1463                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   1464          }
   1465          
   1466          /*********************************************************************
   1467           * @fn      zclGeneral_SendLocationData
   1468           *
   1469           * @brief   Call to send out location data
   1470           *
   1471           * @param   srcEP - Sending application's endpoint
   1472           * @param   dstAddr - where you want the message to go
   1473           * @param   status - indicates whether response to request was successful or not
   1474           * @param   locData - location information and channel parameters being sent
   1475           *
   1476           * @return  ZStatus_t
   1477           */
   1478          ZStatus_t zclGeneral_SendLocationData( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   1479                                                 uint8 status, zclLocationData_t *locData,
   1480                                                 uint8 disableDefaultRsp, uint8 seqNum )
   1481          {
   1482            uint8 buf[16];
   1483            uint8 *pBuf = buf;
   1484            uint8 len = 0;
   1485          
   1486            if ( cmd == COMMAND_LOCATION_DATA_RSP )
   1487            {
   1488              // Only response command includes a status field
   1489              *pBuf++ = status;
   1490              len++;
   1491            }
   1492          
   1493            if ( cmd != COMMAND_LOCATION_DATA_RSP || status == ZCL_STATUS_SUCCESS )
   1494            {
   1495              // Notification or Response with successful status
   1496              *pBuf++ = locData->type;
   1497              *pBuf++ = LO_UINT16( locData->absLoc.coordinate1 );
   1498              *pBuf++ = HI_UINT16( locData->absLoc.coordinate1 );
   1499              *pBuf++ = LO_UINT16( locData->absLoc.coordinate2 );
   1500              *pBuf++ = HI_UINT16( locData->absLoc.coordinate2 );
   1501              len += 5;
   1502          
   1503              if ( locationType2D(locData->type) == 0 )
   1504              {
   1505                // 2D location doesn't have coordinate 3
   1506                *pBuf++ = LO_UINT16( locData->absLoc.coordinate3 );
   1507                *pBuf++ = HI_UINT16( locData->absLoc.coordinate3 );
   1508                len += 2;
   1509              }
   1510          
   1511              if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   1512              {
   1513                // Compact notification doesn't include these fields
   1514                *pBuf++ = LO_UINT16( locData->absLoc.power );
   1515                *pBuf++ = HI_UINT16( locData->absLoc.power );
   1516                *pBuf++ = LO_UINT16( locData->absLoc.pathLossExponent );
   1517                *pBuf++ = HI_UINT16( locData->absLoc.pathLossExponent );
   1518                len += 4;
   1519              }
   1520          
   1521              if ( locationTypeAbsolute(locData->type) == 0 )
   1522              {
   1523                // Absolute location doesn't include these fields
   1524                if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   1525                {
   1526                  // Compact notification doesn't include this field
   1527                  *pBuf++ = locData->calcLoc.locationMethod;
   1528                  len++;
   1529                }
   1530          
   1531                *pBuf++ = locData->calcLoc.qualityMeasure;
   1532                *pBuf++ = LO_UINT16( locData->calcLoc.locationAge );
   1533                *pBuf++ = HI_UINT16( locData->calcLoc.locationAge );
   1534                len += 3;
   1535              }
   1536            }
   1537          
   1538            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1539                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1540                                    disableDefaultRsp, 0, seqNum, len, buf );
   1541          }
   1542          #endif // ZCL_LOCATION
   1543          
   1544          /*********************************************************************
   1545           * @fn      zclGeneral_FindCallbacks
   1546           *
   1547           * @brief   Find the callbacks for an endpoint
   1548           *
   1549           * @param   endpoint - endpoint to find the application callbacks for
   1550           *
   1551           * @return  pointer to the callbacks
   1552           */
   1553          static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint )
   1554          {
   1555            zclGenCBRec_t *pCBs;
   1556          
   1557            pCBs = zclGenCBs;
   1558            while ( pCBs )
   1559            {
   1560              if ( pCBs->endpoint == endpoint )
   1561                return ( pCBs->CBs );
   1562              pCBs = pCBs->next;
   1563            }
   1564            return ( (zclGeneral_AppCallbacks_t *)NULL );
   1565          }
   1566          
   1567          /*********************************************************************
   1568           * @fn      zclGeneral_HdlIncoming
   1569           *
   1570           * @brief   Callback from ZCL to process incoming Commands specific
   1571           *          to this cluster library or Profile commands for attributes
   1572           *          that aren't in the attribute list
   1573           *
   1574           *
   1575           * @param   pInMsg - pointer to the incoming message
   1576           *
   1577           * @return  ZStatus_t
   1578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1579          static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclGeneral_HdlIncoming:
   1580          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1581            ZStatus_t stat = ZSuccess;
   1582          
   1583          #if defined ( INTER_PAN )
   1584            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
   1585              return ( stat ); // Cluster not supported thru Inter-PAN
   1586          #endif
   1587            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   5407         ANL       A,#0x7
   \   00000D   6401         XRL       A,#0x1
   \   00000F   7007         JNZ       ??zclGeneral_HdlIncoming_0
   1588            {
   1589              // Is this a manufacturer specific command?
   1590              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   1591              {
   1592                stat = zclGeneral_HdlInSpecificCommands( pInMsg );
   \   000011                ; Setup parameters for call to function zclGeneral_HdlInSpecificCommands
   \   000011   12....       LCALL     `??zclGeneral_HdlInSpecificCommands::?relay`; Banked call to: zclGeneral_HdlInSpecificCommands
   \   000014   E9           MOV       A,R1
   \   000015   F9           MOV       R1,A
   \   000016   8002         SJMP      ??zclGeneral_HdlIncoming_1
   1593              }
   1594              else
   1595              {
   1596                // We don't support any manufacturer specific command.
   1597                stat = ZFailure;
   1598              }
   1599            }
   1600            else
   1601            {
   1602              // Handle all the normal (Read, Write...) commands -- should never get here
   1603              stat = ZFailure;
   \                     ??zclGeneral_HdlIncoming_0:
   \   000018   7901         MOV       R1,#0x1
   1604            }
   1605            return ( stat );
   \                     ??zclGeneral_HdlIncoming_1:
   \   00001A   02....       LJMP      ?Subroutine5 & 0xFFFF
   1606          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
   1607          
   1608          /*********************************************************************
   1609           * @fn      zclGeneral_HdlInSpecificCommands
   1610           *
   1611           * @brief   Callback from ZCL to process incoming Commands specific
   1612           *          to this cluster library
   1613          
   1614           * @param   pInMsg - pointer to the incoming message
   1615           *
   1616           * @return  ZStatus_t
   1617           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1618          static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg )
   \                     zclGeneral_HdlInSpecificCommands:
   1619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1620            ZStatus_t stat;
   1621            zclGeneral_AppCallbacks_t *pCBs;
   1622          
   1623            // make sure endpoint exists
   1624            pCBs = zclGeneral_FindCallbacks( pInMsg->msg->endPoint );
   \   000005   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000008   E8           MOV       A,R0
   \   000009   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00000C   FC           MOV       R4,A
   \   00000D   90....       MOV       DPTR,#zclGenCBs
   \                     ??zclGeneral_HdlInSpecificCommands_0:
   \   000010   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000013   6057         JZ        ??zclGeneral_HdlInSpecificCommands_1
   \   000015   8882         MOV       DPL,R0
   \   000017   8983         MOV       DPH,R1
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6C           XRL       A,R4
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   70ED         JNZ       ??zclGeneral_HdlInSpecificCommands_0
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000029   FD           MOV       R5,A
   1625            if ( pCBs == NULL )
   \   00002A   EC           MOV       A,R4
   \   00002B   4D           ORL       A,R5
   \   00002C   603E         JZ        ??zclGeneral_HdlInSpecificCommands_1
   1626              return ( ZFailure );
   1627          
   1628            switch ( pInMsg->msg->clusterId )
   \   00002E   8E82         MOV       DPL,R6
   \   000030   8F83         MOV       DPH,R7
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F5..         MOV       ?V0,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F5..         MOV       ?V1,A
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclGeneral_HdlInSpecificComman_0`:
   \   000042   0000         DW        0
   \   000044   05           DB        5
   \   000045   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   000047   ....         DW        ??zclGeneral_HdlInSpecificCommands_2
   \   000049   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   00004B   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   00004D   ....         DW        ??zclGeneral_HdlInSpecificCommands_3
   \   00004F   ....         DW        ??zclGeneral_HdlInSpecificCommands_4
   \   000051   ....         DW        ??zclGeneral_HdlInSpecificCommands_5
   1629            {
   1630          #ifdef ZCL_BASIC
   1631              case ZCL_CLUSTER_ID_GEN_BASIC:
   1632                stat = zclGeneral_ProcessInBasic( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_2:
   \   000053   8A82         MOV       DPL,R2
   \   000055   8B83         MOV       DPH,R3
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   5408         ANL       A,#0x8
   \   00005C   7027         JNZ       ??zclGeneral_HdlInSpecificCommands_6
   \   00005E   8A82         MOV       DPL,R2
   \   000060   8B83         MOV       DPH,R3
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   6004         JZ        ??zclGeneral_HdlInSpecificCommands_7
   \                     ??zclGeneral_HdlInSpecificCommands_1:
   \   00006C   7901         MOV       R1,#0x1
   \   00006E   8048         SJMP      ??zclGeneral_HdlInSpecificCommands_8
   \                     ??zclGeneral_HdlInSpecificCommands_7:
   \   000070   8C82         MOV       DPL,R4
   \   000072   8D83         MOV       DPH,R5
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F8           MOV       R0,A
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   8882         MOV       DPL,R0
   \   00007A   F583         MOV       DPH,A
   \   00007C   E582         MOV       A,DPL
   \   00007E   4583         ORL       A,DPH
   \   000080   6003         JZ        ??zclGeneral_HdlInSpecificCommands_6
   \   000082                ; Setup parameters for indirect call
   \   000082   12....       LCALL     ?CALL_IND
   \                     ??zclGeneral_HdlInSpecificCommands_6:
   \   000085   7900         MOV       R1,#0x0
   \   000087   802F         SJMP      ??zclGeneral_HdlInSpecificCommands_8
   1633                break;
   1634          #endif // ZCL_BASIC
   1635          
   1636          #ifdef ZCL_IDENTIFY
   1637              case ZCL_CLUSTER_ID_GEN_IDENTIFY:
   1638                stat = zclGeneral_ProcessInIdentity( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_3:
   \   000089                ; Setup parameters for call to function zclGeneral_ProcessInIdentity
   \   000089   12....       LCALL     `??zclGeneral_ProcessInIdentity::?relay`; Banked call to: zclGeneral_ProcessInIdentity
   \   00008C   8028         SJMP      ??zclGeneral_HdlInSpecificCommands_9
   1639                break;
   1640          #endif // ZCL_IDENTIFY
   1641          
   1642          #ifdef ZCL_GROUPS
   1643              case ZCL_CLUSTER_ID_GEN_GROUPS:
   1644                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGeneral_HdlInSpecificCommands_4:
   \   00008E   8A82         MOV       DPL,R2
   \   000090   8B83         MOV       DPH,R3
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   5408         ANL       A,#0x8
   \   000097   7005         JNZ       ??zclGeneral_HdlInSpecificCommands_10
   1645                  stat = zclGeneral_ProcessInGroupsServer( pInMsg );
   \   000099                ; Setup parameters for call to function zclGeneral_ProcessInGroupsServer
   \   000099   12....       LCALL     `??zclGeneral_ProcessInGroupsServer::?relay`; Banked call to: zclGeneral_ProcessInGroupsServer
   \   00009C   8018         SJMP      ??zclGeneral_HdlInSpecificCommands_9
   1646                else
   1647                  stat = zclGeneral_ProcessInGroupsClient( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_10:
   \   00009E                ; Setup parameters for call to function zclGeneral_ProcessInGroupsClient
   \   00009E   12....       LCALL     `??zclGeneral_ProcessInGroupsClient::?relay`; Banked call to: zclGeneral_ProcessInGroupsClient
   \   0000A1   8013         SJMP      ??zclGeneral_HdlInSpecificCommands_9
   1648                break;
   1649          #endif // ZCL_GROUPS
   1650          
   1651          #ifdef ZCL_SCENES
   1652              case ZCL_CLUSTER_ID_GEN_SCENES:
   1653                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGeneral_HdlInSpecificCommands_5:
   \   0000A3   8A82         MOV       DPL,R2
   \   0000A5   8B83         MOV       DPH,R3
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   5408         ANL       A,#0x8
   \   0000AC   7005         JNZ       ??zclGeneral_HdlInSpecificCommands_11
   1654                  stat = zclGeneral_ProcessInScenesServer( pInMsg, pCBs );
   \   0000AE                ; Setup parameters for call to function zclGeneral_ProcessInScenesServer
   \   0000AE   12....       LCALL     `??zclGeneral_ProcessInScenesServer::?relay`; Banked call to: zclGeneral_ProcessInScenesServer
   \   0000B1   8003         SJMP      ??zclGeneral_HdlInSpecificCommands_9
   1655                else
   1656                  stat = zclGeneral_ProcessInScenesClient( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_11:
   \   0000B3                ; Setup parameters for call to function zclGeneral_ProcessInScenesClient
   \   0000B3   12....       LCALL     `??zclGeneral_ProcessInScenesClient::?relay`; Banked call to: zclGeneral_ProcessInScenesClient
   \                     ??zclGeneral_HdlInSpecificCommands_9:
   \   0000B6   E9           MOV       A,R1
   \   0000B7   F9           MOV       R1,A
   1657                break;
   1658          #endif // ZCL_SCENES
   1659          
   1660          #ifdef ZCL_ON_OFF
   1661              case ZCL_CLUSTER_ID_GEN_ON_OFF:
   1662                stat = zclGeneral_ProcessInOnOff( pInMsg, pCBs );
   1663                break;
   1664          #endif // ZCL_ON_OFF
   1665          
   1666          #ifdef ZCL_LEVEL_CTRL
   1667              case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
   1668                stat = zclGeneral_ProcessInLevelControl( pInMsg, pCBs );
   1669                break;
   1670          #endif // ZCL_LEVEL_CTRL
   1671          
   1672          #ifdef ZCL_ALARMS
   1673              case ZCL_CLUSTER_ID_GEN_ALARMS:
   1674                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1675                  stat = zclGeneral_ProcessInAlarmsServer( pInMsg, pCBs );
   1676                else
   1677                  stat = zclGeneral_ProcessInAlarmsClient( pInMsg, pCBs );
   1678                break;
   1679          #endif // ZCL_ALARMS
   1680          
   1681          #ifdef ZCL_LOCATION
   1682              case ZCL_CLUSTER_ID_GEN_LOCATION:
   1683                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1684                  stat = zclGeneral_ProcessInLocationServer( pInMsg, pCBs );
   1685                else
   1686                  stat = zclGeneral_ProcessInLocationClient( pInMsg, pCBs );
   1687                break;
   1688          #endif // ZCL_LOCATION
   1689          
   1690              case ZCL_CLUSTER_ID_GEN_POWER_CFG:
   1691              case ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG:
   1692              case ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG:
   1693              case ZCL_CLUSTER_ID_GEN_TIME:
   1694              default:
   1695                stat = ZFailure;
   1696                break;
   1697            }
   1698          
   1699            return ( stat );
   \                     ??zclGeneral_HdlInSpecificCommands_8:
   \   0000B8   80..         SJMP      ??Subroutine98_0
   1700          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004                REQUIRE ??Subroutine96_0
   \   000004                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000003   FE           MOV       R6,A
   \   000004   E9           MOV       A,R1
   \   000005   FF           MOV       R7,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET
   1701          
   1702          #ifdef ZCL_BASIC
   1703          /*********************************************************************
   1704           * @fn      zclGeneral_ProcessInBasic
   1705           *
   1706           * @brief   Process in the received Basic Command.
   1707           *
   1708           * @param   pInMsg - pointer to the incoming message
   1709           *
   1710           * @return  ZStatus_t
   1711           */
   1712          static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg,
   1713                                                      zclGeneral_AppCallbacks_t *pCBs )
   1714          {
   1715            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1716            {
   1717              if ( pInMsg->hdr.commandID > COMMAND_BASIC_RESET_FACT_DEFAULT )
   1718                return ( ZFailure );   // Error ignore the command
   1719          
   1720              if ( pCBs->pfnBasicReset )
   1721                pCBs->pfnBasicReset();
   1722            }
   1723            // no Client command
   1724          
   1725            return ( ZSuccess );
   1726          }
   1727          #endif // ZCL_BASIC
   1728          
   1729          #ifdef ZCL_IDENTIFY
   1730          /*********************************************************************
   1731           * @fn      zclGeneral_ProcessInIdentity
   1732           *
   1733           * @brief   Process in the received Identity Command.
   1734           *
   1735           * @param   pInMsg - pointer to the incoming message
   1736           *
   1737           * @return  ZStatus_t
   1738           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1739          static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInIdentity:
   1740                                                         zclGeneral_AppCallbacks_t *pCBs )
   1741          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   1742            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F8           MOV       R0,A
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   5408         ANL       A,#0x8
   \   000024   6003         JZ        $+5
   \   000026   02....       LJMP      ??zclGeneral_ProcessInIdentity_0 & 0xFFFF
   1743            {
   1744              if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY )
   \   000029   E8           MOV       A,R0
   \   00002A   702B         JNZ       ??zclGeneral_ProcessInIdentity_1
   1745              {
   1746                uint16 identifyTime;
   1747                
   1748                identifyTime = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1749                
   1750                bdb_ZclIdentifyCmdInd( identifyTime, pInMsg->msg->endPoint);
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   1751              }
   \                     ??CrossCallReturnLabel_306:
   \   00003B   FA           MOV       R2,A
   \   00003C   E9           MOV       A,R1
   \   00003D   FB           MOV       R3,A
   \   00003E                ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
   \   00003E   85..82       MOV       DPL,?V0
   \   000041   85..83       MOV       DPH,?V1
   \   000044   12....       LCALL     ??Subroutine99_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00004E   FB           MOV       R3,A
   \   00004F   EC           MOV       A,R4
   \   000050   FA           MOV       R2,A
   \   000051   12....       LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
   \   000054   02....       LJMP      ??zclGeneral_ProcessInIdentity_2 & 0xFFFF
   1752              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_QUERY )
   \                     ??zclGeneral_ProcessInIdentity_1:
   \   000057   7401         MOV       A,#0x1
   \   000059   68           XRL       A,R0
   \   00005A   6003         JZ        $+5
   \   00005C   02....       LJMP      ??zclGeneral_ProcessInIdentity_3 & 0xFFFF
   1753              {
   1754                uint16 identifyTime = 0;
   \   00005F   85..82       MOV       DPL,?XSP + 0
   \   000062   85..83       MOV       DPH,?XSP + 1
   \   000065   E4           CLR       A
   \   000066   F0           MOVX      @DPTR,A
   \   000067   A3           INC       DPTR
   \   000068   F0           MOVX      @DPTR,A
   1755          
   1756                // Retrieve Identify Time
   1757                zcl_ReadAttrData( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   1758                                  ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
   \   000069   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00006C                ; Setup parameters for call to function zcl_ReadAttrData
   \   00006C   E4           CLR       A
   \   00006D   F5..         MOV       ?V2,A
   \   00006F   F5..         MOV       ?V3,A
   \   000071   78..         MOV       R0,#?V2
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000076   7402         MOV       A,#0x2
   \   000078   12....       LCALL     ?XSTACK_DISP100_8
   \   00007B   88..         MOV       ?V2,R0
   \   00007D   89..         MOV       ?V3,R1
   \   00007F   78..         MOV       R0,#?V2
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000084   7C00         MOV       R4,#0x0
   \   000086   7D00         MOV       R5,#0x0
   \   000088   8E82         MOV       DPL,R6
   \   00008A   8F83         MOV       DPH,R7
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000093   EE           MOV       A,R6
   \   000094   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000097   F9           MOV       R1,A
   \   000098   12....       LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   00009B   7404         MOV       A,#0x4
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   1759          
   1760                // Is device identifying itself?
   1761                if ( identifyTime > 0 )
   \   0000A0   85..82       MOV       DPL,?XSP + 0
   \   0000A3   85..83       MOV       DPH,?XSP + 1
   \   0000A6   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0000A9   606E         JZ        ??zclGeneral_ProcessInIdentity_2
   1762                {
   1763                  zclGeneral_SendIdentifyQueryResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1764                                                        identifyTime, true, pInMsg->hdr.transSeqNum );
   \   0000AB   85..82       MOV       DPL,?V0
   \   0000AE   85..83       MOV       DPH,?V1
   \   0000B1   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   0000B4                ; Setup parameters for call to function zclGeneral_SendIdentifyQueryResponse
   \   0000B4   85..82       MOV       DPL,?V0
   \   0000B7   85..83       MOV       DPH,?V1
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C6   75..01       MOV       ?V0,#0x1
   \   0000C9   78..         MOV       R0,#?V0
   \   0000CB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CE   7402         MOV       A,#0x2
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000D6   12....       LCALL     `??zclGeneral_SendIdentifyQueryResponse::?relay`; Banked call to: zclGeneral_SendIdentifyQueryResponse
   \   0000D9   7402         MOV       A,#0x2
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
   1765                  return ( ZCL_STATUS_CMD_HAS_RSP );
   \   0000DE   79FF         MOV       R1,#-0x1
   \   0000E0   8039         SJMP      ??zclGeneral_ProcessInIdentity_4
   1766                }
   1767              }
   1768          
   1769          #ifdef ZCL_LIGHT_LINK_ENHANCE
   1770              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_TRIGGER_EFFECT )
   1771              {
   1772                if ( pCBs->pfnIdentifyTriggerEffect )
   1773                {
   1774                  zclIdentifyTriggerEffect_t cmd;
   1775          
   1776                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   1777                  cmd.effectId = pInMsg->pData[0];
   1778                  cmd.effectVariant = pInMsg->pData[1];
   1779          
   1780                  pCBs->pfnIdentifyTriggerEffect( &cmd );
   1781                }
   1782              }
   1783          #endif //ZCL_LIGHT_LINK_ENHANCE
   1784              else
   1785              {
   1786                return ( ZFailure );   // Error ignore the command
   1787              }
   1788            }
   1789            else // Client Command
   1790            {
   1791              if ( pInMsg->hdr.commandID > COMMAND_IDENTIFY_QUERY_RSP )
   \                     ??zclGeneral_ProcessInIdentity_0:
   \   0000E2   E8           MOV       A,R0
   \   0000E3   6004         JZ        ??zclGeneral_ProcessInIdentity_5
   1792                return ( ZFailure );   // Error ignore the command
   \                     ??zclGeneral_ProcessInIdentity_3:
   \   0000E5   7901         MOV       R1,#0x1
   \   0000E7   8032         SJMP      ??zclGeneral_ProcessInIdentity_4
   1793          
   1794              zclIdentifyQueryRsp_t rsp;
   1795              
   1796              rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??zclGeneral_ProcessInIdentity_5:
   \   0000E9   8A82         MOV       DPL,R2
   \   0000EB   8B83         MOV       DPH,R3
   \   0000ED   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   0000F0   7402         MOV       A,#0x2
   \   0000F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F5   E8           MOV       A,R0
   \   0000F6   F0           MOVX      @DPTR,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   E9           MOV       A,R1
   \   0000F9   12....       LCALL     ?Subroutine56 & 0xFFFF
   1797              rsp.timeout = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??CrossCallReturnLabel_104:
   \   0000FC   A3           INC       DPTR
   \   0000FD   A3           INC       DPTR
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000104   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000107   F9           MOV       R1,A
   \   000108   7404         MOV       A,#0x4
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   EC           MOV       A,R4
   \   00010E   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   1798              
   1799              bdb_ZclIdentifyQueryCmdInd( &rsp );
   \                     ??CrossCallReturnLabel_261:
   \   000111                ; Setup parameters for call to function bdb_ZclIdentifyQueryCmdInd
   \   000111   7402         MOV       A,#0x2
   \   000113   12....       LCALL     ?XSTACK_DISP101_8
   \   000116   12....       LCALL     `??bdb_ZclIdentifyQueryCmdInd::?relay`; Banked call to: bdb_ZclIdentifyQueryCmdInd
   1800            }
   1801            return ( ZSuccess );
   \                     ??zclGeneral_ProcessInIdentity_2:
   \   000119   7900         MOV       R1,#0x0
   \                     ??zclGeneral_ProcessInIdentity_4:
   \   00011B   7406         MOV       A,#0x6
   \   00011D   02....       LJMP      ??Subroutine86_0 & 0xFFFF
   1802          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   FD           MOV       R5,A
   \   000004   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000003   49           ORL       A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003   8A82         MOV       DPL,R2
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   EE           MOV       A,R6
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FB           MOV       R3,A
   \   000007   EE           MOV       A,R6
   \   000008   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00000B   F9           MOV       R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL     ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   2414         ADD       A,#0x14
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   38           ADDC      A,R0
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000003   22           RET
   1803          #endif // ZCL_IDENTIFY
   1804          
   1805          #ifdef ZCL_GROUPS
   1806          
   1807          /*********************************************************************
   1808           * @fn      zclGeneral_AddGroup
   1809           *
   1810           * @brief   Add a Group.
   1811           *
   1812           * @param   endPoint - application endpoint
   1813           * @param   group - group to be added
   1814           * @param   pData - pointer to the group info
   1815           *
   1816           * @return  ZStatus_t
   1817           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1818          static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData )
   \                     zclGeneral_AddGroup:
   1819          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V2,R4
   \   000012   8D..         MOV       ?V3,R5
   1820            uint8 nameLen;
   1821            uint8 nameSupport = FALSE;
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   1822          
   1823            pData += 2;   // Move past group ID
   1824            nameLen = *pData++;
   \   00001C   8C82         MOV       DPL,R4
   \   00001E   8D83         MOV       DPH,R5
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V0,A
   1825          
   1826            // Retrieve Name Support attribute
   1827            zcl_ReadAttrData( endPoint, ZCL_CLUSTER_ID_GEN_GROUPS,
   1828                              ATTRID_GROUP_NAME_SUPPORT, &nameSupport, NULL );
   \   000025                ; Setup parameters for call to function zcl_ReadAttrData
   \   000025   E4           CLR       A
   \   000026   F5..         MOV       ?V4,A
   \   000028   F5..         MOV       ?V5,A
   \   00002A   78..         MOV       R0,#?V4
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?XSTACK_DISP100_8
   \   000034   88..         MOV       ?V4,R0
   \   000036   89..         MOV       ?V5,R1
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7A04         MOV       R2,#0x4
   \   000043   7B00         MOV       R3,#0x0
   \   000045   A9..         MOV       R1,?V1
   \   000047   12....       LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   00004A   7404         MOV       A,#0x4
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   1829          
   1830            if ( nameSupport )
   \   00004F   85..82       MOV       DPL,?XSP + 0
   \   000052   85..83       MOV       DPH,?XSP + 1
   \   000055   E0           MOVX      A,@DPTR
   \   000056   6037         JZ        ??zclGeneral_AddGroup_0
   1831            {
   1832              if ( nameLen > (APS_GROUP_NAME_LEN-1) )
   \   000058   E5..         MOV       A,?V0
   \   00005A   C3           CLR       C
   \   00005B   9410         SUBB      A,#0x10
   \   00005D   4003         JC        ??zclGeneral_AddGroup_1
   1833                 nameLen = (APS_GROUP_NAME_LEN-1);
   \   00005F   75..0F       MOV       ?V0,#0xf
   1834              group->name[0] = nameLen;
   \                     ??zclGeneral_AddGroup_1:
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E5..         MOV       A,?V0
   \   00006A   F0           MOVX      @DPTR,A
   1835              zcl_memcpy( &(group->name[1]), pData, nameLen );
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   85..82       MOV       DPL,?V2
   \   00006E   85..83       MOV       DPH,?V3
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A982         MOV       R1,DPL
   \   000076   AA83         MOV       R2,DPH
   \   000078   89..         MOV       ?V4,R1
   \   00007A   8A..         MOV       ?V5,R2
   \   00007C   75..00       MOV       ?V6,#0x0
   \   00007F   78..         MOV       R0,#?V4
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000084   AC..         MOV       R4,?V0
   \   000086   7D00         MOV       R5,#0x0
   \   000088   EE           MOV       A,R6
   \   000089   12....       LCALL     ?Subroutine60 & 0xFFFF
   1836            }
   \                     ??CrossCallReturnLabel_105:
   \   00008C   12....       LCALL     ?DEALLOC_XSTACK8
   1837          
   1838            return ( aps_AddGroup( endPoint, group ) );
   \                     ??zclGeneral_AddGroup_0:
   \   00008F                ; Setup parameters for call to function aps_AddGroup
   \   00008F   EE           MOV       A,R6
   \   000090   FA           MOV       R2,A
   \   000091   EF           MOV       A,R7
   \   000092   FB           MOV       R3,A
   \   000093   A9..         MOV       R1,?V1
   \   000095   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
   \   000098   7401         MOV       A,#0x1
   \   00009A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009D                REQUIRE ?Subroutine6
   \   00009D                ; // Fall through to label ?Subroutine6
   1839          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   2403         ADD       A,#0x3
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   3F           ADDC      A,R7
   \   000005   FB           MOV       R3,A
   \   000006   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000009   7403         MOV       A,#0x3
   \   00000B   22           RET
   1840          
   1841          /*********************************************************************
   1842           * @fn      zclGeneral_ProcessInGroupsServer
   1843           *
   1844           * @brief   Process in the received Groups Command.
   1845           *
   1846           * @param   pInMsg - pointer to the incoming message
   1847           *
   1848           * @return  ZStatus_t
   1849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1850          static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg )
   \                     zclGeneral_ProcessInGroupsServer:
   1851          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 54
   \   000005   74CA         MOV       A,#-0x36
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1852            aps_Group_t group;
   1853            aps_Group_t *pGroup;
   1854            uint8 *pData;
   1855            uint8 status;
   1856            uint8 grpCnt;
   1857            uint8 grpRspCnt = 0;
   \   00000E   75..00       MOV       ?V4,#0x0
   1858            uint16 *grpList;
   1859            uint16 identifyTime = 0;
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   E4           CLR       A
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   F0           MOVX      @DPTR,A
   1860            uint8 i;
   1861            ZStatus_t stat = ZSuccess;
   \   00001A   75..00       MOV       ?V0,#0x0
   1862          
   1863            zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
   \   00001D                ; Setup parameters for call to function osal_memset
   \   00001D   7C12         MOV       R4,#0x12
   \   00001F   FD           MOV       R5,A
   \   000020   F9           MOV       R1,A
   \   000021   7404         MOV       A,#0x4
   \   000023   12....       LCALL     ?XSTACK_DISP101_8
   \   000026   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1864          
   1865            pData = pInMsg->pData;
   \   000029   8E82         MOV       DPL,R6
   \   00002B   8F83         MOV       DPH,R7
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ?Subroutine31 & 0xFFFF
   1866            group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??CrossCallReturnLabel_43:
   \   000038   A3           INC       DPTR
   \   000039   A882         MOV       R0,DPL
   \   00003B   A983         MOV       R1,DPH
   \   00003D   85..82       MOV       DPL,?V2
   \   000040   F583         MOV       DPH,A
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FC           MOV       R4,A
   \   000044   8882         MOV       DPL,R0
   \   000046   8983         MOV       DPH,R1
   \   000048   E0           MOVX      A,@DPTR
   \   000049   FB           MOV       R3,A
   \   00004A   7404         MOV       A,#0x4
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   EC           MOV       A,R4
   \   000050   12....       LCALL     ??Subroutine95_0 & 0xFFFF
   1867            switch ( pInMsg->hdr.commandID )
   \                     ??CrossCallReturnLabel_208:
   \   000053   EE           MOV       A,R6
   \   000054   2406         ADD       A,#0x6
   \   000056   F5..         MOV       ?V8,A
   \   000058   E4           CLR       A
   \   000059   3F           ADDC      A,R7
   \   00005A   F5..         MOV       ?V9,A
   \   00005C   EE           MOV       A,R6
   \   00005D   2407         ADD       A,#0x7
   \   00005F   F5..         MOV       ?V6,A
   \   000061   E4           CLR       A
   \   000062   3F           ADDC      A,R7
   \   000063   F5..         MOV       ?V7,A
   \   000065   85..82       MOV       DPL,?V6
   \   000068   F583         MOV       DPH,A
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   601E         JZ        ??zclGeneral_ProcessInGroupsServer_0
   \   00006D   14           DEC       A
   \   00006E   6053         JZ        ??zclGeneral_ProcessInGroupsServer_1
   \   000070   14           DEC       A
   \   000071   7003         JNZ       $+5
   \   000073   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_2 & 0xFFFF
   \   000076   14           DEC       A
   \   000077   7003         JNZ       $+5
   \   000079   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_3 & 0xFFFF
   \   00007C   14           DEC       A
   \   00007D   7003         JNZ       $+5
   \   00007F   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_4 & 0xFFFF
   \   000082   14           DEC       A
   \   000083   7003         JNZ       $+5
   \   000085   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_5 & 0xFFFF
   \   000088   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_6 & 0xFFFF
   1868            {
   1869              case COMMAND_GROUP_ADD:
   1870                status = zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
   \                     ??zclGeneral_ProcessInGroupsServer_0:
   \   00008B                ; Setup parameters for call to function zclGeneral_AddGroup
   \   00008B   AC..         MOV       R4,?V2
   \   00008D   AD..         MOV       R5,?V3
   \   00008F   7404         MOV       A,#0x4
   \   000091   12....       LCALL     ?XSTACK_DISP101_8
   \   000094   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000097   E9           MOV       A,R1
   \   000098   FC           MOV       R4,A
   1871                if ( status != ZSuccess )
   \   000099   600B         JZ        ??zclGeneral_ProcessInGroupsServer_7
   1872                {
   1873                  if ( status == ZApsDuplicateEntry )
   \   00009B   74B8         MOV       A,#-0x48
   \   00009D   6C           XRL       A,R4
   \   00009E   7004         JNZ       ??zclGeneral_ProcessInGroupsServer_8
   1874                  {
   1875                    status = ZCL_STATUS_DUPLICATE_EXISTS;
   \   0000A0   7C8A         MOV       R4,#-0x76
   \   0000A2   8002         SJMP      ??zclGeneral_ProcessInGroupsServer_7
   1876                  }
   1877                  else
   1878                  {
   1879                    status = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??zclGeneral_ProcessInGroupsServer_8:
   \   0000A4   7C89         MOV       R4,#-0x77
   1880                  }
   1881                }
   1882          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1883                if ( UNICAST_MSG( pInMsg->msg ) )
   1884          #endif
   1885                {
   1886                  zclGeneral_SendGroupAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1887                                                   status, group.ID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_7:
   \   0000A6   12....       LCALL     ?Subroutine16 & 0xFFFF
   1888                  stat = ZCL_STATUS_CMD_HAS_RSP;
   1889                }
   \                     ??CrossCallReturnLabel_19:
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AC   75..01       MOV       ?V0,#0x1
   \   0000AF   78..         MOV       R0,#?V0
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B4   7406         MOV       A,#0x6
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000BC   EC           MOV       A,R4
   \   0000BD   FD           MOV       R5,A
   \   0000BE   7C00         MOV       R4,#0x0
   \   0000C0   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   1890                break;
   1891          
   1892              case COMMAND_GROUP_VIEW:
   1893          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1894                if ( UNICAST_MSG( pInMsg->msg ) )
   1895          #endif
   1896                {
   1897                  pGroup = aps_FindGroup( pInMsg->msg->endPoint, group.ID );
   \                     ??zclGeneral_ProcessInGroupsServer_1:
   \   0000C3                ; Setup parameters for call to function aps_FindGroup
   \   0000C3   7404         MOV       A,#0x4
   \   0000C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   FA           MOV       R2,A
   \   0000CA   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   0000CD   12....       LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   0000D0   8A..         MOV       ?V0,R2
   \   0000D2   8B..         MOV       ?V1,R3
   1898                  if ( pGroup )
   \   0000D4   EA           MOV       A,R2
   \   0000D5   4B           ORL       A,R3
   \   0000D6   6004         JZ        ??zclGeneral_ProcessInGroupsServer_10
   1899                  {
   1900                    status = ZCL_STATUS_SUCCESS;
   \   0000D8   7C00         MOV       R4,#0x0
   \   0000DA   800B         SJMP      ??zclGeneral_ProcessInGroupsServer_11
   1901                  }
   1902                  else
   1903                  {
   1904                    // Group not found
   1905                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInGroupsServer_10:
   \   0000DC   7C8B         MOV       R4,#-0x75
   1906                    pGroup = &group;
   \   0000DE   7404         MOV       A,#0x4
   \   0000E0   12....       LCALL     ?XSTACK_DISP100_8
   \   0000E3   88..         MOV       ?V0,R0
   \   0000E5   89..         MOV       ?V1,R1
   1907                  }
   1908                  zclGeneral_SendGroupViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1909                                                    status, pGroup, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_11:
   \   0000E7   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000ED   78..         MOV       R0,#?V0
   \   0000EF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F2   7D01         MOV       R5,#0x1
   \   0000F4   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000F7   12....       LCALL     `??zclGeneral_SendGroupViewResponse::?relay`; Banked call to: zclGeneral_SendGroupViewResponse
   \   0000FA   7403         MOV       A,#0x3
   \   0000FC   12....       LCALL     ?DEALLOC_XSTACK8
   1910                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \   0000FF   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_12 & 0xFFFF
   1911                }
   1912                break;
   1913          
   1914              case COMMAND_GROUP_GET_MEMBERSHIP:
   1915          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1916                if ( UNICAST_MSG( pInMsg->msg ) )
   1917          #endif
   1918                {
   1919                  grpCnt = *pData++;
   \                     ??zclGeneral_ProcessInGroupsServer_2:
   \   000102   85..82       MOV       DPL,?V2
   \   000105   85..83       MOV       DPH,?V3
   \   000108   E0           MOVX      A,@DPTR
   \   000109   F5..         MOV       ?V10,A
   \   00010B   88..         MOV       ?V2,R0
   \   00010D   89..         MOV       ?V3,R1
   1920          
   1921                  // Allocate space for the group list
   1922                  grpList = zcl_mem_alloc( sizeof( uint16 ) * APS_MAX_GROUPS );
   \   00010F                ; Setup parameters for call to function osal_mem_alloc
   \   00010F   7A20         MOV       R2,#0x20
   \   000111   7B00         MOV       R3,#0x0
   \   000113   12....       LCALL     ??Subroutine94_0 & 0xFFFF
   1923                  if ( grpList != NULL )
   \                     ??CrossCallReturnLabel_207:
   \   000116   7003         JNZ       $+5
   \   000118   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_13 & 0xFFFF
   1924                  {
   1925                    if ( grpCnt == 0 )
   \   00011B   E5..         MOV       A,?V10
   \   00011D   7007         JNZ       ??zclGeneral_ProcessInGroupsServer_14
   1926                    {
   1927                      // Find out all the groups of which the endpoint is a member.
   1928                      grpRspCnt = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, grpList );
   \   00011F                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   00011F   12....       LCALL     ?Subroutine23 & 0xFFFF
   1929                    }
   \                     ??CrossCallReturnLabel_32:
   \   000122   F5..         MOV       ?V4,A
   \   000124   8051         SJMP      ??zclGeneral_ProcessInGroupsServer_15
   1930                    else
   1931                    {
   1932                      // Find out the groups (in the list) of which the endpoint is a member.
   1933                      for ( i = 0; i < grpCnt; i++ )
   \                     ??zclGeneral_ProcessInGroupsServer_14:
   \   000126   F5..         MOV       ?V5,A
   1934                      {
   1935                        group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInGroupsServer_16:
   \   000128   85..82       MOV       DPL,?V2
   \   00012B   85..83       MOV       DPH,?V3
   \   00012E   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000131   7404         MOV       A,#0x4
   \   000133   12....       LCALL     ?XSTACK_DISP0_8
   \   000136   EA           MOV       A,R2
   \   000137   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   1936                        pData += 2;
   \                     ??CrossCallReturnLabel_262:
   \   00013A   E5..         MOV       A,?V2
   \   00013C   2402         ADD       A,#0x2
   \   00013E   F5..         MOV       ?V2,A
   \   000140   5002         JNC       ??zclGeneral_ProcessInGroupsServer_17
   \   000142   05..         INC       ?V3
   1937          
   1938                        if ( aps_FindGroup( pInMsg->msg->endPoint, group.ID ) )
   \                     ??zclGeneral_ProcessInGroupsServer_17:
   \   000144                ; Setup parameters for call to function aps_FindGroup
   \   000144   7404         MOV       A,#0x4
   \   000146   12....       LCALL     ?XSTACK_DISP0_8
   \   000149   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00014C   601F         JZ        ??zclGeneral_ProcessInGroupsServer_18
   1939                          grpList[grpRspCnt++] = group.ID;
   \   00014E   7404         MOV       A,#0x4
   \   000150   12....       LCALL     ?XSTACK_DISP0_8
   \   000153   12....       LCALL     ?Subroutine33 & 0xFFFF
   1940                      }
   \                     ??CrossCallReturnLabel_52:
   \   000156   A8..         MOV       R0,?V4
   \   000158   E8           MOV       A,R0
   \   000159   28           ADD       A,R0
   \   00015A   F8           MOV       R0,A
   \   00015B   E4           CLR       A
   \   00015C   33           RLC       A
   \   00015D   F9           MOV       R1,A
   \   00015E   E5..         MOV       A,?V0
   \   000160   28           ADD       A,R0
   \   000161   F582         MOV       DPL,A
   \   000163   E5..         MOV       A,?V1
   \   000165   39           ADDC      A,R1
   \   000166   F583         MOV       DPH,A
   \   000168   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00016B   05..         INC       ?V4
   \                     ??zclGeneral_ProcessInGroupsServer_18:
   \   00016D   15..         DEC       ?V5
   \   00016F   E5..         MOV       A,?V5
   \   000171   70B5         JNZ       ??zclGeneral_ProcessInGroupsServer_16
   \   000173   E5..         MOV       A,?V4
   \   000175   6043         JZ        ??zclGeneral_ProcessInGroupsServer_19
   1941                    }
   1942          
   1943                    if ( grpCnt == 0 ||  grpRspCnt != 0 )
   1944                    {
   1945                      zclGeneral_SendGroupGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1946                                                                 aps_GroupsRemaingCapacity(), grpRspCnt,
   1947                                                                 grpList, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_15:
   \   000177                ; Setup parameters for call to function aps_CountAllGroups
   \   000177   12....       LCALL     `??aps_CountAllGroups::?relay`; Banked call to: aps_CountAllGroups
   \   00017A   E9           MOV       A,R1
   \   00017B   F9           MOV       R1,A
   \   00017C   12....       LCALL     ?Subroutine28 & 0xFFFF
   1948                    }
   \                     ??CrossCallReturnLabel_39:
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000182   75..01       MOV       ?V2,#0x1
   \   000185   78..         MOV       R0,#?V2
   \   000187   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018A   78..         MOV       R0,#?V0
   \   00018C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018F   E5..         MOV       A,?V4
   \   000191   F5..         MOV       ?V2,A
   \   000193   78..         MOV       R0,#?V2
   \   000195   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000198   7410         MOV       A,#0x10
   \   00019A   C3           CLR       C
   \   00019B   99           SUBB      A,R1
   \   00019C   F5..         MOV       ?V2,A
   \   00019E   78..         MOV       R0,#?V2
   \   0001A0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A3   75..01       MOV       ?V2,#0x1
   \   0001A6   78..         MOV       R0,#?V2
   \   0001A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001AB   7D01         MOV       R5,#0x1
   \   0001AD   7C02         MOV       R4,#0x2
   \   0001AF   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0001B2   12....       LCALL     `??zclGeneral_SendGroupGetMembershipRequest::?re`; Banked call to: zclGeneral_SendGroupGetMembershipRequest
   \   0001B5   7407         MOV       A,#0x7
   \   0001B7   12....       LCALL     ?DEALLOC_XSTACK8
   1949          
   1950                    zcl_mem_free( grpList );
   \                     ??zclGeneral_ProcessInGroupsServer_19:
   \   0001BA                ; Setup parameters for call to function osal_mem_free
   \   0001BA   AA..         MOV       R2,?V0
   \   0001BC   AB..         MOV       R3,?V1
   \   0001BE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001C1   8054         SJMP      ??zclGeneral_ProcessInGroupsServer_20
   1951                  }
   1952                  else
   1953                  {
   1954                    // Couldn't allocate space for the group list -- send a Default Response command back.
   1955                    zclDefaultRspCmd_t defaultRspCmd;
   1956          
   1957                    defaultRspCmd.commandID = pInMsg->hdr.commandID;
   \                     ??zclGeneral_ProcessInGroupsServer_13:
   \   0001C3   85..82       MOV       DPL,?V6
   \   0001C6   85..83       MOV       DPH,?V7
   \   0001C9   E0           MOVX      A,@DPTR
   \   0001CA   85..82       MOV       DPL,?XSP + 0
   \   0001CD   85..83       MOV       DPH,?XSP + 1
   \   0001D0   F0           MOVX      @DPTR,A
   1958                    defaultRspCmd.statusCode = ZCL_STATUS_INSUFFICIENT_SPACE;
   \   0001D1   7401         MOV       A,#0x1
   \   0001D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D6   7489         MOV       A,#-0x77
   \   0001D8   F0           MOVX      @DPTR,A
   1959                    zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   1960                                           pInMsg->msg->clusterId, &defaultRspCmd,
   1961                                           ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
   \   0001D9   12....       LCALL     ?Subroutine16 & 0xFFFF
   1962                  }
   \                     ??CrossCallReturnLabel_20:
   \   0001DC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001DF   E4           CLR       A
   \   0001E0   F5..         MOV       ?V0,A
   \   0001E2   F5..         MOV       ?V1,A
   \   0001E4   78..         MOV       R0,#?V0
   \   0001E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E9   75..01       MOV       ?V0,#0x1
   \   0001EC   78..         MOV       R0,#?V0
   \   0001EE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001F1   78..         MOV       R0,#?V0
   \   0001F3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001F6   7405         MOV       A,#0x5
   \   0001F8   12....       LCALL     ?XSTACK_DISP100_8
   \   0001FB   88..         MOV       ?V0,R0
   \   0001FD   89..         MOV       ?V1,R1
   \   0001FF   78..         MOV       R0,#?V0
   \   000201   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000204   8E82         MOV       DPL,R6
   \   000206   8F83         MOV       DPH,R7
   \   000208   A3           INC       DPTR
   \   000209   A3           INC       DPTR
   \   00020A   A3           INC       DPTR
   \   00020B   A3           INC       DPTR
   \   00020C   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00020F   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   000212   7407         MOV       A,#0x7
   \   000214   12....       LCALL     ?DEALLOC_XSTACK8
   1963          
   1964                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInGroupsServer_20:
   \   000217   8043         SJMP      ??zclGeneral_ProcessInGroupsServer_12
   1965                }
   1966                break;
   1967          
   1968              case COMMAND_GROUP_REMOVE:
   1969          #if defined ( ZCL_SCENES )
   1970                zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, group.ID );
   \                     ??zclGeneral_ProcessInGroupsServer_3:
   \   000219                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   000219   7404         MOV       A,#0x4
   \   00021B   12....       LCALL     ?XSTACK_DISP0_8
   \   00021E   E0           MOVX      A,@DPTR
   \   00021F   FA           MOV       R2,A
   \   000220   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   1971          #endif
   1972                if ( aps_RemoveGroup( pInMsg->msg->endPoint, group.ID ) )
   \                     ??CrossCallReturnLabel_285:
   \   000223                ; Setup parameters for call to function aps_RemoveGroup
   \   000223   7404         MOV       A,#0x4
   \   000225   12....       LCALL     ?XSTACK_DISP0_8
   \   000228   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00022B   12....       LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   00022E   E9           MOV       A,R1
   \   00022F   6004         JZ        ??zclGeneral_ProcessInGroupsServer_21
   1973                {
   1974                  status = ZCL_STATUS_SUCCESS;
   \   000231   7C00         MOV       R4,#0x0
   \   000233   8002         SJMP      ??zclGeneral_ProcessInGroupsServer_22
   1975                }
   1976                else
   1977                {
   1978                  status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInGroupsServer_21:
   \   000235   7C8B         MOV       R4,#-0x75
   1979                }
   1980          
   1981          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1982                if ( UNICAST_MSG( pInMsg->msg ) )
   1983          #endif
   1984                {
   1985                  zclGeneral_SendGroupRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1986                                                      status, group.ID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_22:
   \   000237   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00023A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00023D   75..01       MOV       ?V0,#0x1
   \   000240   78..         MOV       R0,#?V0
   \   000242   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000245   7406         MOV       A,#0x6
   \   000247   12....       LCALL     ?XSTACK_DISP0_8
   \   00024A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00024D   EC           MOV       A,R4
   \   00024E   FD           MOV       R5,A
   \   00024F   7C03         MOV       R4,#0x3
   \                     ??zclGeneral_ProcessInGroupsServer_9:
   \   000251   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000254   12....       LCALL     `??zclGeneral_SendGroupResponse::?relay`; Banked call to: zclGeneral_SendGroupResponse
   \   000257   7404         MOV       A,#0x4
   \   000259   12....       LCALL     ?DEALLOC_XSTACK8
   1987                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInGroupsServer_12:
   \   00025C   75..FF       MOV       ?V0,#-0x1
   1988                }
   1989                break;
   \   00025F   8079         SJMP      ??zclGeneral_ProcessInGroupsServer_23
   1990          
   1991              case COMMAND_GROUP_REMOVE_ALL:
   1992                {
   1993                  uint8 numGroups;
   1994                  uint16 groupList[APS_MAX_GROUPS];
   1995          
   1996                  if ( numGroups = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, groupList ) )
   \                     ??zclGeneral_ProcessInGroupsServer_4:
   \   000261                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   000261   7416         MOV       A,#0x16
   \   000263   12....       LCALL     ?XSTACK_DISP101_8
   \   000266   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000269   F5..         MOV       ?V2,A
   \   00026B   606D         JZ        ??zclGeneral_ProcessInGroupsServer_23
   1997                  {
   1998                    for ( i = 0; i < numGroups; i++ )
   \   00026D   75..00       MOV       ?V1,#0x0
   1999                    {
   2000          #if defined ( ZCL_SCENES )
   2001                      zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, groupList[i] );
   \                     ??zclGeneral_ProcessInGroupsServer_24:
   \   000270                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   000270   A8..         MOV       R0,?V1
   \   000272   E8           MOV       A,R0
   \   000273   28           ADD       A,R0
   \   000274   F8           MOV       R0,A
   \   000275   E4           CLR       A
   \   000276   33           RLC       A
   \   000277   F9           MOV       R1,A
   \   000278   7416         MOV       A,#0x16
   \   00027A   12....       LCALL     ?XSTACK_DISP0_8
   \   00027D   E582         MOV       A,DPL
   \   00027F   28           ADD       A,R0
   \   000280   F582         MOV       DPL,A
   \   000282   E583         MOV       A,DPH
   \   000284   39           ADDC      A,R1
   \   000285   F583         MOV       DPH,A
   \   000287   12....       LCALL     ?Subroutine14 & 0xFFFF
   2002          #endif
   2003                    }
   \                     ??CrossCallReturnLabel_283:
   \   00028A   05..         INC       ?V1
   \   00028C   E5..         MOV       A,?V1
   \   00028E   C3           CLR       C
   \   00028F   95..         SUBB      A,?V2
   \   000291   40DD         JC        ??zclGeneral_ProcessInGroupsServer_24
   2004          
   2005                    aps_RemoveAllGroup( pInMsg->msg->endPoint );
   \   000293                ; Setup parameters for call to function aps_RemoveAllGroup
   \   000293   12....       LCALL     ?Subroutine25 & 0xFFFF
   2006                  }
   2007                }
   \                     ??CrossCallReturnLabel_221:
   \   000296   12....       LCALL     `??aps_RemoveAllGroup::?relay`; Banked call to: aps_RemoveAllGroup
   \   000299   803F         SJMP      ??zclGeneral_ProcessInGroupsServer_23
   2008                break;
   2009          
   2010              case COMMAND_GROUP_ADD_IF_IDENTIFYING:
   2011                // Retrieve Identify Time
   2012                zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2013                                  ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
   \                     ??zclGeneral_ProcessInGroupsServer_5:
   \   00029B                ; Setup parameters for call to function zcl_ReadAttrData
   \   00029B   E4           CLR       A
   \   00029C   F5..         MOV       ?V6,A
   \   00029E   F5..         MOV       ?V7,A
   \   0002A0   78..         MOV       R0,#?V6
   \   0002A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002A5   7404         MOV       A,#0x4
   \   0002A7   12....       LCALL     ?XSTACK_DISP100_8
   \   0002AA   88..         MOV       ?V6,R0
   \   0002AC   89..         MOV       ?V7,R1
   \   0002AE   78..         MOV       R0,#?V6
   \   0002B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002B3   7C00         MOV       R4,#0x0
   \   0002B5   7D00         MOV       R5,#0x0
   \   0002B7   7A03         MOV       R2,#0x3
   \   0002B9   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0002BC   12....       LCALL     ?DEALLOC_XSTACK8
   2014          
   2015                // Is device identifying itself?
   2016                if ( identifyTime > 0 )
   \   0002BF   7402         MOV       A,#0x2
   \   0002C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C4   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   0002C7   6011         JZ        ??zclGeneral_ProcessInGroupsServer_23
   2017                {
   2018                  zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
   \   0002C9                ; Setup parameters for call to function zclGeneral_AddGroup
   \   0002C9   AC..         MOV       R4,?V2
   \   0002CB   AD..         MOV       R5,?V3
   \   0002CD   7404         MOV       A,#0x4
   \   0002CF   12....       LCALL     ?XSTACK_DISP101_8
   \   0002D2   12....       LCALL     ?Subroutine22 & 0xFFFF
   2019                }
   \                     ??CrossCallReturnLabel_31:
   \   0002D5   8003         SJMP      ??zclGeneral_ProcessInGroupsServer_23
   2020                break;
   2021          
   2022              default:
   2023                stat = ZFailure;
   \                     ??zclGeneral_ProcessInGroupsServer_6:
   \   0002D7   75..01       MOV       ?V0,#0x1
   2024                break;
   2025            }
   2026          
   2027            return ( stat );
   \                     ??zclGeneral_ProcessInGroupsServer_23:
   \   0002DA   A9..         MOV       R1,?V0
   \   0002DC   7436         MOV       A,#0x36
   \   0002DE   02....       LJMP      ?Subroutine3 & 0xFFFF
   2028          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   F5..         MOV       ?V2,A
   \   000005   78..         MOV       R0,#?V2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine99_0
   \   000004                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000003   12....       LCALL     `??aps_FindAllGroupsForEndpoint::?relay`; Banked call to: aps_FindAllGroupsForEndpoint
   \   000006   E9           MOV       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000003   12....       LCALL     `??zclGeneral_AddGroup::?relay`; Banked call to: zclGeneral_AddGroup
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   F5..         MOV       ?V0,A
   \   000005   78..         MOV       R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000003                ; Setup parameters for call to function zclGeneral_SendGroupViewResponse
   \   000003                ; Setup parameters for call to function zclGeneral_SendGroupGetMembershipRequest
   \   000003                ; Setup parameters for call to function zclGeneral_SendGroupResponse
   \   000003                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000003                ; Setup parameters for call to function zclGeneral_SendGroupResponse
   \   000003   85..82       MOV       DPL,?V8
   \   000006   85..83       MOV       DPH,?V9
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine100_0
   \   000004                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine105_0
   \   000003                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000005   12....       LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   000008   7404         MOV       A,#0x4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005                REQUIRE ??Subroutine108_0
   \   000005                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine109_0
   \   000004                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003   FB           MOV       R3,A
   \   000004                REQUIRE ??Subroutine110_0
   \   000004                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000003   12....       LCALL     `??zclGeneral_RemoveAllScenes::?relay`; Banked call to: zclGeneral_RemoveAllScenes
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   12....       LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000006   EA           MOV       A,R2
   \   000007   4B           ORL       A,R3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET
   2029          
   2030          /*********************************************************************
   2031           * @fn      zclGeneral_ProcessInGroupsClient
   2032           *
   2033           * @brief   Process in the received Groups Command.
   2034           *
   2035           * @param   pInMsg - pointer to the incoming message
   2036           *
   2037           * @return  ZStatus_t
   2038           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2039          static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInGroupsClient:
   2040                                                             zclGeneral_AppCallbacks_t *pCBs )
   2041          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV       A,#-0x1c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   2042            aps_Group_t group;
   2043            uint8 *pData = pInMsg->pData;
   \   000012   12....       LCALL     ?Subroutine38 & 0xFFFF
   2044            uint8 grpCnt;
   2045            uint8 nameLen;
   2046            zclGroupRsp_t rsp;
   2047            uint8 i;
   2048            ZStatus_t stat = ZSuccess;
   \                     ??CrossCallReturnLabel_277:
   \   000015   75..00       MOV       ?V11,#0x0
   2049          
   2050            zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
   \   000018                ; Setup parameters for call to function osal_memset
   \   000018   7C12         MOV       R4,#0x12
   \   00001A   7D00         MOV       R5,#0x0
   \   00001C   7900         MOV       R1,#0x0
   \   00001E   740A         MOV       A,#0xa
   \   000020   12....       LCALL     ?XSTACK_DISP101_8
   \   000023   12....       LCALL     ?Subroutine69 & 0xFFFF
   2051            zcl_memset( (uint8*)&rsp, 0, sizeof( zclGroupRsp_t ) );
   2052          
   2053            switch ( pInMsg->hdr.commandID )
   \                     ??CrossCallReturnLabel_123:
   \   000026   EE           MOV       A,R6
   \   000027   2402         ADD       A,#0x2
   \   000029   FA           MOV       R2,A
   \   00002A   E4           CLR       A
   \   00002B   3F           ADDC      A,R7
   \   00002C   FB           MOV       R3,A
   \   00002D   E5..         MOV       A,?V0
   \   00002F   240C         ADD       A,#0xc
   \   000031   F5..         MOV       ?V0,A
   \   000033   5002         JNC       ??zclGeneral_ProcessInGroupsClient_0
   \   000035   05..         INC       ?V1
   \                     ??zclGeneral_ProcessInGroupsClient_0:
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   A3           INC       DPTR
   \   00003C   A882         MOV       R0,DPL
   \   00003E   A983         MOV       R1,DPH
   \   000040   E5..         MOV       A,?V6
   \   000042   2407         ADD       A,#0x7
   \   000044   F5..         MOV       ?V2,A
   \   000046   E4           CLR       A
   \   000047   35..         ADDC      A,?V7
   \   000049   F5..         MOV       ?V3,A
   \   00004B   85..82       MOV       DPL,?V2
   \   00004E   F583         MOV       DPH,A
   \   000050   E0           MOVX      A,@DPTR
   \   000051   600F         JZ        ??zclGeneral_ProcessInGroupsClient_1
   \   000053   14           DEC       A
   \   000054   600C         JZ        ??zclGeneral_ProcessInGroupsClient_1
   \   000056   14           DEC       A
   \   000057   7003         JNZ       $+5
   \   000059   02....       LJMP      ??zclGeneral_ProcessInGroupsClient_2 & 0xFFFF
   \   00005C   14           DEC       A
   \   00005D   6003         JZ        $+5
   \   00005F   02....       LJMP      ??zclGeneral_ProcessInGroupsClient_3 & 0xFFFF
   2054            {
   2055              case COMMAND_GROUP_ADD_RSP:
   2056              case COMMAND_GROUP_VIEW_RSP:
   2057              case COMMAND_GROUP_REMOVE_RSP:
   2058                rsp.status = *pData++;
   \                     ??zclGeneral_ProcessInGroupsClient_1:
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   E0           MOVX      A,@DPTR
   \   000067   FC           MOV       R4,A
   \   000068   7403         MOV       A,#0x3
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   EC           MOV       A,R4
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   E9           MOV       A,R1
   \   000070   FF           MOV       R7,A
   2059                group.ID = BUILD_UINT16( pData[0], pData[1] );
   \   000071   8882         MOV       DPL,R0
   \   000073   F583         MOV       DPH,A
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F5..         MOV       ?V4,A
   \   000078   8A82         MOV       DPL,R2
   \   00007A   8B83         MOV       DPH,R3
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F9           MOV       R1,A
   \   00007E   740A         MOV       A,#0xa
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   E5..         MOV       A,?V4
   \   000085   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   2060          
   2061                if ( rsp.status == ZCL_STATUS_SUCCESS && pInMsg->hdr.commandID == COMMAND_GROUP_VIEW_RSP )
   \                     ??CrossCallReturnLabel_263:
   \   000088   EC           MOV       A,R4
   \   000089   7055         JNZ       ??CrossCallReturnLabel_269
   \   00008B   85..82       MOV       DPL,?V2
   \   00008E   85..83       MOV       DPH,?V3
   \   000091   E0           MOVX      A,@DPTR
   \   000092   6401         XRL       A,#0x1
   \   000094   704A         JNZ       ??CrossCallReturnLabel_269
   2062                {
   2063                  pData += 2;   // Move past ID
   2064                  nameLen = *pData++;
   \   000096   8882         MOV       DPL,R0
   \   000098   8F83         MOV       DPH,R7
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   F9           MOV       R1,A
   \   00009E   E8           MOV       A,R0
   \   00009F   2403         ADD       A,#0x3
   \   0000A1   FE           MOV       R6,A
   \   0000A2   5001         JNC       ??zclGeneral_ProcessInGroupsClient_4
   \   0000A4   0F           INC       R7
   2065                  if ( nameLen > (APS_GROUP_NAME_LEN-1) )
   \                     ??zclGeneral_ProcessInGroupsClient_4:
   \   0000A5   E9           MOV       A,R1
   \   0000A6   C3           CLR       C
   \   0000A7   9410         SUBB      A,#0x10
   \   0000A9   4002         JC        ??zclGeneral_ProcessInGroupsClient_5
   2066                    nameLen = (APS_GROUP_NAME_LEN-1);
   \   0000AB   790F         MOV       R1,#0xf
   2067                  group.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInGroupsClient_5:
   \   0000AD   740C         MOV       A,#0xc
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   E9           MOV       A,R1
   \   0000B3   F0           MOVX      @DPTR,A
   2068                  zcl_memcpy( &(group.name[1]), pData, nameLen );
   \   0000B4                ; Setup parameters for call to function osal_memcpy
   \   0000B4   8E..         MOV       ?V8,R6
   \   0000B6   8F..         MOV       ?V9,R7
   \   0000B8   75..00       MOV       ?V10,#0x0
   \   0000BB   78..         MOV       R0,#?V8
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C0   E9           MOV       A,R1
   \   0000C1   FC           MOV       R4,A
   \   0000C2   7D00         MOV       R5,#0x0
   \   0000C4   7410         MOV       A,#0x10
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
   2069                  rsp.grpName = group.name;
   \   0000CF   740C         MOV       A,#0xc
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D4   A882         MOV       R0,DPL
   \   0000D6   A983         MOV       R1,DPH
   \   0000D8   7408         MOV       A,#0x8
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL     ?Subroutine57 & 0xFFFF
   2070                }
   2071          
   2072                if ( pCBs->pfnGroupRsp )
   \                     ??CrossCallReturnLabel_269:
   \   0000E0   85..82       MOV       DPL,?V0
   \   0000E3   85..83       MOV       DPH,?V1
   \   0000E6   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   0000E9   7003         JNZ       $+5
   \   0000EB   02....       LJMP      ??zclGeneral_ProcessInGroupsClient_6 & 0xFFFF
   2073                {
   2074                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0000EE   12....       LCALL     ?Subroutine17 & 0xFFFF
   2075                  rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_22:
   \   0000F1   C0E0         PUSH      A
   \   0000F3   7402         MOV       A,#0x2
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   D0E0         POP       A
   \   0000FA   F0           MOVX      @DPTR,A
   2076                  rsp.grpCnt = 1;
   \   0000FB   7404         MOV       A,#0x4
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   7401         MOV       A,#0x1
   \   000102   F0           MOVX      @DPTR,A
   2077                  rsp.grpList = &group.ID;
   \   000103   740A         MOV       A,#0xa
   \   000105   12....       LCALL     ?XSTACK_DISP100_8
   \   000108   7405         MOV       A,#0x5
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   12....       LCALL     ?Subroutine57 & 0xFFFF
   2078                  rsp.capacity = 0;
   \                     ??CrossCallReturnLabel_270:
   \   000110   7407         MOV       A,#0x7
   \   000112   12....       LCALL     ?XSTACK_DISP0_8
   \   000115   E4           CLR       A
   \   000116   12....       LCALL     ?Subroutine51 & 0xFFFF
   2079          
   2080                  pCBs->pfnGroupRsp( &rsp );
   2081                }
   \                     ??CrossCallReturnLabel_94:
   \   000119   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   00011C   12....       LCALL     ?CALL_IND
   \   00011F   02....       LJMP      ??zclGeneral_ProcessInGroupsClient_6 & 0xFFFF
   2082                break;
   2083          
   2084              case COMMAND_GROUP_GET_MEMBERSHIP_RSP:
   2085                {
   2086                  uint16 *grpList = NULL;
   \                     ??zclGeneral_ProcessInGroupsClient_2:
   \   000122   75..00       MOV       ?V4,#0x0
   \   000125   75..00       MOV       ?V5,#0x0
   2087                  rsp.capacity = *pData++;
   \   000128   8E82         MOV       DPL,R6
   \   00012A   8F83         MOV       DPH,R7
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   C0E0         PUSH      A
   \   00012F   7407         MOV       A,#0x7
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   D0E0         POP       A
   \   000136   F0           MOVX      @DPTR,A
   2088                  grpCnt = *pData++;
   \   000137   8882         MOV       DPL,R0
   \   000139   8983         MOV       DPH,R1
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   F5..         MOV       ?V8,A
   \   00013E   0E           INC       R6
   \   00013F   0E           INC       R6
   \   000140   EB           MOV       A,R3
   \   000141   FF           MOV       R7,A
   2089          
   2090                  if ( grpCnt > 0 )
   \   000142   E5..         MOV       A,?V8
   \   000144   604A         JZ        ??zclGeneral_ProcessInGroupsClient_7
   2091                  {
   2092                    // Allocate space for the group list
   2093                    grpList = zcl_mem_alloc( sizeof( uint16 ) * grpCnt );
   \   000146                ; Setup parameters for call to function osal_mem_alloc
   \   000146   25E0         ADD       A,0xE0 /* A   */
   \   000148   FA           MOV       R2,A
   \   000149   E4           CLR       A
   \   00014A   33           RLC       A
   \   00014B   FB           MOV       R3,A
   \   00014C   12....       LCALL     ?Subroutine62 & 0xFFFF
   2094                    if ( grpList != NULL )
   \                     ??CrossCallReturnLabel_109:
   \   00014F   603F         JZ        ??zclGeneral_ProcessInGroupsClient_7
   2095                    {
   2096                      rsp.grpCnt = grpCnt;
   \   000151   7404         MOV       A,#0x4
   \   000153   12....       LCALL     ?XSTACK_DISP0_8
   \   000156   E5..         MOV       A,?V8
   \   000158   F0           MOVX      @DPTR,A
   2097                      for ( i = 0; i < grpCnt; i++ )
   \   000159   7A00         MOV       R2,#0x0
   \   00015B   802D         SJMP      ??zclGeneral_ProcessInGroupsClient_8
   2098                      {
   2099                        grpList[i] = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInGroupsClient_9:
   \   00015D   8E82         MOV       DPL,R6
   \   00015F   8F83         MOV       DPH,R7
   \   000161   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000164   F8           MOV       R0,A
   \   000165   E4           CLR       A
   \   000166   C8           XCH       A,R0
   \   000167   F9           MOV       R1,A
   \   000168   EC           MOV       A,R4
   \   000169   28           ADD       A,R0
   \   00016A   E4           CLR       A
   \   00016B   39           ADDC      A,R1
   \   00016C   FD           MOV       R5,A
   \   00016D   EA           MOV       A,R2
   \   00016E   25E0         ADD       A,0xE0 /* A   */
   \   000170   F8           MOV       R0,A
   \   000171   E4           CLR       A
   \   000172   33           RLC       A
   \   000173   F9           MOV       R1,A
   \   000174   E5..         MOV       A,?V4
   \   000176   28           ADD       A,R0
   \   000177   F582         MOV       DPL,A
   \   000179   EB           MOV       A,R3
   \   00017A   39           ADDC      A,R1
   \   00017B   F583         MOV       DPH,A
   \   00017D   EC           MOV       A,R4
   \   00017E   F0           MOVX      @DPTR,A
   \   00017F   A3           INC       DPTR
   \   000180   ED           MOV       A,R5
   \   000181   F0           MOVX      @DPTR,A
   2100                        pData += 2;
   \   000182   EE           MOV       A,R6
   \   000183   2402         ADD       A,#0x2
   \   000185   FE           MOV       R6,A
   \   000186   5001         JNC       ??zclGeneral_ProcessInGroupsClient_10
   \   000188   0F           INC       R7
   2101                      }
   \                     ??zclGeneral_ProcessInGroupsClient_10:
   \   000189   0A           INC       R2
   \                     ??zclGeneral_ProcessInGroupsClient_8:
   \   00018A   EA           MOV       A,R2
   \   00018B   C3           CLR       C
   \   00018C   95..         SUBB      A,?V8
   \   00018E   40CD         JC        ??zclGeneral_ProcessInGroupsClient_9
   2102                    }
   2103                  }
   2104          
   2105                  if ( pCBs->pfnGroupRsp )
   \                     ??zclGeneral_ProcessInGroupsClient_7:
   \   000190   85..82       MOV       DPL,?V0
   \   000193   85..83       MOV       DPH,?V1
   \   000196   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000199   6021         JZ        ??zclGeneral_ProcessInGroupsClient_11
   2106                  {
   2107                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   00019B   12....       LCALL     ?Subroutine17 & 0xFFFF
   2108                    rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_23:
   \   00019E   C0E0         PUSH      A
   \   0001A0   7402         MOV       A,#0x2
   \   0001A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A5   D0E0         POP       A
   \   0001A7   F0           MOVX      @DPTR,A
   2109                    rsp.grpList = grpList;
   \   0001A8   7405         MOV       A,#0x5
   \   0001AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AD   E5..         MOV       A,?V4
   \   0001AF   F0           MOVX      @DPTR,A
   \   0001B0   A3           INC       DPTR
   \   0001B1   E5..         MOV       A,?V5
   \   0001B3   12....       LCALL     ?Subroutine51 & 0xFFFF
   2110          
   2111                    pCBs->pfnGroupRsp( &rsp );
   2112                  }
   \                     ??CrossCallReturnLabel_95:
   \   0001B6   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   0001B9   12....       LCALL     ?CALL_IND
   2113          
   2114                  if ( grpList != NULL )
   \                     ??zclGeneral_ProcessInGroupsClient_11:
   \   0001BC   E5..         MOV       A,?V4
   \   0001BE   45..         ORL       A,?V5
   \   0001C0   600C         JZ        ??zclGeneral_ProcessInGroupsClient_6
   2115                  {
   2116                    zcl_mem_free( grpList );
   \   0001C2                ; Setup parameters for call to function osal_mem_free
   \   0001C2   AA..         MOV       R2,?V4
   \   0001C4   AB..         MOV       R3,?V5
   \   0001C6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001C9   8003         SJMP      ??zclGeneral_ProcessInGroupsClient_6
   2117                  }
   2118                }
   2119                break;
   2120          
   2121              default:
   2122                stat = ZFailure;
   \                     ??zclGeneral_ProcessInGroupsClient_3:
   \   0001CB   75..01       MOV       ?V11,#0x1
   2123                break;
   2124            }
   2125          
   2126            return ( stat );
   \                     ??zclGeneral_ProcessInGroupsClient_6:
   \   0001CE   A9..         MOV       R1,?V11
   \   0001D0   741C         MOV       A,#0x1c
   \   0001D2   02....       LJMP      ?Subroutine3 & 0xFFFF
   2127          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine101_0
   \   000004                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   AA..         MOV       R2,?XSP + 0
   \   000003   AB..         MOV       R3,?XSP + 1
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000009   85..82       MOV       DPL,?V2
   \   00000C   85..83       MOV       DPH,?V3
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C                REQUIRE ??Subroutine107_0
   \   00000C                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000003                ; Setup parameters for call to function osal_memset
   \   000003                ; Setup parameters for call to function osal_memset
   \   000003   7C0A         MOV       R4,#0xa
   \   000005   7D00         MOV       R5,#0x0
   \   000007   7900         MOV       R1,#0x0
   \   000009   AA..         MOV       R2,?XSP + 0
   \   00000B   AB..         MOV       R3,?XSP + 1
   \   00000D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   E8           MOV       A,R0
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   E9           MOV       A,R1
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   22           RET
   2128          #endif // ZCL_GROUPS
   2129          
   2130          #if defined( ZCL_SCENES )
   2131          #if !defined ( ZCL_STANDALONE )
   2132          /*********************************************************************
   2133           * @fn      zclGeneral_AddScene
   2134           *
   2135           * @brief   Add a scene for an endpoint
   2136           *
   2137           * @param   endpoint -
   2138           * @param   scene - new scene item
   2139           *
   2140           * @return  ZStatus_t
   2141           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2142          ZStatus_t zclGeneral_AddScene( uint8 endpoint, zclGeneral_Scene_t *scene )
   \                     zclGeneral_AddScene:
   2143          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   2144            zclGenSceneItem_t *pNewItem;
   2145            zclGenSceneItem_t *pLoop;
   2146          
   2147            // Fill in the new profile list
   2148            pNewItem = zcl_mem_alloc( sizeof( zclGenSceneItem_t ) );
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A3A         MOV       R2,#0x3a
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000012   8A..         MOV       ?V4,R2
   \   000014   8B..         MOV       ?V5,R3
   \   000016   AE..         MOV       R6,?V4
   \   000018   AF..         MOV       R7,?V5
   2149            if ( pNewItem == NULL )
   \   00001A   EA           MOV       A,R2
   \   00001B   4F           ORL       A,R7
   \   00001C   7004         JNZ       ??zclGeneral_AddScene_0
   2150              return ( ZMemError );
   \   00001E   7910         MOV       R1,#0x10
   \   000020   803F         SJMP      ??zclGeneral_AddScene_1
   2151          
   2152            // Fill in the plugin record.
   2153            pNewItem->next = (zclGenSceneItem_t *)NULL;
   \                     ??zclGeneral_AddScene_0:
   \   000022   12....       LCALL     ?Subroutine54 & 0xFFFF
   2154            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_99:
   \   000025   12....       LCALL     ?Subroutine50 & 0xFFFF
   2155            zcl_memcpy( (uint8*)&(pNewItem->scene), (uint8*)scene, sizeof ( zclGeneral_Scene_t ));
   \                     ??CrossCallReturnLabel_92:
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00002B   7C37         MOV       R4,#0x37
   \   00002D   7D00         MOV       R5,#0x0
   \   00002F   EA           MOV       A,R2
   \   000030   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000033   12....       LCALL     ?DEALLOC_XSTACK8
   2156          
   2157            // Find spot in list
   2158            if (  zclGenSceneTable == NULL )
   \   000036   90....       MOV       DPTR,#zclGenSceneTable
   \   000039   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   00003C   90....       MOV       DPTR,#zclGenSceneTable
   \   00003F   6016         JZ        ??zclGeneral_AddScene_2
   2159            {
   2160              zclGenSceneTable = pNewItem;
   2161            }
   2162            else
   2163            {
   2164              // Look for end of list
   2165              pLoop = zclGenSceneTable;
   \   000041   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000044   8003         SJMP      ??zclGeneral_AddScene_3
   2166              while ( pLoop->next != NULL )
   2167                pLoop = pLoop->next;
   \                     ??zclGeneral_AddScene_4:
   \   000046   E8           MOV       A,R0
   \   000047   FA           MOV       R2,A
   \   000048   E9           MOV       A,R1
   \                     ??zclGeneral_AddScene_3:
   \   000049   FB           MOV       R3,A
   \   00004A   8A82         MOV       DPL,R2
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000051   70F3         JNZ       ??zclGeneral_AddScene_4
   2168          
   2169              // Put new item at end of list
   2170              pLoop->next = pNewItem;
   \   000053   8A82         MOV       DPL,R2
   \   000055   8B83         MOV       DPH,R3
   \                     ??zclGeneral_AddScene_2:
   \   000057   EE           MOV       A,R6
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   EF           MOV       A,R7
   \   00005B   F0           MOVX      @DPTR,A
   2171            }
   2172          
   2173            // Update NV
   2174            zclGeneral_ScenesWriteNV();
   \   00005C                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   00005C   12....       LCALL     `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   2175          
   2176            return ( ZSuccess );
   \   00005F   7900         MOV       R1,#0x0
   \                     ??zclGeneral_AddScene_1:
   \   000061   02....       LJMP      ?Subroutine6 & 0xFFFF
   2177          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E5..         MOV       A,?V2
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   85....       MOV       ?V4,?V0
   \   000006   85....       MOV       ?V5,?V1
   \   000009   75..00       MOV       ?V6,#0x0
   \   00000C   78..         MOV       R0,#?V4
   \   00000E   22           RET
   2178          #endif // ZCL_STANDALONE
   2179          
   2180          #if !defined ( ZCL_STANDALONE )
   2181          /*********************************************************************
   2182           * @fn      zclGeneral_FindScene
   2183           *
   2184           * @brief   Find a scene with endpoint and sceneID
   2185           *
   2186           * @param   endpoint -
   2187           * @param   groupID - what group the scene belongs to
   2188           * @param   sceneID - ID to look for scene
   2189           *
   2190           * @return  a pointer to the scene information, NULL if not found
   2191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2192          zclGeneral_Scene_t *zclGeneral_FindScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
   \                     zclGeneral_FindScene:
   2193          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FD           MOV       R5,A
   2194            zclGenSceneItem_t *pLoop;
   2195          
   2196            // Look for end of list
   2197            pLoop = zclGenSceneTable;
   \   000007   90....       MOV       DPTR,#zclGenSceneTable
   \   00000A   8004         SJMP      ??zclGeneral_FindScene_0
   2198            while ( pLoop )
   2199            {
   2200              if ( (pLoop->endpoint == endpoint || endpoint == 0xFF)
   2201                  && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
   2202              {
   2203                return ( &(pLoop->scene) );
   2204              }
   2205              pLoop = pLoop->next;
   \                     ??zclGeneral_FindScene_1:
   \   00000C   8E82         MOV       DPL,R6
   \   00000E   8F83         MOV       DPH,R7
   \                     ??zclGeneral_FindScene_0:
   \   000010   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000013   EE           MOV       A,R6
   \   000014   4F           ORL       A,R7
   \   000015   602E         JZ        ??zclGeneral_FindScene_2
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   6D           XRL       A,R5
   \   00001F   6005         JZ        ??zclGeneral_FindScene_3
   \   000021   74FF         MOV       A,#-0x1
   \   000023   6D           XRL       A,R5
   \   000024   70E6         JNZ       ??zclGeneral_FindScene_1
   \                     ??zclGeneral_FindScene_3:
   \   000026   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6A           XRL       A,R2
   \   00002B   7003         JNZ       ??zclGeneral_FindScene_4
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6B           XRL       A,R3
   \                     ??zclGeneral_FindScene_4:
   \   000030   70DA         JNZ       ??zclGeneral_FindScene_1
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6C           XRL       A,R4
   \   00003D   70CD         JNZ       ??zclGeneral_FindScene_1
   \   00003F   E8           MOV       A,R0
   \   000040   FA           MOV       R2,A
   \   000041   E9           MOV       A,R1
   \   000042   FB           MOV       R3,A
   \   000043   8004         SJMP      ??zclGeneral_FindScene_5
   2206            }
   2207          
   2208            return ( (zclGeneral_Scene_t *)NULL );
   \                     ??zclGeneral_FindScene_2:
   \   000045   7A00         MOV       R2,#0x0
   \   000047   7B00         MOV       R3,#0x0
   \                     ??zclGeneral_FindScene_5:
   \   000049                REQUIRE ?Subroutine7
   \   000049                ; // Fall through to label ?Subroutine7
   2209          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2210          #endif // ZCL_STANDALONE
   2211          
   2212          #if !defined ( ZCL_STANDALONE )
   2213          /*********************************************************************
   2214           * @fn      zclGeneral_FindAllScenesForGroup
   2215           *
   2216           * @brief   Find all the scenes with groupID
   2217           *
   2218           * @param   endpoint - endpoint to look for
   2219           * @param   sceneList - List to hold scene IDs (should hold APS_MAX_SCENES entries)
   2220           *
   2221           * @return  number of scenes copied to sceneList
   2222           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2223          uint8 zclGeneral_FindAllScenesForGroup( uint8 endpoint, uint16 groupID, uint8 *sceneList )
   \                     zclGeneral_FindAllScenesForGroup:
   2224          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   2225            zclGenSceneItem_t *pLoop;
   2226            uint8 cnt = 0;
   \   000007   7E00         MOV       R6,#0x0
   2227          
   2228            // Look for end of list
   2229            pLoop = zclGenSceneTable;
   \   000009   90....       MOV       DPTR,#zclGenSceneTable
   \   00000C   8036         SJMP      ??zclGeneral_FindAllScenesForGroup_0
   2230            while ( pLoop )
   2231            {
   2232              if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
   \                     ??zclGeneral_FindAllScenesForGroup_1:
   \   00000E   8882         MOV       DPL,R0
   \   000010   8983         MOV       DPH,R1
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   6F           XRL       A,R7
   \   000016   7028         JNZ       ??zclGeneral_FindAllScenesForGroup_2
   \   000018   8882         MOV       DPL,R0
   \   00001A   8983         MOV       DPH,R1
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6A           XRL       A,R2
   \   000021   7003         JNZ       ??zclGeneral_FindAllScenesForGroup_3
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6B           XRL       A,R3
   \                     ??zclGeneral_FindAllScenesForGroup_3:
   \   000026   7018         JNZ       ??zclGeneral_FindAllScenesForGroup_2
   2233                sceneList[cnt++] = pLoop->scene.ID;
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   C0E0         PUSH      A
   \   000034   EC           MOV       A,R4
   \   000035   2E           ADD       A,R6
   \   000036   F582         MOV       DPL,A
   \   000038   E4           CLR       A
   \   000039   3D           ADDC      A,R5
   \   00003A   F583         MOV       DPH,A
   \   00003C   D0E0         POP       A
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   0E           INC       R6
   2234              pLoop = pLoop->next;
   \                     ??zclGeneral_FindAllScenesForGroup_2:
   \   000040   8882         MOV       DPL,R0
   \   000042   8983         MOV       DPH,R1
   2235            }
   \                     ??zclGeneral_FindAllScenesForGroup_0:
   \   000044   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000047   70C5         JNZ       ??zclGeneral_FindAllScenesForGroup_1
   2236            return ( cnt );
   \   000049   EE           MOV       A,R6
   \   00004A   F9           MOV       R1,A
   \   00004B   02....       LJMP      ??Subroutine98_0 & 0xFFFF
   2237          }
   2238          #endif // ZCL_STANDALONE
   2239          
   2240          #if !defined ( ZCL_STANDALONE )
   2241          /*********************************************************************
   2242           * @fn      zclGeneral_RemoveScene
   2243           *
   2244           * @brief   Remove a scene with endpoint and sceneID
   2245           *
   2246           * @param   endpoint -
   2247           * @param   groupID - what group the scene belongs to
   2248           * @param   sceneID - ID to look for scene
   2249           *
   2250           * @return  TRUE if removed, FALSE if not found
   2251           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2252          uint8 zclGeneral_RemoveScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
   \                     zclGeneral_RemoveScene:
   2253          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EC           MOV       A,R4
   \   000008   FF           MOV       R7,A
   2254            zclGenSceneItem_t *pLoop;
   2255            zclGenSceneItem_t *pPrev;
   2256          
   2257            // Look for end of list
   2258            pLoop = zclGenSceneTable;
   \   000009   90....       MOV       DPTR,#zclGenSceneTable
   \   00000C   12....       LCALL     ?Subroutine43 & 0xFFFF
   2259            pPrev = NULL;
   \                     ??CrossCallReturnLabel_80:
   \   00000F   7C00         MOV       R4,#0x0
   \   000011   7D00         MOV       R5,#0x0
   \   000013   800B         SJMP      ??CrossCallReturnLabel_81
   2260            while ( pLoop )
   2261            {
   2262              if ( pLoop->endpoint == endpoint
   2263                  && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
   2264              {
   2265                if ( pPrev == NULL )
   2266                  zclGenSceneTable = pLoop->next;
   2267                else
   2268                  pPrev->next = pLoop->next;
   2269          
   2270                // Free the memory
   2271                zcl_mem_free( pLoop );
   2272          
   2273                // Update NV
   2274                zclGeneral_ScenesWriteNV();
   2275          
   2276                return ( TRUE );
   2277              }
   2278              pPrev = pLoop;
   \                     ??zclGeneral_RemoveScene_0:
   \   000015   E8           MOV       A,R0
   \   000016   FC           MOV       R4,A
   \   000017   E9           MOV       A,R1
   \   000018   FD           MOV       R5,A
   2279              pLoop = pLoop->next;
   \   000019   8882         MOV       DPL,R0
   \   00001B   8983         MOV       DPH,R1
   \   00001D   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000020   E8           MOV       A,R0
   \   000021   49           ORL       A,R1
   \   000022   604C         JZ        ??zclGeneral_RemoveScene_1
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6E           XRL       A,R6
   \   00002C   70E7         JNZ       ??zclGeneral_RemoveScene_0
   \   00002E   8882         MOV       DPL,R0
   \   000030   8983         MOV       DPH,R1
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   6A           XRL       A,R2
   \   000037   7003         JNZ       ??zclGeneral_RemoveScene_2
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   6B           XRL       A,R3
   \                     ??zclGeneral_RemoveScene_2:
   \   00003C   70D7         JNZ       ??zclGeneral_RemoveScene_0
   \   00003E   8882         MOV       DPL,R0
   \   000040   8983         MOV       DPH,R1
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6F           XRL       A,R7
   \   000049   70CA         JNZ       ??zclGeneral_RemoveScene_0
   \   00004B   8882         MOV       DPL,R0
   \   00004D   8983         MOV       DPH,R1
   \   00004F   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000052   EC           MOV       A,R4
   \   000053   4D           ORL       A,R5
   \   000054   7005         JNZ       ??zclGeneral_RemoveScene_3
   \   000056   90....       MOV       DPTR,#zclGenSceneTable
   \   000059   8004         SJMP      ??zclGeneral_RemoveScene_4
   \                     ??zclGeneral_RemoveScene_3:
   \   00005B   8C82         MOV       DPL,R4
   \   00005D   8D83         MOV       DPH,R5
   \                     ??zclGeneral_RemoveScene_4:
   \   00005F   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000062                ; Setup parameters for call to function osal_mem_free
   \   000062   E8           MOV       A,R0
   \   000063   FA           MOV       R2,A
   \   000064   E9           MOV       A,R1
   \   000065   FB           MOV       R3,A
   \   000066   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000069                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000069   12....       LCALL     `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   \   00006C   7901         MOV       R1,#0x1
   \   00006E   8002         SJMP      ??zclGeneral_RemoveScene_5
   2280            }
   2281          
   2282            return ( FALSE );
   \                     ??zclGeneral_RemoveScene_1:
   \   000070   7900         MOV       R1,#0x0
   \                     ??zclGeneral_RemoveScene_5:
   \   000072   02....       LJMP      ?Subroutine7 & 0xFFFF
   2283          }
   2284          #endif // ZCL_STANDALONE
   2285          
   2286          #if !defined ( ZCL_STANDALONE )
   2287          /*********************************************************************
   2288           * @fn      zclGeneral_RemoveAllScenes
   2289           *
   2290           * @brief   Remove all scenes with endpoint and group Id
   2291           *
   2292           * @param   endpoint -
   2293           * @param   groupID - ID to look for group
   2294           *
   2295           * @return  none
   2296           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2297          void zclGeneral_RemoveAllScenes( uint8 endpoint, uint16 groupID )
   \                     zclGeneral_RemoveAllScenes:
   2298          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   2299            zclGenSceneItem_t *pLoop;
   2300            zclGenSceneItem_t *pPrev;
   2301            zclGenSceneItem_t *pNext;
   2302          
   2303            // Look for end of list
   2304            pLoop = zclGenSceneTable;
   \   00000B   90....       MOV       DPTR,#zclGenSceneTable
   \   00000E   12....       LCALL     ?Subroutine33 & 0xFFFF
   2305            pPrev = NULL;
   \                     ??CrossCallReturnLabel_54:
   \   000011   7E00         MOV       R6,#0x0
   \   000013   7F00         MOV       R7,#0x0
   \   000015   8019         SJMP      ??zclGeneral_RemoveAllScenes_0
   2306            while ( pLoop )
   2307            {
   2308              if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
   2309              {
   2310                if ( pPrev == NULL )
   2311                  zclGenSceneTable = pLoop->next;
   2312                else
   2313                  pPrev->next = pLoop->next;
   \                     ??zclGeneral_RemoveAllScenes_1:
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \                     ??zclGeneral_RemoveAllScenes_2:
   \   00001B   12....       LCALL     ?Subroutine57 & 0xFFFF
   2314                pNext = pLoop->next;
   \                     ??CrossCallReturnLabel_271:
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V2,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F5..         MOV       ?V3,A
   2315          
   2316                // Free the memory
   2317                zcl_mem_free( pLoop );
   \   000029                ; Setup parameters for call to function osal_mem_free
   \   000029   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2318                pLoop = pNext;
   \   00002C   AA..         MOV       R2,?V2
   \   00002E   AB..         MOV       R3,?V3
   \                     ??zclGeneral_RemoveAllScenes_0:
   \   000030   EA           MOV       A,R2
   \   000031   4B           ORL       A,R3
   \   000032   603A         JZ        ??zclGeneral_RemoveAllScenes_3
   \   000034   8A82         MOV       DPL,R2
   \   000036   8B83         MOV       DPH,R3
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   65..         XRL       A,?V4
   \   00003D   7022         JNZ       ??zclGeneral_RemoveAllScenes_4
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   65..         XRL       A,?V0
   \   000049   7004         JNZ       ??zclGeneral_RemoveAllScenes_5
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   65..         XRL       A,?V1
   \                     ??zclGeneral_RemoveAllScenes_5:
   \   00004F   7010         JNZ       ??zclGeneral_RemoveAllScenes_4
   \   000051   8A82         MOV       DPL,R2
   \   000053   8B83         MOV       DPH,R3
   \   000055   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000058   EE           MOV       A,R6
   \   000059   4F           ORL       A,R7
   \   00005A   70BB         JNZ       ??zclGeneral_RemoveAllScenes_1
   \   00005C   90....       MOV       DPTR,#zclGenSceneTable
   \   00005F   80BA         SJMP      ??zclGeneral_RemoveAllScenes_2
   2319              }
   2320              else
   2321              {
   2322                pPrev = pLoop;
   \                     ??zclGeneral_RemoveAllScenes_4:
   \   000061   EA           MOV       A,R2
   \   000062   FE           MOV       R6,A
   \   000063   EB           MOV       A,R3
   \   000064   FF           MOV       R7,A
   2323                pLoop = pLoop->next;
   \   000065   8A82         MOV       DPL,R2
   \   000067   8B83         MOV       DPH,R3
   \   000069   12....       LCALL     ?Subroutine33 & 0xFFFF
   2324              }
   2325            }
   \                     ??CrossCallReturnLabel_55:
   \   00006C   80C2         SJMP      ??zclGeneral_RemoveAllScenes_0
   2326          
   2327            // Update NV
   2328            zclGeneral_ScenesWriteNV();
   \                     ??zclGeneral_RemoveAllScenes_3:
   \   00006E                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   00006E   12....       LCALL     `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   2329          }
   \   000071   7F05         MOV       R7,#0x5
   \   000073   02....       LJMP      ?BANKED_LEAVE_XDATA
   2330          #endif // ZCL_STANDALONE
   2331          
   2332          #if !defined ( ZCL_STANDALONE )
   2333          /*********************************************************************
   2334           * @fn      zclGeneral_CountScenes
   2335           *
   2336           * @brief   Count the number of scenes for an endpoint
   2337           *
   2338           * @param   endpoint -
   2339           *
   2340           * @return  number of scenes assigned to an endpoint
   2341           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2342          uint8 zclGeneral_CountScenes( uint8 endpoint )
   \                     zclGeneral_CountScenes:
   2343          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
   2344            zclGenSceneItem_t *pLoop;
   2345            uint8 cnt = 0;
   \   000006   7900         MOV       R1,#0x0
   2346          
   2347            // Look for end of list
   2348            pLoop = zclGenSceneTable;
   \   000008   90....       MOV       DPTR,#zclGenSceneTable
   \   00000B   800F         SJMP      ??zclGeneral_CountScenes_0
   2349            while ( pLoop )
   2350            {
   2351              if ( pLoop->endpoint == endpoint  )
   \                     ??zclGeneral_CountScenes_1:
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   8B83         MOV       DPH,R3
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   68           XRL       A,R0
   \   000015   7001         JNZ       ??zclGeneral_CountScenes_2
   2352                cnt++;
   \   000017   09           INC       R1
   2353              pLoop = pLoop->next;
   \                     ??zclGeneral_CountScenes_2:
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   2354            }
   \                     ??zclGeneral_CountScenes_0:
   \   00001C   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00001F   70EC         JNZ       ??zclGeneral_CountScenes_1
   2355            return ( cnt );
   \   000021   80..         SJMP      ?Subroutine5
   2356          }
   2357          #endif
   2358          
   2359          #if !defined ( ZCL_STANDALONE )
   2360          /*********************************************************************
   2361           * @fn      zclGeneral_CountAllScenes
   2362           *
   2363           * @brief   Count the total number of scenes
   2364           *
   2365           * @param   none
   2366           *
   2367           * @return  number of scenes
   2368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2369          uint8 zclGeneral_CountAllScenes( void )
   \                     zclGeneral_CountAllScenes:
   2370          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2371            zclGenSceneItem_t *pLoop;
   2372            uint8 cnt = 0;
   \   000004   7900         MOV       R1,#0x0
   2373          
   2374            // Look for end of list
   2375            pLoop = zclGenSceneTable;
   \   000006   90....       MOV       DPTR,#zclGenSceneTable
   \   000009   8001         SJMP      ??zclGeneral_CountAllScenes_0
   2376            while ( pLoop )
   2377            {
   2378              cnt++;
   \                     ??zclGeneral_CountAllScenes_1:
   \   00000B   09           INC       R1
   2379              pLoop = pLoop->next;
   2380            }
   \                     ??zclGeneral_CountAllScenes_0:
   \   00000C   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00000F   E582         MOV       A,DPL
   \   000011   4583         ORL       A,DPH
   \   000013   70F6         JNZ       ??zclGeneral_CountAllScenes_1
   2381            return ( cnt );
   \   000015                REQUIRE ?Subroutine5
   \   000015                ; // Fall through to label ?Subroutine5
   2382          }
   2383          #endif // ZCL_STANDALONE
   2384          
   2385          /*********************************************************************
   2386           * @fn      zclGeneral_ReadSceneCountCB
   2387           *
   2388           * @brief   Read the number of scenes currently in the device's
   2389           *          scene table (i.e., the Scene Count attribute).
   2390           *
   2391           *          Note: This function gets called only when the pointer
   2392           *                'dataPtr' to the Scene Count attribute value is
   2393           *                NULL in the attribute database registered with
   2394           *                the ZCL.
   2395           *
   2396           * @param   clusterId - cluster that attribute belongs to
   2397           * @param   attrId - attribute to be read or written
   2398           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
   2399           * @param   pValue - pointer to attribute value
   2400           * @param   pLen - pointer to length of attribute value read
   2401           *
   2402           * @return  status
   2403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2404          ZStatus_t zclGeneral_ReadSceneCountCB( uint16 clusterId, uint16 attrId,
   \                     zclGeneral_ReadSceneCountCB:
   2405                                                 uint8 oper, uint8 *pValue, uint16 *pLen )
   2406          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
   2407            ZStatus_t status = ZCL_STATUS_SUCCESS;
   \   000007   75..00       MOV       ?V0,#0x0
   \   00000A   740C         MOV       A,#0xc
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ??Subroutine96_0 & 0xFFFF
   2408          
   2409            // This callback function should only be called for the Scene Count attribute
   2410            switch ( oper )
   \                     ??CrossCallReturnLabel_216:
   \   000012   E5..         MOV       A,?V1
   \   000014   6014         JZ        ??zclGeneral_ReadSceneCountCB_0
   \   000016   14           DEC       A
   \   000017   701D         JNZ       ??zclGeneral_ReadSceneCountCB_1
   2411            {
   2412              case ZCL_OPER_LEN:
   2413                *pLen = 1; // uint8
   2414                break;
   2415          
   2416              case ZCL_OPER_READ:
   2417                *pValue = zclGeneral_CountAllScenes();
   \   000019                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   000019   12....       LCALL     `??zclGeneral_CountAllScenes::?relay`; Banked call to: zclGeneral_CountAllScenes
   \   00001C   740A         MOV       A,#0xa
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000024   E9           MOV       A,R1
   \   000025   F0           MOVX      @DPTR,A
   2418          
   2419                if ( pLen != NULL )
   \   000026   EE           MOV       A,R6
   \   000027   4F           ORL       A,R7
   \   000028   600F         JZ        ??zclGeneral_ReadSceneCountCB_2
   2420                {
   2421                  *pLen = 1;
   \                     ??zclGeneral_ReadSceneCountCB_0:
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   7401         MOV       A,#0x1
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
   \   000034   8003         SJMP      ??zclGeneral_ReadSceneCountCB_2
   2422                }
   2423                break;
   2424          
   2425              case ZCL_OPER_WRITE:
   2426                // Fall through
   2427          
   2428              default:
   2429                status = ZCL_STATUS_SOFTWARE_FAILURE; // should never get here!
   \                     ??zclGeneral_ReadSceneCountCB_1:
   \   000036   75..C1       MOV       ?V0,#-0x3f
   2430                break;
   2431            }
   2432          
   2433            return ( status );
   \                     ??zclGeneral_ReadSceneCountCB_2:
   \   000039   A9..         MOV       R1,?V0
   \   00003B   02....       LJMP      ??Subroutine98_0 & 0xFFFF
   2434          }
   2435          
   2436          /*********************************************************************
   2437           * @fn      zclGeneral_ProcessInScenesServer
   2438           *
   2439           * @brief   Process in the received Scenes Command.
   2440           *
   2441           * @param   pInMsg - pointer to the incoming message
   2442           *
   2443           * @return  ZStatus_t
   2444           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV       DPL,?V12
   \   000003   85..83       MOV       DPH,?V13
   \   000006                REQUIRE ??Subroutine89_0
   \   000006                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine102_0
   \   000004                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine103_0
   \   000002                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2445          static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInScenesServer:
   2446                                                             zclGeneral_AppCallbacks_t *pCBs )
   2447          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 60
   \   000005   74C4         MOV       A,#-0x3c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
   2448            zclGeneral_Scene_t scene;
   2449            zclGeneral_Scene_t *pScene;
   2450            uint8 *pData = pInMsg->pData;
   \   000012   EA           MOV       A,R2
   \   000013   2408         ADD       A,#0x8
   \   000015   F5..         MOV       ?V8,A
   \   000017   E4           CLR       A
   \   000018   3F           ADDC      A,R7
   \   000019   F5..         MOV       ?V9,A
   \   00001B   85..82       MOV       DPL,?V8
   \   00001E   F583         MOV       DPH,A
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V0,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V1,A
   2451            uint8 nameLen;
   2452            uint8 status;
   2453            uint8 sceneCnt = 0;
   \   000027   75..00       MOV       ?V5,#0x0
   2454            uint8 *sceneList = NULL;
   \   00002A   75..00       MOV       ?V2,#0x0
   \   00002D   75..00       MOV       ?V3,#0x0
   2455            uint8 sendRsp = TRUE;
   2456            uint8 nameSupport = FALSE;
   \   000030   85..82       MOV       DPL,?XSP + 0
   \   000033   85..83       MOV       DPH,?XSP + 1
   \   000036   E4           CLR       A
   \   000037   F0           MOVX      @DPTR,A
   2457            ZStatus_t stat = ZSuccess;
   \   000038   75..00       MOV       ?V4,#0x0
   2458          
   2459            zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   \   00003B                ; Setup parameters for call to function osal_memset
   \   00003B   7C37         MOV       R4,#0x37
   \   00003D   FD           MOV       R5,A
   \   00003E   F9           MOV       R1,A
   \   00003F   7405         MOV       A,#0x5
   \   000041   12....       LCALL     ?XSTACK_DISP101_8
   \   000044   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2460          
   2461            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   \   000047   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   00004A   7405         MOV       A,#0x5
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   EA           MOV       A,R2
   \   000050   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   2462            pData += 2;   // Move past group ID
   2463            scene.ID = *pData++;
   \                     ??CrossCallReturnLabel_264:
   \   000053   85..82       MOV       DPL,?V0
   \   000056   85..83       MOV       DPH,?V1
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   FC           MOV       R4,A
   \   00005D   7407         MOV       A,#0x7
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   EC           MOV       A,R4
   \   000063   F0           MOVX      @DPTR,A
   \   000064   E5..         MOV       A,?V0
   \   000066   2403         ADD       A,#0x3
   \   000068   F5..         MOV       ?V0,A
   \   00006A   5002         JNC       ??zclGeneral_ProcessInScenesServer_0
   \   00006C   05..         INC       ?V1
   2464          
   2465            switch ( pInMsg->hdr.commandID )
   \                     ??zclGeneral_ProcessInScenesServer_0:
   \   00006E   EE           MOV       A,R6
   \   00006F   2406         ADD       A,#0x6
   \   000071   F5..         MOV       ?V12,A
   \   000073   E4           CLR       A
   \   000074   3F           ADDC      A,R7
   \   000075   F5..         MOV       ?V13,A
   \   000077   EE           MOV       A,R6
   \   000078   2407         ADD       A,#0x7
   \   00007A   F5..         MOV       ?V10,A
   \   00007C   E4           CLR       A
   \   00007D   3F           ADDC      A,R7
   \   00007E   F5..         MOV       ?V11,A
   \   000080   85..82       MOV       DPL,?V10
   \   000083   F583         MOV       DPH,A
   \   000085   E0           MOVX      A,@DPTR
   \   000086   6027         JZ        ??zclGeneral_ProcessInScenesServer_1
   \   000088   14           DEC       A
   \   000089   7003         JNZ       $+5
   \   00008B   02....       LJMP      ??zclGeneral_ProcessInScenesServer_2 & 0xFFFF
   \   00008E   14           DEC       A
   \   00008F   7003         JNZ       $+5
   \   000091   02....       LJMP      ??zclGeneral_ProcessInScenesServer_3 & 0xFFFF
   \   000094   14           DEC       A
   \   000095   7003         JNZ       $+5
   \   000097   02....       LJMP      ??zclGeneral_ProcessInScenesServer_4 & 0xFFFF
   \   00009A   14           DEC       A
   \   00009B   7003         JNZ       $+5
   \   00009D   02....       LJMP      ??zclGeneral_ProcessInScenesServer_5 & 0xFFFF
   \   0000A0   14           DEC       A
   \   0000A1   7003         JNZ       $+5
   \   0000A3   02....       LJMP      ??zclGeneral_ProcessInScenesServer_6 & 0xFFFF
   \   0000A6   14           DEC       A
   \   0000A7   7003         JNZ       $+5
   \   0000A9   02....       LJMP      ??zclGeneral_ProcessInScenesServer_7 & 0xFFFF
   \   0000AC   02....       LJMP      ??zclGeneral_ProcessInScenesServer_8 & 0xFFFF
   2466            {
   2467              case COMMAND_SCENE_ADD:
   2468          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2469              case COMMAND_SCENE_ENHANCED_ADD:
   2470          #endif // ZCL_LIGHT_LINK_ENHANCE
   2471                // Parse the rest of the incoming message
   2472                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInScenesServer_1:
   \   0000AF   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   0000B2   7408         MOV       A,#0x8
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   EA           MOV       A,R2
   \   0000B8   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   2473                pData += 2;
   2474          
   2475                if ( pInMsg->hdr.commandID == COMMAND_SCENE_ENHANCED_ADD )
   \                     ??CrossCallReturnLabel_265:
   \   0000BB   85..82       MOV       DPL,?V10
   \   0000BE   85..83       MOV       DPH,?V11
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   6440         XRL       A,#0x40
   \   0000C4   702D         JNZ       ??CrossCallReturnLabel_272
   2476                {
   2477                  // Received transition time is in 1/10 second
   2478                  scene.transTime100ms = scene.transTime % 10;
   \   0000C6   7408         MOV       A,#0x8
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   F8           MOV       R0,A
   \   0000CD   7A0A         MOV       R2,#0xa
   \   0000CF   7B00         MOV       R3,#0x0
   \   0000D1   12....       LCALL     ?US_DIV_MOD
   \   0000D4   740A         MOV       A,#0xa
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   12....       LCALL     ?Subroutine52 & 0xFFFF
   2479                  scene.transTime /= 10;
   \                     ??CrossCallReturnLabel_213:
   \   0000DC   7408         MOV       A,#0x8
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   12....       LCALL     ?Subroutine43 & 0xFFFF
   2480                }
   \                     ??CrossCallReturnLabel_83:
   \   0000E4   7A0A         MOV       R2,#0xa
   \   0000E6   7B00         MOV       R3,#0x0
   \   0000E8   12....       LCALL     ?US_DIV_MOD
   \   0000EB   7408         MOV       A,#0x8
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   12....       LCALL     ?Subroutine57 & 0xFFFF
   2481          
   2482                nameLen= *pData++; // Name length
   \                     ??CrossCallReturnLabel_272:
   \   0000F3   85..82       MOV       DPL,?V0
   \   0000F6   85..83       MOV       DPH,?V1
   \   0000F9   A3           INC       DPTR
   \   0000FA   A3           INC       DPTR
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   F5..         MOV       ?V2,A
   \   0000FE   E5..         MOV       A,?V0
   \   000100   2403         ADD       A,#0x3
   \   000102   F5..         MOV       ?V0,A
   \   000104   5002         JNC       ??zclGeneral_ProcessInScenesServer_9
   \   000106   05..         INC       ?V1
   2483          
   2484                // Retrieve Name Support attribute
   2485                zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_SCENES,
   2486                                  ATTRID_SCENES_NAME_SUPPORT, &nameSupport, NULL );
   \                     ??zclGeneral_ProcessInScenesServer_9:
   \   000108                ; Setup parameters for call to function zcl_ReadAttrData
   \   000108   78..         MOV       R0,#?V4
   \   00010A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010D   7402         MOV       A,#0x2
   \   00010F   12....       LCALL     ?XSTACK_DISP100_8
   \   000112   88..         MOV       ?V4,R0
   \   000114   89..         MOV       ?V5,R1
   \   000116   78..         MOV       R0,#?V4
   \   000118   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011B   7C04         MOV       R4,#0x4
   \   00011D   7D00         MOV       R5,#0x0
   \   00011F   7A05         MOV       R2,#0x5
   \   000121   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000124   12....       LCALL     ?DEALLOC_XSTACK8
   2487          
   2488                if ( nameSupport )
   \   000127   85..82       MOV       DPL,?XSP + 0
   \   00012A   85..83       MOV       DPH,?XSP + 1
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   6024         JZ        ??zclGeneral_ProcessInScenesServer_10
   2489                {
   2490                  if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
   \   000130   E5..         MOV       A,?V2
   \   000132   C3           CLR       C
   \   000133   9410         SUBB      A,#0x10
   \   000135   4003         JC        ??zclGeneral_ProcessInScenesServer_11
   2491                    nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
   \   000137   75..0F       MOV       ?V2,#0xf
   2492                  scene.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInScenesServer_11:
   \   00013A   740C         MOV       A,#0xc
   \   00013C   12....       LCALL     ?XSTACK_DISP0_8
   \   00013F   12....       LCALL     ?Subroutine50 & 0xFFFF
   2493                  zcl_memcpy( &(scene.name[1]), pData, nameLen );
   2494                }
   \                     ??CrossCallReturnLabel_93:
   \   000142   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000145   AC..         MOV       R4,?V2
   \   000147   7D00         MOV       R5,#0x0
   \   000149   7410         MOV       A,#0x10
   \   00014B   12....       LCALL     ?XSTACK_DISP0_8
   \   00014E   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000151   12....       LCALL     ?DEALLOC_XSTACK8
   2495          
   2496                pData += nameLen; // move past name, use original length
   \                     ??zclGeneral_ProcessInScenesServer_10:
   \   000154   A8..         MOV       R0,?V2
   \   000156   E5..         MOV       A,?V0
   \   000158   28           ADD       A,R0
   \   000159   F5..         MOV       ?V0,A
   \   00015B   E4           CLR       A
   \   00015C   35..         ADDC      A,?V1
   \   00015E   F5..         MOV       ?V1,A
   2497          
   2498                scene.extLen = pInMsg->pDataLen - ( (uint16)( pData - pInMsg->pData ) );
   \   000160   85..82       MOV       DPL,?V8
   \   000163   85..83       MOV       DPH,?V9
   \   000166   E0           MOVX      A,@DPTR
   \   000167   F8           MOV       R0,A
   \   000168   A9..         MOV       R1,?V0
   \   00016A   8E82         MOV       DPL,R6
   \   00016C   8F83         MOV       DPH,R7
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   A3           INC       DPTR
   \   000174   A3           INC       DPTR
   \   000175   A3           INC       DPTR
   \   000176   A3           INC       DPTR
   \   000177   A3           INC       DPTR
   \   000178   E0           MOVX      A,@DPTR
   \   000179   C3           CLR       C
   \   00017A   99           SUBB      A,R1
   \   00017B   28           ADD       A,R0
   \   00017C   F8           MOV       R0,A
   \   00017D   741C         MOV       A,#0x1c
   \   00017F   12....       LCALL     ?XSTACK_DISP0_8
   \   000182   E8           MOV       A,R0
   \   000183   F0           MOVX      @DPTR,A
   2499                if ( scene.extLen > 0 )
   \   000184   6024         JZ        ??zclGeneral_ProcessInScenesServer_12
   2500                {
   2501                  // Copy the extention field(s)
   2502                  if ( scene.extLen > ZCL_GEN_SCENE_EXT_LEN )
   \   000186   C3           CLR       C
   \   000187   9420         SUBB      A,#0x20
   \   000189   4003         JC        ??zclGeneral_ProcessInScenesServer_13
   2503                  {
   2504                    scene.extLen = ZCL_GEN_SCENE_EXT_LEN;
   \   00018B   741F         MOV       A,#0x1f
   \   00018D   F0           MOVX      @DPTR,A
   2505                  }
   2506                  zcl_memcpy( scene.extField, pData, scene.extLen );
   \                     ??zclGeneral_ProcessInScenesServer_13:
   \   00018E                ; Setup parameters for call to function osal_memcpy
   \   00018E   75..00       MOV       ?V2,#0x0
   \   000191   78..         MOV       R0,#?V0
   \   000193   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000196   741F         MOV       A,#0x1f
   \   000198   12....       LCALL     ?XSTACK_DISP0_8
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   FC           MOV       R4,A
   \   00019D   7D00         MOV       R5,#0x0
   \   00019F   7420         MOV       A,#0x20
   \   0001A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A4   12....       LCALL     ?Subroutine64 & 0xFFFF
   2507                }
   \                     ??CrossCallReturnLabel_224:
   \   0001A7   12....       LCALL     ?DEALLOC_XSTACK8
   2508          
   2509                if ( scene.groupID == 0x0000 ||
   2510                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_12:
   \   0001AA   7405         MOV       A,#0x5
   \   0001AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AF   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   0001B2   600D         JZ        ??zclGeneral_ProcessInScenesServer_14
   \   0001B4                ; Setup parameters for call to function aps_FindGroup
   \   0001B4   7405         MOV       A,#0x5
   \   0001B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B9   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0001BC   7003         JNZ       $+5
   \   0001BE   02....       LJMP      ??zclGeneral_ProcessInScenesServer_15 & 0xFFFF
   2511                {
   2512                  // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
   2513                  // does and the corresponding Group exits
   2514                  pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_14:
   \   0001C1                ; Setup parameters for call to function zclGeneral_FindScene
   \   0001C1   7407         MOV       A,#0x7
   \   0001C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C6   E0           MOVX      A,@DPTR
   \   0001C7   FC           MOV       R4,A
   \   0001C8   7405         MOV       A,#0x5
   \   0001CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CD   12....       LCALL     ?Subroutine10 & 0xFFFF
   2515                  if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
   \                     ??CrossCallReturnLabel_7:
   \   0001D0   700C         JNZ       ??zclGeneral_ProcessInScenesServer_16
   \   0001D2                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   0001D2   12....       LCALL     `??zclGeneral_CountAllScenes::?relay`; Banked call to: zclGeneral_CountAllScenes
   \   0001D5   E9           MOV       A,R1
   \   0001D6   C3           CLR       C
   \   0001D7   9410         SUBB      A,#0x10
   \   0001D9   4003         JC        $+5
   \   0001DB   02....       LJMP      ??zclGeneral_ProcessInScenesServer_17 & 0xFFFF
   2516                  {
   2517                    status = ZCL_STATUS_SUCCESS;
   \                     ??zclGeneral_ProcessInScenesServer_16:
   \   0001DE   75..00       MOV       ?V0,#0x0
   2518                    if ( pScene != NULL )
   \   0001E1   E5..         MOV       A,?V2
   \   0001E3   45..         ORL       A,?V3
   \   0001E5   7003         JNZ       $+5
   \   0001E7   02....       LJMP      ??zclGeneral_ProcessInScenesServer_18 & 0xFFFF
   2519                    {
   2520                      // The Scene already exists so update it
   2521                      pScene->transTime = scene.transTime;
   \   0001EA   7408         MOV       A,#0x8
   \   0001EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EF   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0001F2   85..82       MOV       DPL,?V2
   \   0001F5   85..83       MOV       DPH,?V3
   \   0001F8   A3           INC       DPTR
   \   0001F9   A3           INC       DPTR
   \   0001FA   A3           INC       DPTR
   \   0001FB   12....       LCALL     ?Subroutine57 & 0xFFFF
   2522                      zcl_memcpy( pScene->name, scene.name, ZCL_GEN_SCENE_NAME_LEN );
   \                     ??CrossCallReturnLabel_273:
   \   0001FE                ; Setup parameters for call to function osal_memcpy
   \   0001FE   740C         MOV       A,#0xc
   \   000200   12....       LCALL     ?XSTACK_DISP0_8
   \   000203   A982         MOV       R1,DPL
   \   000205   AA83         MOV       R2,DPH
   \   000207   89..         MOV       ?V4,R1
   \   000209   8A..         MOV       ?V5,R2
   \   00020B   75..00       MOV       ?V6,#0x0
   \   00020E   78..         MOV       R0,#?V4
   \   000210   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000213   7C10         MOV       R4,#0x10
   \   000215   7D00         MOV       R5,#0x0
   \   000217   E5..         MOV       A,?V2
   \   000219   2407         ADD       A,#0x7
   \   00021B   FA           MOV       R2,A
   \   00021C   E4           CLR       A
   \   00021D   35..         ADDC      A,?V3
   \   00021F   FB           MOV       R3,A
   \   000220   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000223   12....       LCALL     ?DEALLOC_XSTACK8
   2523          
   2524                      // Use the new extention field(s)
   2525                      zcl_memcpy( pScene->extField, scene.extField, scene.extLen );
   \   000226                ; Setup parameters for call to function osal_memcpy
   \   000226   741D         MOV       A,#0x1d
   \   000228   12....       LCALL     ?XSTACK_DISP0_8
   \   00022B   A982         MOV       R1,DPL
   \   00022D   AA83         MOV       R2,DPH
   \   00022F   89..         MOV       ?V4,R1
   \   000231   8A..         MOV       ?V5,R2
   \   000233   78..         MOV       R0,#?V4
   \   000235   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000238   741F         MOV       A,#0x1f
   \   00023A   12....       LCALL     ?XSTACK_DISP0_8
   \   00023D   E0           MOVX      A,@DPTR
   \   00023E   FC           MOV       R4,A
   \   00023F   7D00         MOV       R5,#0x0
   \   000241   E5..         MOV       A,?V2
   \   000243   2418         ADD       A,#0x18
   \   000245   FA           MOV       R2,A
   \   000246   E4           CLR       A
   \   000247   35..         ADDC      A,?V3
   \   000249   FB           MOV       R3,A
   \   00024A   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00024D   12....       LCALL     ?DEALLOC_XSTACK8
   2526                      pScene->extLen = scene.extLen;
   \   000250   741C         MOV       A,#0x1c
   \   000252   12....       LCALL     ?XSTACK_DISP0_8
   \   000255   E0           MOVX      A,@DPTR
   \   000256   C0E0         PUSH      A
   \   000258   E5..         MOV       A,?V2
   \   00025A   2417         ADD       A,#0x17
   \   00025C   F582         MOV       DPL,A
   \   00025E   E4           CLR       A
   \   00025F   35..         ADDC      A,?V3
   \   000261   F583         MOV       DPH,A
   \   000263   D0E0         POP       A
   \   000265   F0           MOVX      @DPTR,A
   2527          
   2528                      // Save Scenes
   2529                      zclGeneral_ScenesSave();
   \   000266                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000266   12....       LCALL     `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   2530                    }
   \   000269   8012         SJMP      ??zclGeneral_ProcessInScenesServer_19
   2531                    else
   2532                    {
   2533                      // The Scene doesn't exist so add it
   2534                      zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   \                     ??zclGeneral_ProcessInScenesServer_18:
   \   00026B                ; Setup parameters for call to function zclGeneral_AddScene
   \   00026B   7405         MOV       A,#0x5
   \   00026D   12....       LCALL     ?XSTACK_DISP101_8
   \   000270   12....       LCALL     ?Subroutine24 & 0xFFFF
   2535                    }
   2536                  }
   \                     ??CrossCallReturnLabel_34:
   \   000273   8008         SJMP      ??zclGeneral_ProcessInScenesServer_19
   2537                  else
   2538                  {
   2539                    status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   \                     ??zclGeneral_ProcessInScenesServer_17:
   \   000275   75..89       MOV       ?V0,#-0x77
   \   000278   8003         SJMP      ??zclGeneral_ProcessInScenesServer_19
   2540                  }
   2541                }
   2542                else
   2543                {
   2544                  status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \                     ??zclGeneral_ProcessInScenesServer_15:
   \   00027A   75..85       MOV       ?V0,#-0x7b
   2545                }
   2546          
   2547                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_19:
   \   00027D   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000280   6003         JZ        $+5
   \   000282   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   000285   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000288   6003         JZ        $+5
   \   00028A   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2548                {
   2549                  if ( pInMsg->hdr.commandID == COMMAND_SCENE_ADD )
   \   00028D   85..82       MOV       DPL,?V10
   \   000290   85..83       MOV       DPH,?V11
   \   000293   E0           MOVX      A,@DPTR
   \   000294   6003         JZ        $+5
   \   000296   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2550                  {
   2551                    zclGeneral_SendSceneAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2552                                                    status, scene.groupID, scene.ID,
   2553                                                    true, pInMsg->hdr.transSeqNum );
   \   000299                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   000299   12....       LCALL     ?Subroutine13 & 0xFFFF
   2554                  }
   2555          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2556                  else // COMMAND_SCENE_ENHANCED_ADD
   2557                  {
   2558                    zclGeneral_SendSceneEnhancedAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2559                                                            status, scene.groupID, scene.ID,
   2560                                                            true, pInMsg->hdr.transSeqNum );
   2561                  }
   2562          #endif // ZCL_LIGHT_LINK_ENHANCE
   2563                }
   \                     ??CrossCallReturnLabel_170:
   \   00029C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00029F   75..01       MOV       ?V1,#0x1
   \   0002A2   78..         MOV       R0,#?V1
   \   0002A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002A7   7409         MOV       A,#0x9
   \   0002A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AC   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0002AF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002B2   7408         MOV       A,#0x8
   \   0002B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0002BA   AD..         MOV       R5,?V0
   \   0002BC   7C00         MOV       R4,#0x0
   \   0002BE   02....       LJMP      ??zclGeneral_ProcessInScenesServer_21 & 0xFFFF
   2564                stat = ZCL_STATUS_CMD_HAS_RSP;
   2565          
   2566                break;
   2567          
   2568              case COMMAND_SCENE_VIEW:
   2569          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2570              case COMMAND_SCENE_ENHANCED_VIEW:
   2571          #endif // ZCL_LIGHT_LINK_ENHANCE
   2572                pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_2:
   \   0002C1                ; Setup parameters for call to function zclGeneral_FindScene
   \   0002C1   7405         MOV       A,#0x5
   \   0002C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C6   12....       LCALL     ?Subroutine10 & 0xFFFF
   2573                if ( pScene != NULL )
   \                     ??CrossCallReturnLabel_8:
   \   0002C9   6005         JZ        ??zclGeneral_ProcessInScenesServer_22
   2574                {
   2575                  status = ZCL_STATUS_SUCCESS;
   \   0002CB   75..00       MOV       ?V0,#0x0
   \   0002CE   8025         SJMP      ??zclGeneral_ProcessInScenesServer_23
   2576                }
   2577                else
   2578                {
   2579                  // Scene not found
   2580                  if ( scene.groupID != 0x0000 &&
   2581                       aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
   \                     ??zclGeneral_ProcessInScenesServer_22:
   \   0002D0   7405         MOV       A,#0x5
   \   0002D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D5   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   0002D8   600F         JZ        ??zclGeneral_ProcessInScenesServer_24
   \   0002DA                ; Setup parameters for call to function aps_FindGroup
   \   0002DA   7405         MOV       A,#0x5
   \   0002DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DF   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0002E2   7005         JNZ       ??zclGeneral_ProcessInScenesServer_24
   2582                  {
   2583                    status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \   0002E4   75..85       MOV       ?V0,#-0x7b
   \   0002E7   8003         SJMP      ??zclGeneral_ProcessInScenesServer_25
   2584                  }
   2585                  else
   2586                  {
   2587                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInScenesServer_24:
   \   0002E9   75..8B       MOV       ?V0,#-0x75
   2588                  }
   2589                  pScene = &scene;
   \                     ??zclGeneral_ProcessInScenesServer_25:
   \   0002EC   7405         MOV       A,#0x5
   \   0002EE   12....       LCALL     ?XSTACK_DISP100_8
   \   0002F1   88..         MOV       ?V2,R0
   \   0002F3   89..         MOV       ?V3,R1
   2590                }
   2591          
   2592                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_23:
   \   0002F5   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0002F8   6003         JZ        $+5
   \   0002FA   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   0002FD   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000300   6003         JZ        $+5
   \   000302   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2593                {
   2594                  if ( pInMsg->hdr.commandID == COMMAND_SCENE_VIEW )
   \   000305   85..82       MOV       DPL,?V10
   \   000308   85..83       MOV       DPH,?V11
   \   00030B   E0           MOVX      A,@DPTR
   \   00030C   6401         XRL       A,#0x1
   \   00030E   6003         JZ        $+5
   \   000310   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2595                  {
   2596                    zclGeneral_SendSceneViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2597                                                     status, pScene, true, pInMsg->hdr.transSeqNum );
   \   000313                ; Setup parameters for call to function zclGeneral_SendSceneViewRsp
   \   000313   12....       LCALL     ?Subroutine13 & 0xFFFF
   2598                  }
   2599          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2600                  else
   2601                  {
   2602                    zclGeneral_SendSceneEnhancedViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2603                                                             status, pScene, true, pInMsg->hdr.transSeqNum );
   2604                  }
   2605          #endif // ZCL_LIGHT_LINK_ENHANCE
   2606                }
   \                     ??CrossCallReturnLabel_171:
   \   000316   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000319   75..01       MOV       ?V1,#0x1
   \   00031C   78..         MOV       R0,#?V1
   \   00031E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000321   78..         MOV       R0,#?V2
   \   000323   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000326   AD..         MOV       R5,?V0
   \   000328   7C01         MOV       R4,#0x1
   \   00032A   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00032D   12....       LCALL     `??zclGeneral_SendSceneViewRsp::?relay`; Banked call to: zclGeneral_SendSceneViewRsp
   \   000330   7404         MOV       A,#0x4
   \   000332   12....       LCALL     ?DEALLOC_XSTACK8
   \   000335   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2607                stat = ZCL_STATUS_CMD_HAS_RSP;
   2608                break;
   2609          
   2610              case COMMAND_SCENE_REMOVE:
   2611                if ( zclGeneral_RemoveScene( pInMsg->msg->endPoint, scene.groupID, scene.ID ) )
   \                     ??zclGeneral_ProcessInScenesServer_3:
   \   000338                ; Setup parameters for call to function zclGeneral_RemoveScene
   \   000338   7405         MOV       A,#0x5
   \   00033A   12....       LCALL     ?XSTACK_DISP0_8
   \   00033D   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000340   12....       LCALL     `??zclGeneral_RemoveScene::?relay`; Banked call to: zclGeneral_RemoveScene
   \   000343   E9           MOV       A,R1
   \   000344   6005         JZ        ??zclGeneral_ProcessInScenesServer_26
   2612                {
   2613                  status = ZCL_STATUS_SUCCESS;
   \   000346   75..00       MOV       ?V0,#0x0
   \   000349   8012         SJMP      ??zclGeneral_ProcessInScenesServer_27
   2614                }
   2615                else
   2616                {
   2617                  // Scene not found
   2618                  if ( aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
   \                     ??zclGeneral_ProcessInScenesServer_26:
   \   00034B                ; Setup parameters for call to function aps_FindGroup
   \   00034B   7405         MOV       A,#0x5
   \   00034D   12....       LCALL     ?XSTACK_DISP0_8
   \   000350   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000353   7005         JNZ       ??zclGeneral_ProcessInScenesServer_28
   2619                  {
   2620                    // The Group is not in the Group Table
   2621                    status = ZCL_STATUS_INVALID_FIELD;
   \   000355   75..85       MOV       ?V0,#-0x7b
   \   000358   8003         SJMP      ??zclGeneral_ProcessInScenesServer_27
   2622                  }
   2623                  else
   2624                  {
   2625                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInScenesServer_28:
   \   00035A   75..8B       MOV       ?V0,#-0x75
   2626                  }
   2627                }
   2628          
   2629                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_27:
   \   00035D   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000360   6003         JZ        $+5
   \   000362   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   000365   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000368   6003         JZ        $+5
   \   00036A   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2630                {
   2631                  // Addressed to this device (not to a group) - send a response back
   2632                  zclGeneral_SendSceneRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2633                                                      status, scene.groupID,
   2634                                                      scene.ID, true, pInMsg->hdr.transSeqNum );
   \   00036D                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   00036D   12....       LCALL     ?Subroutine13 & 0xFFFF
   2635                }
   \                     ??CrossCallReturnLabel_172:
   \   000370   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000373   75..01       MOV       ?V1,#0x1
   \   000376   78..         MOV       R0,#?V1
   \   000378   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00037B   7409         MOV       A,#0x9
   \   00037D   12....       LCALL     ?XSTACK_DISP0_8
   \   000380   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000383   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000386   7408         MOV       A,#0x8
   \   000388   12....       LCALL     ?XSTACK_DISP0_8
   \   00038B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00038E   AD..         MOV       R5,?V0
   \   000390   7C02         MOV       R4,#0x2
   \   000392   02....       LJMP      ??zclGeneral_ProcessInScenesServer_21 & 0xFFFF
   2636                stat = ZCL_STATUS_CMD_HAS_RSP;
   2637                break;
   2638          
   2639              case COMMAND_SCENE_REMOVE_ALL:
   2640                if ( scene.groupID == 0x0000 ||
   2641                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_4:
   \   000395   7405         MOV       A,#0x5
   \   000397   12....       LCALL     ?XSTACK_DISP0_8
   \   00039A   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   00039D   600A         JZ        ??zclGeneral_ProcessInScenesServer_29
   \   00039F                ; Setup parameters for call to function aps_FindGroup
   \   00039F   7405         MOV       A,#0x5
   \   0003A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A4   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0003A7   600D         JZ        ??zclGeneral_ProcessInScenesServer_30
   2642                {
   2643                  zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, scene.groupID );
   \                     ??zclGeneral_ProcessInScenesServer_29:
   \   0003A9                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   0003A9   7405         MOV       A,#0x5
   \   0003AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0003AE   12....       LCALL     ?Subroutine14 & 0xFFFF
   2644                  status = ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_284:
   \   0003B1   75..00       MOV       ?V0,#0x0
   \   0003B4   8003         SJMP      ??zclGeneral_ProcessInScenesServer_31
   2645                }
   2646                else
   2647                {
   2648                  status = ZCL_STATUS_INVALID_FIELD;
   \                     ??zclGeneral_ProcessInScenesServer_30:
   \   0003B6   75..85       MOV       ?V0,#-0x7b
   2649                }
   2650          
   2651                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_31:
   \   0003B9   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0003BC   6003         JZ        $+5
   \   0003BE   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   0003C1   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   0003C4   6003         JZ        $+5
   \   0003C6   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2652                {
   2653                  // Addressed to this device (not to a group) - send a response back
   2654                  zclGeneral_SendSceneRemoveAllResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2655                                                         status, scene.groupID, true, pInMsg->hdr.transSeqNum );
   \   0003C9                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   0003C9   12....       LCALL     ?Subroutine13 & 0xFFFF
   2656                }
   \                     ??CrossCallReturnLabel_173:
   \   0003CC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003CF   75..01       MOV       ?V1,#0x1
   \   0003D2   78..         MOV       R0,#?V1
   \   0003D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003D7   75..00       MOV       ?V1,#0x0
   \   0003DA   78..         MOV       R0,#?V1
   \   0003DC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003DF   7408         MOV       A,#0x8
   \   0003E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0003E4   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0003E7   AD..         MOV       R5,?V0
   \   0003E9   7C03         MOV       R4,#0x3
   \   0003EB   02....       LJMP      ??zclGeneral_ProcessInScenesServer_21 & 0xFFFF
   2657                stat = ZCL_STATUS_CMD_HAS_RSP;
   2658                break;
   2659          
   2660              case COMMAND_SCENE_STORE:
   2661                if ( scene.groupID == 0x0000 ||
   2662                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_5:
   \   0003EE   7405         MOV       A,#0x5
   \   0003F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0003F3   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   0003F6   600D         JZ        ??zclGeneral_ProcessInScenesServer_32
   \   0003F8                ; Setup parameters for call to function aps_FindGroup
   \   0003F8   7405         MOV       A,#0x5
   \   0003FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0003FD   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000400   7003         JNZ       $+5
   \   000402   02....       LJMP      ??zclGeneral_ProcessInScenesServer_33 & 0xFFFF
   2663                {
   2664                  // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
   2665                  // does and the corresponding Group exits
   2666                  pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_32:
   \   000405                ; Setup parameters for call to function zclGeneral_FindScene
   \   000405   7407         MOV       A,#0x7
   \   000407   12....       LCALL     ?XSTACK_DISP0_8
   \   00040A   E0           MOVX      A,@DPTR
   \   00040B   FC           MOV       R4,A
   \   00040C   7405         MOV       A,#0x5
   \   00040E   12....       LCALL     ?XSTACK_DISP0_8
   \   000411   12....       LCALL     ?Subroutine10 & 0xFFFF
   2667                  if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
   \                     ??CrossCallReturnLabel_9:
   \   000414   7009         JNZ       ??zclGeneral_ProcessInScenesServer_34
   \   000416                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   000416   12....       LCALL     `??zclGeneral_CountAllScenes::?relay`; Banked call to: zclGeneral_CountAllScenes
   \   000419   E9           MOV       A,R1
   \   00041A   C3           CLR       C
   \   00041B   9410         SUBB      A,#0x10
   \   00041D   506C         JNC       ??zclGeneral_ProcessInScenesServer_35
   2668                  {
   2669                    uint8 sceneChanged = FALSE;
   \                     ??zclGeneral_ProcessInScenesServer_34:
   \   00041F   C2..         CLR       ?VB.0
   2670          
   2671                    status = ZCL_STATUS_SUCCESS;
   \   000421   75..00       MOV       ?V0,#0x0
   2672                    if ( pScene == NULL )
   \   000424   E5..         MOV       A,?V2
   \   000426   45..         ORL       A,?V3
   \   000428   7009         JNZ       ??zclGeneral_ProcessInScenesServer_36
   2673                    {
   2674                      // Haven't been added yet
   2675                      pScene = &scene;
   \   00042A   7405         MOV       A,#0x5
   \   00042C   12....       LCALL     ?XSTACK_DISP100_8
   \   00042F   88..         MOV       ?V2,R0
   \   000431   89..         MOV       ?V3,R1
   2676                    }
   2677          
   2678                    if ( pCBs->pfnSceneStoreReq )
   \                     ??zclGeneral_ProcessInScenesServer_36:
   \   000433   E5..         MOV       A,?V6
   \   000435   240E         ADD       A,#0xe
   \   000437   F582         MOV       DPL,A
   \   000439   E4           CLR       A
   \   00043A   35..         ADDC      A,?V7
   \   00043C   F583         MOV       DPH,A
   \   00043E   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000441   6026         JZ        ??zclGeneral_ProcessInScenesServer_37
   2679                    {
   2680                      zclSceneReq_t req;
   2681          
   2682                      req.srcAddr = &(pInMsg->msg->srcAddr);
   \   000443   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000446   12....       LCALL     ?XSTACK_DISP0_8
   \   000449   12....       LCALL     ?Subroutine52 & 0xFFFF
   2683                      req.scene = pScene;
   \                     ??CrossCallReturnLabel_214:
   \   00044C   7403         MOV       A,#0x3
   \   00044E   12....       LCALL     ?XSTACK_DISP0_8
   \   000451   E5..         MOV       A,?V2
   \   000453   F0           MOVX      @DPTR,A
   \   000454   A3           INC       DPTR
   \   000455   E5..         MOV       A,?V3
   \   000457   F0           MOVX      @DPTR,A
   2684          
   2685                      // Get the latest Scene info
   2686                      if ( pCBs->pfnSceneStoreReq( &req ) )
   \   000458                ; Setup parameters for indirect call
   \   000458   7401         MOV       A,#0x1
   \   00045A   12....       LCALL     ?XSTACK_DISP101_8
   \   00045D   8882         MOV       DPL,R0
   \   00045F   8983         MOV       DPH,R1
   \   000461   12....       LCALL     ?CALL_IND
   \   000464   E9           MOV       A,R1
   \   000465   6002         JZ        ??zclGeneral_ProcessInScenesServer_37
   2687                      {
   2688                        sceneChanged = TRUE;
   \   000467   D2..         SETB      ?VB.0
   2689                      }
   2690                    }
   2691          
   2692                    if ( pScene == &scene )
   \                     ??zclGeneral_ProcessInScenesServer_37:
   \   000469   7405         MOV       A,#0x5
   \   00046B   12....       LCALL     ?XSTACK_DISP100_8
   \   00046E   E5..         MOV       A,?V2
   \   000470   68           XRL       A,R0
   \   000471   7003         JNZ       ??zclGeneral_ProcessInScenesServer_38
   \   000473   E5..         MOV       A,?V3
   \   000475   69           XRL       A,R1
   \                     ??zclGeneral_ProcessInScenesServer_38:
   \   000476   700A         JNZ       ??zclGeneral_ProcessInScenesServer_39
   2693                    {
   2694                      // The Scene doesn't exist so add it
   2695                      zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   \   000478                ; Setup parameters for call to function zclGeneral_AddScene
   \   000478   7405         MOV       A,#0x5
   \   00047A   12....       LCALL     ?XSTACK_DISP101_8
   \   00047D   12....       LCALL     ?Subroutine24 & 0xFFFF
   2696                    }
   \                     ??CrossCallReturnLabel_35:
   \   000480   8011         SJMP      ??zclGeneral_ProcessInScenesServer_40
   2697                    else if ( sceneChanged )
   \                     ??zclGeneral_ProcessInScenesServer_39:
   \   000482   A2..         MOV       C,?VB.0
   \   000484   500D         JNC       ??zclGeneral_ProcessInScenesServer_40
   2698                    {
   2699                      // The Scene already exists so update only NV
   2700                      zclGeneral_ScenesSave();
   \   000486                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000486   12....       LCALL     `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   2701                    }
   2702                  }
   \   000489   8008         SJMP      ??zclGeneral_ProcessInScenesServer_40
   2703                  else
   2704                  {
   2705                    status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   \                     ??zclGeneral_ProcessInScenesServer_35:
   \   00048B   75..89       MOV       ?V0,#-0x77
   \   00048E   8003         SJMP      ??zclGeneral_ProcessInScenesServer_40
   2706                  }
   2707                }
   2708                else
   2709                {
   2710                  status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \                     ??zclGeneral_ProcessInScenesServer_33:
   \   000490   75..85       MOV       ?V0,#-0x7b
   2711                }
   2712          
   2713                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_40:
   \   000493   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000496   6003         JZ        $+5
   \   000498   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   00049B   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   00049E   6003         JZ        $+5
   \   0004A0   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2714                {
   2715                  // Addressed to this device (not to a group) - send a response back
   2716                  zclGeneral_SendSceneStoreResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2717                                                     status, scene.groupID, scene.ID,
   2718                                                     true, pInMsg->hdr.transSeqNum );
   \   0004A3                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   0004A3   12....       LCALL     ?Subroutine13 & 0xFFFF
   2719                }
   \                     ??CrossCallReturnLabel_174:
   \   0004A6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004A9   75..01       MOV       ?V1,#0x1
   \   0004AC   78..         MOV       R0,#?V1
   \   0004AE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004B1   7409         MOV       A,#0x9
   \   0004B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0004B6   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0004B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004BC   7408         MOV       A,#0x8
   \   0004BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0004C1   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0004C4   AD..         MOV       R5,?V0
   \   0004C6   7C04         MOV       R4,#0x4
   \                     ??zclGeneral_ProcessInScenesServer_21:
   \   0004C8   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0004CB   12....       LCALL     `??zclGeneral_SendSceneResponse::?relay`; Banked call to: zclGeneral_SendSceneResponse
   \   0004CE   7405         MOV       A,#0x5
   \   0004D0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004D3   02....       LJMP      ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2720                stat = ZCL_STATUS_CMD_HAS_RSP;
   2721                break;
   2722          
   2723              case COMMAND_SCENE_RECALL:
   2724                pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_6:
   \   0004D6                ; Setup parameters for call to function zclGeneral_FindScene
   \   0004D6   7405         MOV       A,#0x5
   \   0004D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0004DB   12....       LCALL     ?Subroutine10 & 0xFFFF
   2725                if ( pScene && pCBs->pfnSceneRecallReq )
   \                     ??CrossCallReturnLabel_10:
   \   0004DE   7003         JNZ       $+5
   \   0004E0   02....       LJMP      ??zclGeneral_ProcessInScenesServer_41 & 0xFFFF
   \   0004E3   E5..         MOV       A,?V6
   \   0004E5   2410         ADD       A,#0x10
   \   0004E7   F582         MOV       DPL,A
   \   0004E9   E4           CLR       A
   \   0004EA   35..         ADDC      A,?V7
   \   0004EC   F583         MOV       DPH,A
   \   0004EE   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   0004F1   7003         JNZ       $+5
   \   0004F3   02....       LJMP      ??zclGeneral_ProcessInScenesServer_41 & 0xFFFF
   2726                {
   2727                  zclSceneReq_t req;
   2728          
   2729                  req.srcAddr = &(pInMsg->msg->srcAddr);
   \   0004F6   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0004F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0004FC   12....       LCALL     ?Subroutine52 & 0xFFFF
   2730                  req.scene = pScene;
   \                     ??CrossCallReturnLabel_215:
   \   0004FF   7403         MOV       A,#0x3
   \   000501   12....       LCALL     ?XSTACK_DISP0_8
   \   000504   E5..         MOV       A,?V2
   \   000506   F0           MOVX      @DPTR,A
   \   000507   A3           INC       DPTR
   \   000508   E5..         MOV       A,?V3
   \   00050A   F0           MOVX      @DPTR,A
   2731          
   2732                  pCBs->pfnSceneRecallReq( &req );
   \   00050B                ; Setup parameters for indirect call
   \   00050B   7401         MOV       A,#0x1
   \   00050D   12....       LCALL     ?XSTACK_DISP101_8
   \   000510   8882         MOV       DPL,R0
   \   000512   8983         MOV       DPH,R1
   \   000514   12....       LCALL     ?CALL_IND
   \   000517   02....       LJMP      ??zclGeneral_ProcessInScenesServer_41 & 0xFFFF
   2733                }
   2734                // No response
   2735                break;
   2736          
   2737              case COMMAND_SCENE_GET_MEMBERSHIP:
   2738                // Find all the Scenes corresponding to the Group ID
   2739                if ( scene.groupID == 0x0000 ||
   2740                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_7:
   \   00051A   7405         MOV       A,#0x5
   \   00051C   12....       LCALL     ?XSTACK_DISP0_8
   \   00051F   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000522   600A         JZ        ??zclGeneral_ProcessInScenesServer_42
   \   000524                ; Setup parameters for call to function aps_FindGroup
   \   000524   7405         MOV       A,#0x5
   \   000526   12....       LCALL     ?XSTACK_DISP0_8
   \   000529   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00052C   6046         JZ        ??zclGeneral_ProcessInScenesServer_43
   2741                {
   2742                  // Allocate space for the scene list
   2743                  sceneList = zcl_mem_alloc( ZCL_GEN_MAX_SCENES );
   \                     ??zclGeneral_ProcessInScenesServer_42:
   \   00052E                ; Setup parameters for call to function osal_mem_alloc
   \   00052E   7A10         MOV       R2,#0x10
   \   000530   7B00         MOV       R3,#0x0
   \   000532   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000535   8A..         MOV       ?V2,R2
   \   000537   8B..         MOV       ?V3,R3
   2744                  if ( sceneList != NULL )
   \   000539   EA           MOV       A,R2
   \   00053A   4B           ORL       A,R3
   \   00053B   6032         JZ        ??zclGeneral_ProcessInScenesServer_44
   2745                  {
   2746                    sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
   2747                                                                 scene.groupID, sceneList );
   \   00053D                ; Setup parameters for call to function zclGeneral_FindAllScenesForGroup
   \   00053D   AC..         MOV       R4,?V2
   \   00053F   AD..         MOV       R5,?V3
   \   000541   7405         MOV       A,#0x5
   \   000543   12....       LCALL     ?XSTACK_DISP0_8
   \   000546   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000549   12....       LCALL     `??zclGeneral_FindAllScenesForGroup::?relay`; Banked call to: zclGeneral_FindAllScenesForGroup
   \   00054C   E9           MOV       A,R1
   \   00054D   F5..         MOV       ?V5,A
   2748                    status = ZCL_STATUS_SUCCESS;
   \   00054F   75..00       MOV       ?V0,#0x0
   2749                    if ( ! UNICAST_MSG( pInMsg->msg ) )
   \   000552   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000555   2415         ADD       A,#0x15
   \   000557   F582         MOV       DPL,A
   \   000559   E4           CLR       A
   \   00055A   39           ADDC      A,R1
   \   00055B   F583         MOV       DPH,A
   \   00055D   E0           MOVX      A,@DPTR
   \   00055E   7009         JNZ       ??zclGeneral_ProcessInScenesServer_45
   \   000560   8882         MOV       DPL,R0
   \   000562   8983         MOV       DPH,R1
   \   000564   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000567   600E         JZ        ??zclGeneral_ProcessInScenesServer_46
   2750                    {
   2751                      // Addressed to the Group - ONLY send a response if an entry within the
   2752                      // Scene Table corresponds to the Group ID
   2753                      if ( sceneCnt == 0 )
   \                     ??zclGeneral_ProcessInScenesServer_45:
   \   000569   E5..         MOV       A,?V5
   \   00056B   700A         JNZ       ??zclGeneral_ProcessInScenesServer_46
   \   00056D   8050         SJMP      ??zclGeneral_ProcessInScenesServer_47
   2754                      {
   2755                        sendRsp = FALSE;
   2756                      }
   2757                    }
   2758                  }
   2759                  else
   2760                  {
   2761                    // Couldn't allocate space for the scene list!
   2762                    status = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??zclGeneral_ProcessInScenesServer_44:
   \   00056F   75..89       MOV       ?V0,#-0x77
   \   000572   8003         SJMP      ??zclGeneral_ProcessInScenesServer_46
   2763                  }
   2764                }
   2765                else
   2766                {
   2767                  // The Group is not in the Group Table - send a response back
   2768                  status = ZCL_STATUS_INVALID_FIELD;
   \                     ??zclGeneral_ProcessInScenesServer_43:
   \   000574   75..85       MOV       ?V0,#-0x7b
   2769                }
   2770          
   2771          #ifdef ZCL_LIGHT_LINK_ENHANCE //ZLL allows response to unicast only
   2772                if ( sendRsp && UNICAST_MSG( pInMsg->msg ) )
   2773          #else
   2774                if ( sendRsp )
   2775          #endif //ZCL_LIGHT_LINK_ENHANCE
   2776                {
   2777                  zclGeneral_SendSceneGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2778                                              status, zclGeneral_ScenesRemaingCapacity(), sceneCnt, sceneList,
   2779                                              scene.groupID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInScenesServer_46:
   \   000577                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   000577   12....       LCALL     `??zclGeneral_CountAllScenes::?relay`; Banked call to: zclGeneral_CountAllScenes
   \   00057A   E9           MOV       A,R1
   \   00057B   F9           MOV       R1,A
   \   00057C   8E82         MOV       DPL,R6
   \   00057E   8F83         MOV       DPH,R7
   \   000580   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   2780                }
   \                     ??CrossCallReturnLabel_276:
   \   000583                ; Setup parameters for call to function zclGeneral_SendSceneGetMembershipResponse
   \   000583   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000586   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000589   75..01       MOV       ?V1,#0x1
   \   00058C   78..         MOV       R0,#?V1
   \   00058E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000591   7407         MOV       A,#0x7
   \   000593   12....       LCALL     ?XSTACK_DISP0_8
   \   000596   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000599   78..         MOV       R0,#?V2
   \   00059B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00059E   E5..         MOV       A,?V5
   \   0005A0   F5..         MOV       ?V1,A
   \   0005A2   78..         MOV       R0,#?V1
   \   0005A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0005A7   7410         MOV       A,#0x10
   \   0005A9   C3           CLR       C
   \   0005AA   99           SUBB      A,R1
   \   0005AB   FD           MOV       R5,A
   \   0005AC   AC..         MOV       R4,?V0
   \   0005AE   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0005B1   12....       LCALL     `??zclGeneral_SendSceneGetMembershipResponse::?r`; Banked call to: zclGeneral_SendSceneGetMembershipResponse
   \   0005B4   7407         MOV       A,#0x7
   \   0005B6   12....       LCALL     ?DEALLOC_XSTACK8
   2781          
   2782                if ( sceneList != NULL )
   \   0005B9   E5..         MOV       A,?V2
   \   0005BB   45..         ORL       A,?V3
   \   0005BD   6007         JZ        ??zclGeneral_ProcessInScenesServer_20
   2783                  zcl_mem_free( sceneList );
   \                     ??zclGeneral_ProcessInScenesServer_47:
   \   0005BF                ; Setup parameters for call to function osal_mem_free
   \   0005BF   AA..         MOV       R2,?V2
   \   0005C1   AB..         MOV       R3,?V3
   \   0005C3   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2784          
   2785                stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInScenesServer_20:
   \   0005C6   75..FF       MOV       ?V4,#-0x1
   2786                break;
   \   0005C9   8003         SJMP      ??zclGeneral_ProcessInScenesServer_41
   2787          
   2788          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2789              case COMMAND_SCENE_COPY:
   2790                {
   2791                  uint8 mode;
   2792                  uint16 groupIDFrom, groupIDTo;
   2793                  uint8 sceneIDFrom, sceneIDTo;
   2794          
   2795                  pData = pInMsg->pData; // different payload format
   2796          
   2797                  mode = *pData++;
   2798                  groupIDFrom = BUILD_UINT16( pData[0], pData[1] ); // from group ID
   2799                  pData += 2;
   2800                  sceneIDFrom = *pData++; // from scene ID
   2801                  groupIDTo = BUILD_UINT16( pData[0], pData[1] ); // to group ID
   2802                  pData += 2;
   2803                  if ( (mode & SCENE_COPY_MODE_ALL_BIT) == 0 )
   2804                  {
   2805                    sceneIDTo = *pData++; // to scene ID
   2806                  }
   2807          
   2808                  // Make sure the groups exist
   2809                  if ( ( aps_FindGroup( pInMsg->msg->endPoint, groupIDFrom ) != NULL ) &&
   2810                       ( aps_FindGroup( pInMsg->msg->endPoint, groupIDTo ) != NULL ) )
   2811                  {
   2812                    // Allocate space for the scene list
   2813                    sceneList = zcl_mem_alloc( (mode & SCENE_COPY_MODE_ALL_BIT) ? ZCL_GEN_MAX_SCENES : 1 );
   2814                    if ( sceneList == NULL )
   2815                    {
   2816                      status = ZCL_STATUS_INSUFFICIENT_SPACE; // Couldn't allocate space for the scene list!
   2817                    }
   2818                    else
   2819                    {
   2820                      status = ZCL_STATUS_SUCCESS;
   2821                      if ( mode & SCENE_COPY_MODE_ALL_BIT ) // Copy all scenes
   2822                      {
   2823                        sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
   2824                                                                     groupIDFrom, sceneList );
   2825                      }
   2826                      else // Copy single scene
   2827                      {
   2828                        // Make sure the scene exists
   2829                        pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneIDFrom );
   2830                        if ( pScene != NULL )
   2831                        {
   2832                          sceneList[0] = sceneIDFrom;
   2833                          sceneCnt = 1;
   2834                        }
   2835                        else
   2836                        {
   2837                          status = ZCL_STATUS_INVALID_FIELD; // Scene not found
   2838                        }
   2839                      }
   2840                    }
   2841          
   2842                    if ( status == ZCL_STATUS_SUCCESS )
   2843                    {
   2844                      uint8 numScenesToAdd = 0;
   2845                      uint8 i;
   2846                      for ( i = 0; i < sceneCnt; i++ )
   2847                      {
   2848                        if ( zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, sceneList[i] ) == NULL )
   2849                        {
   2850                          numScenesToAdd++;
   2851                        }
   2852                      }
   2853                      if ( zclGeneral_ScenesRemaingCapacity() >= numScenesToAdd )
   2854                      {
   2855                        // Copy the scenes
   2856                        for ( i = 0; i < sceneCnt; i++ )
   2857                        {
   2858                          // Ignore scene ID from and scene ID to fields
   2859                          pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneList[i] );
   2860                          if ( pScene != NULL )
   2861                          {
   2862                            zclGeneral_Scene_t *pToScene;
   2863                            scene = *pScene;
   2864                            scene.groupID = groupIDTo;
   2865                            scene.ID = ( (mode & SCENE_COPY_MODE_ALL_BIT) ? sceneList[i] : sceneIDTo );
   2866          
   2867                            pToScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
   2868                            if( pToScene != NULL )
   2869                            {
   2870                              zclGeneral_RemoveScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
   2871                            }
   2872                            // Add the scene
   2873                            zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   2874                          }
   2875                        }
   2876                      }
   2877                      else
   2878                      {
   2879                        status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   2880                      }
   2881                    }
   2882                  }
   2883                  else
   2884                  {
   2885                    status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   2886                  }
   2887          
   2888                  if ( UNICAST_MSG( pInMsg->msg ) )
   2889                  {
   2890                    if ( pScene == NULL )
   2891                    {
   2892                      pScene = &scene;
   2893                    }
   2894                    // Addressed to this device (not to a group) - send a response back
   2895                    zclGeneral_SendSceneCopyResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2896                                                      status, pScene->groupID, pScene->ID,
   2897                                                      true, pInMsg->hdr.transSeqNum );
   2898                  }
   2899          
   2900                  if ( sceneList != NULL )
   2901                  {
   2902                    zcl_mem_free( sceneList );
   2903                  }
   2904                }
   2905          
   2906                stat = ZCL_STATUS_CMD_HAS_RSP;
   2907                break;
   2908          #endif // ZCL_LIGHT_LINK_ENHANCE
   2909          
   2910              default:
   2911                stat = ZFailure;
   \                     ??zclGeneral_ProcessInScenesServer_8:
   \   0005CB   75..01       MOV       ?V4,#0x1
   2912              break;
   2913            }
   2914          
   2915            return ( stat );
   \                     ??zclGeneral_ProcessInScenesServer_41:
   \   0005CE   A9..         MOV       R1,?V4
   \   0005D0   743C         MOV       A,#0x3c
   \   0005D2                REQUIRE ?Subroutine3
   \   0005D2                ; // Fall through to label ?Subroutine3
   2916          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   2406         ADD       A,#0x6
   \   000007   FA           MOV       R2,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   3400         ADDC      A,#0x0
   \   00000C   FB           MOV       R3,A
   \   00000D   7401         MOV       A,#0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003   12....       LCALL     `??zclGeneral_AddScene::?relay`; Banked call to: zclGeneral_AddScene
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   EE           MOV       A,R6
   \   000004   2415         ADD       A,#0x15
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   3F           ADDC      A,R7
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   12....       LCALL     `??zclGeneral_FindScene::?relay`; Banked call to: zclGeneral_FindScene
   \   000006   8A..         MOV       ?V2,R2
   \   000008   8B..         MOV       ?V3,R3
   \   00000A   EA           MOV       A,R2
   \   00000B   4B           ORL       A,R3
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine111_0
   \   000006                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine112_0
   \   000004                ; // Fall through to label ??Subroutine112_0
   2917          
   2918          /*********************************************************************
   2919           * @fn      zclGeneral_ProcessInScenesClient
   2920           *
   2921           * @brief   Process in the received Scenes Command.
   2922           *
   2923           * @param   pInMsg - pointer to the incoming message
   2924           *
   2925           * @return  ZStatus_t
   2926           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for indirect call
   \   000005                ; Setup parameters for indirect call
   \   000005   AA..         MOV       R2,?XSP + 0
   \   000007   AB..         MOV       R3,?XSP + 1
   \   000009   85..82       MOV       DPL,?V2
   \   00000C   85..83       MOV       DPH,?V3
   \   00000F                REQUIRE ??Subroutine104_0
   \   00000F                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2927          static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInScenesClient:
   2928                                                             zclGeneral_AppCallbacks_t *pCBs )
   2929          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 65
   \   000005   74BF         MOV       A,#-0x41
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   2930            zclGeneral_Scene_t scene;
   2931            uint8 *pData = pInMsg->pData;
   \   000012   12....       LCALL     ?Subroutine38 & 0xFFFF
   2932            uint8 nameLen;
   2933            zclSceneRsp_t rsp;
   2934            uint8 i;
   2935            ZStatus_t stat = ZSuccess;
   \                     ??CrossCallReturnLabel_278:
   \   000015   75..00       MOV       ?V10,#0x0
   2936          
   2937            zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   \   000018                ; Setup parameters for call to function osal_memset
   \   000018   7C37         MOV       R4,#0x37
   \   00001A   7D00         MOV       R5,#0x0
   \   00001C   7900         MOV       R1,#0x0
   \   00001E   740A         MOV       A,#0xa
   \   000020   12....       LCALL     ?XSTACK_DISP101_8
   \   000023   12....       LCALL     ?Subroutine69 & 0xFFFF
   2938            zcl_memset( (uint8*)&rsp, 0, sizeof( zclSceneRsp_t ) );
   2939          
   2940            // Get the status field first
   2941            rsp.status = *pData++;
   \                     ??CrossCallReturnLabel_124:
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   C0E0         PUSH      A
   \   00002D   7403         MOV       A,#0x3
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   D0E0         POP       A
   \   000034   12....       LCALL     ?Subroutine53 & 0xFFFF
   2942          
   2943            if ( pInMsg->hdr.commandID == COMMAND_SCENE_GET_MEMBERSHIP_RSP )
   \                     ??CrossCallReturnLabel_96:
   \   000037   E5..         MOV       A,?V8
   \   000039   2407         ADD       A,#0x7
   \   00003B   F5..         MOV       ?V0,A
   \   00003D   E4           CLR       A
   \   00003E   35..         ADDC      A,?V9
   \   000040   F5..         MOV       ?V1,A
   \   000042   85..82       MOV       DPL,?V0
   \   000045   F583         MOV       DPH,A
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6406         XRL       A,#0x6
   \   00004A   7014         JNZ       ??zclGeneral_ProcessInScenesClient_0
   2944            {
   2945              rsp.capacity = *pData++;
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   E0           MOVX      A,@DPTR
   \   000051   C0E0         PUSH      A
   \   000053   7407         MOV       A,#0x7
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   D0E0         POP       A
   \   00005A   12....       LCALL     ?Subroutine55 & 0xFFFF
   2946            }
   \                     ??CrossCallReturnLabel_102:
   \   00005D   0E           INC       R6
   \   00005E   AF83         MOV       R7,DPH
   2947          
   2948            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInScenesClient_0:
   \   000060   8E82         MOV       DPL,R6
   \   000062   8F83         MOV       DPH,R7
   \   000064   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000067   740A         MOV       A,#0xa
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   EA           MOV       A,R2
   \   00006D   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   2949            pData += 2;   // Move past group ID
   \                     ??CrossCallReturnLabel_266:
   \   000070   EE           MOV       A,R6
   \   000071   2402         ADD       A,#0x2
   \   000073   FE           MOV       R6,A
   \   000074   5001         JNC       ??zclGeneral_ProcessInScenesClient_1
   \   000076   0F           INC       R7
   2950          
   2951            switch ( pInMsg->hdr.commandID )
   \                     ??zclGeneral_ProcessInScenesClient_1:
   \   000077   F582         MOV       DPL,A
   \   000079   8F83         MOV       DPH,R7
   \   00007B   A3           INC       DPTR
   \   00007C   A882         MOV       R0,DPL
   \   00007E   A983         MOV       R1,DPH
   \   000080   E5..         MOV       A,?V2
   \   000082   2412         ADD       A,#0x12
   \   000084   F5..         MOV       ?V2,A
   \   000086   5002         JNC       ??zclGeneral_ProcessInScenesClient_2
   \   000088   05..         INC       ?V3
   \                     ??zclGeneral_ProcessInScenesClient_2:
   \   00008A   85..82       MOV       DPL,?V0
   \   00008D   85..83       MOV       DPH,?V1
   \   000090   E0           MOVX      A,@DPTR
   \   000091   607C         JZ        ??zclGeneral_ProcessInScenesClient_3
   \   000093   14           DEC       A
   \   000094   6013         JZ        ??zclGeneral_ProcessInScenesClient_4
   \   000096   14           DEC       A
   \   000097   6076         JZ        ??zclGeneral_ProcessInScenesClient_3
   \   000099   14           DEC       A
   \   00009A   6073         JZ        ??zclGeneral_ProcessInScenesClient_3
   \   00009C   14           DEC       A
   \   00009D   6070         JZ        ??zclGeneral_ProcessInScenesClient_3
   \   00009F   24FE         ADD       A,#-0x2
   \   0000A1   7003         JNZ       $+5
   \   0000A3   02....       LJMP      ??zclGeneral_ProcessInScenesClient_5 & 0xFFFF
   \   0000A6   02....       LJMP      ??zclGeneral_ProcessInScenesClient_6 & 0xFFFF
   2952            {
   2953              case COMMAND_SCENE_VIEW_RSP:
   2954                // Parse the rest of the incoming message
   2955                scene.ID = *pData++; // Not applicable to Remove All Response command
   \                     ??zclGeneral_ProcessInScenesClient_4:
   \   0000A9   8E82         MOV       DPL,R6
   \   0000AB   8F83         MOV       DPH,R7
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   C0E0         PUSH      A
   \   0000B0   740C         MOV       A,#0xc
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   D0E0         POP       A
   \   0000B7   F0           MOVX      @DPTR,A
   \   0000B8   E9           MOV       A,R1
   \   0000B9   FF           MOV       R7,A
   2956                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   \   0000BA   8882         MOV       DPL,R0
   \   0000BC   F583         MOV       DPH,A
   \   0000BE   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   0000C1   740D         MOV       A,#0xd
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   EA           MOV       A,R2
   \   0000C7   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   2957                pData += 2;
   2958                nameLen = *pData++; // Name length
   \                     ??CrossCallReturnLabel_267:
   \   0000CA   8882         MOV       DPL,R0
   \   0000CC   8F83         MOV       DPH,R7
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   F5..         MOV       ?V7,A
   \   0000D3   E8           MOV       A,R0
   \   0000D4   2403         ADD       A,#0x3
   \   0000D6   FE           MOV       R6,A
   \   0000D7   5001         JNC       ??zclGeneral_ProcessInScenesClient_7
   \   0000D9   0F           INC       R7
   2959                if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
   \                     ??zclGeneral_ProcessInScenesClient_7:
   \   0000DA   E5..         MOV       A,?V7
   \   0000DC   C3           CLR       C
   \   0000DD   9410         SUBB      A,#0x10
   \   0000DF   4003         JC        ??zclGeneral_ProcessInScenesClient_8
   2960                  nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
   \   0000E1   75..0F       MOV       ?V7,#0xf
   2961          
   2962                scene.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInScenesClient_8:
   \   0000E4   7411         MOV       A,#0x11
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   E5..         MOV       A,?V7
   \   0000EB   F0           MOVX      @DPTR,A
   2963                zcl_memcpy( &(scene.name[1]), pData, nameLen );
   \   0000EC                ; Setup parameters for call to function osal_memcpy
   \   0000EC   8E..         MOV       ?V4,R6
   \   0000EE   8F..         MOV       ?V5,R7
   \   0000F0   75..00       MOV       ?V6,#0x0
   \   0000F3   78..         MOV       R0,#?V4
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F8   AC..         MOV       R4,?V7
   \   0000FA   7D00         MOV       R5,#0x0
   \   0000FC   7415         MOV       A,#0x15
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000104   12....       LCALL     ?DEALLOC_XSTACK8
   2964          
   2965                pData += nameLen; // move past name, use original length
   \   000107   A8..         MOV       R0,?V7
   \   000109   EE           MOV       A,R6
   \   00010A   28           ADD       A,R0
   \   00010B   FE           MOV       R6,A
   \   00010C   E4           CLR       A
   \   00010D   3F           ADDC      A,R7
   \   00010E   FF           MOV       R7,A
   2966          
   2967                //*** Do something with the extension field(s)
   2968          
   2969                // Fall through to callback - break is left off intentionally
   2970          
   2971              case COMMAND_SCENE_ADD_RSP:
   2972              case COMMAND_SCENE_REMOVE_RSP:
   2973              case COMMAND_SCENE_REMOVE_ALL_RSP:
   2974              case COMMAND_SCENE_STORE_RSP:
   2975                if ( pCBs->pfnSceneRsp )
   \                     ??zclGeneral_ProcessInScenesClient_3:
   \   00010F   85..82       MOV       DPL,?V2
   \   000112   85..83       MOV       DPH,?V3
   \   000115   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000118   7003         JNZ       $+5
   \   00011A   02....       LJMP      ??zclGeneral_ProcessInScenesClient_9 & 0xFFFF
   2976                {
   2977                  if ( pInMsg->hdr.commandID != COMMAND_SCENE_REMOVE_ALL_RSP )
   \   00011D   85..82       MOV       DPL,?V0
   \   000120   85..83       MOV       DPH,?V1
   \   000123   E0           MOVX      A,@DPTR
   \   000124   6403         XRL       A,#0x3
   \   000126   600F         JZ        ??zclGeneral_ProcessInScenesClient_10
   2978                  {
   2979                    scene.ID = *pData++;
   \   000128   8E82         MOV       DPL,R6
   \   00012A   8F83         MOV       DPH,R7
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   C0E0         PUSH      A
   \   00012F   740C         MOV       A,#0xc
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   D0E0         POP       A
   \   000136   F0           MOVX      @DPTR,A
   2980                  }
   2981                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??zclGeneral_ProcessInScenesClient_10:
   \   000137   12....       LCALL     ?Subroutine18 & 0xFFFF
   2982                  rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_24:
   \   00013A   C0E0         PUSH      A
   \   00013C   7402         MOV       A,#0x2
   \   00013E   12....       LCALL     ?XSTACK_DISP0_8
   \   000141   D0E0         POP       A
   \   000143   F0           MOVX      @DPTR,A
   2983                  rsp.scene = &scene;
   \   000144   740A         MOV       A,#0xa
   \   000146   12....       LCALL     ?XSTACK_DISP100_8
   \   000149   7408         MOV       A,#0x8
   \   00014B   12....       LCALL     ?XSTACK_DISP0_8
   \   00014E   12....       LCALL     ?Subroutine20 & 0xFFFF
   2984          
   2985                  pCBs->pfnSceneRsp( &rsp );
   2986                }
   \                     ??CrossCallReturnLabel_256:
   \   000151   12....       LCALL     ?CALL_IND
   \   000154   02....       LJMP      ??zclGeneral_ProcessInScenesClient_9 & 0xFFFF
   2987                break;
   2988          
   2989              case COMMAND_SCENE_GET_MEMBERSHIP_RSP:
   2990                {
   2991                  uint8 *sceneList = NULL;
   \                     ??zclGeneral_ProcessInScenesClient_5:
   \   000157   75..00       MOV       ?V4,#0x0
   \   00015A   75..00       MOV       ?V5,#0x0
   2992          
   2993                  if ( rsp.status == ZCL_STATUS_SUCCESS )
   \   00015D   7403         MOV       A,#0x3
   \   00015F   12....       LCALL     ?XSTACK_DISP0_8
   \   000162   E0           MOVX      A,@DPTR
   \   000163   7041         JNZ       ??zclGeneral_ProcessInScenesClient_11
   2994                  {
   2995                    uint8 sceneCnt = *pData++;
   \   000165   8E82         MOV       DPL,R6
   \   000167   8F83         MOV       DPH,R7
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   F5..         MOV       ?V6,A
   \   00016C   E8           MOV       A,R0
   \   00016D   FE           MOV       R6,A
   \   00016E   E9           MOV       A,R1
   \   00016F   FF           MOV       R7,A
   2996          
   2997                    if ( sceneCnt > 0 )
   \   000170   E5..         MOV       A,?V6
   \   000172   6032         JZ        ??zclGeneral_ProcessInScenesClient_11
   2998                    {
   2999                      // Allocate space for the scene list
   3000                      sceneList = zcl_mem_alloc( sceneCnt );
   \   000174                ; Setup parameters for call to function osal_mem_alloc
   \   000174   FA           MOV       R2,A
   \   000175   7B00         MOV       R3,#0x0
   \   000177   12....       LCALL     ?Subroutine62 & 0xFFFF
   3001                      if ( sceneList != NULL )
   \                     ??CrossCallReturnLabel_110:
   \   00017A   602A         JZ        ??zclGeneral_ProcessInScenesClient_11
   3002                      {
   3003                        rsp.sceneCnt = sceneCnt;
   \   00017C   7404         MOV       A,#0x4
   \   00017E   12....       LCALL     ?XSTACK_DISP0_8
   \   000181   E5..         MOV       A,?V6
   \   000183   F0           MOVX      @DPTR,A
   3004                        for ( i = 0; i < sceneCnt; i++ )
   \   000184   7800         MOV       R0,#0x0
   \   000186   8018         SJMP      ??zclGeneral_ProcessInScenesClient_12
   3005                          sceneList[i] = *pData++;
   \                     ??zclGeneral_ProcessInScenesClient_13:
   \   000188   8E82         MOV       DPL,R6
   \   00018A   8F83         MOV       DPH,R7
   \   00018C   E0           MOVX      A,@DPTR
   \   00018D   C0E0         PUSH      A
   \   00018F   E8           MOV       A,R0
   \   000190   FA           MOV       R2,A
   \   000191   E5..         MOV       A,?V4
   \   000193   2A           ADD       A,R2
   \   000194   F582         MOV       DPL,A
   \   000196   E4           CLR       A
   \   000197   3B           ADDC      A,R3
   \   000198   F583         MOV       DPH,A
   \   00019A   D0E0         POP       A
   \   00019C   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00019F   08           INC       R0
   \                     ??zclGeneral_ProcessInScenesClient_12:
   \   0001A0   E8           MOV       A,R0
   \   0001A1   C3           CLR       C
   \   0001A2   95..         SUBB      A,?V6
   \   0001A4   40E2         JC        ??zclGeneral_ProcessInScenesClient_13
   3006                      }
   3007                    }
   3008                  }
   3009          
   3010                  if ( pCBs->pfnSceneRsp )
   \                     ??zclGeneral_ProcessInScenesClient_11:
   \   0001A6   85..82       MOV       DPL,?V2
   \   0001A9   85..83       MOV       DPH,?V3
   \   0001AC   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   0001AF   6029         JZ        ??zclGeneral_ProcessInScenesClient_14
   3011                  {
   3012                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0001B1   12....       LCALL     ?Subroutine18 & 0xFFFF
   3013                    rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_25:
   \   0001B4   C0E0         PUSH      A
   \   0001B6   7402         MOV       A,#0x2
   \   0001B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BB   D0E0         POP       A
   \   0001BD   F0           MOVX      @DPTR,A
   3014                    rsp.sceneList = sceneList;
   \   0001BE   7405         MOV       A,#0x5
   \   0001C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C3   E5..         MOV       A,?V4
   \   0001C5   F0           MOVX      @DPTR,A
   \   0001C6   A3           INC       DPTR
   \   0001C7   E5..         MOV       A,?V5
   \   0001C9   F0           MOVX      @DPTR,A
   3015                    rsp.scene = &scene;
   \   0001CA   740A         MOV       A,#0xa
   \   0001CC   12....       LCALL     ?XSTACK_DISP100_8
   \   0001CF   7408         MOV       A,#0x8
   \   0001D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D4   12....       LCALL     ?Subroutine20 & 0xFFFF
   3016          
   3017                    pCBs->pfnSceneRsp( &rsp);
   3018                  }
   \                     ??CrossCallReturnLabel_257:
   \   0001D7   12....       LCALL     ?CALL_IND
   3019          
   3020                  if ( sceneList != NULL )
   \                     ??zclGeneral_ProcessInScenesClient_14:
   \   0001DA   E5..         MOV       A,?V4
   \   0001DC   45..         ORL       A,?V5
   \   0001DE   600C         JZ        ??zclGeneral_ProcessInScenesClient_9
   3021                  {
   3022                    zcl_mem_free( sceneList );
   \   0001E0                ; Setup parameters for call to function osal_mem_free
   \   0001E0   AA..         MOV       R2,?V4
   \   0001E2   AB..         MOV       R3,?V5
   \   0001E4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001E7   8003         SJMP      ??zclGeneral_ProcessInScenesClient_9
   3023                  }
   3024                }
   3025                break;
   3026          
   3027              default:
   3028                stat = ZFailure;
   \                     ??zclGeneral_ProcessInScenesClient_6:
   \   0001E9   75..01       MOV       ?V10,#0x1
   3029                break;
   3030            }
   3031          
   3032            return ( stat );
   \                     ??zclGeneral_ProcessInScenesClient_9:
   \   0001EC   A9..         MOV       R1,?V10
   \   0001EE   7441         MOV       A,#0x41
   \   0001F0   02....       LJMP      ?Subroutine3 & 0xFFFF
   3033          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000003   A3           INC       DPTR
   \   000004   AE82         MOV       R6,DPL
   \   000006   AF83         MOV       R7,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000009   85..82       MOV       DPL,?V0
   \   00000C   85..83       MOV       DPH,?V1
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   22           RET
   3034          #endif // ZCL_SCENES
   3035          
   3036          #ifdef ZCL_ON_OFF
   3037          /*********************************************************************
   3038           * @fn      zclGeneral_ProcessInCmdOnOff
   3039           *
   3040           * @brief   Process in the received On/Off Command.
   3041           *
   3042           * @param   pInMsg - pointer to the incoming message
   3043           *
   3044           * @return  ZStatus_t
   3045           */
   3046          static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg,
   3047                                                      zclGeneral_AppCallbacks_t *pCBs )
   3048          {
   3049            ZStatus_t stat = ZSuccess;
   3050          
   3051            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3052            {
   3053              switch ( pInMsg->hdr.commandID )
   3054              {
   3055                case COMMAND_OFF:
   3056                case COMMAND_ON:
   3057                case COMMAND_TOGGLE:
   3058                  if ( pCBs->pfnOnOff )
   3059                  {
   3060                    pCBs->pfnOnOff( pInMsg->hdr.commandID );
   3061                  }
   3062                  break;
   3063          
   3064          #ifdef ZCL_LIGHT_LINK_ENHANCE
   3065                case COMMAND_OFF_WITH_EFFECT:
   3066                  if ( pCBs->pfnOnOff_OffWithEffect )
   3067                  {
   3068                    zclOffWithEffect_t cmd;
   3069          
   3070                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3071                    cmd.effectId = pInMsg->pData[0];
   3072                    cmd.effectVariant = pInMsg->pData[1];
   3073          
   3074                    pCBs->pfnOnOff_OffWithEffect( &cmd );
   3075                  }
   3076                  break;
   3077          
   3078                case COMMAND_ON_WITH_RECALL_GLOBAL_SCENE:
   3079                  if ( pCBs->pfnOnOff_OnWithRecallGlobalScene )
   3080                  {
   3081                    pCBs->pfnOnOff_OnWithRecallGlobalScene();
   3082                  }
   3083                  break;
   3084          
   3085                case COMMAND_ON_WITH_TIMED_OFF:
   3086                  if ( pCBs->pfnOnOff_OnWithTimedOff )
   3087                  {
   3088                    zclOnWithTimedOff_t cmd;
   3089          
   3090                    cmd.onOffCtrl.byte = pInMsg->pData[0];
   3091                    cmd.onTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   3092                    cmd.offWaitTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   3093                    pCBs->pfnOnOff_OnWithTimedOff( &cmd );
   3094                  }
   3095                  break;
   3096          #endif // ZCL_LIGHT_LINK_ENHANCE
   3097          
   3098                default:
   3099                  stat = ZFailure;
   3100                  break;
   3101              }
   3102            }
   3103            // no Client command
   3104          
   3105            return ( stat );
   3106          }
   3107          #endif // ZCL_ON_OFF
   3108          
   3109          #ifdef ZCL_LEVEL_CTRL
   3110          /*********************************************************************
   3111           * @fn      zclGeneral_ProcessInLevelControl
   3112           *
   3113           * @brief   Process in the received Level Control Command.
   3114           *
   3115           * @param   pInMsg - pointer to the incoming message
   3116           *
   3117           * @return  ZStatus_t
   3118           */
   3119          static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg,
   3120                                                             zclGeneral_AppCallbacks_t *pCBs )
   3121          {
   3122            uint8 withOnOff = FALSE;
   3123            ZStatus_t stat = ZSuccess;
   3124          
   3125            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3126            {
   3127              switch ( pInMsg->hdr.commandID )
   3128              {
   3129                case COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF:
   3130                  withOnOff = TRUE;
   3131                  // fall through
   3132                case COMMAND_LEVEL_MOVE_TO_LEVEL:
   3133                  if ( pCBs->pfnLevelControlMoveToLevel )
   3134                  {
   3135                    zclLCMoveToLevel_t cmd;
   3136          
   3137                    cmd.level = pInMsg->pData[0];
   3138          
   3139                    if ( ( cmd.level >= ATTR_LEVEL_MIN_LEVEL ) &&
   3140                         ( cmd.level <= ATTR_LEVEL_MAX_LEVEL ) )
   3141                    {
   3142                      cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   3143                      cmd.withOnOff = withOnOff;
   3144          
   3145                      pCBs->pfnLevelControlMoveToLevel( &cmd );
   3146                    }
   3147                    else
   3148                    {
   3149                      // level range requested is invalid
   3150                      stat = ZCL_STATUS_INVALID_VALUE;
   3151                    }
   3152                  }
   3153                  break;
   3154          
   3155                case COMMAND_LEVEL_MOVE_WITH_ON_OFF:
   3156                  withOnOff = TRUE;
   3157                  // fall through
   3158                case COMMAND_LEVEL_MOVE:
   3159                  if ( pCBs->pfnLevelControlMove )
   3160                  {
   3161                    zclLCMove_t cmd;
   3162          
   3163                    cmd.moveMode = pInMsg->pData[0];
   3164                    cmd.rate = pInMsg->pData[1];
   3165                    cmd.withOnOff = withOnOff;
   3166          
   3167                    pCBs->pfnLevelControlMove( &cmd );
   3168                  }
   3169                  break;
   3170          
   3171                case COMMAND_LEVEL_STEP_WITH_ON_OFF:
   3172                  withOnOff = TRUE;
   3173                  // fall through
   3174                case COMMAND_LEVEL_STEP:
   3175                  if ( pCBs->pfnLevelControlStep )
   3176                  {
   3177                    zclLCStep_t cmd;
   3178          
   3179                    cmd.stepMode = pInMsg->pData[0];
   3180                    cmd.amount =  pInMsg->pData[1];
   3181                    cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   3182                    cmd.withOnOff = withOnOff;
   3183          
   3184                    pCBs->pfnLevelControlStep( &cmd );
   3185                  }
   3186                  break;
   3187          
   3188                case COMMAND_LEVEL_STOP:
   3189                case COMMAND_LEVEL_STOP_WITH_ON_OFF:
   3190                  // Both Stop commands are identical
   3191                  if ( pCBs->pfnLevelControlStop )
   3192                  {
   3193                    pCBs->pfnLevelControlStop();
   3194                  }
   3195                  break;
   3196          
   3197                default:
   3198                  stat = ZFailure;
   3199                  break;
   3200              }
   3201            }
   3202            // no Client command
   3203          
   3204            return ( stat );
   3205          }
   3206          #endif // ZCL_LEVEL_CTRL
   3207          
   3208          #ifdef ZCL_ALARMS
   3209          /*********************************************************************
   3210           * @fn      zclGeneral_AddAlarm
   3211           *
   3212           * @brief   Add an alarm for a cluster
   3213           *
   3214           * @param   endpoint -
   3215           * @param   alarm - new alarm item
   3216           *
   3217           * @return  ZStatus_t
   3218           */
   3219          ZStatus_t zclGeneral_AddAlarm( uint8 endpoint, zclGeneral_Alarm_t *alarm )
   3220          {
   3221            zclGenAlarmItem_t *pNewItem;
   3222            zclGenAlarmItem_t *pLoop;
   3223          
   3224            // Fill in the new profile list
   3225            pNewItem = zcl_mem_alloc( sizeof( zclGenAlarmItem_t ) );
   3226            if ( pNewItem == NULL )
   3227              return ( ZMemError );
   3228          
   3229            // Fill in the plugin record.
   3230            pNewItem->next = (zclGenAlarmItem_t *)NULL;
   3231            pNewItem->endpoint =  endpoint;
   3232            zcl_memcpy( (uint8*)(&pNewItem->alarm), (uint8*)alarm, sizeof ( zclGeneral_Alarm_t ) );
   3233          
   3234            // Find spot in list
   3235            if (  zclGenAlarmTable == NULL )
   3236            {
   3237              zclGenAlarmTable = pNewItem;
   3238            }
   3239            else
   3240            {
   3241              // Look for end of list
   3242              pLoop = zclGenAlarmTable;
   3243              while ( pLoop->next != NULL )
   3244                pLoop = pLoop->next;
   3245          
   3246              // Put new item at end of list
   3247              pLoop->next = pNewItem;
   3248            }
   3249          
   3250            return ( ZSuccess );
   3251          }
   3252          
   3253          /*********************************************************************
   3254           * @fn      zclGeneral_FindAlarm
   3255           *
   3256           * @brief   Find an alarm with alarmCode and clusterID
   3257           *
   3258           * @param   endpoint -
   3259           * @param   groupID - what group the scene belongs to
   3260           * @param   sceneID - ID to look for scene
   3261           *
   3262           * @return  a pointer to the alarm information, NULL if not found
   3263           */
   3264          zclGeneral_Alarm_t *zclGeneral_FindAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
   3265          {
   3266            zclGenAlarmItem_t *pLoop;
   3267          
   3268            // Look for the alarm
   3269            pLoop = zclGenAlarmTable;
   3270            while ( pLoop )
   3271            {
   3272              if ( pLoop->endpoint == endpoint &&
   3273                   pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
   3274              {
   3275                return ( &(pLoop->alarm) );
   3276              }
   3277              pLoop = pLoop->next;
   3278            }
   3279          
   3280            return ( (zclGeneral_Alarm_t *)NULL );
   3281          }
   3282          
   3283          /*********************************************************************
   3284           * @fn      zclGeneral_FindEarliestAlarm
   3285           *
   3286           * @brief   Find an alarm with the earliest timestamp
   3287           *
   3288           * @param   endpoint -
   3289           *
   3290           * @return  a pointer to the alarm information, NULL if not found
   3291           */
   3292          zclGeneral_Alarm_t *zclGeneral_FindEarliestAlarm( uint8 endpoint )
   3293          {
   3294            zclGenAlarmItem_t *pLoop;
   3295            zclGenAlarmItem_t earliestAlarm;
   3296            zclGenAlarmItem_t *pEarliestAlarm = &earliestAlarm;
   3297          
   3298            pEarliestAlarm->alarm.timeStamp = 0xFFFFFFFF;
   3299          
   3300            // Look for alarm with earliest time
   3301            pLoop = zclGenAlarmTable;
   3302            while ( pLoop )
   3303            {
   3304              if ( pLoop->endpoint == endpoint &&
   3305                   pLoop->alarm.timeStamp < pEarliestAlarm->alarm.timeStamp )
   3306              {
   3307                pEarliestAlarm = pLoop;
   3308              }
   3309              pLoop = pLoop->next;
   3310            }
   3311          
   3312            if ( pEarliestAlarm->alarm.timeStamp != 0xFFFFFFFF )
   3313              return ( &(pEarliestAlarm->alarm) );
   3314          
   3315            // No alarm
   3316            return ( (zclGeneral_Alarm_t *)NULL );
   3317          }
   3318          
   3319          /*********************************************************************
   3320           * @fn      zclGeneral_ResetAlarm
   3321           *
   3322           * @brief   Remove an alarm with alarmCode and clusterID
   3323           *
   3324           * @param   endpoint -
   3325           * @param   alarmCode -
   3326           * @param   clusterID -
   3327           *
   3328           * @return  TRUE if removed, FALSE if not found
   3329           */
   3330          void zclGeneral_ResetAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
   3331          {
   3332            zclGenAlarmItem_t *pLoop;
   3333            zclGenAlarmItem_t *pPrev;
   3334          
   3335            // Look for end of list
   3336            pLoop = zclGenAlarmTable;
   3337            pPrev = NULL;
   3338            while ( pLoop )
   3339            {
   3340              if ( pLoop->endpoint == endpoint &&
   3341                   pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
   3342              {
   3343                if ( pPrev == NULL )
   3344                  zclGenAlarmTable = pLoop->next;
   3345                else
   3346                  pPrev->next = pLoop->next;
   3347          
   3348                // Free the memory
   3349                zcl_mem_free( pLoop );
   3350          
   3351                // Notify the Application so that if the alarm condition still active then
   3352                // a new notification will be generated, and a new alarm record will be
   3353                // added to the alarm log
   3354                // zclGeneral_NotifyReset( alarmCode, clusterID ); // callback function?
   3355                return;
   3356              }
   3357              pPrev = pLoop;
   3358              pLoop = pLoop->next;
   3359            }
   3360          }
   3361          
   3362          /*********************************************************************
   3363           * @fn      zclGeneral_ResetAllAlarms
   3364           *
   3365           * @brief   Remove all alarms with endpoint
   3366           *
   3367           * @param   endpoint -
   3368           * @param   notifyApp -
   3369           *
   3370           * @return  none
   3371           */
   3372          void zclGeneral_ResetAllAlarms( uint8 endpoint, uint8 notifyApp )
   3373          {
   3374            zclGenAlarmItem_t *pLoop;
   3375            zclGenAlarmItem_t *pPrev;
   3376            zclGenAlarmItem_t *pNext;
   3377          
   3378            // Look for end of list
   3379            pLoop = zclGenAlarmTable;
   3380            pPrev = NULL;
   3381            while ( pLoop )
   3382            {
   3383              if (  pLoop->endpoint == endpoint )
   3384              {
   3385                if ( pPrev == NULL )
   3386                  zclGenAlarmTable = pLoop->next;
   3387                else
   3388                  pPrev->next = pLoop->next;
   3389          
   3390                pNext = pLoop->next;
   3391          
   3392                // Free the memory
   3393                zcl_mem_free( pLoop );
   3394          
   3395                pLoop = pNext;
   3396              }
   3397              else
   3398              {
   3399                pPrev = pLoop;
   3400                pLoop = pLoop->next;
   3401              }
   3402            }
   3403          
   3404            if ( notifyApp )
   3405            {
   3406              // Notify the Application so that if any alarm conditions still active then
   3407              // a new notification will be generated, and a new alarm record will be
   3408              // added to the alarm log
   3409              // zclGeneral_NotifyResetAll(); // callback function?
   3410            }
   3411          }
   3412          
   3413          /*********************************************************************
   3414           * @fn      zclGeneral_ProcessInAlarmsServer
   3415           *
   3416           * @brief   Process in the received Alarms Command.
   3417           *
   3418           * @param   pInMsg - pointer to the incoming message
   3419           *
   3420           * @return  ZStatus_t
   3421           */
   3422          static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg,
   3423                                                             zclGeneral_AppCallbacks_t *pCBs )
   3424          {
   3425            zclAlarm_t alarm;
   3426            zclGeneral_Alarm_t *pAlarm;
   3427            uint8 *pData = pInMsg->pData;
   3428            ZStatus_t stat = ZSuccess;
   3429          
   3430            switch ( pInMsg->hdr.commandID )
   3431            {
   3432              case COMMAND_ALARMS_RESET:
   3433                if ( pCBs->pfnAlarm )
   3434                {
   3435                  alarm.cmdID = pInMsg->hdr.commandID;
   3436                  alarm.alarmCode = pData[0];
   3437                  alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
   3438          
   3439                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3440                }
   3441                else
   3442                {
   3443                  stat = ZCL_STATUS_FAILURE;
   3444                }
   3445                break;
   3446          
   3447              case COMMAND_ALARMS_RESET_ALL:
   3448                if ( pCBs->pfnAlarm )
   3449                {
   3450                  alarm.cmdID = pInMsg->hdr.commandID;
   3451          
   3452                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3453                }
   3454                else
   3455                {
   3456                  stat = ZCL_STATUS_FAILURE;
   3457                }
   3458                break;
   3459          
   3460              case COMMAND_ALARMS_GET:
   3461                if ( pCBs->pfnAlarm )
   3462                {
   3463                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3464                  alarm.cmdID = pInMsg->hdr.commandID;
   3465          
   3466                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3467          
   3468                  pAlarm = zclGeneral_FindEarliestAlarm( pInMsg->msg->endPoint );
   3469                  if ( pAlarm )
   3470                  {
   3471                    // Send a response back
   3472                    zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3473                                                     ZCL_STATUS_SUCCESS, pAlarm->code,
   3474                                                     pAlarm->clusterID, pAlarm->timeStamp,
   3475                                                     true, pInMsg->hdr.transSeqNum );
   3476                    // Remove the entry from the Alarm table
   3477                    zclGeneral_ResetAlarm( pInMsg->msg->endPoint, pAlarm->code, pAlarm->clusterID );
   3478                  }
   3479                  else
   3480                  {
   3481                    // Send a response back
   3482                    zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3483                                                     ZCL_STATUS_NOT_FOUND, 0, 0, 0,
   3484                                                     true, pInMsg->hdr.transSeqNum );
   3485                  }
   3486                  stat = ZCL_STATUS_CMD_HAS_RSP;
   3487                }
   3488                else
   3489                {
   3490                  stat = ZCL_STATUS_FAILURE;
   3491                }
   3492                break;
   3493          
   3494              case COMMAND_ALARMS_RESET_LOG:
   3495                if ( pCBs->pfnAlarm )
   3496                {
   3497                  alarm.cmdID = pInMsg->hdr.commandID;
   3498          
   3499                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3500          
   3501                  zclGeneral_ResetAllAlarms( pInMsg->msg->endPoint, FALSE );
   3502                }
   3503                else
   3504                {
   3505                  stat = ZCL_STATUS_FAILURE;
   3506                }
   3507                break;
   3508          
   3509          #ifdef SE_UK_EXT
   3510              case COMMAND_ALARMS_PUBLISH_EVENT_LOG:
   3511                if ( pCBs->pfnPublishEventLog )
   3512                {
   3513                  zclPublishEventLog_t eventLog;
   3514          
   3515                  eventLog.logID = *pData++;
   3516                  eventLog.cmdIndex = *pData++;
   3517                  eventLog.totalCmds = *pData++;
   3518          
   3519                  // First try to find out number of Sub Log Payloads
   3520                  eventLog.numSubLogs = (pInMsg->pDataLen-3)/(1+4); // event ID + event time
   3521                  if ( eventLog.numSubLogs > 0 )
   3522                  {
   3523                    // Try to alloc space for Log Payload
   3524                    eventLog.pLogs = (zclEventLogPayload_t *)zcl_mem_alloc( sizeof( zclEventLogPayload_t ) *
   3525                                                                             eventLog.numSubLogs );
   3526                    if ( eventLog.pLogs != NULL )
   3527                    {
   3528                      // Copy Log Payload
   3529                      for ( uint8 i = 0; i < eventLog.numSubLogs; i++ )
   3530                      {
   3531                        eventLog.pLogs[i].eventId = *pData++;
   3532                        eventLog.pLogs[i].eventTime = zcl_build_uint32( pData, 4 );
   3533                        pData += 4;
   3534                      }
   3535                    }
   3536                    else
   3537                    {
   3538                      stat = ZCL_STATUS_SOFTWARE_FAILURE;
   3539                    }
   3540                  }
   3541                  else
   3542                  {
   3543                    eventLog.pLogs = NULL;
   3544                  }
   3545          
   3546                  if ( stat == ZSuccess )
   3547                  {
   3548                    pCBs->pfnPublishEventLog( &(pInMsg->msg->srcAddr), &eventLog );
   3549                  }
   3550          
   3551                  if ( eventLog.pLogs != NULL )
   3552                  {
   3553                    zcl_mem_free( eventLog.pLogs );
   3554                  }
   3555                }
   3556                break;
   3557          #endif // SE_UK_EXT
   3558          
   3559              default:
   3560                stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   3561                break;
   3562            }
   3563          
   3564            return ( stat );
   3565          }
   3566          
   3567          /*********************************************************************
   3568           * @fn      zclGeneral_ProcessInAlarmsClient
   3569           *
   3570           * @brief   Process in the received Alarms Command.
   3571           *
   3572           * @param   pInMsg - pointer to the incoming message
   3573           *
   3574           * @return  ZStatus_t
   3575           */
   3576          static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg,
   3577                                                             zclGeneral_AppCallbacks_t *pCBs )
   3578          {
   3579            uint8 *pData = pInMsg->pData;
   3580            zclAlarm_t alarm;
   3581            ZStatus_t stat = ZSuccess;
   3582          
   3583            zcl_memset( (uint8*)&alarm, 0, sizeof( zclAlarm_t ) );
   3584          
   3585            switch ( pInMsg->hdr.commandID )
   3586            {
   3587              case COMMAND_ALARMS_ALARM:
   3588                if ( pCBs->pfnAlarm )
   3589                {
   3590                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3591                  alarm.cmdID = pInMsg->hdr.commandID;
   3592                  alarm.alarmCode = pData[0];
   3593                  alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
   3594          
   3595                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3596                }
   3597                else
   3598                {
   3599                  stat = ZCL_STATUS_FAILURE;
   3600                }
   3601                break;
   3602          
   3603              case COMMAND_ALARMS_GET_RSP:
   3604                if ( pCBs->pfnAlarm )
   3605                {
   3606                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3607                  alarm.cmdID = pInMsg->hdr.commandID;
   3608                  alarm.alarmCode = *pData++;
   3609                  alarm.clusterID = BUILD_UINT16( pData[0], pData[1] );
   3610          
   3611                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3612                }
   3613                else
   3614                {
   3615                  stat = ZCL_STATUS_FAILURE;
   3616                }
   3617                break;
   3618          
   3619          #ifdef SE_UK_EXT
   3620              case COMMAND_ALARMS_GET_EVENT_LOG:
   3621                if ( pCBs->pfnGetEventLog )
   3622                {
   3623                  zclGetEventLog_t eventLog;
   3624          
   3625                  eventLog.logID = *pData++;
   3626                  eventLog.startTime = zcl_build_uint32( pData, 4 );
   3627                  pData += 4;
   3628                  eventLog.endTime = zcl_build_uint32( pData, 4 );
   3629                  pData += 4;
   3630                  eventLog.numEvents = *pData;
   3631          
   3632                  pCBs->pfnGetEventLog( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3633                                        &eventLog, pInMsg->hdr.transSeqNum );
   3634                }
   3635                break;
   3636          #endif // SE_UK_EXT
   3637          
   3638              default:
   3639                stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   3640                break;
   3641            }
   3642          
   3643            return ( stat );
   3644          }
   3645          #endif // ZCL_ALARMS
   3646          
   3647          #ifdef ZCL_LOCATION
   3648          /*********************************************************************
   3649           * @fn      zclGeneral_ProcessInLocationServer
   3650           *
   3651           * @brief   Process in the received Location Command.
   3652           *
   3653           * @param   pInMsg - pointer to the incoming message
   3654           *
   3655           * @return  ZStatus_t
   3656           */
   3657          static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg,
   3658                                                               zclGeneral_AppCallbacks_t *pCBs )
   3659          {
   3660            uint8 *pData = pInMsg->pData;
   3661            zclLocation_t cmd;
   3662            ZStatus_t stat = ZSuccess;
   3663          
   3664            zcl_memset( (uint8*)&cmd, 0, sizeof( zclLocation_t ) );
   3665          
   3666            switch ( pInMsg->hdr.commandID )
   3667            {
   3668              case COMMAND_LOCATION_SET_ABSOLUTE:
   3669                cmd.un.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
   3670                pData += 2;
   3671                cmd.un.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
   3672                pData += 2;
   3673                cmd.un.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
   3674                pData += 2;
   3675                cmd.un.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
   3676                pData += 2;
   3677                cmd.un.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3678          
   3679                if ( pCBs->pfnLocation )
   3680                {
   3681                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3682                  cmd.cmdID = pInMsg->hdr.commandID;
   3683          
   3684                  // Update the absolute location info
   3685                  pCBs->pfnLocation( &cmd );
   3686                }
   3687                break;
   3688          
   3689              case COMMAND_LOCATION_SET_DEV_CFG:
   3690                cmd.un.devCfg.power = BUILD_UINT16( pData[0], pData[1] );
   3691                pData += 2;
   3692                cmd.un.devCfg.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3693                pData += 2;
   3694                cmd.un.devCfg.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
   3695                pData += 2;
   3696                cmd.un.devCfg.numMeasurements = *pData++;
   3697                cmd.un.devCfg.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
   3698          
   3699                if ( pCBs->pfnLocation )
   3700                {
   3701                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3702                  cmd.cmdID = pInMsg->hdr.commandID;
   3703          
   3704                  // Update the device configuration info
   3705                  pCBs->pfnLocation( &cmd );
   3706                }
   3707                break;
   3708          
   3709              case COMMAND_LOCATION_GET_DEV_CFG:
   3710                cmd.un.ieeeAddr = pData;
   3711          
   3712                if ( pCBs->pfnLocation )
   3713                {
   3714                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3715                  cmd.cmdID = pInMsg->hdr.commandID;
   3716                  cmd.seqNum = pInMsg->hdr.transSeqNum;
   3717          
   3718                  // Retreive the Device Configuration
   3719                  pCBs->pfnLocation( &cmd );
   3720                }
   3721                stat = ZCL_STATUS_CMD_HAS_RSP;
   3722                break;
   3723          
   3724              case COMMAND_LOCATION_GET_DATA:
   3725                cmd.un.loc.bitmap.locByte = *pData++;
   3726                cmd.un.loc.numResponses = *pData++;
   3727          
   3728                if ( cmd.un.loc.brdcastResponse == 0 ) // command is sent as a unicast
   3729                  zcl_memcpy( cmd.un.loc.targetAddr, pData, 8 );
   3730          
   3731                if ( pCBs->pfnLocation )
   3732                {
   3733                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3734                  cmd.cmdID = pInMsg->hdr.commandID;
   3735                  cmd.seqNum = pInMsg->hdr.transSeqNum;
   3736          
   3737                  // Retreive the Location Data
   3738                  pCBs->pfnLocation( &cmd );
   3739                }
   3740                stat = ZCL_STATUS_CMD_HAS_RSP;
   3741                break;
   3742          
   3743              default:
   3744                stat = ZFailure;
   3745                break;
   3746            }
   3747          
   3748            return ( stat );
   3749          }
   3750          
   3751          /*********************************************************************
   3752           * @fn      zclGeneral_ProcessInLocationDataRsp
   3753           *
   3754           * @brief   Process in the received Location Command.
   3755           *
   3756           * @param   pInMsg - pointer to the incoming message
   3757           *
   3758           * @return  ZStatus_t
   3759           */
   3760          static void zclGeneral_ProcessInLocationDataRsp( zclIncoming_t *pInMsg,
   3761                                                           zclGeneral_AppCallbacks_t *pCBs )
   3762          {
   3763            uint8 *pData = pInMsg->pData;
   3764            zclLocationRsp_t rsp;
   3765          
   3766            zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
   3767          
   3768            if ( pCBs->pfnLocationRsp )
   3769            {
   3770              if ( pInMsg->hdr.commandID == COMMAND_LOCATION_DATA_RSP )
   3771                rsp.un.loc.status = *pData++;
   3772          
   3773              if ( pInMsg->hdr.commandID != COMMAND_LOCATION_DATA_RSP ||
   3774                   rsp.un.loc.status == ZCL_STATUS_SUCCESS )
   3775              {
   3776                rsp.un.loc.data.type = *pData++;
   3777                rsp.un.loc.data.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
   3778                pData += 2;
   3779                rsp.un.loc.data.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
   3780                pData += 2;
   3781          
   3782                if ( locationType2D( rsp.un.loc.data.type ) == 0 )
   3783                {
   3784                  rsp.un.loc.data.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
   3785                  pData += 2;
   3786                }
   3787          
   3788                if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   3789                {
   3790                  rsp.un.loc.data.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
   3791                  pData += 2;
   3792                  rsp.un.loc.data.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3793                  pData += 2;
   3794                }
   3795          
   3796                if ( locationTypeAbsolute( rsp.un.loc.data.type ) == 0 )
   3797                {
   3798                  if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   3799                    rsp.un.loc.data.calcLoc.locationMethod = *pData++;
   3800          
   3801                  rsp.un.loc.data.calcLoc.qualityMeasure = *pData++;
   3802                  rsp.un.loc.data.calcLoc.locationAge = BUILD_UINT16( pData[0], pData[1] );
   3803                }
   3804              }
   3805          
   3806              rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3807              rsp.cmdID = pInMsg->hdr.commandID;
   3808          
   3809              // Notify the Application
   3810              pCBs->pfnLocationRsp( &rsp );
   3811            }
   3812          }
   3813          
   3814          /*********************************************************************
   3815           * @fn      zclGeneral_ProcessInLocationClient
   3816           *
   3817           * @brief   Process in the received Location Command.
   3818           *
   3819           * @param   pInMsg - pointer to the incoming message
   3820           *
   3821           * @return  ZStatus_t
   3822           */
   3823          static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg,
   3824                                                               zclGeneral_AppCallbacks_t *pCBs )
   3825          {
   3826            uint8 *pData = pInMsg->pData;
   3827            zclLocationRsp_t rsp;
   3828            ZStatus_t stat = ZSuccess;
   3829          
   3830            zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
   3831          
   3832            switch ( pInMsg->hdr.commandID )
   3833            {
   3834              case COMMAND_LOCATION_DEV_CFG_RSP:
   3835                if ( pCBs->pfnLocationRsp )
   3836                {
   3837                  rsp.un.devCfg.status = *pData++;
   3838                  if ( rsp.un.devCfg.status == ZCL_STATUS_SUCCESS )
   3839                  {
   3840                    rsp.un.devCfg.data.power = BUILD_UINT16( pData[0], pData[1] );
   3841                    pData += 2;
   3842                    rsp.un.devCfg.data.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3843                    pData += 2;
   3844                    rsp.un.devCfg.data.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
   3845                    pData += 2;
   3846                    rsp.un.devCfg.data.numMeasurements = *pData++;
   3847                    rsp.un.devCfg.data.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
   3848          
   3849                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3850                    rsp.cmdID = pInMsg->hdr.commandID;
   3851          
   3852                    // Notify the Application
   3853                    pCBs->pfnLocationRsp( &rsp );
   3854                  }
   3855                }
   3856                break;
   3857          
   3858              case COMMAND_LOCATION_DATA_RSP:
   3859              case COMMAND_LOCATION_DATA_NOTIF:
   3860              case COMMAND_LOCATION_COMPACT_DATA_NOTIF:
   3861                zclGeneral_ProcessInLocationDataRsp( pInMsg, pCBs );
   3862                break;
   3863          
   3864              case COMMAND_LOCATION_RSSI_PING:
   3865                if ( pCBs->pfnLocationRsp )
   3866                {
   3867                  rsp.un.locationType = *pData;
   3868          
   3869                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3870                  rsp.cmdID = pInMsg->hdr.commandID;
   3871          
   3872                  // Notify the Application
   3873                  pCBs->pfnLocationRsp( &rsp );
   3874                }
   3875                break;
   3876          
   3877              default:
   3878                stat = ZFailure;
   3879                break;
   3880            }
   3881          
   3882            return ( stat );
   3883          }
   3884          #endif // ZCL_LOCATION
   3885          
   3886          #ifdef ZCL_SCENES
   3887          #if !defined ( ZCL_STANDALONE )
   3888          /*********************************************************************
   3889           * @fn      zclGeneral_ScenesInitNV
   3890           *
   3891           * @brief   Initialize the NV Scene Table Items
   3892           *
   3893           * @param   none
   3894           *
   3895           * @return  number of scenes
   3896           */
   3897          static uint8 zclGeneral_ScenesInitNV( void )
   3898          {
   3899            uint8  status;
   3900            uint16 size;
   3901          
   3902            size = (uint16)((sizeof ( nvGenScenesHdr_t ))
   3903                            + ( sizeof( zclGenSceneNVItem_t ) * ZCL_GEN_MAX_SCENES ));
   3904          
   3905            status = zcl_nv_item_init( ZCD_NV_SCENE_TABLE, size, NULL );
   3906          
   3907            if ( status != ZSUCCESS )
   3908            {
   3909              zclGeneral_ScenesSetDefaultNV();
   3910            }
   3911          
   3912            return status;
   3913          }
   3914          #endif // ZCL_STANDALONE
   3915          
   3916          #if !defined ( ZCL_STANDALONE )
   3917          /*********************************************************************
   3918           * @fn          zclGeneral_ScenesSetDefaultNV
   3919           *
   3920           * @brief       Write the defaults to NV
   3921           *
   3922           * @param       none
   3923           *
   3924           * @return      none
   3925           */
   3926          static void zclGeneral_ScenesSetDefaultNV( void )
   3927          {
   3928            nvGenScenesHdr_t hdr;
   3929          
   3930            // Initialize the header
   3931            hdr.numRecs = 0;
   3932          
   3933            // Save off the header
   3934            zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
   3935          }
   3936          #endif // ZCL_STANDALONE
   3937          
   3938          #if !defined ( ZCL_STANDALONE )
   3939          /*********************************************************************
   3940           * @fn          zclGeneral_ScenesWriteNV
   3941           *
   3942           * @brief       Save the Scene Table in NV
   3943           *
   3944           * @param       none
   3945           *
   3946           * @return      none
   3947           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3948          static void zclGeneral_ScenesWriteNV( void )
   \                     zclGeneral_ScenesWriteNV:
   3949          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 58
   \   000005   74C6         MOV       A,#-0x3a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3950            nvGenScenesHdr_t hdr;
   3951            zclGenSceneItem_t *pLoop;
   3952            zclGenSceneNVItem_t item;
   3953          
   3954            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
   3955          
   3956            // Look for end of list
   3957            pLoop = zclGenSceneTable;
   \   000014   90....       MOV       DPTR,#zclGenSceneTable
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FE           MOV       R6,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   8074         SJMP      ??zclGeneral_ScenesWriteNV_0
   3958            while ( pLoop )
   3959            {
   3960              // Build the record
   3961              item.endpoint = pLoop->endpoint;
   \                     ??zclGeneral_ScenesWriteNV_1:
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C0E0         PUSH      A
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   D0E0         POP       A
   \   00002D   12....       LCALL     ?Subroutine55 & 0xFFFF
   3962              zcl_memcpy( &(item.scene), &(pLoop->scene), sizeof ( zclGeneral_Scene_t ) );
   \                     ??CrossCallReturnLabel_101:
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A982         MOV       R1,DPL
   \   000034   AA83         MOV       R2,DPH
   \   000036   89..         MOV       ?V0,R1
   \   000038   8A..         MOV       ?V1,R2
   \   00003A   75..00       MOV       ?V2,#0x0
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000042   7C37         MOV       R4,#0x37
   \   000044   7D00         MOV       R5,#0x0
   \   000046   7406         MOV       A,#0x6
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   3963          
   3964              // Save the record to NV
   3965              zcl_nv_write( ZCD_NV_SCENE_TABLE,
   3966                      (uint16)((sizeof( nvGenScenesHdr_t )) + (hdr.numRecs * sizeof ( zclGenSceneNVItem_t ))),
   3967                              sizeof ( zclGenSceneNVItem_t ), &item );
   \   000051                ; Setup parameters for call to function osal_nv_write
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?XSTACK_DISP100_8
   \   000056   88..         MOV       ?V0,R0
   \   000058   89..         MOV       ?V1,R1
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005F   75..38       MOV       ?V0,#0x38
   \   000062   75..00       MOV       ?V1,#0x0
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006A   7404         MOV       A,#0x4
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000072   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000075   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000078   7404         MOV       A,#0x4
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   3968          
   3969              hdr.numRecs++;
   \   00007D   85..82       MOV       DPL,?XSP + 0
   \   000080   85..83       MOV       DPH,?XSP + 1
   \   000083   E0           MOVX      A,@DPTR
   \   000084   2401         ADD       A,#0x1
   \   000086   F0           MOVX      @DPTR,A
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   3400         ADDC      A,#0x0
   \   00008B   F0           MOVX      @DPTR,A
   3970          
   3971              pLoop = pLoop->next;
   \   00008C   12....       LCALL     ?Subroutine42 & 0xFFFF
   3972            }
   \                     ??CrossCallReturnLabel_309:
   \   00008F   FE           MOV       R6,A
   \   000090   E9           MOV       A,R1
   \                     ??zclGeneral_ScenesWriteNV_0:
   \   000091   FF           MOV       R7,A
   \   000092   EE           MOV       A,R6
   \   000093   4F           ORL       A,R7
   \   000094   7087         JNZ       ??zclGeneral_ScenesWriteNV_1
   3973          
   3974            // Save off the header
   3975            zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
   \   000096                ; Setup parameters for call to function osal_nv_write
   \   000096   A8..         MOV       R0,?XSP + 0
   \   000098   A9..         MOV       R1,?XSP + 1
   \   00009A   88..         MOV       ?V0,R0
   \   00009C   89..         MOV       ?V1,R1
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   75..02       MOV       ?V0,#0x2
   \   0000A6   75..00       MOV       ?V1,#0x0
   \   0000A9   78..         MOV       R0,#?V0
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AE   7C00         MOV       R4,#0x0
   \   0000B0   7D00         MOV       R5,#0x0
   \   0000B2   7A91         MOV       R2,#-0x6f
   \   0000B4   7B00         MOV       R3,#0x0
   \   0000B6   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B9   7404         MOV       A,#0x4
   \   0000BB   12....       LCALL     ?DEALLOC_XSTACK8
   3976          }
   \   0000BE   743A         MOV       A,#0x3a
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C3   7F03         MOV       R7,#0x3
   \   0000C5   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   75F038       MOV       B,#0x38
   \   000003   A4           MUL       AB
   \   000004   F8           MOV       R0,A
   \   000005   AAF0         MOV       R2,B
   \   000007   75F038       MOV       B,#0x38
   \   00000A   E9           MOV       A,R1
   \   00000B   A4           MUL       AB
   \   00000C   2A           ADD       A,R2
   \   00000D   F9           MOV       R1,A
   \   00000E   E8           MOV       A,R0
   \   00000F   2402         ADD       A,#0x2
   \   000011   FC           MOV       R4,A
   \   000012   E4           CLR       A
   \   000013   39           ADDC      A,R1
   \   000014   FD           MOV       R5,A
   \   000015   7A91         MOV       R2,#-0x6f
   \   000017   7B00         MOV       R3,#0x0
   \   000019   22           RET
   3977          #endif // ZCL_STANDALONE
   3978          
   3979          #if !defined ( ZCL_STANDALONE )
   3980          /*********************************************************************
   3981           * @fn          zclGeneral_ScenesRestoreFromNV
   3982           *
   3983           * @brief       Restore the Scene table from NV
   3984           *
   3985           * @param       none
   3986           *
   3987           * @return      Number of entries restored
   3988           */
   3989          static uint16 zclGeneral_ScenesRestoreFromNV( void )
   3990          {
   3991            uint16 x;
   3992            nvGenScenesHdr_t hdr;
   3993          
   3994            zclGenSceneNVItem_t item;
   3995            uint16 numAdded = 0;
   3996          
   3997            if ( zcl_nv_read( ZCD_NV_SCENE_TABLE, 0, sizeof(nvGenScenesHdr_t), &hdr ) == ZSuccess )
   3998            {
   3999              // Read in the device list
   4000              for ( x = 0; x < hdr.numRecs; x++ )
   4001              {
   4002                if ( zcl_nv_read( ZCD_NV_SCENE_TABLE,
   4003                          (uint16)(sizeof(nvGenScenesHdr_t) + (x * sizeof ( zclGenSceneNVItem_t ))),
   4004                                            sizeof ( zclGenSceneNVItem_t ), &item ) == ZSUCCESS )
   4005                {
   4006                  // Add the scene
   4007                  if ( zclGeneral_AddScene( item.endpoint, &(item.scene) ) == ZSuccess )
   4008                  {
   4009                    numAdded++;
   4010                  }
   4011                }
   4012              }
   4013            }
   4014          
   4015            return ( numAdded );
   4016          }
   4017          #endif // ZCL_STANDALONE
   4018          
   4019          #if !defined ( ZCL_STANDALONE )
   4020          /*********************************************************************
   4021           * @fn          zclGeneral_ScenesInit
   4022           *
   4023           * @brief       Initialize the scenes table
   4024           *
   4025           * @param       none
   4026           *
   4027           * @return      none
   4028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4029          void zclGeneral_ScenesInit( void )
   \                     zclGeneral_ScenesInit:
   4030          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 58
   \   000005   74C6         MOV       A,#-0x3a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   4031            // Initialize NV items
   4032            zclGeneral_ScenesInitNV();
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR       A
   \   00000B   F5..         MOV       ?V0,A
   \   00000D   F5..         MOV       ?V1,A
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   7C82         MOV       R4,#-0x7e
   \   000016   7D03         MOV       R5,#0x3
   \   000018   7A91         MOV       R2,#-0x6f
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   E9           MOV       A,R1
   \   000025   602A         JZ        ??zclGeneral_ScenesInit_0
   \   000027   85..82       MOV       DPL,?XSP + 0
   \   00002A   85..83       MOV       DPH,?XSP + 1
   \   00002D   E4           CLR       A
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   12....       LCALL     ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   75..02       MOV       ?V0,#0x2
   \   000039   75..00       MOV       ?V1,#0x0
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV       R4,#0x0
   \   000043   7D00         MOV       R5,#0x0
   \   000045   7A91         MOV       R2,#-0x6f
   \   000047   7B00         MOV       R3,#0x0
   \   000049   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00004C   7404         MOV       A,#0x4
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   4033          
   4034            // Restore the Scene table
   4035            zclGeneral_ScenesRestoreFromNV();
   \                     ??zclGeneral_ScenesInit_0:
   \   000051                ; Setup parameters for call to function osal_nv_read
   \   000051   A8..         MOV       R0,?XSP + 0
   \   000053   A9..         MOV       R1,?XSP + 1
   \   000055   88..         MOV       ?V0,R0
   \   000057   89..         MOV       ?V1,R1
   \   000059   78..         MOV       R0,#?V0
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   75..02       MOV       ?V0,#0x2
   \   000061   75..00       MOV       ?V1,#0x0
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   7C00         MOV       R4,#0x0
   \   00006B   7D00         MOV       R5,#0x0
   \   00006D   7A91         MOV       R2,#-0x6f
   \   00006F   7B00         MOV       R3,#0x0
   \   000071   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000074   7404         MOV       A,#0x4
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   \   000079   E9           MOV       A,R1
   \   00007A   705A         JNZ       ??zclGeneral_ScenesInit_1
   \   00007C   7E00         MOV       R6,#0x0
   \   00007E   7F00         MOV       R7,#0x0
   \   000080   8044         SJMP      ??zclGeneral_ScenesInit_2
   \                     ??zclGeneral_ScenesInit_3:
   \   000082                ; Setup parameters for call to function osal_nv_read
   \   000082   7402         MOV       A,#0x2
   \   000084   12....       LCALL     ?XSTACK_DISP100_8
   \   000087   88..         MOV       ?V0,R0
   \   000089   89..         MOV       ?V1,R1
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   75..38       MOV       ?V0,#0x38
   \   000093   75..00       MOV       ?V1,#0x0
   \   000096   78..         MOV       R0,#?V0
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   EE           MOV       A,R6
   \   00009C   F8           MOV       R0,A
   \   00009D   EF           MOV       A,R7
   \   00009E   F9           MOV       R1,A
   \   00009F   E8           MOV       A,R0
   \   0000A0   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000A3   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000A6   7404         MOV       A,#0x4
   \   0000A8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AB   E9           MOV       A,R1
   \   0000AC   7013         JNZ       ??zclGeneral_ScenesInit_4
   \   0000AE                ; Setup parameters for call to function zclGeneral_AddScene
   \   0000AE   7403         MOV       A,#0x3
   \   0000B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B3   AA82         MOV       R2,DPL
   \   0000B5   AB83         MOV       R3,DPH
   \   0000B7   7402         MOV       A,#0x2
   \   0000B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   F9           MOV       R1,A
   \   0000BE   12....       LCALL     `??zclGeneral_AddScene::?relay`; Banked call to: zclGeneral_AddScene
   \                     ??zclGeneral_ScenesInit_4:
   \   0000C1   0E           INC       R6
   \   0000C2   EE           MOV       A,R6
   \   0000C3   7001         JNZ       ??zclGeneral_ScenesInit_2
   \   0000C5   0F           INC       R7
   \                     ??zclGeneral_ScenesInit_2:
   \   0000C6   85..82       MOV       DPL,?XSP + 0
   \   0000C9   85..83       MOV       DPH,?XSP + 1
   \   0000CC   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000CF   C3           CLR       C
   \   0000D0   EE           MOV       A,R6
   \   0000D1   98           SUBB      A,R0
   \   0000D2   EF           MOV       A,R7
   \   0000D3   99           SUBB      A,R1
   \   0000D4   40AC         JC        ??zclGeneral_ScenesInit_3
   4036          }
   \                     ??zclGeneral_ScenesInit_1:
   \   0000D6   743A         MOV       A,#0x3a
   \   0000D8   02....       LJMP      ??Subroutine97_0 & 0xFFFF
   4037          #endif // ZCL_STANDALONE
   4038          
   4039          #if !defined ( ZCL_STANDALONE )
   4040          /*********************************************************************
   4041           * @fn          zclGeneral_ScenesSave
   4042           *
   4043           * @brief       Save the scenes table
   4044           *
   4045           * @param       none
   4046           *
   4047           * @return      none
   4048           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4049          void zclGeneral_ScenesSave( void )
   \                     zclGeneral_ScenesSave:
   4050          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   4051            // Update NV
   4052            zclGeneral_ScenesWriteNV();
   \   000004                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000004   12....       LCALL     `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   4053          }
   \   000007   02....       LJMP      ?Subroutine5 & 0xFFFF
   4054          #endif // ZCL_STANDALONE
   4055          
   4056          #endif // ZCL_SCENES
   4057          
   4058          /***************************************************************************
   4059          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     96   zclGeneral_AddGroup
        0     16   -> aps_AddGroup
        0     19   -> osal_memcpy
        0     20   -> zcl_ReadAttrData
      1    100   zclGeneral_AddScene
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
        0     15   -> zclGeneral_ScenesWriteNV
      2     82   zclGeneral_CountAllScenes
      2      0   zclGeneral_CountScenes
      1     92   zclGeneral_FindAllScenesForGroup
      0     91   zclGeneral_FindScene
      0     10   zclGeneral_HdlInSpecificCommands
        0     10   -> zclGeneral_ProcessInGroupsClient
        0     10   -> zclGeneral_ProcessInGroupsServer
        0     10   -> zclGeneral_ProcessInIdentity
        0     10   -> zclGeneral_ProcessInScenesClient
        0     10   -> zclGeneral_ProcessInScenesServer
      2      0   zclGeneral_HdlIncoming
        2      0   -> zclGeneral_HdlInSpecificCommands
      1     63   zclGeneral_ProcessInGroupsClient
        0     50   -> osal_mem_alloc
        0     50   -> osal_mem_free
        0     53   -> osal_memcpy
        0     50   -> osal_memset
      1     93   zclGeneral_ProcessInGroupsServer
        0     76   -> aps_CountAllGroups
        0     76   -> aps_FindAllGroupsForEndpoint
        0     76   -> aps_FindGroup
        0     76   -> aps_RemoveAllGroup
        0     76   -> aps_RemoveGroup
        0     76   -> osal_mem_alloc
        0     76   -> osal_mem_free
        0     76   -> osal_memset
        0     76   -> zclGeneral_AddGroup
        0     76   -> zclGeneral_RemoveAllScenes
        0     83   -> zclGeneral_SendGroupGetMembershipRequest
        0     80   -> zclGeneral_SendGroupResponse
        0     79   -> zclGeneral_SendGroupViewResponse
        0     80   -> zcl_ReadAttrData
        0     83   -> zcl_SendDefaultRspCmd
      0     32   zclGeneral_ProcessInIdentity
        0     18   -> bdb_ZclIdentifyCmdInd
        0     18   -> bdb_ZclIdentifyQueryCmdInd
        0     20   -> zclGeneral_SendIdentifyQueryResponse
        0     22   -> zcl_ReadAttrData
      1    100   zclGeneral_ProcessInScenesClient
        0     87   -> osal_mem_alloc
        0     87   -> osal_mem_free
        0     90   -> osal_memcpy
        0     87   -> osal_memset
      1     99   zclGeneral_ProcessInScenesServer
        0     82   -> aps_FindGroup
        0     82   -> osal_mem_alloc
        0     82   -> osal_mem_free
        0     85   -> osal_memcpy
        0     82   -> osal_memset
        0     82   -> zclGeneral_AddScene
        0     82   -> zclGeneral_CountAllScenes
        0     82   -> zclGeneral_FindAllScenesForGroup
        0     82   -> zclGeneral_FindScene
        0     82   -> zclGeneral_RemoveAllScenes
        0     82   -> zclGeneral_RemoveScene
        0     82   -> zclGeneral_ScenesWriteNV
        0     89   -> zclGeneral_SendSceneGetMembershipResponse
        0     87   -> zclGeneral_SendSceneResponse
        0     86   -> zclGeneral_SendSceneViewRsp
        0     86   -> zcl_ReadAttrData
      1     14   zclGeneral_ReadSceneCountCB
        0     10   -> zclGeneral_CountAllScenes
      1     14   zclGeneral_RegisterCmdCallbacks
        0     12   -> osal_mem_alloc
        0     12   -> zclGeneral_ScenesInit
        0     14   -> zcl_registerPlugin
      0     95   zclGeneral_RemoveAllScenes
        0     13   -> osal_mem_free
        0     13   -> zclGeneral_ScenesWriteNV
      0     91   zclGeneral_RemoveScene
        0      9   -> osal_mem_free
        0      9   -> zclGeneral_ScenesWriteNV
      0     84   zclGeneral_ScenesInit
        0     70   -> osal_nv_item_init
        0     72   -> osal_nv_read
        0     72   -> osal_nv_write
        0     68   -> zclGeneral_AddScene
      2      0   zclGeneral_ScenesSave
        2      0   -> zclGeneral_ScenesWriteNV
      1    155   zclGeneral_ScenesWriteNV
        0     72   -> osal_memcpy
        0     73   -> osal_nv_write
      1     37   zclGeneral_SendAddGroupRequest
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     24   -> osal_memcpy
        0     32   -> zcl_SendCommand
      1     41   zclGeneral_SendAddSceneRequest
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     30   -> osal_memcpy
        0     38   -> zcl_SendCommand
      1    114   zclGeneral_SendGroupGetMembershipRequest
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     28   zclGeneral_SendGroupRequest
        0     25   -> zcl_SendCommand
      1    106   zclGeneral_SendGroupResponse
        0     26   -> zcl_SendCommand
      1    112   zclGeneral_SendGroupViewResponse
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     33   -> zcl_SendCommand
      1     25   zclGeneral_SendIdentify
        0     23   -> zcl_SendCommand
      1     25   zclGeneral_SendIdentifyEZModeInvoke
        0     24   -> zcl_SendCommand
      1     43   zclGeneral_SendIdentifyQueryResponse
        0     23   -> zcl_SendCommand
      1     27   zclGeneral_SendIdentifyUpdateCommState
        0     25   -> zcl_SendCommand
      1    118   zclGeneral_SendSceneGetMembershipResponse
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     29   -> zcl_SendCommand
      1     30   zclGeneral_SendSceneRequest
        0     26   -> zcl_SendCommand
      1    114   zclGeneral_SendSceneResponse
        0     27   -> zcl_SendCommand
      1    123   zclGeneral_SendSceneViewRsp
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
        0     37   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine100_0
       6  ??Subroutine101_0
       2  ??Subroutine102_0
       5  ??Subroutine103_0
       9  ??Subroutine104_0
       5  ??Subroutine105_0
       5  ??Subroutine106_0
       4  ??Subroutine107_0
       4  ??Subroutine108_0
      16  ??Subroutine109_0
       7  ??Subroutine110_0
       5  ??Subroutine111_0
       4  ??Subroutine112_0
      12  ??Subroutine84_0
      12  ??Subroutine85_0
       3  ??Subroutine86_0
       5  ??Subroutine87_0
       7  ??Subroutine88_0
       6  ??Subroutine89_0
      12  ??Subroutine90_0
       6  ??Subroutine91_0
       4  ??Subroutine92_0
       6  ??Subroutine93_0
      10  ??Subroutine94_0
       5  ??Subroutine95_0
       7  ??Subroutine96_0
       3  ??Subroutine97_0
       5  ??Subroutine98_0
       4  ??Subroutine99_0
       8  ?Subroutine0
      21  ?Subroutine1
      13  ?Subroutine10
       4  ?Subroutine11
      14  ?Subroutine12
       6  ?Subroutine13
       4  ?Subroutine14
       4  ?Subroutine15
       8  ?Subroutine16
      17  ?Subroutine17
      17  ?Subroutine18
       8  ?Subroutine19
       5  ?Subroutine2
      15  ?Subroutine20
      11  ?Subroutine21
       7  ?Subroutine22
       8  ?Subroutine23
       7  ?Subroutine24
       4  ?Subroutine25
       1  ?Subroutine26
      16  ?Subroutine27
       8  ?Subroutine28
      13  ?Subroutine29
       3  ?Subroutine3
       4  ?Subroutine30
      13  ?Subroutine31
       7  ?Subroutine32
       5  ?Subroutine33
       6  ?Subroutine34
       6  ?Subroutine35
       6  ?Subroutine36
       7  ?Subroutine37
      12  ?Subroutine38
      16  ?Subroutine39
       8  ?Subroutine4
       6  ?Subroutine40
       8  ?Subroutine41
       4  ?Subroutine42
       6  ?Subroutine43
       5  ?Subroutine44
       5  ?Subroutine45
       2  ?Subroutine46
       8  ?Subroutine47
       1  ?Subroutine48
       1  ?Subroutine49
       7  ?Subroutine5
      15  ?Subroutine50
      12  ?Subroutine51
       1  ?Subroutine52
       9  ?Subroutine53
      15  ?Subroutine54
       5  ?Subroutine55
       9  ?Subroutine56
       1  ?Subroutine57
       8  ?Subroutine58
       2  ?Subroutine59
       5  ?Subroutine6
      12  ?Subroutine60
      12  ?Subroutine61
      10  ?Subroutine62
      11  ?Subroutine63
       4  ?Subroutine64
      26  ?Subroutine65
       4  ?Subroutine66
       3  ?Subroutine67
       4  ?Subroutine68
      17  ?Subroutine69
       5  ?Subroutine7
       5  ?Subroutine70
      15  ?Subroutine71
       7  ?Subroutine72
      11  ?Subroutine73
       5  ?Subroutine74
       7  ?Subroutine75
       5  ?Subroutine76
       5  ?Subroutine77
       6  ?Subroutine78
      13  ?Subroutine79
      11  ?Subroutine8
       6  ?Subroutine80
       4  ?Subroutine81
      10  ?Subroutine82
      10  ?Subroutine83
       9  ?Subroutine9
       2  zclGenCBs
       1  zclGenPluginRegisted
       2  zclGenSceneTable
     157  zclGeneral_AddGroup
     100  zclGeneral_AddScene
      21  zclGeneral_CountAllScenes
      35  zclGeneral_CountScenes
      78  zclGeneral_FindAllScenesForGroup
      73  zclGeneral_FindScene
     186  zclGeneral_HdlInSpecificCommands
      29  zclGeneral_HdlIncoming
     469  zclGeneral_ProcessInGroupsClient
     737  zclGeneral_ProcessInGroupsServer
     288  zclGeneral_ProcessInIdentity
     499  zclGeneral_ProcessInScenesClient
    1490  zclGeneral_ProcessInScenesServer
      62  zclGeneral_ReadSceneCountCB
     130  zclGeneral_RegisterCmdCallbacks
     118  zclGeneral_RemoveAllScenes
     117  zclGeneral_RemoveScene
     219  zclGeneral_ScenesInit
      10  zclGeneral_ScenesSave
     200  zclGeneral_ScenesWriteNV
     218  zclGeneral_SendAddGroupRequest
     308  zclGeneral_SendAddSceneRequest
     242  zclGeneral_SendGroupGetMembershipRequest
     100  zclGeneral_SendGroupRequest
     113  zclGeneral_SendGroupResponse
     260  zclGeneral_SendGroupViewResponse
      86  zclGeneral_SendIdentify
      98  zclGeneral_SendIdentifyEZModeInvoke
      83  zclGeneral_SendIdentifyQueryResponse
     103  zclGeneral_SendIdentifyUpdateCommState
     225  zclGeneral_SendSceneGetMembershipResponse
     130  zclGeneral_SendSceneRequest
     155  zclGeneral_SendSceneResponse
     394  zclGeneral_SendSceneViewRsp
     204  -- Other

 
 8 402 bytes in segment BANKED_CODE
   204 bytes in segment BANK_RELAYS
     5 bytes in segment XDATA_Z
 
   204 bytes of CODE     memory
 8 402 bytes of HUGECODE memory
     5 bytes of XDATA    memory

Errors: none
Warnings: none
