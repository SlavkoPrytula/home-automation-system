###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               18/Apr/2021  01:41:55
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Components\stack\GP\gp_proxyTbl.c
#    Command line       =  
#        -f C:\users\slavko\Temp\EWeb68.tmp ("C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Components\stack\GP\gp_proxyTbl.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
#        3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List\gp_proxyTbl.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj\gp_proxyTbl.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.2-20210417T211827Z-001\Z-Stack 3.0.2\Components\stack\GP\gp_proxyTbl.c
      1          /**************************************************************************************************
      2            Filename:       gp_proxyTbl.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the implementation of the cGP stub.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45             
     46          #include "ZGlobals.h"
     47          #include "ZDObject.h"
     48          #include "nwk_util.h"   
     49          #include "ZComDef.h"
     50          #include "cGP_stub.h"
     51          #include "gp_common.h"
     52          #include "gp_interface.h"
     53          #include "zcl_green_power.h"
     54          #include "OSAL.h"
     55          
     56          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     57             
     58           /*********************************************************************
     59           * MACROS
     60           */ 
     61          
     62           /*********************************************************************
     63           * CONSTANTS
     64           */
     65          
     66          /*********************************************************************
     67           * TYPEDEFS
     68           */
     69             
     70           /*********************************************************************
     71           * GLOBAL VARIABLES
     72           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          ZDO_DeviceAnnce_t aliasConflictAnnce;
   \                     aliasConflictAnnce:
   \   000000                DS 11
   \   00000B                REQUIRE __INIT_XDATA_Z
     74          
     75           /*********************************************************************
     76           * EXTERNAL VARIABLES
     77           */
     78          
     79          /*********************************************************************
     80           * EXTERNAL FUNCTIONS
     81           */
     82          
     83          /*********************************************************************
     84           * LOCAL VARIABLES
     85           */
     86          
     87           /*********************************************************************
     88           * LOCAL FUNCTIONS
     89           */
     90          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen );
     91          static uint8 pt_getAlias( uint8* pNew );
     92          static uint8 pt_getSecurity( uint8* pNew );
     93          static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew );
     94          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink );
     95          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr );
     96          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew );
     97          
     98          /*********************************************************************
     99           * PUBLIC FUNCTIONS
    100           *********************************************************************/
    101          
    102          /*********************************************************************
    103           * @fn          pt_ZclReadGetProxyEntry
    104           *
    105           * @brief       Populate the given item data
    106           *
    107           * @param       nvId - NV entry to read
    108           *              pData - Pointer to OTA message payload
    109           *              len - Lenght of the payload
    110           *
    111           * @return
    112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          uint8 pt_ZclReadGetProxyEntry( uint16 nvId, uint8* pData, uint8* len )
   \                     pt_ZclReadGetProxyEntry:
    114          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 146
   \   000005   746E         MOV       A,#0x6e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8C..         MOV       ?V12,R4
   \   00000C   8D..         MOV       ?V13,R5
    115            uint8  freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000011   7488         MOV       A,#-0x78
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   740A         MOV       A,#0xa
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    116            uint8  currEntry[PROXY_TBL_ENTRY_LEN];
    117            uint8  gpdEntry[PROXY_TBL_ENTRY_LEN];
    118            uint8  gpdEntryLen = 0;
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   F0           MOVX      @DPTR,A
    119            uint8  status;
    120            uint16 options;
    121          
    122            status = gp_getProxyTableByIndex( nvId, currEntry );
   \   000022                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000022   7406         MOV       A,#0x6
   \   000024   12....       LCALL     ?XSTACK_DISP102_8
   \   000027   12....       LCALL     ?Subroutine3 & 0xFFFF
    123          
    124            // if FAIL or Empty
    125            if ( ( status == NV_OPER_FAILED ) || ( status == NV_INVALID_DATA ) )
   \                     ??CrossCallReturnLabel_5:
   \   00002A   6005         JZ        ??pt_ZclReadGetProxyEntry_0
   \   00002C   740D         MOV       A,#0xd
   \   00002E   6E           XRL       A,R6
   \   00002F   7003         JNZ       ??pt_ZclReadGetProxyEntry_1
    126            {
    127              // FAIL
    128              return status;
   \                     ??pt_ZclReadGetProxyEntry_0:
   \   000031   02....       LJMP      ??pt_ZclReadGetProxyEntry_2 & 0xFFFF
    129            }
    130          
    131            osal_memcpy( &gpdEntry[gpdEntryLen], &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \                     ??pt_ZclReadGetProxyEntry_1:
   \   000034   7406         MOV       A,#0x6
   \   000036   12....       LCALL     ?XSTACK_DISP100_8
   \   000039   88..         MOV       ?V0,R0
   \   00003B   89..         MOV       ?V1,R1
   \   00003D   75..00       MOV       ?V2,#0x0
   \   000040                ; Setup parameters for call to function osal_memcpy
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000045   7C02         MOV       R4,#0x2
   \   000047   7D00         MOV       R5,#0x0
   \   000049   7403         MOV       A,#0x3
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F8           MOV       R0,A
   \   000050   744A         MOV       A,#0x4a
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000058   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
    132            osal_memcpy( &options, &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \   00005E                ; Setup parameters for call to function osal_memcpy
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000063   7C02         MOV       R4,#0x2
   \   000065   7D00         MOV       R5,#0x0
   \   000067   7407         MOV       A,#0x7
   \   000069   12....       LCALL     ?XSTACK_DISP101_8
   \   00006C   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
    133            gpdEntryLen += sizeof ( uint16 );
   \   000072   85..82       MOV       DPL,?XSP + 0
   \   000075   85..83       MOV       DPH,?XSP + 1
   \   000078   E0           MOVX      A,@DPTR
   \   000079   2402         ADD       A,#0x2
   \   00007B   F0           MOVX      @DPTR,A
    134            
    135            // Options bitfield
    136            // If Application Id bitfield is 0b000
    137            if( GP_IS_APPLICATION_ID_GPD( options ) )
   \   00007C   7404         MOV       A,#0x4
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   E0           MOVX      A,@DPTR
   \   000082   5407         ANL       A,#0x7
   \   000084   F8           MOV       R0,A
   \   000085   7018         JNZ       ??pt_ZclReadGetProxyEntry_3
    138            {        
    139              // Populate GPD ID
    140              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   000087                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000087   A8..         MOV       R0,?XSP + 0
   \   000089   A9..         MOV       R1,?XSP + 1
   \   00008B   88..         MOV       ?V0,R0
   \   00008D   89..         MOV       ?V1,R1
   \   00008F   78..         MOV       R0,#?V0
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000094   7449         MOV       A,#0x49
   \   000096   12....       LCALL     ?XSTACK_DISP102_8
   \   000099   7904         MOV       R1,#0x4
   \   00009B   740E         MOV       A,#0xe
   \   00009D   8032         SJMP      ??pt_ZclReadGetProxyEntry_4
    141            }
    142            // If Application Id bitfield is 0b010
    143            else if( GP_IS_APPLICATION_ID_IEEE( options ) )
   \                     ??pt_ZclReadGetProxyEntry_3:
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   68           XRL       A,R0
   \   0000A2   7036         JNZ       ??pt_ZclReadGetProxyEntry_5
    144            {   
    145              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN, gpdEntry, &gpdEntryLen );
   \   0000A4                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000A4   A8..         MOV       R0,?XSP + 0
   \   0000A6   A9..         MOV       R1,?XSP + 1
   \   0000A8   88..         MOV       ?V0,R0
   \   0000AA   89..         MOV       ?V1,R1
   \   0000AC   78..         MOV       R0,#?V0
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B1   7449         MOV       A,#0x49
   \   0000B3   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B6   7908         MOV       R1,#0x8
   \   0000B8   740A         MOV       A,#0xa
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
    146              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_EP], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   0000C3                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000C3   78..         MOV       R0,#?V0
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C8   7449         MOV       A,#0x49
   \   0000CA   12....       LCALL     ?XSTACK_DISP102_8
   \   0000CD   7901         MOV       R1,#0x1
   \   0000CF   7412         MOV       A,#0x12
   \                     ??pt_ZclReadGetProxyEntry_4:
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
    147            }
   \   0000D4   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
    148            
    149            if ( PROXY_TBL_GET_ASSIGNED_ALIAS( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_5:
   \   0000DA   7407         MOV       A,#0x7
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   A2E5         MOV       C,0xE0 /* A   */.5
   \   0000E2   501F         JNC       ??pt_ZclReadGetProxyEntry_6
    150            {
    151              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ), gpdEntry, &gpdEntryLen );
   \   0000E4                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000E4   A8..         MOV       R0,?XSP + 0
   \   0000E6   A9..         MOV       R1,?XSP + 1
   \   0000E8   88..         MOV       ?V0,R0
   \   0000EA   89..         MOV       ?V1,R1
   \   0000EC   78..         MOV       R0,#?V0
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F1   7449         MOV       A,#0x49
   \   0000F3   12....       LCALL     ?XSTACK_DISP102_8
   \   0000F6   7902         MOV       R1,#0x2
   \   0000F8   7413         MOV       A,#0x13
   \   0000FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FD   12....       LCALL     ?Subroutine5 & 0xFFFF
    152            }
   \                     ??CrossCallReturnLabel_16:
   \   000100   12....       LCALL     ?DEALLOC_XSTACK8
    153            
    154            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_6:
   \   000103   7407         MOV       A,#0x7
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   E0           MOVX      A,@DPTR
   \   000109   A2E6         MOV       C,0xE0 /* A   */.6
   \   00010B   501F         JNC       ??pt_ZclReadGetProxyEntry_7
    155            {
    156              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   00010D                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00010D   A8..         MOV       R0,?XSP + 0
   \   00010F   A9..         MOV       R1,?XSP + 1
   \   000111   88..         MOV       ?V0,R0
   \   000113   89..         MOV       ?V1,R1
   \   000115   78..         MOV       R0,#?V0
   \   000117   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011A   7449         MOV       A,#0x49
   \   00011C   12....       LCALL     ?XSTACK_DISP102_8
   \   00011F   7901         MOV       R1,#0x1
   \   000121   7415         MOV       A,#0x15
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   12....       LCALL     ?Subroutine5 & 0xFFFF
    157            }
   \                     ??CrossCallReturnLabel_17:
   \   000129   12....       LCALL     ?DEALLOC_XSTACK8
    158            
    159            if ( ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) || ( PROXY_TBL_GET_SEC_CAP( currEntry[PROXY_TBL_ENTRY_OPT] ) ) ) )
   \                     ??pt_ZclReadGetProxyEntry_7:
   \   00012C   7407         MOV       A,#0x7
   \   00012E   12....       LCALL     ?XSTACK_DISP0_8
   \   000131   E0           MOVX      A,@DPTR
   \   000132   A2E6         MOV       C,0xE0 /* A   */.6
   \   000134   400A         JC        ??pt_ZclReadGetProxyEntry_8
   \   000136   7406         MOV       A,#0x6
   \   000138   12....       LCALL     ?XSTACK_DISP0_8
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   A2E5         MOV       C,0xE0 /* A   */.5
   \   00013E   501F         JNC       ??pt_ZclReadGetProxyEntry_9
    160            {
    161              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_8:
   \   000140                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000140   A8..         MOV       R0,?XSP + 0
   \   000142   A9..         MOV       R1,?XSP + 1
   \   000144   88..         MOV       ?V0,R0
   \   000146   89..         MOV       ?V1,R1
   \   000148   78..         MOV       R0,#?V0
   \   00014A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014D   7449         MOV       A,#0x49
   \   00014F   12....       LCALL     ?XSTACK_DISP102_8
   \   000152   7904         MOV       R1,#0x4
   \   000154   7416         MOV       A,#0x16
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   12....       LCALL     ?Subroutine5 & 0xFFFF
    162            }
   \                     ??CrossCallReturnLabel_18:
   \   00015C   12....       LCALL     ?DEALLOC_XSTACK8
    163            
    164            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_9:
   \   00015F   7407         MOV       A,#0x7
   \   000161   12....       LCALL     ?XSTACK_DISP0_8
   \   000164   E0           MOVX      A,@DPTR
   \   000165   A2E6         MOV       C,0xE0 /* A   */.6
   \   000167   501F         JNC       ??pt_ZclReadGetProxyEntry_10
    165            {
    166              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN, gpdEntry, &gpdEntryLen );
   \   000169                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000169   A8..         MOV       R0,?XSP + 0
   \   00016B   A9..         MOV       R1,?XSP + 1
   \   00016D   88..         MOV       ?V0,R0
   \   00016F   89..         MOV       ?V1,R1
   \   000171   78..         MOV       R0,#?V0
   \   000173   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000176   7449         MOV       A,#0x49
   \   000178   12....       LCALL     ?XSTACK_DISP102_8
   \   00017B   7910         MOV       R1,#0x10
   \   00017D   741A         MOV       A,#0x1a
   \   00017F   12....       LCALL     ?XSTACK_DISP0_8
   \   000182   12....       LCALL     ?Subroutine5 & 0xFFFF
    167            }
   \                     ??CrossCallReturnLabel_19:
   \   000185   12....       LCALL     ?DEALLOC_XSTACK8
    168            
    169            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??pt_ZclReadGetProxyEntry_10:
   \   000188   7406         MOV       A,#0x6
   \   00018A   12....       LCALL     ?XSTACK_DISP0_8
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   A2E6         MOV       C,0xE0 /* A   */.6
   \   000190   4003         JC        $+5
   \   000192   02....       LJMP      ??pt_ZclReadGetProxyEntry_11 & 0xFFFF
    170            {
    171              uint8 sinkCount = 0;
   \   000195   7401         MOV       A,#0x1
   \   000197   12....       LCALL     ?XSTACK_DISP0_8
   \   00019A   12....       LCALL     ?Subroutine2 & 0xFFFF
    172              uint8 sinkCountByte = gpdEntryLen;
    173              
    174              gpdEntryLen += sizeof ( sinkCountByte );
    175              
    176              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??CrossCallReturnLabel_3:
   \   00019D   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A0   E582         MOV       A,DPL
   \   0001A2   28           ADD       A,R0
   \   0001A3   F5..         MOV       ?V14,A
   \   0001A5   E4           CLR       A
   \   0001A6   3583         ADDC      A,DPH
   \   0001A8   F5..         MOV       ?V15,A
   \   0001AA   7488         MOV       A,#-0x78
   \   0001AC   12....       LCALL     ?XSTACK_DISP100_8
   \   0001AF   88..         MOV       ?V0,R0
   \   0001B1   89..         MOV       ?V1,R1
   \   0001B3   7401         MOV       A,#0x1
   \   0001B5   12....       LCALL     ?XSTACK_DISP100_8
   \   0001B8   88..         MOV       ?V4,R0
   \   0001BA   89..         MOV       ?V5,R1
   \   0001BC   75..00       MOV       ?V6,#0x0
   \   0001BF                ; Setup parameters for call to function osal_memcmp
   \   0001BF   7428         MOV       A,#0x28
   \   0001C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C4   A982         MOV       R1,DPL
   \   0001C6   AA83         MOV       R2,DPH
   \   0001C8   89..         MOV       ?V8,R1
   \   0001CA   8A..         MOV       ?V9,R2
   \   0001CC   75..00       MOV       ?V10,#0x0
   \   0001CF   78..         MOV       R0,#?V8
   \   0001D1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001D4   7C0A         MOV       R4,#0xa
   \   0001D6   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0001D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DC   E9           MOV       A,R1
   \   0001DD   703A         JNZ       ??pt_ZclReadGetProxyEntry_12
    177              {
    178                sinkCount += 1;
   \   0001DF   7401         MOV       A,#0x1
   \   0001E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E4   E0           MOVX      A,@DPTR
   \   0001E5   04           INC       A
   \   0001E6   F0           MOVX      @DPTR,A
    179                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \   0001E7                ; Setup parameters for call to function osal_memcpy
   \   0001E7   78..         MOV       R0,#?V4
   \   0001E9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001EC   7C01         MOV       R4,#0x1
   \   0001EE   7D00         MOV       R5,#0x0
   \   0001F0   AA..         MOV       R2,?V14
   \   0001F2   AB..         MOV       R3,?V15
   \   0001F4   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0001F7   12....       LCALL     ?DEALLOC_XSTACK8
    180                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   0001FA                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001FA   A8..         MOV       R0,?XSP + 0
   \   0001FC   A9..         MOV       R1,?XSP + 1
   \   0001FE   88..         MOV       ?V8,R0
   \   000200   89..         MOV       ?V9,R1
   \   000202   78..         MOV       R0,#?V8
   \   000204   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000207   7449         MOV       A,#0x49
   \   000209   12....       LCALL     ?XSTACK_DISP102_8
   \   00020C   790A         MOV       R1,#0xa
   \   00020E   742A         MOV       A,#0x2a
   \   000210   12....       LCALL     ?XSTACK_DISP0_8
   \   000213   12....       LCALL     ?Subroutine5 & 0xFFFF
    181              }
   \                     ??CrossCallReturnLabel_20:
   \   000216   12....       LCALL     ?DEALLOC_XSTACK8
    182              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_ZclReadGetProxyEntry_12:
   \   000219                ; Setup parameters for call to function osal_memcmp
   \   000219   7432         MOV       A,#0x32
   \   00021B   12....       LCALL     ?XSTACK_DISP0_8
   \   00021E   A982         MOV       R1,DPL
   \   000220   AA83         MOV       R2,DPH
   \   000222   89..         MOV       ?V8,R1
   \   000224   8A..         MOV       ?V9,R2
   \   000226   78..         MOV       R0,#?V8
   \   000228   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00022B   7C0A         MOV       R4,#0xa
   \   00022D   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000230   12....       LCALL     ?DEALLOC_XSTACK8
   \   000233   E9           MOV       A,R1
   \   000234   703A         JNZ       ??pt_ZclReadGetProxyEntry_11
    183              {
    184                sinkCount += 1;
   \   000236   7401         MOV       A,#0x1
   \   000238   12....       LCALL     ?XSTACK_DISP0_8
   \   00023B   E0           MOVX      A,@DPTR
   \   00023C   04           INC       A
   \   00023D   F0           MOVX      @DPTR,A
    185                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \   00023E                ; Setup parameters for call to function osal_memcpy
   \   00023E   78..         MOV       R0,#?V4
   \   000240   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000243   7C01         MOV       R4,#0x1
   \   000245   7D00         MOV       R5,#0x0
   \   000247   AA..         MOV       R2,?V14
   \   000249   AB..         MOV       R3,?V15
   \   00024B   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00024E   12....       LCALL     ?DEALLOC_XSTACK8
    186                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   000251                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000251   A8..         MOV       R0,?XSP + 0
   \   000253   A9..         MOV       R1,?XSP + 1
   \   000255   88..         MOV       ?V0,R0
   \   000257   89..         MOV       ?V1,R1
   \   000259   78..         MOV       R0,#?V0
   \   00025B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00025E   7449         MOV       A,#0x49
   \   000260   12....       LCALL     ?XSTACK_DISP102_8
   \   000263   790A         MOV       R1,#0xa
   \   000265   7434         MOV       A,#0x34
   \   000267   12....       LCALL     ?XSTACK_DISP0_8
   \   00026A   12....       LCALL     ?Subroutine5 & 0xFFFF
    187              }
    188            }
   \                     ??CrossCallReturnLabel_21:
   \   00026D   12....       LCALL     ?DEALLOC_XSTACK8
    189               
    190            if ( PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_11:
   \   000270   7407         MOV       A,#0x7
   \   000272   12....       LCALL     ?XSTACK_DISP0_8
   \   000275   E0           MOVX      A,@DPTR
   \   000276   A2E0         MOV       C,0xE0 /* A   */.0
   \   000278   4003         JC        $+5
   \   00027A   02....       LJMP      ??pt_ZclReadGetProxyEntry_13 & 0xFFFF
    191            {
    192              uint8 groupCount = 0;
   \   00027D   7401         MOV       A,#0x1
   \   00027F   12....       LCALL     ?XSTACK_DISP0_8
   \   000282   12....       LCALL     ?Subroutine2 & 0xFFFF
    193              uint8 groupCountByte = gpdEntryLen;
    194              
    195              gpdEntryLen++;
    196              
    197              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \                     ??CrossCallReturnLabel_4:
   \   000285   12....       LCALL     ?XSTACK_DISP0_8
   \   000288   E582         MOV       A,DPL
   \   00028A   28           ADD       A,R0
   \   00028B   F5..         MOV       ?V0,A
   \   00028D   E4           CLR       A
   \   00028E   3583         ADDC      A,DPH
   \   000290   F5..         MOV       ?V1,A
   \   000292   7401         MOV       A,#0x1
   \   000294   12....       LCALL     ?XSTACK_DISP100_8
   \   000297   88..         MOV       ?V4,R0
   \   000299   89..         MOV       ?V5,R1
   \   00029B   75..00       MOV       ?V6,#0x0
   \   00029E   743C         MOV       A,#0x3c
   \   0002A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A3   E0           MOVX      A,@DPTR
   \   0002A4   A2E0         MOV       C,0xE0 /* A   */.0
   \   0002A6   503A         JNC       ??pt_ZclReadGetProxyEntry_14
    198              {
    199                groupCount += 1;
   \   0002A8   7401         MOV       A,#0x1
   \   0002AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AD   7401         MOV       A,#0x1
   \   0002AF   F0           MOVX      @DPTR,A
    200                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof ( uint8 ) );
   \   0002B0                ; Setup parameters for call to function osal_memcpy
   \   0002B0   78..         MOV       R0,#?V4
   \   0002B2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002B5   7C01         MOV       R4,#0x1
   \   0002B7   7D00         MOV       R5,#0x0
   \   0002B9   AA..         MOV       R2,?V0
   \   0002BB   AB..         MOV       R3,?V1
   \   0002BD   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0002C0   12....       LCALL     ?DEALLOC_XSTACK8
    201                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   0002C3                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002C3   A8..         MOV       R0,?XSP + 0
   \   0002C5   A9..         MOV       R1,?XSP + 1
   \   0002C7   88..         MOV       ?V2,R0
   \   0002C9   89..         MOV       ?V3,R1
   \   0002CB   78..         MOV       R0,#?V2
   \   0002CD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002D0   7449         MOV       A,#0x49
   \   0002D2   12....       LCALL     ?XSTACK_DISP102_8
   \   0002D5   7904         MOV       R1,#0x4
   \   0002D7   743F         MOV       A,#0x3f
   \   0002D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DC   12....       LCALL     ?Subroutine5 & 0xFFFF
    202              }
   \                     ??CrossCallReturnLabel_22:
   \   0002DF   12....       LCALL     ?DEALLOC_XSTACK8
    203              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \                     ??pt_ZclReadGetProxyEntry_14:
   \   0002E2   743C         MOV       A,#0x3c
   \   0002E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E7   E0           MOVX      A,@DPTR
   \   0002E8   A2E1         MOV       C,0xE0 /* A   */.1
   \   0002EA   503A         JNC       ??pt_ZclReadGetProxyEntry_13
    204              {
    205                groupCount += 1;
   \   0002EC   7401         MOV       A,#0x1
   \   0002EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F1   E0           MOVX      A,@DPTR
   \   0002F2   04           INC       A
   \   0002F3   F0           MOVX      @DPTR,A
    206                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof( uint8 ) );
   \   0002F4                ; Setup parameters for call to function osal_memcpy
   \   0002F4   78..         MOV       R0,#?V4
   \   0002F6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002F9   7C01         MOV       R4,#0x1
   \   0002FB   7D00         MOV       R5,#0x0
   \   0002FD   AA..         MOV       R2,?V0
   \   0002FF   AB..         MOV       R3,?V1
   \   000301   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000304   12....       LCALL     ?DEALLOC_XSTACK8
    207                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   000307                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000307   A8..         MOV       R0,?XSP + 0
   \   000309   A9..         MOV       R1,?XSP + 1
   \   00030B   88..         MOV       ?V0,R0
   \   00030D   89..         MOV       ?V1,R1
   \   00030F   78..         MOV       R0,#?V0
   \   000311   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000314   7449         MOV       A,#0x49
   \   000316   12....       LCALL     ?XSTACK_DISP102_8
   \   000319   7904         MOV       R1,#0x4
   \   00031B   7443         MOV       A,#0x43
   \   00031D   12....       LCALL     ?XSTACK_DISP0_8
   \   000320   12....       LCALL     ?Subroutine5 & 0xFFFF
    208              }
    209            }
   \                     ??CrossCallReturnLabel_23:
   \   000323   12....       LCALL     ?DEALLOC_XSTACK8
    210            
    211            gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GRP_RAD], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_13:
   \   000326                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000326   A8..         MOV       R0,?XSP + 0
   \   000328   A9..         MOV       R1,?XSP + 1
   \   00032A   88..         MOV       ?V0,R0
   \   00032C   89..         MOV       ?V1,R1
   \   00032E   78..         MOV       R0,#?V0
   \   000330   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000333   7449         MOV       A,#0x49
   \   000335   12....       LCALL     ?XSTACK_DISP102_8
   \   000338   7901         MOV       R1,#0x1
   \   00033A   7447         MOV       A,#0x47
   \   00033C   12....       LCALL     ?XSTACK_DISP0_8
   \   00033F   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000342   12....       LCALL     ?DEALLOC_XSTACK8
    212            
    213            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) || ( PROXY_TBL_GET_ENTRY_VALID( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) )
   \   000345   7406         MOV       A,#0x6
   \   000347   12....       LCALL     ?XSTACK_DISP0_8
   \   00034A   E0           MOVX      A,@DPTR
   \   00034B   5418         ANL       A,#0x18
   \   00034D   6418         XRL       A,#0x18
   \   00034F   6017         JZ        ??pt_ZclReadGetProxyEntry_15
    214            {
    215              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   000351                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000351   78..         MOV       R0,#?V0
   \   000353   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000356   7449         MOV       A,#0x49
   \   000358   12....       LCALL     ?XSTACK_DISP102_8
   \   00035B   7901         MOV       R1,#0x1
   \   00035D   7448         MOV       A,#0x48
   \   00035F   12....       LCALL     ?XSTACK_DISP0_8
   \   000362   12....       LCALL     ?Subroutine5 & 0xFFFF
    216            }
   \                     ??CrossCallReturnLabel_25:
   \   000365   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??pt_ZclReadGetProxyEntry_15:
   \   000368   74AA         MOV       A,#-0x56
   \   00036A   12....       LCALL     ?XSTACK_DISP0_8
   \   00036D   E0           MOVX      A,@DPTR
   \   00036E   F5..         MOV       ?V0,A
   \   000370   A3           INC       DPTR
   \   000371   E0           MOVX      A,@DPTR
   \   000372   F5..         MOV       ?V1,A
    217            
    218            if ( pData != NULL )
   \   000374   85..82       MOV       DPL,?V0
   \   000377   F583         MOV       DPH,A
   \   000379   E0           MOVX      A,@DPTR
   \   00037A   F8           MOV       R0,A
   \   00037B   E5..         MOV       A,?V12
   \   00037D   45..         ORL       A,?V13
   \   00037F   7003         JNZ       $+5
   \   000381   02....       LJMP      ??pt_ZclReadGetProxyEntry_16 & 0xFFFF
    219            {
    220              uint8 sinkEntryLen;
    221              uint16 totalLen;
    222              
    223              sinkEntryLen = gpdEntryLen;
   \   000384   85..82       MOV       DPL,?XSP + 0
   \   000387   85..83       MOV       DPH,?XSP + 1
   \   00038A   E0           MOVX      A,@DPTR
   \   00038B   FF           MOV       R7,A
    224              if ( *len != 0 )
   \   00038C   E8           MOV       A,R0
   \   00038D   6004         JZ        ??pt_ZclReadGetProxyEntry_17
    225              {
    226              gpdEntryLen -= sizeof ( uint16 );
   \   00038F   E0           MOVX      A,@DPTR
   \   000390   24FE         ADD       A,#-0x2
   \   000392   F0           MOVX      @DPTR,A
    227              }
    228              totalLen = gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_17:
   \   000393   E0           MOVX      A,@DPTR
   \   000394   F8           MOV       R0,A
   \   000395   7402         MOV       A,#0x2
   \   000397   12....       LCALL     ?XSTACK_DISP0_8
   \   00039A   E8           MOV       A,R0
   \   00039B   F0           MOVX      @DPTR,A
   \   00039C   A3           INC       DPTR
   \   00039D   E4           CLR       A
   \   00039E   F0           MOVX      @DPTR,A
    229              totalLen += *len;
   \   00039F   85..82       MOV       DPL,?V0
   \   0003A2   85..83       MOV       DPH,?V1
   \   0003A5   E0           MOVX      A,@DPTR
   \   0003A6   F8           MOV       R0,A
   \   0003A7   7402         MOV       A,#0x2
   \   0003A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0003AC   E0           MOVX      A,@DPTR
   \   0003AD   28           ADD       A,R0
   \   0003AE   F0           MOVX      @DPTR,A
   \   0003AF   A3           INC       DPTR
   \   0003B0   E0           MOVX      A,@DPTR
   \   0003B1   3400         ADDC      A,#0x0
   \   0003B3   F0           MOVX      @DPTR,A
    230              osal_memcpy( pData, &totalLen, sizeof ( uint16 ) );
   \   0003B4                ; Setup parameters for call to function osal_memcpy
   \   0003B4   7402         MOV       A,#0x2
   \   0003B6   12....       LCALL     ?XSTACK_DISP100_8
   \   0003B9   88..         MOV       ?V4,R0
   \   0003BB   89..         MOV       ?V5,R1
   \   0003BD   75..00       MOV       ?V6,#0x0
   \   0003C0   78..         MOV       R0,#?V4
   \   0003C2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003C5   7C02         MOV       R4,#0x2
   \   0003C7   7D00         MOV       R5,#0x0
   \   0003C9   AA..         MOV       R2,?V12
   \   0003CB   AB..         MOV       R3,?V13
   \   0003CD   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0003D0   12....       LCALL     ?DEALLOC_XSTACK8
    231              if ( *len == 0 )
   \   0003D3   85..82       MOV       DPL,?V0
   \   0003D6   85..83       MOV       DPH,?V1
   \   0003D9   E0           MOVX      A,@DPTR
   \   0003DA   700A         JNZ       ??pt_ZclReadGetProxyEntry_18
    232              {
    233                pData += sizeof ( uint16 );
   \   0003DC   E5..         MOV       A,?V12
   \   0003DE   2402         ADD       A,#0x2
   \   0003E0   F5..         MOV       ?V12,A
   \   0003E2   5002         JNC       ??pt_ZclReadGetProxyEntry_18
   \   0003E4   05..         INC       ?V13
    234              }
    235              gpdEntryLen += sizeof ( uint16 );
   \                     ??pt_ZclReadGetProxyEntry_18:
   \   0003E6   85..82       MOV       DPL,?XSP + 0
   \   0003E9   85..83       MOV       DPH,?XSP + 1
   \   0003EC   E0           MOVX      A,@DPTR
   \   0003ED   2402         ADD       A,#0x2
   \   0003EF   F0           MOVX      @DPTR,A
    236              
    237              pData += *len;
    238              osal_memcpy( pData, gpdEntry, sinkEntryLen );
   \   0003F0                ; Setup parameters for call to function osal_memcpy
   \   0003F0   7447         MOV       A,#0x47
   \   0003F2   12....       LCALL     ?XSTACK_DISP100_8
   \   0003F5   88..         MOV       ?V4,R0
   \   0003F7   89..         MOV       ?V5,R1
   \   0003F9   78..         MOV       R0,#?V4
   \   0003FB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003FE   EF           MOV       A,R7
   \   0003FF   FC           MOV       R4,A
   \   000400   7D00         MOV       R5,#0x0
   \   000402   85..82       MOV       DPL,?V0
   \   000405   85..83       MOV       DPH,?V1
   \   000408   E0           MOVX      A,@DPTR
   \   000409   F8           MOV       R0,A
   \   00040A   E5..         MOV       A,?V12
   \   00040C   28           ADD       A,R0
   \   00040D   FA           MOV       R2,A
   \   00040E   E4           CLR       A
   \   00040F   35..         ADDC      A,?V13
   \   000411   FB           MOV       R3,A
   \   000412   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000415   12....       LCALL     ?DEALLOC_XSTACK8
    239              if ( *len != 0 )
   \   000418   85..82       MOV       DPL,?V0
   \   00041B   85..83       MOV       DPH,?V1
   \   00041E   E0           MOVX      A,@DPTR
   \   00041F   601B         JZ        ??pt_ZclReadGetProxyEntry_19
    240              {
    241                *len = totalLen;
   \   000421   7402         MOV       A,#0x2
   \   000423   12....       LCALL     ?XSTACK_DISP0_8
   \   000426   E0           MOVX      A,@DPTR
   \   000427   85..82       MOV       DPL,?V0
   \   00042A   85..83       MOV       DPH,?V1
   \   00042D   801D         SJMP      ??pt_ZclReadGetProxyEntry_20
    242                return status;
    243              }
    244              *len += gpdEntryLen;
    245              return status;
    246            }
    247            else
    248            {
    249              if ( *len == 0 )
   \                     ??pt_ZclReadGetProxyEntry_16:
   \   00042F   E8           MOV       A,R0
   \   000430   700A         JNZ       ??pt_ZclReadGetProxyEntry_19
    250              {
    251                gpdEntryLen += sizeof ( uint16 );
   \   000432   85..82       MOV       DPL,?XSP + 0
   \   000435   85..83       MOV       DPH,?XSP + 1
   \   000438   E0           MOVX      A,@DPTR
   \   000439   2402         ADD       A,#0x2
   \   00043B   F0           MOVX      @DPTR,A
    252              }
    253              *len += gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_19:
   \   00043C   85..82       MOV       DPL,?XSP + 0
   \   00043F   85..83       MOV       DPH,?XSP + 1
   \   000442   E0           MOVX      A,@DPTR
   \   000443   F8           MOV       R0,A
   \   000444   85..82       MOV       DPL,?V0
   \   000447   85..83       MOV       DPH,?V1
   \   00044A   E0           MOVX      A,@DPTR
   \   00044B   28           ADD       A,R0
   \                     ??pt_ZclReadGetProxyEntry_20:
   \   00044C   F0           MOVX      @DPTR,A
    254              return status;
   \   00044D   EE           MOV       A,R6
   \   00044E   F9           MOV       R1,A
   \                     ??pt_ZclReadGetProxyEntry_2:
   \   00044F   7492         MOV       A,#-0x6e
   \   000451   12....       LCALL     ?DEALLOC_XSTACK8
   \   000454   7F10         MOV       R7,#0x10
   \   000456   02....       LJMP      ?BANKED_LEAVE_XDATA
    255            }
    256          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine10_0
   \   000004                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E4           CLR       A
   \   000001   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000004   F8           MOV       R0,A
   \   000005   04           INC       A
   \   000006   F0           MOVX      @DPTR,A
   \   000007   7447         MOV       A,#0x47
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3583         ADDC      A,DPH
   \   000007   FB           MOV       R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000003   E9           MOV       A,R1
   \   000004   FE           MOV       R6,A
   \   000005   740A         MOV       A,#0xa
   \   000007   6E           XRL       A,R6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   A9..         MOV       R1,?V0
   \   000004   AA..         MOV       R2,?V1
   \   000006   AB..         MOV       R3,?V2
   \   000008                REQUIRE ??Subroutine13_0
   \   000008                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET
    257          
    258          /*********************************************************************
    259           * @fn      zclGpp_ReadWriteAttrCB
    260           *
    261           * @brief   Handle Diagnostics attributes.
    262           *
    263           * @param   clusterId - cluster that attribute belongs to
    264           * @param   attrId - attribute to be read or written
    265           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
    266           * @param   pValue - pointer to attribute value, OTA endian
    267           * @param   pLen - length of attribute value read, native endian
    268           *
    269           * @return  status
    270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    271          ZStatus_t zclGpp_ReadWriteAttrCB( uint16 clusterId, uint16 attrId, uint8 oper,
   \                     zclGpp_ReadWriteAttrCB:
    272                                                   uint8 *pValue, uint16 *pLen )
    273          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
    274            ZStatus_t status = ZSuccess;
   \   000007   7900         MOV       R1,#0x0
    275            uint16 proxyTableIndex;
    276            uint8 i;
    277          
    278            switch ( oper )
   \   000009   E5..         MOV       A,?V1
   \   00000B   6008         JZ        ??zclGpp_ReadWriteAttrCB_0
   \   00000D   14           DEC       A
   \   00000E   6005         JZ        ??zclGpp_ReadWriteAttrCB_0
   \   000010   14           DEC       A
   \   000011   604A         JZ        ??zclGpp_ReadWriteAttrCB_1
   \   000013   804A         SJMP      ??zclGpp_ReadWriteAttrCB_2
    279            {
    280              case ZCL_OPER_LEN:
    281              case ZCL_OPER_READ:
    282                if ( attrId == ATTRID_GP_PROXY_TABLE )
   \                     ??zclGpp_ReadWriteAttrCB_0:
   \   000015   7411         MOV       A,#0x11
   \   000017   6C           XRL       A,R4
   \   000018   4D           ORL       A,R5
   \   000019   7044         JNZ       ??zclGpp_ReadWriteAttrCB_2
    283                { 
    284                  for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00001B   75..00       MOV       ?V0,#0x0
   \   00001E   740C         MOV       A,#0xc
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FE           MOV       R6,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FF           MOV       R7,A
   \   000028   740E         MOV       A,#0xe
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V2,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
    285                  {
    286                    proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
    287                    
    288                    status = pt_ZclReadGetProxyEntry ( proxyTableIndex, pValue, (uint8*)pLen );
   \                     ??zclGpp_ReadWriteAttrCB_3:
   \   000034                ; Setup parameters for call to function pt_ZclReadGetProxyEntry
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   EE           MOV       A,R6
   \   00003A   FC           MOV       R4,A
   \   00003B   EF           MOV       A,R7
   \   00003C   FD           MOV       R5,A
   \   00003D   E5..         MOV       A,?V0
   \   00003F   2410         ADD       A,#0x10
   \   000041   FA           MOV       R2,A
   \   000042   E4           CLR       A
   \   000043   3403         ADDC      A,#0x3
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004E   E9           MOV       A,R1
   \   00004F   F9           MOV       R1,A
    289                    if ( status != ZSuccess )
   \   000050   700B         JNZ       ??zclGpp_ReadWriteAttrCB_1
    290                    {
    291                      status = ZFailure;
    292                      break;
    293                    }
    294                  }
   \   000052   05..         INC       ?V0
   \   000054   E5..         MOV       A,?V0
   \   000056   C3           CLR       C
   \   000057   9406         SUBB      A,#0x6
   \   000059   5004         JNC       ??zclGpp_ReadWriteAttrCB_2
   \   00005B   80D7         SJMP      ??zclGpp_ReadWriteAttrCB_3
    295                  
    296                }
    297                break;
    298          
    299              case ZCL_OPER_WRITE:
    300                status = ZFailure;
   \                     ??zclGpp_ReadWriteAttrCB_1:
   \   00005D   7901         MOV       R1,#0x1
    301                break;
    302            }
    303          
    304            return ( status );
   \                     ??zclGpp_ReadWriteAttrCB_2:
   \   00005F   7F04         MOV       R7,#0x4
   \   000061   02....       LJMP      ?BANKED_LEAVE_XDATA
    305          }
    306          
    307           /*********************************************************************
    308           * @fn          gp_pairingSetProxyTblOptions
    309           *
    310           * @brief       Function to fill the options pramenter in a Proxy Table entry
    311           *              from a GP Pairing Command
    312           *
    313           * @param       pBitField - pointer to the bit field.
    314           *              bit       - position of the bit to set in the given bitfield.
    315           *
    316           * @return      
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          static uint16 gp_pairingSetProxyTblOptions ( uint32 pairingOpt )
   \                     gp_pairingSetProxyTblOptions:
    319          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
    320            uint8  proxyOpt[2] = {0x00, 0x00};
   \   000012   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   000015   AC..         MOV       R4,?XSP + 0
   \   000017   AD..         MOV       R5,?XSP + 1
   \   000019   7402         MOV       A,#0x2
   \   00001B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    321            uint16 opt = 0; 
    322            
    323            PAIRING_PROXY_TBL_SET_APPLICATION_ID(( uint8* )&proxyOpt[0], pairingOpt);
    324            PROXY_TBL_SET_ENTRY_ACTIVE( &proxyOpt[0] );
    325            PROXY_TBL_SET_ENTRY_VALID( &proxyOpt[0] );
   \   00001E   8A..         MOV       ?V0,R2
   \   000020   EA           MOV       A,R2
   \   000021   5407         ANL       A,#0x7
   \   000023   F8           MOV       R0,A
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   54F8         ANL       A,#0xf8
   \   00002D   48           ORL       A,R0
   \   00002E   4418         ORL       A,#0x18
   \   000030   F0           MOVX      @DPTR,A
    326            PAIRING_PROXY_TBL_SET_MAC_SEQ_CAP(( uint16* )&proxyOpt, pairingOpt);
   \   000031   54DF         ANL       A,#0xdf
   \   000033   FA           MOV       R2,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FB           MOV       R3,A
   \   000037   85....       MOV       ?V1,?V5
   \   00003A   7403         MOV       A,#0x3
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?US_SHR
   \   000041   E5..         MOV       A,?V0
   \   000043   5420         ANL       A,#0x20
   \   000045   F8           MOV       R0,A
   \   000046   EA           MOV       A,R2
   \   000047   48           ORL       A,R0
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   EB           MOV       A,R3
   \   000051   F0           MOVX      @DPTR,A
    327            
    328            if ( GP_IS_COMMUNICATION_MODE_LIGHT_UNICAST( pairingOpt ) )
   \   000052   85....       MOV       ?V0,?V4
   \   000055   E5..         MOV       A,?V0
   \   000057   C4           SWAP      A
   \   000058   13           RRC       A
   \   000059   5407         ANL       A,#0x7
   \   00005B   5403         ANL       A,#0x3
   \   00005D   F9           MOV       R1,A
   \   00005E   7403         MOV       A,#0x3
   \   000060   69           XRL       A,R1
   \   000061   85..82       MOV       DPL,?XSP + 0
   \   000064   85..83       MOV       DPH,?XSP + 1
   \   000067   7017         JNZ       ??gp_pairingSetProxyTblOptions_0
    329            {
    330              PROXY_TBL_SET_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   D2E6         SETB      0xE0 /* A   */.6
   \   00006C   F0           MOVX      @DPTR,A
    331            }
    332            else
    333            {
    334              PROXY_TBL_CLR_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
    335            }
    336            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( pairingOpt ) )
    337            {
    338              PROXY_TBL_SET_DGROUP( &proxyOpt[0] );
    339            }
    340            else
    341            {
    342              PROXY_TBL_CLR_DGROUP( &proxyOpt[0] );
   \                     ??gp_pairingSetProxyTblOptions_1:
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   C2E7         CLR       0xE0 /* A   */.7
   \   000070   F0           MOVX      @DPTR,A
    343            }
    344            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt ) )
   \   000071   7402         MOV       A,#0x2
   \   000073   69           XRL       A,R1
   \   000074   7017         JNZ       ??gp_pairingSetProxyTblOptions_2
    345            {
    346              PROXY_TBL_SET_CGROUP( &proxyOpt[1] );
   \   000076   7401         MOV       A,#0x1
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   D2E0         SETB      0xE0 /* A   */.0
   \   00007E   8015         SJMP      ??gp_pairingSetProxyTblOptions_3
    347            }
   \                     ??gp_pairingSetProxyTblOptions_0:
   \   000080   E0           MOVX      A,@DPTR
   \   000081   C2E6         CLR       0xE0 /* A   */.6
   \   000083   F0           MOVX      @DPTR,A
   \   000084   7401         MOV       A,#0x1
   \   000086   69           XRL       A,R1
   \   000087   70E4         JNZ       ??gp_pairingSetProxyTblOptions_1
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   D2E7         SETB      0xE0 /* A   */.7
   \   00008C   F0           MOVX      @DPTR,A
    348            else
    349            {
    350              PROXY_TBL_CLR_CGROUP( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_2:
   \   00008D   7401         MOV       A,#0x1
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   E0           MOVX      A,@DPTR
   \   000093   C2E0         CLR       0xE0 /* A   */.0
   \                     ??gp_pairingSetProxyTblOptions_3:
   \   000095   F0           MOVX      @DPTR,A
    351            }
    352            
    353            // FALSE by default
    354            PROXY_TBL_CLR_FIRST_TO_FORWARD( &proxyOpt[1] );
    355            
    356            // The InRange sub-field, if set to 0b1, indicates that this GPD is in range 
    357            // of this proxy. The default value is FALSE
    358            PROXY_TBL_CLR_IN_RANGE( &proxyOpt[1] );
   \   000096   E0           MOVX      A,@DPTR
   \   000097   54F9         ANL       A,#0xf9
   \   000099   F0           MOVX      @DPTR,A
    359            // The GPDfixed sub-field, if set to 0b1, indicates portability capabilities 
    360            if ( GP_GET_GPD_FIXED_BIT( pairingOpt ) )
   \   00009A   E5..         MOV       A,?V0
   \   00009C   5480         ANL       A,#0x80
   \   00009E   6005         JZ        ??gp_pairingSetProxyTblOptions_4
    361            {
    362              PROXY_TBL_SET_GPD_FIXED( &proxyOpt[1] );
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   D2E3         SETB      0xE0 /* A   */.3
   \   0000A3   8003         SJMP      ??gp_pairingSetProxyTblOptions_5
    363            }
    364            else
    365            {
    366              PROXY_TBL_CLR_GPD_FIXED( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_4:
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   C2E3         CLR       0xE0 /* A   */.3
   \                     ??gp_pairingSetProxyTblOptions_5:
   \   0000A8   F0           MOVX      @DPTR,A
    367            }
    368            
    369            if ( GP_IS_COMMUNICATION_MODE_FULL_UNICAST( pairingOpt ) )
   \   0000A9   E9           MOV       A,R1
   \   0000AA   7005         JNZ       ??gp_pairingSetProxyTblOptions_6
    370            {
    371              PROXY_TBL_SET_HAS_ALL_ROUTES( &proxyOpt[1] );
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   D2E4         SETB      0xE0 /* A   */.4
   \   0000AF   8003         SJMP      ??gp_pairingSetProxyTblOptions_7
    372            }
    373            else
    374            {
    375              PROXY_TBL_CLR_HAS_ALL_ROUTES( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_6:
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   C2E4         CLR       0xE0 /* A   */.4
   \                     ??gp_pairingSetProxyTblOptions_7:
   \   0000B4   F0           MOVX      @DPTR,A
    376            }
    377            if ( (GP_ALIAS ( pairingOpt )) && (!GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt )) )
   \   0000B5   85....       MOV       ?V1,?V5
   \   0000B8   85....       MOV       ?V2,?V6
   \   0000BB   85....       MOV       ?V3,?V7
   \   0000BE   90....       MOV       DPTR,#__Constant_10000
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?L_AND_X
   \   0000C6   E5..         MOV       A,?V0
   \   0000C8   45..         ORL       A,?V1
   \   0000CA   45..         ORL       A,?V2
   \   0000CC   45..         ORL       A,?V3
   \   0000CE   600F         JZ        ??gp_pairingSetProxyTblOptions_8
   \   0000D0   7402         MOV       A,#0x2
   \   0000D2   69           XRL       A,R1
   \   0000D3   600A         JZ        ??gp_pairingSetProxyTblOptions_8
    378            {
    379              PROXY_TBL_SET_ASSIGNED_ALIAS( &proxyOpt[1] );
   \   0000D5   7401         MOV       A,#0x1
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   D2E5         SETB      0xE0 /* A   */.5
   \   0000DD   8008         SJMP      ??gp_pairingSetProxyTblOptions_9
    380            }
    381            else
    382            {
    383              PROXY_TBL_CLR_ASSIGNED_ALIAS( &proxyOpt[1]);
   \                     ??gp_pairingSetProxyTblOptions_8:
   \   0000DF   7401         MOV       A,#0x1
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   C2E5         CLR       0xE0 /* A   */.5
   \                     ??gp_pairingSetProxyTblOptions_9:
   \   0000E7   F0           MOVX      @DPTR,A
    384            }
    385            if ( GP_GET_SEC_LEVEL( pairingOpt ) > 1 )
   \   0000E8   7409         MOV       A,#0x9
   \   0000EA   78..         MOV       R0,#?V4
   \   0000EC   12....       LCALL     ?US_SHR
   \   0000EF   E5..         MOV       A,?V4
   \   0000F1   5403         ANL       A,#0x3
   \   0000F3   C3           CLR       C
   \   0000F4   9402         SUBB      A,#0x2
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   4004         JC        ??gp_pairingSetProxyTblOptions_10
    386            {
    387              PROXY_TBL_SET_SEC_USE( &proxyOpt[1] );
   \   0000F9   D2E6         SETB      0xE0 /* A   */.6
   \   0000FB   8002         SJMP      ??gp_pairingSetProxyTblOptions_11
    388            }
    389            else
    390            {
    391              PROXY_TBL_CLR_SEC_USE( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_10:
   \   0000FD   C2E6         CLR       0xE0 /* A   */.6
   \                     ??gp_pairingSetProxyTblOptions_11:
   \   0000FF   F0           MOVX      @DPTR,A
    392            }
    393            PROXY_TBL_SET_OPT_EXT( &proxyOpt[1] );
    394            PROXY_TBL_CLR_OPT_EXT( &proxyOpt[1] );
   \   000100   E0           MOVX      A,@DPTR
   \   000101   C2E7         CLR       0xE0 /* A   */.7
   \   000103   12....       LCALL     ?Subroutine9 & 0xFFFF
    395            
    396            opt |= ( ( proxyOpt[0] ) & 0x00FF );
    397            opt |= ( ( ( proxyOpt[1] ) <<  8 ) & 0xFF00 );
    398              
    399            return opt;
   \                     ??CrossCallReturnLabel_13:
   \   000106   FA           MOV       R2,A
   \   000107   7401         MOV       A,#0x1
   \   000109   12....       LCALL     ?XSTACK_DISP0_8
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   FB           MOV       R3,A
   \   00010E   7402         MOV       A,#0x2
   \   000110   12....       LCALL     ?DEALLOC_XSTACK8
   \   000113   7F08         MOV       R7,#0x8
   \   000115   02....       LJMP      ?BANKED_LEAVE_XDATA
    400          }
    401          
    402          /*********************************************************************
    403           * @fn          gp_PairingUpdateProxyTlb
    404           *
    405           * @brief       General function fill the proxy table vector
    406           *
    407           * @param       
    408           *
    409           * @return      
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          void gp_PairingUpdateProxyTlb( gpPairingCmd_t* payload )
   \                     gp_PairingUpdateProxyTlb:
    412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 72
   \   000005   74B8         MOV       A,#-0x48
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    413            uint8  entryVector[PROXY_TBL_ENTRY_LEN];
    414            uint8  entryLen = 0;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
    415            uint8  addSink;
    416            uint8  newSinkGroup = 0;
    417            uint16 entryOptions = 0;
   \   000016   7403         MOV       A,#0x3
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   F0           MOVX      @DPTR,A
    418            uint8  securityOpt = 0;
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   E4           CLR       A
   \   000025   F0           MOVX      @DPTR,A
    419            uint8  searchCounter = 0x0A;
   \   000026   04           INC       A
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   740A         MOV       A,#0xa
   \   00002C   F0           MOVX      @DPTR,A
    420            uint16 invalidAlias = 0xFFFF;
   \   00002D   7405         MOV       A,#0x5
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   74FF         MOV       A,#-0x1
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
    421            
    422            gp_ResetProxyBasicTblEntry(entryVector);
   \   000037                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   000037   7407         MOV       A,#0x7
   \   000039   12....       LCALL     ?XSTACK_DISP101_8
   \   00003C   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
    423            
    424            addSink = GP_ADD_SINK( payload->options );
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \   000043   78..         MOV       R0,#?V8
   \   000045   12....       LCALL     ?L_MOV_X
   \   000048   85....       MOV       ?V0,?V8
   \   00004B   E5..         MOV       A,?V0
   \   00004D   13           RRC       A
   \   00004E   13           RRC       A
   \   00004F   13           RRC       A
   \   000050   541F         ANL       A,#0x1f
   \   000052   5401         ANL       A,#0x1
   \   000054   F5..         MOV       ?V4,A
    425            
    426            entryOptions = gp_pairingSetProxyTblOptions( payload->options );
   \   000056                ; Setup parameters for call to function gp_pairingSetProxyTblOptions
   \   000056   AA..         MOV       R2,?V8
   \   000058   AB..         MOV       R3,?V9
   \   00005A   AC..         MOV       R4,?V10
   \   00005C   AD..         MOV       R5,?V11
   \   00005E   12....       LCALL     `??gp_pairingSetProxyTblOptions::?relay`; Banked call to: gp_pairingSetProxyTblOptions
   \   000061   7403         MOV       A,#0x3
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   EA           MOV       A,R2
   \   000067   F0           MOVX      @DPTR,A
   \   000068   A3           INC       DPTR
   \   000069   EB           MOV       A,R3
   \   00006A   12....       LCALL     ?Subroutine1 & 0xFFFF
    427            gp_PopulateProxyTblEntry( ( uint8* )&entryOptions, sizeof( entryOptions ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_0:
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7409         MOV       A,#0x9
   \   000072   12....       LCALL     ?XSTACK_DISP102_8
   \   000075   7902         MOV       R1,#0x2
   \   000077   7405         MOV       A,#0x5
   \   000079   12....       LCALL     ?XSTACK_DISP101_8
   \   00007C   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00007F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   78..         MOV       R0,#?V0
   \   000088   12....       LCALL     ?L_MOV_X
   \   00008B   E5..         MOV       A,?V0
   \   00008D   5407         ANL       A,#0x7
   \   00008F   F8           MOV       R0,A
   \   000090   7018         JNZ       ??gp_PairingUpdateProxyTlb_0
    428              
    429            // Options bitfield
    430            // If Application Id bitfield is 0b000
    431            if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
    432            {        
    433              // Populate GPD ID
    434              entryLen += sizeof( uint32 );
   \   000092   85..82       MOV       DPL,?XSP + 0
   \   000095   85..83       MOV       DPH,?XSP + 1
   \   000098   E0           MOVX      A,@DPTR
   \   000099   2404         ADD       A,#0x4
   \   00009B   12....       LCALL     ?Subroutine1 & 0xFFFF
    435              gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdId, sizeof( payload->gpdId ), entryVector, &entryLen );
    436            }
   \                     ??CrossCallReturnLabel_1:
   \   00009E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A1   7409         MOV       A,#0x9
   \   0000A3   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A6   7904         MOV       R1,#0x4
   \   0000A8   8019         SJMP      ??gp_PairingUpdateProxyTlb_1
    437            // If Application Id bitfield is 0b010
    438            else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
   \                     ??gp_PairingUpdateProxyTlb_0:
   \   0000AA   7402         MOV       A,#0x2
   \   0000AC   68           XRL       A,R0
   \   0000AD   7020         JNZ       ??gp_PairingUpdateProxyTlb_2
    439            {   
    440              gp_PopulateProxyTblEntry( payload->gpdIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0000AF                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000AF   A8..         MOV       R0,?XSP + 0
   \   0000B1   A9..         MOV       R1,?XSP + 1
   \   0000B3   88..         MOV       ?V0,R0
   \   0000B5   89..         MOV       ?V1,R1
   \   0000B7   78..         MOV       R0,#?V0
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BC   7409         MOV       A,#0x9
   \   0000BE   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C1   7908         MOV       R1,#0x8
   \                     ??gp_PairingUpdateProxyTlb_1:
   \   0000C3   EE           MOV       A,R6
   \   0000C4   29           ADD       A,R1
   \   0000C5   FA           MOV       R2,A
   \   0000C6   E4           CLR       A
   \   0000C7   3F           ADDC      A,R7
   \   0000C8   FB           MOV       R3,A
    441            }
   \   0000C9   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
    442            
    443             gp_PopulateProxyTblEntry( ( uint8* )&payload->ep, sizeof( payload->ep ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_2:
   \   0000CF                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000CF   A8..         MOV       R0,?XSP + 0
   \   0000D1   A9..         MOV       R1,?XSP + 1
   \   0000D3   88..         MOV       ?V0,R0
   \   0000D5   89..         MOV       ?V1,R1
   \   0000D7   78..         MOV       R0,#?V0
   \   0000D9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DC   7409         MOV       A,#0x9
   \   0000DE   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E1   7901         MOV       R1,#0x1
   \   0000E3   EE           MOV       A,R6
   \   0000E4   2410         ADD       A,#0x10
   \   0000E6   FA           MOV       R2,A
   \   0000E7   E4           CLR       A
   \   0000E8   3F           ADDC      A,R7
   \   0000E9   FB           MOV       R3,A
   \   0000EA   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000ED   12....       LCALL     ?DEALLOC_XSTACK8
    444          
    445            if( !GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) )
   \   0000F0   EE           MOV       A,R6
   \   0000F1   2432         ADD       A,#0x32
   \   0000F3   F5..         MOV       ?V6,A
   \   0000F5   E4           CLR       A
   \   0000F6   3F           ADDC      A,R7
   \   0000F7   F5..         MOV       ?V7,A
   \   0000F9   8E82         MOV       DPL,R6
   \   0000FB   8F83         MOV       DPH,R7
   \   0000FD   78..         MOV       R0,#?V0
   \   0000FF   12....       LCALL     ?L_MOV_X
   \   000102   E5..         MOV       A,?V0
   \   000104   C4           SWAP      A
   \   000105   13           RRC       A
   \   000106   5407         ANL       A,#0x7
   \   000108   5403         ANL       A,#0x3
   \   00010A   6402         XRL       A,#0x2
   \   00010C   A8..         MOV       R0,?XSP + 0
   \   00010E   A9..         MOV       R1,?XSP + 1
   \   000110   88..         MOV       ?V0,R0
   \   000112   89..         MOV       ?V1,R1
   \   000114   78..         MOV       R0,#?V0
   \   000116   6010         JZ        ??gp_PairingUpdateProxyTlb_3
    446            {
    447              gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \   000118                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000118   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011B   7409         MOV       A,#0x9
   \   00011D   12....       LCALL     ?XSTACK_DISP102_8
   \   000120   7902         MOV       R1,#0x2
   \   000122   AA..         MOV       R2,?V6
   \   000124   AB..         MOV       R3,?V7
   \   000126   800F         SJMP      ??gp_PairingUpdateProxyTlb_4
    448            }
    449            else
    450            {
    451              gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof( uint16 ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_3:
   \   000128                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000128   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012B   7409         MOV       A,#0x9
   \   00012D   12....       LCALL     ?XSTACK_DISP102_8
   \   000130   7902         MOV       R1,#0x2
   \   000132   7407         MOV       A,#0x7
   \   000134   12....       LCALL     ?XSTACK_DISP101_8
    452            }
   \                     ??gp_PairingUpdateProxyTlb_4:
   \   000137   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00013A   12....       LCALL     ?DEALLOC_XSTACK8
    453          
    454          
    455            //Security options
    456            securityOpt |= GP_GET_SEC_LEVEL( payload->options );
    457            securityOpt |= GP_GET_SEC_KEY_TYPE (payload->options ) << GP_OPT_SEC_LEVEL_LEN;
   \   00013D   8E82         MOV       DPL,R6
   \   00013F   8F83         MOV       DPH,R7
   \   000141   78..         MOV       R0,#?V0
   \   000143   12....       LCALL     ?L_MOV_X
   \   000146   85....       MOV       ?V8,?V0
   \   000149   85....       MOV       ?V9,?V1
   \   00014C   740B         MOV       A,#0xb
   \   00014E   78..         MOV       R0,#?V8
   \   000150   12....       LCALL     ?US_SHR
   \   000153   E5..         MOV       A,?V8
   \   000155   33           RLC       A
   \   000156   33           RLC       A
   \   000157   54FC         ANL       A,#0xfc
   \   000159   541C         ANL       A,#0x1c
   \   00015B   F9           MOV       R1,A
   \   00015C   7409         MOV       A,#0x9
   \   00015E   78..         MOV       R0,#?V0
   \   000160   12....       LCALL     ?US_SHR
   \   000163   E5..         MOV       A,?V0
   \   000165   5403         ANL       A,#0x3
   \   000167   49           ORL       A,R1
   \   000168   F8           MOV       R0,A
   \   000169   7402         MOV       A,#0x2
   \   00016B   12....       LCALL     ?XSTACK_DISP0_8
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   48           ORL       A,R0
   \   000170   F0           MOVX      @DPTR,A
    458            osal_memcpy( &entryVector[entryLen], &securityOpt, sizeof ( uint8 ) );
   \   000171                ; Setup parameters for call to function osal_memcpy
   \   000171   7402         MOV       A,#0x2
   \   000173   12....       LCALL     ?XSTACK_DISP100_8
   \   000176   88..         MOV       ?V0,R0
   \   000178   89..         MOV       ?V1,R1
   \   00017A   75..00       MOV       ?V2,#0x0
   \   00017D   78..         MOV       R0,#?V0
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000182   7C01         MOV       R4,#0x1
   \   000184   7D00         MOV       R5,#0x0
   \   000186   7403         MOV       A,#0x3
   \   000188   12....       LCALL     ?XSTACK_DISP0_8
   \   00018B   E0           MOVX      A,@DPTR
   \   00018C   F8           MOV       R0,A
   \   00018D   740A         MOV       A,#0xa
   \   00018F   12....       LCALL     ?XSTACK_DISP0_8
   \   000192   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000195   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000198   12....       LCALL     ?DEALLOC_XSTACK8
    459            entryLen += sizeof ( uint8 );
   \   00019B   85..82       MOV       DPL,?XSP + 0
   \   00019E   85..83       MOV       DPH,?XSP + 1
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   04           INC       A
   \   0001A3   12....       LCALL     ?Subroutine1 & 0xFFFF
    460          
    461            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdSecCounter, sizeof( payload->gpdSecCounter ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_2:
   \   0001A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A9   7409         MOV       A,#0x9
   \   0001AB   12....       LCALL     ?XSTACK_DISP102_8
   \   0001AE   7904         MOV       R1,#0x4
   \   0001B0   EE           MOV       A,R6
   \   0001B1   241E         ADD       A,#0x1e
   \   0001B3   FA           MOV       R2,A
   \   0001B4   E4           CLR       A
   \   0001B5   3F           ADDC      A,R7
   \   0001B6   FB           MOV       R3,A
   \   0001B7   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0001BA   12....       LCALL     ?DEALLOC_XSTACK8
    462            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdKey, SEC_KEY_LEN, entryVector, &entryLen );
   \   0001BD                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001BD   78..         MOV       R0,#?V0
   \   0001BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C2   7409         MOV       A,#0x9
   \   0001C4   12....       LCALL     ?XSTACK_DISP102_8
   \   0001C7   7910         MOV       R1,#0x10
   \   0001C9   EE           MOV       A,R6
   \   0001CA   2422         ADD       A,#0x22
   \   0001CC   FA           MOV       R2,A
   \   0001CD   E4           CLR       A
   \   0001CE   3F           ADDC      A,R7
   \   0001CF   FB           MOV       R3,A
   \   0001D0   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0001D3   12....       LCALL     ?DEALLOC_XSTACK8
    463            
    464            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0001D6   EE           MOV       A,R6
   \   0001D7   2411         ADD       A,#0x11
   \   0001D9   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0001DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001DF   7409         MOV       A,#0x9
   \   0001E1   12....       LCALL     ?XSTACK_DISP102_8
   \   0001E4   7908         MOV       R1,#0x8
   \   0001E6   AA..         MOV       R2,?V0
   \   0001E8   AB..         MOV       R3,?V1
   \   0001EA   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0001ED   12....       LCALL     ?DEALLOC_XSTACK8
    465            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   0001F0   EE           MOV       A,R6
   \   0001F1   2419         ADD       A,#0x19
   \   0001F3   F5..         MOV       ?V2,A
   \   0001F5   E4           CLR       A
   \   0001F6   3F           ADDC      A,R7
   \   0001F7   F5..         MOV       ?V3,A
   \   0001F9                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001F9   A8..         MOV       R0,?XSP + 0
   \   0001FB   A9..         MOV       R1,?XSP + 1
   \   0001FD   88..         MOV       ?V8,R0
   \   0001FF   89..         MOV       ?V9,R1
   \   000201   78..         MOV       R0,#?V8
   \   000203   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000206   7409         MOV       A,#0x9
   \   000208   12....       LCALL     ?XSTACK_DISP102_8
   \   00020B   7902         MOV       R1,#0x2
   \   00020D   AA..         MOV       R2,?V2
   \   00020F   AB..         MOV       R3,?V3
   \   000211   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000214   12....       LCALL     ?DEALLOC_XSTACK8
    466            // to add the invalid entries
    467            osal_memset ( &payload->sinkIEEE, 0xFF, Z_EXTADDR_LEN );
   \   000217                ; Setup parameters for call to function osal_memset
   \   000217   7C08         MOV       R4,#0x8
   \   000219   7D00         MOV       R5,#0x0
   \   00021B   79FF         MOV       R1,#-0x1
   \   00021D   AA..         MOV       R2,?V0
   \   00021F   AB..         MOV       R3,?V1
   \   000221   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    468            payload->sinkNwkAddr = 0xFFFF;
   \   000224   85..82       MOV       DPL,?V2
   \   000227   85..83       MOV       DPH,?V3
   \   00022A   74FF         MOV       A,#-0x1
   \   00022C   F0           MOVX      @DPTR,A
   \   00022D   A3           INC       DPTR
   \   00022E   F0           MOVX      @DPTR,A
    469            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   00022F                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00022F   78..         MOV       R0,#?V8
   \   000231   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000234   7409         MOV       A,#0x9
   \   000236   12....       LCALL     ?XSTACK_DISP102_8
   \   000239   7908         MOV       R1,#0x8
   \   00023B   AA..         MOV       R2,?V0
   \   00023D   AB..         MOV       R3,?V1
   \   00023F   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000242   12....       LCALL     ?DEALLOC_XSTACK8
    470            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   000245                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000245   A8..         MOV       R0,?XSP + 0
   \   000247   A9..         MOV       R1,?XSP + 1
   \   000249   88..         MOV       ?V0,R0
   \   00024B   89..         MOV       ?V1,R1
   \   00024D   78..         MOV       R0,#?V0
   \   00024F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000252   7409         MOV       A,#0x9
   \   000254   12....       LCALL     ?XSTACK_DISP102_8
   \   000257   7902         MOV       R1,#0x2
   \   000259   AA..         MOV       R2,?V2
   \   00025B   AB..         MOV       R3,?V3
   \   00025D   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000260   12....       LCALL     ?DEALLOC_XSTACK8
    471            
    472            newSinkGroup = PROXY_TBL_GET_DGROUP( entryOptions & 0x00FF );
    473            newSinkGroup |= PROXY_TBL_GET_CGROUP( ( entryOptions & 0xFF00 ) >> 8 );
    474            osal_memset( &entryVector[entryLen], newSinkGroup, sizeof ( uint8 ) );
   \   000263                ; Setup parameters for call to function osal_memset
   \   000263   7C01         MOV       R4,#0x1
   \   000265   7D00         MOV       R5,#0x0
   \   000267   7403         MOV       A,#0x3
   \   000269   12....       LCALL     ?XSTACK_DISP0_8
   \   00026C   A3           INC       DPTR
   \   00026D   E0           MOVX      A,@DPTR
   \   00026E   5401         ANL       A,#0x1
   \   000270   FA           MOV       R2,A
   \   000271   7403         MOV       A,#0x3
   \   000273   12....       LCALL     ?XSTACK_DISP0_8
   \   000276   E0           MOVX      A,@DPTR
   \   000277   33           RLC       A
   \   000278   33           RLC       A
   \   000279   5401         ANL       A,#0x1
   \   00027B   4A           ORL       A,R2
   \   00027C   F9           MOV       R1,A
   \   00027D   85..82       MOV       DPL,?XSP + 0
   \   000280   85..83       MOV       DPH,?XSP + 1
   \   000283   E0           MOVX      A,@DPTR
   \   000284   FA           MOV       R2,A
   \   000285   7407         MOV       A,#0x7
   \   000287   12....       LCALL     ?XSTACK_DISP0_8
   \   00028A   E582         MOV       A,DPL
   \   00028C   2A           ADD       A,R2
   \   00028D   FA           MOV       R2,A
   \   00028E   E4           CLR       A
   \   00028F   3583         ADDC      A,DPH
   \   000291   FB           MOV       R3,A
   \   000292   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    475            entryLen++;
   \   000295   85..82       MOV       DPL,?XSP + 0
   \   000298   85..83       MOV       DPH,?XSP + 1
   \   00029B   E0           MOVX      A,@DPTR
   \   00029C   04           INC       A
   \   00029D   F0           MOVX      @DPTR,A
    476            
    477            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   00029E   EE           MOV       A,R6
   \   00029F   241B         ADD       A,#0x1b
   \   0002A1   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0002A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002A7   7409         MOV       A,#0x9
   \   0002A9   12....       LCALL     ?XSTACK_DISP102_8
   \   0002AC   7902         MOV       R1,#0x2
   \   0002AE   AA..         MOV       R2,?V0
   \   0002B0   AB..         MOV       R3,?V1
   \   0002B2   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0002B5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002B8   8E82         MOV       DPL,R6
   \   0002BA   8F83         MOV       DPH,R7
   \   0002BC   78..         MOV       R0,#?V8
   \   0002BE   12....       LCALL     ?L_MOV_X
   \   0002C1   E5..         MOV       A,?V8
   \   0002C3   C4           SWAP      A
   \   0002C4   13           RRC       A
   \   0002C5   5407         ANL       A,#0x7
   \   0002C7   5403         ANL       A,#0x3
   \   0002C9   F8           MOV       R0,A
   \   0002CA   7402         MOV       A,#0x2
   \   0002CC   68           XRL       A,R0
   \   0002CD   6005         JZ        ??gp_PairingUpdateProxyTlb_5
   \   0002CF   7401         MOV       A,#0x1
   \   0002D1   68           XRL       A,R0
   \   0002D2   7012         JNZ       ??gp_PairingUpdateProxyTlb_6
    478            if( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) || GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( payload->options ) )
    479            {
    480              gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_5:
   \   0002D4                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002D4   78..         MOV       R0,#?V2
   \   0002D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002D9   7409         MOV       A,#0x9
   \   0002DB   12....       LCALL     ?XSTACK_DISP102_8
   \   0002DE   7902         MOV       R1,#0x2
   \   0002E0   AA..         MOV       R2,?V6
   \   0002E2   AB..         MOV       R3,?V7
   \   0002E4   8011         SJMP      ??gp_PairingUpdateProxyTlb_7
    481            }
    482            else
    483            {
    484              gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_6:
   \   0002E6                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002E6   78..         MOV       R0,#?V2
   \   0002E8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002EB   7409         MOV       A,#0x9
   \   0002ED   12....       LCALL     ?XSTACK_DISP102_8
   \   0002F0   7902         MOV       R1,#0x2
   \   0002F2   7407         MOV       A,#0x7
   \   0002F4   12....       LCALL     ?XSTACK_DISP101_8
    485            }
   \                     ??gp_PairingUpdateProxyTlb_7:
   \   0002F7   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0002FA   12....       LCALL     ?DEALLOC_XSTACK8
    486            // to add the invalid entries
    487            payload->sinkGroupID = 0xFFFF;
   \   0002FD   85..82       MOV       DPL,?V0
   \   000300   85..83       MOV       DPH,?V1
   \   000303   74FF         MOV       A,#-0x1
   \   000305   F0           MOVX      @DPTR,A
   \   000306   A3           INC       DPTR
   \   000307   F0           MOVX      @DPTR,A
    488            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   000308                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000308   78..         MOV       R0,#?V2
   \   00030A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00030D   7409         MOV       A,#0x9
   \   00030F   12....       LCALL     ?XSTACK_DISP102_8
   \   000312   7902         MOV       R1,#0x2
   \   000314   AA..         MOV       R2,?V0
   \   000316   AB..         MOV       R3,?V1
   \   000318   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00031B   12....       LCALL     ?DEALLOC_XSTACK8
    489            gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \   00031E                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00031E   A8..         MOV       R0,?XSP + 0
   \   000320   A9..         MOV       R1,?XSP + 1
   \   000322   88..         MOV       ?V0,R0
   \   000324   89..         MOV       ?V1,R1
   \   000326   78..         MOV       R0,#?V0
   \   000328   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00032B   7409         MOV       A,#0x9
   \   00032D   12....       LCALL     ?XSTACK_DISP102_8
   \   000330   7902         MOV       R1,#0x2
   \   000332   7407         MOV       A,#0x7
   \   000334   12....       LCALL     ?XSTACK_DISP101_8
   \   000337   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00033A   12....       LCALL     ?DEALLOC_XSTACK8
    490          
    491            
    492            gp_PopulateProxyTblEntry( &payload->forwardingRadius, sizeof( payload->forwardingRadius ), entryVector, &entryLen );
   \   00033D                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00033D   78..         MOV       R0,#?V0
   \   00033F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000342   7409         MOV       A,#0x9
   \   000344   12....       LCALL     ?XSTACK_DISP102_8
   \   000347   7901         MOV       R1,#0x1
   \   000349   EE           MOV       A,R6
   \   00034A   2434         ADD       A,#0x34
   \   00034C   FA           MOV       R2,A
   \   00034D   E4           CLR       A
   \   00034E   3F           ADDC      A,R7
   \   00034F   FB           MOV       R3,A
   \   000350   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000353   12....       LCALL     ?DEALLOC_XSTACK8
    493           
    494            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( entryVector[0] ) == 0 ) && ( PROXY_TBL_GET_ENTRY_VALID( entryVector[0] ) == 0) )
   \   000356   85..82       MOV       DPL,?XSP + 0
   \   000359   85..83       MOV       DPH,?XSP + 1
   \   00035C   E0           MOVX      A,@DPTR
   \   00035D   F8           MOV       R0,A
   \   00035E   7407         MOV       A,#0x7
   \   000360   12....       LCALL     ?XSTACK_DISP0_8
   \   000363   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000366   7401         MOV       A,#0x1
   \   000368   12....       LCALL     ?XSTACK_DISP100_8
   \   00036B   88..         MOV       ?V0,R0
   \   00036D   89..         MOV       ?V1,R1
   \   00036F   75..00       MOV       ?V2,#0x0
   \   000372   E0           MOVX      A,@DPTR
   \   000373   5418         ANL       A,#0x18
   \   000375   6008         JZ        ??gp_PairingUpdateProxyTlb_8
    495            {
    496              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   000377                ; Setup parameters for call to function osal_memcpy
    497            }
    498            else
    499            {
    500              searchCounter = 0xFF;
   \   000377   7401         MOV       A,#0x1
   \   000379   12....       LCALL     ?XSTACK_DISP0_8
   \   00037C   74FF         MOV       A,#-0x1
   \   00037E   F0           MOVX      @DPTR,A
    501              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   00037F                ; Setup parameters for call to function osal_memcpy
   \                     ??gp_PairingUpdateProxyTlb_8:
   \   00037F   78..         MOV       R0,#?V0
   \   000381   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000384   7C01         MOV       R4,#0x1
   \   000386   7D00         MOV       R5,#0x0
    502            }
   \   000388   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00038B   12....       LCALL     ?DEALLOC_XSTACK8
    503            // Update the proxy table
    504            gp_UpdateProxyTlb( entryVector, addSink );
   \   00038E                ; Setup parameters for call to function gp_UpdateProxyTlb
   \   00038E   A9..         MOV       R1,?V4
   \   000390   7407         MOV       A,#0x7
   \   000392   12....       LCALL     ?XSTACK_DISP101_8
   \   000395   12....       LCALL     `??gp_UpdateProxyTlb::?relay`; Banked call to: gp_UpdateProxyTlb
    505          }
   \   000398   7448         MOV       A,#0x48
   \   00039A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00039D   7F0C         MOV       R7,#0xc
   \   00039F   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F5..         MOV       ?V0,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F5..         MOV       ?V1,A
   \   000006                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000006                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000006   A8..         MOV       R0,?XSP + 0
   \   000008   A9..         MOV       R1,?XSP + 1
   \   00000A   88..         MOV       ?V2,R0
   \   00000C   89..         MOV       ?V3,R1
   \   00000E   78..         MOV       R0,#?V2
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
    506          
    507          /*********************************************************************
    508           * @fn          gp_UpdateProxyTlb
    509           *
    510           * @brief       To update the proxy table NV vectors
    511           *
    512           * @param       pNpEntryew - New entry array to be added
    513           *
    514           * @return
    515           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    516          uint8 gp_UpdateProxyTlb( uint8* pEntry, uint8 addSink )
   \                     gp_UpdateProxyTlb:
    517          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 260
   \   000005   7582FC       MOV       DPL,#-0x4
   \   000008   7583FE       MOV       DPH,#-0x2
   \   00000B   12....       LCALL     ?ADD_XSTACK_DISP0_16
   \   00000E   89..         MOV       ?V3,R1
    518            uint8 i;
    519            uint8 newEntry[PROXY_TBL_ENTRY_LEN];
    520            uint8 currEntry[PROXY_TBL_ENTRY_LEN];
    521            uint16 proxyTableIndex;
    522            uint8 status;
    523            
    524            // Copy the new entry pointer to array
    525            osal_memcpy( &newEntry, pEntry, PROXY_TBL_ENTRY_LEN );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   75..00       MOV       ?V2,#0x0
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001C   7C41         MOV       R4,#0x41
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7444         MOV       A,#0x44
   \   000022   12....       LCALL     ?XSTACK_DISP101_8
   \   000025   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
    526          
    527            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00002B   7F00         MOV       R7,#0x0
    528            {
    529              proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
   \                     ??gp_UpdateProxyTlb_0:
   \   00002D   EF           MOV       A,R7
   \   00002E   2410         ADD       A,#0x10
   \   000030   F5..         MOV       ?V0,A
   \   000032   E4           CLR       A
   \   000033   3403         ADDC      A,#0x3
   \   000035   F5..         MOV       ?V1,A
    530              status = gp_getProxyTableByIndex( proxyTableIndex, currEntry );
   \   000037                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000037   AC..         MOV       R4,?XSP + 0
   \   000039   AD..         MOV       R5,?XSP + 1
   \   00003B   AA..         MOV       R2,?V0
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     ?Subroutine3 & 0xFFFF
    531          
    532              if ( status == NV_OPER_FAILED )
   \                     ??CrossCallReturnLabel_6:
   \   000041   7003         JNZ       $+5
   \   000043   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    533              {
    534                // FAIL
    535                return status;
    536              }
    537              
    538              // if the entry is empty
    539              if ( ( status == NV_INVALID_DATA ) && ( addSink == TRUE ) )
   \   000046   740D         MOV       A,#0xd
   \   000048   6E           XRL       A,R6
   \   000049   6003         JZ        $+5
   \   00004B   02....       LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
   \   00004E   7401         MOV       A,#0x1
   \   000050   65..         XRL       A,?V3
   \   000052   6003         JZ        $+5
   \   000054   02....       LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
    540              {
    541                // Save new entry
    542                status = osal_nv_write( proxyTableIndex, 0,
    543                                     PROXY_TBL_ENTRY_LEN, newEntry );
   \   000057                ; Setup parameters for call to function osal_nv_write
   \   000057   7441         MOV       A,#0x41
   \   000059   12....       LCALL     ?XSTACK_DISP100_8
   \   00005C   88..         MOV       ?V4,R0
   \   00005E   89..         MOV       ?V5,R1
   \   000060   78..         MOV       R0,#?V4
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   75..41       MOV       ?V4,#0x41
   \   000068   75..00       MOV       ?V5,#0x0
   \   00006B   78..         MOV       R0,#?V4
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7C00         MOV       R4,#0x0
   \   000072   7D00         MOV       R5,#0x0
   \   000074   AA..         MOV       R2,?V0
   \   000076   AB..         MOV       R3,?V1
   \   000078   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00007B   7404         MOV       A,#0x4
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   E9           MOV       A,R1
   \   000081   FE           MOV       R6,A
    544                
    545                if ( osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    546                     osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    547                     osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   000082   75....       MOV       ?V0,#(_NIB + 20) & 0xff
   \   000085   75....       MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
   \   000088                ; Setup parameters for call to function osal_memcmp
   \   000088   744C         MOV       A,#0x4c
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   A982         MOV       R1,DPL
   \   00008F   AA83         MOV       R2,DPH
   \   000091   89..         MOV       ?V4,R1
   \   000093   8A..         MOV       ?V5,R2
   \   000095   75..00       MOV       ?V6,#0x0
   \   000098   78..         MOV       R0,#?V4
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009D   12....       LCALL     ?Subroutine7 & 0xFFFF
    548                {
    549                  NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
    550                }
    551                return status;
    552              }
   \                     ??CrossCallReturnLabel_70:
   \   0000A0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A3   E9           MOV       A,R1
   \   0000A4   6003         JZ        $+5
   \   0000A6   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000A9                ; Setup parameters for call to function osal_memcmp
   \   0000A9   7478         MOV       A,#0x78
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   A982         MOV       R1,DPL
   \   0000B0   AA83         MOV       R2,DPH
   \   0000B2   89..         MOV       ?V4,R1
   \   0000B4   8A..         MOV       ?V5,R2
   \   0000B6   78..         MOV       R0,#?V4
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BB   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C1   E9           MOV       A,R1
   \   0000C2   6003         JZ        $+5
   \   0000C4   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000C7                ; Setup parameters for call to function osal_memcmp
   \   0000C7   747C         MOV       A,#0x7c
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   A982         MOV       R1,DPL
   \   0000CE   AA83         MOV       R2,DPH
   \   0000D0   89..         MOV       ?V4,R1
   \   0000D2   8A..         MOV       ?V5,R2
   \   0000D4   78..         MOV       R0,#?V4
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D9   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000DC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DF   E9           MOV       A,R1
   \   0000E0   6003         JZ        $+5
   \   0000E2   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000E5   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    553              
    554              if ( pt_lookForGpd( proxyTableIndex, newEntry ) )
   \                     ??gp_UpdateProxyTlb_2:
   \   0000E8                ; Setup parameters for call to function osal_memcpy
   \   0000E8   7441         MOV       A,#0x41
   \   0000EA   12....       LCALL     ?XSTACK_DISP100_8
   \   0000ED   88..         MOV       ?V4,R0
   \   0000EF   89..         MOV       ?V5,R1
   \   0000F1   75..00       MOV       ?V6,#0x0
   \   0000F4   78..         MOV       R0,#?V4
   \   0000F6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F9   7C41         MOV       R4,#0x41
   \   0000FB   7D00         MOV       R5,#0x0
   \   0000FD   74C6         MOV       A,#-0x3a
   \   0000FF   12....       LCALL     ?XSTACK_DISP101_8
   \   000102   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000105   12....       LCALL     ?DEALLOC_XSTACK8
   \   000108                ; Setup parameters for call to function osal_nv_read
   \   000108   7482         MOV       A,#-0x7e
   \   00010A   12....       LCALL     ?XSTACK_DISP100_8
   \   00010D   88..         MOV       ?V4,R0
   \   00010F   89..         MOV       ?V5,R1
   \   000111   78..         MOV       R0,#?V4
   \   000113   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000116   75..41       MOV       ?V4,#0x41
   \   000119   75..00       MOV       ?V5,#0x0
   \   00011C   78..         MOV       R0,#?V4
   \   00011E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000121   7C00         MOV       R4,#0x0
   \   000123   7D00         MOV       R5,#0x0
   \   000125   AA..         MOV       R2,?V0
   \   000127   AB..         MOV       R3,?V1
   \   000129   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00012C   7404         MOV       A,#0x4
   \   00012E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000131   E9           MOV       A,R1
   \   000132   703E         JNZ       ??gp_UpdateProxyTlb_4
   \   000134   74C3         MOV       A,#-0x3d
   \   000136   12....       LCALL     ?XSTACK_DISP0_8
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   5407         ANL       A,#0x7
   \   00013C   F8           MOV       R0,A
   \   00013D   7482         MOV       A,#-0x7e
   \   00013F   12....       LCALL     ?XSTACK_DISP0_8
   \   000142   E0           MOVX      A,@DPTR
   \   000143   5407         ANL       A,#0x7
   \   000145   68           XRL       A,R0
   \   000146   702A         JNZ       ??gp_UpdateProxyTlb_4
   \   000148                ; Setup parameters for call to function osal_memcmp
   \   000148   7484         MOV       A,#-0x7c
   \   00014A   12....       LCALL     ?XSTACK_DISP0_8
   \   00014D   A982         MOV       R1,DPL
   \   00014F   AA83         MOV       R2,DPH
   \   000151   89..         MOV       ?V4,R1
   \   000153   8A..         MOV       ?V5,R2
   \   000155   78..         MOV       R0,#?V4
   \   000157   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00015A   7C08         MOV       R4,#0x8
   \   00015C   7D00         MOV       R5,#0x0
   \   00015E   74C8         MOV       A,#-0x38
   \   000160   12....       LCALL     ?XSTACK_DISP0_8
   \   000163   A982         MOV       R1,DPL
   \   000165   AA83         MOV       R2,DPH
   \   000167   7B00         MOV       R3,#0x0
   \   000169   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00016C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016F   E9           MOV       A,R1
   \   000170   7015         JNZ       ??gp_UpdateProxyTlb_5
    555              {
    556                // Entry found
    557                break;
    558              }
    559              
    560              if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
   \                     ??gp_UpdateProxyTlb_4:
   \   000172   EF           MOV       A,R7
   \   000173   C3           CLR       C
   \   000174   9405         SUBB      A,#0x5
   \   000176   4005         JC        ??gp_UpdateProxyTlb_6
    561              {
    562                // No space for new entries
    563                return FAILURE;
   \   000178   7901         MOV       R1,#0x1
   \   00017A   02....       LJMP      ??gp_UpdateProxyTlb_7 & 0xFFFF
    564              }
    565            }
   \                     ??gp_UpdateProxyTlb_6:
   \   00017D   0F           INC       R7
   \   00017E   EF           MOV       A,R7
   \   00017F   C3           CLR       C
   \   000180   9406         SUBB      A,#0x6
   \   000182   5003         JNC       $+5
   \   000184   02....       LJMP      ??gp_UpdateProxyTlb_0 & 0xFFFF
    566            
    567            // Remove the entry
    568            if ( addSink == FALSE )
   \                     ??gp_UpdateProxyTlb_5:
   \   000187   E5..         MOV       A,?V3
   \   000189   7034         JNZ       ??gp_UpdateProxyTlb_8
    569            {
    570              gp_ResetProxyBasicTblEntry( currEntry );
   \   00018B                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   00018B   AA..         MOV       R2,?XSP + 0
   \   00018D   AB..         MOV       R3,?XSP + 1
   \   00018F   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
    571              
    572              status = osal_nv_write( proxyTableIndex, 0,
    573                               PROXY_TBL_ENTRY_LEN, currEntry );
   \   000192                ; Setup parameters for call to function osal_nv_write
   \   000192   A8..         MOV       R0,?XSP + 0
   \   000194   A9..         MOV       R1,?XSP + 1
   \   000196   88..         MOV       ?V4,R0
   \   000198   89..         MOV       ?V5,R1
   \   00019A   78..         MOV       R0,#?V4
   \   00019C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019F   75..41       MOV       ?V4,#0x41
   \   0001A2   75..00       MOV       ?V5,#0x0
   \   0001A5   78..         MOV       R0,#?V4
   \   0001A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AA   7C00         MOV       R4,#0x0
   \   0001AC   7D00         MOV       R5,#0x0
   \   0001AE   AA..         MOV       R2,?V0
   \   0001B0   AB..         MOV       R3,?V1
   \   0001B2   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001B5   7404         MOV       A,#0x4
   \   0001B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BA   E9           MOV       A,R1
   \   0001BB   FE           MOV       R6,A
   \   0001BC   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    574              return status;
    575            }
    576          
    577            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( newEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??gp_UpdateProxyTlb_8:
   \   0001BF   7441         MOV       A,#0x41
   \   0001C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C4   E0           MOVX      A,@DPTR
   \   0001C5   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001C7   4003         JC        $+5
   \   0001C9   02....       LJMP      ??gp_UpdateProxyTlb_9 & 0xFFFF
    578            {
    579              if ( ( !pt_updateLightweightUnicastSink( newEntry, currEntry, addSink ) ) )
   \   0001CC                ; Setup parameters for call to function pt_updateLightweightUnicastSink
   \   0001CC   A9..         MOV       R1,?V3
   \   0001CE   AC..         MOV       R4,?XSP + 0
   \   0001D0   AD..         MOV       R5,?XSP + 1
   \   0001D2   7441         MOV       A,#0x41
   \   0001D4   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D7   12....       LCALL     `??pt_updateLightweightUnicastSink::?relay`; Banked call to: pt_updateLightweightUnicastSink
   \   0001DA   E9           MOV       A,R1
   \   0001DB   7003         JNZ       $+5
   \   0001DD   02....       LJMP      ??gp_UpdateProxyTlb_10 & 0xFFFF
    580              {
    581                // The entry is full
    582                return NV_BAD_ITEM_LEN;
    583              }
    584            }
    585            else if ( PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
    586            {
    587              if ( ( !pt_addSinkGroup( newEntry, currEntry ) ) )
    588              {
    589                // The entry is full
    590                return NV_BAD_ITEM_LEN;
    591              }
    592            }
    593          
    594            if ( pt_getAlias( newEntry ) )
   \                     ??gp_UpdateProxyTlb_11:
   \   0001E0   7442         MOV       A,#0x42
   \   0001E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   A2E5         MOV       C,0xE0 /* A   */.5
   \   0001E8   5021         JNC       ??gp_UpdateProxyTlb_12
    595            {
    596              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_ALIAS], &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ) );
   \   0001EA                ; Setup parameters for call to function osal_memcpy
   \   0001EA   744C         MOV       A,#0x4c
   \   0001EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EF   A982         MOV       R1,DPL
   \   0001F1   AA83         MOV       R2,DPH
   \   0001F3   89..         MOV       ?V4,R1
   \   0001F5   8A..         MOV       ?V5,R2
   \   0001F7   78..         MOV       R0,#?V4
   \   0001F9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001FC   7C02         MOV       R4,#0x2
   \   0001FE   7D00         MOV       R5,#0x0
   \   000200   740E         MOV       A,#0xe
   \   000202   12....       LCALL     ?XSTACK_DISP0_8
   \   000205   12....       LCALL     ?Subroutine4 & 0xFFFF
    597            }
   \                     ??CrossCallReturnLabel_41:
   \   000208   12....       LCALL     ?DEALLOC_XSTACK8
    598              
    599            if ( pt_getSecurity( newEntry ) )
   \                     ??gp_UpdateProxyTlb_12:
   \   00020B   7442         MOV       A,#0x42
   \   00020D   12....       LCALL     ?XSTACK_DISP0_8
   \   000210   E0           MOVX      A,@DPTR
   \   000211   A2E6         MOV       C,0xE0 /* A   */.6
   \   000213   504B         JNC       ??gp_UpdateProxyTlb_13
    600            {
    601              PROXY_TBL_SET_SEC_USE( &currEntry[PROXY_TBL_ENTRY_OPT + 1] );
   \   000215   7401         MOV       A,#0x1
   \   000217   12....       LCALL     ?XSTACK_DISP0_8
   \   00021A   E0           MOVX      A,@DPTR
   \   00021B   D2E6         SETB      0xE0 /* A   */.6
   \   00021D   F0           MOVX      @DPTR,A
    602              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_OPT], &newEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ) );
   \   00021E                ; Setup parameters for call to function osal_memcpy
   \   00021E   744E         MOV       A,#0x4e
   \   000220   12....       LCALL     ?XSTACK_DISP0_8
   \   000223   A982         MOV       R1,DPL
   \   000225   AA83         MOV       R2,DPH
   \   000227   89..         MOV       ?V4,R1
   \   000229   8A..         MOV       ?V5,R2
   \   00022B   78..         MOV       R0,#?V4
   \   00022D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000230   7C01         MOV       R4,#0x1
   \   000232   7D00         MOV       R5,#0x0
   \   000234   7410         MOV       A,#0x10
   \   000236   12....       LCALL     ?XSTACK_DISP0_8
   \   000239   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00023C   12....       LCALL     ?DEALLOC_XSTACK8
    603              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_GPD_KEY], &newEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN );
   \   00023F                ; Setup parameters for call to function osal_memcpy
   \   00023F   7453         MOV       A,#0x53
   \   000241   12....       LCALL     ?XSTACK_DISP0_8
   \   000244   A982         MOV       R1,DPL
   \   000246   AA83         MOV       R2,DPH
   \   000248   89..         MOV       ?V4,R1
   \   00024A   8A..         MOV       ?V5,R2
   \   00024C   78..         MOV       R0,#?V4
   \   00024E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000251   7C10         MOV       R4,#0x10
   \   000253   7D00         MOV       R5,#0x0
   \   000255   7415         MOV       A,#0x15
   \   000257   12....       LCALL     ?XSTACK_DISP0_8
   \   00025A   12....       LCALL     ?Subroutine4 & 0xFFFF
    604            }
   \                     ??CrossCallReturnLabel_43:
   \   00025D   12....       LCALL     ?DEALLOC_XSTACK8
    605                   
    606            if ( pt_getSecFrameCounterCapabilities( newEntry ) )
   \                     ??gp_UpdateProxyTlb_13:
   \   000260   7441         MOV       A,#0x41
   \   000262   12....       LCALL     ?XSTACK_DISP0_8
   \   000265   E0           MOVX      A,@DPTR
   \   000266   A2E5         MOV       C,0xE0 /* A   */.5
   \   000268   500A         JNC       ??gp_UpdateProxyTlb_14
    607            {
    608              PROXY_TBL_SET_SEC_CAP( &currEntry[PROXY_TBL_ENTRY_OPT] );
   \   00026A   85..82       MOV       DPL,?XSP + 0
   \   00026D   85..83       MOV       DPH,?XSP + 1
   \   000270   E0           MOVX      A,@DPTR
   \   000271   D2E5         SETB      0xE0 /* A   */.5
   \   000273   F0           MOVX      @DPTR,A
    609            }
    610            
    611            osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_FRAME], &newEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ) );
   \                     ??gp_UpdateProxyTlb_14:
   \   000274                ; Setup parameters for call to function osal_memcpy
   \   000274   744F         MOV       A,#0x4f
   \   000276   12....       LCALL     ?XSTACK_DISP0_8
   \   000279   A982         MOV       R1,DPL
   \   00027B   AA83         MOV       R2,DPH
   \   00027D   89..         MOV       ?V4,R1
   \   00027F   8A..         MOV       ?V5,R2
   \   000281   78..         MOV       R0,#?V4
   \   000283   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000286   7C04         MOV       R4,#0x4
   \   000288   7D00         MOV       R5,#0x0
   \   00028A   7411         MOV       A,#0x11
   \   00028C   12....       LCALL     ?XSTACK_DISP0_8
   \   00028F   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000292   12....       LCALL     ?DEALLOC_XSTACK8
    612          
    613            currEntry[PROXY_TBL_ENTRY_GRP_RAD] = newEntry[PROXY_TBL_ENTRY_GRP_RAD];
   \   000295   7480         MOV       A,#-0x80
   \   000297   12....       LCALL     ?XSTACK_DISP0_8
   \   00029A   E0           MOVX      A,@DPTR
   \   00029B   C0E0         PUSH      A
   \   00029D   743F         MOV       A,#0x3f
   \   00029F   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A2   D0E0         POP       A
   \   0002A4   F0           MOVX      @DPTR,A
    614              
    615            currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER] = newEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER];
   \   0002A5   7481         MOV       A,#-0x7f
   \   0002A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AA   E0           MOVX      A,@DPTR
   \   0002AB   C0E0         PUSH      A
   \   0002AD   7440         MOV       A,#0x40
   \   0002AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B2   D0E0         POP       A
   \   0002B4   F0           MOVX      @DPTR,A
    616             
    617            status = osal_nv_write( proxyTableIndex, 0,
    618                               PROXY_TBL_ENTRY_LEN, currEntry );
   \   0002B5                ; Setup parameters for call to function osal_nv_write
   \   0002B5   A8..         MOV       R0,?XSP + 0
   \   0002B7   A9..         MOV       R1,?XSP + 1
   \   0002B9   88..         MOV       ?V4,R0
   \   0002BB   89..         MOV       ?V5,R1
   \   0002BD   78..         MOV       R0,#?V4
   \   0002BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002C2   75..41       MOV       ?V4,#0x41
   \   0002C5   75..00       MOV       ?V5,#0x0
   \   0002C8   78..         MOV       R0,#?V4
   \   0002CA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002CD   7C00         MOV       R4,#0x0
   \   0002CF   7D00         MOV       R5,#0x0
   \   0002D1   AA..         MOV       R2,?V0
   \   0002D3   AB..         MOV       R3,?V1
   \   0002D5   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0002D8   7404         MOV       A,#0x4
   \   0002DA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002DD   E9           MOV       A,R1
   \   0002DE   FE           MOV       R6,A
    619            
    620            if ( osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    621                 osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    622                 osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   0002DF   75....       MOV       ?V0,#(_NIB + 20) & 0xff
   \   0002E2   75....       MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
   \   0002E5                ; Setup parameters for call to function osal_memcmp
   \   0002E5   740B         MOV       A,#0xb
   \   0002E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002EA   A982         MOV       R1,DPL
   \   0002EC   AA83         MOV       R2,DPH
   \   0002EE   89..         MOV       ?V4,R1
   \   0002F0   8A..         MOV       ?V5,R2
   \   0002F2   78..         MOV       R0,#?V4
   \   0002F4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002F7   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0002FA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002FD   E9           MOV       A,R1
   \   0002FE   7036         JNZ       ??gp_UpdateProxyTlb_3
   \   000300                ; Setup parameters for call to function osal_memcmp
   \   000300   7437         MOV       A,#0x37
   \   000302   12....       LCALL     ?XSTACK_DISP0_8
   \   000305   A982         MOV       R1,DPL
   \   000307   AA83         MOV       R2,DPH
   \   000309   89..         MOV       ?V4,R1
   \   00030B   8A..         MOV       ?V5,R2
   \   00030D   78..         MOV       R0,#?V4
   \   00030F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000312   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000315   12....       LCALL     ?DEALLOC_XSTACK8
   \   000318   E9           MOV       A,R1
   \   000319   701B         JNZ       ??gp_UpdateProxyTlb_3
   \   00031B                ; Setup parameters for call to function osal_memcmp
   \   00031B   743B         MOV       A,#0x3b
   \   00031D   12....       LCALL     ?XSTACK_DISP0_8
   \   000320   A982         MOV       R1,DPL
   \   000322   AA83         MOV       R2,DPH
   \   000324   89..         MOV       ?V4,R1
   \   000326   8A..         MOV       ?V5,R2
   \   000328   78..         MOV       R0,#?V4
   \   00032A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00032D   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000330   12....       LCALL     ?DEALLOC_XSTACK8
   \   000333   E9           MOV       A,R1
   \   000334   600D         JZ        ??gp_UpdateProxyTlb_1
    623            {
    624              NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
   \                     ??gp_UpdateProxyTlb_3:
   \   000336                ; Setup parameters for call to function NLME_ReportAddressConflict
   \   000336   7901         MOV       R1,#0x1
   \   000338   90....       MOV       DPTR,#_NIB + 20
   \   00033B   E0           MOVX      A,@DPTR
   \   00033C   FA           MOV       R2,A
   \   00033D   A3           INC       DPTR
   \   00033E   E0           MOVX      A,@DPTR
   \   00033F   FB           MOV       R3,A
   \   000340   12....       LCALL     `??NLME_ReportAddressConflict::?relay`; Banked call to: NLME_ReportAddressConflict
    625            }
    626            
    627            return status;
   \                     ??gp_UpdateProxyTlb_1:
   \   000343   EE           MOV       A,R6
   \   000344   F9           MOV       R1,A
   \                     ??gp_UpdateProxyTlb_7:
   \   000345   758204       MOV       DPL,#0x4
   \   000348   758301       MOV       DPH,#0x1
   \   00034B   12....       LCALL     ?ADD_XSTACK_DISP0_16
   \   00034E   02....       LJMP      ?Subroutine0 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_9:
   \   000351   7442         MOV       A,#0x42
   \   000353   12....       LCALL     ?XSTACK_DISP0_8
   \   000356   E0           MOVX      A,@DPTR
   \   000357   A2E0         MOV       C,0xE0 /* A   */.0
   \   000359   4003         JC        $+5
   \   00035B   02....       LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
   \   00035E                ; Setup parameters for call to function pt_addSinkGroup
   \   00035E   AC..         MOV       R4,?XSP + 0
   \   000360   AD..         MOV       R5,?XSP + 1
   \   000362   7441         MOV       A,#0x41
   \   000364   12....       LCALL     ?XSTACK_DISP101_8
   \   000367   12....       LCALL     `??pt_addSinkGroup::?relay`; Banked call to: pt_addSinkGroup
   \   00036A   E9           MOV       A,R1
   \   00036B   6003         JZ        $+5
   \   00036D   02....       LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_10:
   \   000370   790C         MOV       R1,#0xc
   \   000372   80D1         SJMP      ??gp_UpdateProxyTlb_7
    628          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine11_0
   \   000004                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7C02         MOV       R4,#0x2
   \   000002                REQUIRE ??Subroutine12_0
   \   000002                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    629          
    630          /*********************************************************************
    631           * @fn          gp_CheckAnnouncedDevice
    632           *
    633           * @brief       General function to check if it has the announced device 
    634           *              listed in the SinkAddressList and look for address conflict
    635           *              resolution.
    636           *
    637           * @param       
    638           *
    639           * @return      
    640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    641          uint8 gp_CheckAnnouncedDevice ( uint8 *sinkIEEE, uint16 sinkNwkAddr )
   \                     gp_CheckAnnouncedDevice:
    642          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 67
   \   000005   74BD         MOV       A,#-0x43
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   8A..         MOV       ?V12,R2
   \   000017   8B..         MOV       ?V13,R3
    643            uint8 i;
    644            uint8 status;
    645            uint8 annceDelay;
    646            uint8 ProxyTableEntry[PROXY_TBL_ENTRY_LEN];
    647          
    648            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000019   7E00         MOV       R6,#0x0
   \   00001B   8A..         MOV       ?V4,R2
   \   00001D   8B..         MOV       ?V5,R3
   \   00001F   8E..         MOV       ?V6,R6
   \   000021   A8..         MOV       R0,?XSP + 0
   \   000023   A9..         MOV       R1,?XSP + 1
   \   000025   88..         MOV       ?V0,R0
   \   000027   89..         MOV       ?V1,R1
   \   000029   8E..         MOV       ?V2,R6
    649            {
    650              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), ProxyTableEntry );
   \                     ??gp_CheckAnnouncedDevice_0:
   \   00002B                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   EE           MOV       A,R6
   \   000031   2410         ADD       A,#0x10
   \   000033   FA           MOV       R2,A
   \   000034   E4           CLR       A
   \   000035   3403         ADDC      A,#0x3
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   00003B   E9           MOV       A,R1
   \   00003C   F8           MOV       R0,A
    651          
    652              if ( status == NV_OPER_FAILED )
   \   00003D   740A         MOV       A,#0xa
   \   00003F   68           XRL       A,R0
   \   000040   7005         JNZ       ??gp_CheckAnnouncedDevice_1
    653              {
    654                // FAIL
    655          
    656                return ZFailure;
   \   000042   7901         MOV       R1,#0x1
   \   000044   02....       LJMP      ??gp_CheckAnnouncedDevice_2 & 0xFFFF
    657              }
    658              
    659              // if the entry is empty
    660              if ( status == NV_INVALID_DATA )
   \                     ??gp_CheckAnnouncedDevice_1:
   \   000047   740D         MOV       A,#0xd
   \   000049   68           XRL       A,R0
   \   00004A   7003         JNZ       $+5
   \   00004C   02....       LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
    661              {
    662                continue;
    663              }
    664              
    665              // Compare for nwk alias address conflict
    666              if ( osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    667                   osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    668                   osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   00004F                ; Setup parameters for call to function osal_memcmp
   \   00004F   740D         MOV       A,#0xd
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   A982         MOV       R1,DPL
   \   000056   AA83         MOV       R2,DPH
   \   000058   89..         MOV       ?V8,R1
   \   00005A   8A..         MOV       ?V9,R2
   \   00005C   75..00       MOV       ?V10,#0x0
   \   00005F   78..         MOV       R0,#?V8
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006A   E9           MOV       A,R1
   \   00006B   7036         JNZ       ??gp_CheckAnnouncedDevice_4
   \   00006D                ; Setup parameters for call to function osal_memcmp
   \   00006D   7439         MOV       A,#0x39
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   A982         MOV       R1,DPL
   \   000074   AA83         MOV       R2,DPH
   \   000076   89..         MOV       ?V8,R1
   \   000078   8A..         MOV       ?V9,R2
   \   00007A   78..         MOV       R0,#?V8
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007F   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   E9           MOV       A,R1
   \   000086   701B         JNZ       ??gp_CheckAnnouncedDevice_4
   \   000088                ; Setup parameters for call to function osal_memcmp
   \   000088   743D         MOV       A,#0x3d
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   A982         MOV       R1,DPL
   \   00008F   AA83         MOV       R2,DPH
   \   000091   89..         MOV       ?V8,R1
   \   000093   8A..         MOV       ?V9,R2
   \   000095   78..         MOV       R0,#?V8
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009A   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV       A,R1
   \   0000A1   6077         JZ        ??gp_CheckAnnouncedDevice_5
    669              {
    670                // Do address conflict resolution
    671                NLME_SendNetworkStatus( NWK_BROADCAST_SHORTADDR_DEVRXON,
    672                                   sinkNwkAddr, NWKSTAT_ADDRESS_CONFLICT, TRUE );
   \                     ??gp_CheckAnnouncedDevice_4:
   \   0000A3                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   0000A3   75..01       MOV       ?V3,#0x1
   \   0000A6   78..         MOV       R0,#?V3
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AB   790D         MOV       R1,#0xd
   \   0000AD   7401         MOV       A,#0x1
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   FC           MOV       R4,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   FD           MOV       R5,A
   \   0000B7   7AFD         MOV       R2,#-0x3
   \   0000B9   7BFF         MOV       R3,#-0x1
   \   0000BB   12....       LCALL     `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   0000BE   7401         MOV       A,#0x1
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
    673                
    674                aliasConflictAnnce.nwkAddr = sinkNwkAddr;
   \   0000C3   85..82       MOV       DPL,?XSP + 0
   \   0000C6   85..83       MOV       DPH,?XSP + 1
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   F8           MOV       R0,A
   \   0000CB   A3           INC       DPTR
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F9           MOV       R1,A
   \   0000CE   90....       MOV       DPTR,#aliasConflictAnnce
   \   0000D1   E8           MOV       A,R0
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3   A3           INC       DPTR
   \   0000D4   E9           MOV       A,R1
   \   0000D5   F0           MOVX      @DPTR,A
    675                osal_memset( aliasConflictAnnce.extAddr, 0xFF, Z_EXTADDR_LEN );
   \   0000D6                ; Setup parameters for call to function osal_memset
   \   0000D6   7C08         MOV       R4,#0x8
   \   0000D8   7D00         MOV       R5,#0x0
   \   0000DA   79FF         MOV       R1,#-0x1
   \   0000DC   7A..         MOV       R2,#(aliasConflictAnnce + 2) & 0xff
   \   0000DE   7B..         MOV       R3,#((aliasConflictAnnce + 2) >> 8) & 0xff
   \   0000E0   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    676                aliasConflictAnnce.capabilities = 0;
   \   0000E3   90....       MOV       DPTR,#aliasConflictAnnce + 10
   \   0000E6   E4           CLR       A
   \   0000E7   F0           MOVX      @DPTR,A
    677                
    678                annceDelay = ( osal_rand()/650 ) + 5; // ( 65535/650 = 100 ) + 5 
   \   0000E8                ; Setup parameters for call to function osal_rand
   \   0000E8   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000EB   8A..         MOV       ?V8,R2
   \   0000ED   8B..         MOV       ?V9,R3
   \   0000EF   A8..         MOV       R0,?V8
   \   0000F1   A9..         MOV       R1,?V9
    679                // where:
    680                // 100 is Dmax
    681                // 5   is Dmin
    682                osal_start_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT, annceDelay );
   \   0000F3                ; Setup parameters for call to function osal_start_timerEx
   \   0000F3   7A8A         MOV       R2,#-0x76
   \   0000F5   7B02         MOV       R3,#0x2
   \   0000F7   12....       LCALL     ?US_DIV_MOD
   \   0000FA   E8           MOV       A,R0
   \   0000FB   2405         ADD       A,#0x5
   \   0000FD   F5..         MOV       ?V8,A
   \   0000FF   E4           CLR       A
   \   000100   F5..         MOV       ?V9,A
   \   000102   F5..         MOV       ?V11,A
   \   000104   78..         MOV       R0,#?V8
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000109   7A10         MOV       R2,#0x10
   \   00010B   7B00         MOV       R3,#0x0
   \   00010D   90....       MOV       DPTR,#gp_TaskID
   \   000110   E0           MOVX      A,@DPTR
   \   000111   F9           MOV       R1,A
   \   000112   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000115   7404         MOV       A,#0x4
   \   000117   12....       LCALL     ?DEALLOC_XSTACK8
    683              }
    684          
    685              if( sinkIEEE )
   \                     ??gp_CheckAnnouncedDevice_5:
   \   00011A   E5..         MOV       A,?V12
   \   00011C   45..         ORL       A,?V13
   \   00011E   7003         JNZ       $+5
   \   000120   02....       LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
    686              {
    687                //Check if one of the Sink IEEE is the same
    688                if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \   000123                ; Setup parameters for call to function osal_memcmp
   \   000123   7424         MOV       A,#0x24
   \   000125   12....       LCALL     ?XSTACK_DISP0_8
   \   000128   A982         MOV       R1,DPL
   \   00012A   AA83         MOV       R2,DPH
   \   00012C   89..         MOV       ?V8,R1
   \   00012E   8A..         MOV       ?V9,R2
   \   000130   78..         MOV       R0,#?V8
   \   000132   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000135   7C08         MOV       R4,#0x8
   \   000137   7D00         MOV       R5,#0x0
   \   000139   A9..         MOV       R1,?V4
   \   00013B   AA..         MOV       R2,?V5
   \   00013D   AB..         MOV       R3,?V6
   \   00013F   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000142   12....       LCALL     ?DEALLOC_XSTACK8
   \   000145   E9           MOV       A,R1
   \   000146   6028         JZ        ??gp_CheckAnnouncedDevice_6
    689                {
    690                  // If Nwk address is different, then update the new address
    691                  if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   000148                ; Setup parameters for call to function osal_memcmp
   \   000148   742C         MOV       A,#0x2c
   \   00014A   12....       LCALL     ?XSTACK_DISP0_8
   \   00014D   A982         MOV       R1,DPL
   \   00014F   AA83         MOV       R2,DPH
   \   000151   89..         MOV       ?V8,R1
   \   000153   8A..         MOV       ?V9,R2
   \   000155   78..         MOV       R0,#?V8
   \   000157   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00015A   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00015D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000160   E9           MOV       A,R1
   \   000161   7061         JNZ       ??gp_CheckAnnouncedDevice_3
    692                  {
    693                    osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   000163                ; Setup parameters for call to function osal_memcpy
   \   000163   78..         MOV       R0,#?V0
   \   000165   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000168   7C02         MOV       R4,#0x2
   \   00016A   7D00         MOV       R5,#0x0
   \   00016C   742F         MOV       A,#0x2f
   \   00016E   804B         SJMP      ??gp_CheckAnnouncedDevice_7
    694                  }
    695                }
    696                else if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \                     ??gp_CheckAnnouncedDevice_6:
   \   000170                ; Setup parameters for call to function osal_memcmp
   \   000170   742E         MOV       A,#0x2e
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   A982         MOV       R1,DPL
   \   000177   AA83         MOV       R2,DPH
   \   000179   89..         MOV       ?V8,R1
   \   00017B   8A..         MOV       ?V9,R2
   \   00017D   78..         MOV       R0,#?V8
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000182   7C08         MOV       R4,#0x8
   \   000184   7D00         MOV       R5,#0x0
   \   000186   A9..         MOV       R1,?V4
   \   000188   AA..         MOV       R2,?V5
   \   00018A   AB..         MOV       R3,?V6
   \   00018C   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00018F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000192   E9           MOV       A,R1
   \   000193   602F         JZ        ??gp_CheckAnnouncedDevice_3
    697                {
    698                  // If Nwk address is different, then update the new address
    699                  if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   000195                ; Setup parameters for call to function osal_memcmp
   \   000195   7436         MOV       A,#0x36
   \   000197   12....       LCALL     ?XSTACK_DISP0_8
   \   00019A   A982         MOV       R1,DPL
   \   00019C   AA83         MOV       R2,DPH
   \   00019E   89..         MOV       ?V8,R1
   \   0001A0   8A..         MOV       ?V9,R2
   \   0001A2   78..         MOV       R0,#?V8
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001A7   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0001AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AD   E9           MOV       A,R1
   \   0001AE   7014         JNZ       ??gp_CheckAnnouncedDevice_3
    700                  {
    701                    osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   0001B0                ; Setup parameters for call to function osal_memcpy
   \   0001B0   78..         MOV       R0,#?V0
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B5   7C02         MOV       R4,#0x2
   \   0001B7   7D00         MOV       R5,#0x0
   \   0001B9   7439         MOV       A,#0x39
   \                     ??gp_CheckAnnouncedDevice_7:
   \   0001BB   12....       LCALL     ?XSTACK_DISP0_8
    702                  }
    703                }
    704              }
    705            }
   \   0001BE   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0001C1   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??gp_CheckAnnouncedDevice_3:
   \   0001C4   0E           INC       R6
   \   0001C5   EE           MOV       A,R6
   \   0001C6   C3           CLR       C
   \   0001C7   9406         SUBB      A,#0x6
   \   0001C9   5003         JNC       $+5
   \   0001CB   02....       LJMP      ??gp_CheckAnnouncedDevice_0 & 0xFFFF
    706              
    707            return ZSuccess;
   \   0001CE   7900         MOV       R1,#0x0
   \                     ??gp_CheckAnnouncedDevice_2:
   \   0001D0   7443         MOV       A,#0x43
   \   0001D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D5   7F0E         MOV       R7,#0xe
   \   0001D7   02....       LJMP      ?BANKED_LEAVE_XDATA
    708          }
    709          
    710           /*********************************************************************
    711           * PRIVATE FUNCTIONS
    712           *********************************************************************/
    713          
    714          /*********************************************************************
    715           * @fn          gp_PopulateProxyTblEntry
    716           *
    717           * @brief       Populate the given item data
    718           *
    719           * @param       pData - Pointer to the new data
    720           *              size - size of the new data
    721           *              pTblEntryVector - Pointer to the new vector
    722           *              vectorLen - Position in the vector to write the data
    723           *
    724           * @return
    725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    726          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen )
   \                     gp_PopulateProxyTblEntry:
    727          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8C..         MOV       ?V0,R4
   \   000009   8D..         MOV       ?V1,R5
   \   00000B   740F         MOV       A,#0xf
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FE           MOV       R6,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FF           MOV       R7,A
    728            pTblEntryVector += *(uint8*)vectorLen;
    729            
    730            osal_memcpy( pTblEntryVector, pData, size );
   \   000015                ; Setup parameters for call to function osal_memcpy
   \   000015   8A..         MOV       ?V4,R2
   \   000017   8B..         MOV       ?V5,R3
   \   000019   75..00       MOV       ?V6,#0x0
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000021   AC..         MOV       R4,?V2
   \   000023   7D00         MOV       R5,#0x0
   \   000025   8E82         MOV       DPL,R6
   \   000027   8F83         MOV       DPH,R7
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F8           MOV       R0,A
   \   00002B   E5..         MOV       A,?V0
   \   00002D   28           ADD       A,R0
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   35..         ADDC      A,?V1
   \   000032   FB           MOV       R3,A
   \   000033   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000036   12....       LCALL     ?DEALLOC_XSTACK8
    731            *(uint8*)vectorLen += size;
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   25..         ADD       A,?V2
   \   000040   F0           MOVX      @DPTR,A
    732          }
   \   000041   02....       LJMP      ?Subroutine0 & 0xFFFF
    733          
    734          /*********************************************************************
    735           * @fn          pt_getAlias
    736           *
    737           * @brief       Get Bit to update assigned alias field or not
    738           *
    739           * @param       pNew - New entry array to be added
    740           *
    741           * @return      newAlias - TRUE if assigned alias bit is set
    742           */
    743          static uint8 pt_getAlias( uint8* pNew )
    744          {
    745            bool newAlias;
    746            
    747            newAlias = PROXY_TBL_GET_ASSIGNED_ALIAS( pNew[PROXY_TBL_ENTRY_OPT + 1] );
    748            
    749            return newAlias;
    750          }
    751          
    752          /*********************************************************************
    753           * @fn          pt_getSecurity
    754           *
    755           * @brief       Get Bit to update security options field or not
    756           *
    757           * @param       pNew - New entry array to be added
    758           *
    759           * @return      secUse - TRUE if security use bit is set
    760           */
    761          static uint8 pt_getSecurity( uint8* pNew )
    762          {
    763            bool secUse;
    764            
    765            secUse = PROXY_TBL_GET_SEC_USE( pNew[PROXY_TBL_ENTRY_OPT + 1] );
    766          
    767            return secUse;
    768          }
    769          
    770          /*********************************************************************
    771           * @fn          pt_getSecFrameCounterCapabilities
    772           *
    773           * @brief       Get Bit to update security frame counter capabilities
    774           *
    775           * @param       pNew - New entry array to be added
    776           *
    777           * @return      secCap - TRUE if security frame counter capabilities bit is set
    778           */
    779          static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew )
    780          {
    781            bool secCap;
    782            
    783            secCap = PROXY_TBL_GET_SEC_CAP( pNew[PROXY_TBL_ENTRY_OPT] );
    784            
    785            return secCap;
    786          }
    787          
    788          /*********************************************************************
    789           * @fn          pt_updateLightweightUnicastSink
    790           *
    791           * @brief       To add new sink entry
    792           *
    793           * @param       pNew - New entry array to be added
    794           *              pCurr - The current entry array in the proxy table
    795           *
    796           * @return      TRUE new entry added, FALSE if not
    797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    798          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink )
   \                     pt_updateLightweightUnicastSink:
    799          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV       A,#-0x17
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 142
   \   000005   7472         MOV       A,#0x72
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   E9           MOV       A,R1
   \   000016   FE           MOV       R6,A
    800            uint8 newEntry[PROXY_TBL_ENTRY_LEN];
    801            uint8 currEntry[PROXY_TBL_ENTRY_LEN];
    802            uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000017   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
   \   00001A   7402         MOV       A,#0x2
   \   00001C   12....       LCALL     ?XSTACK_DISP102_8
   \   00001F   740A         MOV       A,#0xa
   \   000021   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    803            
    804            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   000024                ; Setup parameters for call to function osal_memcpy
   \   000024   8A..         MOV       ?V0,R2
   \   000026   8B..         MOV       ?V1,R3
   \   000028   F5..         MOV       ?V2,A
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00002F   7C41         MOV       R4,#0x41
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7450         MOV       A,#0x50
   \   000035   12....       LCALL     ?XSTACK_DISP101_8
   \   000038   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
    805            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   00003E                ; Setup parameters for call to function osal_memcpy
   \   00003E   85..82       MOV       DPL,?XSP + 0
   \   000041   85..83       MOV       DPH,?XSP + 1
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F5..         MOV       ?V0,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F5..         MOV       ?V1,A
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000050   7C41         MOV       R4,#0x41
   \   000052   7D00         MOV       R5,#0x0
   \   000054   740F         MOV       A,#0xf
   \   000056   12....       LCALL     ?XSTACK_DISP101_8
   \   000059   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
    806            
    807            
    808            // if addSink is TRUE then add the sink to current entry
    809            if ( addSink ) 
   \   00005F   7438         MOV       A,#0x38
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   A982         MOV       R1,DPL
   \   000066   AA83         MOV       R2,DPH
   \   000068   89..         MOV       ?V8,R1
   \   00006A   8A..         MOV       ?V9,R2
   \   00006C   75..00       MOV       ?V10,#0x0
   \   00006F   742E         MOV       A,#0x2e
   \   000071   12....       LCALL     ?XSTACK_DISP0_8
   \   000074   A982         MOV       R1,DPL
   \   000076   AA83         MOV       R2,DPH
   \   000078   89..         MOV       ?V4,R1
   \   00007A   8A..         MOV       ?V5,R2
   \   00007C   75..00       MOV       ?V6,#0x0
   \   00007F   746F         MOV       A,#0x6f
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   A982         MOV       R1,DPL
   \   000086   AA83         MOV       R2,DPH
   \   000088   89..         MOV       ?V0,R1
   \   00008A   8A..         MOV       ?V1,R2
   \   00008C   7402         MOV       A,#0x2
   \   00008E   12....       LCALL     ?XSTACK_DISP100_8
   \   000091   88..         MOV       ?V12,R0
   \   000093   89..         MOV       ?V13,R1
   \   000095   75..00       MOV       ?V14,#0x0
   \   000098   EE           MOV       A,R6
   \   000099   78..         MOV       R0,#?V0
   \   00009B   6058         JZ        ??pt_updateLightweightUnicastSink_0
    810            {
    811              // if the incomming Sink entry is different to the current entry
    812              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   00009D                ; Setup parameters for call to function osal_memcmp
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A0   7C0A         MOV       R4,#0xa
   \   0000A2   7D00         MOV       R5,#0x0
   \   0000A4   A9..         MOV       R1,?V4
   \   0000A6   AA..         MOV       R2,?V5
   \   0000A8   AB..         MOV       R3,?V6
   \   0000AA   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B0   E9           MOV       A,R1
   \   0000B1   6003         JZ        $+5
   \   0000B3   02....       LJMP      ??pt_updateLightweightUnicastSink_1 & 0xFFFF
    813              {
    814                // add the sink entry in the next slot if empty
    815                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000B6                ; Setup parameters for call to function osal_memcmp
   \   0000B6   78..         MOV       R0,#?V8
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BB   7C0A         MOV       R4,#0xa
   \   0000BD   7D00         MOV       R5,#0x0
   \   0000BF   A9..         MOV       R1,?V12
   \   0000C1   AA..         MOV       R2,?V13
   \   0000C3   AB..         MOV       R3,?V14
   \   0000C5   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000C8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CB   E9           MOV       A,R1
   \   0000CC   78..         MOV       R0,#?V0
   \   0000CE   6006         JZ        ??pt_updateLightweightUnicastSink_2
    816                {
    817                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN );
   \   0000D0                ; Setup parameters for call to function osal_memcpy
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D3   02....       LJMP      ??pt_updateLightweightUnicastSink_3 & 0xFFFF
    818                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    819                  return TRUE;
    820                }
    821              }
    822              else 
    823              {
    824                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    825               return TRUE;
    826              }
    827              // if the incomming Sink entry is different to the current entry
    828              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_updateLightweightUnicastSink_2:
   \   0000D6                ; Setup parameters for call to function osal_memcmp
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D9   7C0A         MOV       R4,#0xa
   \   0000DB   7D00         MOV       R5,#0x0
   \   0000DD   A9..         MOV       R1,?V8
   \   0000DF   AA..         MOV       R2,?V9
   \   0000E1   AB..         MOV       R3,?V10
   \   0000E3   12....       LCALL     ??Subroutine13_0 & 0xFFFF
    829              {
    830                return FALSE;
    831              }
    832            }
   \                     ??CrossCallReturnLabel_87:
   \   0000E6   12....       LCALL     ?DEALLOC_XSTACK8
    833            else
    834            {
    835              // if the incomming Sink entry is the same to the current entry
    836              if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    837              {
    838                // Move the next sink entry to current
    839                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN );
    840                // Invalidate the sink entry
    841                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    842                
    843                // if the sink entry is empty then remove the proxy table entry
    844                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    845                {
    846                  gp_ResetProxyBasicTblEntry( currEntry );
    847                }
    848                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    849                return TRUE;
    850              }
    851              // if the incomming Sink entry is the same to the current entry
    852              else if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    853              {
    854                // Invalidate the sink entry
    855                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    856                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    857                return TRUE;
    858              }
    859            }
    860            return FALSE;
   \                     ??pt_updateLightweightUnicastSink_4:
   \   0000E9   7900         MOV       R1,#0x0
   \                     ??pt_updateLightweightUnicastSink_5:
   \   0000EB   748E         MOV       A,#-0x72
   \   0000ED   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F0   7F0F         MOV       R7,#0xf
   \   0000F2   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??pt_updateLightweightUnicastSink_0:
   \   0000F5                ; Setup parameters for call to function osal_memcmp
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F8   7C0A         MOV       R4,#0xa
   \   0000FA   7D00         MOV       R5,#0x0
   \   0000FC   A9..         MOV       R1,?V4
   \   0000FE   AA..         MOV       R2,?V5
   \   000100   AB..         MOV       R3,?V6
   \   000102   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000105   12....       LCALL     ?DEALLOC_XSTACK8
   \   000108   E9           MOV       A,R1
   \   000109   606F         JZ        ??pt_updateLightweightUnicastSink_6
   \   00010B                ; Setup parameters for call to function osal_memcpy
   \   00010B   78..         MOV       R0,#?V8
   \   00010D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000110   7C0A         MOV       R4,#0xa
   \   000112   7D00         MOV       R5,#0x0
   \   000114   7431         MOV       A,#0x31
   \   000116   12....       LCALL     ?XSTACK_DISP0_8
   \   000119   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00011C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011F                ; Setup parameters for call to function osal_memcpy
   \   00011F   78..         MOV       R0,#?V12
   \   000121   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000124   7C0A         MOV       R4,#0xa
   \   000126   7D00         MOV       R5,#0x0
   \   000128   743B         MOV       A,#0x3b
   \   00012A   12....       LCALL     ?XSTACK_DISP0_8
   \   00012D   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000130   12....       LCALL     ?DEALLOC_XSTACK8
   \   000133                ; Setup parameters for call to function osal_memcmp
   \   000133   78..         MOV       R0,#?V4
   \   000135   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000138   7C0A         MOV       R4,#0xa
   \   00013A   7D00         MOV       R5,#0x0
   \   00013C   A9..         MOV       R1,?V12
   \   00013E   AA..         MOV       R2,?V13
   \   000140   AB..         MOV       R3,?V14
   \   000142   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000145   12....       LCALL     ?DEALLOC_XSTACK8
   \   000148   E9           MOV       A,R1
   \   000149   6008         JZ        ??pt_updateLightweightUnicastSink_1
   \   00014B                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   00014B   740C         MOV       A,#0xc
   \   00014D   12....       LCALL     ?XSTACK_DISP101_8
   \   000150   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
   \                     ??pt_updateLightweightUnicastSink_1:
   \   000153                ; Setup parameters for call to function osal_memcpy
   \   000153   740C         MOV       A,#0xc
   \   000155   12....       LCALL     ?XSTACK_DISP100_8
   \   000158   88..         MOV       ?V0,R0
   \   00015A   89..         MOV       ?V1,R1
   \   00015C   78..         MOV       R0,#?V0
   \   00015E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000161   7C41         MOV       R4,#0x41
   \   000163   7D00         MOV       R5,#0x0
   \   000165   7403         MOV       A,#0x3
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   FA           MOV       R2,A
   \   00016C   A3           INC       DPTR
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   FB           MOV       R3,A
   \   00016F   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000172   12....       LCALL     ?DEALLOC_XSTACK8
   \   000175   7901         MOV       R1,#0x1
   \   000177   02....       LJMP      ??pt_updateLightweightUnicastSink_5 & 0xFFFF
   \                     ??pt_updateLightweightUnicastSink_6:
   \   00017A                ; Setup parameters for call to function osal_memcmp
   \   00017A   78..         MOV       R0,#?V0
   \   00017C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00017F   7C0A         MOV       R4,#0xa
   \   000181   7D00         MOV       R5,#0x0
   \   000183   A9..         MOV       R1,?V8
   \   000185   AA..         MOV       R2,?V9
   \   000187   AB..         MOV       R3,?V10
   \   000189   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00018C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018F   E9           MOV       A,R1
   \   000190   7003         JNZ       $+5
   \   000192   02....       LJMP      ??pt_updateLightweightUnicastSink_4 & 0xFFFF
   \   000195                ; Setup parameters for call to function osal_memcpy
   \   000195   78..         MOV       R0,#?V12
   \   000197   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \                     ??pt_updateLightweightUnicastSink_3:
   \   00019A   7C0A         MOV       R4,#0xa
   \   00019C   7D00         MOV       R5,#0x0
   \   00019E   743B         MOV       A,#0x3b
   \   0001A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A3   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0001A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A9   80A8         SJMP      ??pt_updateLightweightUnicastSink_1
    861          }
    862          
    863          /*********************************************************************
    864           * @fn          pt_addSinkGroup
    865           *
    866           * @brief       To add new sink group entry
    867           *
    868           * @param       pNew - New entry array to be added
    869           *              pCurr - The current entry array in the proxy table
    870           *
    871           * @return      TRUE new entry added, FALSE if not
    872           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    873          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr )
   \                     pt_addSinkGroup:
    874          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 130
   \   000005   747E         MOV       A,#0x7e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    875            bool newSinkGroup;
    876            uint8 newEntry[PROXY_TBL_ENTRY_LEN];
    877            uint8 currEntry[PROXY_TBL_ENTRY_LEN];
    878            
    879            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   00000E                ; Setup parameters for call to function osal_memcpy
   \   00000E   8A..         MOV       ?V0,R2
   \   000010   8B..         MOV       ?V1,R3
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001A   7C41         MOV       R4,#0x41
   \   00001C   7D00         MOV       R5,#0x0
   \   00001E   7444         MOV       A,#0x44
   \   000020   12....       LCALL     ?XSTACK_DISP101_8
   \   000023   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000026   12....       LCALL     ?DEALLOC_XSTACK8
    880            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   000029                ; Setup parameters for call to function osal_memcpy
   \   000029   8E..         MOV       ?V0,R6
   \   00002B   8F..         MOV       ?V1,R7
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000032   7C41         MOV       R4,#0x41
   \   000034   7D00         MOV       R5,#0x0
   \   000036   7403         MOV       A,#0x3
   \   000038   12....       LCALL     ?XSTACK_DISP101_8
   \   00003B   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
    881            
    882            newSinkGroup = PROXY_TBL_GET_DGROUP( newEntry[PROXY_TBL_ENTRY_OPT] );
    883            newSinkGroup = PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
    884            
    885            if ( newSinkGroup )
    886            {
    887              if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \   000041   7442         MOV       A,#0x42
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   E0           MOVX      A,@DPTR
   \   000047   A2E0         MOV       C,0xE0 /* A   */.0
   \   000049   507C         JNC       ??pt_addSinkGroup_0
   \   00004B   7436         MOV       A,#0x36
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   E0           MOVX      A,@DPTR
   \   000051   A2E1         MOV       C,0xE0 /* A   */.1
   \   000053   4072         JC        ??pt_addSinkGroup_0
    888              {
    889                if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \   000055   7478         MOV       A,#0x78
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   A982         MOV       R1,DPL
   \   00005C   AA83         MOV       R2,DPH
   \   00005E   89..         MOV       ?V4,R1
   \   000060   8A..         MOV       ?V5,R2
   \   000062   75..00       MOV       ?V6,#0x0
   \   000065   A8..         MOV       R0,?XSP + 0
   \   000067   A9..         MOV       R1,?XSP + 1
   \   000069   88..         MOV       ?V0,R0
   \   00006B   89..         MOV       ?V1,R1
   \   00006D   7436         MOV       A,#0x36
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   E0           MOVX      A,@DPTR
   \   000073   A2E0         MOV       C,0xE0 /* A   */.0
   \   000075   78..         MOV       R0,#?V4
   \   000077   401C         JC        ??pt_addSinkGroup_1
    890                {
    891                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007C   7C04         MOV       R4,#0x4
   \   00007E   7D00         MOV       R5,#0x0
   \   000080   743A         MOV       A,#0x3a
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000088   12....       LCALL     ?DEALLOC_XSTACK8
    892                  SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT );
   \   00008B   7436         MOV       A,#0x36
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   E0           MOVX      A,@DPTR
   \   000091   D2E0         SETB      0xE0 /* A   */.0
   \   000093   801A         SJMP      ??pt_addSinkGroup_2
    893                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    894                  return TRUE;
    895                }
    896                else
    897                {
    898                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
   \                     ??pt_addSinkGroup_1:
   \   000095                ; Setup parameters for call to function osal_memcpy
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000098   7C04         MOV       R4,#0x4
   \   00009A   7D00         MOV       R5,#0x0
   \   00009C   743E         MOV       A,#0x3e
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000A4   12....       LCALL     ?DEALLOC_XSTACK8
    899                  SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT );
   \   0000A7   7436         MOV       A,#0x36
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   D2E1         SETB      0xE0 /* A   */.1
   \                     ??pt_addSinkGroup_2:
   \   0000AF   F0           MOVX      @DPTR,A
    900                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
   \   0000B0                ; Setup parameters for call to function osal_memcpy
   \   0000B0   78..         MOV       R0,#?V0
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B5   7C41         MOV       R4,#0x41
   \   0000B7   7D00         MOV       R5,#0x0
   \   0000B9   EE           MOV       A,R6
   \   0000BA   FA           MOV       R2,A
   \   0000BB   EF           MOV       A,R7
   \   0000BC   FB           MOV       R3,A
   \   0000BD   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
    901                  return TRUE;
   \   0000C3   7901         MOV       R1,#0x1
   \   0000C5   8002         SJMP      ??pt_addSinkGroup_3
    902                }
    903              }
    904            }
    905            return FALSE;
   \                     ??pt_addSinkGroup_0:
   \   0000C7   7900         MOV       R1,#0x0
   \                     ??pt_addSinkGroup_3:
   \   0000C9   7482         MOV       A,#-0x7e
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CE                REQUIRE ?Subroutine0
   \   0000CE                ; // Fall through to label ?Subroutine0
    906          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10000:
   \   000000   00000100     DD 65536
    907          
    908          /*********************************************************************
    909           * @fn          pt_lookForGpd
    910           *
    911           * @brief       To see if the GPD id is in this NV entry
    912           *
    913           * @param       currProxyEntryId - NV ID of the proxy table
    914           *              pNew - New tabble entry array to be added
    915           *
    916           * @return      TRUE if the GPD has an entry in current NV vector
    917           */
    918          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew )
    919          {
    920            uint8 rtrn;
    921          
    922            uint8 newEntry[PROXY_TBL_ENTRY_LEN];
    923            uint8 currEntry[PROXY_TBL_ENTRY_LEN];
    924          
    925            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
    926            
    927            rtrn = osal_nv_read( currProxyEntryId, 0,
    928                                       PROXY_TBL_ENTRY_LEN, currEntry );
    929            
    930            if ( rtrn != SUCCESS )
    931            {
    932              return FALSE;
    933            }
    934          
    935            if ( PROXY_TBL_COMP_APPLICTION_ID( newEntry[PROXY_TBL_ENTRY_OPT], currEntry[PROXY_TBL_ENTRY_OPT] ) )
    936            {
    937              if ( osal_memcmp( &newEntry[PROXY_TBL_ENTRY_GPD_ID], &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
    938              {
    939              return TRUE;
    940              }
    941            }
    942            return FALSE;
    943          }
    944          
    945          #endif
    946          /*********************************************************************
    947          *********************************************************************/
    948          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     93   gp_CheckAnnouncedDevice
        0     90   -> NLME_SendNetworkStatus
        0     89   -> gp_getProxyTableByIndex
        0     92   -> osal_memcmp
        0     92   -> osal_memcpy
        0     89   -> osal_memset
        0     89   -> osal_rand
        0     93   -> osal_start_timerEx
      0     95   gp_PairingUpdateProxyTlb
        0     94   -> gp_PopulateProxyTblEntry
        0     92   -> gp_ResetProxyBasicTblEntry
        0     92   -> gp_UpdateProxyTlb
        0     92   -> gp_pairingSetProxyTblOptions
        0     95   -> osal_memcpy
        0     92   -> osal_memset
      0    190   gp_PopulateProxyTblEntry
        0     18   -> osal_memcpy
      1    371   gp_UpdateProxyTlb
        0    275   -> NLME_ReportAddressConflict
        0    275   -> gp_ResetProxyBasicTblEntry
        0    275   -> gp_getProxyTableByIndex
        0    278   -> osal_memcmp
        0    278   -> osal_memcpy
        0    279   -> osal_nv_read
        0    279   -> osal_nv_write
        0    275   -> pt_addSinkGroup
        0    275   -> pt_updateLightweightUnicastSink
      1    110   gp_pairingSetProxyTblOptions
      1    187   pt_ZclReadGetProxyEntry
        0    172   -> gp_PopulateProxyTblEntry
        0    170   -> gp_getProxyTableByIndex
        0    173   -> osal_memcmp
        0    173   -> osal_memcpy
      0    423   pt_addSinkGroup
        0    148   -> osal_memcpy
      0    443   pt_updateLightweightUnicastSink
        0    165   -> gp_ResetProxyBasicTblEntry
        0    168   -> osal_memcmp
        0    168   -> osal_memcpy
      0     18   zclGpp_ReadWriteAttrCB
        0     14   -> pt_ZclReadGetProxyEntry


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,_1
       6  ??Subroutine10_0
       6  ??Subroutine11_0
       8  ??Subroutine12_0
       6  ??Subroutine13_0
       5  ?Subroutine0
      12  ?Subroutine1
      10  ?Subroutine2
       9  ?Subroutine3
       4  ?Subroutine4
       4  ?Subroutine5
       9  ?Subroutine6
       2  ?Subroutine7
      17  ?Subroutine8
       9  ?Subroutine9
       4  __Constant_10000
      11  aliasConflictAnnce
     474  gp_CheckAnnouncedDevice
     930  gp_PairingUpdateProxyTlb
      68  gp_PopulateProxyTblEntry
     884  gp_UpdateProxyTlb
     280  gp_pairingSetProxyTblOptions
    1113  pt_ZclReadGetProxyEntry
     206  pt_addSinkGroup
     427  pt_updateLightweightUnicastSink
     100  zclGpp_ReadWriteAttrCB
      54  -- Other

 
 4 589 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
    26 bytes in segment XDATA_ROM_C
    11 bytes in segment XDATA_Z
 
    54 bytes of CODE     memory
    22 bytes of CONST    memory (+ 4 bytes shared)
 4 589 bytes of HUGECODE memory
    11 bytes of XDATA    memory

Errors: none
Warnings: none
